
MCS03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006ce  00802000  00008b12  00008ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f5  008026ce  008026ce  00009274  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000092d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00009310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008118  00000000  00000000  00009430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037dc  00000000  00000000  00011548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f7a  00000000  00000000  00014d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  00018ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000406f  00000000  00000000  00019378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001996  00000000  00000000  0001d3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0001ed7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__ctors_end>
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_16>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      50:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_20>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 7d 3c 	jmp	0x78fa	; 0x78fa <__vector_25>
      68:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      6c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      70:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      7c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      80:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      84:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      8c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      90:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      94:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      98:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      fc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     100:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <__vector_64>
     104:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__vector_65>
     108:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     10c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     110:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     114:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     118:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     11c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     120:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     124:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     128:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     12c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     130:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     134:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     138:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     13c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     140:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     144:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     148:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     14c:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__vector_83>
     150:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     154:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     158:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     15c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     160:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     164:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     168:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     16c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     170:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     174:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     178:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     17c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     180:	0c 94 4a 34 	jmp	0x6894	; 0x6894 <__vector_96>
     184:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     188:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     18c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     190:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     194:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     198:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     19c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_118>
     1dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

000001f4 <__trampolines_end>:
     1f4:	4e 41       	sbci	r20, 0x1E	; 30
     1f6:	4e 49       	Address 0x000001f6 is out of bounds.
.word	0xffff	; ????

000001f7 <pstr_inity>:
     1f7:	49 4e 49 54 59                                      INITY

000001fc <pstr_inf>:
     1fc:	49 4e 46                                            INF

000001ff <pwr_m10>:
     1ff:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     20f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000217 <pwr_p10>:
     217:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     227:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000230 <__ctors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df e3       	ldi	r29, 0x3F	; 63
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60
     240:	18 be       	out	0x38, r1	; 56
     242:	19 be       	out	0x39, r1	; 57
     244:	1a be       	out	0x3a, r1	; 58
     246:	1b be       	out	0x3b, r1	; 59

00000248 <__do_copy_data>:
     248:	16 e2       	ldi	r17, 0x26	; 38
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	e2 e1       	ldi	r30, 0x12	; 18
     250:	fb e8       	ldi	r31, 0x8B	; 139
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	ae 3c       	cpi	r26, 0xCE	; 206
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>
     262:	1b be       	out	0x3b, r1	; 59

00000264 <__do_clear_bss>:
     264:	29 e2       	ldi	r18, 0x29	; 41
     266:	ae ec       	ldi	r26, 0xCE	; 206
     268:	b6 e2       	ldi	r27, 0x26	; 38
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	a3 3c       	cpi	r26, 0xC3	; 195
     270:	b2 07       	cpc	r27, r18
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>
     274:	0e 94 ba 3c 	call	0x7974	; 0x7974 <main>
     278:	0c 94 87 45 	jmp	0x8b0e	; 0x8b0e <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <_Z10ports_initv>:
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
     280:	e0 e0       	ldi	r30, 0x00	; 0
     282:	f6 e0       	ldi	r31, 0x06	; 6
     284:	14 82       	std	Z+4, r1	; 0x04
     286:	80 ec       	ldi	r24, 0xC0	; 192
     288:	80 83       	st	Z, r24
     28a:	10 8a       	std	Z+16, r1	; 0x10
     28c:	11 8a       	std	Z+17, r1	; 0x11
     28e:	12 8a       	std	Z+18, r1	; 0x12
     290:	13 8a       	std	Z+19, r1	; 0x13
     292:	14 8a       	std	Z+20, r1	; 0x14
     294:	15 8a       	std	Z+21, r1	; 0x15
     296:	16 8a       	std	Z+22, r1	; 0x16
     298:	17 8a       	std	Z+23, r1	; 0x17
     29a:	81 85       	ldd	r24, Z+9	; 0x09
     29c:	80 7f       	andi	r24, 0xF0	; 240
     29e:	81 87       	std	Z+9, r24	; 0x09
     2a0:	12 86       	std	Z+10, r1	; 0x0a
     2a2:	13 86       	std	Z+11, r1	; 0x0b
     2a4:	e0 e2       	ldi	r30, 0x20	; 32
     2a6:	f6 e0       	ldi	r31, 0x06	; 6
     2a8:	14 82       	std	Z+4, r1	; 0x04
     2aa:	80 e9       	ldi	r24, 0x90	; 144
     2ac:	80 83       	st	Z, r24
     2ae:	10 8a       	std	Z+16, r1	; 0x10
     2b0:	11 8a       	std	Z+17, r1	; 0x11
     2b2:	12 8a       	std	Z+18, r1	; 0x12
     2b4:	13 8a       	std	Z+19, r1	; 0x13
     2b6:	14 8a       	std	Z+20, r1	; 0x14
     2b8:	15 8a       	std	Z+21, r1	; 0x15
     2ba:	16 8a       	std	Z+22, r1	; 0x16
     2bc:	17 8a       	std	Z+23, r1	; 0x17
     2be:	81 85       	ldd	r24, Z+9	; 0x09
     2c0:	80 7f       	andi	r24, 0xF0	; 240
     2c2:	81 87       	std	Z+9, r24	; 0x09
     2c4:	12 86       	std	Z+10, r1	; 0x0a
     2c6:	13 86       	std	Z+11, r1	; 0x0b
     2c8:	e0 e4       	ldi	r30, 0x40	; 64
     2ca:	f6 e0       	ldi	r31, 0x06	; 6
     2cc:	88 e8       	ldi	r24, 0x88	; 136
     2ce:	84 83       	std	Z+4, r24	; 0x04
     2d0:	98 e0       	ldi	r25, 0x08	; 8
     2d2:	90 83       	st	Z, r25
     2d4:	10 8a       	std	Z+16, r1	; 0x10
     2d6:	11 8a       	std	Z+17, r1	; 0x11
     2d8:	12 8a       	std	Z+18, r1	; 0x12
     2da:	13 8a       	std	Z+19, r1	; 0x13
     2dc:	14 8a       	std	Z+20, r1	; 0x14
     2de:	15 8a       	std	Z+21, r1	; 0x15
     2e0:	16 8a       	std	Z+22, r1	; 0x16
     2e2:	17 8a       	std	Z+23, r1	; 0x17
     2e4:	81 85       	ldd	r24, Z+9	; 0x09
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	81 87       	std	Z+9, r24	; 0x09
     2ea:	12 86       	std	Z+10, r1	; 0x0a
     2ec:	13 86       	std	Z+11, r1	; 0x0b
     2ee:	e0 e6       	ldi	r30, 0x60	; 96
     2f0:	f6 e0       	ldi	r31, 0x06	; 6
     2f2:	14 82       	std	Z+4, r1	; 0x04
     2f4:	10 82       	st	Z, r1
     2f6:	10 8a       	std	Z+16, r1	; 0x10
     2f8:	11 8a       	std	Z+17, r1	; 0x11
     2fa:	12 8a       	std	Z+18, r1	; 0x12
     2fc:	13 8a       	std	Z+19, r1	; 0x13
     2fe:	14 8a       	std	Z+20, r1	; 0x14
     300:	15 8a       	std	Z+21, r1	; 0x15
     302:	16 8a       	std	Z+22, r1	; 0x16
     304:	17 8a       	std	Z+23, r1	; 0x17
     306:	81 85       	ldd	r24, Z+9	; 0x09
     308:	80 7f       	andi	r24, 0xF0	; 240
     30a:	85 60       	ori	r24, 0x05	; 5
     30c:	81 87       	std	Z+9, r24	; 0x09
     30e:	92 87       	std	Z+10, r25	; 0x0a
     310:	86 e0       	ldi	r24, 0x06	; 6
     312:	83 87       	std	Z+11, r24	; 0x0b
     314:	e0 e8       	ldi	r30, 0x80	; 128
     316:	f6 e0       	ldi	r31, 0x06	; 6
     318:	14 82       	std	Z+4, r1	; 0x04
     31a:	86 eb       	ldi	r24, 0xB6	; 182
     31c:	80 83       	st	Z, r24
     31e:	10 8a       	std	Z+16, r1	; 0x10
     320:	11 8a       	std	Z+17, r1	; 0x11
     322:	12 8a       	std	Z+18, r1	; 0x12
     324:	13 8a       	std	Z+19, r1	; 0x13
     326:	14 8a       	std	Z+20, r1	; 0x14
     328:	15 8a       	std	Z+21, r1	; 0x15
     32a:	16 8a       	std	Z+22, r1	; 0x16
     32c:	17 8a       	std	Z+23, r1	; 0x17
     32e:	81 85       	ldd	r24, Z+9	; 0x09
     330:	80 7f       	andi	r24, 0xF0	; 240
     332:	81 87       	std	Z+9, r24	; 0x09
     334:	12 86       	std	Z+10, r1	; 0x0a
     336:	13 86       	std	Z+11, r1	; 0x0b
     338:	e0 ea       	ldi	r30, 0xA0	; 160
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	14 82       	std	Z+4, r1	; 0x04
     33e:	81 e4       	ldi	r24, 0x41	; 65
     340:	80 83       	st	Z, r24
     342:	10 8a       	std	Z+16, r1	; 0x10
     344:	11 8a       	std	Z+17, r1	; 0x11
     346:	12 8a       	std	Z+18, r1	; 0x12
     348:	13 8a       	std	Z+19, r1	; 0x13
     34a:	14 8a       	std	Z+20, r1	; 0x14
     34c:	15 8a       	std	Z+21, r1	; 0x15
     34e:	16 8a       	std	Z+22, r1	; 0x16
     350:	17 8a       	std	Z+23, r1	; 0x17
     352:	81 85       	ldd	r24, Z+9	; 0x09
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	81 87       	std	Z+9, r24	; 0x09
     358:	12 86       	std	Z+10, r1	; 0x0a
     35a:	13 86       	std	Z+11, r1	; 0x0b
     35c:	e0 ee       	ldi	r30, 0xE0	; 224
     35e:	f6 e0       	ldi	r31, 0x06	; 6
     360:	14 82       	std	Z+4, r1	; 0x04
     362:	8c ef       	ldi	r24, 0xFC	; 252
     364:	80 83       	st	Z, r24
     366:	10 8a       	std	Z+16, r1	; 0x10
     368:	11 8a       	std	Z+17, r1	; 0x11
     36a:	12 8a       	std	Z+18, r1	; 0x12
     36c:	13 8a       	std	Z+19, r1	; 0x13
     36e:	14 8a       	std	Z+20, r1	; 0x14
     370:	15 8a       	std	Z+21, r1	; 0x15
     372:	16 8a       	std	Z+22, r1	; 0x16
     374:	17 8a       	std	Z+23, r1	; 0x17
     376:	81 85       	ldd	r24, Z+9	; 0x09
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	81 60       	ori	r24, 0x01	; 1
     37c:	81 87       	std	Z+9, r24	; 0x09
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	82 87       	std	Z+10, r24	; 0x0a
     382:	13 86       	std	Z+11, r1	; 0x0b
     384:	e0 e0       	ldi	r30, 0x00	; 0
     386:	f7 e0       	ldi	r31, 0x07	; 7
     388:	14 82       	std	Z+4, r1	; 0x04
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	80 83       	st	Z, r24
     38e:	10 8a       	std	Z+16, r1	; 0x10
     390:	11 8a       	std	Z+17, r1	; 0x11
     392:	12 8a       	std	Z+18, r1	; 0x12
     394:	13 8a       	std	Z+19, r1	; 0x13
     396:	14 8a       	std	Z+20, r1	; 0x14
     398:	15 8a       	std	Z+21, r1	; 0x15
     39a:	16 8a       	std	Z+22, r1	; 0x16
     39c:	17 8a       	std	Z+23, r1	; 0x17
     39e:	81 85       	ldd	r24, Z+9	; 0x09
     3a0:	80 7f       	andi	r24, 0xF0	; 240
     3a2:	81 87       	std	Z+9, r24	; 0x09
     3a4:	12 86       	std	Z+10, r1	; 0x0a
     3a6:	13 86       	std	Z+11, r1	; 0x0b
     3a8:	e0 e2       	ldi	r30, 0x20	; 32
     3aa:	f7 e0       	ldi	r31, 0x07	; 7
     3ac:	14 82       	std	Z+4, r1	; 0x04
     3ae:	8f e3       	ldi	r24, 0x3F	; 63
     3b0:	80 83       	st	Z, r24
     3b2:	10 8a       	std	Z+16, r1	; 0x10
     3b4:	11 8a       	std	Z+17, r1	; 0x11
     3b6:	12 8a       	std	Z+18, r1	; 0x12
     3b8:	13 8a       	std	Z+19, r1	; 0x13
     3ba:	14 8a       	std	Z+20, r1	; 0x14
     3bc:	15 8a       	std	Z+21, r1	; 0x15
     3be:	16 8a       	std	Z+22, r1	; 0x16
     3c0:	17 8a       	std	Z+23, r1	; 0x17
     3c2:	81 85       	ldd	r24, Z+9	; 0x09
     3c4:	80 7f       	andi	r24, 0xF0	; 240
     3c6:	81 87       	std	Z+9, r24	; 0x09
     3c8:	12 86       	std	Z+10, r1	; 0x0a
     3ca:	13 86       	std	Z+11, r1	; 0x0b
     3cc:	e0 ec       	ldi	r30, 0xC0	; 192
     3ce:	f7 e0       	ldi	r31, 0x07	; 7
     3d0:	14 82       	std	Z+4, r1	; 0x04
     3d2:	10 82       	st	Z, r1
     3d4:	10 8a       	std	Z+16, r1	; 0x10
     3d6:	11 8a       	std	Z+17, r1	; 0x11
     3d8:	12 8a       	std	Z+18, r1	; 0x12
     3da:	13 8a       	std	Z+19, r1	; 0x13
     3dc:	81 85       	ldd	r24, Z+9	; 0x09
     3de:	80 7f       	andi	r24, 0xF0	; 240
     3e0:	81 87       	std	Z+9, r24	; 0x09
     3e2:	12 86       	std	Z+10, r1	; 0x0a
     3e4:	13 86       	std	Z+11, r1	; 0x0b
     3e6:	e0 ee       	ldi	r30, 0xE0	; 224
     3e8:	f7 e0       	ldi	r31, 0x07	; 7
     3ea:	14 82       	std	Z+4, r1	; 0x04
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	80 83       	st	Z, r24
     3f0:	10 8a       	std	Z+16, r1	; 0x10
     3f2:	11 8a       	std	Z+17, r1	; 0x11
     3f4:	81 85       	ldd	r24, Z+9	; 0x09
     3f6:	80 7f       	andi	r24, 0xF0	; 240
     3f8:	81 87       	std	Z+9, r24	; 0x09
     3fa:	12 86       	std	Z+10, r1	; 0x0a
     3fc:	13 86       	std	Z+11, r1	; 0x0b
     3fe:	08 95       	ret

00000400 <_Z9spif_initv>:
     400:	e0 ec       	ldi	r30, 0xC0	; 192
     402:	fb e0       	ldi	r31, 0x0B	; 11
     404:	80 e4       	ldi	r24, 0x40	; 64
     406:	80 83       	st	Z, r24
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	81 83       	std	Z+1, r24	; 0x01
     40c:	08 95       	ret

0000040e <__vector_118>:
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	0f 92       	push	r0
     416:	11 24       	eor	r1, r1
     418:	08 b6       	in	r0, 0x38	; 56
     41a:	0f 92       	push	r0
     41c:	18 be       	out	0x38, r1	; 56
     41e:	09 b6       	in	r0, 0x39	; 57
     420:	0f 92       	push	r0
     422:	19 be       	out	0x39, r1	; 57
     424:	0a b6       	in	r0, 0x3a	; 58
     426:	0f 92       	push	r0
     428:	1a be       	out	0x3a, r1	; 58
     42a:	0b b6       	in	r0, 0x3b	; 59
     42c:	0f 92       	push	r0
     42e:	1b be       	out	0x3b, r1	; 59
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	8f 93       	push	r24
     436:	9f 93       	push	r25
     438:	af 93       	push	r26
     43a:	bf 93       	push	r27
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
     444:	e0 ec       	ldi	r30, 0xC0	; 192
     446:	fb e0       	ldi	r31, 0x0B	; 11
     448:	82 81       	ldd	r24, Z+2	; 0x02
     44a:	93 81       	ldd	r25, Z+3	; 0x03
     44c:	80 91 8c 28 	lds	r24, 0x288C	; 0x80288c <Responsing>
     450:	81 11       	cpse	r24, r1
     452:	2b c0       	rjmp	.+86     	; 0x4aa <__vector_118+0x9c>
     454:	9d 30       	cpi	r25, 0x0D	; 13
     456:	79 f0       	breq	.+30     	; 0x476 <__vector_118+0x68>
     458:	99 23       	and	r25, r25
     45a:	f1 f1       	breq	.+124    	; 0x4d8 <__vector_118+0xca>
     45c:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <indexBR>
     460:	84 36       	cpi	r24, 0x64	; 100
     462:	d0 f5       	brcc	.+116    	; 0x4d8 <__vector_118+0xca>
     464:	e8 2f       	mov	r30, r24
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	ee 50       	subi	r30, 0x0E	; 14
     46a:	f7 4d       	sbci	r31, 0xD7	; 215
     46c:	90 83       	st	Z, r25
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <indexBR>
     474:	31 c0       	rjmp	.+98     	; 0x4d8 <__vector_118+0xca>
     476:	ce e8       	ldi	r28, 0x8E	; 142
     478:	d8 e2       	ldi	r29, 0x28	; 40
     47a:	a2 ef       	ldi	r26, 0xF2	; 242
     47c:	b8 e2       	ldi	r27, 0x28	; 40
     47e:	86 e5       	ldi	r24, 0x56	; 86
     480:	99 e2       	ldi	r25, 0x29	; 41
     482:	fd 01       	movw	r30, r26
     484:	20 81       	ld	r18, Z
     486:	29 93       	st	Y+, r18
     488:	11 92       	st	Z+, r1
     48a:	8e 17       	cp	r24, r30
     48c:	9f 07       	cpc	r25, r31
     48e:	d1 f7       	brne	.-12     	; 0x484 <__vector_118+0x76>
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	20 93 8b 28 	sts	0x288B, r18	; 0x80288b <cmdIsReady>
     496:	1d 92       	st	X+, r1
     498:	8a 17       	cp	r24, r26
     49a:	9b 07       	cpc	r25, r27
     49c:	e1 f7       	brne	.-8      	; 0x496 <__vector_118+0x88>
     49e:	84 e6       	ldi	r24, 0x64	; 100
     4a0:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <h>
     4a4:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <indexBR>
     4a8:	17 c0       	rjmp	.+46     	; 0x4d8 <__vector_118+0xca>
     4aa:	80 91 56 29 	lds	r24, 0x2956	; 0x802956 <indexBS>
     4ae:	84 36       	cpi	r24, 0x64	; 100
     4b0:	28 f4       	brcc	.+10     	; 0x4bc <__vector_118+0xae>
     4b2:	e8 2f       	mov	r30, r24
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	e9 5a       	subi	r30, 0xA9	; 169
     4b8:	f6 4d       	sbci	r31, 0xD6	; 214
     4ba:	30 81       	ld	r19, Z
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	80 93 56 29 	sts	0x2956, r24	; 0x802956 <indexBS>
     4c2:	85 36       	cpi	r24, 0x65	; 101
     4c4:	49 f4       	brne	.+18     	; 0x4d8 <__vector_118+0xca>
     4c6:	e0 ea       	ldi	r30, 0xA0	; 160
     4c8:	f6 e0       	ldi	r31, 0x06	; 6
     4ca:	84 81       	ldd	r24, Z+4	; 0x04
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	84 83       	std	Z+4, r24	; 0x04
     4d0:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <Responsing>
     4d4:	10 92 56 29 	sts	0x2956, r1	; 0x802956 <indexBS>
     4d8:	30 93 c3 0b 	sts	0x0BC3, r19	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	bf 91       	pop	r27
     4e6:	af 91       	pop	r26
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0b be       	out	0x3b, r0	; 59
     4f4:	0f 90       	pop	r0
     4f6:	0a be       	out	0x3a, r0	; 58
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <_Z9spie_initv>:
     50a:	e0 ec       	ldi	r30, 0xC0	; 192
     50c:	fa e0       	ldi	r31, 0x0A	; 10
     50e:	83 e5       	ldi	r24, 0x53	; 83
     510:	80 83       	st	Z, r24
     512:	11 82       	std	Z+1, r1	; 0x01
     514:	08 95       	ret

00000516 <_Z17spie_master_tx_rxh>:
     516:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     51a:	e0 ec       	ldi	r30, 0xC0	; 192
     51c:	fa e0       	ldi	r31, 0x0A	; 10
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	88 23       	and	r24, r24
     522:	ec f7       	brge	.-6      	; 0x51e <_Z17spie_master_tx_rxh+0x8>
     524:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     528:	08 95       	ret

0000052a <_Z4ltoblPc>:
     52a:	fa 01       	movw	r30, r20
     52c:	60 83       	st	Z, r22
     52e:	71 83       	std	Z+1, r23	; 0x01
     530:	82 83       	std	Z+2, r24	; 0x02
     532:	93 83       	std	Z+3, r25	; 0x03
     534:	08 95       	ret

00000536 <_Z4btolPc>:
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	fc 01       	movw	r30, r24
     53c:	03 81       	ldd	r16, Z+3	; 0x03
     53e:	10 e0       	ldi	r17, 0x00	; 0
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	30 2f       	mov	r19, r16
     546:	22 27       	eor	r18, r18
     548:	11 27       	eor	r17, r17
     54a:	00 27       	eor	r16, r16
     54c:	42 81       	ldd	r20, Z+2	; 0x02
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	ba 01       	movw	r22, r20
     556:	55 27       	eor	r21, r21
     558:	44 27       	eor	r20, r20
     55a:	04 0f       	add	r16, r20
     55c:	15 1f       	adc	r17, r21
     55e:	26 1f       	adc	r18, r22
     560:	37 1f       	adc	r19, r23
     562:	41 81       	ldd	r20, Z+1	; 0x01
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	76 2f       	mov	r23, r22
     56c:	65 2f       	mov	r22, r21
     56e:	54 2f       	mov	r21, r20
     570:	44 27       	eor	r20, r20
     572:	d9 01       	movw	r26, r18
     574:	c8 01       	movw	r24, r16
     576:	84 0f       	add	r24, r20
     578:	95 1f       	adc	r25, r21
     57a:	a6 1f       	adc	r26, r22
     57c:	b7 1f       	adc	r27, r23
     57e:	20 81       	ld	r18, Z
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	62 0f       	add	r22, r18
     586:	71 1d       	adc	r23, r1
     588:	81 1d       	adc	r24, r1
     58a:	91 1d       	adc	r25, r1
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <_Z10ReadConfigv>:
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <_Z10ReadConfigv+0x16>
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <fk>
     5b2:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <fk+0x1>
     5b6:	10 92 87 28 	sts	0x2887, r1	; 0x802887 <fk+0x2>
     5ba:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <fk+0x3>
     5be:	10 92 83 28 	sts	0x2883, r1	; 0x802883 <ft>
     5c2:	10 92 84 28 	sts	0x2884, r1	; 0x802884 <ft+0x1>
     5c6:	10 92 82 28 	sts	0x2882, r1	; 0x802882 <fadd1>
     5ca:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <fadd2>
     5ce:	e0 e8       	ldi	r30, 0x80	; 128
     5d0:	f6 e0       	ldi	r31, 0x06	; 6
     5d2:	84 81       	ldd	r24, Z+4	; 0x04
     5d4:	80 61       	ori	r24, 0x10	; 16
     5d6:	84 83       	std	Z+4, r24	; 0x04
     5d8:	84 81       	ldd	r24, Z+4	; 0x04
     5da:	8f 7e       	andi	r24, 0xEF	; 239
     5dc:	84 83       	std	Z+4, r24	; 0x04
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     5e4:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
     5e8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     5ec:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
     5f0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     5fa:	0d eb       	ldi	r16, 0xBD	; 189
     5fc:	17 e2       	ldi	r17, 0x27	; 39
     5fe:	e1 2c       	mov	r14, r1
     600:	f1 2c       	mov	r15, r1
     602:	0f 2e       	mov	r0, r31
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	af 2e       	mov	r10, r31
     608:	f0 e2       	ldi	r31, 0x20	; 32
     60a:	bf 2e       	mov	r11, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	0f 2e       	mov	r0, r31
     610:	f2 e2       	ldi	r31, 0x22	; 34
     612:	cf 2e       	mov	r12, r31
     614:	f0 e2       	ldi	r31, 0x20	; 32
     616:	df 2e       	mov	r13, r31
     618:	f0 2d       	mov	r31, r0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     620:	8a 83       	std	Y+2, r24	; 0x02
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	2a 81       	ldd	r18, Y+2	; 0x02
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	32 2f       	mov	r19, r18
     630:	22 27       	eor	r18, r18
     632:	a9 01       	movw	r20, r18
     634:	48 0f       	add	r20, r24
     636:	51 1d       	adc	r21, r1
     638:	f8 01       	movw	r30, r16
     63a:	40 83       	st	Z, r20
     63c:	51 83       	std	Z+1, r21	; 0x01
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     644:	f8 01       	movw	r30, r16
     646:	82 83       	std	Z+2, r24	; 0x02
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     64e:	f8 01       	movw	r30, r16
     650:	83 83       	std	Z+3, r24	; 0x03
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     658:	f8 01       	movw	r30, r16
     65a:	84 83       	std	Z+4, r24	; 0x04
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     662:	8c 83       	std	Y+4, r24	; 0x04
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     66a:	8b 83       	std	Y+3, r24	; 0x03
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     672:	8a 83       	std	Y+2, r24	; 0x02
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     67a:	89 83       	std	Y+1, r24	; 0x01
     67c:	ce 01       	movw	r24, r28
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     684:	f8 01       	movw	r30, r16
     686:	65 83       	std	Z+5, r22	; 0x05
     688:	76 83       	std	Z+6, r23	; 0x06
     68a:	87 83       	std	Z+7, r24	; 0x07
     68c:	90 87       	std	Z+8, r25	; 0x08
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     694:	8c 83       	std	Y+4, r24	; 0x04
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     69c:	8b 83       	std	Y+3, r24	; 0x03
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6a4:	8a 83       	std	Y+2, r24	; 0x02
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	ce 01       	movw	r24, r28
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     6b6:	f8 01       	movw	r30, r16
     6b8:	61 87       	std	Z+9, r22	; 0x09
     6ba:	72 87       	std	Z+10, r23	; 0x0a
     6bc:	83 87       	std	Z+11, r24	; 0x0b
     6be:	94 87       	std	Z+12, r25	; 0x0c
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6c6:	8c 83       	std	Y+4, r24	; 0x04
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6ce:	8b 83       	std	Y+3, r24	; 0x03
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6d6:	8a 83       	std	Y+2, r24	; 0x02
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     6e8:	f8 01       	movw	r30, r16
     6ea:	65 87       	std	Z+13, r22	; 0x0d
     6ec:	76 87       	std	Z+14, r23	; 0x0e
     6ee:	87 87       	std	Z+15, r24	; 0x0f
     6f0:	90 8b       	std	Z+16, r25	; 0x10
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6f8:	8c 83       	std	Y+4, r24	; 0x04
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     700:	8b 83       	std	Y+3, r24	; 0x03
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     708:	8a 83       	std	Y+2, r24	; 0x02
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	ce 01       	movw	r24, r28
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     71a:	f8 01       	movw	r30, r16
     71c:	61 8b       	std	Z+17, r22	; 0x11
     71e:	72 8b       	std	Z+18, r23	; 0x12
     720:	83 8b       	std	Z+19, r24	; 0x13
     722:	94 8b       	std	Z+20, r25	; 0x14
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     72a:	8c 83       	std	Y+4, r24	; 0x04
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     732:	8b 83       	std	Y+3, r24	; 0x03
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     73a:	8a 83       	std	Y+2, r24	; 0x02
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	ce 01       	movw	r24, r28
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     74c:	f8 01       	movw	r30, r16
     74e:	65 8b       	std	Z+21, r22	; 0x15
     750:	76 8b       	std	Z+22, r23	; 0x16
     752:	87 8b       	std	Z+23, r24	; 0x17
     754:	90 8f       	std	Z+24, r25	; 0x18
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     75c:	8a 83       	std	Y+2, r24	; 0x02
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	2a 81       	ldd	r18, Y+2	; 0x02
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	32 2f       	mov	r19, r18
     76c:	22 27       	eor	r18, r18
     76e:	a9 01       	movw	r20, r18
     770:	48 0f       	add	r20, r24
     772:	51 1d       	adc	r21, r1
     774:	f8 01       	movw	r30, r16
     776:	41 8f       	std	Z+25, r20	; 0x19
     778:	52 8f       	std	Z+26, r21	; 0x1a
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     780:	f8 01       	movw	r30, r16
     782:	83 8f       	std	Z+27, r24	; 0x1b
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     78a:	f8 01       	movw	r30, r16
     78c:	84 8f       	std	Z+28, r24	; 0x1c
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     794:	8c 83       	std	Y+4, r24	; 0x04
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7a4:	8a 83       	std	Y+2, r24	; 0x02
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     7b6:	f8 01       	movw	r30, r16
     7b8:	65 8f       	std	Z+29, r22	; 0x1d
     7ba:	76 8f       	std	Z+30, r23	; 0x1e
     7bc:	87 8f       	std	Z+31, r24	; 0x1f
     7be:	90 a3       	std	Z+32, r25	; 0x20
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7c6:	8c 83       	std	Y+4, r24	; 0x04
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7d6:	8a 83       	std	Y+2, r24	; 0x02
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     7e8:	f8 01       	movw	r30, r16
     7ea:	61 a3       	std	Z+33, r22	; 0x21
     7ec:	72 a3       	std	Z+34, r23	; 0x22
     7ee:	83 a3       	std	Z+35, r24	; 0x23
     7f0:	94 a3       	std	Z+36, r25	; 0x24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7f8:	f8 01       	movw	r30, r16
     7fa:	85 a3       	std	Z+37, r24	; 0x25
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     802:	f8 01       	movw	r30, r16
     804:	86 a3       	std	Z+38, r24	; 0x26
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     80c:	f8 01       	movw	r30, r16
     80e:	87 a3       	std	Z+39, r24	; 0x27
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     816:	f8 01       	movw	r30, r16
     818:	80 a7       	std	Z+40, r24	; 0x28
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     820:	f8 01       	movw	r30, r16
     822:	81 a7       	std	Z+41, r24	; 0x29
     824:	1f 92       	push	r1
     826:	8f 93       	push	r24
     828:	ff 92       	push	r15
     82a:	ef 92       	push	r14
     82c:	bf 92       	push	r11
     82e:	af 92       	push	r10
     830:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     83a:	f8 01       	movw	r30, r16
     83c:	82 a7       	std	Z+42, r24	; 0x2a
     83e:	1f 92       	push	r1
     840:	8f 93       	push	r24
     842:	ff 92       	push	r15
     844:	ef 92       	push	r14
     846:	df 92       	push	r13
     848:	cf 92       	push	r12
     84a:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
     84e:	ff ef       	ldi	r31, 0xFF	; 255
     850:	ef 1a       	sub	r14, r31
     852:	ff 0a       	sbc	r15, r31
     854:	05 5d       	subi	r16, 0xD5	; 213
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	53 e0       	ldi	r21, 0x03	; 3
     85e:	e5 16       	cp	r14, r21
     860:	f1 04       	cpc	r15, r1
     862:	09 f0       	breq	.+2      	; 0x866 <_Z10ReadConfigv+0x2d4>
     864:	da ce       	rjmp	.-588    	; 0x61a <_Z10ReadConfigv+0x88>
     866:	24 96       	adiw	r28, 0x04	; 4
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	08 95       	ret

00000882 <_Z7readRamv>:
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	00 d0       	rcall	.+0      	; 0x894 <_Z7readRamv+0x12>
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	83 e4       	ldi	r24, 0x43	; 67
     89c:	90 e2       	ldi	r25, 0x20	; 32
     89e:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
     8a2:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <ContinuousRead>
     8a6:	81 11       	cpse	r24, r1
     8a8:	4f c0       	rjmp	.+158    	; 0x948 <_Z7readRamv+0xc6>
     8aa:	82 e5       	ldi	r24, 0x52	; 82
     8ac:	90 e2       	ldi	r25, 0x20	; 32
     8ae:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
     8b2:	88 ee       	ldi	r24, 0xE8	; 232
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	a0 e0       	ldi	r26, 0x00	; 0
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <fk>
     8be:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <fk+0x1>
     8c2:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <fk+0x2>
     8c6:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <fk+0x3>
     8ca:	1f 92       	push	r1
     8cc:	1f 92       	push	r1
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	8f 93       	push	r24
     8d2:	88 ee       	ldi	r24, 0xE8	; 232
     8d4:	8f 93       	push	r24
     8d6:	87 e6       	ldi	r24, 0x67	; 103
     8d8:	90 e2       	ldi	r25, 0x20	; 32
     8da:	9f 93       	push	r25
     8dc:	8f 93       	push	r24
     8de:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
     8e2:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <fk>
     8e6:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <fk+0x1>
     8ea:	a0 91 87 28 	lds	r26, 0x2887	; 0x802887 <fk+0x2>
     8ee:	b0 91 88 28 	lds	r27, 0x2888	; 0x802888 <fk+0x3>
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	aa 1f       	adc	r26, r26
     8f8:	bb 1f       	adc	r27, r27
     8fa:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <ft>
     8fe:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <ft+0x1>
     902:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <fadd1>
     906:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <fadd2>
     90a:	e0 e8       	ldi	r30, 0x80	; 128
     90c:	f6 e0       	ldi	r31, 0x06	; 6
     90e:	84 81       	ldd	r24, Z+4	; 0x04
     910:	80 61       	ori	r24, 0x10	; 16
     912:	84 83       	std	Z+4, r24	; 0x04
     914:	84 81       	ldd	r24, Z+4	; 0x04
     916:	8f 7e       	andi	r24, 0xEF	; 239
     918:	84 83       	std	Z+4, r24	; 0x04
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     920:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
     924:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     928:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
     92c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <ContinuousRead>
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     94e:	8a 83       	std	Y+2, r24	; 0x02
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     956:	89 83       	std	Y+1, r24	; 0x01
     958:	0e e3       	ldi	r16, 0x3E	; 62
     95a:	18 e2       	ldi	r17, 0x28	; 40
     95c:	2a 81       	ldd	r18, Y+2	; 0x02
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	32 2f       	mov	r19, r18
     962:	22 27       	eor	r18, r18
     964:	a9 01       	movw	r20, r18
     966:	48 0f       	add	r20, r24
     968:	51 1d       	adc	r21, r1
     96a:	f8 01       	movw	r30, r16
     96c:	40 83       	st	Z, r20
     96e:	51 83       	std	Z+1, r21	; 0x01
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     976:	f8 01       	movw	r30, r16
     978:	82 83       	std	Z+2, r24	; 0x02
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     980:	f8 01       	movw	r30, r16
     982:	83 83       	std	Z+3, r24	; 0x03
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	09 f4       	brne	.+2      	; 0x98a <_Z7readRamv+0x108>
     988:	5c c1       	rjmp	.+696    	; 0xc42 <_Z7readRamv+0x3c0>
     98a:	20 f0       	brcs	.+8      	; 0x994 <_Z7readRamv+0x112>
     98c:	8a 35       	cpi	r24, 0x5A	; 90
     98e:	09 f4       	brne	.+2      	; 0x992 <_Z7readRamv+0x110>
     990:	42 c2       	rjmp	.+1156   	; 0xe16 <_Z7readRamv+0x594>
     992:	bb c2       	rjmp	.+1398   	; 0xf0a <_Z7readRamv+0x688>
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     99a:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <CMDPRGlist+0x4>
     99e:	88 23       	and	r24, r24
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <_Z7readRamv+0x122>
     9a2:	a7 c2       	rjmp	.+1358   	; 0xef2 <_Z7readRamv+0x670>
     9a4:	8e 01       	movw	r16, r28
     9a6:	0b 5f       	subi	r16, 0xFB	; 251
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	ae 01       	movw	r20, r28
     9ac:	4f 5f       	subi	r20, 0xFF	; 255
     9ae:	5f 4f       	sbci	r21, 0xFF	; 255
     9b0:	6a 01       	movw	r12, r20
     9b2:	78 01       	movw	r14, r16
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     9ba:	f7 01       	movw	r30, r14
     9bc:	82 93       	st	-Z, r24
     9be:	7f 01       	movw	r14, r30
     9c0:	ec 15       	cp	r30, r12
     9c2:	fd 05       	cpc	r31, r13
     9c4:	b9 f7       	brne	.-18     	; 0x9b4 <_Z7readRamv+0x132>
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     9ce:	ee e3       	ldi	r30, 0x3E	; 62
     9d0:	f8 e2       	ldi	r31, 0x28	; 40
     9d2:	65 83       	std	Z+5, r22	; 0x05
     9d4:	76 83       	std	Z+6, r23	; 0x06
     9d6:	87 83       	std	Z+7, r24	; 0x07
     9d8:	90 87       	std	Z+8, r25	; 0x08
     9da:	84 81       	ldd	r24, Z+4	; 0x04
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	08 f4       	brcc	.+2      	; 0x9e2 <_Z7readRamv+0x160>
     9e0:	61 c2       	rjmp	.+1218   	; 0xea4 <_Z7readRamv+0x622>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     9e8:	f8 01       	movw	r30, r16
     9ea:	82 93       	st	-Z, r24
     9ec:	8f 01       	movw	r16, r30
     9ee:	ec 15       	cp	r30, r12
     9f0:	fd 05       	cpc	r31, r13
     9f2:	b9 f7       	brne	.-18     	; 0x9e2 <_Z7readRamv+0x160>
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     9fc:	ee e3       	ldi	r30, 0x3E	; 62
     9fe:	f8 e2       	ldi	r31, 0x28	; 40
     a00:	61 87       	std	Z+9, r22	; 0x09
     a02:	72 87       	std	Z+10, r23	; 0x0a
     a04:	83 87       	std	Z+11, r24	; 0x0b
     a06:	94 87       	std	Z+12, r25	; 0x0c
     a08:	84 81       	ldd	r24, Z+4	; 0x04
     a0a:	83 30       	cpi	r24, 0x03	; 3
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <_Z7readRamv+0x18e>
     a0e:	4e c2       	rjmp	.+1180   	; 0xeac <_Z7readRamv+0x62a>
     a10:	8e 01       	movw	r16, r28
     a12:	0b 5f       	subi	r16, 0xFB	; 251
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	ae 01       	movw	r20, r28
     a18:	4f 5f       	subi	r20, 0xFF	; 255
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	7a 01       	movw	r14, r20
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     a24:	f8 01       	movw	r30, r16
     a26:	82 93       	st	-Z, r24
     a28:	8f 01       	movw	r16, r30
     a2a:	ee 15       	cp	r30, r14
     a2c:	ff 05       	cpc	r31, r15
     a2e:	b9 f7       	brne	.-18     	; 0xa1e <_Z7readRamv+0x19c>
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     a38:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <CMDPRGlist+0xd>
     a3c:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <CMDPRGlist+0xe>
     a40:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <CMDPRGlist+0xf>
     a44:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <CMDPRGlist+0x10>
     a48:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     a4c:	88 23       	and	r24, r24
     a4e:	09 f4       	brne	.+2      	; 0xa52 <_Z7readRamv+0x1d0>
     a50:	57 c0       	rjmp	.+174    	; 0xb00 <_Z7readRamv+0x27e>
     a52:	8e 01       	movw	r16, r28
     a54:	0b 5f       	subi	r16, 0xFB	; 251
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ae 01       	movw	r20, r28
     a5a:	4f 5f       	subi	r20, 0xFF	; 255
     a5c:	5f 4f       	sbci	r21, 0xFF	; 255
     a5e:	7a 01       	movw	r14, r20
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     a66:	f8 01       	movw	r30, r16
     a68:	82 93       	st	-Z, r24
     a6a:	8f 01       	movw	r16, r30
     a6c:	ee 16       	cp	r14, r30
     a6e:	ff 06       	cpc	r15, r31
     a70:	b9 f7       	brne	.-18     	; 0xa60 <_Z7readRamv+0x1de>
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     a7a:	ee e3       	ldi	r30, 0x3E	; 62
     a7c:	f8 e2       	ldi	r31, 0x28	; 40
     a7e:	64 8b       	std	Z+20, r22	; 0x14
     a80:	75 8b       	std	Z+21, r23	; 0x15
     a82:	86 8b       	std	Z+22, r24	; 0x16
     a84:	97 8b       	std	Z+23, r25	; 0x17
     a86:	84 81       	ldd	r24, Z+4	; 0x04
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <_Z7readRamv+0x20c>
     a8c:	12 c2       	rjmp	.+1060   	; 0xeb2 <_Z7readRamv+0x630>
     a8e:	8e 01       	movw	r16, r28
     a90:	0b 5f       	subi	r16, 0xFB	; 251
     a92:	1f 4f       	sbci	r17, 0xFF	; 255
     a94:	ae 01       	movw	r20, r28
     a96:	4f 5f       	subi	r20, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	7a 01       	movw	r14, r20
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     aa2:	f8 01       	movw	r30, r16
     aa4:	82 93       	st	-Z, r24
     aa6:	8f 01       	movw	r16, r30
     aa8:	ee 16       	cp	r14, r30
     aaa:	ff 06       	cpc	r15, r31
     aac:	b9 f7       	brne	.-18     	; 0xa9c <_Z7readRamv+0x21a>
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     ab6:	ee e3       	ldi	r30, 0x3E	; 62
     ab8:	f8 e2       	ldi	r31, 0x28	; 40
     aba:	60 8f       	std	Z+24, r22	; 0x18
     abc:	71 8f       	std	Z+25, r23	; 0x19
     abe:	82 8f       	std	Z+26, r24	; 0x1a
     ac0:	93 8f       	std	Z+27, r25	; 0x1b
     ac2:	84 81       	ldd	r24, Z+4	; 0x04
     ac4:	83 30       	cpi	r24, 0x03	; 3
     ac6:	e0 f0       	brcs	.+56     	; 0xb00 <_Z7readRamv+0x27e>
     ac8:	8e 01       	movw	r16, r28
     aca:	0b 5f       	subi	r16, 0xFB	; 251
     acc:	1f 4f       	sbci	r17, 0xFF	; 255
     ace:	ae 01       	movw	r20, r28
     ad0:	4f 5f       	subi	r20, 0xFF	; 255
     ad2:	5f 4f       	sbci	r21, 0xFF	; 255
     ad4:	7a 01       	movw	r14, r20
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     adc:	f8 01       	movw	r30, r16
     ade:	82 93       	st	-Z, r24
     ae0:	8f 01       	movw	r16, r30
     ae2:	ee 15       	cp	r30, r14
     ae4:	ff 05       	cpc	r31, r15
     ae6:	b9 f7       	brne	.-18     	; 0xad6 <_Z7readRamv+0x254>
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     af0:	60 93 5a 28 	sts	0x285A, r22	; 0x80285a <CMDPRGlist+0x1c>
     af4:	70 93 5b 28 	sts	0x285B, r23	; 0x80285b <CMDPRGlist+0x1d>
     af8:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CMDPRGlist+0x1e>
     afc:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CMDPRGlist+0x1f>
     b00:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     b04:	88 23       	and	r24, r24
     b06:	09 f4       	brne	.+2      	; 0xb0a <_Z7readRamv+0x288>
     b08:	d8 c1       	rjmp	.+944    	; 0xeba <_Z7readRamv+0x638>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b10:	ee e3       	ldi	r30, 0x3E	; 62
     b12:	f8 e2       	ldi	r31, 0x28	; 40
     b14:	81 8b       	std	Z+17, r24	; 0x11
     b16:	84 81       	ldd	r24, Z+4	; 0x04
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <_Z7readRamv+0x2a4>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b22:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <CMDPRGlist+0x12>
     b26:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     b2a:	83 30       	cpi	r24, 0x03	; 3
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <_Z7readRamv+0x2ae>
     b2e:	c5 c1       	rjmp	.+906    	; 0xeba <_Z7readRamv+0x638>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b36:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <CMDPRGlist+0x13>
     b3a:	bf c1       	rjmp	.+894    	; 0xeba <_Z7readRamv+0x638>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b42:	f6 01       	movw	r30, r12
     b44:	82 93       	st	-Z, r24
     b46:	6f 01       	movw	r12, r30
     b48:	0e 17       	cp	r16, r30
     b4a:	1f 07       	cpc	r17, r31
     b4c:	b9 f7       	brne	.-18     	; 0xb3c <_Z7readRamv+0x2ba>
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     b56:	60 93 5e 28 	sts	0x285E, r22	; 0x80285e <CMDPRGlist+0x20>
     b5a:	70 93 5f 28 	sts	0x285F, r23	; 0x80285f <CMDPRGlist+0x21>
     b5e:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <CMDPRGlist+0x22>
     b62:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <CMDPRGlist+0x23>
     b66:	67 01       	movw	r12, r14
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b6e:	f6 01       	movw	r30, r12
     b70:	82 93       	st	-Z, r24
     b72:	6f 01       	movw	r12, r30
     b74:	0e 17       	cp	r16, r30
     b76:	1f 07       	cpc	r17, r31
     b78:	b9 f7       	brne	.-18     	; 0xb68 <_Z7readRamv+0x2e6>
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     b82:	60 93 62 28 	sts	0x2862, r22	; 0x802862 <CMDPRGlist+0x24>
     b86:	70 93 63 28 	sts	0x2863, r23	; 0x802863 <CMDPRGlist+0x25>
     b8a:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <CMDPRGlist+0x26>
     b8e:	90 93 65 28 	sts	0x2865, r25	; 0x802865 <CMDPRGlist+0x27>
     b92:	67 01       	movw	r12, r14
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b9a:	f6 01       	movw	r30, r12
     b9c:	82 93       	st	-Z, r24
     b9e:	6f 01       	movw	r12, r30
     ba0:	0e 17       	cp	r16, r30
     ba2:	1f 07       	cpc	r17, r31
     ba4:	b9 f7       	brne	.-18     	; 0xb94 <_Z7readRamv+0x312>
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     bae:	60 93 66 28 	sts	0x2866, r22	; 0x802866 <CMDPRGlist+0x28>
     bb2:	70 93 67 28 	sts	0x2867, r23	; 0x802867 <CMDPRGlist+0x29>
     bb6:	80 93 68 28 	sts	0x2868, r24	; 0x802868 <CMDPRGlist+0x2a>
     bba:	90 93 69 28 	sts	0x2869, r25	; 0x802869 <CMDPRGlist+0x2b>
     bbe:	67 01       	movw	r12, r14
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     bc6:	f6 01       	movw	r30, r12
     bc8:	82 93       	st	-Z, r24
     bca:	6f 01       	movw	r12, r30
     bcc:	0e 17       	cp	r16, r30
     bce:	1f 07       	cpc	r17, r31
     bd0:	b9 f7       	brne	.-18     	; 0xbc0 <_Z7readRamv+0x33e>
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     bda:	60 93 6a 28 	sts	0x286A, r22	; 0x80286a <CMDPRGlist+0x2c>
     bde:	70 93 6b 28 	sts	0x286B, r23	; 0x80286b <CMDPRGlist+0x2d>
     be2:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <CMDPRGlist+0x2e>
     be6:	90 93 6d 28 	sts	0x286D, r25	; 0x80286d <CMDPRGlist+0x2f>
     bea:	67 01       	movw	r12, r14
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     bf2:	f6 01       	movw	r30, r12
     bf4:	82 93       	st	-Z, r24
     bf6:	6f 01       	movw	r12, r30
     bf8:	e0 17       	cp	r30, r16
     bfa:	f1 07       	cpc	r31, r17
     bfc:	b9 f7       	brne	.-18     	; 0xbec <_Z7readRamv+0x36a>
     bfe:	ce 01       	movw	r24, r28
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     c06:	60 93 6e 28 	sts	0x286E, r22	; 0x80286e <CMDPRGlist+0x30>
     c0a:	70 93 6f 28 	sts	0x286F, r23	; 0x80286f <CMDPRGlist+0x31>
     c0e:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <CMDPRGlist+0x32>
     c12:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <CMDPRGlist+0x33>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     c1c:	f7 01       	movw	r30, r14
     c1e:	82 93       	st	-Z, r24
     c20:	7f 01       	movw	r14, r30
     c22:	0e 17       	cp	r16, r30
     c24:	1f 07       	cpc	r17, r31
     c26:	b9 f7       	brne	.-18     	; 0xc16 <_Z7readRamv+0x394>
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     c30:	60 93 72 28 	sts	0x2872, r22	; 0x802872 <CMDPRGlist+0x34>
     c34:	70 93 73 28 	sts	0x2873, r23	; 0x802873 <CMDPRGlist+0x35>
     c38:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <CMDPRGlist+0x36>
     c3c:	90 93 75 28 	sts	0x2875, r25	; 0x802875 <CMDPRGlist+0x37>
     c40:	64 c1       	rjmp	.+712    	; 0xf0a <_Z7readRamv+0x688>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     c48:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <CMDPRGlist+0x4>
     c4c:	88 23       	and	r24, r24
     c4e:	09 f4       	brne	.+2      	; 0xc52 <_Z7readRamv+0x3d0>
     c50:	56 c1       	rjmp	.+684    	; 0xefe <_Z7readRamv+0x67c>
     c52:	8e 01       	movw	r16, r28
     c54:	0b 5f       	subi	r16, 0xFB	; 251
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	ae 01       	movw	r20, r28
     c5a:	4f 5f       	subi	r20, 0xFF	; 255
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	6a 01       	movw	r12, r20
     c60:	78 01       	movw	r14, r16
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     c68:	f7 01       	movw	r30, r14
     c6a:	82 93       	st	-Z, r24
     c6c:	7f 01       	movw	r14, r30
     c6e:	ec 15       	cp	r30, r12
     c70:	fd 05       	cpc	r31, r13
     c72:	b9 f7       	brne	.-18     	; 0xc62 <_Z7readRamv+0x3e0>
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     c7c:	ee e3       	ldi	r30, 0x3E	; 62
     c7e:	f8 e2       	ldi	r31, 0x28	; 40
     c80:	65 83       	std	Z+5, r22	; 0x05
     c82:	76 83       	std	Z+6, r23	; 0x06
     c84:	87 83       	std	Z+7, r24	; 0x07
     c86:	90 87       	std	Z+8, r25	; 0x08
     c88:	84 81       	ldd	r24, Z+4	; 0x04
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <_Z7readRamv+0x40e>
     c8e:	1e c1       	rjmp	.+572    	; 0xecc <_Z7readRamv+0x64a>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     c96:	f8 01       	movw	r30, r16
     c98:	82 93       	st	-Z, r24
     c9a:	8f 01       	movw	r16, r30
     c9c:	ec 15       	cp	r30, r12
     c9e:	fd 05       	cpc	r31, r13
     ca0:	b9 f7       	brne	.-18     	; 0xc90 <_Z7readRamv+0x40e>
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     caa:	ee e3       	ldi	r30, 0x3E	; 62
     cac:	f8 e2       	ldi	r31, 0x28	; 40
     cae:	61 87       	std	Z+9, r22	; 0x09
     cb0:	72 87       	std	Z+10, r23	; 0x0a
     cb2:	83 87       	std	Z+11, r24	; 0x0b
     cb4:	94 87       	std	Z+12, r25	; 0x0c
     cb6:	84 81       	ldd	r24, Z+4	; 0x04
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	08 f4       	brcc	.+2      	; 0xcbe <_Z7readRamv+0x43c>
     cbc:	0b c1       	rjmp	.+534    	; 0xed4 <_Z7readRamv+0x652>
     cbe:	8e 01       	movw	r16, r28
     cc0:	0b 5f       	subi	r16, 0xFB	; 251
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	ae 01       	movw	r20, r28
     cc6:	4f 5f       	subi	r20, 0xFF	; 255
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	7a 01       	movw	r14, r20
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     cd2:	f8 01       	movw	r30, r16
     cd4:	82 93       	st	-Z, r24
     cd6:	8f 01       	movw	r16, r30
     cd8:	ee 16       	cp	r14, r30
     cda:	ff 06       	cpc	r15, r31
     cdc:	b9 f7       	brne	.-18     	; 0xccc <_Z7readRamv+0x44a>
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     ce6:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <CMDPRGlist+0xd>
     cea:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <CMDPRGlist+0xe>
     cee:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <CMDPRGlist+0xf>
     cf2:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <CMDPRGlist+0x10>
     cf6:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     cfa:	88 23       	and	r24, r24
     cfc:	09 f4       	brne	.+2      	; 0xd00 <_Z7readRamv+0x47e>
     cfe:	57 c0       	rjmp	.+174    	; 0xdae <_Z7readRamv+0x52c>
     d00:	8e 01       	movw	r16, r28
     d02:	0b 5f       	subi	r16, 0xFB	; 251
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	ae 01       	movw	r20, r28
     d08:	4f 5f       	subi	r20, 0xFF	; 255
     d0a:	5f 4f       	sbci	r21, 0xFF	; 255
     d0c:	7a 01       	movw	r14, r20
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     d14:	f8 01       	movw	r30, r16
     d16:	82 93       	st	-Z, r24
     d18:	8f 01       	movw	r16, r30
     d1a:	ee 16       	cp	r14, r30
     d1c:	ff 06       	cpc	r15, r31
     d1e:	b9 f7       	brne	.-18     	; 0xd0e <_Z7readRamv+0x48c>
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     d28:	ee e3       	ldi	r30, 0x3E	; 62
     d2a:	f8 e2       	ldi	r31, 0x28	; 40
     d2c:	64 8b       	std	Z+20, r22	; 0x14
     d2e:	75 8b       	std	Z+21, r23	; 0x15
     d30:	86 8b       	std	Z+22, r24	; 0x16
     d32:	97 8b       	std	Z+23, r25	; 0x17
     d34:	84 81       	ldd	r24, Z+4	; 0x04
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	08 f4       	brcc	.+2      	; 0xd3c <_Z7readRamv+0x4ba>
     d3a:	cf c0       	rjmp	.+414    	; 0xeda <_Z7readRamv+0x658>
     d3c:	8e 01       	movw	r16, r28
     d3e:	0b 5f       	subi	r16, 0xFB	; 251
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	ae 01       	movw	r20, r28
     d44:	4f 5f       	subi	r20, 0xFF	; 255
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	7a 01       	movw	r14, r20
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     d50:	f8 01       	movw	r30, r16
     d52:	82 93       	st	-Z, r24
     d54:	8f 01       	movw	r16, r30
     d56:	ee 15       	cp	r30, r14
     d58:	ff 05       	cpc	r31, r15
     d5a:	b9 f7       	brne	.-18     	; 0xd4a <_Z7readRamv+0x4c8>
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     d64:	ee e3       	ldi	r30, 0x3E	; 62
     d66:	f8 e2       	ldi	r31, 0x28	; 40
     d68:	60 8f       	std	Z+24, r22	; 0x18
     d6a:	71 8f       	std	Z+25, r23	; 0x19
     d6c:	82 8f       	std	Z+26, r24	; 0x1a
     d6e:	93 8f       	std	Z+27, r25	; 0x1b
     d70:	84 81       	ldd	r24, Z+4	; 0x04
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	e0 f0       	brcs	.+56     	; 0xdae <_Z7readRamv+0x52c>
     d76:	8e 01       	movw	r16, r28
     d78:	0b 5f       	subi	r16, 0xFB	; 251
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	ae 01       	movw	r20, r28
     d7e:	4f 5f       	subi	r20, 0xFF	; 255
     d80:	5f 4f       	sbci	r21, 0xFF	; 255
     d82:	7a 01       	movw	r14, r20
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     d8a:	f8 01       	movw	r30, r16
     d8c:	82 93       	st	-Z, r24
     d8e:	8f 01       	movw	r16, r30
     d90:	ee 15       	cp	r30, r14
     d92:	ff 05       	cpc	r31, r15
     d94:	b9 f7       	brne	.-18     	; 0xd84 <_Z7readRamv+0x502>
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     d9e:	60 93 5a 28 	sts	0x285A, r22	; 0x80285a <CMDPRGlist+0x1c>
     da2:	70 93 5b 28 	sts	0x285B, r23	; 0x80285b <CMDPRGlist+0x1d>
     da6:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CMDPRGlist+0x1e>
     daa:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CMDPRGlist+0x1f>
     dae:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     db2:	88 23       	and	r24, r24
     db4:	09 f4       	brne	.+2      	; 0xdb8 <_Z7readRamv+0x536>
     db6:	95 c0       	rjmp	.+298    	; 0xee2 <_Z7readRamv+0x660>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     dbe:	ee e3       	ldi	r30, 0x3E	; 62
     dc0:	f8 e2       	ldi	r31, 0x28	; 40
     dc2:	81 8b       	std	Z+17, r24	; 0x11
     dc4:	84 81       	ldd	r24, Z+4	; 0x04
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	28 f0       	brcs	.+10     	; 0xdd4 <_Z7readRamv+0x552>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     dd0:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <CMDPRGlist+0x12>
     dd4:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	08 f4       	brcc	.+2      	; 0xdde <_Z7readRamv+0x55c>
     ddc:	82 c0       	rjmp	.+260    	; 0xee2 <_Z7readRamv+0x660>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     de4:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <CMDPRGlist+0x13>
     de8:	7c c0       	rjmp	.+248    	; 0xee2 <_Z7readRamv+0x660>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     df0:	f8 01       	movw	r30, r16
     df2:	82 93       	st	-Z, r24
     df4:	8f 01       	movw	r16, r30
     df6:	ee 16       	cp	r14, r30
     df8:	ff 06       	cpc	r15, r31
     dfa:	b9 f7       	brne	.-18     	; 0xdea <_Z7readRamv+0x568>
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     e04:	60 93 5e 28 	sts	0x285E, r22	; 0x80285e <CMDPRGlist+0x20>
     e08:	70 93 5f 28 	sts	0x285F, r23	; 0x80285f <CMDPRGlist+0x21>
     e0c:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <CMDPRGlist+0x22>
     e10:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <CMDPRGlist+0x23>
     e14:	7a c0       	rjmp	.+244    	; 0xf0a <_Z7readRamv+0x688>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e1c:	0e e3       	ldi	r16, 0x3E	; 62
     e1e:	18 e2       	ldi	r17, 0x28	; 40
     e20:	f8 01       	movw	r30, r16
     e22:	80 af       	std	Z+56, r24	; 0x38
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e2a:	8c 83       	std	Y+4, r24	; 0x04
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e32:	8b 83       	std	Y+3, r24	; 0x03
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     e4c:	f8 01       	movw	r30, r16
     e4e:	61 af       	std	Z+57, r22	; 0x39
     e50:	72 af       	std	Z+58, r23	; 0x3a
     e52:	83 af       	std	Z+59, r24	; 0x3b
     e54:	94 af       	std	Z+60, r25	; 0x3c
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e5c:	8c 83       	std	Y+4, r24	; 0x04
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e6c:	8a 83       	std	Y+2, r24	; 0x02
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     e7e:	60 93 7b 28 	sts	0x287B, r22	; 0x80287b <CMDPRGlist+0x3d>
     e82:	70 93 7c 28 	sts	0x287C, r23	; 0x80287c <CMDPRGlist+0x3e>
     e86:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <CMDPRGlist+0x3f>
     e8a:	90 93 7e 28 	sts	0x287E, r25	; 0x80287e <CMDPRGlist+0x40>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e94:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <CMDPRGlist+0x41>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e9e:	80 93 80 28 	sts	0x2880, r24	; 0x802880 <CMDPRGlist+0x42>
     ea2:	33 c0       	rjmp	.+102    	; 0xf0a <_Z7readRamv+0x688>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <_Z7readRamv+0x628>
     ea8:	b3 cd       	rjmp	.-1178   	; 0xa10 <_Z7readRamv+0x18e>
     eaa:	ce cd       	rjmp	.-1124   	; 0xa48 <_Z7readRamv+0x1c6>
     eac:	81 11       	cpse	r24, r1
     eae:	d1 cd       	rjmp	.-1118   	; 0xa52 <_Z7readRamv+0x1d0>
     eb0:	23 c0       	rjmp	.+70     	; 0xef8 <_Z7readRamv+0x676>
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <_Z7readRamv+0x636>
     eb6:	24 ce       	rjmp	.-952    	; 0xb00 <_Z7readRamv+0x27e>
     eb8:	07 ce       	rjmp	.-1010   	; 0xac8 <_Z7readRamv+0x246>
     eba:	7e 01       	movw	r14, r28
     ebc:	f5 e0       	ldi	r31, 0x05	; 5
     ebe:	ef 0e       	add	r14, r31
     ec0:	f1 1c       	adc	r15, r1
     ec2:	8e 01       	movw	r16, r28
     ec4:	0f 5f       	subi	r16, 0xFF	; 255
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	67 01       	movw	r12, r14
     eca:	38 ce       	rjmp	.-912    	; 0xb3c <_Z7readRamv+0x2ba>
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	08 f0       	brcs	.+2      	; 0xed2 <_Z7readRamv+0x650>
     ed0:	f6 ce       	rjmp	.-532    	; 0xcbe <_Z7readRamv+0x43c>
     ed2:	11 cf       	rjmp	.-478    	; 0xcf6 <_Z7readRamv+0x474>
     ed4:	81 11       	cpse	r24, r1
     ed6:	14 cf       	rjmp	.-472    	; 0xd00 <_Z7readRamv+0x47e>
     ed8:	15 c0       	rjmp	.+42     	; 0xf04 <_Z7readRamv+0x682>
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	08 f4       	brcc	.+2      	; 0xee0 <_Z7readRamv+0x65e>
     ede:	67 cf       	rjmp	.-306    	; 0xdae <_Z7readRamv+0x52c>
     ee0:	4a cf       	rjmp	.-364    	; 0xd76 <_Z7readRamv+0x4f4>
     ee2:	8e 01       	movw	r16, r28
     ee4:	0b 5f       	subi	r16, 0xFB	; 251
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	ae 01       	movw	r20, r28
     eea:	4f 5f       	subi	r20, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
     eee:	7a 01       	movw	r14, r20
     ef0:	7c cf       	rjmp	.-264    	; 0xdea <_Z7readRamv+0x568>
     ef2:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     ef6:	da cf       	rjmp	.-76     	; 0xeac <_Z7readRamv+0x62a>
     ef8:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     efc:	da cf       	rjmp	.-76     	; 0xeb2 <_Z7readRamv+0x630>
     efe:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     f02:	e8 cf       	rjmp	.-48     	; 0xed4 <_Z7readRamv+0x652>
     f04:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     f08:	e8 cf       	rjmp	.-48     	; 0xeda <_Z7readRamv+0x658>
     f0a:	24 96       	adiw	r28, 0x04	; 4
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	cf 90       	pop	r12
     f20:	08 95       	ret

00000f22 <_Z10ReadSerialv>:
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	00 d0       	rcall	.+0      	; 0xf28 <_Z10ReadSerialv+0x6>
     f28:	1f 92       	push	r1
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	90 e2       	ldi	r25, 0x20	; 32
     f32:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
     f36:	87 ee       	ldi	r24, 0xE7	; 231
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <fk>
     f42:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <fk+0x1>
     f46:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <fk+0x2>
     f4a:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <fk+0x3>
     f4e:	8e ec       	ldi	r24, 0xCE	; 206
     f50:	97 e0       	ldi	r25, 0x07	; 7
     f52:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <ft>
     f56:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <ft+0x1>
     f5a:	8e ec       	ldi	r24, 0xCE	; 206
     f5c:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <fadd1>
     f60:	87 e0       	ldi	r24, 0x07	; 7
     f62:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <fadd2>
     f66:	e0 e8       	ldi	r30, 0x80	; 128
     f68:	f6 e0       	ldi	r31, 0x06	; 6
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	80 61       	ori	r24, 0x10	; 16
     f6e:	84 83       	std	Z+4, r24	; 0x04
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	84 83       	std	Z+4, r24	; 0x04
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f7c:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
     f80:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f84:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
     f88:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f98:	8c 83       	std	Y+4, r24	; 0x04
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     fa0:	8b 83       	std	Y+3, r24	; 0x03
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	1f 92       	push	r1
     fb6:	9f 93       	push	r25
     fb8:	9b 81       	ldd	r25, Y+3	; 0x03
     fba:	1f 92       	push	r1
     fbc:	9f 93       	push	r25
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	1f 92       	push	r1
     fc2:	9f 93       	push	r25
     fc4:	1f 92       	push	r1
     fc6:	8f 93       	push	r24
     fc8:	83 e9       	ldi	r24, 0x93	; 147
     fca:	90 e2       	ldi	r25, 0x20	; 32
     fcc:	9f 93       	push	r25
     fce:	8f 93       	push	r24
     fd0:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	24 96       	adiw	r28, 0x04	; 4
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <_Z14ReadSubProgramj>:
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	00 d0       	rcall	.+0      	; 0xffe <_Z14ReadSubProgramj+0x12>
     ffe:	1f 92       	push	r1
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	20 91 89 28 	lds	r18, 0x2889	; 0x802889 <ContinuousRead>
    1008:	21 11       	cpse	r18, r1
    100a:	2f c0       	rjmp	.+94     	; 0x106a <_Z14ReadSubProgramj+0x7e>
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <fk>
    1014:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <fk+0x1>
    1018:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <fk+0x2>
    101c:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <fk+0x3>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	aa 1f       	adc	r26, r26
    1026:	bb 1f       	adc	r27, r27
    1028:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <ft>
    102c:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <ft+0x1>
    1030:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <fadd1>
    1034:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <fadd2>
    1038:	e0 e8       	ldi	r30, 0x80	; 128
    103a:	f6 e0       	ldi	r31, 0x06	; 6
    103c:	84 81       	ldd	r24, Z+4	; 0x04
    103e:	80 61       	ori	r24, 0x10	; 16
    1040:	84 83       	std	Z+4, r24	; 0x04
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	8f 7e       	andi	r24, 0xEF	; 239
    1046:	84 83       	std	Z+4, r24	; 0x04
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    104e:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
    1052:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1056:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
    105a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <ContinuousRead>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1070:	8a 83       	std	Y+2, r24	; 0x02
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	0e e3       	ldi	r16, 0x3E	; 62
    107c:	18 e2       	ldi	r17, 0x28	; 40
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	32 2f       	mov	r19, r18
    1084:	22 27       	eor	r18, r18
    1086:	a9 01       	movw	r20, r18
    1088:	48 0f       	add	r20, r24
    108a:	51 1d       	adc	r21, r1
    108c:	f8 01       	movw	r30, r16
    108e:	40 83       	st	Z, r20
    1090:	51 83       	std	Z+1, r21	; 0x01
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1098:	f8 01       	movw	r30, r16
    109a:	82 83       	std	Z+2, r24	; 0x02
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    10a2:	f8 01       	movw	r30, r16
    10a4:	83 83       	std	Z+3, r24	; 0x03
    10a6:	88 23       	and	r24, r24
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <_Z14ReadSubProgramj+0xc6>
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <_Z14ReadSubProgramj+0xc4>
    10ae:	58 c1       	rjmp	.+688    	; 0x1360 <_Z14ReadSubProgramj+0x374>
    10b0:	73 c2       	rjmp	.+1254   	; 0x1598 <_Z14ReadSubProgramj+0x5ac>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    10b8:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <CMDPRGlist+0x4>
    10bc:	88 23       	and	r24, r24
    10be:	09 f4       	brne	.+2      	; 0x10c2 <_Z14ReadSubProgramj+0xd6>
    10c0:	5f c2       	rjmp	.+1214   	; 0x1580 <_Z14ReadSubProgramj+0x594>
    10c2:	8e 01       	movw	r16, r28
    10c4:	0b 5f       	subi	r16, 0xFB	; 251
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	ae 01       	movw	r20, r28
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	6a 01       	movw	r12, r20
    10d0:	78 01       	movw	r14, r16
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    10d8:	f7 01       	movw	r30, r14
    10da:	82 93       	st	-Z, r24
    10dc:	7f 01       	movw	r14, r30
    10de:	ec 15       	cp	r30, r12
    10e0:	fd 05       	cpc	r31, r13
    10e2:	b9 f7       	brne	.-18     	; 0x10d2 <_Z14ReadSubProgramj+0xe6>
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    10ec:	ee e3       	ldi	r30, 0x3E	; 62
    10ee:	f8 e2       	ldi	r31, 0x28	; 40
    10f0:	65 83       	std	Z+5, r22	; 0x05
    10f2:	76 83       	std	Z+6, r23	; 0x06
    10f4:	87 83       	std	Z+7, r24	; 0x07
    10f6:	90 87       	std	Z+8, r25	; 0x08
    10f8:	84 81       	ldd	r24, Z+4	; 0x04
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <_Z14ReadSubProgramj+0x114>
    10fe:	19 c2       	rjmp	.+1074   	; 0x1532 <_Z14ReadSubProgramj+0x546>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1106:	f8 01       	movw	r30, r16
    1108:	82 93       	st	-Z, r24
    110a:	8f 01       	movw	r16, r30
    110c:	ec 15       	cp	r30, r12
    110e:	fd 05       	cpc	r31, r13
    1110:	b9 f7       	brne	.-18     	; 0x1100 <_Z14ReadSubProgramj+0x114>
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    111a:	ee e3       	ldi	r30, 0x3E	; 62
    111c:	f8 e2       	ldi	r31, 0x28	; 40
    111e:	61 87       	std	Z+9, r22	; 0x09
    1120:	72 87       	std	Z+10, r23	; 0x0a
    1122:	83 87       	std	Z+11, r24	; 0x0b
    1124:	94 87       	std	Z+12, r25	; 0x0c
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	08 f4       	brcc	.+2      	; 0x112e <_Z14ReadSubProgramj+0x142>
    112c:	06 c2       	rjmp	.+1036   	; 0x153a <_Z14ReadSubProgramj+0x54e>
    112e:	8e 01       	movw	r16, r28
    1130:	0b 5f       	subi	r16, 0xFB	; 251
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	ae 01       	movw	r20, r28
    1136:	4f 5f       	subi	r20, 0xFF	; 255
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	7a 01       	movw	r14, r20
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1142:	f8 01       	movw	r30, r16
    1144:	82 93       	st	-Z, r24
    1146:	8f 01       	movw	r16, r30
    1148:	ee 15       	cp	r30, r14
    114a:	ff 05       	cpc	r31, r15
    114c:	b9 f7       	brne	.-18     	; 0x113c <_Z14ReadSubProgramj+0x150>
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1156:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <CMDPRGlist+0xd>
    115a:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <CMDPRGlist+0xe>
    115e:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <CMDPRGlist+0xf>
    1162:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <CMDPRGlist+0x10>
    1166:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    116a:	88 23       	and	r24, r24
    116c:	09 f4       	brne	.+2      	; 0x1170 <_Z14ReadSubProgramj+0x184>
    116e:	57 c0       	rjmp	.+174    	; 0x121e <_Z14ReadSubProgramj+0x232>
    1170:	8e 01       	movw	r16, r28
    1172:	0b 5f       	subi	r16, 0xFB	; 251
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	ae 01       	movw	r20, r28
    1178:	4f 5f       	subi	r20, 0xFF	; 255
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	7a 01       	movw	r14, r20
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1184:	f8 01       	movw	r30, r16
    1186:	82 93       	st	-Z, r24
    1188:	8f 01       	movw	r16, r30
    118a:	ee 16       	cp	r14, r30
    118c:	ff 06       	cpc	r15, r31
    118e:	b9 f7       	brne	.-18     	; 0x117e <_Z14ReadSubProgramj+0x192>
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1198:	ee e3       	ldi	r30, 0x3E	; 62
    119a:	f8 e2       	ldi	r31, 0x28	; 40
    119c:	64 8b       	std	Z+20, r22	; 0x14
    119e:	75 8b       	std	Z+21, r23	; 0x15
    11a0:	86 8b       	std	Z+22, r24	; 0x16
    11a2:	97 8b       	std	Z+23, r25	; 0x17
    11a4:	84 81       	ldd	r24, Z+4	; 0x04
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <_Z14ReadSubProgramj+0x1c0>
    11aa:	ca c1       	rjmp	.+916    	; 0x1540 <_Z14ReadSubProgramj+0x554>
    11ac:	8e 01       	movw	r16, r28
    11ae:	0b 5f       	subi	r16, 0xFB	; 251
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	ae 01       	movw	r20, r28
    11b4:	4f 5f       	subi	r20, 0xFF	; 255
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	7a 01       	movw	r14, r20
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    11c0:	f8 01       	movw	r30, r16
    11c2:	82 93       	st	-Z, r24
    11c4:	8f 01       	movw	r16, r30
    11c6:	ee 16       	cp	r14, r30
    11c8:	ff 06       	cpc	r15, r31
    11ca:	b9 f7       	brne	.-18     	; 0x11ba <_Z14ReadSubProgramj+0x1ce>
    11cc:	ce 01       	movw	r24, r28
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    11d4:	ee e3       	ldi	r30, 0x3E	; 62
    11d6:	f8 e2       	ldi	r31, 0x28	; 40
    11d8:	60 8f       	std	Z+24, r22	; 0x18
    11da:	71 8f       	std	Z+25, r23	; 0x19
    11dc:	82 8f       	std	Z+26, r24	; 0x1a
    11de:	93 8f       	std	Z+27, r25	; 0x1b
    11e0:	84 81       	ldd	r24, Z+4	; 0x04
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	e0 f0       	brcs	.+56     	; 0x121e <_Z14ReadSubProgramj+0x232>
    11e6:	8e 01       	movw	r16, r28
    11e8:	0b 5f       	subi	r16, 0xFB	; 251
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	ae 01       	movw	r20, r28
    11ee:	4f 5f       	subi	r20, 0xFF	; 255
    11f0:	5f 4f       	sbci	r21, 0xFF	; 255
    11f2:	7a 01       	movw	r14, r20
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    11fa:	f8 01       	movw	r30, r16
    11fc:	82 93       	st	-Z, r24
    11fe:	8f 01       	movw	r16, r30
    1200:	ee 15       	cp	r30, r14
    1202:	ff 05       	cpc	r31, r15
    1204:	b9 f7       	brne	.-18     	; 0x11f4 <_Z14ReadSubProgramj+0x208>
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    120e:	60 93 5a 28 	sts	0x285A, r22	; 0x80285a <CMDPRGlist+0x1c>
    1212:	70 93 5b 28 	sts	0x285B, r23	; 0x80285b <CMDPRGlist+0x1d>
    1216:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CMDPRGlist+0x1e>
    121a:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CMDPRGlist+0x1f>
    121e:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <_Z14ReadSubProgramj+0x23c>
    1226:	90 c1       	rjmp	.+800    	; 0x1548 <_Z14ReadSubProgramj+0x55c>
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    122e:	ee e3       	ldi	r30, 0x3E	; 62
    1230:	f8 e2       	ldi	r31, 0x28	; 40
    1232:	81 8b       	std	Z+17, r24	; 0x11
    1234:	84 81       	ldd	r24, Z+4	; 0x04
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	28 f0       	brcs	.+10     	; 0x1244 <_Z14ReadSubProgramj+0x258>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1240:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <CMDPRGlist+0x12>
    1244:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	08 f4       	brcc	.+2      	; 0x124e <_Z14ReadSubProgramj+0x262>
    124c:	7d c1       	rjmp	.+762    	; 0x1548 <_Z14ReadSubProgramj+0x55c>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1254:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <CMDPRGlist+0x13>
    1258:	77 c1       	rjmp	.+750    	; 0x1548 <_Z14ReadSubProgramj+0x55c>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1260:	f6 01       	movw	r30, r12
    1262:	82 93       	st	-Z, r24
    1264:	6f 01       	movw	r12, r30
    1266:	0e 17       	cp	r16, r30
    1268:	1f 07       	cpc	r17, r31
    126a:	b9 f7       	brne	.-18     	; 0x125a <_Z14ReadSubProgramj+0x26e>
    126c:	ce 01       	movw	r24, r28
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1274:	60 93 5e 28 	sts	0x285E, r22	; 0x80285e <CMDPRGlist+0x20>
    1278:	70 93 5f 28 	sts	0x285F, r23	; 0x80285f <CMDPRGlist+0x21>
    127c:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <CMDPRGlist+0x22>
    1280:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <CMDPRGlist+0x23>
    1284:	67 01       	movw	r12, r14
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    128c:	f6 01       	movw	r30, r12
    128e:	82 93       	st	-Z, r24
    1290:	6f 01       	movw	r12, r30
    1292:	0e 17       	cp	r16, r30
    1294:	1f 07       	cpc	r17, r31
    1296:	b9 f7       	brne	.-18     	; 0x1286 <_Z14ReadSubProgramj+0x29a>
    1298:	ce 01       	movw	r24, r28
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    12a0:	60 93 62 28 	sts	0x2862, r22	; 0x802862 <CMDPRGlist+0x24>
    12a4:	70 93 63 28 	sts	0x2863, r23	; 0x802863 <CMDPRGlist+0x25>
    12a8:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <CMDPRGlist+0x26>
    12ac:	90 93 65 28 	sts	0x2865, r25	; 0x802865 <CMDPRGlist+0x27>
    12b0:	67 01       	movw	r12, r14
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    12b8:	f6 01       	movw	r30, r12
    12ba:	82 93       	st	-Z, r24
    12bc:	6f 01       	movw	r12, r30
    12be:	0e 17       	cp	r16, r30
    12c0:	1f 07       	cpc	r17, r31
    12c2:	b9 f7       	brne	.-18     	; 0x12b2 <_Z14ReadSubProgramj+0x2c6>
    12c4:	ce 01       	movw	r24, r28
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    12cc:	60 93 66 28 	sts	0x2866, r22	; 0x802866 <CMDPRGlist+0x28>
    12d0:	70 93 67 28 	sts	0x2867, r23	; 0x802867 <CMDPRGlist+0x29>
    12d4:	80 93 68 28 	sts	0x2868, r24	; 0x802868 <CMDPRGlist+0x2a>
    12d8:	90 93 69 28 	sts	0x2869, r25	; 0x802869 <CMDPRGlist+0x2b>
    12dc:	67 01       	movw	r12, r14
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    12e4:	f6 01       	movw	r30, r12
    12e6:	82 93       	st	-Z, r24
    12e8:	6f 01       	movw	r12, r30
    12ea:	0e 17       	cp	r16, r30
    12ec:	1f 07       	cpc	r17, r31
    12ee:	b9 f7       	brne	.-18     	; 0x12de <_Z14ReadSubProgramj+0x2f2>
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    12f8:	60 93 6a 28 	sts	0x286A, r22	; 0x80286a <CMDPRGlist+0x2c>
    12fc:	70 93 6b 28 	sts	0x286B, r23	; 0x80286b <CMDPRGlist+0x2d>
    1300:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <CMDPRGlist+0x2e>
    1304:	90 93 6d 28 	sts	0x286D, r25	; 0x80286d <CMDPRGlist+0x2f>
    1308:	67 01       	movw	r12, r14
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1310:	f6 01       	movw	r30, r12
    1312:	82 93       	st	-Z, r24
    1314:	6f 01       	movw	r12, r30
    1316:	e0 17       	cp	r30, r16
    1318:	f1 07       	cpc	r31, r17
    131a:	b9 f7       	brne	.-18     	; 0x130a <_Z14ReadSubProgramj+0x31e>
    131c:	ce 01       	movw	r24, r28
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1324:	60 93 6e 28 	sts	0x286E, r22	; 0x80286e <CMDPRGlist+0x30>
    1328:	70 93 6f 28 	sts	0x286F, r23	; 0x80286f <CMDPRGlist+0x31>
    132c:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <CMDPRGlist+0x32>
    1330:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <CMDPRGlist+0x33>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    133a:	f7 01       	movw	r30, r14
    133c:	82 93       	st	-Z, r24
    133e:	7f 01       	movw	r14, r30
    1340:	0e 17       	cp	r16, r30
    1342:	1f 07       	cpc	r17, r31
    1344:	b9 f7       	brne	.-18     	; 0x1334 <_Z14ReadSubProgramj+0x348>
    1346:	ce 01       	movw	r24, r28
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    134e:	60 93 72 28 	sts	0x2872, r22	; 0x802872 <CMDPRGlist+0x34>
    1352:	70 93 73 28 	sts	0x2873, r23	; 0x802873 <CMDPRGlist+0x35>
    1356:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <CMDPRGlist+0x36>
    135a:	90 93 75 28 	sts	0x2875, r25	; 0x802875 <CMDPRGlist+0x37>
    135e:	1c c1       	rjmp	.+568    	; 0x1598 <_Z14ReadSubProgramj+0x5ac>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1366:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <CMDPRGlist+0x4>
    136a:	88 23       	and	r24, r24
    136c:	09 f4       	brne	.+2      	; 0x1370 <_Z14ReadSubProgramj+0x384>
    136e:	0e c1       	rjmp	.+540    	; 0x158c <_Z14ReadSubProgramj+0x5a0>
    1370:	8e 01       	movw	r16, r28
    1372:	0b 5f       	subi	r16, 0xFB	; 251
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	ae 01       	movw	r20, r28
    1378:	4f 5f       	subi	r20, 0xFF	; 255
    137a:	5f 4f       	sbci	r21, 0xFF	; 255
    137c:	6a 01       	movw	r12, r20
    137e:	78 01       	movw	r14, r16
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1386:	f7 01       	movw	r30, r14
    1388:	82 93       	st	-Z, r24
    138a:	7f 01       	movw	r14, r30
    138c:	ec 15       	cp	r30, r12
    138e:	fd 05       	cpc	r31, r13
    1390:	b9 f7       	brne	.-18     	; 0x1380 <_Z14ReadSubProgramj+0x394>
    1392:	ce 01       	movw	r24, r28
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    139a:	ee e3       	ldi	r30, 0x3E	; 62
    139c:	f8 e2       	ldi	r31, 0x28	; 40
    139e:	65 83       	std	Z+5, r22	; 0x05
    13a0:	76 83       	std	Z+6, r23	; 0x06
    13a2:	87 83       	std	Z+7, r24	; 0x07
    13a4:	90 87       	std	Z+8, r25	; 0x08
    13a6:	84 81       	ldd	r24, Z+4	; 0x04
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <_Z14ReadSubProgramj+0x3c2>
    13ac:	d6 c0       	rjmp	.+428    	; 0x155a <_Z14ReadSubProgramj+0x56e>
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    13b4:	f8 01       	movw	r30, r16
    13b6:	82 93       	st	-Z, r24
    13b8:	8f 01       	movw	r16, r30
    13ba:	ec 15       	cp	r30, r12
    13bc:	fd 05       	cpc	r31, r13
    13be:	b9 f7       	brne	.-18     	; 0x13ae <_Z14ReadSubProgramj+0x3c2>
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    13c8:	ee e3       	ldi	r30, 0x3E	; 62
    13ca:	f8 e2       	ldi	r31, 0x28	; 40
    13cc:	61 87       	std	Z+9, r22	; 0x09
    13ce:	72 87       	std	Z+10, r23	; 0x0a
    13d0:	83 87       	std	Z+11, r24	; 0x0b
    13d2:	94 87       	std	Z+12, r25	; 0x0c
    13d4:	84 81       	ldd	r24, Z+4	; 0x04
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <_Z14ReadSubProgramj+0x3f0>
    13da:	c3 c0       	rjmp	.+390    	; 0x1562 <_Z14ReadSubProgramj+0x576>
    13dc:	8e 01       	movw	r16, r28
    13de:	0b 5f       	subi	r16, 0xFB	; 251
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	ae 01       	movw	r20, r28
    13e4:	4f 5f       	subi	r20, 0xFF	; 255
    13e6:	5f 4f       	sbci	r21, 0xFF	; 255
    13e8:	7a 01       	movw	r14, r20
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    13f0:	f8 01       	movw	r30, r16
    13f2:	82 93       	st	-Z, r24
    13f4:	8f 01       	movw	r16, r30
    13f6:	ee 16       	cp	r14, r30
    13f8:	ff 06       	cpc	r15, r31
    13fa:	b9 f7       	brne	.-18     	; 0x13ea <_Z14ReadSubProgramj+0x3fe>
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1404:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <CMDPRGlist+0xd>
    1408:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <CMDPRGlist+0xe>
    140c:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <CMDPRGlist+0xf>
    1410:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <CMDPRGlist+0x10>
    1414:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1418:	88 23       	and	r24, r24
    141a:	09 f4       	brne	.+2      	; 0x141e <_Z14ReadSubProgramj+0x432>
    141c:	57 c0       	rjmp	.+174    	; 0x14cc <_Z14ReadSubProgramj+0x4e0>
    141e:	8e 01       	movw	r16, r28
    1420:	0b 5f       	subi	r16, 0xFB	; 251
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	ae 01       	movw	r20, r28
    1426:	4f 5f       	subi	r20, 0xFF	; 255
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	7a 01       	movw	r14, r20
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1432:	f8 01       	movw	r30, r16
    1434:	82 93       	st	-Z, r24
    1436:	8f 01       	movw	r16, r30
    1438:	ee 16       	cp	r14, r30
    143a:	ff 06       	cpc	r15, r31
    143c:	b9 f7       	brne	.-18     	; 0x142c <_Z14ReadSubProgramj+0x440>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1446:	ee e3       	ldi	r30, 0x3E	; 62
    1448:	f8 e2       	ldi	r31, 0x28	; 40
    144a:	64 8b       	std	Z+20, r22	; 0x14
    144c:	75 8b       	std	Z+21, r23	; 0x15
    144e:	86 8b       	std	Z+22, r24	; 0x16
    1450:	97 8b       	std	Z+23, r25	; 0x17
    1452:	84 81       	ldd	r24, Z+4	; 0x04
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	08 f4       	brcc	.+2      	; 0x145a <_Z14ReadSubProgramj+0x46e>
    1458:	87 c0       	rjmp	.+270    	; 0x1568 <_Z14ReadSubProgramj+0x57c>
    145a:	8e 01       	movw	r16, r28
    145c:	0b 5f       	subi	r16, 0xFB	; 251
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	ae 01       	movw	r20, r28
    1462:	4f 5f       	subi	r20, 0xFF	; 255
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	7a 01       	movw	r14, r20
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    146e:	f8 01       	movw	r30, r16
    1470:	82 93       	st	-Z, r24
    1472:	8f 01       	movw	r16, r30
    1474:	ee 15       	cp	r30, r14
    1476:	ff 05       	cpc	r31, r15
    1478:	b9 f7       	brne	.-18     	; 0x1468 <_Z14ReadSubProgramj+0x47c>
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1482:	ee e3       	ldi	r30, 0x3E	; 62
    1484:	f8 e2       	ldi	r31, 0x28	; 40
    1486:	60 8f       	std	Z+24, r22	; 0x18
    1488:	71 8f       	std	Z+25, r23	; 0x19
    148a:	82 8f       	std	Z+26, r24	; 0x1a
    148c:	93 8f       	std	Z+27, r25	; 0x1b
    148e:	84 81       	ldd	r24, Z+4	; 0x04
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	e0 f0       	brcs	.+56     	; 0x14cc <_Z14ReadSubProgramj+0x4e0>
    1494:	8e 01       	movw	r16, r28
    1496:	0b 5f       	subi	r16, 0xFB	; 251
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	ae 01       	movw	r20, r28
    149c:	4f 5f       	subi	r20, 0xFF	; 255
    149e:	5f 4f       	sbci	r21, 0xFF	; 255
    14a0:	7a 01       	movw	r14, r20
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    14a8:	f8 01       	movw	r30, r16
    14aa:	82 93       	st	-Z, r24
    14ac:	8f 01       	movw	r16, r30
    14ae:	ee 15       	cp	r30, r14
    14b0:	ff 05       	cpc	r31, r15
    14b2:	b9 f7       	brne	.-18     	; 0x14a2 <_Z14ReadSubProgramj+0x4b6>
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    14bc:	60 93 5a 28 	sts	0x285A, r22	; 0x80285a <CMDPRGlist+0x1c>
    14c0:	70 93 5b 28 	sts	0x285B, r23	; 0x80285b <CMDPRGlist+0x1d>
    14c4:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CMDPRGlist+0x1e>
    14c8:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CMDPRGlist+0x1f>
    14cc:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    14d0:	88 23       	and	r24, r24
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <_Z14ReadSubProgramj+0x4ea>
    14d4:	4d c0       	rjmp	.+154    	; 0x1570 <_Z14ReadSubProgramj+0x584>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    14dc:	ee e3       	ldi	r30, 0x3E	; 62
    14de:	f8 e2       	ldi	r31, 0x28	; 40
    14e0:	81 8b       	std	Z+17, r24	; 0x11
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	28 f0       	brcs	.+10     	; 0x14f2 <_Z14ReadSubProgramj+0x506>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    14ee:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <CMDPRGlist+0x12>
    14f2:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	d8 f1       	brcs	.+118    	; 0x1570 <_Z14ReadSubProgramj+0x584>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1500:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <CMDPRGlist+0x13>
    1504:	35 c0       	rjmp	.+106    	; 0x1570 <_Z14ReadSubProgramj+0x584>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    150c:	f8 01       	movw	r30, r16
    150e:	82 93       	st	-Z, r24
    1510:	8f 01       	movw	r16, r30
    1512:	ee 16       	cp	r14, r30
    1514:	ff 06       	cpc	r15, r31
    1516:	b9 f7       	brne	.-18     	; 0x1506 <_Z14ReadSubProgramj+0x51a>
    1518:	ce 01       	movw	r24, r28
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1520:	60 93 5e 28 	sts	0x285E, r22	; 0x80285e <CMDPRGlist+0x20>
    1524:	70 93 5f 28 	sts	0x285F, r23	; 0x80285f <CMDPRGlist+0x21>
    1528:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <CMDPRGlist+0x22>
    152c:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <CMDPRGlist+0x23>
    1530:	33 c0       	rjmp	.+102    	; 0x1598 <_Z14ReadSubProgramj+0x5ac>
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	08 f0       	brcs	.+2      	; 0x1538 <_Z14ReadSubProgramj+0x54c>
    1536:	fb cd       	rjmp	.-1034   	; 0x112e <_Z14ReadSubProgramj+0x142>
    1538:	16 ce       	rjmp	.-980    	; 0x1166 <_Z14ReadSubProgramj+0x17a>
    153a:	81 11       	cpse	r24, r1
    153c:	19 ce       	rjmp	.-974    	; 0x1170 <_Z14ReadSubProgramj+0x184>
    153e:	23 c0       	rjmp	.+70     	; 0x1586 <_Z14ReadSubProgramj+0x59a>
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	08 f4       	brcc	.+2      	; 0x1546 <_Z14ReadSubProgramj+0x55a>
    1544:	6c ce       	rjmp	.-808    	; 0x121e <_Z14ReadSubProgramj+0x232>
    1546:	4f ce       	rjmp	.-866    	; 0x11e6 <_Z14ReadSubProgramj+0x1fa>
    1548:	7e 01       	movw	r14, r28
    154a:	f5 e0       	ldi	r31, 0x05	; 5
    154c:	ef 0e       	add	r14, r31
    154e:	f1 1c       	adc	r15, r1
    1550:	8e 01       	movw	r16, r28
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	67 01       	movw	r12, r14
    1558:	80 ce       	rjmp	.-768    	; 0x125a <_Z14ReadSubProgramj+0x26e>
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	08 f0       	brcs	.+2      	; 0x1560 <_Z14ReadSubProgramj+0x574>
    155e:	3e cf       	rjmp	.-388    	; 0x13dc <_Z14ReadSubProgramj+0x3f0>
    1560:	59 cf       	rjmp	.-334    	; 0x1414 <_Z14ReadSubProgramj+0x428>
    1562:	81 11       	cpse	r24, r1
    1564:	5c cf       	rjmp	.-328    	; 0x141e <_Z14ReadSubProgramj+0x432>
    1566:	15 c0       	rjmp	.+42     	; 0x1592 <_Z14ReadSubProgramj+0x5a6>
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	08 f4       	brcc	.+2      	; 0x156e <_Z14ReadSubProgramj+0x582>
    156c:	af cf       	rjmp	.-162    	; 0x14cc <_Z14ReadSubProgramj+0x4e0>
    156e:	92 cf       	rjmp	.-220    	; 0x1494 <_Z14ReadSubProgramj+0x4a8>
    1570:	8e 01       	movw	r16, r28
    1572:	0b 5f       	subi	r16, 0xFB	; 251
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	ae 01       	movw	r20, r28
    1578:	4f 5f       	subi	r20, 0xFF	; 255
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	7a 01       	movw	r14, r20
    157e:	c3 cf       	rjmp	.-122    	; 0x1506 <_Z14ReadSubProgramj+0x51a>
    1580:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1584:	da cf       	rjmp	.-76     	; 0x153a <_Z14ReadSubProgramj+0x54e>
    1586:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    158a:	da cf       	rjmp	.-76     	; 0x1540 <_Z14ReadSubProgramj+0x554>
    158c:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1590:	e8 cf       	rjmp	.-48     	; 0x1562 <_Z14ReadSubProgramj+0x576>
    1592:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1596:	e8 cf       	rjmp	.-48     	; 0x1568 <_Z14ReadSubProgramj+0x57c>
    1598:	24 96       	adiw	r28, 0x04	; 4
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	08 95       	ret

000015b0 <_Z11WriteSeriall>:
    15b0:	7f 92       	push	r7
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <_Z11WriteSeriall+0x1c>
    15cc:	1f 92       	push	r1
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	4b 01       	movw	r8, r22
    15d4:	5c 01       	movw	r10, r24
    15d6:	87 ee       	ldi	r24, 0xE7	; 231
    15d8:	93 e0       	ldi	r25, 0x03	; 3
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <fk>
    15e2:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <fk+0x1>
    15e6:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <fk+0x2>
    15ea:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <fk+0x3>
    15ee:	8e ec       	ldi	r24, 0xCE	; 206
    15f0:	97 e0       	ldi	r25, 0x07	; 7
    15f2:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <ft>
    15f6:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <ft+0x1>
    15fa:	8e ec       	ldi	r24, 0xCE	; 206
    15fc:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <fadd1>
    1600:	87 e0       	ldi	r24, 0x07	; 7
    1602:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <fadd2>
    1606:	00 e8       	ldi	r16, 0x80	; 128
    1608:	16 e0       	ldi	r17, 0x06	; 6
    160a:	f8 01       	movw	r30, r16
    160c:	84 81       	ldd	r24, Z+4	; 0x04
    160e:	80 61       	ori	r24, 0x10	; 16
    1610:	84 83       	std	Z+4, r24	; 0x04
    1612:	84 81       	ldd	r24, Z+4	; 0x04
    1614:	8f 7e       	andi	r24, 0xEF	; 239
    1616:	84 83       	std	Z+4, r24	; 0x04
    1618:	81 e8       	ldi	r24, 0x81	; 129
    161a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    161e:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
    1622:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1626:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
    162a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1634:	f8 01       	movw	r30, r16
    1636:	84 81       	ldd	r24, Z+4	; 0x04
    1638:	80 61       	ori	r24, 0x10	; 16
    163a:	84 83       	std	Z+4, r24	; 0x04
    163c:	0f 2e       	mov	r0, r31
    163e:	f0 ee       	ldi	r31, 0xE0	; 224
    1640:	ef 2e       	mov	r14, r31
    1642:	f7 e0       	ldi	r31, 0x07	; 7
    1644:	ff 2e       	mov	r15, r31
    1646:	f0 2d       	mov	r31, r0
    1648:	0f 2e       	mov	r0, r31
    164a:	f1 eb       	ldi	r31, 0xB1	; 177
    164c:	cf 2e       	mov	r12, r31
    164e:	f0 e2       	ldi	r31, 0x20	; 32
    1650:	df 2e       	mov	r13, r31
    1652:	f0 2d       	mov	r31, r0
    1654:	f8 01       	movw	r30, r16
    1656:	84 81       	ldd	r24, Z+4	; 0x04
    1658:	8f 7e       	andi	r24, 0xEF	; 239
    165a:	84 83       	std	Z+4, r24	; 0x04
    165c:	f7 01       	movw	r30, r14
    165e:	84 81       	ldd	r24, Z+4	; 0x04
    1660:	80 ff       	sbrs	r24, 0
    1662:	03 c0       	rjmp	.+6      	; 0x166a <_Z11WriteSeriall+0xba>
    1664:	84 81       	ldd	r24, Z+4	; 0x04
    1666:	84 83       	std	Z+4, r24	; 0x04
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <_Z11WriteSeriall+0xc2>
    166a:	f7 01       	movw	r30, r14
    166c:	84 81       	ldd	r24, Z+4	; 0x04
    166e:	81 60       	ori	r24, 0x01	; 1
    1670:	84 83       	std	Z+4, r24	; 0x04
    1672:	87 ed       	ldi	r24, 0xD7	; 215
    1674:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    167e:	78 2e       	mov	r7, r24
    1680:	1f 92       	push	r1
    1682:	8f 93       	push	r24
    1684:	df 92       	push	r13
    1686:	cf 92       	push	r12
    1688:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    168c:	f8 01       	movw	r30, r16
    168e:	84 81       	ldd	r24, Z+4	; 0x04
    1690:	80 61       	ori	r24, 0x10	; 16
    1692:	84 83       	std	Z+4, r24	; 0x04
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	77 20       	and	r7, r7
    169e:	d4 f6       	brge	.-76     	; 0x1654 <_Z11WriteSeriall+0xa4>
    16a0:	e0 e8       	ldi	r30, 0x80	; 128
    16a2:	f6 e0       	ldi	r31, 0x06	; 6
    16a4:	84 81       	ldd	r24, Z+4	; 0x04
    16a6:	8f 7e       	andi	r24, 0xEF	; 239
    16a8:	84 83       	std	Z+4, r24	; 0x04
    16aa:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7007e4>
    16ae:	81 ff       	sbrs	r24, 1
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <_Z11WriteSeriall+0x10e>
    16b2:	e0 ee       	ldi	r30, 0xE0	; 224
    16b4:	f7 e0       	ldi	r31, 0x07	; 7
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	8e 7f       	andi	r24, 0xFE	; 254
    16ba:	84 83       	std	Z+4, r24	; 0x04
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <_Z11WriteSeriall+0x118>
    16be:	e0 ee       	ldi	r30, 0xE0	; 224
    16c0:	f7 e0       	ldi	r31, 0x07	; 7
    16c2:	84 81       	ldd	r24, Z+4	; 0x04
    16c4:	82 60       	ori	r24, 0x02	; 2
    16c6:	84 83       	std	Z+4, r24	; 0x04
    16c8:	84 e8       	ldi	r24, 0x84	; 132
    16ca:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    16ce:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
    16d2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    16d6:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
    16da:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    16e4:	ae 01       	movw	r20, r28
    16e6:	4f 5f       	subi	r20, 0xFF	; 255
    16e8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ea:	c5 01       	movw	r24, r10
    16ec:	b4 01       	movw	r22, r8
    16ee:	0e 94 95 02 	call	0x52a	; 0x52a <_Z4ltoblPc>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	1f 92       	push	r1
    16f6:	8f 93       	push	r24
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	1f 92       	push	r1
    16fc:	8f 93       	push	r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	1f 92       	push	r1
    1702:	8f 93       	push	r24
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	1f 92       	push	r1
    1708:	8f 93       	push	r24
    170a:	8e eb       	ldi	r24, 0xBE	; 190
    170c:	90 e2       	ldi	r25, 0x20	; 32
    170e:	9f 93       	push	r25
    1710:	8f 93       	push	r24
    1712:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    172e:	00 e8       	ldi	r16, 0x80	; 128
    1730:	16 e0       	ldi	r17, 0x06	; 6
    1732:	f8 01       	movw	r30, r16
    1734:	84 81       	ldd	r24, Z+4	; 0x04
    1736:	80 61       	ori	r24, 0x10	; 16
    1738:	84 83       	std	Z+4, r24	; 0x04
    173a:	84 81       	ldd	r24, Z+4	; 0x04
    173c:	8f 7e       	andi	r24, 0xEF	; 239
    173e:	84 83       	std	Z+4, r24	; 0x04
    1740:	83 e8       	ldi	r24, 0x83	; 131
    1742:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1746:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
    174a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    174e:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
    1752:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    175c:	f8 01       	movw	r30, r16
    175e:	84 81       	ldd	r24, Z+4	; 0x04
    1760:	80 61       	ori	r24, 0x10	; 16
    1762:	84 83       	std	Z+4, r24	; 0x04
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	24 96       	adiw	r28, 0x04	; 4
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	df 90       	pop	r13
    177c:	cf 90       	pop	r12
    177e:	bf 90       	pop	r11
    1780:	af 90       	pop	r10
    1782:	9f 90       	pop	r9
    1784:	8f 90       	pop	r8
    1786:	7f 90       	pop	r7
    1788:	08 95       	ret

0000178a <_Z9tcc0_initv>:
    178a:	2f b7       	in	r18, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	e0 e0       	ldi	r30, 0x00	; 0
    1790:	f8 e0       	ldi	r31, 0x08	; 8
    1792:	10 82       	st	Z, r1
    1794:	8c e0       	ldi	r24, 0x0C	; 12
    1796:	81 87       	std	Z+9, r24	; 0x09
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	80 83       	st	Z, r24
    179c:	81 83       	std	Z+1, r24	; 0x01
    179e:	13 82       	std	Z+3, r1	; 0x03
    17a0:	14 82       	std	Z+4, r1	; 0x04
    17a2:	16 82       	std	Z+6, r1	; 0x06
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	87 83       	std	Z+7, r24	; 0x07
    17a8:	a0 e9       	ldi	r26, 0x90	; 144
    17aa:	b8 e0       	ldi	r27, 0x08	; 8
    17ac:	8c 91       	ld	r24, X
    17ae:	8e 7f       	andi	r24, 0xFE	; 254
    17b0:	8c 93       	st	X, r24
    17b2:	a0 e9       	ldi	r26, 0x90	; 144
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	19 96       	adiw	r26, 0x09	; 9
    17b8:	8c 91       	ld	r24, X
    17ba:	19 97       	sbiw	r26, 0x09	; 9
    17bc:	8e 7f       	andi	r24, 0xFE	; 254
    17be:	98 ed       	ldi	r25, 0xD8	; 216
    17c0:	94 bf       	out	0x34, r25	; 52
    17c2:	19 96       	adiw	r26, 0x09	; 9
    17c4:	8c 93       	st	X, r24
    17c6:	a0 e8       	ldi	r26, 0x80	; 128
    17c8:	b8 e0       	ldi	r27, 0x08	; 8
    17ca:	1c 92       	st	X, r1
    17cc:	18 96       	adiw	r26, 0x08	; 8
    17ce:	1c 92       	st	X, r1
    17d0:	18 97       	sbiw	r26, 0x08	; 8
    17d2:	19 96       	adiw	r26, 0x09	; 9
    17d4:	1c 92       	st	X, r1
    17d6:	19 97       	sbiw	r26, 0x09	; 9
    17d8:	1c 96       	adiw	r26, 0x0c	; 12
    17da:	1c 92       	st	X, r1
    17dc:	1c 97       	sbiw	r26, 0x0c	; 12
    17de:	13 96       	adiw	r26, 0x03	; 3
    17e0:	8c 91       	ld	r24, X
    17e2:	13 97       	sbiw	r26, 0x03	; 3
    17e4:	88 7e       	andi	r24, 0xE8	; 232
    17e6:	13 96       	adiw	r26, 0x03	; 3
    17e8:	8c 93       	st	X, r24
    17ea:	13 97       	sbiw	r26, 0x03	; 3
    17ec:	12 96       	adiw	r26, 0x02	; 2
    17ee:	1c 92       	st	X, r1
    17f0:	12 97       	sbiw	r26, 0x02	; 2
    17f2:	14 96       	adiw	r26, 0x04	; 4
    17f4:	8c 91       	ld	r24, X
    17f6:	14 97       	sbiw	r26, 0x04	; 4
    17f8:	14 96       	adiw	r26, 0x04	; 4
    17fa:	9c 91       	ld	r25, X
    17fc:	14 97       	sbiw	r26, 0x04	; 4
    17fe:	84 70       	andi	r24, 0x04	; 4
    1800:	89 2b       	or	r24, r25
    1802:	14 96       	adiw	r26, 0x04	; 4
    1804:	8c 93       	st	X, r24
    1806:	84 85       	ldd	r24, Z+12	; 0x0c
    1808:	84 87       	std	Z+12, r24	; 0x0c
    180a:	10 a2       	std	Z+32, r1	; 0x20
    180c:	11 a2       	std	Z+33, r1	; 0x21
    180e:	16 a2       	std	Z+38, r1	; 0x26
    1810:	17 a2       	std	Z+39, r1	; 0x27
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	80 a7       	std	Z+40, r24	; 0x28
    1818:	91 a7       	std	Z+41, r25	; 0x29
    181a:	12 a6       	std	Z+42, r1	; 0x2a
    181c:	13 a6       	std	Z+43, r1	; 0x2b
    181e:	14 a6       	std	Z+44, r1	; 0x2c
    1820:	15 a6       	std	Z+45, r1	; 0x2d
    1822:	16 a6       	std	Z+46, r1	; 0x2e
    1824:	17 a6       	std	Z+47, r1	; 0x2f
    1826:	2f bf       	out	0x3f, r18	; 63
    1828:	08 95       	ret

0000182a <_Z9tcc1_initv>:

// Note: The correct PORTC direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    182a:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    182c:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    182e:	e0 e4       	ldi	r30, 0x40	; 64
    1830:	f8 e0       	ldi	r31, 0x08	; 8
    1832:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    1834:	8c e0       	ldi	r24, 0x0C	; 12
    1836:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCC1);
// Clock source: ClkPer/8
TCC1.CTRLA=TC_CLKSEL_DIV8_gc;
    1838:	84 e0       	ldi	r24, 0x04	; 4
    183a:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCC1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    183c:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCC1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    183e:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCC1.CTRLE=(0<<TC1_BYTEM_bp);
    1840:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Medium Level
// Error interrupt: Disabled
TCC1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCC1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1846:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESC.CTRLA&= ~HIRES_HREN1_bm;
    1848:	a0 e9       	ldi	r26, 0x90	; 144
    184a:	b8 e0       	ldi	r27, 0x08	; 8
    184c:	8c 91       	ld	r24, X
    184e:	8d 7f       	andi	r24, 0xFD	; 253
    1850:	8c 93       	st	X, r24

// Clear the interrupt flags
TCC1.INTFLAGS=TCC1.INTFLAGS;
    1852:	84 85       	ldd	r24, Z+12	; 0x0c
    1854:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCC1.CNT=0x0000;
    1856:	10 a2       	std	Z+32, r1	; 0x20
    1858:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCC1.PER=0x9C3F;
    185a:	2f e3       	ldi	r18, 0x3F	; 63
    185c:	3c e9       	ldi	r19, 0x9C	; 156
    185e:	26 a3       	std	Z+38, r18	; 0x26
    1860:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCC1.CCA=0x0000;
    1862:	10 a6       	std	Z+40, r1	; 0x28
    1864:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCC1.CCB=0x0000;
    1866:	12 a6       	std	Z+42, r1	; 0x2a
    1868:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    186a:	9f bf       	out	0x3f, r25	; 63
    186c:	08 95       	ret

0000186e <_Z9tcd1_initv>:

// Note: The correct PORTD direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    186e:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    1870:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    1872:	e0 e4       	ldi	r30, 0x40	; 64
    1874:	f9 e0       	ldi	r31, 0x09	; 9
    1876:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    1878:	8c e0       	ldi	r24, 0x0C	; 12
    187a:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCD1);
// Clock source: ClkPer/64
TCD1.CTRLA=TC_CLKSEL_DIV64_gc;
    187c:	85 e0       	ldi	r24, 0x05	; 5
    187e:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCD1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    1880:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCD1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1882:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCD1.CTRLE=(0<<TC1_BYTEM_bp);
    1884:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Low Level
// Error interrupt: Disabled
TCD1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_LO_gc;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCD1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    188a:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESD.CTRLA&= ~HIRES_HREN1_bm;
    188c:	a0 e9       	ldi	r26, 0x90	; 144
    188e:	b9 e0       	ldi	r27, 0x09	; 9
    1890:	8c 91       	ld	r24, X
    1892:	8d 7f       	andi	r24, 0xFD	; 253
    1894:	8c 93       	st	X, r24

// Clear the interrupt flags
TCD1.INTFLAGS=TCD1.INTFLAGS;
    1896:	84 85       	ldd	r24, Z+12	; 0x0c
    1898:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCD1.CNT=0x0000;
    189a:	10 a2       	std	Z+32, r1	; 0x20
    189c:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCD1.PER=0xC34F;
    189e:	2f e4       	ldi	r18, 0x4F	; 79
    18a0:	33 ec       	ldi	r19, 0xC3	; 195
    18a2:	26 a3       	std	Z+38, r18	; 0x26
    18a4:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCD1.CCA=0x0000;
    18a6:	10 a6       	std	Z+40, r1	; 0x28
    18a8:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCD1.CCB=0x0000;
    18aa:	12 a6       	std	Z+42, r1	; 0x2a
    18ac:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    18ae:	9f bf       	out	0x3f, r25	; 63
    18b0:	08 95       	ret

000018b2 <__vector_16>:
char SerChIndex;
char RunSubProgram;
char IsPause=0;
// Timer/Counter TCC0 Compare/Capture A interrupt service routine
ISR (TCC0_CCA_vect) 
{          
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	08 b6       	in	r0, 0x38	; 56
    18be:	0f 92       	push	r0
    18c0:	18 be       	out	0x38, r1	; 56
    18c2:	09 b6       	in	r0, 0x39	; 57
    18c4:	0f 92       	push	r0
    18c6:	19 be       	out	0x39, r1	; 57
    18c8:	0b b6       	in	r0, 0x3b	; 59
    18ca:	0f 92       	push	r0
    18cc:	1b be       	out	0x3b, r1	; 59
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
    if (TCC0.INTFLAGS & TC0_CCAIF_bm) TCC0.INTFLAGS|=TC0_CCAIF_bm;   
    18e6:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    18ea:	84 ff       	sbrs	r24, 4
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <__vector_16+0x46>
    18ee:	e0 e0       	ldi	r30, 0x00	; 0
    18f0:	f8 e0       	ldi	r31, 0x08	; 8
    18f2:	84 85       	ldd	r24, Z+12	; 0x0c
    18f4:	80 61       	ori	r24, 0x10	; 16
    18f6:	84 87       	std	Z+12, r24	; 0x0c
     
    if(MaxDistanceToGo>0) MaxDistanceToGo--;
    18f8:	80 91 94 27 	lds	r24, 0x2794	; 0x802794 <MaxDistanceToGo>
    18fc:	90 91 95 27 	lds	r25, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    1900:	a0 91 96 27 	lds	r26, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    1904:	b0 91 97 27 	lds	r27, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    1908:	18 16       	cp	r1, r24
    190a:	19 06       	cpc	r1, r25
    190c:	1a 06       	cpc	r1, r26
    190e:	1b 06       	cpc	r1, r27
    1910:	5c f4       	brge	.+22     	; 0x1928 <__vector_16+0x76>
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	a1 09       	sbc	r26, r1
    1916:	b1 09       	sbc	r27, r1
    1918:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <MaxDistanceToGo>
    191c:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <MaxDistanceToGo+0x1>
    1920:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <MaxDistanceToGo+0x2>
    1924:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <MaxDistanceToGo+0x3>
     
    if(DistanceToGo1>0)
    1928:	40 91 90 27 	lds	r20, 0x2790	; 0x802790 <DistanceToGo1>
    192c:	50 91 91 27 	lds	r21, 0x2791	; 0x802791 <DistanceToGo1+0x1>
    1930:	60 91 92 27 	lds	r22, 0x2792	; 0x802792 <DistanceToGo1+0x2>
    1934:	70 91 93 27 	lds	r23, 0x2793	; 0x802793 <DistanceToGo1+0x3>
    1938:	14 16       	cp	r1, r20
    193a:	15 06       	cpc	r1, r21
    193c:	16 06       	cpc	r1, r22
    193e:	17 06       	cpc	r1, r23
    1940:	0c f0       	brlt	.+2      	; 0x1944 <__vector_16+0x92>
    1942:	63 c0       	rjmp	.+198    	; 0x1a0a <__vector_16+0x158>
    {              
      Pi1+=Ma1; 
    1944:	20 91 36 27 	lds	r18, 0x2736	; 0x802736 <Pi1>
    1948:	30 91 37 27 	lds	r19, 0x2737	; 0x802737 <Pi1+0x1>
    194c:	80 91 30 27 	lds	r24, 0x2730	; 0x802730 <Ma1>
    1950:	90 91 31 27 	lds	r25, 0x2731	; 0x802731 <Ma1+0x1>
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	80 93 36 27 	sts	0x2736, r24	; 0x802736 <Pi1>
    195c:	90 93 37 27 	sts	0x2737, r25	; 0x802737 <Pi1+0x1>
      if(Pi1>=1000)
    1960:	88 3e       	cpi	r24, 0xE8	; 232
    1962:	23 e0       	ldi	r18, 0x03	; 3
    1964:	92 07       	cpc	r25, r18
    1966:	08 f4       	brcc	.+2      	; 0x196a <__vector_16+0xb8>
    1968:	4c c0       	rjmp	.+152    	; 0x1a02 <__vector_16+0x150>
      {                   
        PULSE1;
    196a:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    196e:	25 ff       	sbrs	r18, 5
    1970:	06 c0       	rjmp	.+12     	; 0x197e <__vector_16+0xcc>
    1972:	e0 e2       	ldi	r30, 0x20	; 32
    1974:	f7 e0       	ldi	r31, 0x07	; 7
    1976:	24 81       	ldd	r18, Z+4	; 0x04
    1978:	2a 7f       	andi	r18, 0xFA	; 250
    197a:	24 83       	std	Z+4, r18	; 0x04
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <__vector_16+0xd6>
    197e:	e0 e2       	ldi	r30, 0x20	; 32
    1980:	f7 e0       	ldi	r31, 0x07	; 7
    1982:	24 81       	ldd	r18, Z+4	; 0x04
    1984:	20 62       	ori	r18, 0x20	; 32
    1986:	24 83       	std	Z+4, r18	; 0x04
        Pi1-=1000;
    1988:	88 5e       	subi	r24, 0xE8	; 232
    198a:	93 40       	sbci	r25, 0x03	; 3
    198c:	80 93 36 27 	sts	0x2736, r24	; 0x802736 <Pi1>
    1990:	90 93 37 27 	sts	0x2737, r25	; 0x802737 <Pi1+0x1>
        DistanceToGo1--;   
    1994:	41 50       	subi	r20, 0x01	; 1
    1996:	51 09       	sbc	r21, r1
    1998:	61 09       	sbc	r22, r1
    199a:	71 09       	sbc	r23, r1
    199c:	40 93 90 27 	sts	0x2790, r20	; 0x802790 <DistanceToGo1>
    19a0:	50 93 91 27 	sts	0x2791, r21	; 0x802791 <DistanceToGo1+0x1>
    19a4:	60 93 92 27 	sts	0x2792, r22	; 0x802792 <DistanceToGo1+0x2>
    19a8:	70 93 93 27 	sts	0x2793, r23	; 0x802793 <DistanceToGo1+0x3>
        if(DIR1==0) AxisPosition1--;  
    19ac:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    19b0:	84 fd       	sbrc	r24, 4
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <__vector_16+0x12a>
    19b4:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    19b8:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    19bc:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    19c0:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	a1 09       	sbc	r26, r1
    19c8:	b1 09       	sbc	r27, r1
    19ca:	80 93 ac 27 	sts	0x27AC, r24	; 0x8027ac <AxisPosition1>
    19ce:	90 93 ad 27 	sts	0x27AD, r25	; 0x8027ad <AxisPosition1+0x1>
    19d2:	a0 93 ae 27 	sts	0x27AE, r26	; 0x8027ae <AxisPosition1+0x2>
    19d6:	b0 93 af 27 	sts	0x27AF, r27	; 0x8027af <AxisPosition1+0x3>
    19da:	13 c0       	rjmp	.+38     	; 0x1a02 <__vector_16+0x150>
        else AxisPosition1++; 
    19dc:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    19e0:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    19e4:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    19e8:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	a1 1d       	adc	r26, r1
    19f0:	b1 1d       	adc	r27, r1
    19f2:	80 93 ac 27 	sts	0x27AC, r24	; 0x8027ac <AxisPosition1>
    19f6:	90 93 ad 27 	sts	0x27AD, r25	; 0x8027ad <AxisPosition1+0x1>
    19fa:	a0 93 ae 27 	sts	0x27AE, r26	; 0x8027ae <AxisPosition1+0x2>
    19fe:	b0 93 af 27 	sts	0x27AF, r27	; 0x8027af <AxisPosition1+0x3>
      } 
      AxisIsMoving1=1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	80 93 48 27 	sts	0x2748, r24	; 0x802748 <AxisIsMoving1>
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <__vector_16+0x15c>
    } 
    else
    {
      AxisIsMoving1=0;
    1a0a:	10 92 48 27 	sts	0x2748, r1	; 0x802748 <AxisIsMoving1>
    }   
                            
    if(DistanceToGo2>0)
    1a0e:	40 91 8c 27 	lds	r20, 0x278C	; 0x80278c <DistanceToGo2>
    1a12:	50 91 8d 27 	lds	r21, 0x278D	; 0x80278d <DistanceToGo2+0x1>
    1a16:	60 91 8e 27 	lds	r22, 0x278E	; 0x80278e <DistanceToGo2+0x2>
    1a1a:	70 91 8f 27 	lds	r23, 0x278F	; 0x80278f <DistanceToGo2+0x3>
    1a1e:	14 16       	cp	r1, r20
    1a20:	15 06       	cpc	r1, r21
    1a22:	16 06       	cpc	r1, r22
    1a24:	17 06       	cpc	r1, r23
    1a26:	0c f0       	brlt	.+2      	; 0x1a2a <__vector_16+0x178>
    1a28:	63 c0       	rjmp	.+198    	; 0x1af0 <__vector_16+0x23e>
    {
      Pi2+=Ma2; 
    1a2a:	20 91 34 27 	lds	r18, 0x2734	; 0x802734 <Pi2>
    1a2e:	30 91 35 27 	lds	r19, 0x2735	; 0x802735 <Pi2+0x1>
    1a32:	80 91 2e 27 	lds	r24, 0x272E	; 0x80272e <Ma2>
    1a36:	90 91 2f 27 	lds	r25, 0x272F	; 0x80272f <Ma2+0x1>
    1a3a:	82 0f       	add	r24, r18
    1a3c:	93 1f       	adc	r25, r19
    1a3e:	80 93 34 27 	sts	0x2734, r24	; 0x802734 <Pi2>
    1a42:	90 93 35 27 	sts	0x2735, r25	; 0x802735 <Pi2+0x1>
      if(Pi2>=1000)
    1a46:	88 3e       	cpi	r24, 0xE8	; 232
    1a48:	23 e0       	ldi	r18, 0x03	; 3
    1a4a:	92 07       	cpc	r25, r18
    1a4c:	08 f4       	brcc	.+2      	; 0x1a50 <__vector_16+0x19e>
    1a4e:	4c c0       	rjmp	.+152    	; 0x1ae8 <__vector_16+0x236>
      {                   
        PULSE2;
    1a50:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1a54:	23 ff       	sbrs	r18, 3
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <__vector_16+0x1b2>
    1a58:	e0 e2       	ldi	r30, 0x20	; 32
    1a5a:	f7 e0       	ldi	r31, 0x07	; 7
    1a5c:	24 81       	ldd	r18, Z+4	; 0x04
    1a5e:	2c 7f       	andi	r18, 0xFC	; 252
    1a60:	24 83       	std	Z+4, r18	; 0x04
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <__vector_16+0x1bc>
    1a64:	e0 e2       	ldi	r30, 0x20	; 32
    1a66:	f7 e0       	ldi	r31, 0x07	; 7
    1a68:	24 81       	ldd	r18, Z+4	; 0x04
    1a6a:	28 60       	ori	r18, 0x08	; 8
    1a6c:	24 83       	std	Z+4, r18	; 0x04
        Pi2-=1000;
    1a6e:	88 5e       	subi	r24, 0xE8	; 232
    1a70:	93 40       	sbci	r25, 0x03	; 3
    1a72:	80 93 34 27 	sts	0x2734, r24	; 0x802734 <Pi2>
    1a76:	90 93 35 27 	sts	0x2735, r25	; 0x802735 <Pi2+0x1>
        DistanceToGo2--;   
    1a7a:	41 50       	subi	r20, 0x01	; 1
    1a7c:	51 09       	sbc	r21, r1
    1a7e:	61 09       	sbc	r22, r1
    1a80:	71 09       	sbc	r23, r1
    1a82:	40 93 8c 27 	sts	0x278C, r20	; 0x80278c <DistanceToGo2>
    1a86:	50 93 8d 27 	sts	0x278D, r21	; 0x80278d <DistanceToGo2+0x1>
    1a8a:	60 93 8e 27 	sts	0x278E, r22	; 0x80278e <DistanceToGo2+0x2>
    1a8e:	70 93 8f 27 	sts	0x278F, r23	; 0x80278f <DistanceToGo2+0x3>
        if(DIR2==0) AxisPosition2--;  
    1a92:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1a96:	82 fd       	sbrc	r24, 2
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <__vector_16+0x210>
    1a9a:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    1a9e:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    1aa2:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    1aa6:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	a1 09       	sbc	r26, r1
    1aae:	b1 09       	sbc	r27, r1
    1ab0:	80 93 a8 27 	sts	0x27A8, r24	; 0x8027a8 <AxisPosition2>
    1ab4:	90 93 a9 27 	sts	0x27A9, r25	; 0x8027a9 <AxisPosition2+0x1>
    1ab8:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <AxisPosition2+0x2>
    1abc:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <AxisPosition2+0x3>
    1ac0:	13 c0       	rjmp	.+38     	; 0x1ae8 <__vector_16+0x236>
        else AxisPosition2++; 
    1ac2:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    1ac6:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    1aca:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    1ace:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	a1 1d       	adc	r26, r1
    1ad6:	b1 1d       	adc	r27, r1
    1ad8:	80 93 a8 27 	sts	0x27A8, r24	; 0x8027a8 <AxisPosition2>
    1adc:	90 93 a9 27 	sts	0x27A9, r25	; 0x8027a9 <AxisPosition2+0x1>
    1ae0:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <AxisPosition2+0x2>
    1ae4:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <AxisPosition2+0x3>
      }
     AxisIsMoving2=1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	80 93 47 27 	sts	0x2747, r24	; 0x802747 <AxisIsMoving2>
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <__vector_16+0x242>
    } 
    else
    {
      AxisIsMoving2=0;
    1af0:	10 92 47 27 	sts	0x2747, r1	; 0x802747 <AxisIsMoving2>
    }
        
    if(DistanceToGo3>0)
    1af4:	40 91 88 27 	lds	r20, 0x2788	; 0x802788 <DistanceToGo3>
    1af8:	50 91 89 27 	lds	r21, 0x2789	; 0x802789 <DistanceToGo3+0x1>
    1afc:	60 91 8a 27 	lds	r22, 0x278A	; 0x80278a <DistanceToGo3+0x2>
    1b00:	70 91 8b 27 	lds	r23, 0x278B	; 0x80278b <DistanceToGo3+0x3>
    1b04:	14 16       	cp	r1, r20
    1b06:	15 06       	cpc	r1, r21
    1b08:	16 06       	cpc	r1, r22
    1b0a:	17 06       	cpc	r1, r23
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <__vector_16+0x25e>
    1b0e:	63 c0       	rjmp	.+198    	; 0x1bd6 <__vector_16+0x324>
    {
      Pi3+=Ma3; 
    1b10:	20 91 32 27 	lds	r18, 0x2732	; 0x802732 <Pi3>
    1b14:	30 91 33 27 	lds	r19, 0x2733	; 0x802733 <Pi3+0x1>
    1b18:	80 91 2c 27 	lds	r24, 0x272C	; 0x80272c <Ma3>
    1b1c:	90 91 2d 27 	lds	r25, 0x272D	; 0x80272d <Ma3+0x1>
    1b20:	82 0f       	add	r24, r18
    1b22:	93 1f       	adc	r25, r19
    1b24:	80 93 32 27 	sts	0x2732, r24	; 0x802732 <Pi3>
    1b28:	90 93 33 27 	sts	0x2733, r25	; 0x802733 <Pi3+0x1>
      if(Pi3>=1000)
    1b2c:	88 3e       	cpi	r24, 0xE8	; 232
    1b2e:	23 e0       	ldi	r18, 0x03	; 3
    1b30:	92 07       	cpc	r25, r18
    1b32:	08 f4       	brcc	.+2      	; 0x1b36 <__vector_16+0x284>
    1b34:	4c c0       	rjmp	.+152    	; 0x1bce <__vector_16+0x31c>
      {                   
        PULSE3;
    1b36:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1b3a:	21 ff       	sbrs	r18, 1
    1b3c:	06 c0       	rjmp	.+12     	; 0x1b4a <__vector_16+0x298>
    1b3e:	e0 e2       	ldi	r30, 0x20	; 32
    1b40:	f7 e0       	ldi	r31, 0x07	; 7
    1b42:	24 81       	ldd	r18, Z+4	; 0x04
    1b44:	2e 7f       	andi	r18, 0xFE	; 254
    1b46:	24 83       	std	Z+4, r18	; 0x04
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <__vector_16+0x2a2>
    1b4a:	e0 e2       	ldi	r30, 0x20	; 32
    1b4c:	f7 e0       	ldi	r31, 0x07	; 7
    1b4e:	24 81       	ldd	r18, Z+4	; 0x04
    1b50:	22 60       	ori	r18, 0x02	; 2
    1b52:	24 83       	std	Z+4, r18	; 0x04
        Pi3-=1000;
    1b54:	88 5e       	subi	r24, 0xE8	; 232
    1b56:	93 40       	sbci	r25, 0x03	; 3
    1b58:	80 93 32 27 	sts	0x2732, r24	; 0x802732 <Pi3>
    1b5c:	90 93 33 27 	sts	0x2733, r25	; 0x802733 <Pi3+0x1>
        DistanceToGo3--;   
    1b60:	41 50       	subi	r20, 0x01	; 1
    1b62:	51 09       	sbc	r21, r1
    1b64:	61 09       	sbc	r22, r1
    1b66:	71 09       	sbc	r23, r1
    1b68:	40 93 88 27 	sts	0x2788, r20	; 0x802788 <DistanceToGo3>
    1b6c:	50 93 89 27 	sts	0x2789, r21	; 0x802789 <DistanceToGo3+0x1>
    1b70:	60 93 8a 27 	sts	0x278A, r22	; 0x80278a <DistanceToGo3+0x2>
    1b74:	70 93 8b 27 	sts	0x278B, r23	; 0x80278b <DistanceToGo3+0x3>
        if(DIR3==0) AxisPosition3--;  
    1b78:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1b7c:	80 fd       	sbrc	r24, 0
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <__vector_16+0x2f6>
    1b80:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    1b84:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    1b88:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    1b8c:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	a1 09       	sbc	r26, r1
    1b94:	b1 09       	sbc	r27, r1
    1b96:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <AxisPosition3>
    1b9a:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <AxisPosition3+0x1>
    1b9e:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <AxisPosition3+0x2>
    1ba2:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <AxisPosition3+0x3>
    1ba6:	13 c0       	rjmp	.+38     	; 0x1bce <__vector_16+0x31c>
        else AxisPosition3++; 
    1ba8:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    1bac:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    1bb0:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    1bb4:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	b1 1d       	adc	r27, r1
    1bbe:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <AxisPosition3>
    1bc2:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <AxisPosition3+0x1>
    1bc6:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <AxisPosition3+0x2>
    1bca:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <AxisPosition3+0x3>
      }
     AxisIsMoving3=1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	80 93 46 27 	sts	0x2746, r24	; 0x802746 <AxisIsMoving3>
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <__vector_16+0x328>
    } 
    else
    {
      AxisIsMoving3=0;
    1bd6:	10 92 46 27 	sts	0x2746, r1	; 0x802746 <AxisIsMoving3>
    }
}
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0b be       	out	0x3b, r0	; 59
    1bf6:	0f 90       	pop	r0
    1bf8:	09 be       	out	0x39, r0	; 57
    1bfa:	0f 90       	pop	r0
    1bfc:	08 be       	out	0x38, r0	; 56
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <__vector_20>:

// Timer/Counter TCC1 Overflow/Underflow interrupt service routine
ISR (TCC1_OVF_vect)
{
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	08 b6       	in	r0, 0x38	; 56
    1c14:	0f 92       	push	r0
    1c16:	18 be       	out	0x38, r1	; 56
    1c18:	09 b6       	in	r0, 0x39	; 57
    1c1a:	0f 92       	push	r0
    1c1c:	19 be       	out	0x39, r1	; 57
    1c1e:	0b b6       	in	r0, 0x3b	; 59
    1c20:	0f 92       	push	r0
    1c22:	1b be       	out	0x3b, r1	; 59
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	2f 93       	push	r18
    1c32:	3f 93       	push	r19
    1c34:	4f 93       	push	r20
    1c36:	5f 93       	push	r21
    1c38:	6f 93       	push	r22
    1c3a:	7f 93       	push	r23
    1c3c:	8f 93       	push	r24
    1c3e:	9f 93       	push	r25
    1c40:	af 93       	push	r26
    1c42:	bf 93       	push	r27
    1c44:	ef 93       	push	r30
    1c46:	ff 93       	push	r31
  float PER;
  j++;   
    1c48:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <j>
    1c4c:	90 91 27 27 	lds	r25, 0x2727	; 0x802727 <j+0x1>
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	80 93 26 27 	sts	0x2726, r24	; 0x802726 <j>
    1c56:	90 93 27 27 	sts	0x2727, r25	; 0x802727 <j+0x1>
  if(MaxDistanceToGo>0)
    1c5a:	c0 90 94 27 	lds	r12, 0x2794	; 0x802794 <MaxDistanceToGo>
    1c5e:	d0 90 95 27 	lds	r13, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    1c62:	e0 90 96 27 	lds	r14, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    1c66:	f0 90 97 27 	lds	r15, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    1c6a:	1c 14       	cp	r1, r12
    1c6c:	1d 04       	cpc	r1, r13
    1c6e:	1e 04       	cpc	r1, r14
    1c70:	1f 04       	cpc	r1, r15
    1c72:	0c f0       	brlt	.+2      	; 0x1c76 <__vector_20+0x6e>
    1c74:	86 c0       	rjmp	.+268    	; 0x1d82 <__vector_20+0x17a>
  {
    if(MaxDistanceToGo >= AccDTG)
    1c76:	80 91 84 27 	lds	r24, 0x2784	; 0x802784 <AccDTG>
    1c7a:	90 91 85 27 	lds	r25, 0x2785	; 0x802785 <AccDTG+0x1>
    1c7e:	a0 91 86 27 	lds	r26, 0x2786	; 0x802786 <AccDTG+0x2>
    1c82:	b0 91 87 27 	lds	r27, 0x2787	; 0x802787 <AccDTG+0x3>
    1c86:	c8 16       	cp	r12, r24
    1c88:	d9 06       	cpc	r13, r25
    1c8a:	ea 06       	cpc	r14, r26
    1c8c:	fb 06       	cpc	r15, r27
    1c8e:	b4 f1       	brlt	.+108    	; 0x1cfc <__vector_20+0xf4>
    {
    CurSpeedFrq+= ACCSpeedINT; 
    1c90:	40 91 42 27 	lds	r20, 0x2742	; 0x802742 <CurSpeedFrq>
    1c94:	50 91 43 27 	lds	r21, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1c98:	60 91 44 27 	lds	r22, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1c9c:	70 91 45 27 	lds	r23, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1ca0:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <ACCSpeedINT>
    1ca4:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <ACCSpeedINT+0x1>
    1ca8:	a0 91 40 27 	lds	r26, 0x2740	; 0x802740 <ACCSpeedINT+0x2>
    1cac:	b0 91 41 27 	lds	r27, 0x2741	; 0x802741 <ACCSpeedINT+0x3>
    1cb0:	8a 01       	movw	r16, r20
    1cb2:	9b 01       	movw	r18, r22
    1cb4:	08 0f       	add	r16, r24
    1cb6:	19 1f       	adc	r17, r25
    1cb8:	2a 1f       	adc	r18, r26
    1cba:	3b 1f       	adc	r19, r27
    1cbc:	c9 01       	movw	r24, r18
    1cbe:	b8 01       	movw	r22, r16
    1cc0:	00 93 42 27 	sts	0x2742, r16	; 0x802742 <CurSpeedFrq>
    1cc4:	10 93 43 27 	sts	0x2743, r17	; 0x802743 <CurSpeedFrq+0x1>
    1cc8:	20 93 44 27 	sts	0x2744, r18	; 0x802744 <CurSpeedFrq+0x2>
    1ccc:	30 93 45 27 	sts	0x2745, r19	; 0x802745 <CurSpeedFrq+0x3>
    PER=(float)(16000.0/CurSpeedFrq);        
    TCC0.CCA=(unsigned int)(PER*1000);
    1cd0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    1cd4:	9b 01       	movw	r18, r22
    1cd6:	ac 01       	movw	r20, r24
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	8a e7       	ldi	r24, 0x7A	; 122
    1cde:	96 e4       	ldi	r25, 0x46	; 70
    1ce0:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	4a e7       	ldi	r20, 0x7A	; 122
    1cea:	54 e4       	ldi	r21, 0x44	; 68
    1cec:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    1cf0:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    1cf4:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1cf8:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    }
    if(MaxDistanceToGo <= DecDTG)
    1cfc:	80 91 80 27 	lds	r24, 0x2780	; 0x802780 <DecDTG>
    1d00:	90 91 81 27 	lds	r25, 0x2781	; 0x802781 <DecDTG+0x1>
    1d04:	a0 91 82 27 	lds	r26, 0x2782	; 0x802782 <DecDTG+0x2>
    1d08:	b0 91 83 27 	lds	r27, 0x2783	; 0x802783 <DecDTG+0x3>
    1d0c:	8c 15       	cp	r24, r12
    1d0e:	9d 05       	cpc	r25, r13
    1d10:	ae 05       	cpc	r26, r14
    1d12:	bf 05       	cpc	r27, r15
    1d14:	0c f4       	brge	.+2      	; 0x1d18 <__vector_20+0x110>
    1d16:	04 c1       	rjmp	.+520    	; 0x1f20 <__vector_20+0x318>
    {
    CurSpeedFrq-= ACCSpeedINT; 
    1d18:	80 91 42 27 	lds	r24, 0x2742	; 0x802742 <CurSpeedFrq>
    1d1c:	90 91 43 27 	lds	r25, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1d20:	a0 91 44 27 	lds	r26, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1d24:	b0 91 45 27 	lds	r27, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1d28:	c0 90 3e 27 	lds	r12, 0x273E	; 0x80273e <ACCSpeedINT>
    1d2c:	d0 90 3f 27 	lds	r13, 0x273F	; 0x80273f <ACCSpeedINT+0x1>
    1d30:	e0 90 40 27 	lds	r14, 0x2740	; 0x802740 <ACCSpeedINT+0x2>
    1d34:	f0 90 41 27 	lds	r15, 0x2741	; 0x802741 <ACCSpeedINT+0x3>
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	6c 19       	sub	r22, r12
    1d3e:	7d 09       	sbc	r23, r13
    1d40:	8e 09       	sbc	r24, r14
    1d42:	9f 09       	sbc	r25, r15
    1d44:	60 93 42 27 	sts	0x2742, r22	; 0x802742 <CurSpeedFrq>
    1d48:	70 93 43 27 	sts	0x2743, r23	; 0x802743 <CurSpeedFrq+0x1>
    1d4c:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <CurSpeedFrq+0x2>
    1d50:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <CurSpeedFrq+0x3>
    PER=(float)(16000.0/CurSpeedFrq);        
    TCC0.CCA=(unsigned int)(PER*1000);
    1d54:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    1d58:	9b 01       	movw	r18, r22
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	8a e7       	ldi	r24, 0x7A	; 122
    1d62:	96 e4       	ldi	r25, 0x46	; 70
    1d64:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a e7       	ldi	r20, 0x7A	; 122
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    1d74:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    1d78:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1d7c:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1d80:	cf c0       	rjmp	.+414    	; 0x1f20 <__vector_20+0x318>
    }  
  }
  else
  {          
      if(ACC==1)
    1d82:	80 91 39 27 	lds	r24, 0x2739	; 0x802739 <ACC>
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <__vector_20+0x184>
    1d8a:	51 c0       	rjmp	.+162    	; 0x1e2e <__vector_20+0x226>
      {
         CurSpeedFrq+= ACCSpeedINT;
    1d8c:	40 91 42 27 	lds	r20, 0x2742	; 0x802742 <CurSpeedFrq>
    1d90:	50 91 43 27 	lds	r21, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1d94:	60 91 44 27 	lds	r22, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1d98:	70 91 45 27 	lds	r23, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1d9c:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <ACCSpeedINT>
    1da0:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <ACCSpeedINT+0x1>
    1da4:	a0 91 40 27 	lds	r26, 0x2740	; 0x802740 <ACCSpeedINT+0x2>
    1da8:	b0 91 41 27 	lds	r27, 0x2741	; 0x802741 <ACCSpeedINT+0x3>
    1dac:	84 0f       	add	r24, r20
    1dae:	95 1f       	adc	r25, r21
    1db0:	a6 1f       	adc	r26, r22
    1db2:	b7 1f       	adc	r27, r23
    1db4:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <CurSpeedFrq>
    1db8:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <CurSpeedFrq+0x1>
    1dbc:	a0 93 44 27 	sts	0x2744, r26	; 0x802744 <CurSpeedFrq+0x2>
    1dc0:	b0 93 45 27 	sts	0x2745, r27	; 0x802745 <CurSpeedFrq+0x3>
         if(CurSpeedFrq>=MaxSpeed)
    1dc4:	40 91 6d 27 	lds	r20, 0x276D	; 0x80276d <MaxSpeed>
    1dc8:	50 91 6e 27 	lds	r21, 0x276E	; 0x80276e <MaxSpeed+0x1>
    1dcc:	60 91 6f 27 	lds	r22, 0x276F	; 0x80276f <MaxSpeed+0x2>
    1dd0:	70 91 70 27 	lds	r23, 0x2770	; 0x802770 <MaxSpeed+0x3>
    1dd4:	84 17       	cp	r24, r20
    1dd6:	95 07       	cpc	r25, r21
    1dd8:	a6 07       	cpc	r26, r22
    1dda:	b7 07       	cpc	r27, r23
    1ddc:	54 f0       	brlt	.+20     	; 0x1df2 <__vector_20+0x1ea>
         {
           CurSpeedFrq=MaxSpeed;   
    1dde:	40 93 42 27 	sts	0x2742, r20	; 0x802742 <CurSpeedFrq>
    1de2:	50 93 43 27 	sts	0x2743, r21	; 0x802743 <CurSpeedFrq+0x1>
    1de6:	60 93 44 27 	sts	0x2744, r22	; 0x802744 <CurSpeedFrq+0x2>
    1dea:	70 93 45 27 	sts	0x2745, r23	; 0x802745 <CurSpeedFrq+0x3>
           ACC=0;
    1dee:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
         } 
         PER=(float)(16000.0/CurSpeedFrq);   
            
        TCC0.CCA=(unsigned int)(PER*1000); 
    1df2:	60 91 42 27 	lds	r22, 0x2742	; 0x802742 <CurSpeedFrq>
    1df6:	70 91 43 27 	lds	r23, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1dfa:	80 91 44 27 	lds	r24, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1dfe:	90 91 45 27 	lds	r25, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1e02:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    1e06:	9b 01       	movw	r18, r22
    1e08:	ac 01       	movw	r20, r24
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	8a e7       	ldi	r24, 0x7A	; 122
    1e10:	96 e4       	ldi	r25, 0x46	; 70
    1e12:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	4a e7       	ldi	r20, 0x7A	; 122
    1e1c:	54 e4       	ldi	r21, 0x44	; 68
    1e1e:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    1e22:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    1e26:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1e2a:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      } 
      if(DEC==1)
    1e2e:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <DEC>
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <__vector_20+0x230>
    1e36:	74 c0       	rjmp	.+232    	; 0x1f20 <__vector_20+0x318>
      { 
         CurSpeedFrq-= DECSpeedINT;
    1e38:	40 91 3a 27 	lds	r20, 0x273A	; 0x80273a <DECSpeedINT>
    1e3c:	50 91 3b 27 	lds	r21, 0x273B	; 0x80273b <DECSpeedINT+0x1>
    1e40:	60 91 3c 27 	lds	r22, 0x273C	; 0x80273c <DECSpeedINT+0x2>
    1e44:	70 91 3d 27 	lds	r23, 0x273D	; 0x80273d <DECSpeedINT+0x3>
    1e48:	80 91 42 27 	lds	r24, 0x2742	; 0x802742 <CurSpeedFrq>
    1e4c:	90 91 43 27 	lds	r25, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1e50:	a0 91 44 27 	lds	r26, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1e54:	b0 91 45 27 	lds	r27, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1e58:	84 1b       	sub	r24, r20
    1e5a:	95 0b       	sbc	r25, r21
    1e5c:	a6 0b       	sbc	r26, r22
    1e5e:	b7 0b       	sbc	r27, r23
         if(CurSpeedFrq<=DECSpeedINT)
    1e60:	48 17       	cp	r20, r24
    1e62:	59 07       	cpc	r21, r25
    1e64:	6a 07       	cpc	r22, r26
    1e66:	7b 07       	cpc	r23, r27
    1e68:	4c f4       	brge	.+18     	; 0x1e7c <__vector_20+0x274>
            
        TCC0.CCA=(unsigned int)(PER*1000); 
      } 
      if(DEC==1)
      { 
         CurSpeedFrq-= DECSpeedINT;
    1e6a:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <CurSpeedFrq>
    1e6e:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <CurSpeedFrq+0x1>
    1e72:	a0 93 44 27 	sts	0x2744, r26	; 0x802744 <CurSpeedFrq+0x2>
    1e76:	b0 93 45 27 	sts	0x2745, r27	; 0x802745 <CurSpeedFrq+0x3>
    1e7a:	34 c0       	rjmp	.+104    	; 0x1ee4 <__vector_20+0x2dc>
         if(CurSpeedFrq<=DECSpeedINT)
         {
           CurSpeedFrq=DECSpeedINT;   
    1e7c:	40 93 42 27 	sts	0x2742, r20	; 0x802742 <CurSpeedFrq>
    1e80:	50 93 43 27 	sts	0x2743, r21	; 0x802743 <CurSpeedFrq+0x1>
    1e84:	60 93 44 27 	sts	0x2744, r22	; 0x802744 <CurSpeedFrq+0x2>
    1e88:	70 93 45 27 	sts	0x2745, r23	; 0x802745 <CurSpeedFrq+0x3>
           DEC=0;  
    1e8c:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
           if(FreeJog==1)
    1e90:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <FreeJog>
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	59 f4       	brne	.+22     	; 0x1eae <__vector_20+0x2a6>
           {
            FreeJog=0;  
    1e98:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            DistanceToGo1=0;
    1e9c:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    1ea0:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    1ea4:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    1ea8:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
    1eac:	1b c0       	rjmp	.+54     	; 0x1ee4 <__vector_20+0x2dc>
           }
           if(FreeJog==2)
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	59 f4       	brne	.+22     	; 0x1ec8 <__vector_20+0x2c0>
           {
            FreeJog=0;  
    1eb2:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            DistanceToGo2=0;
    1eb6:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    1eba:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    1ebe:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    1ec2:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
    1ec6:	0e c0       	rjmp	.+28     	; 0x1ee4 <__vector_20+0x2dc>
           }
           if(FreeJog==3)
    1ec8:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <FreeJog>
    1ecc:	83 30       	cpi	r24, 0x03	; 3
    1ece:	51 f4       	brne	.+20     	; 0x1ee4 <__vector_20+0x2dc>
           {
            FreeJog=0;  
    1ed0:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            DistanceToGo3=0;
    1ed4:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    1ed8:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    1edc:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    1ee0:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
           }
         }
         PER=(float)(16000.0/CurSpeedFrq); 
            
        TCC0.CCA=(unsigned int)(PER*1000);  
    1ee4:	60 91 42 27 	lds	r22, 0x2742	; 0x802742 <CurSpeedFrq>
    1ee8:	70 91 43 27 	lds	r23, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1eec:	80 91 44 27 	lds	r24, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1ef0:	90 91 45 27 	lds	r25, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1ef4:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    1ef8:	9b 01       	movw	r18, r22
    1efa:	ac 01       	movw	r20, r24
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	8a e7       	ldi	r24, 0x7A	; 122
    1f02:	96 e4       	ldi	r25, 0x46	; 70
    1f04:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a e7       	ldi	r20, 0x7A	; 122
    1f0e:	54 e4       	ldi	r21, 0x44	; 68
    1f10:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    1f14:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    1f18:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1f1c:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      } 
  } 
  //printf("%u\r\n",TCC0.CCA);        
}
    1f20:	ff 91       	pop	r31
    1f22:	ef 91       	pop	r30
    1f24:	bf 91       	pop	r27
    1f26:	af 91       	pop	r26
    1f28:	9f 91       	pop	r25
    1f2a:	8f 91       	pop	r24
    1f2c:	7f 91       	pop	r23
    1f2e:	6f 91       	pop	r22
    1f30:	5f 91       	pop	r21
    1f32:	4f 91       	pop	r20
    1f34:	3f 91       	pop	r19
    1f36:	2f 91       	pop	r18
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	0f 90       	pop	r0
    1f46:	0b be       	out	0x3b, r0	; 59
    1f48:	0f 90       	pop	r0
    1f4a:	09 be       	out	0x39, r0	; 57
    1f4c:	0f 90       	pop	r0
    1f4e:	08 be       	out	0x38, r0	; 56
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	0f 90       	pop	r0
    1f56:	1f 90       	pop	r1
    1f58:	18 95       	reti

00001f5a <__vector_83>:

// Timer/Counter TCD1 Overflow/Underflow interrupt service routine
ISR (TCD1_OVF_vect)
{ 
    1f5a:	1f 92       	push	r1
    1f5c:	0f 92       	push	r0
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	0f 92       	push	r0
    1f62:	11 24       	eor	r1, r1
    1f64:	08 b6       	in	r0, 0x38	; 56
    1f66:	0f 92       	push	r0
    1f68:	18 be       	out	0x38, r1	; 56
    1f6a:	8f 93       	push	r24
   if(Axes[0].HardwareLimitNegIsActive)
    1f6c:	80 91 e7 27 	lds	r24, 0x27E7	; 0x8027e7 <Axes+0x2a>
    1f70:	88 23       	and	r24, r24
    1f72:	79 f1       	breq	.+94     	; 0x1fd2 <__vector_83+0x78>
   {  
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routin)\r\n");  
       //printf("LIM POS X: %u\r\n",LIM_NEG1);            
       if(!DIR1 && !LIM_NEG1)       
    1f74:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1f78:	84 fd       	sbrc	r24, 4
    1f7a:	2b c0       	rjmp	.+86     	; 0x1fd2 <__vector_83+0x78>
    1f7c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1f80:	84 ff       	sbrs	r24, 4
    1f82:	28 c1       	rjmp	.+592    	; 0x21d4 <__vector_83+0x27a>
    1f84:	26 c0       	rjmp	.+76     	; 0x1fd2 <__vector_83+0x78>
       {
         if(AxisIsMoving1) 
         {
          DistanceToGo1=0;      
    1f86:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    1f8a:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    1f8e:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    1f92:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          if(!RefCmd)
    1f96:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	1a c0       	rjmp	.+52     	; 0x1fd2 <__vector_83+0x78>
          {
            FreeJog=0;
    1f9e:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    1fa2:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    1fa6:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    1faa:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    1fae:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    1fb2:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    1fb6:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    1fba:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    1fbe:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
            DistanceToGo3=0;  
    1fc2:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    1fc6:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    1fca:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    1fce:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          } 
         }
       }  
   }
     
   if(Axes[0].HardwareLimitPosIsActive)
    1fd2:	80 91 e6 27 	lds	r24, 0x27E6	; 0x8027e6 <Axes+0x29>
    1fd6:	88 23       	and	r24, r24
    1fd8:	79 f1       	breq	.+94     	; 0x2038 <__vector_83+0xde>
   { 
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routin)\r\n");    
       //printf("LIM POS X: %u\r\n",LIM_NEG1);
       if(DIR1 && !LIM_POS1)       
    1fda:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1fde:	84 ff       	sbrs	r24, 4
    1fe0:	2b c0       	rjmp	.+86     	; 0x2038 <__vector_83+0xde>
    1fe2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1fe6:	83 ff       	sbrs	r24, 3
    1fe8:	fa c0       	rjmp	.+500    	; 0x21de <__vector_83+0x284>
    1fea:	26 c0       	rjmp	.+76     	; 0x2038 <__vector_83+0xde>
       {
         //printf("Axis X PLimit is Active.\r\n");
         if(AxisIsMoving1) 
         {
          DistanceToGo1=0;      
    1fec:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    1ff0:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    1ff4:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    1ff8:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          if(!RefCmd)
    1ffc:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    2000:	81 11       	cpse	r24, r1
    2002:	1a c0       	rjmp	.+52     	; 0x2038 <__vector_83+0xde>
          {
            FreeJog=0;
    2004:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    2008:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    200c:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    2010:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    2014:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    2018:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    201c:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    2020:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    2024:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
            DistanceToGo3=0;  
    2028:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    202c:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    2030:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    2034:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          } 
         }
       } 
   }
  //------------------------------------------- 
   if(Axes[1].HardwareLimitNegIsActive)  
    2038:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <Axes+0x55>
    203c:	88 23       	and	r24, r24
    203e:	79 f1       	breq	.+94     	; 0x209e <__vector_83+0x144>
   {
       if(!DIR2 && !LIM_NEG2)       
    2040:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2044:	82 fd       	sbrc	r24, 2
    2046:	2b c0       	rjmp	.+86     	; 0x209e <__vector_83+0x144>
    2048:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    204c:	86 ff       	sbrs	r24, 6
    204e:	cc c0       	rjmp	.+408    	; 0x21e8 <__vector_83+0x28e>
    2050:	26 c0       	rjmp	.+76     	; 0x209e <__vector_83+0x144>
       { 
         if(AxisIsMoving2)
         {
          DistanceToGo2=0;      
    2052:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    2056:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    205a:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    205e:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
          if(!RefCmd)
    2062:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    2066:	81 11       	cpse	r24, r1
    2068:	1a c0       	rjmp	.+52     	; 0x209e <__vector_83+0x144>
          {
            FreeJog=0;
    206a:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    206e:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    2072:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    2076:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    207a:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo1=0;
    207e:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    2082:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    2086:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    208a:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
            DistanceToGo3=0;  
    208e:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    2092:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    2096:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    209a:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          }
         }
       }    
   }
   
   if(Axes[1].HardwareLimitPosIsActive)
    209e:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <Axes+0x54>
    20a2:	88 23       	and	r24, r24
    20a4:	79 f1       	breq	.+94     	; 0x2104 <__vector_83+0x1aa>
   {
       if(DIR2 && !LIM_POS2)       
    20a6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    20aa:	82 ff       	sbrs	r24, 2
    20ac:	2b c0       	rjmp	.+86     	; 0x2104 <__vector_83+0x1aa>
    20ae:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    20b2:	80 ff       	sbrs	r24, 0
    20b4:	9e c0       	rjmp	.+316    	; 0x21f2 <__vector_83+0x298>
    20b6:	26 c0       	rjmp	.+76     	; 0x2104 <__vector_83+0x1aa>
       { 
         if(AxisIsMoving2)
         {
          DistanceToGo2=0;      
    20b8:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    20bc:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    20c0:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    20c4:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
          if(!RefCmd)
    20c8:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    20cc:	81 11       	cpse	r24, r1
    20ce:	1a c0       	rjmp	.+52     	; 0x2104 <__vector_83+0x1aa>
          {
            FreeJog=0;
    20d0:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    20d4:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    20d8:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    20dc:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    20e0:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo1=0;
    20e4:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    20e8:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    20ec:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    20f0:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
            DistanceToGo3=0;  
    20f4:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    20f8:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    20fc:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    2100:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          }
         }
       } 
   }  
   //----------------------------------------------- 
   if(Axes[2].HardwareLimitNegIsActive)
    2104:	80 91 3d 28 	lds	r24, 0x283D	; 0x80283d <Axes+0x80>
    2108:	88 23       	and	r24, r24
    210a:	79 f1       	breq	.+94     	; 0x216a <__vector_83+0x210>
   {
       if(!DIR3 && !LIM_NEG3)       
    210c:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2110:	80 fd       	sbrc	r24, 0
    2112:	2b c0       	rjmp	.+86     	; 0x216a <__vector_83+0x210>
    2114:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    2118:	84 ff       	sbrs	r24, 4
    211a:	70 c0       	rjmp	.+224    	; 0x21fc <__vector_83+0x2a2>
    211c:	26 c0       	rjmp	.+76     	; 0x216a <__vector_83+0x210>
       {
         if(AxisIsMoving3)
         {
          DistanceToGo3=0;      
    211e:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    2122:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    2126:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    212a:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          if(!RefCmd)
    212e:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    2132:	81 11       	cpse	r24, r1
    2134:	1a c0       	rjmp	.+52     	; 0x216a <__vector_83+0x210>
          {
            FreeJog=0;
    2136:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    213a:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    213e:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    2142:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    2146:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    214a:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    214e:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    2152:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    2156:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
            DistanceToGo1=0;  
    215a:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    215e:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    2162:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    2166:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          }
         }
       }
   }
   
   if(Axes[2].HardwareLimitPosIsActive)
    216a:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <Axes+0x7f>
    216e:	88 23       	and	r24, r24
    2170:	09 f4       	brne	.+2      	; 0x2174 <__vector_83+0x21a>
    2172:	4d c0       	rjmp	.+154    	; 0x220e <__vector_83+0x2b4>
   {
       if(DIR3 && !LIM_POS3)       
    2174:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2178:	80 ff       	sbrs	r24, 0
    217a:	49 c0       	rjmp	.+146    	; 0x220e <__vector_83+0x2b4>
    217c:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    2180:	85 ff       	sbrs	r24, 5
    2182:	41 c0       	rjmp	.+130    	; 0x2206 <__vector_83+0x2ac>
    2184:	44 c0       	rjmp	.+136    	; 0x220e <__vector_83+0x2b4>
       {
         if(AxisIsMoving3)
         {
          DistanceToGo3=0;      
    2186:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    218a:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    218e:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    2192:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          if(!RefCmd)
    2196:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    219a:	81 11       	cpse	r24, r1
    219c:	38 c0       	rjmp	.+112    	; 0x220e <__vector_83+0x2b4>
          {
            FreeJog=0;
    219e:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    21a2:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    21a6:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    21aa:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    21ae:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    21b2:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    21b6:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    21ba:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    21be:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
            DistanceToGo1=0;  
    21c2:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    21c6:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    21ca:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    21ce:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          }
         }
       }
   } 
}
    21d2:	1d c0       	rjmp	.+58     	; 0x220e <__vector_83+0x2b4>
   {  
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routin)\r\n");  
       //printf("LIM POS X: %u\r\n",LIM_NEG1);            
       if(!DIR1 && !LIM_NEG1)       
       {
         if(AxisIsMoving1) 
    21d4:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    21d8:	81 11       	cpse	r24, r1
    21da:	d5 ce       	rjmp	.-598    	; 0x1f86 <__vector_83+0x2c>
    21dc:	fa ce       	rjmp	.-524    	; 0x1fd2 <__vector_83+0x78>
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routin)\r\n");    
       //printf("LIM POS X: %u\r\n",LIM_NEG1);
       if(DIR1 && !LIM_POS1)       
       {
         //printf("Axis X PLimit is Active.\r\n");
         if(AxisIsMoving1) 
    21de:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    21e2:	81 11       	cpse	r24, r1
    21e4:	03 cf       	rjmp	.-506    	; 0x1fec <__vector_83+0x92>
    21e6:	28 cf       	rjmp	.-432    	; 0x2038 <__vector_83+0xde>
  //------------------------------------------- 
   if(Axes[1].HardwareLimitNegIsActive)  
   {
       if(!DIR2 && !LIM_NEG2)       
       { 
         if(AxisIsMoving2)
    21e8:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    21ec:	81 11       	cpse	r24, r1
    21ee:	31 cf       	rjmp	.-414    	; 0x2052 <__vector_83+0xf8>
    21f0:	56 cf       	rjmp	.-340    	; 0x209e <__vector_83+0x144>
   
   if(Axes[1].HardwareLimitPosIsActive)
   {
       if(DIR2 && !LIM_POS2)       
       { 
         if(AxisIsMoving2)
    21f2:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    21f6:	81 11       	cpse	r24, r1
    21f8:	5f cf       	rjmp	.-322    	; 0x20b8 <__vector_83+0x15e>
    21fa:	84 cf       	rjmp	.-248    	; 0x2104 <__vector_83+0x1aa>
   //----------------------------------------------- 
   if(Axes[2].HardwareLimitNegIsActive)
   {
       if(!DIR3 && !LIM_NEG3)       
       {
         if(AxisIsMoving3)
    21fc:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    2200:	81 11       	cpse	r24, r1
    2202:	8d cf       	rjmp	.-230    	; 0x211e <__vector_83+0x1c4>
    2204:	b2 cf       	rjmp	.-156    	; 0x216a <__vector_83+0x210>
   
   if(Axes[2].HardwareLimitPosIsActive)
   {
       if(DIR3 && !LIM_POS3)       
       {
         if(AxisIsMoving3)
    2206:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    220a:	81 11       	cpse	r24, r1
    220c:	bc cf       	rjmp	.-136    	; 0x2186 <__vector_83+0x22c>
            DistanceToGo1=0;  
          }
         }
       }
   } 
}
    220e:	8f 91       	pop	r24
    2210:	0f 90       	pop	r0
    2212:	08 be       	out	0x38, r0	; 56
    2214:	0f 90       	pop	r0
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	0f 90       	pop	r0
    221a:	1f 90       	pop	r1
    221c:	18 95       	reti

0000221e <_Z6PRGExev>:

void PRGExe()
{
    221e:	4f 92       	push	r4
    2220:	5f 92       	push	r5
    2222:	6f 92       	push	r6
    2224:	7f 92       	push	r7
    2226:	8f 92       	push	r8
    2228:	9f 92       	push	r9
    222a:	af 92       	push	r10
    222c:	bf 92       	push	r11
    222e:	cf 92       	push	r12
    2230:	df 92       	push	r13
    2232:	ef 92       	push	r14
    2234:	ff 92       	push	r15
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	28 97       	sbiw	r28, 0x08	; 8
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	de bf       	out	0x3e, r29	; 62
 switch (CMDPRGlist.Mode) 
    2248:	80 91 41 28 	lds	r24, 0x2841	; 0x802841 <CMDPRGlist+0x3>
    224c:	8e 30       	cpi	r24, 0x0E	; 14
    224e:	09 f4       	brne	.+2      	; 0x2252 <_Z6PRGExev+0x34>
    2250:	9f c2       	rjmp	.+1342   	; 0x2790 <_Z6PRGExev+0x572>
    2252:	58 f4       	brcc	.+22     	; 0x226a <_Z6PRGExev+0x4c>
    2254:	81 30       	cpi	r24, 0x01	; 1
    2256:	09 f4       	brne	.+2      	; 0x225a <_Z6PRGExev+0x3c>
    2258:	de c0       	rjmp	.+444    	; 0x2416 <_Z6PRGExev+0x1f8>
    225a:	c8 f0       	brcs	.+50     	; 0x228e <_Z6PRGExev+0x70>
    225c:	8c 30       	cpi	r24, 0x0C	; 12
    225e:	09 f4       	brne	.+2      	; 0x2262 <_Z6PRGExev+0x44>
    2260:	96 c1       	rjmp	.+812    	; 0x258e <_Z6PRGExev+0x370>
    2262:	8d 30       	cpi	r24, 0x0D	; 13
    2264:	09 f4       	brne	.+2      	; 0x2268 <_Z6PRGExev+0x4a>
    2266:	63 c2       	rjmp	.+1222   	; 0x272e <_Z6PRGExev+0x510>
    2268:	80 c6       	rjmp	.+3328   	; 0x2f6a <_Z6PRGExev+0xd4c>
    226a:	8a 35       	cpi	r24, 0x5A	; 90
    226c:	09 f4       	brne	.+2      	; 0x2270 <_Z6PRGExev+0x52>
    226e:	cd c4       	rjmp	.+2458   	; 0x2c0a <_Z6PRGExev+0x9ec>
    2270:	38 f4       	brcc	.+14     	; 0x2280 <_Z6PRGExev+0x62>
    2272:	81 35       	cpi	r24, 0x51	; 81
    2274:	09 f4       	brne	.+2      	; 0x2278 <_Z6PRGExev+0x5a>
    2276:	bd c4       	rjmp	.+2426   	; 0x2bf2 <_Z6PRGExev+0x9d4>
    2278:	82 35       	cpi	r24, 0x52	; 82
    227a:	09 f4       	brne	.+2      	; 0x227e <_Z6PRGExev+0x60>
    227c:	c0 c4       	rjmp	.+2432   	; 0x2bfe <_Z6PRGExev+0x9e0>
    227e:	75 c6       	rjmp	.+3306   	; 0x2f6a <_Z6PRGExev+0xd4c>
    2280:	84 36       	cpi	r24, 0x64	; 100
    2282:	09 f4       	brne	.+2      	; 0x2286 <_Z6PRGExev+0x68>
    2284:	26 c6       	rjmp	.+3148   	; 0x2ed2 <_Z6PRGExev+0xcb4>
    2286:	85 36       	cpi	r24, 0x65	; 101
    2288:	09 f4       	brne	.+2      	; 0x228c <_Z6PRGExev+0x6e>
    228a:	2c c6       	rjmp	.+3160   	; 0x2ee4 <_Z6PRGExev+0xcc6>
    228c:	6e c6       	rjmp	.+3292   	; 0x2f6a <_Z6PRGExev+0xd4c>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    228e:	e0 e0       	ldi	r30, 0x00	; 0
    2290:	f8 e0       	ldi	r31, 0x08	; 8
    2292:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    2294:	8c e0       	ldi	r24, 0x0C	; 12
    2296:	81 87       	std	Z+9, r24	; 0x09
 {   
    case 0 :  //Acceleration Mode
    {
        tc0_disable(&TCC0); 
            
        Ma1 = CMDPRGlist.Speed1Ma1;                
    2298:	ee e3       	ldi	r30, 0x3E	; 62
    229a:	f8 e2       	ldi	r31, 0x28	; 40
    229c:	84 89       	ldd	r24, Z+20	; 0x14
    229e:	95 89       	ldd	r25, Z+21	; 0x15
    22a0:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    22a4:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
        Ma2 = CMDPRGlist.Speed2Ma2;   
    22a8:	80 8d       	ldd	r24, Z+24	; 0x18
    22aa:	91 8d       	ldd	r25, Z+25	; 0x19
    22ac:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    22b0:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
        Ma3 = CMDPRGlist.Speed3Ma3;
    22b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    22b6:	95 8d       	ldd	r25, Z+29	; 0x1d
    22b8:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    22bc:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
                    
                    
        MaxSpeed = CMDPRGlist.MaxSpeed;
    22c0:	80 a1       	ldd	r24, Z+32	; 0x20
    22c2:	91 a1       	ldd	r25, Z+33	; 0x21
    22c4:	a2 a1       	ldd	r26, Z+34	; 0x22
    22c6:	b3 a1       	ldd	r27, Z+35	; 0x23
    22c8:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    22cc:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    22d0:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    22d4:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        ACCSpeedINT = CMDPRGlist.ACCSpeedINT;
    22d8:	80 a5       	ldd	r24, Z+40	; 0x28
    22da:	91 a5       	ldd	r25, Z+41	; 0x29
    22dc:	a2 a5       	ldd	r26, Z+42	; 0x2a
    22de:	b3 a5       	ldd	r27, Z+43	; 0x2b
    22e0:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <ACCSpeedINT>
    22e4:	90 93 3f 27 	sts	0x273F, r25	; 0x80273f <ACCSpeedINT+0x1>
    22e8:	a0 93 40 27 	sts	0x2740, r26	; 0x802740 <ACCSpeedINT+0x2>
    22ec:	b0 93 41 27 	sts	0x2741, r27	; 0x802741 <ACCSpeedINT+0x3>
        DECSpeedINT = CMDPRGlist.DECSpeedINT;
    22f0:	84 a5       	ldd	r24, Z+44	; 0x2c
    22f2:	95 a5       	ldd	r25, Z+45	; 0x2d
    22f4:	a6 a5       	ldd	r26, Z+46	; 0x2e
    22f6:	b7 a5       	ldd	r27, Z+47	; 0x2f
    22f8:	80 93 3a 27 	sts	0x273A, r24	; 0x80273a <DECSpeedINT>
    22fc:	90 93 3b 27 	sts	0x273B, r25	; 0x80273b <DECSpeedINT+0x1>
    2300:	a0 93 3c 27 	sts	0x273C, r26	; 0x80273c <DECSpeedINT+0x2>
    2304:	b0 93 3d 27 	sts	0x273D, r27	; 0x80273d <DECSpeedINT+0x3>
                    
          if(CMDPRGlist.Direction1==1)
    2308:	81 89       	ldd	r24, Z+17	; 0x11
    230a:	81 30       	cpi	r24, 0x01	; 1
    230c:	31 f4       	brne	.+12     	; 0x231a <_Z6PRGExev+0xfc>
          { 
            SET_DIR1;
    230e:	e0 e2       	ldi	r30, 0x20	; 32
    2310:	f7 e0       	ldi	r31, 0x07	; 7
    2312:	84 81       	ldd	r24, Z+4	; 0x04
    2314:	80 61       	ori	r24, 0x10	; 16
    2316:	84 83       	std	Z+4, r24	; 0x04
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <_Z6PRGExev+0x106>
          }
          else
          {
            CLR_DIR1;
    231a:	e0 e2       	ldi	r30, 0x20	; 32
    231c:	f7 e0       	ldi	r31, 0x07	; 7
    231e:	84 81       	ldd	r24, Z+4	; 0x04
    2320:	8f 7e       	andi	r24, 0xEF	; 239
    2322:	84 83       	std	Z+4, r24	; 0x04
          } 
          
          if(CMDPRGlist.Direction2==1)
    2324:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <CMDPRGlist+0x12>
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	31 f4       	brne	.+12     	; 0x2338 <_Z6PRGExev+0x11a>
          { 
            SET_DIR2;
    232c:	e0 e2       	ldi	r30, 0x20	; 32
    232e:	f7 e0       	ldi	r31, 0x07	; 7
    2330:	84 81       	ldd	r24, Z+4	; 0x04
    2332:	84 60       	ori	r24, 0x04	; 4
    2334:	84 83       	std	Z+4, r24	; 0x04
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <_Z6PRGExev+0x124>
          }
          else
          {
            CLR_DIR2;
    2338:	e0 e2       	ldi	r30, 0x20	; 32
    233a:	f7 e0       	ldi	r31, 0x07	; 7
    233c:	84 81       	ldd	r24, Z+4	; 0x04
    233e:	8b 7f       	andi	r24, 0xFB	; 251
    2340:	84 83       	std	Z+4, r24	; 0x04
          } 
          
          if(CMDPRGlist.Direction3==1)
    2342:	80 91 51 28 	lds	r24, 0x2851	; 0x802851 <CMDPRGlist+0x13>
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	31 f4       	brne	.+12     	; 0x2356 <_Z6PRGExev+0x138>
          { 
            SET_DIR3;
    234a:	e0 e2       	ldi	r30, 0x20	; 32
    234c:	f7 e0       	ldi	r31, 0x07	; 7
    234e:	84 81       	ldd	r24, Z+4	; 0x04
    2350:	81 60       	ori	r24, 0x01	; 1
    2352:	84 83       	std	Z+4, r24	; 0x04
    2354:	05 c0       	rjmp	.+10     	; 0x2360 <_Z6PRGExev+0x142>
          }
          else
          {
            CLR_DIR3;
    2356:	e0 e2       	ldi	r30, 0x20	; 32
    2358:	f7 e0       	ldi	r31, 0x07	; 7
    235a:	84 81       	ldd	r24, Z+4	; 0x04
    235c:	8e 7f       	andi	r24, 0xFE	; 254
    235e:	84 83       	std	Z+4, r24	; 0x04
          }
                            
//         if(CMDPRGlist.Speed1Ma1==1000) MaxDistanceToGo=CMDPRGlist.Move1;
//         if(CMDPRGlist.Speed2Ma2==1000) MaxDistanceToGo=CMDPRGlist.Move2;
//         if(CMDPRGlist.Speed3Ma3==1000) MaxDistanceToGo=CMDPRGlist.Move3;
         MaxDistanceToGo=CMDPRGlist.MaxDistanceToGo;
    2360:	ee e3       	ldi	r30, 0x3E	; 62
    2362:	f8 e2       	ldi	r31, 0x28	; 40
    2364:	84 a1       	ldd	r24, Z+36	; 0x24
    2366:	95 a1       	ldd	r25, Z+37	; 0x25
    2368:	a6 a1       	ldd	r26, Z+38	; 0x26
    236a:	b7 a1       	ldd	r27, Z+39	; 0x27
    236c:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <MaxDistanceToGo>
    2370:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <MaxDistanceToGo+0x1>
    2374:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <MaxDistanceToGo+0x2>
    2378:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <MaxDistanceToGo+0x3>
//         else
//         {
//              AccDTG = MaxDistanceToGo - AccDTG;
//         }
            
        AccDTG=CMDPRGlist.ACCDTG;
    237c:	80 a9       	ldd	r24, Z+48	; 0x30
    237e:	91 a9       	ldd	r25, Z+49	; 0x31
    2380:	a2 a9       	ldd	r26, Z+50	; 0x32
    2382:	b3 a9       	ldd	r27, Z+51	; 0x33
    2384:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <AccDTG>
    2388:	90 93 85 27 	sts	0x2785, r25	; 0x802785 <AccDTG+0x1>
    238c:	a0 93 86 27 	sts	0x2786, r26	; 0x802786 <AccDTG+0x2>
    2390:	b0 93 87 27 	sts	0x2787, r27	; 0x802787 <AccDTG+0x3>
        DecDTG=CMDPRGlist.DECDTG;
    2394:	84 a9       	ldd	r24, Z+52	; 0x34
    2396:	95 a9       	ldd	r25, Z+53	; 0x35
    2398:	a6 a9       	ldd	r26, Z+54	; 0x36
    239a:	b7 a9       	ldd	r27, Z+55	; 0x37
    239c:	80 93 80 27 	sts	0x2780, r24	; 0x802780 <DecDTG>
    23a0:	90 93 81 27 	sts	0x2781, r25	; 0x802781 <DecDTG+0x1>
    23a4:	a0 93 82 27 	sts	0x2782, r26	; 0x802782 <DecDTG+0x2>
    23a8:	b0 93 83 27 	sts	0x2783, r27	; 0x802783 <DecDTG+0x3>
                    
        DistanceToGo1 = CMDPRGlist.Move1;
    23ac:	85 81       	ldd	r24, Z+5	; 0x05
    23ae:	96 81       	ldd	r25, Z+6	; 0x06
    23b0:	a7 81       	ldd	r26, Z+7	; 0x07
    23b2:	b0 85       	ldd	r27, Z+8	; 0x08
    23b4:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    23b8:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    23bc:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    23c0:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
        DistanceToGo2 = CMDPRGlist.Move2;
    23c4:	81 85       	ldd	r24, Z+9	; 0x09
    23c6:	92 85       	ldd	r25, Z+10	; 0x0a
    23c8:	a3 85       	ldd	r26, Z+11	; 0x0b
    23ca:	b4 85       	ldd	r27, Z+12	; 0x0c
    23cc:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    23d0:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    23d4:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    23d8:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
        DistanceToGo3 = CMDPRGlist.Move3;
    23dc:	85 85       	ldd	r24, Z+13	; 0x0d
    23de:	96 85       	ldd	r25, Z+14	; 0x0e
    23e0:	a7 85       	ldd	r26, Z+15	; 0x0f
    23e2:	b0 89       	ldd	r27, Z+16	; 0x10
    23e4:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    23e8:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    23ec:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    23f0:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
                    
        CurSpeedFrq = 0;                
    23f4:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    23f8:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    23fc:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    2400:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
        tcc0_init(); 
    2404:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
        TCC0.CCA = 0XFFFF;
    2408:	8f ef       	ldi	r24, 0xFF	; 255
    240a:	9f ef       	ldi	r25, 0xFF	; 255
    240c:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2410:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
//        ACC = 1;      
        
        break;                
    2414:	aa c5       	rjmp	.+2900   	; 0x2f6a <_Z6PRGExev+0xd4c>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    2416:	e0 e0       	ldi	r30, 0x00	; 0
    2418:	f8 e0       	ldi	r31, 0x08	; 8
    241a:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    241c:	8c e0       	ldi	r24, 0x0C	; 12
    241e:	81 87       	std	Z+9, r24	; 0x09
    }
    case 1 : // With out ACC Mode
    {        
        tc0_disable(&TCC0);
        Ma1 = CMDPRGlist.Speed1Ma1;
    2420:	ee e3       	ldi	r30, 0x3E	; 62
    2422:	f8 e2       	ldi	r31, 0x28	; 40
    2424:	84 89       	ldd	r24, Z+20	; 0x14
    2426:	95 89       	ldd	r25, Z+21	; 0x15
    2428:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    242c:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
        Ma2 = CMDPRGlist.Speed2Ma2;
    2430:	80 8d       	ldd	r24, Z+24	; 0x18
    2432:	91 8d       	ldd	r25, Z+25	; 0x19
    2434:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    2438:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
        Ma3 = CMDPRGlist.Speed3Ma3;
    243c:	84 8d       	ldd	r24, Z+28	; 0x1c
    243e:	95 8d       	ldd	r25, Z+29	; 0x1d
    2440:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    2444:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
          
        MaxSpeed = CMDPRGlist.MaxSpeed;
    2448:	60 a1       	ldd	r22, Z+32	; 0x20
    244a:	71 a1       	ldd	r23, Z+33	; 0x21
    244c:	82 a1       	ldd	r24, Z+34	; 0x22
    244e:	93 a1       	ldd	r25, Z+35	; 0x23
    2450:	60 93 6d 27 	sts	0x276D, r22	; 0x80276d <MaxSpeed>
    2454:	70 93 6e 27 	sts	0x276E, r23	; 0x80276e <MaxSpeed+0x1>
    2458:	80 93 6f 27 	sts	0x276F, r24	; 0x80276f <MaxSpeed+0x2>
    245c:	90 93 70 27 	sts	0x2770, r25	; 0x802770 <MaxSpeed+0x3>
                    
        if(CMDPRGlist.Direction1==1)
    2460:	21 89       	ldd	r18, Z+17	; 0x11
    2462:	21 30       	cpi	r18, 0x01	; 1
    2464:	31 f4       	brne	.+12     	; 0x2472 <_Z6PRGExev+0x254>
        { 
         SET_DIR1;
    2466:	e0 e2       	ldi	r30, 0x20	; 32
    2468:	f7 e0       	ldi	r31, 0x07	; 7
    246a:	24 81       	ldd	r18, Z+4	; 0x04
    246c:	20 61       	ori	r18, 0x10	; 16
    246e:	24 83       	std	Z+4, r18	; 0x04
    2470:	05 c0       	rjmp	.+10     	; 0x247c <_Z6PRGExev+0x25e>
        }
        else
        {
         CLR_DIR1;
    2472:	e0 e2       	ldi	r30, 0x20	; 32
    2474:	f7 e0       	ldi	r31, 0x07	; 7
    2476:	24 81       	ldd	r18, Z+4	; 0x04
    2478:	2f 7e       	andi	r18, 0xEF	; 239
    247a:	24 83       	std	Z+4, r18	; 0x04
        } 
              
        if(CMDPRGlist.Direction2==1)
    247c:	20 91 50 28 	lds	r18, 0x2850	; 0x802850 <CMDPRGlist+0x12>
    2480:	21 30       	cpi	r18, 0x01	; 1
    2482:	31 f4       	brne	.+12     	; 0x2490 <_Z6PRGExev+0x272>
        { 
         SET_DIR2;
    2484:	e0 e2       	ldi	r30, 0x20	; 32
    2486:	f7 e0       	ldi	r31, 0x07	; 7
    2488:	24 81       	ldd	r18, Z+4	; 0x04
    248a:	24 60       	ori	r18, 0x04	; 4
    248c:	24 83       	std	Z+4, r18	; 0x04
    248e:	05 c0       	rjmp	.+10     	; 0x249a <_Z6PRGExev+0x27c>
        }
        else
        {
          CLR_DIR2;
    2490:	e0 e2       	ldi	r30, 0x20	; 32
    2492:	f7 e0       	ldi	r31, 0x07	; 7
    2494:	24 81       	ldd	r18, Z+4	; 0x04
    2496:	2b 7f       	andi	r18, 0xFB	; 251
    2498:	24 83       	std	Z+4, r18	; 0x04
        }  
              
        if(CMDPRGlist.Direction3==1)
    249a:	20 91 51 28 	lds	r18, 0x2851	; 0x802851 <CMDPRGlist+0x13>
    249e:	21 30       	cpi	r18, 0x01	; 1
    24a0:	31 f4       	brne	.+12     	; 0x24ae <_Z6PRGExev+0x290>
        { 
         SET_DIR3;
    24a2:	e0 e2       	ldi	r30, 0x20	; 32
    24a4:	f7 e0       	ldi	r31, 0x07	; 7
    24a6:	24 81       	ldd	r18, Z+4	; 0x04
    24a8:	21 60       	ori	r18, 0x01	; 1
    24aa:	24 83       	std	Z+4, r18	; 0x04
    24ac:	05 c0       	rjmp	.+10     	; 0x24b8 <_Z6PRGExev+0x29a>
        }
        else
        {
         CLR_DIR3;
    24ae:	e0 e2       	ldi	r30, 0x20	; 32
    24b0:	f7 e0       	ldi	r31, 0x07	; 7
    24b2:	24 81       	ldd	r18, Z+4	; 0x04
    24b4:	2e 7f       	andi	r18, 0xFE	; 254
    24b6:	24 83       	std	Z+4, r18	; 0x04
        }                     
    				
        AccDTG = 0;
    24b8:	10 92 84 27 	sts	0x2784, r1	; 0x802784 <AccDTG>
    24bc:	10 92 85 27 	sts	0x2785, r1	; 0x802785 <AccDTG+0x1>
    24c0:	10 92 86 27 	sts	0x2786, r1	; 0x802786 <AccDTG+0x2>
    24c4:	10 92 87 27 	sts	0x2787, r1	; 0x802787 <AccDTG+0x3>
        DecDTG = 0;
    24c8:	10 92 80 27 	sts	0x2780, r1	; 0x802780 <DecDTG>
    24cc:	10 92 81 27 	sts	0x2781, r1	; 0x802781 <DecDTG+0x1>
    24d0:	10 92 82 27 	sts	0x2782, r1	; 0x802782 <DecDTG+0x2>
    24d4:	10 92 83 27 	sts	0x2783, r1	; 0x802783 <DecDTG+0x3>
                    
        DistanceToGo1 = CMDPRGlist.Move1;
    24d8:	ee e3       	ldi	r30, 0x3E	; 62
    24da:	f8 e2       	ldi	r31, 0x28	; 40
    24dc:	05 81       	ldd	r16, Z+5	; 0x05
    24de:	16 81       	ldd	r17, Z+6	; 0x06
    24e0:	27 81       	ldd	r18, Z+7	; 0x07
    24e2:	30 85       	ldd	r19, Z+8	; 0x08
    24e4:	00 93 90 27 	sts	0x2790, r16	; 0x802790 <DistanceToGo1>
    24e8:	10 93 91 27 	sts	0x2791, r17	; 0x802791 <DistanceToGo1+0x1>
    24ec:	20 93 92 27 	sts	0x2792, r18	; 0x802792 <DistanceToGo1+0x2>
    24f0:	30 93 93 27 	sts	0x2793, r19	; 0x802793 <DistanceToGo1+0x3>
        DistanceToGo2 = CMDPRGlist.Move2;
    24f4:	01 85       	ldd	r16, Z+9	; 0x09
    24f6:	12 85       	ldd	r17, Z+10	; 0x0a
    24f8:	23 85       	ldd	r18, Z+11	; 0x0b
    24fa:	34 85       	ldd	r19, Z+12	; 0x0c
    24fc:	00 93 8c 27 	sts	0x278C, r16	; 0x80278c <DistanceToGo2>
    2500:	10 93 8d 27 	sts	0x278D, r17	; 0x80278d <DistanceToGo2+0x1>
    2504:	20 93 8e 27 	sts	0x278E, r18	; 0x80278e <DistanceToGo2+0x2>
    2508:	30 93 8f 27 	sts	0x278F, r19	; 0x80278f <DistanceToGo2+0x3>
        DistanceToGo3 = CMDPRGlist.Move3;
    250c:	05 85       	ldd	r16, Z+13	; 0x0d
    250e:	16 85       	ldd	r17, Z+14	; 0x0e
    2510:	27 85       	ldd	r18, Z+15	; 0x0f
    2512:	30 89       	ldd	r19, Z+16	; 0x10
    2514:	00 93 88 27 	sts	0x2788, r16	; 0x802788 <DistanceToGo3>
    2518:	10 93 89 27 	sts	0x2789, r17	; 0x802789 <DistanceToGo3+0x1>
    251c:	20 93 8a 27 	sts	0x278A, r18	; 0x80278a <DistanceToGo3+0x2>
    2520:	30 93 8b 27 	sts	0x278B, r19	; 0x80278b <DistanceToGo3+0x3>
                    
        CurSpeedFrq = MaxSpeed;
    2524:	60 93 42 27 	sts	0x2742, r22	; 0x802742 <CurSpeedFrq>
    2528:	70 93 43 27 	sts	0x2743, r23	; 0x802743 <CurSpeedFrq+0x1>
    252c:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <CurSpeedFrq+0x2>
    2530:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <CurSpeedFrq+0x3>
        ACC = 0;
    2534:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
        DEC = 0;
    2538:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
        TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);   
    253c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    2540:	9b 01       	movw	r18, r22
    2542:	ac 01       	movw	r20, r24
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	8a e7       	ldi	r24, 0x7A	; 122
    254a:	96 e4       	ldi	r25, 0x46	; 70
    254c:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    2550:	60 93 28 27 	sts	0x2728, r22	; 0x802728 <TimerMainPeriod>
    2554:	70 93 29 27 	sts	0x2729, r23	; 0x802729 <TimerMainPeriod+0x1>
    2558:	80 93 2a 27 	sts	0x272A, r24	; 0x80272a <TimerMainPeriod+0x2>
    255c:	90 93 2b 27 	sts	0x272B, r25	; 0x80272b <TimerMainPeriod+0x3>
        tcc0_init();   
    2560:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
        TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a e7       	ldi	r20, 0x7A	; 122
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    2570:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    2574:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    2578:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    257c:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    2580:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    2584:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2588:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
        break;				
    258c:	ee c4       	rjmp	.+2524   	; 0x2f6a <_Z6PRGExev+0xd4c>
    }			
    case 12: //Go to Refrence
    { 
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
    258e:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    2592:	81 11       	cpse	r24, r1
    2594:	0e c0       	rjmp	.+28     	; 0x25b2 <_Z6PRGExev+0x394>
    2596:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    259a:	91 11       	cpse	r25, r1
    259c:	0a c0       	rjmp	.+20     	; 0x25b2 <_Z6PRGExev+0x394>
    259e:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    25a2:	21 e0       	ldi	r18, 0x01	; 1
    25a4:	91 11       	cpse	r25, r1
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <_Z6PRGExev+0x38c>
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
        while (AxisMoving == 1) 
    25ae:	99 23       	and	r25, r25
    25b0:	99 f0       	breq	.+38     	; 0x25d8 <_Z6PRGExev+0x3ba>
    25b2:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    25b6:	91 11       	cpse	r25, r1
    25b8:	07 c0       	rjmp	.+14     	; 0x25c8 <_Z6PRGExev+0x3aa>
    25ba:	21 e0       	ldi	r18, 0x01	; 1
    25bc:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    25c0:	91 11       	cpse	r25, r1
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <_Z6PRGExev+0x3ac>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	01 c0       	rjmp	.+2      	; 0x25ca <_Z6PRGExev+0x3ac>
    25c8:	21 e0       	ldi	r18, 0x01	; 1
    25ca:	92 2f       	mov	r25, r18
        {
         AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    25cc:	81 11       	cpse	r24, r1
    25ce:	fe cf       	rjmp	.-4      	; 0x25cc <_Z6PRGExev+0x3ae>
        break;				
    }			
    case 12: //Go to Refrence
    { 
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
        while (AxisMoving == 1) 
    25d0:	91 11       	cpse	r25, r1
    25d2:	fc cf       	rjmp	.-8      	; 0x25cc <_Z6PRGExev+0x3ae>
    25d4:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
        {
         AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
        }   
      
        if(RefDir1==0)
    25d8:	80 91 7f 27 	lds	r24, 0x277F	; 0x80277f <RefDir1>
    25dc:	81 11       	cpse	r24, r1
    25de:	06 c0       	rjmp	.+12     	; 0x25ec <_Z6PRGExev+0x3ce>
        {
          CLR_DIR1;
    25e0:	e0 e2       	ldi	r30, 0x20	; 32
    25e2:	f7 e0       	ldi	r31, 0x07	; 7
    25e4:	84 81       	ldd	r24, Z+4	; 0x04
    25e6:	8f 7e       	andi	r24, 0xEF	; 239
    25e8:	84 83       	std	Z+4, r24	; 0x04
    25ea:	07 c0       	rjmp	.+14     	; 0x25fa <_Z6PRGExev+0x3dc>
        }
        else if(RefDir1==1)
    25ec:	81 30       	cpi	r24, 0x01	; 1
    25ee:	29 f4       	brne	.+10     	; 0x25fa <_Z6PRGExev+0x3dc>
        {
          SET_DIR1;
    25f0:	e0 e2       	ldi	r30, 0x20	; 32
    25f2:	f7 e0       	ldi	r31, 0x07	; 7
    25f4:	84 81       	ldd	r24, Z+4	; 0x04
    25f6:	80 61       	ori	r24, 0x10	; 16
    25f8:	84 83       	std	Z+4, r24	; 0x04
        } 
      
        if(RefDir2==0)
    25fa:	80 91 7e 27 	lds	r24, 0x277E	; 0x80277e <RefDir2>
    25fe:	81 11       	cpse	r24, r1
    2600:	06 c0       	rjmp	.+12     	; 0x260e <_Z6PRGExev+0x3f0>
        {
          CLR_DIR2;
    2602:	e0 e2       	ldi	r30, 0x20	; 32
    2604:	f7 e0       	ldi	r31, 0x07	; 7
    2606:	84 81       	ldd	r24, Z+4	; 0x04
    2608:	8b 7f       	andi	r24, 0xFB	; 251
    260a:	84 83       	std	Z+4, r24	; 0x04
    260c:	07 c0       	rjmp	.+14     	; 0x261c <_Z6PRGExev+0x3fe>
        }
        else if(RefDir2==1)
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	29 f4       	brne	.+10     	; 0x261c <_Z6PRGExev+0x3fe>
        {
          SET_DIR2;
    2612:	e0 e2       	ldi	r30, 0x20	; 32
    2614:	f7 e0       	ldi	r31, 0x07	; 7
    2616:	84 81       	ldd	r24, Z+4	; 0x04
    2618:	84 60       	ori	r24, 0x04	; 4
    261a:	84 83       	std	Z+4, r24	; 0x04
        }
      
        if(RefDir3==0)
    261c:	80 91 7d 27 	lds	r24, 0x277D	; 0x80277d <RefDir3>
    2620:	81 11       	cpse	r24, r1
    2622:	06 c0       	rjmp	.+12     	; 0x2630 <_Z6PRGExev+0x412>
        {
          CLR_DIR3;
    2624:	e0 e2       	ldi	r30, 0x20	; 32
    2626:	f7 e0       	ldi	r31, 0x07	; 7
    2628:	84 81       	ldd	r24, Z+4	; 0x04
    262a:	8e 7f       	andi	r24, 0xFE	; 254
    262c:	84 83       	std	Z+4, r24	; 0x04
    262e:	07 c0       	rjmp	.+14     	; 0x263e <_Z6PRGExev+0x420>
        }
        else if(RefDir3==1)
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	29 f4       	brne	.+10     	; 0x263e <_Z6PRGExev+0x420>
        {
          SET_DIR3;
    2634:	e0 e2       	ldi	r30, 0x20	; 32
    2636:	f7 e0       	ldi	r31, 0x07	; 7
    2638:	84 81       	ldd	r24, Z+4	; 0x04
    263a:	81 60       	ori	r24, 0x01	; 1
    263c:	84 83       	std	Z+4, r24	; 0x04
        }       
                             
        MaxSpeed=8000;                           
    263e:	80 e4       	ldi	r24, 0x40	; 64
    2640:	9f e1       	ldi	r25, 0x1F	; 31
    2642:	a0 e0       	ldi	r26, 0x00	; 0
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    264a:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    264e:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    2652:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        
        CurSpeedFrq = MaxSpeed;
    2656:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <CurSpeedFrq>
    265a:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <CurSpeedFrq+0x1>
    265e:	a0 93 44 27 	sts	0x2744, r26	; 0x802744 <CurSpeedFrq+0x2>
    2662:	b0 93 45 27 	sts	0x2745, r27	; 0x802745 <CurSpeedFrq+0x3>
        ACC = 0;
    2666:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
        DEC = 0;
    266a:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
        TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);          
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b0 e4       	ldi	r27, 0x40	; 64
    2676:	80 93 28 27 	sts	0x2728, r24	; 0x802728 <TimerMainPeriod>
    267a:	90 93 29 27 	sts	0x2729, r25	; 0x802729 <TimerMainPeriod+0x1>
    267e:	a0 93 2a 27 	sts	0x272A, r26	; 0x80272a <TimerMainPeriod+0x2>
    2682:	b0 93 2b 27 	sts	0x272B, r27	; 0x80272b <TimerMainPeriod+0x3>
        RefCmd=1;
    2686:	21 e0       	ldi	r18, 0x01	; 1
    2688:	20 93 f4 26 	sts	0x26F4, r18	; 0x8026f4 <RefCmd>
        Ma1=1000; 
    268c:	88 ee       	ldi	r24, 0xE8	; 232
    268e:	93 e0       	ldi	r25, 0x03	; 3
    2690:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    2694:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
        Ma2=1000;
    2698:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    269c:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
        Ma3=1000;
    26a0:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    26a4:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
        DistanceToGo1=0x7FFFFFFF;
    26a8:	8f ef       	ldi	r24, 0xFF	; 255
    26aa:	9f ef       	ldi	r25, 0xFF	; 255
    26ac:	af ef       	ldi	r26, 0xFF	; 255
    26ae:	bf e7       	ldi	r27, 0x7F	; 127
    26b0:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    26b4:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    26b8:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    26bc:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
        DistanceToGo2=0x7FFFFFFF;
    26c0:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    26c4:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    26c8:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    26cc:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
        DistanceToGo3=0x7FFFFFFF;   
    26d0:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    26d4:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    26d8:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    26dc:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
         
        tcc0_init();     
    26e0:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
      
        TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);                    
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	4a e7       	ldi	r20, 0x7A	; 122
    26ea:	54 e4       	ldi	r21, 0x44	; 68
    26ec:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    26f0:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    26f4:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    26f8:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    26fc:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    2700:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    2704:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2708:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                
        sprintf(BufferSend,"!1800\r\n"); 
    270c:	88 e0       	ldi	r24, 0x08	; 8
    270e:	e8 ed       	ldi	r30, 0xD8	; 216
    2710:	f0 e2       	ldi	r31, 0x20	; 32
    2712:	a7 e5       	ldi	r26, 0x57	; 87
    2714:	b9 e2       	ldi	r27, 0x29	; 41
    2716:	01 90       	ld	r0, Z+
    2718:	0d 92       	st	X+, r0
    271a:	8a 95       	dec	r24
    271c:	e1 f7       	brne	.-8      	; 0x2716 <_Z6PRGExev+0x4f8>
        Responsing=1; 
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;  
    2724:	e0 ea       	ldi	r30, 0xA0	; 160
    2726:	f6 e0       	ldi	r31, 0x06	; 6
    2728:	84 81       	ldd	r24, Z+4	; 0x04
    272a:	81 60       	ori	r24, 0x01	; 1
    272c:	84 83       	std	Z+4, r24	; 0x04
    }
    case 13:
    {
      SoftRef1=AxisPosition1; 
    272e:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    2732:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    2736:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    273a:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    273e:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <SoftRef1>
    2742:	90 93 a1 27 	sts	0x27A1, r25	; 0x8027a1 <SoftRef1+0x1>
    2746:	a0 93 a2 27 	sts	0x27A2, r26	; 0x8027a2 <SoftRef1+0x2>
    274a:	b0 93 a3 27 	sts	0x27A3, r27	; 0x8027a3 <SoftRef1+0x3>
      SoftRef2=AxisPosition2;
    274e:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    2752:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    2756:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    275a:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    275e:	80 93 9c 27 	sts	0x279C, r24	; 0x80279c <SoftRef2>
    2762:	90 93 9d 27 	sts	0x279D, r25	; 0x80279d <SoftRef2+0x1>
    2766:	a0 93 9e 27 	sts	0x279E, r26	; 0x80279e <SoftRef2+0x2>
    276a:	b0 93 9f 27 	sts	0x279F, r27	; 0x80279f <SoftRef2+0x3>
      SoftRef3=AxisPosition3;
    276e:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    2772:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    2776:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    277a:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    277e:	80 93 98 27 	sts	0x2798, r24	; 0x802798 <SoftRef3>
    2782:	90 93 99 27 	sts	0x2799, r25	; 0x802799 <SoftRef3+0x1>
    2786:	a0 93 9a 27 	sts	0x279A, r26	; 0x80279a <SoftRef3+0x2>
    278a:	b0 93 9b 27 	sts	0x279B, r27	; 0x80279b <SoftRef3+0x3>
      break;
    278e:	ed c3       	rjmp	.+2010   	; 0x2f6a <_Z6PRGExev+0xd4c>
    }       
    case 14:
    {
      //printf("Back to Software refrence.\r\n");
      AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    2790:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    2794:	81 11       	cpse	r24, r1
    2796:	0e c0       	rjmp	.+28     	; 0x27b4 <_Z6PRGExev+0x596>
    2798:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    279c:	91 11       	cpse	r25, r1
    279e:	0a c0       	rjmp	.+20     	; 0x27b4 <_Z6PRGExev+0x596>
    27a0:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    27a4:	21 e0       	ldi	r18, 0x01	; 1
    27a6:	91 11       	cpse	r25, r1
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <_Z6PRGExev+0x58e>
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
      while (AxisMoving == 1) 
    27b0:	99 23       	and	r25, r25
    27b2:	99 f0       	breq	.+38     	; 0x27da <_Z6PRGExev+0x5bc>
    27b4:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    27b8:	91 11       	cpse	r25, r1
    27ba:	07 c0       	rjmp	.+14     	; 0x27ca <_Z6PRGExev+0x5ac>
    27bc:	21 e0       	ldi	r18, 0x01	; 1
    27be:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    27c2:	91 11       	cpse	r25, r1
    27c4:	03 c0       	rjmp	.+6      	; 0x27cc <_Z6PRGExev+0x5ae>
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <_Z6PRGExev+0x5ae>
    27ca:	21 e0       	ldi	r18, 0x01	; 1
    27cc:	92 2f       	mov	r25, r18
      {
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    27ce:	81 11       	cpse	r24, r1
    27d0:	fe cf       	rjmp	.-4      	; 0x27ce <_Z6PRGExev+0x5b0>
    }       
    case 14:
    {
      //printf("Back to Software refrence.\r\n");
      AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      while (AxisMoving == 1) 
    27d2:	91 11       	cpse	r25, r1
    27d4:	fc cf       	rjmp	.-8      	; 0x27ce <_Z6PRGExev+0x5b0>
    27d6:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
      {
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }      
      if(SoftRef1<AxisPosition1) CLR_DIR1;
    27da:	00 91 a0 27 	lds	r16, 0x27A0	; 0x8027a0 <SoftRef1>
    27de:	10 91 a1 27 	lds	r17, 0x27A1	; 0x8027a1 <SoftRef1+0x1>
    27e2:	20 91 a2 27 	lds	r18, 0x27A2	; 0x8027a2 <SoftRef1+0x2>
    27e6:	30 91 a3 27 	lds	r19, 0x27A3	; 0x8027a3 <SoftRef1+0x3>
    27ea:	c0 90 ac 27 	lds	r12, 0x27AC	; 0x8027ac <AxisPosition1>
    27ee:	d0 90 ad 27 	lds	r13, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    27f2:	e0 90 ae 27 	lds	r14, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    27f6:	f0 90 af 27 	lds	r15, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    27fa:	0c 15       	cp	r16, r12
    27fc:	1d 05       	cpc	r17, r13
    27fe:	2e 05       	cpc	r18, r14
    2800:	3f 05       	cpc	r19, r15
    2802:	2c f4       	brge	.+10     	; 0x280e <_Z6PRGExev+0x5f0>
    2804:	e0 e2       	ldi	r30, 0x20	; 32
    2806:	f7 e0       	ldi	r31, 0x07	; 7
    2808:	84 81       	ldd	r24, Z+4	; 0x04
    280a:	8f 7e       	andi	r24, 0xEF	; 239
    280c:	84 83       	std	Z+4, r24	; 0x04
      if(SoftRef1>AxisPosition1) SET_DIR1; 
    280e:	c0 16       	cp	r12, r16
    2810:	d1 06       	cpc	r13, r17
    2812:	e2 06       	cpc	r14, r18
    2814:	f3 06       	cpc	r15, r19
    2816:	2c f4       	brge	.+10     	; 0x2822 <_Z6PRGExev+0x604>
    2818:	e0 e2       	ldi	r30, 0x20	; 32
    281a:	f7 e0       	ldi	r31, 0x07	; 7
    281c:	84 81       	ldd	r24, Z+4	; 0x04
    281e:	80 61       	ori	r24, 0x10	; 16
    2820:	84 83       	std	Z+4, r24	; 0x04
                
      if(SoftRef2<AxisPosition2) CLR_DIR2;
    2822:	40 90 9c 27 	lds	r4, 0x279C	; 0x80279c <SoftRef2>
    2826:	50 90 9d 27 	lds	r5, 0x279D	; 0x80279d <SoftRef2+0x1>
    282a:	60 90 9e 27 	lds	r6, 0x279E	; 0x80279e <SoftRef2+0x2>
    282e:	70 90 9f 27 	lds	r7, 0x279F	; 0x80279f <SoftRef2+0x3>
    2832:	40 91 a8 27 	lds	r20, 0x27A8	; 0x8027a8 <AxisPosition2>
    2836:	50 91 a9 27 	lds	r21, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    283a:	60 91 aa 27 	lds	r22, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    283e:	70 91 ab 27 	lds	r23, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    2842:	44 16       	cp	r4, r20
    2844:	55 06       	cpc	r5, r21
    2846:	66 06       	cpc	r6, r22
    2848:	77 06       	cpc	r7, r23
    284a:	2c f4       	brge	.+10     	; 0x2856 <_Z6PRGExev+0x638>
    284c:	e0 e2       	ldi	r30, 0x20	; 32
    284e:	f7 e0       	ldi	r31, 0x07	; 7
    2850:	84 81       	ldd	r24, Z+4	; 0x04
    2852:	8b 7f       	andi	r24, 0xFB	; 251
    2854:	84 83       	std	Z+4, r24	; 0x04
      if(SoftRef2>AxisPosition2) SET_DIR2;  
    2856:	44 15       	cp	r20, r4
    2858:	55 05       	cpc	r21, r5
    285a:	66 05       	cpc	r22, r6
    285c:	77 05       	cpc	r23, r7
    285e:	2c f4       	brge	.+10     	; 0x286a <_Z6PRGExev+0x64c>
    2860:	e0 e2       	ldi	r30, 0x20	; 32
    2862:	f7 e0       	ldi	r31, 0x07	; 7
    2864:	84 81       	ldd	r24, Z+4	; 0x04
    2866:	84 60       	ori	r24, 0x04	; 4
    2868:	84 83       	std	Z+4, r24	; 0x04
            
      if(SoftRef3<AxisPosition3) CLR_DIR3;
    286a:	80 90 98 27 	lds	r8, 0x2798	; 0x802798 <SoftRef3>
    286e:	90 90 99 27 	lds	r9, 0x2799	; 0x802799 <SoftRef3+0x1>
    2872:	a0 90 9a 27 	lds	r10, 0x279A	; 0x80279a <SoftRef3+0x2>
    2876:	b0 90 9b 27 	lds	r11, 0x279B	; 0x80279b <SoftRef3+0x3>
    287a:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    287e:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    2882:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    2886:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    288a:	88 16       	cp	r8, r24
    288c:	99 06       	cpc	r9, r25
    288e:	aa 06       	cpc	r10, r26
    2890:	bb 06       	cpc	r11, r27
    2892:	2c f4       	brge	.+10     	; 0x289e <_Z6PRGExev+0x680>
    2894:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2898:	ee 7f       	andi	r30, 0xFE	; 254
    289a:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
      if(SoftRef3>AxisPosition3) SET_DIR3;   
    289e:	88 15       	cp	r24, r8
    28a0:	99 05       	cpc	r25, r9
    28a2:	aa 05       	cpc	r26, r10
    28a4:	bb 05       	cpc	r27, r11
    28a6:	2c f4       	brge	.+10     	; 0x28b2 <_Z6PRGExev+0x694>
    28a8:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    28ac:	e1 60       	ori	r30, 0x01	; 1
    28ae:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
      
      //printf("SoftRef1: %d\tSoftRef2: %d\tSoftRef3: %d\r\n",SoftRef1,SoftRef2,SoftRef3);
      DistanceToGo1=labs(AxisPosition1-SoftRef1);  
    28b2:	c0 1a       	sub	r12, r16
    28b4:	d1 0a       	sbc	r13, r17
    28b6:	e2 0a       	sbc	r14, r18
    28b8:	f3 0a       	sbc	r15, r19
    28ba:	97 01       	movw	r18, r14
    28bc:	86 01       	movw	r16, r12
    28be:	3a f4       	brpl	.+14     	; 0x28ce <_Z6PRGExev+0x6b0>
    28c0:	00 27       	eor	r16, r16
    28c2:	11 27       	eor	r17, r17
    28c4:	98 01       	movw	r18, r16
    28c6:	0c 19       	sub	r16, r12
    28c8:	1d 09       	sbc	r17, r13
    28ca:	2e 09       	sbc	r18, r14
    28cc:	3f 09       	sbc	r19, r15
    28ce:	68 01       	movw	r12, r16
    28d0:	79 01       	movw	r14, r18
    28d2:	00 93 90 27 	sts	0x2790, r16	; 0x802790 <DistanceToGo1>
    28d6:	10 93 91 27 	sts	0x2791, r17	; 0x802791 <DistanceToGo1+0x1>
    28da:	20 93 92 27 	sts	0x2792, r18	; 0x802792 <DistanceToGo1+0x2>
    28de:	30 93 93 27 	sts	0x2793, r19	; 0x802793 <DistanceToGo1+0x3>
      DistanceToGo2=labs(AxisPosition2-SoftRef2); 
    28e2:	44 19       	sub	r20, r4
    28e4:	55 09       	sbc	r21, r5
    28e6:	66 09       	sbc	r22, r6
    28e8:	77 09       	sbc	r23, r7
    28ea:	8a 01       	movw	r16, r20
    28ec:	9b 01       	movw	r18, r22
    28ee:	3a f4       	brpl	.+14     	; 0x28fe <_Z6PRGExev+0x6e0>
    28f0:	00 27       	eor	r16, r16
    28f2:	11 27       	eor	r17, r17
    28f4:	98 01       	movw	r18, r16
    28f6:	04 1b       	sub	r16, r20
    28f8:	15 0b       	sbc	r17, r21
    28fa:	26 0b       	sbc	r18, r22
    28fc:	37 0b       	sbc	r19, r23
    28fe:	28 01       	movw	r4, r16
    2900:	39 01       	movw	r6, r18
    2902:	00 93 8c 27 	sts	0x278C, r16	; 0x80278c <DistanceToGo2>
    2906:	10 93 8d 27 	sts	0x278D, r17	; 0x80278d <DistanceToGo2+0x1>
    290a:	20 93 8e 27 	sts	0x278E, r18	; 0x80278e <DistanceToGo2+0x2>
    290e:	30 93 8f 27 	sts	0x278F, r19	; 0x80278f <DistanceToGo2+0x3>
      DistanceToGo3=labs(AxisPosition3-SoftRef3); 
    2912:	88 19       	sub	r24, r8
    2914:	99 09       	sbc	r25, r9
    2916:	aa 09       	sbc	r26, r10
    2918:	bb 09       	sbc	r27, r11
    291a:	ac 01       	movw	r20, r24
    291c:	bd 01       	movw	r22, r26
    291e:	3a f4       	brpl	.+14     	; 0x292e <_Z6PRGExev+0x710>
    2920:	44 27       	eor	r20, r20
    2922:	55 27       	eor	r21, r21
    2924:	ba 01       	movw	r22, r20
    2926:	48 1b       	sub	r20, r24
    2928:	59 0b       	sbc	r21, r25
    292a:	6a 0b       	sbc	r22, r26
    292c:	7b 0b       	sbc	r23, r27
    292e:	49 83       	std	Y+1, r20	; 0x01
    2930:	5a 83       	std	Y+2, r21	; 0x02
    2932:	6b 83       	std	Y+3, r22	; 0x03
    2934:	7c 83       	std	Y+4, r23	; 0x04
    2936:	40 93 88 27 	sts	0x2788, r20	; 0x802788 <DistanceToGo3>
    293a:	50 93 89 27 	sts	0x2789, r21	; 0x802789 <DistanceToGo3+0x1>
    293e:	60 93 8a 27 	sts	0x278A, r22	; 0x80278a <DistanceToGo3+0x2>
    2942:	70 93 8b 27 	sts	0x278B, r23	; 0x80278b <DistanceToGo3+0x3>
      //printf("DistanceToGo1: %d\tDistanceToGo2: %d\tDistanceToGo3: %d\r\n",DistanceToGo1,DistanceToGo2,DistanceToGo3);        
      if(DistanceToGo1 > DistanceToGo2 && DistanceToGo1 > DistanceToGo3) 
    2946:	4c 14       	cp	r4, r12
    2948:	5d 04       	cpc	r5, r13
    294a:	6e 04       	cpc	r6, r14
    294c:	7f 04       	cpc	r7, r15
    294e:	9c f5       	brge	.+102    	; 0x29b6 <_Z6PRGExev+0x798>
    2950:	4c 15       	cp	r20, r12
    2952:	5d 05       	cpc	r21, r13
    2954:	6e 05       	cpc	r22, r14
    2956:	7f 05       	cpc	r23, r15
    2958:	74 f5       	brge	.+92     	; 0x29b6 <_Z6PRGExev+0x798>
      {
        MaxSpeed = Axes[0].MaxSpeed; 
    295a:	ed eb       	ldi	r30, 0xBD	; 189
    295c:	f7 e2       	ldi	r31, 0x27	; 39
    295e:	85 81       	ldd	r24, Z+5	; 0x05
    2960:	96 81       	ldd	r25, Z+6	; 0x06
    2962:	a7 81       	ldd	r26, Z+7	; 0x07
    2964:	b0 85       	ldd	r27, Z+8	; 0x08
    2966:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    296a:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    296e:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    2972:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        IACC=Axes[0].ACC; 
    2976:	81 85       	ldd	r24, Z+9	; 0x09
    2978:	92 85       	ldd	r25, Z+10	; 0x0a
    297a:	a3 85       	ldd	r26, Z+11	; 0x0b
    297c:	b4 85       	ldd	r27, Z+12	; 0x0c
    297e:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    2982:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    2986:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    298a:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
        IDEC=Axes[0].DEC; 
    298e:	85 85       	ldd	r24, Z+13	; 0x0d
    2990:	96 85       	ldd	r25, Z+14	; 0x0e
    2992:	a7 85       	ldd	r26, Z+15	; 0x0f
    2994:	b0 89       	ldd	r27, Z+16	; 0x10
    2996:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    299a:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    299e:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    29a2:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition1-SoftRef1);
    29a6:	c0 92 94 27 	sts	0x2794, r12	; 0x802794 <MaxDistanceToGo>
    29aa:	d0 92 95 27 	sts	0x2795, r13	; 0x802795 <MaxDistanceToGo+0x1>
    29ae:	e0 92 96 27 	sts	0x2796, r14	; 0x802796 <MaxDistanceToGo+0x2>
    29b2:	f0 92 97 27 	sts	0x2797, r15	; 0x802797 <MaxDistanceToGo+0x3>
      } 
      if(DistanceToGo2 > DistanceToGo1 && DistanceToGo2 > DistanceToGo3)  
    29b6:	c4 14       	cp	r12, r4
    29b8:	d5 04       	cpc	r13, r5
    29ba:	e6 04       	cpc	r14, r6
    29bc:	f7 04       	cpc	r15, r7
    29be:	bc f5       	brge	.+110    	; 0x2a2e <_Z6PRGExev+0x810>
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	ab 81       	ldd	r26, Y+3	; 0x03
    29c6:	bc 81       	ldd	r27, Y+4	; 0x04
    29c8:	84 15       	cp	r24, r4
    29ca:	95 05       	cpc	r25, r5
    29cc:	a6 05       	cpc	r26, r6
    29ce:	b7 05       	cpc	r27, r7
    29d0:	74 f5       	brge	.+92     	; 0x2a2e <_Z6PRGExev+0x810>
      {
        MaxSpeed = Axes[1].MaxSpeed; 
    29d2:	ed eb       	ldi	r30, 0xBD	; 189
    29d4:	f7 e2       	ldi	r31, 0x27	; 39
    29d6:	80 a9       	ldd	r24, Z+48	; 0x30
    29d8:	91 a9       	ldd	r25, Z+49	; 0x31
    29da:	a2 a9       	ldd	r26, Z+50	; 0x32
    29dc:	b3 a9       	ldd	r27, Z+51	; 0x33
    29de:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    29e2:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    29e6:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    29ea:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        IACC=Axes[1].ACC; 
    29ee:	84 a9       	ldd	r24, Z+52	; 0x34
    29f0:	95 a9       	ldd	r25, Z+53	; 0x35
    29f2:	a6 a9       	ldd	r26, Z+54	; 0x36
    29f4:	b7 a9       	ldd	r27, Z+55	; 0x37
    29f6:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    29fa:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    29fe:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    2a02:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
        IDEC=Axes[1].DEC; 
    2a06:	80 ad       	ldd	r24, Z+56	; 0x38
    2a08:	91 ad       	ldd	r25, Z+57	; 0x39
    2a0a:	a2 ad       	ldd	r26, Z+58	; 0x3a
    2a0c:	b3 ad       	ldd	r27, Z+59	; 0x3b
    2a0e:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    2a12:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    2a16:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    2a1a:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition2-SoftRef2);
    2a1e:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    2a22:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    2a26:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    2a2a:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
      }
      if(DistanceToGo3 > DistanceToGo1 && DistanceToGo3 > DistanceToGo2)  
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	ab 81       	ldd	r26, Y+3	; 0x03
    2a34:	bc 81       	ldd	r27, Y+4	; 0x04
    2a36:	c8 16       	cp	r12, r24
    2a38:	d9 06       	cpc	r13, r25
    2a3a:	ea 06       	cpc	r14, r26
    2a3c:	fb 06       	cpc	r15, r27
    2a3e:	0c f0       	brlt	.+2      	; 0x2a42 <_Z6PRGExev+0x824>
    2a40:	41 c0       	rjmp	.+130    	; 0x2ac4 <_Z6PRGExev+0x8a6>
    2a42:	48 16       	cp	r4, r24
    2a44:	59 06       	cpc	r5, r25
    2a46:	6a 06       	cpc	r6, r26
    2a48:	7b 06       	cpc	r7, r27
    2a4a:	e4 f5       	brge	.+120    	; 0x2ac4 <_Z6PRGExev+0x8a6>
      {
        MaxSpeed = Axes[2].MaxSpeed; 
    2a4c:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <Axes+0x5b>
    2a50:	90 91 19 28 	lds	r25, 0x2819	; 0x802819 <Axes+0x5c>
    2a54:	a0 91 1a 28 	lds	r26, 0x281A	; 0x80281a <Axes+0x5d>
    2a58:	b0 91 1b 28 	lds	r27, 0x281B	; 0x80281b <Axes+0x5e>
    2a5c:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    2a60:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    2a64:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    2a68:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        IACC=Axes[2].ACC; 
    2a6c:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <Axes+0x5f>
    2a70:	90 91 1d 28 	lds	r25, 0x281D	; 0x80281d <Axes+0x60>
    2a74:	a0 91 1e 28 	lds	r26, 0x281E	; 0x80281e <Axes+0x61>
    2a78:	b0 91 1f 28 	lds	r27, 0x281F	; 0x80281f <Axes+0x62>
    2a7c:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    2a80:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    2a84:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    2a88:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
        IDEC=Axes[2].DEC; 
    2a8c:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <Axes+0x63>
    2a90:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <Axes+0x64>
    2a94:	a0 91 22 28 	lds	r26, 0x2822	; 0x802822 <Axes+0x65>
    2a98:	b0 91 23 28 	lds	r27, 0x2823	; 0x802823 <Axes+0x66>
    2a9c:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    2aa0:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    2aa4:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    2aa8:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition3-SoftRef3);
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ab2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ab4:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <MaxDistanceToGo>
    2ab8:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <MaxDistanceToGo+0x1>
    2abc:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <MaxDistanceToGo+0x2>
    2ac0:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <MaxDistanceToGo+0x3>
      }   
      //printf("MaxDTG: %d\r\n",MaxDistanceToGo);
      if(MaxSpeed>0)
    2ac4:	80 90 6d 27 	lds	r8, 0x276D	; 0x80276d <MaxSpeed>
    2ac8:	90 90 6e 27 	lds	r9, 0x276E	; 0x80276e <MaxSpeed+0x1>
    2acc:	a0 90 6f 27 	lds	r10, 0x276F	; 0x80276f <MaxSpeed+0x2>
    2ad0:	b0 90 70 27 	lds	r11, 0x2770	; 0x802770 <MaxSpeed+0x3>
    2ad4:	18 14       	cp	r1, r8
    2ad6:	19 04       	cpc	r1, r9
    2ad8:	1a 04       	cpc	r1, r10
    2ada:	1b 04       	cpc	r1, r11
    2adc:	0c f0       	brlt	.+2      	; 0x2ae0 <_Z6PRGExev+0x8c2>
    2ade:	52 c0       	rjmp	.+164    	; 0x2b84 <_Z6PRGExev+0x966>
      {
        Ma1=(unsigned int)((float)((float)DistanceToGo1/(float)MaxDistanceToGo)*1000);
    2ae0:	60 91 94 27 	lds	r22, 0x2794	; 0x802794 <MaxDistanceToGo>
    2ae4:	70 91 95 27 	lds	r23, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    2ae8:	80 91 96 27 	lds	r24, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    2aec:	90 91 97 27 	lds	r25, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    2af0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    2af4:	6d 83       	std	Y+5, r22	; 0x05
    2af6:	7e 83       	std	Y+6, r23	; 0x06
    2af8:	8f 83       	std	Y+7, r24	; 0x07
    2afa:	98 87       	std	Y+8, r25	; 0x08
    2afc:	c7 01       	movw	r24, r14
    2afe:	b6 01       	movw	r22, r12
    2b00:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    2b04:	2d 81       	ldd	r18, Y+5	; 0x05
    2b06:	3e 81       	ldd	r19, Y+6	; 0x06
    2b08:	4f 81       	ldd	r20, Y+7	; 0x07
    2b0a:	58 85       	ldd	r21, Y+8	; 0x08
    2b0c:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a e7       	ldi	r20, 0x7A	; 122
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    2b1c:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    2b20:	60 93 30 27 	sts	0x2730, r22	; 0x802730 <Ma1>
    2b24:	70 93 31 27 	sts	0x2731, r23	; 0x802731 <Ma1+0x1>
        Ma2=(unsigned int)((float)((float)DistanceToGo2/(float)MaxDistanceToGo)*1000);  
    2b28:	c3 01       	movw	r24, r6
    2b2a:	b2 01       	movw	r22, r4
    2b2c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    2b30:	2d 81       	ldd	r18, Y+5	; 0x05
    2b32:	3e 81       	ldd	r19, Y+6	; 0x06
    2b34:	4f 81       	ldd	r20, Y+7	; 0x07
    2b36:	58 85       	ldd	r21, Y+8	; 0x08
    2b38:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a e7       	ldi	r20, 0x7A	; 122
    2b42:	54 e4       	ldi	r21, 0x44	; 68
    2b44:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    2b48:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    2b4c:	60 93 2e 27 	sts	0x272E, r22	; 0x80272e <Ma2>
    2b50:	70 93 2f 27 	sts	0x272F, r23	; 0x80272f <Ma2+0x1>
        Ma3=(unsigned int)((float)((float)DistanceToGo3/(float)MaxDistanceToGo)*1000); 
    2b54:	69 81       	ldd	r22, Y+1	; 0x01
    2b56:	7a 81       	ldd	r23, Y+2	; 0x02
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    2b60:	2d 81       	ldd	r18, Y+5	; 0x05
    2b62:	3e 81       	ldd	r19, Y+6	; 0x06
    2b64:	4f 81       	ldd	r20, Y+7	; 0x07
    2b66:	58 85       	ldd	r21, Y+8	; 0x08
    2b68:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a e7       	ldi	r20, 0x7A	; 122
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    2b78:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    2b7c:	60 93 2c 27 	sts	0x272C, r22	; 0x80272c <Ma3>
    2b80:	70 93 2d 27 	sts	0x272D, r23	; 0x80272d <Ma3+0x1>
        //printf("MaxSpeed: %d\tMa1: %d\tMa2: %d\tMa3: %d\r\n",MaxSpeed,Ma1,Ma2,Ma3);         		  
      }
      CurSpeedFrq=MaxSpeed;
    2b84:	80 92 42 27 	sts	0x2742, r8	; 0x802742 <CurSpeedFrq>
    2b88:	90 92 43 27 	sts	0x2743, r9	; 0x802743 <CurSpeedFrq+0x1>
    2b8c:	a0 92 44 27 	sts	0x2744, r10	; 0x802744 <CurSpeedFrq+0x2>
    2b90:	b0 92 45 27 	sts	0x2745, r11	; 0x802745 <CurSpeedFrq+0x3>
      ACC = 0;
    2b94:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
      DEC = 0;
    2b98:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
      TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);   
    2b9c:	c5 01       	movw	r24, r10
    2b9e:	b4 01       	movw	r22, r8
    2ba0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    2ba4:	9b 01       	movw	r18, r22
    2ba6:	ac 01       	movw	r20, r24
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	8a e7       	ldi	r24, 0x7A	; 122
    2bae:	96 e4       	ldi	r25, 0x46	; 70
    2bb0:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    2bb4:	60 93 28 27 	sts	0x2728, r22	; 0x802728 <TimerMainPeriod>
    2bb8:	70 93 29 27 	sts	0x2729, r23	; 0x802729 <TimerMainPeriod+0x1>
    2bbc:	80 93 2a 27 	sts	0x272A, r24	; 0x80272a <TimerMainPeriod+0x2>
    2bc0:	90 93 2b 27 	sts	0x272B, r25	; 0x80272b <TimerMainPeriod+0x3>
      tcc0_init();   
    2bc4:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
      TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	4a e7       	ldi	r20, 0x7A	; 122
    2bce:	54 e4       	ldi	r21, 0x44	; 68
    2bd0:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    2bd4:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    2bd8:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    2bdc:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    2be0:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    2be4:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    2be8:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2bec:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      break;
    2bf0:	bc c1       	rjmp	.+888    	; 0x2f6a <_Z6PRGExev+0xd4c>
    {
      break;
    }
    case 81 :
    {
        DO1_SET;
    2bf2:	e0 e0       	ldi	r30, 0x00	; 0
    2bf4:	f7 e0       	ldi	r31, 0x07	; 7
    2bf6:	84 81       	ldd	r24, Z+4	; 0x04
    2bf8:	84 60       	ori	r24, 0x04	; 4
    2bfa:	84 83       	std	Z+4, r24	; 0x04
        
        break;
    2bfc:	b6 c1       	rjmp	.+876    	; 0x2f6a <_Z6PRGExev+0xd4c>
    } 
    case 82 :
    {
        DO1_CLR;        
    2bfe:	e0 e0       	ldi	r30, 0x00	; 0
    2c00:	f7 e0       	ldi	r31, 0x07	; 7
    2c02:	84 81       	ldd	r24, Z+4	; 0x04
    2c04:	8b 7f       	andi	r24, 0xFB	; 251
    2c06:	84 83       	std	Z+4, r24	; 0x04
        break;
    2c08:	b0 c1       	rjmp	.+864    	; 0x2f6a <_Z6PRGExev+0xd4c>
    }  
    case 90: //Serial number mode
    {
      char digit;
      int di=0;
      LastPLine = CMDPRGlist.PRGLine;
    2c0a:	80 91 3e 28 	lds	r24, 0x283E	; 0x80283e <CMDPRGlist>
    2c0e:	90 91 3f 28 	lds	r25, 0x283F	; 0x80283f <CMDPRGlist+0x1>
    2c12:	80 93 eb 26 	sts	0x26EB, r24	; 0x8026eb <LastPLine>
    2c16:	90 93 ec 26 	sts	0x26EC, r25	; 0x8026ec <LastPLine+0x1>
        
      CurrentSerial=ReadSerial(); 
    2c1a:	0e 94 91 07 	call	0xf22	; 0xf22 <_Z10ReadSerialv>
    2c1e:	60 93 e7 26 	sts	0x26E7, r22	; 0x8026e7 <CurrentSerial>
    2c22:	70 93 e8 26 	sts	0x26E8, r23	; 0x8026e8 <CurrentSerial+0x1>
    2c26:	80 93 e9 26 	sts	0x26E9, r24	; 0x8026e9 <CurrentSerial+0x2>
    2c2a:	90 93 ea 26 	sts	0x26EA, r25	; 0x8026ea <CurrentSerial+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c2e:	a7 ea       	ldi	r26, 0xA7	; 167
    2c30:	b1 e6       	ldi	r27, 0x61	; 97
    2c32:	11 97       	sbiw	r26, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <_Z6PRGExev+0xa14>
    2c36:	00 c0       	rjmp	.+0      	; 0x2c38 <_Z6PRGExev+0xa1a>
    2c38:	00 00       	nop
      _delay_ms(100);      
      if(((CurrentSerial <= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 0)) || ((CurrentSerial >= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 1)))
    2c3a:	00 91 7b 28 	lds	r16, 0x287B	; 0x80287b <CMDPRGlist+0x3d>
    2c3e:	10 91 7c 28 	lds	r17, 0x287C	; 0x80287c <CMDPRGlist+0x3e>
    2c42:	20 91 7d 28 	lds	r18, 0x287D	; 0x80287d <CMDPRGlist+0x3f>
    2c46:	30 91 7e 28 	lds	r19, 0x287E	; 0x80287e <CMDPRGlist+0x40>
    2c4a:	60 91 e7 26 	lds	r22, 0x26E7	; 0x8026e7 <CurrentSerial>
    2c4e:	70 91 e8 26 	lds	r23, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2c52:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2c56:	90 91 ea 26 	lds	r25, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2c5a:	06 17       	cp	r16, r22
    2c5c:	17 07       	cpc	r17, r23
    2c5e:	28 07       	cpc	r18, r24
    2c60:	39 07       	cpc	r19, r25
    2c62:	50 f0       	brcs	.+20     	; 0x2c78 <_Z6PRGExev+0xa5a>
    2c64:	40 91 76 28 	lds	r20, 0x2876	; 0x802876 <CMDPRGlist+0x38>
    2c68:	44 23       	and	r20, r20
    2c6a:	59 f0       	breq	.+22     	; 0x2c82 <_Z6PRGExev+0xa64>
    2c6c:	60 17       	cp	r22, r16
    2c6e:	71 07       	cpc	r23, r17
    2c70:	82 07       	cpc	r24, r18
    2c72:	93 07       	cpc	r25, r19
    2c74:	08 f4       	brcc	.+2      	; 0x2c78 <_Z6PRGExev+0xa5a>
    2c76:	0d c1       	rjmp	.+538    	; 0x2e92 <_Z6PRGExev+0xc74>
    2c78:	20 91 76 28 	lds	r18, 0x2876	; 0x802876 <CMDPRGlist+0x38>
    2c7c:	21 30       	cpi	r18, 0x01	; 1
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <_Z6PRGExev+0xa64>
    2c80:	08 c1       	rjmp	.+528    	; 0x2e92 <_Z6PRGExev+0xc74>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    2c82:	2a e0       	ldi	r18, 0x0A	; 10
    2c84:	4d ed       	ldi	r20, 0xDD	; 221
    2c86:	56 e2       	ldi	r21, 0x26	; 38
    2c88:	0e 94 67 40 	call	0x80ce	; 0x80ce <__ltoa_ncheck>
      {               
        ltoa(CurrentSerial,SerialCh,10);       
        if(CMDPRGlist.FillWithZero)
    2c8c:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <CMDPRGlist+0x41>
    2c90:	88 23       	and	r24, r24
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <_Z6PRGExev+0xa78>
    2c94:	3f c0       	rjmp	.+126    	; 0x2d14 <_Z6PRGExev+0xaf6>
        {
          digit = CurrentSerial / 10;  
    2c96:	60 91 e7 26 	lds	r22, 0x26E7	; 0x8026e7 <CurrentSerial>
    2c9a:	70 91 e8 26 	lds	r23, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2c9e:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2ca2:	90 91 ea 26 	lds	r25, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2ca6:	2a e0       	ldi	r18, 0x0A	; 10
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	0e 94 c8 3f 	call	0x7f90	; 0x7f90 <__udivmodsi4>
          digit++;
    2cb2:	2f 5f       	subi	r18, 0xFF	; 255
          if(CMDPRGlist.DigitNumber>digit)
    2cb4:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <CMDPRGlist+0x42>
    2cb8:	29 17       	cp	r18, r25
    2cba:	60 f5       	brcc	.+88     	; 0x2d14 <_Z6PRGExev+0xaf6>
          {
            for(di=digit-1;di>=0;di--)
    2cbc:	42 2f       	mov	r20, r18
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	ba 01       	movw	r22, r20
    2cc2:	61 50       	subi	r22, 0x01	; 1
    2cc4:	71 09       	sbc	r23, r1
    2cc6:	4a f4       	brpl	.+18     	; 0x2cda <_Z6PRGExev+0xabc>
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    2cc8:	29 2f       	mov	r18, r25
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	c9 01       	movw	r24, r18
    2cce:	84 1b       	sub	r24, r20
    2cd0:	95 0b       	sbc	r25, r21
    2cd2:	18 16       	cp	r1, r24
    2cd4:	19 06       	cpc	r1, r25
    2cd6:	8c f0       	brlt	.+34     	; 0x2cfa <_Z6PRGExev+0xadc>
    2cd8:	19 c0       	rjmp	.+50     	; 0x2d0c <_Z6PRGExev+0xaee>
    2cda:	e2 2f       	mov	r30, r18
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	e3 52       	subi	r30, 0x23	; 35
    2ce0:	f9 4d       	sbci	r31, 0xD9	; 217
    2ce2:	a9 2f       	mov	r26, r25
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	a3 52       	subi	r26, 0x23	; 35
    2ce8:	b9 4d       	sbci	r27, 0xD9	; 217
    2cea:	2d ed       	ldi	r18, 0xDD	; 221
    2cec:	36 e2       	ldi	r19, 0x26	; 38
          digit++;
          if(CMDPRGlist.DigitNumber>digit)
          {
            for(di=digit-1;di>=0;di--)
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
    2cee:	82 91       	ld	r24, -Z
    2cf0:	8e 93       	st	-X, r24
        {
          digit = CurrentSerial / 10;  
          digit++;
          if(CMDPRGlist.DigitNumber>digit)
          {
            for(di=digit-1;di>=0;di--)
    2cf2:	2e 17       	cp	r18, r30
    2cf4:	3f 07       	cpc	r19, r31
    2cf6:	d9 f7       	brne	.-10     	; 0x2cee <_Z6PRGExev+0xad0>
    2cf8:	e7 cf       	rjmp	.-50     	; 0x2cc8 <_Z6PRGExev+0xaaa>
    2cfa:	ed ed       	ldi	r30, 0xDD	; 221
    2cfc:	f6 e2       	ldi	r31, 0x26	; 38
    2cfe:	83 52       	subi	r24, 0x23	; 35
    2d00:	99 4d       	sbci	r25, 0xD9	; 217
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
            {
              SerialCh[di]='0';
    2d02:	40 e3       	ldi	r20, 0x30	; 48
    2d04:	41 93       	st	Z+, r20
          {
            for(di=digit-1;di>=0;di--)
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    2d06:	e8 17       	cp	r30, r24
    2d08:	f9 07       	cpc	r31, r25
    2d0a:	e1 f7       	brne	.-8      	; 0x2d04 <_Z6PRGExev+0xae6>
            {
              SerialCh[di]='0';
            } 
            SerialCh[CMDPRGlist.DigitNumber]=0;
    2d0c:	f9 01       	movw	r30, r18
    2d0e:	e3 52       	subi	r30, 0x23	; 35
    2d10:	f9 4d       	sbci	r31, 0xD9	; 217
    2d12:	10 82       	st	Z, r1
          }
        }
        if(CMDPRGlist.SerialCountType == 0)
    2d14:	80 91 76 28 	lds	r24, 0x2876	; 0x802876 <CMDPRGlist+0x38>
    2d18:	81 11       	cpse	r24, r1
    2d1a:	14 c0       	rjmp	.+40     	; 0x2d44 <_Z6PRGExev+0xb26>
        {
          CurrentSerial++;
    2d1c:	80 91 e7 26 	lds	r24, 0x26E7	; 0x8026e7 <CurrentSerial>
    2d20:	90 91 e8 26 	lds	r25, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2d24:	a0 91 e9 26 	lds	r26, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2d28:	b0 91 ea 26 	lds	r27, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2d2c:	01 96       	adiw	r24, 0x01	; 1
    2d2e:	a1 1d       	adc	r26, r1
    2d30:	b1 1d       	adc	r27, r1
    2d32:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <CurrentSerial>
    2d36:	90 93 e8 26 	sts	0x26E8, r25	; 0x8026e8 <CurrentSerial+0x1>
    2d3a:	a0 93 e9 26 	sts	0x26E9, r26	; 0x8026e9 <CurrentSerial+0x2>
    2d3e:	b0 93 ea 26 	sts	0x26EA, r27	; 0x8026ea <CurrentSerial+0x3>
    2d42:	13 c0       	rjmp	.+38     	; 0x2d6a <_Z6PRGExev+0xb4c>
        }
        else
        {
          CurrentSerial--;
    2d44:	80 91 e7 26 	lds	r24, 0x26E7	; 0x8026e7 <CurrentSerial>
    2d48:	90 91 e8 26 	lds	r25, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2d4c:	a0 91 e9 26 	lds	r26, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2d50:	b0 91 ea 26 	lds	r27, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	a1 09       	sbc	r26, r1
    2d58:	b1 09       	sbc	r27, r1
    2d5a:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <CurrentSerial>
    2d5e:	90 93 e8 26 	sts	0x26E8, r25	; 0x8026e8 <CurrentSerial+0x1>
    2d62:	a0 93 e9 26 	sts	0x26E9, r26	; 0x8026e9 <CurrentSerial+0x2>
    2d66:	b0 93 ea 26 	sts	0x26EA, r27	; 0x8026ea <CurrentSerial+0x3>
        }      
        
        SerChIndex=0; 
    2d6a:	10 92 dc 26 	sts	0x26DC, r1	; 0x8026dc <SerChIndex>
        ContinuousRead=0;       
    2d6e:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        WriteSerial(CurrentSerial); 
    2d72:	60 91 e7 26 	lds	r22, 0x26E7	; 0x8026e7 <CurrentSerial>
    2d76:	70 91 e8 26 	lds	r23, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2d7a:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2d7e:	90 91 ea 26 	lds	r25, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2d82:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_Z11WriteSeriall>
    2d86:	bf e9       	ldi	r27, 0x9F	; 159
    2d88:	e6 e8       	ldi	r30, 0x86	; 134
    2d8a:	f1 e0       	ldi	r31, 0x01	; 1
    2d8c:	b1 50       	subi	r27, 0x01	; 1
    2d8e:	e0 40       	sbci	r30, 0x00	; 0
    2d90:	f0 40       	sbci	r31, 0x00	; 0
    2d92:	e1 f7       	brne	.-8      	; 0x2d8c <_Z6PRGExev+0xb6e>
    2d94:	00 c0       	rjmp	.+0      	; 0x2d96 <_Z6PRGExev+0xb78>
    2d96:	00 00       	nop
        _delay_ms(500);
        CurrentSerial=ReadSerial(); 
    2d98:	0e 94 91 07 	call	0xf22	; 0xf22 <_Z10ReadSerialv>
    2d9c:	60 93 e7 26 	sts	0x26E7, r22	; 0x8026e7 <CurrentSerial>
    2da0:	70 93 e8 26 	sts	0x26E8, r23	; 0x8026e8 <CurrentSerial+0x1>
    2da4:	80 93 e9 26 	sts	0x26E9, r24	; 0x8026e9 <CurrentSerial+0x2>
    2da8:	90 93 ea 26 	sts	0x26EA, r25	; 0x8026ea <CurrentSerial+0x3>
    2dac:	87 ea       	ldi	r24, 0xA7	; 167
    2dae:	91 e6       	ldi	r25, 0x61	; 97
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <_Z6PRGExev+0xb92>
    2db4:	00 c0       	rjmp	.+0      	; 0x2db6 <_Z6PRGExev+0xb98>
    2db6:	00 00       	nop
        _delay_ms(100);                     
        printf("Current Serial is %d\r\n",CurrentSerial);
    2db8:	80 91 ea 26 	lds	r24, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2dbc:	8f 93       	push	r24
    2dbe:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2dc2:	8f 93       	push	r24
    2dc4:	80 91 e8 26 	lds	r24, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2dc8:	8f 93       	push	r24
    2dca:	80 91 e7 26 	lds	r24, 0x26E7	; 0x8026e7 <CurrentSerial>
    2dce:	8f 93       	push	r24
    2dd0:	80 ee       	ldi	r24, 0xE0	; 224
    2dd2:	90 e2       	ldi	r25, 0x20	; 32
    2dd4:	9f 93       	push	r25
    2dd6:	8f 93       	push	r24
    2dd8:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
        ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100); 
    2ddc:	e0 91 dc 26 	lds	r30, 0x26DC	; 0x8026dc <SerChIndex>
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	e3 52       	subi	r30, 0x23	; 35
    2de4:	f9 4d       	sbci	r31, 0xD9	; 217
    2de6:	20 81       	ld	r18, Z
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	20 53       	subi	r18, 0x30	; 48
    2dec:	31 09       	sbc	r19, r1
    2dee:	c9 01       	movw	r24, r18
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	22 0f       	add	r18, r18
    2df6:	33 1f       	adc	r19, r19
    2df8:	22 0f       	add	r18, r18
    2dfa:	33 1f       	adc	r19, r19
    2dfc:	22 0f       	add	r18, r18
    2dfe:	33 1f       	adc	r19, r19
    2e00:	82 0f       	add	r24, r18
    2e02:	93 1f       	adc	r25, r19
    2e04:	8c 59       	subi	r24, 0x9C	; 156
    2e06:	9f 4f       	sbci	r25, 0xFF	; 255
    2e08:	0e 94 f6 07 	call	0xfec	; 0xfec <_Z14ReadSubProgramj>
        printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode); 
    2e0c:	80 91 41 28 	lds	r24, 0x2841	; 0x802841 <CMDPRGlist+0x3>
    2e10:	1f 92       	push	r1
    2e12:	8f 93       	push	r24
    2e14:	80 91 3f 28 	lds	r24, 0x283F	; 0x80283f <CMDPRGlist+0x1>
    2e18:	8f 93       	push	r24
    2e1a:	ae e3       	ldi	r26, 0x3E	; 62
    2e1c:	b8 e2       	ldi	r27, 0x28	; 40
    2e1e:	8c 91       	ld	r24, X
    2e20:	8f 93       	push	r24
    2e22:	87 ef       	ldi	r24, 0xF7	; 247
    2e24:	90 e2       	ldi	r25, 0x20	; 32
    2e26:	9f 93       	push	r25
    2e28:	8f 93       	push	r24
    2e2a:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
        printf("Move1:%d\tMove2:%d\tMove3:%d\r\n",CMDPRGlist.Move1,CMDPRGlist.Move2,CMDPRGlist.Move3);
    2e2e:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <CMDPRGlist+0x10>
    2e32:	8f 93       	push	r24
    2e34:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <CMDPRGlist+0xf>
    2e38:	8f 93       	push	r24
    2e3a:	80 91 4c 28 	lds	r24, 0x284C	; 0x80284c <CMDPRGlist+0xe>
    2e3e:	8f 93       	push	r24
    2e40:	80 91 4b 28 	lds	r24, 0x284B	; 0x80284b <CMDPRGlist+0xd>
    2e44:	8f 93       	push	r24
    2e46:	80 91 4a 28 	lds	r24, 0x284A	; 0x80284a <CMDPRGlist+0xc>
    2e4a:	8f 93       	push	r24
    2e4c:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <CMDPRGlist+0xb>
    2e50:	8f 93       	push	r24
    2e52:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <CMDPRGlist+0xa>
    2e56:	8f 93       	push	r24
    2e58:	80 91 47 28 	lds	r24, 0x2847	; 0x802847 <CMDPRGlist+0x9>
    2e5c:	8f 93       	push	r24
    2e5e:	80 91 46 28 	lds	r24, 0x2846	; 0x802846 <CMDPRGlist+0x8>
    2e62:	8f 93       	push	r24
    2e64:	80 91 45 28 	lds	r24, 0x2845	; 0x802845 <CMDPRGlist+0x7>
    2e68:	8f 93       	push	r24
    2e6a:	80 91 44 28 	lds	r24, 0x2844	; 0x802844 <CMDPRGlist+0x6>
    2e6e:	8f 93       	push	r24
    2e70:	80 91 43 28 	lds	r24, 0x2843	; 0x802843 <CMDPRGlist+0x5>
    2e74:	8f 93       	push	r24
    2e76:	84 e1       	ldi	r24, 0x14	; 20
    2e78:	91 e2       	ldi	r25, 0x21	; 33
    2e7a:	9f 93       	push	r25
    2e7c:	8f 93       	push	r24
    2e7e:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
        PRGExe(); 
    2e82:	0e 94 0f 11 	call	0x221e	; 0x221e <_Z6PRGExev>
        RunSubProgram=1;  
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	80 93 db 26 	sts	0x26DB, r24	; 0x8026db <RunSubProgram>
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	6c c0       	rjmp	.+216    	; 0x2f6a <_Z6PRGExev+0xd4c>
      } 
      else
      {
        RunSubProgram=0;
    2e92:	10 92 db 26 	sts	0x26DB, r1	; 0x8026db <RunSubProgram>
        ContinuousRead=0; 
    2e96:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        readRam();
    2e9a:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
        while(CMDPRGlist.PRGLine != LastPLine)
    2e9e:	20 91 3e 28 	lds	r18, 0x283E	; 0x80283e <CMDPRGlist>
    2ea2:	30 91 3f 28 	lds	r19, 0x283F	; 0x80283f <CMDPRGlist+0x1>
    2ea6:	80 91 eb 26 	lds	r24, 0x26EB	; 0x8026eb <LastPLine>
    2eaa:	90 91 ec 26 	lds	r25, 0x26EC	; 0x8026ec <LastPLine+0x1>
    2eae:	28 17       	cp	r18, r24
    2eb0:	39 07       	cpc	r19, r25
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <_Z6PRGExev+0xc98>
    2eb4:	5a c0       	rjmp	.+180    	; 0x2f6a <_Z6PRGExev+0xd4c>
        {
          readRam();
    2eb6:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
      else
      {
        RunSubProgram=0;
        ContinuousRead=0; 
        readRam();
        while(CMDPRGlist.PRGLine != LastPLine)
    2eba:	ae e3       	ldi	r26, 0x3E	; 62
    2ebc:	b8 e2       	ldi	r27, 0x28	; 40
    2ebe:	2d 91       	ld	r18, X+
    2ec0:	3c 91       	ld	r19, X
    2ec2:	80 91 eb 26 	lds	r24, 0x26EB	; 0x8026eb <LastPLine>
    2ec6:	90 91 ec 26 	lds	r25, 0x26EC	; 0x8026ec <LastPLine+0x1>
    2eca:	28 17       	cp	r18, r24
    2ecc:	39 07       	cpc	r19, r25
    2ece:	99 f7       	brne	.-26     	; 0x2eb6 <_Z6PRGExev+0xc98>
    2ed0:	4c c0       	rjmp	.+152    	; 0x2f6a <_Z6PRGExev+0xd4c>
      }
      break;    
    }
    case 100 :
    {
        printf("End Of Program.\r\n");                       
    2ed2:	81 e3       	ldi	r24, 0x31	; 49
    2ed4:	91 e2       	ldi	r25, 0x21	; 33
    2ed6:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
        ProgramRun = 0;  
    2eda:	10 92 bc 27 	sts	0x27BC, r1	; 0x8027bc <ProgramRun>
        ContinuousRead = 0;      
    2ede:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        break;
    2ee2:	43 c0       	rjmp	.+134    	; 0x2f6a <_Z6PRGExev+0xd4c>
    }  
    case 101:
    {
      SerChIndex++; 
    2ee4:	e0 91 dc 26 	lds	r30, 0x26DC	; 0x8026dc <SerChIndex>
    2ee8:	ef 5f       	subi	r30, 0xFF	; 255
    2eea:	e0 93 dc 26 	sts	0x26DC, r30	; 0x8026dc <SerChIndex>
      
      if(SerialCh[SerChIndex]!=0)
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	e3 52       	subi	r30, 0x23	; 35
    2ef2:	f9 4d       	sbci	r31, 0xD9	; 217
    2ef4:	20 81       	ld	r18, Z
    2ef6:	22 23       	and	r18, r18
    2ef8:	d1 f0       	breq	.+52     	; 0x2f2e <_Z6PRGExev+0xd10>
      {
        RunSubProgram=1;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	80 93 db 26 	sts	0x26DB, r24	; 0x8026db <RunSubProgram>
        ContinuousRead=0;
    2f00:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100);  
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	20 53       	subi	r18, 0x30	; 48
    2f08:	31 09       	sbc	r19, r1
    2f0a:	c9 01       	movw	r24, r18
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	22 0f       	add	r18, r18
    2f12:	33 1f       	adc	r19, r19
    2f14:	22 0f       	add	r18, r18
    2f16:	33 1f       	adc	r19, r19
    2f18:	22 0f       	add	r18, r18
    2f1a:	33 1f       	adc	r19, r19
    2f1c:	82 0f       	add	r24, r18
    2f1e:	93 1f       	adc	r25, r19
    2f20:	8c 59       	subi	r24, 0x9C	; 156
    2f22:	9f 4f       	sbci	r25, 0xFF	; 255
    2f24:	0e 94 f6 07 	call	0xfec	; 0xfec <_Z14ReadSubProgramj>
        PRGExe();
    2f28:	0e 94 0f 11 	call	0x221e	; 0x221e <_Z6PRGExev>
    2f2c:	1e c0       	rjmp	.+60     	; 0x2f6a <_Z6PRGExev+0xd4c>
      }
      else
      {
        RunSubProgram=0;
    2f2e:	10 92 db 26 	sts	0x26DB, r1	; 0x8026db <RunSubProgram>
        ContinuousRead=0; 
    2f32:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        readRam();
    2f36:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
        while(CMDPRGlist.PRGLine != LastPLine)
    2f3a:	20 91 eb 26 	lds	r18, 0x26EB	; 0x8026eb <LastPLine>
    2f3e:	30 91 ec 26 	lds	r19, 0x26EC	; 0x8026ec <LastPLine+0x1>
    2f42:	80 91 3e 28 	lds	r24, 0x283E	; 0x80283e <CMDPRGlist>
    2f46:	90 91 3f 28 	lds	r25, 0x283F	; 0x80283f <CMDPRGlist+0x1>
    2f4a:	28 17       	cp	r18, r24
    2f4c:	39 07       	cpc	r19, r25
    2f4e:	69 f0       	breq	.+26     	; 0x2f6a <_Z6PRGExev+0xd4c>
        {
          readRam();
    2f50:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
      else
      {
        RunSubProgram=0;
        ContinuousRead=0; 
        readRam();
        while(CMDPRGlist.PRGLine != LastPLine)
    2f54:	ee e3       	ldi	r30, 0x3E	; 62
    2f56:	f8 e2       	ldi	r31, 0x28	; 40
    2f58:	20 81       	ld	r18, Z
    2f5a:	31 81       	ldd	r19, Z+1	; 0x01
    2f5c:	80 91 eb 26 	lds	r24, 0x26EB	; 0x8026eb <LastPLine>
    2f60:	90 91 ec 26 	lds	r25, 0x26EC	; 0x8026ec <LastPLine+0x1>
    2f64:	28 17       	cp	r18, r24
    2f66:	39 07       	cpc	r19, r25
    2f68:	99 f7       	brne	.-26     	; 0x2f50 <_Z6PRGExev+0xd32>
        }
      }
      break;
    }
 }
}
    2f6a:	28 96       	adiw	r28, 0x08	; 8
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	ff 90       	pop	r15
    2f7a:	ef 90       	pop	r14
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	bf 90       	pop	r11
    2f82:	af 90       	pop	r10
    2f84:	9f 90       	pop	r9
    2f86:	8f 90       	pop	r8
    2f88:	7f 90       	pop	r7
    2f8a:	6f 90       	pop	r6
    2f8c:	5f 90       	pop	r5
    2f8e:	4f 90       	pop	r4
    2f90:	08 95       	ret

00002f92 <_Z6cmdExev>:

void cmdExe()
{
    2f92:	2f 92       	push	r2
    2f94:	3f 92       	push	r3
    2f96:	4f 92       	push	r4
    2f98:	5f 92       	push	r5
    2f9a:	6f 92       	push	r6
    2f9c:	7f 92       	push	r7
    2f9e:	8f 92       	push	r8
    2fa0:	9f 92       	push	r9
    2fa2:	af 92       	push	r10
    2fa4:	bf 92       	push	r11
    2fa6:	cf 92       	push	r12
    2fa8:	df 92       	push	r13
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
    2fba:	6e 97       	sbiw	r28, 0x1e	; 30
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	de bf       	out	0x3e, r29	; 62
    if(strncmp(cmdTemp,"?0000",3)==0)         
    2fc0:	43 e0       	ldi	r20, 0x03	; 3
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	62 e4       	ldi	r22, 0x42	; 66
    2fc6:	71 e2       	ldi	r23, 0x21	; 33
    2fc8:	80 e1       	ldi	r24, 0x10	; 16
    2fca:	97 e2       	ldi	r25, 0x27	; 39
    2fcc:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    2fd0:	89 2b       	or	r24, r25
    2fd2:	89 f4       	brne	.+34     	; 0x2ff6 <_Z6cmdExev+0x64>
    {
      sprintf(BufferSend,"!0000\n\r");       
    2fd4:	88 e0       	ldi	r24, 0x08	; 8
    2fd6:	e8 e4       	ldi	r30, 0x48	; 72
    2fd8:	f1 e2       	ldi	r31, 0x21	; 33
    2fda:	a7 e5       	ldi	r26, 0x57	; 87
    2fdc:	b9 e2       	ldi	r27, 0x29	; 41
    2fde:	01 90       	ld	r0, Z+
    2fe0:	0d 92       	st	X+, r0
    2fe2:	8a 95       	dec	r24
    2fe4:	e1 f7       	brne	.-8      	; 0x2fde <_Z6cmdExev+0x4c>
      Responsing=1; 
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
      SetDataReady;
    2fec:	e0 ea       	ldi	r30, 0xA0	; 160
    2fee:	f6 e0       	ldi	r31, 0x06	; 6
    2ff0:	84 81       	ldd	r24, Z+4	; 0x04
    2ff2:	81 60       	ori	r24, 0x01	; 1
    2ff4:	84 83       	std	Z+4, r24	; 0x04
    }  
    if(strncmp(cmdTemp,"?01",3)==0)
    2ff6:	43 e0       	ldi	r20, 0x03	; 3
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	60 e5       	ldi	r22, 0x50	; 80
    2ffc:	71 e2       	ldi	r23, 0x21	; 33
    2ffe:	80 e1       	ldi	r24, 0x10	; 16
    3000:	97 e2       	ldi	r25, 0x27	; 39
    3002:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    3006:	89 2b       	or	r24, r25
    3008:	09 f0       	breq	.+2      	; 0x300c <_Z6cmdExev+0x7a>
    300a:	bb c1       	rjmp	.+886    	; 0x3382 <_Z6cmdExev+0x3f0>
    {//Read Axis Inputs
      if(cmdTemp[3]=='0')
    300c:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    3010:	80 33       	cpi	r24, 0x30	; 48
    3012:	11 f0       	breq	.+4      	; 0x3018 <_Z6cmdExev+0x86>
    3014:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
       switch(cmdTemp[4])
    3018:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    301c:	82 33       	cpi	r24, 0x32	; 50
    301e:	09 f4       	brne	.+2      	; 0x3022 <_Z6cmdExev+0x90>
    3020:	96 c0       	rjmp	.+300    	; 0x314e <_Z6cmdExev+0x1bc>
    3022:	83 33       	cpi	r24, 0x33	; 51
    3024:	09 f4       	brne	.+2      	; 0x3028 <_Z6cmdExev+0x96>
    3026:	21 c1       	rjmp	.+578    	; 0x326a <_Z6cmdExev+0x2d8>
    3028:	81 33       	cpi	r24, 0x31	; 49
    302a:	11 f0       	breq	.+4      	; 0x3030 <_Z6cmdExev+0x9e>
    302c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    3030:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3034:	82 33       	cpi	r24, 0x32	; 50
    3036:	09 f4       	brne	.+2      	; 0x303a <_Z6cmdExev+0xa8>
    3038:	40 c0       	rjmp	.+128    	; 0x30ba <_Z6cmdExev+0x128>
    303a:	30 f4       	brcc	.+12     	; 0x3048 <_Z6cmdExev+0xb6>
    303c:	80 33       	cpi	r24, 0x30	; 48
    303e:	61 f0       	breq	.+24     	; 0x3058 <_Z6cmdExev+0xc6>
    3040:	81 33       	cpi	r24, 0x31	; 49
    3042:	19 f1       	breq	.+70     	; 0x308a <_Z6cmdExev+0xf8>
    3044:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3048:	83 33       	cpi	r24, 0x33	; 51
    304a:	09 f4       	brne	.+2      	; 0x304e <_Z6cmdExev+0xbc>
    304c:	4f c0       	rjmp	.+158    	; 0x30ec <_Z6cmdExev+0x15a>
    304e:	84 33       	cpi	r24, 0x34	; 52
    3050:	09 f4       	brne	.+2      	; 0x3054 <_Z6cmdExev+0xc2>
    3052:	65 c0       	rjmp	.+202    	; 0x311e <_Z6cmdExev+0x18c>
    3054:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01010\t%u\n\r",ALARM1);
    3058:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    305c:	88 23       	and	r24, r24
    305e:	11 f4       	brne	.+4      	; 0x3064 <_Z6cmdExev+0xd2>
    3060:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3064:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    3068:	82 fb       	bst	r24, 2
    306a:	88 27       	eor	r24, r24
    306c:	80 f9       	bld	r24, 0
    306e:	1f 92       	push	r1
    3070:	8f 93       	push	r24
    3072:	84 e5       	ldi	r24, 0x54	; 84
    3074:	91 e2       	ldi	r25, 0x21	; 33
    3076:	9f 93       	push	r25
    3078:	8f 93       	push	r24
    307a:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01011\t%u\n\r",INPOS1);
    308a:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    308e:	88 23       	and	r24, r24
    3090:	11 f4       	brne	.+4      	; 0x3096 <_Z6cmdExev+0x104>
    3092:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3096:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    309a:	86 95       	lsr	r24
    309c:	81 70       	andi	r24, 0x01	; 1
    309e:	1f 92       	push	r1
    30a0:	8f 93       	push	r24
    30a2:	80 e6       	ldi	r24, 0x60	; 96
    30a4:	91 e2       	ldi	r25, 0x21	; 33
    30a6:	9f 93       	push	r25
    30a8:	8f 93       	push	r24
    30aa:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01012\t%u\n\r",REF1);
    30ba:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    30be:	88 23       	and	r24, r24
    30c0:	11 f4       	brne	.+4      	; 0x30c6 <_Z6cmdExev+0x134>
    30c2:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    30c6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    30ca:	85 fb       	bst	r24, 5
    30cc:	88 27       	eor	r24, r24
    30ce:	80 f9       	bld	r24, 0
    30d0:	1f 92       	push	r1
    30d2:	8f 93       	push	r24
    30d4:	8c e6       	ldi	r24, 0x6C	; 108
    30d6:	91 e2       	ldi	r25, 0x21	; 33
    30d8:	9f 93       	push	r25
    30da:	8f 93       	push	r24
    30dc:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01013\t%u\n\r",LIM_POS1);
    30ec:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    30f0:	88 23       	and	r24, r24
    30f2:	11 f4       	brne	.+4      	; 0x30f8 <_Z6cmdExev+0x166>
    30f4:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    30f8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    30fc:	83 fb       	bst	r24, 3
    30fe:	88 27       	eor	r24, r24
    3100:	80 f9       	bld	r24, 0
    3102:	1f 92       	push	r1
    3104:	8f 93       	push	r24
    3106:	88 e7       	ldi	r24, 0x78	; 120
    3108:	91 e2       	ldi	r25, 0x21	; 33
    310a:	9f 93       	push	r25
    310c:	8f 93       	push	r24
    310e:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01014\t%u\n\r",LIM_NEG1);
    311e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3122:	88 23       	and	r24, r24
    3124:	11 f4       	brne	.+4      	; 0x312a <_Z6cmdExev+0x198>
    3126:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    312a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    312e:	82 95       	swap	r24
    3130:	81 70       	andi	r24, 0x01	; 1
    3132:	1f 92       	push	r1
    3134:	8f 93       	push	r24
    3136:	84 e8       	ldi	r24, 0x84	; 132
    3138:	91 e2       	ldi	r25, 0x21	; 33
    313a:	9f 93       	push	r25
    313c:	8f 93       	push	r24
    313e:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    314e:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3152:	82 33       	cpi	r24, 0x32	; 50
    3154:	09 f4       	brne	.+2      	; 0x3158 <_Z6cmdExev+0x1c6>
    3156:	40 c0       	rjmp	.+128    	; 0x31d8 <_Z6cmdExev+0x246>
    3158:	30 f4       	brcc	.+12     	; 0x3166 <_Z6cmdExev+0x1d4>
    315a:	80 33       	cpi	r24, 0x30	; 48
    315c:	61 f0       	breq	.+24     	; 0x3176 <_Z6cmdExev+0x1e4>
    315e:	81 33       	cpi	r24, 0x31	; 49
    3160:	11 f1       	breq	.+68     	; 0x31a6 <_Z6cmdExev+0x214>
    3162:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3166:	83 33       	cpi	r24, 0x33	; 51
    3168:	09 f4       	brne	.+2      	; 0x316c <_Z6cmdExev+0x1da>
    316a:	4f c0       	rjmp	.+158    	; 0x320a <_Z6cmdExev+0x278>
    316c:	84 33       	cpi	r24, 0x34	; 52
    316e:	09 f4       	brne	.+2      	; 0x3172 <_Z6cmdExev+0x1e0>
    3170:	63 c0       	rjmp	.+198    	; 0x3238 <_Z6cmdExev+0x2a6>
    3172:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01020\t%u\n\r",ALARM2);
    3176:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    317a:	88 23       	and	r24, r24
    317c:	11 f4       	brne	.+4      	; 0x3182 <_Z6cmdExev+0x1f0>
    317e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3182:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3186:	86 95       	lsr	r24
    3188:	81 70       	andi	r24, 0x01	; 1
    318a:	1f 92       	push	r1
    318c:	8f 93       	push	r24
    318e:	80 e9       	ldi	r24, 0x90	; 144
    3190:	91 e2       	ldi	r25, 0x21	; 33
    3192:	9f 93       	push	r25
    3194:	8f 93       	push	r24
    3196:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01021\t%u\n\r",INPOS2);
    31a6:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    31aa:	88 23       	and	r24, r24
    31ac:	11 f4       	brne	.+4      	; 0x31b2 <_Z6cmdExev+0x220>
    31ae:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    31b2:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    31b6:	82 fb       	bst	r24, 2
    31b8:	88 27       	eor	r24, r24
    31ba:	80 f9       	bld	r24, 0
    31bc:	1f 92       	push	r1
    31be:	8f 93       	push	r24
    31c0:	8c e9       	ldi	r24, 0x9C	; 156
    31c2:	91 e2       	ldi	r25, 0x21	; 33
    31c4:	9f 93       	push	r25
    31c6:	8f 93       	push	r24
    31c8:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01032\t%u\n\r",REF2);
    31d8:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    31dc:	88 23       	and	r24, r24
    31de:	11 f4       	brne	.+4      	; 0x31e4 <_Z6cmdExev+0x252>
    31e0:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    31e4:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    31e8:	85 fb       	bst	r24, 5
    31ea:	88 27       	eor	r24, r24
    31ec:	80 f9       	bld	r24, 0
    31ee:	1f 92       	push	r1
    31f0:	8f 93       	push	r24
    31f2:	88 ea       	ldi	r24, 0xA8	; 168
    31f4:	91 e2       	ldi	r25, 0x21	; 33
    31f6:	9f 93       	push	r25
    31f8:	8f 93       	push	r24
    31fa:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01023\t%u\n\r",LIM_POS2);
    320a:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    320e:	88 23       	and	r24, r24
    3210:	11 f4       	brne	.+4      	; 0x3216 <_Z6cmdExev+0x284>
    3212:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3216:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    321a:	81 70       	andi	r24, 0x01	; 1
    321c:	1f 92       	push	r1
    321e:	8f 93       	push	r24
    3220:	84 eb       	ldi	r24, 0xB4	; 180
    3222:	91 e2       	ldi	r25, 0x21	; 33
    3224:	9f 93       	push	r25
    3226:	8f 93       	push	r24
    3228:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	0f 90       	pop	r0
    3232:	0f 90       	pop	r0
    3234:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01024\t%u\n\r",LIM_NEG2);
    3238:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    323c:	88 23       	and	r24, r24
    323e:	11 f4       	brne	.+4      	; 0x3244 <_Z6cmdExev+0x2b2>
    3240:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3244:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3248:	86 fb       	bst	r24, 6
    324a:	88 27       	eor	r24, r24
    324c:	80 f9       	bld	r24, 0
    324e:	1f 92       	push	r1
    3250:	8f 93       	push	r24
    3252:	80 ec       	ldi	r24, 0xC0	; 192
    3254:	91 e2       	ldi	r25, 0x21	; 33
    3256:	9f 93       	push	r25
    3258:	8f 93       	push	r24
    325a:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    326a:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    326e:	82 33       	cpi	r24, 0x32	; 50
    3270:	f1 f1       	breq	.+124    	; 0x32ee <_Z6cmdExev+0x35c>
    3272:	30 f4       	brcc	.+12     	; 0x3280 <_Z6cmdExev+0x2ee>
    3274:	80 33       	cpi	r24, 0x30	; 48
    3276:	61 f0       	breq	.+24     	; 0x3290 <_Z6cmdExev+0x2fe>
    3278:	81 33       	cpi	r24, 0x31	; 49
    327a:	09 f1       	breq	.+66     	; 0x32be <_Z6cmdExev+0x32c>
    327c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3280:	83 33       	cpi	r24, 0x33	; 51
    3282:	09 f4       	brne	.+2      	; 0x3286 <_Z6cmdExev+0x2f4>
    3284:	4d c0       	rjmp	.+154    	; 0x3320 <_Z6cmdExev+0x38e>
    3286:	84 33       	cpi	r24, 0x34	; 52
    3288:	09 f4       	brne	.+2      	; 0x328c <_Z6cmdExev+0x2fa>
    328a:	63 c0       	rjmp	.+198    	; 0x3352 <_Z6cmdExev+0x3c0>
    328c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01030\t%u\n\r",ALARM3);
    3290:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3294:	88 23       	and	r24, r24
    3296:	11 f4       	brne	.+4      	; 0x329c <_Z6cmdExev+0x30a>
    3298:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    329c:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    32a0:	81 70       	andi	r24, 0x01	; 1
    32a2:	1f 92       	push	r1
    32a4:	8f 93       	push	r24
    32a6:	8c ec       	ldi	r24, 0xCC	; 204
    32a8:	91 e2       	ldi	r25, 0x21	; 33
    32aa:	9f 93       	push	r25
    32ac:	8f 93       	push	r24
    32ae:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01031\t%u\n\r",INPOS3);
    32be:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    32c2:	88 23       	and	r24, r24
    32c4:	11 f4       	brne	.+4      	; 0x32ca <_Z6cmdExev+0x338>
    32c6:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    32ca:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    32ce:	86 95       	lsr	r24
    32d0:	81 70       	andi	r24, 0x01	; 1
    32d2:	1f 92       	push	r1
    32d4:	8f 93       	push	r24
    32d6:	88 ed       	ldi	r24, 0xD8	; 216
    32d8:	91 e2       	ldi	r25, 0x21	; 33
    32da:	9f 93       	push	r25
    32dc:	8f 93       	push	r24
    32de:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01032\t%u\n\r",REF3);
    32ee:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    32f2:	88 23       	and	r24, r24
    32f4:	11 f4       	brne	.+4      	; 0x32fa <_Z6cmdExev+0x368>
    32f6:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    32fa:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    32fe:	86 fb       	bst	r24, 6
    3300:	88 27       	eor	r24, r24
    3302:	80 f9       	bld	r24, 0
    3304:	1f 92       	push	r1
    3306:	8f 93       	push	r24
    3308:	88 ea       	ldi	r24, 0xA8	; 168
    330a:	91 e2       	ldi	r25, 0x21	; 33
    330c:	9f 93       	push	r25
    330e:	8f 93       	push	r24
    3310:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01033\t%u\n\r",LIM_POS3);
    3320:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3324:	88 23       	and	r24, r24
    3326:	11 f4       	brne	.+4      	; 0x332c <_Z6cmdExev+0x39a>
    3328:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    332c:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    3330:	85 fb       	bst	r24, 5
    3332:	88 27       	eor	r24, r24
    3334:	80 f9       	bld	r24, 0
    3336:	1f 92       	push	r1
    3338:	8f 93       	push	r24
    333a:	84 ee       	ldi	r24, 0xE4	; 228
    333c:	91 e2       	ldi	r25, 0x21	; 33
    333e:	9f 93       	push	r25
    3340:	8f 93       	push	r24
    3342:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01034\t%u\n\r",LIM_NEG3);
    3352:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3356:	88 23       	and	r24, r24
    3358:	11 f4       	brne	.+4      	; 0x335e <_Z6cmdExev+0x3cc>
    335a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    335e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    3362:	82 95       	swap	r24
    3364:	81 70       	andi	r24, 0x01	; 1
    3366:	1f 92       	push	r1
    3368:	8f 93       	push	r24
    336a:	80 ef       	ldi	r24, 0xF0	; 240
    336c:	91 e2       	ldi	r25, 0x21	; 33
    336e:	9f 93       	push	r25
    3370:	8f 93       	push	r24
    3372:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         
       }
                                  
      }
    }      
    else if(strncmp(cmdTemp,"#02",3)==0)
    3382:	43 e0       	ldi	r20, 0x03	; 3
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	6c ef       	ldi	r22, 0xFC	; 252
    3388:	71 e2       	ldi	r23, 0x21	; 33
    338a:	80 e1       	ldi	r24, 0x10	; 16
    338c:	97 e2       	ldi	r25, 0x27	; 39
    338e:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    3392:	89 2b       	or	r24, r25
    3394:	09 f0       	breq	.+2      	; 0x3398 <_Z6cmdExev+0x406>
    3396:	42 c1       	rjmp	.+644    	; 0x361c <_Z6cmdExev+0x68a>
    {//Write Axis Outputs
      if(cmdTemp[3]=='0')
    3398:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    339c:	80 33       	cpi	r24, 0x30	; 48
    339e:	11 f0       	breq	.+4      	; 0x33a4 <_Z6cmdExev+0x412>
    33a0:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
       switch(cmdTemp[4])
    33a4:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    33a8:	82 33       	cpi	r24, 0x32	; 50
    33aa:	09 f4       	brne	.+2      	; 0x33ae <_Z6cmdExev+0x41c>
    33ac:	6f c0       	rjmp	.+222    	; 0x348c <_Z6cmdExev+0x4fa>
    33ae:	83 33       	cpi	r24, 0x33	; 51
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <_Z6cmdExev+0x422>
    33b2:	d4 c0       	rjmp	.+424    	; 0x355c <_Z6cmdExev+0x5ca>
    33b4:	81 33       	cpi	r24, 0x31	; 49
    33b6:	11 f0       	breq	.+4      	; 0x33bc <_Z6cmdExev+0x42a>
    33b8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    33bc:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    33c0:	80 33       	cpi	r24, 0x30	; 48
    33c2:	21 f0       	breq	.+8      	; 0x33cc <_Z6cmdExev+0x43a>
    33c4:	81 33       	cpi	r24, 0x31	; 49
    33c6:	91 f1       	breq	.+100    	; 0x342c <_Z6cmdExev+0x49a>
    33c8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    33cc:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    33d0:	80 33       	cpi	r24, 0x30	; 48
    33d2:	89 f4       	brne	.+34     	; 0x33f6 <_Z6cmdExev+0x464>
               {
                 CLR_ENABLE1;
    33d4:	e0 e0       	ldi	r30, 0x00	; 0
    33d6:	f6 e0       	ldi	r31, 0x06	; 6
    33d8:	84 81       	ldd	r24, Z+4	; 0x04
    33da:	8f 77       	andi	r24, 0x7F	; 127
    33dc:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020100\n\r");  
    33de:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    33e2:	88 23       	and	r24, r24
    33e4:	41 f0       	breq	.+16     	; 0x33f6 <_Z6cmdExev+0x464>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	92 e2       	ldi	r25, 0x22	; 34
    33ea:	9f 93       	push	r25
    33ec:	8f 93       	push	r24
    33ee:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    33f6:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    33fa:	81 33       	cpi	r24, 0x31	; 49
    33fc:	11 f0       	breq	.+4      	; 0x3402 <_Z6cmdExev+0x470>
    33fe:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               {
                 SET_ENABLE1;  
    3402:	e0 e0       	ldi	r30, 0x00	; 0
    3404:	f6 e0       	ldi	r31, 0x06	; 6
    3406:	84 81       	ldd	r24, Z+4	; 0x04
    3408:	80 68       	ori	r24, 0x80	; 128
    340a:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020101\n\r");
    340c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3410:	88 23       	and	r24, r24
    3412:	11 f4       	brne	.+4      	; 0x3418 <_Z6cmdExev+0x486>
    3414:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3418:	8a e0       	ldi	r24, 0x0A	; 10
    341a:	92 e2       	ldi	r25, 0x22	; 34
    341c:	9f 93       	push	r25
    341e:	8f 93       	push	r24
    3420:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    342c:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    3430:	80 33       	cpi	r24, 0x30	; 48
    3432:	89 f4       	brne	.+34     	; 0x3456 <_Z6cmdExev+0x4c4>
               {
                 CLR_EMG1;
    3434:	e0 e0       	ldi	r30, 0x00	; 0
    3436:	f6 e0       	ldi	r31, 0x06	; 6
    3438:	84 81       	ldd	r24, Z+4	; 0x04
    343a:	8f 7b       	andi	r24, 0xBF	; 191
    343c:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020110\n\r");  
    343e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3442:	88 23       	and	r24, r24
    3444:	41 f0       	breq	.+16     	; 0x3456 <_Z6cmdExev+0x4c4>
    3446:	84 e1       	ldi	r24, 0x14	; 20
    3448:	92 e2       	ldi	r25, 0x22	; 34
    344a:	9f 93       	push	r25
    344c:	8f 93       	push	r24
    344e:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    3456:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    345a:	81 33       	cpi	r24, 0x31	; 49
    345c:	11 f0       	breq	.+4      	; 0x3462 <_Z6cmdExev+0x4d0>
    345e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               {
                 SET_EMG1;  
    3462:	e0 e0       	ldi	r30, 0x00	; 0
    3464:	f6 e0       	ldi	r31, 0x06	; 6
    3466:	84 81       	ldd	r24, Z+4	; 0x04
    3468:	80 64       	ori	r24, 0x40	; 64
    346a:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020111\n\r");
    346c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3470:	88 23       	and	r24, r24
    3472:	11 f4       	brne	.+4      	; 0x3478 <_Z6cmdExev+0x4e6>
    3474:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3478:	8e e1       	ldi	r24, 0x1E	; 30
    347a:	92 e2       	ldi	r25, 0x22	; 34
    347c:	9f 93       	push	r25
    347e:	8f 93       	push	r24
    3480:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    348c:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3490:	80 33       	cpi	r24, 0x30	; 48
    3492:	21 f0       	breq	.+8      	; 0x349c <_Z6cmdExev+0x50a>
    3494:	81 33       	cpi	r24, 0x31	; 49
    3496:	91 f1       	breq	.+100    	; 0x34fc <_Z6cmdExev+0x56a>
    3498:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    349c:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    34a0:	80 33       	cpi	r24, 0x30	; 48
    34a2:	89 f4       	brne	.+34     	; 0x34c6 <_Z6cmdExev+0x534>
               {
                 CLR_ENABLE2;
    34a4:	e0 e2       	ldi	r30, 0x20	; 32
    34a6:	f6 e0       	ldi	r31, 0x06	; 6
    34a8:	84 81       	ldd	r24, Z+4	; 0x04
    34aa:	8f 77       	andi	r24, 0x7F	; 127
    34ac:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020200\n\r");  
    34ae:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    34b2:	88 23       	and	r24, r24
    34b4:	41 f0       	breq	.+16     	; 0x34c6 <_Z6cmdExev+0x534>
    34b6:	88 e2       	ldi	r24, 0x28	; 40
    34b8:	92 e2       	ldi	r25, 0x22	; 34
    34ba:	9f 93       	push	r25
    34bc:	8f 93       	push	r24
    34be:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    34c2:	0f 90       	pop	r0
    34c4:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    34c6:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    34ca:	81 33       	cpi	r24, 0x31	; 49
    34cc:	11 f0       	breq	.+4      	; 0x34d2 <_Z6cmdExev+0x540>
    34ce:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               {
                 SET_ENABLE2;  
    34d2:	e0 e2       	ldi	r30, 0x20	; 32
    34d4:	f6 e0       	ldi	r31, 0x06	; 6
    34d6:	84 81       	ldd	r24, Z+4	; 0x04
    34d8:	80 68       	ori	r24, 0x80	; 128
    34da:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020201\n\r");
    34dc:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    34e0:	88 23       	and	r24, r24
    34e2:	11 f4       	brne	.+4      	; 0x34e8 <_Z6cmdExev+0x556>
    34e4:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    34e8:	82 e3       	ldi	r24, 0x32	; 50
    34ea:	92 e2       	ldi	r25, 0x22	; 34
    34ec:	9f 93       	push	r25
    34ee:	8f 93       	push	r24
    34f0:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    34fc:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    3500:	80 33       	cpi	r24, 0x30	; 48
    3502:	89 f4       	brne	.+34     	; 0x3526 <_Z6cmdExev+0x594>
               {
                 CLR_EMG2;
    3504:	e0 e2       	ldi	r30, 0x20	; 32
    3506:	f6 e0       	ldi	r31, 0x06	; 6
    3508:	84 81       	ldd	r24, Z+4	; 0x04
    350a:	8f 7e       	andi	r24, 0xEF	; 239
    350c:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020210\n\r");  
    350e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3512:	88 23       	and	r24, r24
    3514:	41 f0       	breq	.+16     	; 0x3526 <_Z6cmdExev+0x594>
    3516:	8c e3       	ldi	r24, 0x3C	; 60
    3518:	92 e2       	ldi	r25, 0x22	; 34
    351a:	9f 93       	push	r25
    351c:	8f 93       	push	r24
    351e:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    3526:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    352a:	81 33       	cpi	r24, 0x31	; 49
    352c:	11 f0       	breq	.+4      	; 0x3532 <_Z6cmdExev+0x5a0>
    352e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               {
                 SET_EMG2;  
    3532:	e0 e2       	ldi	r30, 0x20	; 32
    3534:	f6 e0       	ldi	r31, 0x06	; 6
    3536:	84 81       	ldd	r24, Z+4	; 0x04
    3538:	80 61       	ori	r24, 0x10	; 16
    353a:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020211\n\r");
    353c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3540:	88 23       	and	r24, r24
    3542:	11 f4       	brne	.+4      	; 0x3548 <_Z6cmdExev+0x5b6>
    3544:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3548:	86 e4       	ldi	r24, 0x46	; 70
    354a:	92 e2       	ldi	r25, 0x22	; 34
    354c:	9f 93       	push	r25
    354e:	8f 93       	push	r24
    3550:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    355c:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3560:	80 33       	cpi	r24, 0x30	; 48
    3562:	21 f0       	breq	.+8      	; 0x356c <_Z6cmdExev+0x5da>
    3564:	81 33       	cpi	r24, 0x31	; 49
    3566:	91 f1       	breq	.+100    	; 0x35cc <_Z6cmdExev+0x63a>
    3568:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    356c:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    3570:	80 33       	cpi	r24, 0x30	; 48
    3572:	89 f4       	brne	.+34     	; 0x3596 <_Z6cmdExev+0x604>
               {
                 CLR_ENABLE3;
    3574:	e0 e4       	ldi	r30, 0x40	; 64
    3576:	f6 e0       	ldi	r31, 0x06	; 6
    3578:	84 81       	ldd	r24, Z+4	; 0x04
    357a:	8f 77       	andi	r24, 0x7F	; 127
    357c:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020300\n\r");  
    357e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3582:	88 23       	and	r24, r24
    3584:	41 f0       	breq	.+16     	; 0x3596 <_Z6cmdExev+0x604>
    3586:	80 e5       	ldi	r24, 0x50	; 80
    3588:	92 e2       	ldi	r25, 0x22	; 34
    358a:	9f 93       	push	r25
    358c:	8f 93       	push	r24
    358e:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    3596:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    359a:	81 33       	cpi	r24, 0x31	; 49
    359c:	11 f0       	breq	.+4      	; 0x35a2 <_Z6cmdExev+0x610>
    359e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               {
                 SET_ENABLE3;  
    35a2:	e0 e4       	ldi	r30, 0x40	; 64
    35a4:	f6 e0       	ldi	r31, 0x06	; 6
    35a6:	84 81       	ldd	r24, Z+4	; 0x04
    35a8:	80 68       	ori	r24, 0x80	; 128
    35aa:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020301\n\r");
    35ac:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    35b0:	88 23       	and	r24, r24
    35b2:	11 f4       	brne	.+4      	; 0x35b8 <_Z6cmdExev+0x626>
    35b4:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    35b8:	8a e5       	ldi	r24, 0x5A	; 90
    35ba:	92 e2       	ldi	r25, 0x22	; 34
    35bc:	9f 93       	push	r25
    35be:	8f 93       	push	r24
    35c0:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    35cc:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    35d0:	80 33       	cpi	r24, 0x30	; 48
    35d2:	71 f4       	brne	.+28     	; 0x35f0 <_Z6cmdExev+0x65e>
               {
                 //CLR_EMG3;
                 if(EchoON) printf("!020310\n\r");  
    35d4:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    35d8:	88 23       	and	r24, r24
    35da:	11 f4       	brne	.+4      	; 0x35e0 <_Z6cmdExev+0x64e>
    35dc:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    35e0:	84 e6       	ldi	r24, 0x64	; 100
    35e2:	92 e2       	ldi	r25, 0x22	; 34
    35e4:	9f 93       	push	r25
    35e6:	8f 93       	push	r24
    35e8:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    35f0:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    35f4:	81 33       	cpi	r24, 0x31	; 49
    35f6:	11 f0       	breq	.+4      	; 0x35fc <_Z6cmdExev+0x66a>
    35f8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               {
                 //SET_EMG3;  
                 if(EchoON) printf("!020311\n\r");
    35fc:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3600:	88 23       	and	r24, r24
    3602:	11 f4       	brne	.+4      	; 0x3608 <_Z6cmdExev+0x676>
    3604:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3608:	8e e6       	ldi	r24, 0x6E	; 110
    360a:	92 e2       	ldi	r25, 0x22	; 34
    360c:	9f 93       	push	r25
    360e:	8f 93       	push	r24
    3610:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         }         
       }
                                  
      }
    }
    else if(strncmp(cmdTemp,"?03",3)==0)
    361c:	43 e0       	ldi	r20, 0x03	; 3
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	68 e7       	ldi	r22, 0x78	; 120
    3622:	72 e2       	ldi	r23, 0x22	; 34
    3624:	80 e1       	ldi	r24, 0x10	; 16
    3626:	97 e2       	ldi	r25, 0x27	; 39
    3628:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    362c:	89 2b       	or	r24, r25
    362e:	09 f0       	breq	.+2      	; 0x3632 <_Z6cmdExev+0x6a0>
    3630:	a4 c0       	rjmp	.+328    	; 0x377a <_Z6cmdExev+0x7e8>
    {//Read Axis Output
      if(cmdTemp[3]=='0')
    3632:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    3636:	80 33       	cpi	r24, 0x30	; 48
    3638:	11 f0       	breq	.+4      	; 0x363e <_Z6cmdExev+0x6ac>
    363a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
       switch(cmdTemp[4])
    363e:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    3642:	82 33       	cpi	r24, 0x32	; 50
    3644:	09 f4       	brne	.+2      	; 0x3648 <_Z6cmdExev+0x6b6>
    3646:	41 c0       	rjmp	.+130    	; 0x36ca <_Z6cmdExev+0x738>
    3648:	83 33       	cpi	r24, 0x33	; 51
    364a:	09 f4       	brne	.+2      	; 0x364e <_Z6cmdExev+0x6bc>
    364c:	77 c0       	rjmp	.+238    	; 0x373c <_Z6cmdExev+0x7aa>
    364e:	81 33       	cpi	r24, 0x31	; 49
    3650:	11 f0       	breq	.+4      	; 0x3656 <_Z6cmdExev+0x6c4>
    3652:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    3656:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    365a:	80 33       	cpi	r24, 0x30	; 48
    365c:	21 f0       	breq	.+8      	; 0x3666 <_Z6cmdExev+0x6d4>
    365e:	81 33       	cpi	r24, 0x31	; 49
    3660:	d9 f0       	breq	.+54     	; 0x3698 <_Z6cmdExev+0x706>
    3662:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03010\t%u\n\r",ENABLE1);                                      
    3666:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    366a:	88 23       	and	r24, r24
    366c:	11 f4       	brne	.+4      	; 0x3672 <_Z6cmdExev+0x6e0>
    366e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3672:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    3676:	88 1f       	adc	r24, r24
    3678:	88 27       	eor	r24, r24
    367a:	88 1f       	adc	r24, r24
    367c:	1f 92       	push	r1
    367e:	8f 93       	push	r24
    3680:	8c e7       	ldi	r24, 0x7C	; 124
    3682:	92 e2       	ldi	r25, 0x22	; 34
    3684:	9f 93       	push	r25
    3686:	8f 93       	push	r24
    3688:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '1': //EMG
             {
               if(EchoON) printf("!03011\t%u\n\r",EMG1);                                      
    3698:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    369c:	88 23       	and	r24, r24
    369e:	11 f4       	brne	.+4      	; 0x36a4 <_Z6cmdExev+0x712>
    36a0:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    36a4:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    36a8:	86 fb       	bst	r24, 6
    36aa:	88 27       	eor	r24, r24
    36ac:	80 f9       	bld	r24, 0
    36ae:	1f 92       	push	r1
    36b0:	8f 93       	push	r24
    36b2:	88 e8       	ldi	r24, 0x88	; 136
    36b4:	92 e2       	ldi	r25, 0x22	; 34
    36b6:	9f 93       	push	r25
    36b8:	8f 93       	push	r24
    36ba:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    36ca:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    36ce:	80 33       	cpi	r24, 0x30	; 48
    36d0:	21 f0       	breq	.+8      	; 0x36da <_Z6cmdExev+0x748>
    36d2:	81 33       	cpi	r24, 0x31	; 49
    36d4:	d9 f0       	breq	.+54     	; 0x370c <_Z6cmdExev+0x77a>
    36d6:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03020\t%u\n\r",ENABLE2);                                      
    36da:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    36de:	88 23       	and	r24, r24
    36e0:	11 f4       	brne	.+4      	; 0x36e6 <_Z6cmdExev+0x754>
    36e2:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    36e6:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    36ea:	88 1f       	adc	r24, r24
    36ec:	88 27       	eor	r24, r24
    36ee:	88 1f       	adc	r24, r24
    36f0:	1f 92       	push	r1
    36f2:	8f 93       	push	r24
    36f4:	84 e9       	ldi	r24, 0x94	; 148
    36f6:	92 e2       	ldi	r25, 0x22	; 34
    36f8:	9f 93       	push	r25
    36fa:	8f 93       	push	r24
    36fc:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
               break;
             }
             case '1': //EMG
             {
               if(EchoON) printf("!03021\t%u\n\r",EMG2);                                      
    370c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3710:	88 23       	and	r24, r24
    3712:	11 f4       	brne	.+4      	; 0x3718 <_Z6cmdExev+0x786>
    3714:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3718:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    371c:	82 95       	swap	r24
    371e:	81 70       	andi	r24, 0x01	; 1
    3720:	1f 92       	push	r1
    3722:	8f 93       	push	r24
    3724:	80 ea       	ldi	r24, 0xA0	; 160
    3726:	92 e2       	ldi	r25, 0x22	; 34
    3728:	9f 93       	push	r25
    372a:	8f 93       	push	r24
    372c:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    373c:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3740:	80 33       	cpi	r24, 0x30	; 48
    3742:	11 f0       	breq	.+4      	; 0x3748 <_Z6cmdExev+0x7b6>
    3744:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03030\t%u\n\r",ENABLE3);                                      
    3748:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    374c:	88 23       	and	r24, r24
    374e:	11 f4       	brne	.+4      	; 0x3754 <_Z6cmdExev+0x7c2>
    3750:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3754:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
    3758:	88 1f       	adc	r24, r24
    375a:	88 27       	eor	r24, r24
    375c:	88 1f       	adc	r24, r24
    375e:	1f 92       	push	r1
    3760:	8f 93       	push	r24
    3762:	8c ea       	ldi	r24, 0xAC	; 172
    3764:	92 e2       	ldi	r25, 0x22	; 34
    3766:	9f 93       	push	r25
    3768:	8f 93       	push	r24
    376a:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         }         
       }
                                  
      }
    }
    else if(strncmp(cmdTemp,"#04",3)==0)
    377a:	43 e0       	ldi	r20, 0x03	; 3
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	68 eb       	ldi	r22, 0xB8	; 184
    3780:	72 e2       	ldi	r23, 0x22	; 34
    3782:	80 e1       	ldi	r24, 0x10	; 16
    3784:	97 e2       	ldi	r25, 0x27	; 39
    3786:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    378a:	89 2b       	or	r24, r25
    378c:	09 f0       	breq	.+2      	; 0x3790 <_Z6cmdExev+0x7fe>
    378e:	cd c0       	rjmp	.+410    	; 0x392a <_Z6cmdExev+0x998>
    {//SET JOG FOR AXIS  
      if (!ProgramRun)
    3790:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    3794:	81 11       	cpse	r24, r1
    3796:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
        if(cmdTemp[3]=='0')
    379a:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    379e:	80 33       	cpi	r24, 0x30	; 48
    37a0:	11 f0       	breq	.+4      	; 0x37a6 <_Z6cmdExev+0x814>
    37a2:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         {
           switch(cmdTemp[4])
    37a6:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    37aa:	82 33       	cpi	r24, 0x32	; 50
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <_Z6cmdExev+0x81e>
    37ae:	45 c0       	rjmp	.+138    	; 0x383a <_Z6cmdExev+0x8a8>
    37b0:	83 33       	cpi	r24, 0x33	; 51
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <_Z6cmdExev+0x824>
    37b4:	80 c0       	rjmp	.+256    	; 0x38b6 <_Z6cmdExev+0x924>
    37b6:	81 33       	cpi	r24, 0x31	; 49
    37b8:	11 f0       	breq	.+4      	; 0x37be <_Z6cmdExev+0x82c>
    37ba:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    37be:	e5 e1       	ldi	r30, 0x15	; 21
    37c0:	f7 e2       	ldi	r31, 0x27	; 39
    37c2:	ab ef       	ldi	r26, 0xFB	; 251
    37c4:	b6 e2       	ldi	r27, 0x26	; 38
    37c6:	23 e2       	ldi	r18, 0x23	; 35
    37c8:	37 e2       	ldi	r19, 0x27	; 39
           {
             case '1': //Axis 1
             {
                for(k=0;k<14;k++)
                {
                  temp[k]=cmdTemp[k+5];
    37ca:	81 91       	ld	r24, Z+
    37cc:	8d 93       	st	X+, r24
         {
           switch(cmdTemp[4])
           {
             case '1': //Axis 1
             {
                for(k=0;k<14;k++)
    37ce:	e2 17       	cp	r30, r18
    37d0:	f3 07       	cpc	r31, r19
    37d2:	d9 f7       	brne	.-10     	; 0x37ca <_Z6cmdExev+0x838>
    37d4:	8e e0       	ldi	r24, 0x0E	; 14
    37d6:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[20]=0;
    37da:	10 92 0f 27 	sts	0x270F, r1	; 0x80270f <temp+0x14>
                SetJog1=atol(temp);
    37de:	8b ef       	ldi	r24, 0xFB	; 251
    37e0:	96 e2       	ldi	r25, 0x26	; 38
    37e2:	0e 94 27 40 	call	0x804e	; 0x804e <atol>
    37e6:	60 93 b8 27 	sts	0x27B8, r22	; 0x8027b8 <SetJog1>
    37ea:	70 93 b9 27 	sts	0x27B9, r23	; 0x8027b9 <SetJog1+0x1>
    37ee:	80 93 ba 27 	sts	0x27BA, r24	; 0x8027ba <SetJog1+0x2>
    37f2:	90 93 bb 27 	sts	0x27BB, r25	; 0x8027bb <SetJog1+0x3>
                sprintf(BufferSend,"!0401\t%s\n\r",temp); 
    37f6:	0f 2e       	mov	r0, r31
    37f8:	fb ef       	ldi	r31, 0xFB	; 251
    37fa:	8f 2e       	mov	r8, r31
    37fc:	f6 e2       	ldi	r31, 0x26	; 38
    37fe:	9f 2e       	mov	r9, r31
    3800:	f0 2d       	mov	r31, r0
    3802:	9f 92       	push	r9
    3804:	8f 92       	push	r8
    3806:	8c eb       	ldi	r24, 0xBC	; 188
    3808:	92 e2       	ldi	r25, 0x22	; 34
    380a:	9f 93       	push	r25
    380c:	8f 93       	push	r24
    380e:	87 e5       	ldi	r24, 0x57	; 87
    3810:	99 e2       	ldi	r25, 0x29	; 41
    3812:	9f 93       	push	r25
    3814:	8f 93       	push	r24
    3816:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
                Responsing=1;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady;   
    3820:	e0 ea       	ldi	r30, 0xA0	; 160
    3822:	f6 e0       	ldi	r31, 0x06	; 6
    3824:	84 81       	ldd	r24, Z+4	; 0x04
    3826:	81 60       	ori	r24, 0x01	; 1
    3828:	84 83       	std	Z+4, r24	; 0x04
                break;
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    383a:	e5 e1       	ldi	r30, 0x15	; 21
    383c:	f7 e2       	ldi	r31, 0x27	; 39
    383e:	ab ef       	ldi	r26, 0xFB	; 251
    3840:	b6 e2       	ldi	r27, 0x26	; 38
    3842:	2f e1       	ldi	r18, 0x1F	; 31
    3844:	37 e2       	ldi	r19, 0x27	; 39
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=cmdTemp[k+5];
    3846:	81 91       	ld	r24, Z+
    3848:	8d 93       	st	X+, r24
                SetDataReady;   
                break;
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
    384a:	e2 17       	cp	r30, r18
    384c:	f3 07       	cpc	r31, r19
    384e:	d9 f7       	brne	.-10     	; 0x3846 <_Z6cmdExev+0x8b4>
    3850:	8a e0       	ldi	r24, 0x0A	; 10
    3852:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[10]=0;
    3856:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
                SetJog2=atol(temp);
    385a:	8b ef       	ldi	r24, 0xFB	; 251
    385c:	96 e2       	ldi	r25, 0x26	; 38
    385e:	0e 94 27 40 	call	0x804e	; 0x804e <atol>
    3862:	60 93 b4 27 	sts	0x27B4, r22	; 0x8027b4 <SetJog2>
    3866:	70 93 b5 27 	sts	0x27B5, r23	; 0x8027b5 <SetJog2+0x1>
    386a:	80 93 b6 27 	sts	0x27B6, r24	; 0x8027b6 <SetJog2+0x2>
    386e:	90 93 b7 27 	sts	0x27B7, r25	; 0x8027b7 <SetJog2+0x3>
                sprintf(BufferSend,"!0402\t%s\n\r",temp); 
    3872:	0f 2e       	mov	r0, r31
    3874:	fb ef       	ldi	r31, 0xFB	; 251
    3876:	cf 2e       	mov	r12, r31
    3878:	f6 e2       	ldi	r31, 0x26	; 38
    387a:	df 2e       	mov	r13, r31
    387c:	f0 2d       	mov	r31, r0
    387e:	df 92       	push	r13
    3880:	cf 92       	push	r12
    3882:	87 ec       	ldi	r24, 0xC7	; 199
    3884:	92 e2       	ldi	r25, 0x22	; 34
    3886:	9f 93       	push	r25
    3888:	8f 93       	push	r24
    388a:	87 e5       	ldi	r24, 0x57	; 87
    388c:	99 e2       	ldi	r25, 0x29	; 41
    388e:	9f 93       	push	r25
    3890:	8f 93       	push	r24
    3892:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
                Responsing=1; 
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady; 
    389c:	e0 ea       	ldi	r30, 0xA0	; 160
    389e:	f6 e0       	ldi	r31, 0x06	; 6
    38a0:	84 81       	ldd	r24, Z+4	; 0x04
    38a2:	81 60       	ori	r24, 0x01	; 1
    38a4:	84 83       	std	Z+4, r24	; 0x04
                break;
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    38b6:	e5 e1       	ldi	r30, 0x15	; 21
    38b8:	f7 e2       	ldi	r31, 0x27	; 39
    38ba:	ab ef       	ldi	r26, 0xFB	; 251
    38bc:	b6 e2       	ldi	r27, 0x26	; 38
    38be:	2f e1       	ldi	r18, 0x1F	; 31
    38c0:	37 e2       	ldi	r19, 0x27	; 39
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=cmdTemp[k+5];
    38c2:	81 91       	ld	r24, Z+
    38c4:	8d 93       	st	X+, r24
                SetDataReady; 
                break;
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
    38c6:	e2 17       	cp	r30, r18
    38c8:	f3 07       	cpc	r31, r19
    38ca:	d9 f7       	brne	.-10     	; 0x38c2 <_Z6cmdExev+0x930>
    38cc:	8a e0       	ldi	r24, 0x0A	; 10
    38ce:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[10]=0;
    38d2:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
                SetJog3=atol(temp);
    38d6:	8b ef       	ldi	r24, 0xFB	; 251
    38d8:	96 e2       	ldi	r25, 0x26	; 38
    38da:	0e 94 27 40 	call	0x804e	; 0x804e <atol>
    38de:	60 93 b0 27 	sts	0x27B0, r22	; 0x8027b0 <SetJog3>
    38e2:	70 93 b1 27 	sts	0x27B1, r23	; 0x8027b1 <SetJog3+0x1>
    38e6:	80 93 b2 27 	sts	0x27B2, r24	; 0x8027b2 <SetJog3+0x2>
    38ea:	90 93 b3 27 	sts	0x27B3, r25	; 0x8027b3 <SetJog3+0x3>
                sprintf(BufferSend,"!0403\t%s\n\r",temp); 
    38ee:	0b ef       	ldi	r16, 0xFB	; 251
    38f0:	16 e2       	ldi	r17, 0x26	; 38
    38f2:	1f 93       	push	r17
    38f4:	0f 93       	push	r16
    38f6:	82 ed       	ldi	r24, 0xD2	; 210
    38f8:	92 e2       	ldi	r25, 0x22	; 34
    38fa:	9f 93       	push	r25
    38fc:	8f 93       	push	r24
    38fe:	87 e5       	ldi	r24, 0x57	; 87
    3900:	99 e2       	ldi	r25, 0x29	; 41
    3902:	9f 93       	push	r25
    3904:	8f 93       	push	r24
    3906:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
                Responsing=1; 
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady; 
    3910:	e0 ea       	ldi	r30, 0xA0	; 160
    3912:	f6 e0       	ldi	r31, 0x06	; 6
    3914:	84 81       	ldd	r24, Z+4	; 0x04
    3916:	81 60       	ori	r24, 0x01	; 1
    3918:	84 83       	std	Z+4, r24	; 0x04
                break;
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
             }              
           }
         }
      }          
    }
    else if(strncmp(cmdTemp,"?05",3)==0)
    392a:	43 e0       	ldi	r20, 0x03	; 3
    392c:	50 e0       	ldi	r21, 0x00	; 0
    392e:	6d ed       	ldi	r22, 0xDD	; 221
    3930:	72 e2       	ldi	r23, 0x22	; 34
    3932:	80 e1       	ldi	r24, 0x10	; 16
    3934:	97 e2       	ldi	r25, 0x27	; 39
    3936:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    393a:	89 2b       	or	r24, r25
    393c:	09 f0       	breq	.+2      	; 0x3940 <_Z6cmdExev+0x9ae>
    393e:	a1 c0       	rjmp	.+322    	; 0x3a82 <_Z6cmdExev+0xaf0>
    {//READ JOG FOR AXIS  
      if(cmdTemp[3]=='0')
    3940:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    3944:	80 33       	cpi	r24, 0x30	; 48
    3946:	11 f0       	breq	.+4      	; 0x394c <_Z6cmdExev+0x9ba>
    3948:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
           switch(cmdTemp[4])
    394c:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    3950:	82 33       	cpi	r24, 0x32	; 50
    3952:	b9 f1       	breq	.+110    	; 0x39c2 <_Z6cmdExev+0xa30>
    3954:	83 33       	cpi	r24, 0x33	; 51
    3956:	09 f4       	brne	.+2      	; 0x395a <_Z6cmdExev+0x9c8>
    3958:	64 c0       	rjmp	.+200    	; 0x3a22 <_Z6cmdExev+0xa90>
    395a:	81 33       	cpi	r24, 0x31	; 49
    395c:	11 f0       	breq	.+4      	; 0x3962 <_Z6cmdExev+0x9d0>
    395e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3962:	eb ef       	ldi	r30, 0xFB	; 251
    3964:	f6 e2       	ldi	r31, 0x26	; 38
    3966:	85 e0       	ldi	r24, 0x05	; 5
    3968:	97 e2       	ldi	r25, 0x27	; 39
           {
             case '1': //Axis 1
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    396a:	11 92       	st	Z+, r1
      {
           switch(cmdTemp[4])
           {
             case '1': //Axis 1
             {
                for(k=0;k<10;k++)
    396c:	8e 17       	cp	r24, r30
    396e:	9f 07       	cpc	r25, r31
    3970:	e1 f7       	brne	.-8      	; 0x396a <_Z6cmdExev+0x9d8>
    3972:	8a e0       	ldi	r24, 0x0A	; 10
    3974:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    3978:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
    397c:	60 91 b8 27 	lds	r22, 0x27B8	; 0x8027b8 <SetJog1>
    3980:	70 91 b9 27 	lds	r23, 0x27B9	; 0x8027b9 <SetJog1+0x1>
    3984:	80 91 ba 27 	lds	r24, 0x27BA	; 0x8027ba <SetJog1+0x2>
    3988:	90 91 bb 27 	lds	r25, 0x27BB	; 0x8027bb <SetJog1+0x3>
    398c:	2a e0       	ldi	r18, 0x0A	; 10
    398e:	4b ef       	ldi	r20, 0xFB	; 251
    3990:	56 e2       	ldi	r21, 0x26	; 38
    3992:	0e 94 67 40 	call	0x80ce	; 0x80ce <__ltoa_ncheck>
                ltoa(SetJog1,temp,10);
                if(EchoON) printf("!0501\t%s\n\r",temp);  
    3996:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    399a:	88 23       	and	r24, r24
    399c:	11 f4       	brne	.+4      	; 0x39a2 <_Z6cmdExev+0xa10>
    399e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    39a2:	8b ef       	ldi	r24, 0xFB	; 251
    39a4:	96 e2       	ldi	r25, 0x26	; 38
    39a6:	9f 93       	push	r25
    39a8:	8f 93       	push	r24
    39aa:	81 ee       	ldi	r24, 0xE1	; 225
    39ac:	92 e2       	ldi	r25, 0x22	; 34
    39ae:	9f 93       	push	r25
    39b0:	8f 93       	push	r24
    39b2:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    39c2:	eb ef       	ldi	r30, 0xFB	; 251
    39c4:	f6 e2       	ldi	r31, 0x26	; 38
    39c6:	85 e0       	ldi	r24, 0x05	; 5
    39c8:	97 e2       	ldi	r25, 0x27	; 39
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    39ca:	11 92       	st	Z+, r1
                if(EchoON) printf("!0501\t%s\n\r",temp);  
                break;
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
    39cc:	e8 17       	cp	r30, r24
    39ce:	f9 07       	cpc	r31, r25
    39d0:	e1 f7       	brne	.-8      	; 0x39ca <_Z6cmdExev+0xa38>
    39d2:	8a e0       	ldi	r24, 0x0A	; 10
    39d4:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    39d8:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
    39dc:	60 91 b4 27 	lds	r22, 0x27B4	; 0x8027b4 <SetJog2>
    39e0:	70 91 b5 27 	lds	r23, 0x27B5	; 0x8027b5 <SetJog2+0x1>
    39e4:	80 91 b6 27 	lds	r24, 0x27B6	; 0x8027b6 <SetJog2+0x2>
    39e8:	90 91 b7 27 	lds	r25, 0x27B7	; 0x8027b7 <SetJog2+0x3>
    39ec:	2a e0       	ldi	r18, 0x0A	; 10
    39ee:	4b ef       	ldi	r20, 0xFB	; 251
    39f0:	56 e2       	ldi	r21, 0x26	; 38
    39f2:	0e 94 67 40 	call	0x80ce	; 0x80ce <__ltoa_ncheck>
                ltoa(SetJog2,temp,10);
                if(EchoON) printf("!0502\t%s\n\r",temp);  
    39f6:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    39fa:	88 23       	and	r24, r24
    39fc:	11 f4       	brne	.+4      	; 0x3a02 <_Z6cmdExev+0xa70>
    39fe:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3a02:	8b ef       	ldi	r24, 0xFB	; 251
    3a04:	96 e2       	ldi	r25, 0x26	; 38
    3a06:	9f 93       	push	r25
    3a08:	8f 93       	push	r24
    3a0a:	8c ee       	ldi	r24, 0xEC	; 236
    3a0c:	92 e2       	ldi	r25, 0x22	; 34
    3a0e:	9f 93       	push	r25
    3a10:	8f 93       	push	r24
    3a12:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3a22:	eb ef       	ldi	r30, 0xFB	; 251
    3a24:	f6 e2       	ldi	r31, 0x26	; 38
    3a26:	85 e0       	ldi	r24, 0x05	; 5
    3a28:	97 e2       	ldi	r25, 0x27	; 39
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    3a2a:	11 92       	st	Z+, r1
                if(EchoON) printf("!0502\t%s\n\r",temp);  
                break;
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
    3a2c:	8e 17       	cp	r24, r30
    3a2e:	9f 07       	cpc	r25, r31
    3a30:	e1 f7       	brne	.-8      	; 0x3a2a <_Z6cmdExev+0xa98>
    3a32:	8a e0       	ldi	r24, 0x0A	; 10
    3a34:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    3a38:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
    3a3c:	60 91 b0 27 	lds	r22, 0x27B0	; 0x8027b0 <SetJog3>
    3a40:	70 91 b1 27 	lds	r23, 0x27B1	; 0x8027b1 <SetJog3+0x1>
    3a44:	80 91 b2 27 	lds	r24, 0x27B2	; 0x8027b2 <SetJog3+0x2>
    3a48:	90 91 b3 27 	lds	r25, 0x27B3	; 0x8027b3 <SetJog3+0x3>
    3a4c:	2a e0       	ldi	r18, 0x0A	; 10
    3a4e:	4b ef       	ldi	r20, 0xFB	; 251
    3a50:	56 e2       	ldi	r21, 0x26	; 38
    3a52:	0e 94 67 40 	call	0x80ce	; 0x80ce <__ltoa_ncheck>
                ltoa(SetJog3,temp,10);
                if(EchoON) printf("!0503\t%s\n\r",temp);  
    3a56:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3a5a:	88 23       	and	r24, r24
    3a5c:	11 f4       	brne	.+4      	; 0x3a62 <_Z6cmdExev+0xad0>
    3a5e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    3a62:	8b ef       	ldi	r24, 0xFB	; 251
    3a64:	96 e2       	ldi	r25, 0x26	; 38
    3a66:	9f 93       	push	r25
    3a68:	8f 93       	push	r24
    3a6a:	87 ef       	ldi	r24, 0xF7	; 247
    3a6c:	92 e2       	ldi	r25, 0x22	; 34
    3a6e:	9f 93       	push	r25
    3a70:	8f 93       	push	r24
    3a72:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
                break;
             }              
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    3a82:	43 e0       	ldi	r20, 0x03	; 3
    3a84:	50 e0       	ldi	r21, 0x00	; 0
    3a86:	62 e0       	ldi	r22, 0x02	; 2
    3a88:	73 e2       	ldi	r23, 0x23	; 35
    3a8a:	80 e1       	ldi	r24, 0x10	; 16
    3a8c:	97 e2       	ldi	r25, 0x27	; 39
    3a8e:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    3a92:	89 2b       	or	r24, r25
    3a94:	09 f0       	breq	.+2      	; 0x3a98 <_Z6cmdExev+0xb06>
    3a96:	4c c7       	rjmp	.+3736   	; 0x4930 <__stack+0x931>
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    3a98:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    3a9c:	81 11       	cpse	r24, r1
    3a9e:	0c 94 b3 33 	jmp	0x6766	; 0x6766 <__stack+0x2767>
    3aa2:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    3aa6:	91 11       	cpse	r25, r1
    3aa8:	0c 94 dd 33 	jmp	0x67ba	; 0x67ba <__stack+0x27bb>
    3aac:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    3ab0:	91 e0       	ldi	r25, 0x01	; 1
    3ab2:	21 11       	cpse	r18, r1
    3ab4:	01 c0       	rjmp	.+2      	; 0x3ab8 <_Z6cmdExev+0xb26>
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
         
     if (!ProgramRun)
    3abc:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    3ac0:	91 11       	cpse	r25, r1
    3ac2:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
     {
      while (AxisMoving == 1) 
    3ac6:	22 23       	and	r18, r18
    3ac8:	99 f0       	breq	.+38     	; 0x3af0 <_Z6cmdExev+0xb5e>
    3aca:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    3ace:	91 11       	cpse	r25, r1
    3ad0:	07 c0       	rjmp	.+14     	; 0x3ae0 <_Z6cmdExev+0xb4e>
    3ad2:	21 e0       	ldi	r18, 0x01	; 1
    3ad4:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    3ad8:	91 11       	cpse	r25, r1
    3ada:	03 c0       	rjmp	.+6      	; 0x3ae2 <_Z6cmdExev+0xb50>
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	01 c0       	rjmp	.+2      	; 0x3ae2 <_Z6cmdExev+0xb50>
    3ae0:	21 e0       	ldi	r18, 0x01	; 1
    3ae2:	92 2f       	mov	r25, r18
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    3ae4:	81 11       	cpse	r24, r1
    3ae6:	fe cf       	rjmp	.-4      	; 0x3ae4 <_Z6cmdExev+0xb52>
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    3ae8:	91 11       	cpse	r25, r1
    3aea:	fc cf       	rjmp	.-8      	; 0x3ae4 <_Z6cmdExev+0xb52>
    3aec:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
      if(cmdTemp[3]=='0')
    3af0:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    3af4:	80 33       	cpi	r24, 0x30	; 48
    3af6:	09 f0       	breq	.+2      	; 0x3afa <_Z6cmdExev+0xb68>
    3af8:	8f c4       	rjmp	.+2334   	; 0x4418 <__stack+0x419>
      {
           switch(cmdTemp[4])
    3afa:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    3afe:	82 33       	cpi	r24, 0x32	; 50
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <_Z6cmdExev+0xb72>
    3b02:	88 c1       	rjmp	.+784    	; 0x3e14 <_Z6cmdExev+0xe82>
    3b04:	83 33       	cpi	r24, 0x33	; 51
    3b06:	09 f4       	brne	.+2      	; 0x3b0a <_Z6cmdExev+0xb78>
    3b08:	06 c3       	rjmp	.+1548   	; 0x4116 <__stack+0x117>
    3b0a:	81 33       	cpi	r24, 0x31	; 49
    3b0c:	11 f0       	breq	.+4      	; 0x3b12 <_Z6cmdExev+0xb80>
    3b0e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '1': //Axis 1
             {
                if(SetJog1<AxisPosition1) CLR_DIR1;
    3b12:	40 91 b8 27 	lds	r20, 0x27B8	; 0x8027b8 <SetJog1>
    3b16:	50 91 b9 27 	lds	r21, 0x27B9	; 0x8027b9 <SetJog1+0x1>
    3b1a:	60 91 ba 27 	lds	r22, 0x27BA	; 0x8027ba <SetJog1+0x2>
    3b1e:	70 91 bb 27 	lds	r23, 0x27BB	; 0x8027bb <SetJog1+0x3>
    3b22:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    3b26:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    3b2a:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    3b2e:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    3b32:	48 17       	cp	r20, r24
    3b34:	59 07       	cpc	r21, r25
    3b36:	6a 07       	cpc	r22, r26
    3b38:	7b 07       	cpc	r23, r27
    3b3a:	2c f4       	brge	.+10     	; 0x3b46 <_Z6cmdExev+0xbb4>
    3b3c:	e0 e2       	ldi	r30, 0x20	; 32
    3b3e:	f7 e0       	ldi	r31, 0x07	; 7
    3b40:	24 81       	ldd	r18, Z+4	; 0x04
    3b42:	2f 7e       	andi	r18, 0xEF	; 239
    3b44:	24 83       	std	Z+4, r18	; 0x04
                if(SetJog1>AxisPosition1) SET_DIR1;
    3b46:	84 17       	cp	r24, r20
    3b48:	95 07       	cpc	r25, r21
    3b4a:	a6 07       	cpc	r26, r22
    3b4c:	b7 07       	cpc	r27, r23
    3b4e:	2c f4       	brge	.+10     	; 0x3b5a <_Z6cmdExev+0xbc8>
    3b50:	e0 e2       	ldi	r30, 0x20	; 32
    3b52:	f7 e0       	ldi	r31, 0x07	; 7
    3b54:	24 81       	ldd	r18, Z+4	; 0x04
    3b56:	20 61       	ori	r18, 0x10	; 16
    3b58:	24 83       	std	Z+4, r18	; 0x04
                        
                MaxSpeed=SetSpeed1; 
    3b5a:	c0 90 79 27 	lds	r12, 0x2779	; 0x802779 <SetSpeed1>
    3b5e:	d0 90 7a 27 	lds	r13, 0x277A	; 0x80277a <SetSpeed1+0x1>
    3b62:	e0 90 7b 27 	lds	r14, 0x277B	; 0x80277b <SetSpeed1+0x2>
    3b66:	f0 90 7c 27 	lds	r15, 0x277C	; 0x80277c <SetSpeed1+0x3>
    3b6a:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    3b6e:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    3b72:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    3b76:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
                IACC=ACC1; 
    3b7a:	80 90 69 27 	lds	r8, 0x2769	; 0x802769 <ACC1>
    3b7e:	90 90 6a 27 	lds	r9, 0x276A	; 0x80276a <ACC1+0x1>
    3b82:	a0 90 6b 27 	lds	r10, 0x276B	; 0x80276b <ACC1+0x2>
    3b86:	b0 90 6c 27 	lds	r11, 0x276C	; 0x80276c <ACC1+0x3>
    3b8a:	89 82       	std	Y+1, r8	; 0x01
    3b8c:	9a 82       	std	Y+2, r9	; 0x02
    3b8e:	ab 82       	std	Y+3, r10	; 0x03
    3b90:	bc 82       	std	Y+4, r11	; 0x04
    3b92:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    3b96:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    3b9a:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    3b9e:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
                IDEC=DEC1; 
    3ba2:	80 90 5d 27 	lds	r8, 0x275D	; 0x80275d <DEC1>
    3ba6:	90 90 5e 27 	lds	r9, 0x275E	; 0x80275e <DEC1+0x1>
    3baa:	a0 90 5f 27 	lds	r10, 0x275F	; 0x80275f <DEC1+0x2>
    3bae:	b0 90 60 27 	lds	r11, 0x2760	; 0x802760 <DEC1+0x3>
    3bb2:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    3bb6:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    3bba:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    3bbe:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
                MaxDistanceToGo=labs(AxisPosition1-SetJog1);               
    3bc2:	84 1b       	sub	r24, r20
    3bc4:	95 0b       	sbc	r25, r21
    3bc6:	a6 0b       	sbc	r26, r22
    3bc8:	b7 0b       	sbc	r27, r23
    3bca:	2c 01       	movw	r4, r24
    3bcc:	3d 01       	movw	r6, r26
    3bce:	3a f4       	brpl	.+14     	; 0x3bde <_Z6cmdExev+0xc4c>
    3bd0:	44 24       	eor	r4, r4
    3bd2:	55 24       	eor	r5, r5
    3bd4:	32 01       	movw	r6, r4
    3bd6:	48 1a       	sub	r4, r24
    3bd8:	59 0a       	sbc	r5, r25
    3bda:	6a 0a       	sbc	r6, r26
    3bdc:	7b 0a       	sbc	r7, r27
    3bde:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    3be2:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    3be6:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    3bea:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
                Ma1=1000;          
    3bee:	88 ee       	ldi	r24, 0xE8	; 232
    3bf0:	93 e0       	ldi	r25, 0x03	; 3
    3bf2:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    3bf6:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
                CurSpeedFrq=0;
    3bfa:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    3bfe:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    3c02:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    3c06:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
                TCC0.CCA=0xFFFF;                                                   
    3c0a:	8f ef       	ldi	r24, 0xFF	; 255
    3c0c:	9f ef       	ldi	r25, 0xFF	; 255
    3c0e:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3c12:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
                ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    3c16:	c7 01       	movw	r24, r14
    3c18:	b6 01       	movw	r22, r12
    3c1a:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	48 ec       	ldi	r20, 0xC8	; 200
    3c24:	52 e4       	ldi	r21, 0x42	; 66
    3c26:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    3c2a:	6d 83       	std	Y+5, r22	; 0x05
    3c2c:	7e 83       	std	Y+6, r23	; 0x06
    3c2e:	8f 83       	std	Y+7, r24	; 0x07
    3c30:	98 87       	std	Y+8, r25	; 0x08
                ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    3c32:	69 81       	ldd	r22, Y+1	; 0x01
    3c34:	7a 81       	ldd	r23, Y+2	; 0x02
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3a:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3c3e:	9b 01       	movw	r18, r22
    3c40:	ac 01       	movw	r20, r24
    3c42:	6d 81       	ldd	r22, Y+5	; 0x05
    3c44:	7e 81       	ldd	r23, Y+6	; 0x06
    3c46:	8f 81       	ldd	r24, Y+7	; 0x07
    3c48:	98 85       	ldd	r25, Y+8	; 0x08
    3c4a:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    3c4e:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    3c52:	9b 01       	movw	r18, r22
    3c54:	ac 01       	movw	r20, r24
    3c56:	c7 01       	movw	r24, r14
    3c58:	b6 01       	movw	r22, r12
    3c5a:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    3c5e:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    3c62:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    3c66:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    3c6a:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
                DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
                DECSpeedINT= MaxSpeed / DECSpeedINT;                                                     
    3c6e:	c5 01       	movw	r24, r10
    3c70:	b4 01       	movw	r22, r8
    3c72:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3c76:	9b 01       	movw	r18, r22
    3c78:	ac 01       	movw	r20, r24
    3c7a:	6d 81       	ldd	r22, Y+5	; 0x05
    3c7c:	7e 81       	ldd	r23, Y+6	; 0x06
    3c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c80:	98 85       	ldd	r25, Y+8	; 0x08
    3c82:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    3c86:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    3c8a:	9b 01       	movw	r18, r22
    3c8c:	ac 01       	movw	r20, r24
    3c8e:	c7 01       	movw	r24, r14
    3c90:	b6 01       	movw	r22, r12
    3c92:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    3c96:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    3c9a:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    3c9e:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    3ca2:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    3ca6:	a7 01       	movw	r20, r14
    3ca8:	96 01       	movw	r18, r12
    3caa:	c7 01       	movw	r24, r14
    3cac:	b6 01       	movw	r22, r12
    3cae:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <__mulsi3>
    3cb2:	6d 83       	std	Y+5, r22	; 0x05
    3cb4:	7e 83       	std	Y+6, r23	; 0x06
    3cb6:	8f 83       	std	Y+7, r24	; 0x07
    3cb8:	98 87       	std	Y+8, r25	; 0x08
    3cba:	a5 01       	movw	r20, r10
    3cbc:	94 01       	movw	r18, r8
    3cbe:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    3cc2:	69 01       	movw	r12, r18
    3cc4:	7a 01       	movw	r14, r20
    3cc6:	20 93 80 27 	sts	0x2780, r18	; 0x802780 <DecDTG>
    3cca:	30 93 81 27 	sts	0x2781, r19	; 0x802781 <DecDTG+0x1>
    3cce:	40 93 82 27 	sts	0x2782, r20	; 0x802782 <DecDTG+0x2>
    3cd2:	50 93 83 27 	sts	0x2783, r21	; 0x802783 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    3cd6:	6d 81       	ldd	r22, Y+5	; 0x05
    3cd8:	7e 81       	ldd	r23, Y+6	; 0x06
    3cda:	8f 81       	ldd	r24, Y+7	; 0x07
    3cdc:	98 85       	ldd	r25, Y+8	; 0x08
    3cde:	29 81       	ldd	r18, Y+1	; 0x01
    3ce0:	3a 81       	ldd	r19, Y+2	; 0x02
    3ce2:	4b 81       	ldd	r20, Y+3	; 0x03
    3ce4:	5c 81       	ldd	r21, Y+4	; 0x04
    3ce6:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    3cea:	46 01       	movw	r8, r12
    3cec:	57 01       	movw	r10, r14
    3cee:	82 0e       	add	r8, r18
    3cf0:	93 1e       	adc	r9, r19
    3cf2:	a4 1e       	adc	r10, r20
    3cf4:	b5 1e       	adc	r11, r21
    3cf6:	80 92 49 27 	sts	0x2749, r8	; 0x802749 <SumAccDecDTG>
    3cfa:	90 92 4a 27 	sts	0x274A, r9	; 0x80274a <SumAccDecDTG+0x1>
    3cfe:	a0 92 4b 27 	sts	0x274B, r10	; 0x80274b <SumAccDecDTG+0x2>
    3d02:	b0 92 4c 27 	sts	0x274C, r11	; 0x80274c <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    3d06:	84 14       	cp	r8, r4
    3d08:	95 04       	cpc	r9, r5
    3d0a:	a6 04       	cpc	r10, r6
    3d0c:	b7 04       	cpc	r11, r7
    3d0e:	cc f1       	brlt	.+114    	; 0x3d82 <_Z6cmdExev+0xdf0>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    3d10:	c3 01       	movw	r24, r6
    3d12:	b2 01       	movw	r22, r4
    3d14:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3d18:	69 83       	std	Y+1, r22	; 0x01
    3d1a:	7a 83       	std	Y+2, r23	; 0x02
    3d1c:	8b 83       	std	Y+3, r24	; 0x03
    3d1e:	9c 83       	std	Y+4, r25	; 0x04
    3d20:	c5 01       	movw	r24, r10
    3d22:	b4 01       	movw	r22, r8
    3d24:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3d28:	9b 01       	movw	r18, r22
    3d2a:	ac 01       	movw	r20, r24
    3d2c:	69 81       	ldd	r22, Y+1	; 0x01
    3d2e:	7a 81       	ldd	r23, Y+2	; 0x02
    3d30:	8b 81       	ldd	r24, Y+3	; 0x03
    3d32:	9c 81       	ldd	r25, Y+4	; 0x04
    3d34:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    3d38:	4b 01       	movw	r8, r22
    3d3a:	5c 01       	movw	r10, r24
    3d3c:	c7 01       	movw	r24, r14
    3d3e:	b6 01       	movw	r22, r12
    3d40:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3d44:	9b 01       	movw	r18, r22
    3d46:	ac 01       	movw	r20, r24
    3d48:	c5 01       	movw	r24, r10
    3d4a:	b4 01       	movw	r22, r8
    3d4c:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    3d50:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    3d54:	60 93 80 27 	sts	0x2780, r22	; 0x802780 <DecDTG>
    3d58:	70 93 81 27 	sts	0x2781, r23	; 0x802781 <DecDTG+0x1>
    3d5c:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <DecDTG+0x2>
    3d60:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    3d64:	63 01       	movw	r12, r6
    3d66:	52 01       	movw	r10, r4
    3d68:	a6 1a       	sub	r10, r22
    3d6a:	b7 0a       	sbc	r11, r23
    3d6c:	c8 0a       	sbc	r12, r24
    3d6e:	d9 0a       	sbc	r13, r25
    3d70:	a0 92 84 27 	sts	0x2784, r10	; 0x802784 <AccDTG>
    3d74:	b0 92 85 27 	sts	0x2785, r11	; 0x802785 <AccDTG+0x1>
    3d78:	c0 92 86 27 	sts	0x2786, r12	; 0x802786 <AccDTG+0x2>
    3d7c:	d0 92 87 27 	sts	0x2787, r13	; 0x802787 <AccDTG+0x3>
    3d80:	0e c0       	rjmp	.+28     	; 0x3d9e <_Z6cmdExev+0xe0c>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    3d82:	d3 01       	movw	r26, r6
    3d84:	c2 01       	movw	r24, r4
    3d86:	82 1b       	sub	r24, r18
    3d88:	93 0b       	sbc	r25, r19
    3d8a:	a4 0b       	sbc	r26, r20
    3d8c:	b5 0b       	sbc	r27, r21
    3d8e:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <AccDTG>
    3d92:	90 93 85 27 	sts	0x2785, r25	; 0x802785 <AccDTG+0x1>
    3d96:	a0 93 86 27 	sts	0x2786, r26	; 0x802786 <AccDTG+0x2>
    3d9a:	b0 93 87 27 	sts	0x2787, r27	; 0x802787 <AccDTG+0x3>
                    }
                            
                DistanceToGo1=labs(AxisPosition1-SetJog1);  
    3d9e:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    3da2:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    3da6:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    3daa:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    3dae:	40 91 b8 27 	lds	r20, 0x27B8	; 0x8027b8 <SetJog1>
    3db2:	50 91 b9 27 	lds	r21, 0x27B9	; 0x8027b9 <SetJog1+0x1>
    3db6:	60 91 ba 27 	lds	r22, 0x27BA	; 0x8027ba <SetJog1+0x2>
    3dba:	70 91 bb 27 	lds	r23, 0x27BB	; 0x8027bb <SetJog1+0x3>
    3dbe:	84 1b       	sub	r24, r20
    3dc0:	95 0b       	sbc	r25, r21
    3dc2:	a6 0b       	sbc	r26, r22
    3dc4:	b7 0b       	sbc	r27, r23
    3dc6:	ac 01       	movw	r20, r24
    3dc8:	bd 01       	movw	r22, r26
    3dca:	3a f4       	brpl	.+14     	; 0x3dda <_Z6cmdExev+0xe48>
    3dcc:	44 27       	eor	r20, r20
    3dce:	55 27       	eor	r21, r21
    3dd0:	ba 01       	movw	r22, r20
    3dd2:	48 1b       	sub	r20, r24
    3dd4:	59 0b       	sbc	r21, r25
    3dd6:	6a 0b       	sbc	r22, r26
    3dd8:	7b 0b       	sbc	r23, r27
    3dda:	40 93 90 27 	sts	0x2790, r20	; 0x802790 <DistanceToGo1>
    3dde:	50 93 91 27 	sts	0x2791, r21	; 0x802791 <DistanceToGo1+0x1>
    3de2:	60 93 92 27 	sts	0x2792, r22	; 0x802792 <DistanceToGo1+0x2>
    3de6:	70 93 93 27 	sts	0x2793, r23	; 0x802793 <DistanceToGo1+0x3>
                ACC=1;    
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
                sprintf(BufferSend,"!0601\r\n"); 
    3df0:	98 e0       	ldi	r25, 0x08	; 8
    3df2:	e6 e0       	ldi	r30, 0x06	; 6
    3df4:	f3 e2       	ldi	r31, 0x23	; 35
    3df6:	a7 e5       	ldi	r26, 0x57	; 87
    3df8:	b9 e2       	ldi	r27, 0x29	; 41
    3dfa:	01 90       	ld	r0, Z+
    3dfc:	0d 92       	st	X+, r0
    3dfe:	9a 95       	dec	r25
    3e00:	e1 f7       	brne	.-8      	; 0x3dfa <_Z6cmdExev+0xe68>
                Responsing=1; 
    3e02:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady; 
    3e06:	e0 ea       	ldi	r30, 0xA0	; 160
    3e08:	f6 e0       	ldi	r31, 0x06	; 6
    3e0a:	84 81       	ldd	r24, Z+4	; 0x04
    3e0c:	81 60       	ori	r24, 0x01	; 1
    3e0e:	84 83       	std	Z+4, r24	; 0x04
                break;
    3e10:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
             }
             case '2': //Axis 2
             {
                if(SetJog2<AxisPosition2) CLR_DIR2;
    3e14:	40 91 b4 27 	lds	r20, 0x27B4	; 0x8027b4 <SetJog2>
    3e18:	50 91 b5 27 	lds	r21, 0x27B5	; 0x8027b5 <SetJog2+0x1>
    3e1c:	60 91 b6 27 	lds	r22, 0x27B6	; 0x8027b6 <SetJog2+0x2>
    3e20:	70 91 b7 27 	lds	r23, 0x27B7	; 0x8027b7 <SetJog2+0x3>
    3e24:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    3e28:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    3e2c:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    3e30:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    3e34:	48 17       	cp	r20, r24
    3e36:	59 07       	cpc	r21, r25
    3e38:	6a 07       	cpc	r22, r26
    3e3a:	7b 07       	cpc	r23, r27
    3e3c:	2c f4       	brge	.+10     	; 0x3e48 <_Z6cmdExev+0xeb6>
    3e3e:	e0 e2       	ldi	r30, 0x20	; 32
    3e40:	f7 e0       	ldi	r31, 0x07	; 7
    3e42:	24 81       	ldd	r18, Z+4	; 0x04
    3e44:	2b 7f       	andi	r18, 0xFB	; 251
    3e46:	24 83       	std	Z+4, r18	; 0x04
                if(SetJog2>AxisPosition2) SET_DIR2;
    3e48:	84 17       	cp	r24, r20
    3e4a:	95 07       	cpc	r25, r21
    3e4c:	a6 07       	cpc	r26, r22
    3e4e:	b7 07       	cpc	r27, r23
    3e50:	2c f4       	brge	.+10     	; 0x3e5c <_Z6cmdExev+0xeca>
    3e52:	e0 e2       	ldi	r30, 0x20	; 32
    3e54:	f7 e0       	ldi	r31, 0x07	; 7
    3e56:	24 81       	ldd	r18, Z+4	; 0x04
    3e58:	24 60       	ori	r18, 0x04	; 4
    3e5a:	24 83       	std	Z+4, r18	; 0x04
                        
                MaxSpeed=SetSpeed2;
    3e5c:	c0 90 75 27 	lds	r12, 0x2775	; 0x802775 <SetSpeed2>
    3e60:	d0 90 76 27 	lds	r13, 0x2776	; 0x802776 <SetSpeed2+0x1>
    3e64:	e0 90 77 27 	lds	r14, 0x2777	; 0x802777 <SetSpeed2+0x2>
    3e68:	f0 90 78 27 	lds	r15, 0x2778	; 0x802778 <SetSpeed2+0x3>
    3e6c:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    3e70:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    3e74:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    3e78:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
                IACC=ACC2;
    3e7c:	80 90 65 27 	lds	r8, 0x2765	; 0x802765 <ACC2>
    3e80:	90 90 66 27 	lds	r9, 0x2766	; 0x802766 <ACC2+0x1>
    3e84:	a0 90 67 27 	lds	r10, 0x2767	; 0x802767 <ACC2+0x2>
    3e88:	b0 90 68 27 	lds	r11, 0x2768	; 0x802768 <ACC2+0x3>
    3e8c:	89 82       	std	Y+1, r8	; 0x01
    3e8e:	9a 82       	std	Y+2, r9	; 0x02
    3e90:	ab 82       	std	Y+3, r10	; 0x03
    3e92:	bc 82       	std	Y+4, r11	; 0x04
    3e94:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    3e98:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    3e9c:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    3ea0:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
                IDEC=DEC2;
    3ea4:	80 90 59 27 	lds	r8, 0x2759	; 0x802759 <DEC2>
    3ea8:	90 90 5a 27 	lds	r9, 0x275A	; 0x80275a <DEC2+0x1>
    3eac:	a0 90 5b 27 	lds	r10, 0x275B	; 0x80275b <DEC2+0x2>
    3eb0:	b0 90 5c 27 	lds	r11, 0x275C	; 0x80275c <DEC2+0x3>
    3eb4:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    3eb8:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    3ebc:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    3ec0:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
                MaxDistanceToGo=labs(AxisPosition2-SetJog2); 
    3ec4:	84 1b       	sub	r24, r20
    3ec6:	95 0b       	sbc	r25, r21
    3ec8:	a6 0b       	sbc	r26, r22
    3eca:	b7 0b       	sbc	r27, r23
    3ecc:	2c 01       	movw	r4, r24
    3ece:	3d 01       	movw	r6, r26
    3ed0:	3a f4       	brpl	.+14     	; 0x3ee0 <_Z6cmdExev+0xf4e>
    3ed2:	44 24       	eor	r4, r4
    3ed4:	55 24       	eor	r5, r5
    3ed6:	32 01       	movw	r6, r4
    3ed8:	48 1a       	sub	r4, r24
    3eda:	59 0a       	sbc	r5, r25
    3edc:	6a 0a       	sbc	r6, r26
    3ede:	7b 0a       	sbc	r7, r27
    3ee0:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    3ee4:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    3ee8:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    3eec:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
                              
                Ma2=1000;           
    3ef0:	88 ee       	ldi	r24, 0xE8	; 232
    3ef2:	93 e0       	ldi	r25, 0x03	; 3
    3ef4:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    3ef8:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
                CurSpeedFrq=0;
    3efc:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    3f00:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    3f04:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    3f08:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
                TCC0.CCA=0xFFFF;                                                   
    3f0c:	8f ef       	ldi	r24, 0xFF	; 255
    3f0e:	9f ef       	ldi	r25, 0xFF	; 255
    3f10:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3f14:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
                ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    3f18:	c7 01       	movw	r24, r14
    3f1a:	b6 01       	movw	r22, r12
    3f1c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	48 ec       	ldi	r20, 0xC8	; 200
    3f26:	52 e4       	ldi	r21, 0x42	; 66
    3f28:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    3f2c:	6d 83       	std	Y+5, r22	; 0x05
    3f2e:	7e 83       	std	Y+6, r23	; 0x06
    3f30:	8f 83       	std	Y+7, r24	; 0x07
    3f32:	98 87       	std	Y+8, r25	; 0x08
                ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    3f34:	69 81       	ldd	r22, Y+1	; 0x01
    3f36:	7a 81       	ldd	r23, Y+2	; 0x02
    3f38:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3f40:	9b 01       	movw	r18, r22
    3f42:	ac 01       	movw	r20, r24
    3f44:	6d 81       	ldd	r22, Y+5	; 0x05
    3f46:	7e 81       	ldd	r23, Y+6	; 0x06
    3f48:	8f 81       	ldd	r24, Y+7	; 0x07
    3f4a:	98 85       	ldd	r25, Y+8	; 0x08
    3f4c:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    3f50:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    3f54:	9b 01       	movw	r18, r22
    3f56:	ac 01       	movw	r20, r24
    3f58:	c7 01       	movw	r24, r14
    3f5a:	b6 01       	movw	r22, r12
    3f5c:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    3f60:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    3f64:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    3f68:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    3f6c:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
                DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
                DECSpeedINT= MaxSpeed / DECSpeedINT;                                                       
    3f70:	c5 01       	movw	r24, r10
    3f72:	b4 01       	movw	r22, r8
    3f74:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    3f78:	9b 01       	movw	r18, r22
    3f7a:	ac 01       	movw	r20, r24
    3f7c:	6d 81       	ldd	r22, Y+5	; 0x05
    3f7e:	7e 81       	ldd	r23, Y+6	; 0x06
    3f80:	8f 81       	ldd	r24, Y+7	; 0x07
    3f82:	98 85       	ldd	r25, Y+8	; 0x08
    3f84:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    3f88:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    3f8c:	9b 01       	movw	r18, r22
    3f8e:	ac 01       	movw	r20, r24
    3f90:	c7 01       	movw	r24, r14
    3f92:	b6 01       	movw	r22, r12
    3f94:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    3f98:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    3f9c:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    3fa0:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    3fa4:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    3fa8:	a7 01       	movw	r20, r14
    3faa:	96 01       	movw	r18, r12
    3fac:	c7 01       	movw	r24, r14
    3fae:	b6 01       	movw	r22, r12
    3fb0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <__mulsi3>
    3fb4:	6d 83       	std	Y+5, r22	; 0x05
    3fb6:	7e 83       	std	Y+6, r23	; 0x06
    3fb8:	8f 83       	std	Y+7, r24	; 0x07
    3fba:	98 87       	std	Y+8, r25	; 0x08
    3fbc:	a5 01       	movw	r20, r10
    3fbe:	94 01       	movw	r18, r8
    3fc0:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    3fc4:	69 01       	movw	r12, r18
    3fc6:	7a 01       	movw	r14, r20
    3fc8:	20 93 80 27 	sts	0x2780, r18	; 0x802780 <DecDTG>
    3fcc:	30 93 81 27 	sts	0x2781, r19	; 0x802781 <DecDTG+0x1>
    3fd0:	40 93 82 27 	sts	0x2782, r20	; 0x802782 <DecDTG+0x2>
    3fd4:	50 93 83 27 	sts	0x2783, r21	; 0x802783 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    3fd8:	6d 81       	ldd	r22, Y+5	; 0x05
    3fda:	7e 81       	ldd	r23, Y+6	; 0x06
    3fdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3fde:	98 85       	ldd	r25, Y+8	; 0x08
    3fe0:	29 81       	ldd	r18, Y+1	; 0x01
    3fe2:	3a 81       	ldd	r19, Y+2	; 0x02
    3fe4:	4b 81       	ldd	r20, Y+3	; 0x03
    3fe6:	5c 81       	ldd	r21, Y+4	; 0x04
    3fe8:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    3fec:	46 01       	movw	r8, r12
    3fee:	57 01       	movw	r10, r14
    3ff0:	82 0e       	add	r8, r18
    3ff2:	93 1e       	adc	r9, r19
    3ff4:	a4 1e       	adc	r10, r20
    3ff6:	b5 1e       	adc	r11, r21
    3ff8:	80 92 49 27 	sts	0x2749, r8	; 0x802749 <SumAccDecDTG>
    3ffc:	90 92 4a 27 	sts	0x274A, r9	; 0x80274a <SumAccDecDTG+0x1>
    4000:	a0 92 4b 27 	sts	0x274B, r10	; 0x80274b <SumAccDecDTG+0x2>
    4004:	b0 92 4c 27 	sts	0x274C, r11	; 0x80274c <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    4008:	84 14       	cp	r8, r4
    400a:	95 04       	cpc	r9, r5
    400c:	a6 04       	cpc	r10, r6
    400e:	b7 04       	cpc	r11, r7
    4010:	cc f1       	brlt	.+114    	; 0x4084 <__stack+0x85>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    4012:	c3 01       	movw	r24, r6
    4014:	b2 01       	movw	r22, r4
    4016:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    401a:	69 83       	std	Y+1, r22	; 0x01
    401c:	7a 83       	std	Y+2, r23	; 0x02
    401e:	8b 83       	std	Y+3, r24	; 0x03
    4020:	9c 83       	std	Y+4, r25	; 0x04
    4022:	c5 01       	movw	r24, r10
    4024:	b4 01       	movw	r22, r8
    4026:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    402a:	9b 01       	movw	r18, r22
    402c:	ac 01       	movw	r20, r24
    402e:	69 81       	ldd	r22, Y+1	; 0x01
    4030:	7a 81       	ldd	r23, Y+2	; 0x02
    4032:	8b 81       	ldd	r24, Y+3	; 0x03
    4034:	9c 81       	ldd	r25, Y+4	; 0x04
    4036:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    403a:	4b 01       	movw	r8, r22
    403c:	5c 01       	movw	r10, r24
    403e:	c7 01       	movw	r24, r14
    4040:	b6 01       	movw	r22, r12
    4042:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    4046:	9b 01       	movw	r18, r22
    4048:	ac 01       	movw	r20, r24
    404a:	c5 01       	movw	r24, r10
    404c:	b4 01       	movw	r22, r8
    404e:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    4052:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    4056:	60 93 80 27 	sts	0x2780, r22	; 0x802780 <DecDTG>
    405a:	70 93 81 27 	sts	0x2781, r23	; 0x802781 <DecDTG+0x1>
    405e:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <DecDTG+0x2>
    4062:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    4066:	63 01       	movw	r12, r6
    4068:	52 01       	movw	r10, r4
    406a:	a6 1a       	sub	r10, r22
    406c:	b7 0a       	sbc	r11, r23
    406e:	c8 0a       	sbc	r12, r24
    4070:	d9 0a       	sbc	r13, r25
    4072:	a0 92 84 27 	sts	0x2784, r10	; 0x802784 <AccDTG>
    4076:	b0 92 85 27 	sts	0x2785, r11	; 0x802785 <AccDTG+0x1>
    407a:	c0 92 86 27 	sts	0x2786, r12	; 0x802786 <AccDTG+0x2>
    407e:	d0 92 87 27 	sts	0x2787, r13	; 0x802787 <AccDTG+0x3>
    4082:	0e c0       	rjmp	.+28     	; 0x40a0 <__stack+0xa1>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    4084:	d3 01       	movw	r26, r6
    4086:	c2 01       	movw	r24, r4
    4088:	82 1b       	sub	r24, r18
    408a:	93 0b       	sbc	r25, r19
    408c:	a4 0b       	sbc	r26, r20
    408e:	b5 0b       	sbc	r27, r21
    4090:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <AccDTG>
    4094:	90 93 85 27 	sts	0x2785, r25	; 0x802785 <AccDTG+0x1>
    4098:	a0 93 86 27 	sts	0x2786, r26	; 0x802786 <AccDTG+0x2>
    409c:	b0 93 87 27 	sts	0x2787, r27	; 0x802787 <AccDTG+0x3>
                    }
                            
                DistanceToGo2=labs(AxisPosition2-SetJog2);  
    40a0:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    40a4:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    40a8:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    40ac:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    40b0:	40 91 b4 27 	lds	r20, 0x27B4	; 0x8027b4 <SetJog2>
    40b4:	50 91 b5 27 	lds	r21, 0x27B5	; 0x8027b5 <SetJog2+0x1>
    40b8:	60 91 b6 27 	lds	r22, 0x27B6	; 0x8027b6 <SetJog2+0x2>
    40bc:	70 91 b7 27 	lds	r23, 0x27B7	; 0x8027b7 <SetJog2+0x3>
    40c0:	84 1b       	sub	r24, r20
    40c2:	95 0b       	sbc	r25, r21
    40c4:	a6 0b       	sbc	r26, r22
    40c6:	b7 0b       	sbc	r27, r23
    40c8:	ac 01       	movw	r20, r24
    40ca:	bd 01       	movw	r22, r26
    40cc:	3a f4       	brpl	.+14     	; 0x40dc <__stack+0xdd>
    40ce:	44 27       	eor	r20, r20
    40d0:	55 27       	eor	r21, r21
    40d2:	ba 01       	movw	r22, r20
    40d4:	48 1b       	sub	r20, r24
    40d6:	59 0b       	sbc	r21, r25
    40d8:	6a 0b       	sbc	r22, r26
    40da:	7b 0b       	sbc	r23, r27
    40dc:	40 93 8c 27 	sts	0x278C, r20	; 0x80278c <DistanceToGo2>
    40e0:	50 93 8d 27 	sts	0x278D, r21	; 0x80278d <DistanceToGo2+0x1>
    40e4:	60 93 8e 27 	sts	0x278E, r22	; 0x80278e <DistanceToGo2+0x2>
    40e8:	70 93 8f 27 	sts	0x278F, r23	; 0x80278f <DistanceToGo2+0x3>
                ACC=1;    
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
                sprintf(BufferSend,"!0602\r\n");
    40f2:	98 e0       	ldi	r25, 0x08	; 8
    40f4:	ee e0       	ldi	r30, 0x0E	; 14
    40f6:	f3 e2       	ldi	r31, 0x23	; 35
    40f8:	a7 e5       	ldi	r26, 0x57	; 87
    40fa:	b9 e2       	ldi	r27, 0x29	; 41
    40fc:	01 90       	ld	r0, Z+
    40fe:	0d 92       	st	X+, r0
    4100:	9a 95       	dec	r25
    4102:	e1 f7       	brne	.-8      	; 0x40fc <__stack+0xfd>
                Responsing=1;  
    4104:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady;
    4108:	e0 ea       	ldi	r30, 0xA0	; 160
    410a:	f6 e0       	ldi	r31, 0x06	; 6
    410c:	84 81       	ldd	r24, Z+4	; 0x04
    410e:	81 60       	ori	r24, 0x01	; 1
    4110:	84 83       	std	Z+4, r24	; 0x04
                break;
    4112:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
             } 
            case '3': //Axis 3
            {
            if(SetJog3<AxisPosition3) CLR_DIR3;
    4116:	40 91 b0 27 	lds	r20, 0x27B0	; 0x8027b0 <SetJog3>
    411a:	50 91 b1 27 	lds	r21, 0x27B1	; 0x8027b1 <SetJog3+0x1>
    411e:	60 91 b2 27 	lds	r22, 0x27B2	; 0x8027b2 <SetJog3+0x2>
    4122:	70 91 b3 27 	lds	r23, 0x27B3	; 0x8027b3 <SetJog3+0x3>
    4126:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    412a:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    412e:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    4132:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    4136:	48 17       	cp	r20, r24
    4138:	59 07       	cpc	r21, r25
    413a:	6a 07       	cpc	r22, r26
    413c:	7b 07       	cpc	r23, r27
    413e:	2c f4       	brge	.+10     	; 0x414a <__stack+0x14b>
    4140:	e0 e2       	ldi	r30, 0x20	; 32
    4142:	f7 e0       	ldi	r31, 0x07	; 7
    4144:	24 81       	ldd	r18, Z+4	; 0x04
    4146:	2e 7f       	andi	r18, 0xFE	; 254
    4148:	24 83       	std	Z+4, r18	; 0x04
            if(SetJog3>AxisPosition3) SET_DIR3;
    414a:	84 17       	cp	r24, r20
    414c:	95 07       	cpc	r25, r21
    414e:	a6 07       	cpc	r26, r22
    4150:	b7 07       	cpc	r27, r23
    4152:	2c f4       	brge	.+10     	; 0x415e <__stack+0x15f>
    4154:	e0 e2       	ldi	r30, 0x20	; 32
    4156:	f7 e0       	ldi	r31, 0x07	; 7
    4158:	24 81       	ldd	r18, Z+4	; 0x04
    415a:	21 60       	ori	r18, 0x01	; 1
    415c:	24 83       	std	Z+4, r18	; 0x04
                        
            MaxSpeed=SetSpeed3;
    415e:	c0 90 71 27 	lds	r12, 0x2771	; 0x802771 <SetSpeed3>
    4162:	d0 90 72 27 	lds	r13, 0x2772	; 0x802772 <SetSpeed3+0x1>
    4166:	e0 90 73 27 	lds	r14, 0x2773	; 0x802773 <SetSpeed3+0x2>
    416a:	f0 90 74 27 	lds	r15, 0x2774	; 0x802774 <SetSpeed3+0x3>
    416e:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    4172:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    4176:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    417a:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC3;
    417e:	80 90 61 27 	lds	r8, 0x2761	; 0x802761 <ACC3>
    4182:	90 90 62 27 	lds	r9, 0x2762	; 0x802762 <ACC3+0x1>
    4186:	a0 90 63 27 	lds	r10, 0x2763	; 0x802763 <ACC3+0x2>
    418a:	b0 90 64 27 	lds	r11, 0x2764	; 0x802764 <ACC3+0x3>
    418e:	89 82       	std	Y+1, r8	; 0x01
    4190:	9a 82       	std	Y+2, r9	; 0x02
    4192:	ab 82       	std	Y+3, r10	; 0x03
    4194:	bc 82       	std	Y+4, r11	; 0x04
    4196:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    419a:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    419e:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    41a2:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
            IDEC=DEC3;
    41a6:	80 90 55 27 	lds	r8, 0x2755	; 0x802755 <DEC3>
    41aa:	90 90 56 27 	lds	r9, 0x2756	; 0x802756 <DEC3+0x1>
    41ae:	a0 90 57 27 	lds	r10, 0x2757	; 0x802757 <DEC3+0x2>
    41b2:	b0 90 58 27 	lds	r11, 0x2758	; 0x802758 <DEC3+0x3>
    41b6:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    41ba:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    41be:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    41c2:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
            MaxDistanceToGo = labs(AxisPosition3-SetJog3);  
    41c6:	84 1b       	sub	r24, r20
    41c8:	95 0b       	sbc	r25, r21
    41ca:	a6 0b       	sbc	r26, r22
    41cc:	b7 0b       	sbc	r27, r23
    41ce:	2c 01       	movw	r4, r24
    41d0:	3d 01       	movw	r6, r26
    41d2:	3a f4       	brpl	.+14     	; 0x41e2 <__stack+0x1e3>
    41d4:	44 24       	eor	r4, r4
    41d6:	55 24       	eor	r5, r5
    41d8:	32 01       	movw	r6, r4
    41da:	48 1a       	sub	r4, r24
    41dc:	59 0a       	sbc	r5, r25
    41de:	6a 0a       	sbc	r6, r26
    41e0:	7b 0a       	sbc	r7, r27
    41e2:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    41e6:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    41ea:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    41ee:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
                         
            Ma3=1000;           
    41f2:	88 ee       	ldi	r24, 0xE8	; 232
    41f4:	93 e0       	ldi	r25, 0x03	; 3
    41f6:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    41fa:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
            CurSpeedFrq=0;
    41fe:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    4202:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    4206:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    420a:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;                                                   
    420e:	8f ef       	ldi	r24, 0xFF	; 255
    4210:	9f ef       	ldi	r25, 0xFF	; 255
    4212:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4216:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    421a:	c7 01       	movw	r24, r14
    421c:	b6 01       	movw	r22, r12
    421e:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	48 ec       	ldi	r20, 0xC8	; 200
    4228:	52 e4       	ldi	r21, 0x42	; 66
    422a:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    422e:	6d 83       	std	Y+5, r22	; 0x05
    4230:	7e 83       	std	Y+6, r23	; 0x06
    4232:	8f 83       	std	Y+7, r24	; 0x07
    4234:	98 87       	std	Y+8, r25	; 0x08
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    4236:	69 81       	ldd	r22, Y+1	; 0x01
    4238:	7a 81       	ldd	r23, Y+2	; 0x02
    423a:	8b 81       	ldd	r24, Y+3	; 0x03
    423c:	9c 81       	ldd	r25, Y+4	; 0x04
    423e:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    4242:	9b 01       	movw	r18, r22
    4244:	ac 01       	movw	r20, r24
    4246:	6d 81       	ldd	r22, Y+5	; 0x05
    4248:	7e 81       	ldd	r23, Y+6	; 0x06
    424a:	8f 81       	ldd	r24, Y+7	; 0x07
    424c:	98 85       	ldd	r25, Y+8	; 0x08
    424e:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    4252:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    4256:	9b 01       	movw	r18, r22
    4258:	ac 01       	movw	r20, r24
    425a:	c7 01       	movw	r24, r14
    425c:	b6 01       	movw	r22, r12
    425e:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    4262:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    4266:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    426a:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    426e:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                                                       
    4272:	c5 01       	movw	r24, r10
    4274:	b4 01       	movw	r22, r8
    4276:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    427a:	9b 01       	movw	r18, r22
    427c:	ac 01       	movw	r20, r24
    427e:	6d 81       	ldd	r22, Y+5	; 0x05
    4280:	7e 81       	ldd	r23, Y+6	; 0x06
    4282:	8f 81       	ldd	r24, Y+7	; 0x07
    4284:	98 85       	ldd	r25, Y+8	; 0x08
    4286:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    428a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    428e:	9b 01       	movw	r18, r22
    4290:	ac 01       	movw	r20, r24
    4292:	c7 01       	movw	r24, r14
    4294:	b6 01       	movw	r22, r12
    4296:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    429a:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    429e:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    42a2:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    42a6:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    42aa:	a7 01       	movw	r20, r14
    42ac:	96 01       	movw	r18, r12
    42ae:	c7 01       	movw	r24, r14
    42b0:	b6 01       	movw	r22, r12
    42b2:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <__mulsi3>
    42b6:	6d 83       	std	Y+5, r22	; 0x05
    42b8:	7e 83       	std	Y+6, r23	; 0x06
    42ba:	8f 83       	std	Y+7, r24	; 0x07
    42bc:	98 87       	std	Y+8, r25	; 0x08
    42be:	a5 01       	movw	r20, r10
    42c0:	94 01       	movw	r18, r8
    42c2:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    42c6:	69 01       	movw	r12, r18
    42c8:	7a 01       	movw	r14, r20
    42ca:	20 93 80 27 	sts	0x2780, r18	; 0x802780 <DecDTG>
    42ce:	30 93 81 27 	sts	0x2781, r19	; 0x802781 <DecDTG+0x1>
    42d2:	40 93 82 27 	sts	0x2782, r20	; 0x802782 <DecDTG+0x2>
    42d6:	50 93 83 27 	sts	0x2783, r21	; 0x802783 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    42da:	6d 81       	ldd	r22, Y+5	; 0x05
    42dc:	7e 81       	ldd	r23, Y+6	; 0x06
    42de:	8f 81       	ldd	r24, Y+7	; 0x07
    42e0:	98 85       	ldd	r25, Y+8	; 0x08
    42e2:	29 81       	ldd	r18, Y+1	; 0x01
    42e4:	3a 81       	ldd	r19, Y+2	; 0x02
    42e6:	4b 81       	ldd	r20, Y+3	; 0x03
    42e8:	5c 81       	ldd	r21, Y+4	; 0x04
    42ea:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    42ee:	46 01       	movw	r8, r12
    42f0:	57 01       	movw	r10, r14
    42f2:	82 0e       	add	r8, r18
    42f4:	93 1e       	adc	r9, r19
    42f6:	a4 1e       	adc	r10, r20
    42f8:	b5 1e       	adc	r11, r21
    42fa:	80 92 49 27 	sts	0x2749, r8	; 0x802749 <SumAccDecDTG>
    42fe:	90 92 4a 27 	sts	0x274A, r9	; 0x80274a <SumAccDecDTG+0x1>
    4302:	a0 92 4b 27 	sts	0x274B, r10	; 0x80274b <SumAccDecDTG+0x2>
    4306:	b0 92 4c 27 	sts	0x274C, r11	; 0x80274c <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    430a:	84 14       	cp	r8, r4
    430c:	95 04       	cpc	r9, r5
    430e:	a6 04       	cpc	r10, r6
    4310:	b7 04       	cpc	r11, r7
    4312:	cc f1       	brlt	.+114    	; 0x4386 <__stack+0x387>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    4314:	c3 01       	movw	r24, r6
    4316:	b2 01       	movw	r22, r4
    4318:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    431c:	69 83       	std	Y+1, r22	; 0x01
    431e:	7a 83       	std	Y+2, r23	; 0x02
    4320:	8b 83       	std	Y+3, r24	; 0x03
    4322:	9c 83       	std	Y+4, r25	; 0x04
    4324:	c5 01       	movw	r24, r10
    4326:	b4 01       	movw	r22, r8
    4328:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    432c:	9b 01       	movw	r18, r22
    432e:	ac 01       	movw	r20, r24
    4330:	69 81       	ldd	r22, Y+1	; 0x01
    4332:	7a 81       	ldd	r23, Y+2	; 0x02
    4334:	8b 81       	ldd	r24, Y+3	; 0x03
    4336:	9c 81       	ldd	r25, Y+4	; 0x04
    4338:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    433c:	4b 01       	movw	r8, r22
    433e:	5c 01       	movw	r10, r24
    4340:	c7 01       	movw	r24, r14
    4342:	b6 01       	movw	r22, r12
    4344:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    4348:	9b 01       	movw	r18, r22
    434a:	ac 01       	movw	r20, r24
    434c:	c5 01       	movw	r24, r10
    434e:	b4 01       	movw	r22, r8
    4350:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    4354:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    4358:	60 93 80 27 	sts	0x2780, r22	; 0x802780 <DecDTG>
    435c:	70 93 81 27 	sts	0x2781, r23	; 0x802781 <DecDTG+0x1>
    4360:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <DecDTG+0x2>
    4364:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    4368:	63 01       	movw	r12, r6
    436a:	52 01       	movw	r10, r4
    436c:	a6 1a       	sub	r10, r22
    436e:	b7 0a       	sbc	r11, r23
    4370:	c8 0a       	sbc	r12, r24
    4372:	d9 0a       	sbc	r13, r25
    4374:	a0 92 84 27 	sts	0x2784, r10	; 0x802784 <AccDTG>
    4378:	b0 92 85 27 	sts	0x2785, r11	; 0x802785 <AccDTG+0x1>
    437c:	c0 92 86 27 	sts	0x2786, r12	; 0x802786 <AccDTG+0x2>
    4380:	d0 92 87 27 	sts	0x2787, r13	; 0x802787 <AccDTG+0x3>
    4384:	0e c0       	rjmp	.+28     	; 0x43a2 <__stack+0x3a3>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    4386:	d3 01       	movw	r26, r6
    4388:	c2 01       	movw	r24, r4
    438a:	82 1b       	sub	r24, r18
    438c:	93 0b       	sbc	r25, r19
    438e:	a4 0b       	sbc	r26, r20
    4390:	b5 0b       	sbc	r27, r21
    4392:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <AccDTG>
    4396:	90 93 85 27 	sts	0x2785, r25	; 0x802785 <AccDTG+0x1>
    439a:	a0 93 86 27 	sts	0x2786, r26	; 0x802786 <AccDTG+0x2>
    439e:	b0 93 87 27 	sts	0x2787, r27	; 0x802787 <AccDTG+0x3>
                    }
                            
                DistanceToGo3=labs(AxisPosition3-SetJog3);  
    43a2:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    43a6:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    43aa:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    43ae:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    43b2:	40 91 b0 27 	lds	r20, 0x27B0	; 0x8027b0 <SetJog3>
    43b6:	50 91 b1 27 	lds	r21, 0x27B1	; 0x8027b1 <SetJog3+0x1>
    43ba:	60 91 b2 27 	lds	r22, 0x27B2	; 0x8027b2 <SetJog3+0x2>
    43be:	70 91 b3 27 	lds	r23, 0x27B3	; 0x8027b3 <SetJog3+0x3>
    43c2:	84 1b       	sub	r24, r20
    43c4:	95 0b       	sbc	r25, r21
    43c6:	a6 0b       	sbc	r26, r22
    43c8:	b7 0b       	sbc	r27, r23
    43ca:	ac 01       	movw	r20, r24
    43cc:	bd 01       	movw	r22, r26
    43ce:	3a f4       	brpl	.+14     	; 0x43de <__stack+0x3df>
    43d0:	44 27       	eor	r20, r20
    43d2:	55 27       	eor	r21, r21
    43d4:	ba 01       	movw	r22, r20
    43d6:	48 1b       	sub	r20, r24
    43d8:	59 0b       	sbc	r21, r25
    43da:	6a 0b       	sbc	r22, r26
    43dc:	7b 0b       	sbc	r23, r27
    43de:	40 93 88 27 	sts	0x2788, r20	; 0x802788 <DistanceToGo3>
    43e2:	50 93 89 27 	sts	0x2789, r21	; 0x802789 <DistanceToGo3+0x1>
    43e6:	60 93 8a 27 	sts	0x278A, r22	; 0x80278a <DistanceToGo3+0x2>
    43ea:	70 93 8b 27 	sts	0x278B, r23	; 0x80278b <DistanceToGo3+0x3>
                ACC=1;    
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
                sprintf(BufferSend,"!0603\r\n");
    43f4:	98 e0       	ldi	r25, 0x08	; 8
    43f6:	e6 e1       	ldi	r30, 0x16	; 22
    43f8:	f3 e2       	ldi	r31, 0x23	; 35
    43fa:	a7 e5       	ldi	r26, 0x57	; 87
    43fc:	b9 e2       	ldi	r27, 0x29	; 41
    43fe:	01 90       	ld	r0, Z+
    4400:	0d 92       	st	X+, r0
    4402:	9a 95       	dec	r25
    4404:	e1 f7       	brne	.-8      	; 0x43fe <__stack+0x3ff>
            Responsing=1;  
    4406:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    440a:	e0 ea       	ldi	r30, 0xA0	; 160
    440c:	f6 e0       	ldi	r31, 0x06	; 6
    440e:	84 81       	ldd	r24, Z+4	; 0x04
    4410:	81 60       	ori	r24, 0x01	; 1
    4412:	84 83       	std	Z+4, r24	; 0x04
            break;
    4414:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }                
           }
      }
      else if(cmdTemp[3]=='1')//Axis Selected
    4418:	81 33       	cpi	r24, 0x31	; 49
    441a:	09 f0       	breq	.+2      	; 0x441e <__stack+0x41f>
    441c:	4b c0       	rjmp	.+150    	; 0x44b4 <__stack+0x4b5>
      {
       switch(cmdTemp[4])
    441e:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4422:	82 33       	cpi	r24, 0x32	; 50
    4424:	d9 f0       	breq	.+54     	; 0x445c <__stack+0x45d>
    4426:	83 33       	cpi	r24, 0x33	; 51
    4428:	79 f1       	breq	.+94     	; 0x4488 <__stack+0x489>
    442a:	81 33       	cpi	r24, 0x31	; 49
    442c:	11 f0       	breq	.+4      	; 0x4432 <__stack+0x433>
    442e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         case '1': //Axis 1
         {
            SelectedAxis=1;
    4432:	81 e0       	ldi	r24, 0x01	; 1
    4434:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0611\r\n"); 
    4438:	98 e0       	ldi	r25, 0x08	; 8
    443a:	ee e1       	ldi	r30, 0x1E	; 30
    443c:	f3 e2       	ldi	r31, 0x23	; 35
    443e:	a7 e5       	ldi	r26, 0x57	; 87
    4440:	b9 e2       	ldi	r27, 0x29	; 41
    4442:	01 90       	ld	r0, Z+
    4444:	0d 92       	st	X+, r0
    4446:	9a 95       	dec	r25
    4448:	e1 f7       	brne	.-8      	; 0x4442 <__stack+0x443>
            Responsing=1; 
    444a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    444e:	e0 ea       	ldi	r30, 0xA0	; 160
    4450:	f6 e0       	ldi	r31, 0x06	; 6
    4452:	84 81       	ldd	r24, Z+4	; 0x04
    4454:	81 60       	ori	r24, 0x01	; 1
    4456:	84 83       	std	Z+4, r24	; 0x04
            break;
    4458:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         }
         case '2': //Axis 2
         {
            SelectedAxis=2;
    445c:	82 e0       	ldi	r24, 0x02	; 2
    445e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0612\r\n"); 
    4462:	88 e0       	ldi	r24, 0x08	; 8
    4464:	e6 e2       	ldi	r30, 0x26	; 38
    4466:	f3 e2       	ldi	r31, 0x23	; 35
    4468:	a7 e5       	ldi	r26, 0x57	; 87
    446a:	b9 e2       	ldi	r27, 0x29	; 41
    446c:	01 90       	ld	r0, Z+
    446e:	0d 92       	st	X+, r0
    4470:	8a 95       	dec	r24
    4472:	e1 f7       	brne	.-8      	; 0x446c <__stack+0x46d>
            Responsing=1; 
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    447a:	e0 ea       	ldi	r30, 0xA0	; 160
    447c:	f6 e0       	ldi	r31, 0x06	; 6
    447e:	84 81       	ldd	r24, Z+4	; 0x04
    4480:	81 60       	ori	r24, 0x01	; 1
    4482:	84 83       	std	Z+4, r24	; 0x04
            break;
    4484:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         } 
        case '3': //Axis 3
        {        
            SelectedAxis=3;
    4488:	83 e0       	ldi	r24, 0x03	; 3
    448a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0613\r\n"); 
    448e:	88 e0       	ldi	r24, 0x08	; 8
    4490:	ee e2       	ldi	r30, 0x2E	; 46
    4492:	f3 e2       	ldi	r31, 0x23	; 35
    4494:	a7 e5       	ldi	r26, 0x57	; 87
    4496:	b9 e2       	ldi	r27, 0x29	; 41
    4498:	01 90       	ld	r0, Z+
    449a:	0d 92       	st	X+, r0
    449c:	8a 95       	dec	r24
    449e:	e1 f7       	brne	.-8      	; 0x4498 <__stack+0x499>
            Responsing=1; 
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    44a6:	e0 ea       	ldi	r30, 0xA0	; 160
    44a8:	f6 e0       	ldi	r31, 0x06	; 6
    44aa:	84 81       	ldd	r24, Z+4	; 0x04
    44ac:	81 60       	ori	r24, 0x01	; 1
    44ae:	84 83       	std	Z+4, r24	; 0x04
            break;
    44b0:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
        }     
      }
     }
      else if(cmdTemp[3]=='2')//Free Jog   to Positive
    44b4:	82 33       	cpi	r24, 0x32	; 50
    44b6:	09 f0       	breq	.+2      	; 0x44ba <__stack+0x4bb>
    44b8:	ee c1       	rjmp	.+988    	; 0x4896 <__stack+0x897>
      {
       switch(cmdTemp[4])
    44ba:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    44be:	82 33       	cpi	r24, 0x32	; 50
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <__stack+0x4c5>
    44c2:	a7 c0       	rjmp	.+334    	; 0x4612 <__stack+0x613>
    44c4:	83 33       	cpi	r24, 0x33	; 51
    44c6:	09 f4       	brne	.+2      	; 0x44ca <__stack+0x4cb>
    44c8:	45 c1       	rjmp	.+650    	; 0x4754 <__stack+0x755>
    44ca:	81 33       	cpi	r24, 0x31	; 49
    44cc:	11 f0       	breq	.+4      	; 0x44d2 <__stack+0x4d3>
    44ce:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         case '1': //Axis 1
         {
            SET_DIR1;                        
    44d2:	e0 e2       	ldi	r30, 0x20	; 32
    44d4:	f7 e0       	ldi	r31, 0x07	; 7
    44d6:	84 81       	ldd	r24, Z+4	; 0x04
    44d8:	80 61       	ori	r24, 0x10	; 16
    44da:	84 83       	std	Z+4, r24	; 0x04
            MaxSpeed=SetSpeed1; 
    44dc:	c0 90 79 27 	lds	r12, 0x2779	; 0x802779 <SetSpeed1>
    44e0:	d0 90 7a 27 	lds	r13, 0x277A	; 0x80277a <SetSpeed1+0x1>
    44e4:	e0 90 7b 27 	lds	r14, 0x277B	; 0x80277b <SetSpeed1+0x2>
    44e8:	f0 90 7c 27 	lds	r15, 0x277C	; 0x80277c <SetSpeed1+0x3>
    44ec:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    44f0:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    44f4:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    44f8:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC1; 
    44fc:	80 90 69 27 	lds	r8, 0x2769	; 0x802769 <ACC1>
    4500:	90 90 6a 27 	lds	r9, 0x276A	; 0x80276a <ACC1+0x1>
    4504:	a0 90 6b 27 	lds	r10, 0x276B	; 0x80276b <ACC1+0x2>
    4508:	b0 90 6c 27 	lds	r11, 0x276C	; 0x80276c <ACC1+0x3>
    450c:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    4510:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    4514:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    4518:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
            IDEC=DEC1;         
    451c:	40 90 5d 27 	lds	r4, 0x275D	; 0x80275d <DEC1>
    4520:	50 90 5e 27 	lds	r5, 0x275E	; 0x80275e <DEC1+0x1>
    4524:	60 90 5f 27 	lds	r6, 0x275F	; 0x80275f <DEC1+0x2>
    4528:	70 90 60 27 	lds	r7, 0x2760	; 0x802760 <DEC1+0x3>
    452c:	40 92 4d 27 	sts	0x274D, r4	; 0x80274d <IDEC>
    4530:	50 92 4e 27 	sts	0x274E, r5	; 0x80274e <IDEC+0x1>
    4534:	60 92 4f 27 	sts	0x274F, r6	; 0x80274f <IDEC+0x2>
    4538:	70 92 50 27 	sts	0x2750, r7	; 0x802750 <IDEC+0x3>
            CurSpeedFrq=0;
    453c:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    4540:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    4544:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    4548:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;                                                   
    454c:	8f ef       	ldi	r24, 0xFF	; 255
    454e:	9f ef       	ldi	r25, 0xFF	; 255
    4550:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4554:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    4558:	c7 01       	movw	r24, r14
    455a:	b6 01       	movw	r22, r12
    455c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    4560:	20 e0       	ldi	r18, 0x00	; 0
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	48 ec       	ldi	r20, 0xC8	; 200
    4566:	52 e4       	ldi	r21, 0x42	; 66
    4568:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    456c:	69 83       	std	Y+1, r22	; 0x01
    456e:	7a 83       	std	Y+2, r23	; 0x02
    4570:	8b 83       	std	Y+3, r24	; 0x03
    4572:	9c 83       	std	Y+4, r25	; 0x04
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    4574:	c5 01       	movw	r24, r10
    4576:	b4 01       	movw	r22, r8
    4578:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    457c:	9b 01       	movw	r18, r22
    457e:	ac 01       	movw	r20, r24
    4580:	69 81       	ldd	r22, Y+1	; 0x01
    4582:	7a 81       	ldd	r23, Y+2	; 0x02
    4584:	8b 81       	ldd	r24, Y+3	; 0x03
    4586:	9c 81       	ldd	r25, Y+4	; 0x04
    4588:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    458c:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    4590:	9b 01       	movw	r18, r22
    4592:	ac 01       	movw	r20, r24
    4594:	c7 01       	movw	r24, r14
    4596:	b6 01       	movw	r22, r12
    4598:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    459c:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    45a0:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    45a4:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    45a8:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                  
    45ac:	c3 01       	movw	r24, r6
    45ae:	b2 01       	movw	r22, r4
    45b0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    45b4:	9b 01       	movw	r18, r22
    45b6:	ac 01       	movw	r20, r24
    45b8:	69 81       	ldd	r22, Y+1	; 0x01
    45ba:	7a 81       	ldd	r23, Y+2	; 0x02
    45bc:	8b 81       	ldd	r24, Y+3	; 0x03
    45be:	9c 81       	ldd	r25, Y+4	; 0x04
    45c0:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    45c4:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    45c8:	9b 01       	movw	r18, r22
    45ca:	ac 01       	movw	r20, r24
    45cc:	c7 01       	movw	r24, r14
    45ce:	b6 01       	movw	r22, r12
    45d0:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    45d4:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    45d8:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    45dc:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    45e0:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
            FreeJog=1; 
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
            ACC=1;    
    45ea:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
            sprintf(BufferSend,"!0601\r\n"); 
    45ee:	98 e0       	ldi	r25, 0x08	; 8
    45f0:	e6 e0       	ldi	r30, 0x06	; 6
    45f2:	f3 e2       	ldi	r31, 0x23	; 35
    45f4:	a7 e5       	ldi	r26, 0x57	; 87
    45f6:	b9 e2       	ldi	r27, 0x29	; 41
    45f8:	01 90       	ld	r0, Z+
    45fa:	0d 92       	st	X+, r0
    45fc:	9a 95       	dec	r25
    45fe:	e1 f7       	brne	.-8      	; 0x45f8 <__stack+0x5f9>
            Responsing=1; 
    4600:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady; 
    4604:	e0 ea       	ldi	r30, 0xA0	; 160
    4606:	f6 e0       	ldi	r31, 0x06	; 6
    4608:	84 81       	ldd	r24, Z+4	; 0x04
    460a:	81 60       	ori	r24, 0x01	; 1
    460c:	84 83       	std	Z+4, r24	; 0x04
            break;
    460e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         }
         case '2': //Axis 2
         {
            SET_DIR2;            
    4612:	e0 e2       	ldi	r30, 0x20	; 32
    4614:	f7 e0       	ldi	r31, 0x07	; 7
    4616:	84 81       	ldd	r24, Z+4	; 0x04
    4618:	84 60       	ori	r24, 0x04	; 4
    461a:	84 83       	std	Z+4, r24	; 0x04
            MaxSpeed=SetSpeed2;
    461c:	c0 90 75 27 	lds	r12, 0x2775	; 0x802775 <SetSpeed2>
    4620:	d0 90 76 27 	lds	r13, 0x2776	; 0x802776 <SetSpeed2+0x1>
    4624:	e0 90 77 27 	lds	r14, 0x2777	; 0x802777 <SetSpeed2+0x2>
    4628:	f0 90 78 27 	lds	r15, 0x2778	; 0x802778 <SetSpeed2+0x3>
    462c:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    4630:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    4634:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    4638:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC2;
    463c:	40 90 65 27 	lds	r4, 0x2765	; 0x802765 <ACC2>
    4640:	50 90 66 27 	lds	r5, 0x2766	; 0x802766 <ACC2+0x1>
    4644:	60 90 67 27 	lds	r6, 0x2767	; 0x802767 <ACC2+0x2>
    4648:	70 90 68 27 	lds	r7, 0x2768	; 0x802768 <ACC2+0x3>
    464c:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    4650:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    4654:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    4658:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
            IDEC=DEC2;                     
    465c:	80 90 59 27 	lds	r8, 0x2759	; 0x802759 <DEC2>
    4660:	90 90 5a 27 	lds	r9, 0x275A	; 0x80275a <DEC2+0x1>
    4664:	a0 90 5b 27 	lds	r10, 0x275B	; 0x80275b <DEC2+0x2>
    4668:	b0 90 5c 27 	lds	r11, 0x275C	; 0x80275c <DEC2+0x3>
    466c:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    4670:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    4674:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    4678:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
            CurSpeedFrq=0;
    467c:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    4680:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    4684:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    4688:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;  
    468c:	8f ef       	ldi	r24, 0xFF	; 255
    468e:	9f ef       	ldi	r25, 0xFF	; 255
    4690:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4694:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                           
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    4698:	c7 01       	movw	r24, r14
    469a:	b6 01       	movw	r22, r12
    469c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    46a0:	20 e0       	ldi	r18, 0x00	; 0
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	48 ec       	ldi	r20, 0xC8	; 200
    46a6:	52 e4       	ldi	r21, 0x42	; 66
    46a8:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    46ac:	69 83       	std	Y+1, r22	; 0x01
    46ae:	7a 83       	std	Y+2, r23	; 0x02
    46b0:	8b 83       	std	Y+3, r24	; 0x03
    46b2:	9c 83       	std	Y+4, r25	; 0x04
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    46b4:	c3 01       	movw	r24, r6
    46b6:	b2 01       	movw	r22, r4
    46b8:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    46bc:	9b 01       	movw	r18, r22
    46be:	ac 01       	movw	r20, r24
    46c0:	69 81       	ldd	r22, Y+1	; 0x01
    46c2:	7a 81       	ldd	r23, Y+2	; 0x02
    46c4:	8b 81       	ldd	r24, Y+3	; 0x03
    46c6:	9c 81       	ldd	r25, Y+4	; 0x04
    46c8:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    46cc:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    46d0:	9b 01       	movw	r18, r22
    46d2:	ac 01       	movw	r20, r24
    46d4:	c7 01       	movw	r24, r14
    46d6:	b6 01       	movw	r22, r12
    46d8:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    46dc:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    46e0:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    46e4:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    46e8:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                                   
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                       
    46ec:	c5 01       	movw	r24, r10
    46ee:	b4 01       	movw	r22, r8
    46f0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    46f4:	9b 01       	movw	r18, r22
    46f6:	ac 01       	movw	r20, r24
    46f8:	69 81       	ldd	r22, Y+1	; 0x01
    46fa:	7a 81       	ldd	r23, Y+2	; 0x02
    46fc:	8b 81       	ldd	r24, Y+3	; 0x03
    46fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4700:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    4704:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    4708:	9b 01       	movw	r18, r22
    470a:	ac 01       	movw	r20, r24
    470c:	c7 01       	movw	r24, r14
    470e:	b6 01       	movw	r22, r12
    4710:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    4714:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    4718:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    471c:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    4720:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
            FreeJog=2;   
    4724:	82 e0       	ldi	r24, 0x02	; 2
    4726:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
            ACC=1;    
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
            sprintf(BufferSend,"!0602\r\n");
    4730:	98 e0       	ldi	r25, 0x08	; 8
    4732:	ee e0       	ldi	r30, 0x0E	; 14
    4734:	f3 e2       	ldi	r31, 0x23	; 35
    4736:	a7 e5       	ldi	r26, 0x57	; 87
    4738:	b9 e2       	ldi	r27, 0x29	; 41
    473a:	01 90       	ld	r0, Z+
    473c:	0d 92       	st	X+, r0
    473e:	9a 95       	dec	r25
    4740:	e1 f7       	brne	.-8      	; 0x473a <__stack+0x73b>
            Responsing=1;  
    4742:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    4746:	e0 ea       	ldi	r30, 0xA0	; 160
    4748:	f6 e0       	ldi	r31, 0x06	; 6
    474a:	84 81       	ldd	r24, Z+4	; 0x04
    474c:	81 60       	ori	r24, 0x01	; 1
    474e:	84 83       	std	Z+4, r24	; 0x04
            break;
    4750:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         } 
        case '3': //Axis 3
        {        
          SET_DIR3;                
    4754:	e0 e2       	ldi	r30, 0x20	; 32
    4756:	f7 e0       	ldi	r31, 0x07	; 7
    4758:	84 81       	ldd	r24, Z+4	; 0x04
    475a:	81 60       	ori	r24, 0x01	; 1
    475c:	84 83       	std	Z+4, r24	; 0x04
          MaxSpeed=SetSpeed3;
    475e:	c0 90 71 27 	lds	r12, 0x2771	; 0x802771 <SetSpeed3>
    4762:	d0 90 72 27 	lds	r13, 0x2772	; 0x802772 <SetSpeed3+0x1>
    4766:	e0 90 73 27 	lds	r14, 0x2773	; 0x802773 <SetSpeed3+0x2>
    476a:	f0 90 74 27 	lds	r15, 0x2774	; 0x802774 <SetSpeed3+0x3>
    476e:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    4772:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    4776:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    477a:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
          IACC=ACC3;
    477e:	40 90 61 27 	lds	r4, 0x2761	; 0x802761 <ACC3>
    4782:	50 90 62 27 	lds	r5, 0x2762	; 0x802762 <ACC3+0x1>
    4786:	60 90 63 27 	lds	r6, 0x2763	; 0x802763 <ACC3+0x2>
    478a:	70 90 64 27 	lds	r7, 0x2764	; 0x802764 <ACC3+0x3>
    478e:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    4792:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    4796:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    479a:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
          IDEC=DEC3;          
    479e:	80 90 55 27 	lds	r8, 0x2755	; 0x802755 <DEC3>
    47a2:	90 90 56 27 	lds	r9, 0x2756	; 0x802756 <DEC3+0x1>
    47a6:	a0 90 57 27 	lds	r10, 0x2757	; 0x802757 <DEC3+0x2>
    47aa:	b0 90 58 27 	lds	r11, 0x2758	; 0x802758 <DEC3+0x3>
    47ae:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    47b2:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    47b6:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    47ba:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
          CurSpeedFrq=0;
    47be:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    47c2:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    47c6:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    47ca:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
          TCC0.CCA=0xFFFF;                                                   
    47ce:	8f ef       	ldi	r24, 0xFF	; 255
    47d0:	9f ef       	ldi	r25, 0xFF	; 255
    47d2:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    47d6:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
          ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    47da:	c7 01       	movw	r24, r14
    47dc:	b6 01       	movw	r22, r12
    47de:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	48 ec       	ldi	r20, 0xC8	; 200
    47e8:	52 e4       	ldi	r21, 0x42	; 66
    47ea:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    47ee:	69 83       	std	Y+1, r22	; 0x01
    47f0:	7a 83       	std	Y+2, r23	; 0x02
    47f2:	8b 83       	std	Y+3, r24	; 0x03
    47f4:	9c 83       	std	Y+4, r25	; 0x04
          ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    47f6:	c3 01       	movw	r24, r6
    47f8:	b2 01       	movw	r22, r4
    47fa:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    47fe:	9b 01       	movw	r18, r22
    4800:	ac 01       	movw	r20, r24
    4802:	69 81       	ldd	r22, Y+1	; 0x01
    4804:	7a 81       	ldd	r23, Y+2	; 0x02
    4806:	8b 81       	ldd	r24, Y+3	; 0x03
    4808:	9c 81       	ldd	r25, Y+4	; 0x04
    480a:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    480e:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    4812:	9b 01       	movw	r18, r22
    4814:	ac 01       	movw	r20, r24
    4816:	c7 01       	movw	r24, r14
    4818:	b6 01       	movw	r22, r12
    481a:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    481e:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    4822:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    4826:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    482a:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
          DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
          DECSpeedINT= MaxSpeed / DECSpeedINT;                 
    482e:	c5 01       	movw	r24, r10
    4830:	b4 01       	movw	r22, r8
    4832:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    4836:	9b 01       	movw	r18, r22
    4838:	ac 01       	movw	r20, r24
    483a:	69 81       	ldd	r22, Y+1	; 0x01
    483c:	7a 81       	ldd	r23, Y+2	; 0x02
    483e:	8b 81       	ldd	r24, Y+3	; 0x03
    4840:	9c 81       	ldd	r25, Y+4	; 0x04
    4842:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    4846:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    484a:	9b 01       	movw	r18, r22
    484c:	ac 01       	movw	r20, r24
    484e:	c7 01       	movw	r24, r14
    4850:	b6 01       	movw	r22, r12
    4852:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    4856:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    485a:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    485e:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    4862:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
          FreeJog=3;    
    4866:	83 e0       	ldi	r24, 0x03	; 3
    4868:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
          ACC=1;    
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
          sprintf(BufferSend,"!0603\r\n");
    4872:	98 e0       	ldi	r25, 0x08	; 8
    4874:	e6 e1       	ldi	r30, 0x16	; 22
    4876:	f3 e2       	ldi	r31, 0x23	; 35
    4878:	a7 e5       	ldi	r26, 0x57	; 87
    487a:	b9 e2       	ldi	r27, 0x29	; 41
    487c:	01 90       	ld	r0, Z+
    487e:	0d 92       	st	X+, r0
    4880:	9a 95       	dec	r25
    4882:	e1 f7       	brne	.-8      	; 0x487c <__stack+0x87d>
          Responsing=1;  
    4884:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
          SetDataReady;
    4888:	e0 ea       	ldi	r30, 0xA0	; 160
    488a:	f6 e0       	ldi	r31, 0x06	; 6
    488c:	84 81       	ldd	r24, Z+4	; 0x04
    488e:	81 60       	ori	r24, 0x01	; 1
    4890:	84 83       	std	Z+4, r24	; 0x04
          break;
    4892:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
        }     
      }
     }
      else if(cmdTemp[3]=='3')//Free Jog   STOP
    4896:	83 33       	cpi	r24, 0x33	; 51
    4898:	11 f0       	breq	.+4      	; 0x489e <__stack+0x89f>
    489a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
       switch(cmdTemp[4])
    489e:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    48a2:	82 33       	cpi	r24, 0x32	; 50
    48a4:	d9 f0       	breq	.+54     	; 0x48dc <__stack+0x8dd>
    48a6:	83 33       	cpi	r24, 0x33	; 51
    48a8:	71 f1       	breq	.+92     	; 0x4906 <__stack+0x907>
    48aa:	81 33       	cpi	r24, 0x31	; 49
    48ac:	11 f0       	breq	.+4      	; 0x48b2 <__stack+0x8b3>
    48ae:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         case '1': //Axis 1
         {
            DEC=1;
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
            sprintf(BufferSend,"!0631\r\n"); 
    48b8:	98 e0       	ldi	r25, 0x08	; 8
    48ba:	e6 e3       	ldi	r30, 0x36	; 54
    48bc:	f3 e2       	ldi	r31, 0x23	; 35
    48be:	a7 e5       	ldi	r26, 0x57	; 87
    48c0:	b9 e2       	ldi	r27, 0x29	; 41
    48c2:	01 90       	ld	r0, Z+
    48c4:	0d 92       	st	X+, r0
    48c6:	9a 95       	dec	r25
    48c8:	e1 f7       	brne	.-8      	; 0x48c2 <__stack+0x8c3>
            Responsing=1; 
    48ca:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady; 
    48ce:	e0 ea       	ldi	r30, 0xA0	; 160
    48d0:	f6 e0       	ldi	r31, 0x06	; 6
    48d2:	84 81       	ldd	r24, Z+4	; 0x04
    48d4:	81 60       	ori	r24, 0x01	; 1
    48d6:	84 83       	std	Z+4, r24	; 0x04
            break;
    48d8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         }
         case '2': //Axis 2
         {
            DEC=1;   
    48dc:	81 e0       	ldi	r24, 0x01	; 1
    48de:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
            sprintf(BufferSend,"!0632\r\n");
    48e2:	98 e0       	ldi	r25, 0x08	; 8
    48e4:	ee e3       	ldi	r30, 0x3E	; 62
    48e6:	f3 e2       	ldi	r31, 0x23	; 35
    48e8:	a7 e5       	ldi	r26, 0x57	; 87
    48ea:	b9 e2       	ldi	r27, 0x29	; 41
    48ec:	01 90       	ld	r0, Z+
    48ee:	0d 92       	st	X+, r0
    48f0:	9a 95       	dec	r25
    48f2:	e1 f7       	brne	.-8      	; 0x48ec <__stack+0x8ed>
            Responsing=1;  
    48f4:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    48f8:	e0 ea       	ldi	r30, 0xA0	; 160
    48fa:	f6 e0       	ldi	r31, 0x06	; 6
    48fc:	84 81       	ldd	r24, Z+4	; 0x04
    48fe:	81 60       	ori	r24, 0x01	; 1
    4900:	84 83       	std	Z+4, r24	; 0x04
            break;
    4902:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         } 
        case '3': //Axis 3
        {        
          DEC=1;
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
          sprintf(BufferSend,"!0633\r\n");
    490c:	98 e0       	ldi	r25, 0x08	; 8
    490e:	e6 e4       	ldi	r30, 0x46	; 70
    4910:	f3 e2       	ldi	r31, 0x23	; 35
    4912:	a7 e5       	ldi	r26, 0x57	; 87
    4914:	b9 e2       	ldi	r27, 0x29	; 41
    4916:	01 90       	ld	r0, Z+
    4918:	0d 92       	st	X+, r0
    491a:	9a 95       	dec	r25
    491c:	e1 f7       	brne	.-8      	; 0x4916 <__stack+0x917>
          Responsing=1;  
    491e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
          SetDataReady;
    4922:	e0 ea       	ldi	r30, 0xA0	; 160
    4924:	f6 e0       	ldi	r31, 0x06	; 6
    4926:	84 81       	ldd	r24, Z+4	; 0x04
    4928:	81 60       	ori	r24, 0x01	; 1
    492a:	84 83       	std	Z+4, r24	; 0x04
          break;
    492c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
        }     
      }
     }
     } 
    }
    else if(strncmp(cmdTemp,"#07",3)==0)
    4930:	43 e0       	ldi	r20, 0x03	; 3
    4932:	50 e0       	ldi	r21, 0x00	; 0
    4934:	6e e4       	ldi	r22, 0x4E	; 78
    4936:	73 e2       	ldi	r23, 0x23	; 35
    4938:	80 e1       	ldi	r24, 0x10	; 16
    493a:	97 e2       	ldi	r25, 0x27	; 39
    493c:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    4940:	89 2b       	or	r24, r25
    4942:	09 f0       	breq	.+2      	; 0x4946 <__stack+0x947>
    4944:	5d c0       	rjmp	.+186    	; 0x4a00 <__stack+0xa01>
    {//STOP JOG
    if(!ProgramRun)
    4946:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    494a:	81 11       	cpse	r24, r1
    494c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    {
      if(cmdTemp[3]=='0')
    4950:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4954:	80 33       	cpi	r24, 0x30	; 48
    4956:	11 f0       	breq	.+4      	; 0x495c <__stack+0x95d>
    4958:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
           switch(cmdTemp[4])
    495c:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4960:	82 33       	cpi	r24, 0x32	; 50
    4962:	f1 f0       	breq	.+60     	; 0x49a0 <__stack+0x9a1>
    4964:	83 33       	cpi	r24, 0x33	; 51
    4966:	a1 f1       	breq	.+104    	; 0x49d0 <__stack+0x9d1>
    4968:	81 33       	cpi	r24, 0x31	; 49
    496a:	11 f0       	breq	.+4      	; 0x4970 <__stack+0x971>
    496c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '1': //Axis 1
             {                                                
                DistanceToGo1 = 0;                       
    4970:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    4974:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    4978:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    497c:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
                if(EchoON) printf("!0701\n\r");
    4980:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4984:	88 23       	and	r24, r24
    4986:	11 f4       	brne	.+4      	; 0x498c <__stack+0x98d>
    4988:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    498c:	82 e5       	ldi	r24, 0x52	; 82
    498e:	93 e2       	ldi	r25, 0x23	; 35
    4990:	9f 93       	push	r25
    4992:	8f 93       	push	r24
    4994:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4998:	0f 90       	pop	r0
    499a:	0f 90       	pop	r0
    499c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
                break;
             }
             case '2': //Axis 2
             {
                DistanceToGo2 = 0;                  
    49a0:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    49a4:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    49a8:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    49ac:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
                if(EchoON) printf("!0702\n\r");
    49b0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    49b4:	88 23       	and	r24, r24
    49b6:	11 f4       	brne	.+4      	; 0x49bc <__stack+0x9bd>
    49b8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    49bc:	8a e5       	ldi	r24, 0x5A	; 90
    49be:	93 e2       	ldi	r25, 0x23	; 35
    49c0:	9f 93       	push	r25
    49c2:	8f 93       	push	r24
    49c4:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    49c8:	0f 90       	pop	r0
    49ca:	0f 90       	pop	r0
    49cc:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
                break;
             }                          
             case '3': //Axis 3
             {
                DistanceToGo3 = 0;                  
    49d0:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    49d4:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    49d8:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    49dc:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
                if(EchoON) printf("!0703\n\r");
    49e0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    49e4:	88 23       	and	r24, r24
    49e6:	11 f4       	brne	.+4      	; 0x49ec <__stack+0x9ed>
    49e8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    49ec:	82 e6       	ldi	r24, 0x62	; 98
    49ee:	93 e2       	ldi	r25, 0x23	; 35
    49f0:	9f 93       	push	r25
    49f2:	8f 93       	push	r24
    49f4:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
             }               
           }
        }
      } 
    }
    else if(strncmp(cmdTemp,"?08",3)==0)
    4a00:	43 e0       	ldi	r20, 0x03	; 3
    4a02:	50 e0       	ldi	r21, 0x00	; 0
    4a04:	6a e6       	ldi	r22, 0x6A	; 106
    4a06:	73 e2       	ldi	r23, 0x23	; 35
    4a08:	80 e1       	ldi	r24, 0x10	; 16
    4a0a:	97 e2       	ldi	r25, 0x27	; 39
    4a0c:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    4a10:	89 2b       	or	r24, r25
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <__stack+0xa17>
    4a14:	7d c0       	rjmp	.+250    	; 0x4b10 <__stack+0xb11>
    {//Read DistanceToGo  
      if(cmdTemp[3]=='0')
    4a16:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4a1a:	80 33       	cpi	r24, 0x30	; 48
    4a1c:	11 f0       	breq	.+4      	; 0x4a22 <__stack+0xa23>
    4a1e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
           switch(cmdTemp[4])
    4a22:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4a26:	82 33       	cpi	r24, 0x32	; 50
    4a28:	59 f1       	breq	.+86     	; 0x4a80 <__stack+0xa81>
    4a2a:	83 33       	cpi	r24, 0x33	; 51
    4a2c:	09 f4       	brne	.+2      	; 0x4a30 <__stack+0xa31>
    4a2e:	4c c0       	rjmp	.+152    	; 0x4ac8 <__stack+0xac9>
    4a30:	81 33       	cpi	r24, 0x31	; 49
    4a32:	11 f0       	breq	.+4      	; 0x4a38 <__stack+0xa39>
    4a34:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '1': //Axis 1
             {                   
                ltoa(DistanceToGo1,temp,10);            
    4a38:	60 91 90 27 	lds	r22, 0x2790	; 0x802790 <DistanceToGo1>
    4a3c:	70 91 91 27 	lds	r23, 0x2791	; 0x802791 <DistanceToGo1+0x1>
    4a40:	80 91 92 27 	lds	r24, 0x2792	; 0x802792 <DistanceToGo1+0x2>
    4a44:	90 91 93 27 	lds	r25, 0x2793	; 0x802793 <DistanceToGo1+0x3>
    4a48:	2a e0       	ldi	r18, 0x0A	; 10
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	4b ef       	ldi	r20, 0xFB	; 251
    4a4e:	56 e2       	ldi	r21, 0x26	; 38
    4a50:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <ltoa>
                if(EchoON) printf("!0801\t%s\n\r",temp);
    4a54:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4a58:	88 23       	and	r24, r24
    4a5a:	11 f4       	brne	.+4      	; 0x4a60 <__stack+0xa61>
    4a5c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4a60:	8b ef       	ldi	r24, 0xFB	; 251
    4a62:	96 e2       	ldi	r25, 0x26	; 38
    4a64:	9f 93       	push	r25
    4a66:	8f 93       	push	r24
    4a68:	8e e6       	ldi	r24, 0x6E	; 110
    4a6a:	93 e2       	ldi	r25, 0x23	; 35
    4a6c:	9f 93       	push	r25
    4a6e:	8f 93       	push	r24
    4a70:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4a74:	0f 90       	pop	r0
    4a76:	0f 90       	pop	r0
    4a78:	0f 90       	pop	r0
    4a7a:	0f 90       	pop	r0
    4a7c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
                break;
             }
             case '2': //Axis 2
             {
                ltoa(DistanceToGo2,temp,10);            
    4a80:	60 91 8c 27 	lds	r22, 0x278C	; 0x80278c <DistanceToGo2>
    4a84:	70 91 8d 27 	lds	r23, 0x278D	; 0x80278d <DistanceToGo2+0x1>
    4a88:	80 91 8e 27 	lds	r24, 0x278E	; 0x80278e <DistanceToGo2+0x2>
    4a8c:	90 91 8f 27 	lds	r25, 0x278F	; 0x80278f <DistanceToGo2+0x3>
    4a90:	2a e0       	ldi	r18, 0x0A	; 10
    4a92:	30 e0       	ldi	r19, 0x00	; 0
    4a94:	4b ef       	ldi	r20, 0xFB	; 251
    4a96:	56 e2       	ldi	r21, 0x26	; 38
    4a98:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <ltoa>
                if(EchoON) printf("!0802\t%s\n\r",temp);
    4a9c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4aa0:	88 23       	and	r24, r24
    4aa2:	11 f4       	brne	.+4      	; 0x4aa8 <__stack+0xaa9>
    4aa4:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4aa8:	8b ef       	ldi	r24, 0xFB	; 251
    4aaa:	96 e2       	ldi	r25, 0x26	; 38
    4aac:	9f 93       	push	r25
    4aae:	8f 93       	push	r24
    4ab0:	89 e7       	ldi	r24, 0x79	; 121
    4ab2:	93 e2       	ldi	r25, 0x23	; 35
    4ab4:	9f 93       	push	r25
    4ab6:	8f 93       	push	r24
    4ab8:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
                break;
             }                          
             case '3': //Axis 3
             {
                ltoa(DistanceToGo3,temp,10);            
    4ac8:	60 91 88 27 	lds	r22, 0x2788	; 0x802788 <DistanceToGo3>
    4acc:	70 91 89 27 	lds	r23, 0x2789	; 0x802789 <DistanceToGo3+0x1>
    4ad0:	80 91 8a 27 	lds	r24, 0x278A	; 0x80278a <DistanceToGo3+0x2>
    4ad4:	90 91 8b 27 	lds	r25, 0x278B	; 0x80278b <DistanceToGo3+0x3>
    4ad8:	2a e0       	ldi	r18, 0x0A	; 10
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	4b ef       	ldi	r20, 0xFB	; 251
    4ade:	56 e2       	ldi	r21, 0x26	; 38
    4ae0:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <ltoa>
                if(EchoON) printf("!0803\t%s\n\r",temp);
    4ae4:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4ae8:	88 23       	and	r24, r24
    4aea:	11 f4       	brne	.+4      	; 0x4af0 <__stack+0xaf1>
    4aec:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4af0:	8b ef       	ldi	r24, 0xFB	; 251
    4af2:	96 e2       	ldi	r25, 0x26	; 38
    4af4:	9f 93       	push	r25
    4af6:	8f 93       	push	r24
    4af8:	84 e8       	ldi	r24, 0x84	; 132
    4afa:	93 e2       	ldi	r25, 0x23	; 35
    4afc:	9f 93       	push	r25
    4afe:	8f 93       	push	r24
    4b00:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4b04:	0f 90       	pop	r0
    4b06:	0f 90       	pop	r0
    4b08:	0f 90       	pop	r0
    4b0a:	0f 90       	pop	r0
    4b0c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
                break;
             }              
           }
      }
    } 
    else if(strncmp(cmdTemp,"?09",3)==0)
    4b10:	43 e0       	ldi	r20, 0x03	; 3
    4b12:	50 e0       	ldi	r21, 0x00	; 0
    4b14:	6f e8       	ldi	r22, 0x8F	; 143
    4b16:	73 e2       	ldi	r23, 0x23	; 35
    4b18:	80 e1       	ldi	r24, 0x10	; 16
    4b1a:	97 e2       	ldi	r25, 0x27	; 39
    4b1c:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    4b20:	89 2b       	or	r24, r25
    4b22:	09 f0       	breq	.+2      	; 0x4b26 <__stack+0xb27>
    4b24:	95 c0       	rjmp	.+298    	; 0x4c50 <__stack+0xc51>
    {//Read Axis Position  
      if(cmdTemp[3]=='0')
    4b26:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4b2a:	80 33       	cpi	r24, 0x30	; 48
    4b2c:	11 f0       	breq	.+4      	; 0x4b32 <__stack+0xb33>
    4b2e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
           switch(cmdTemp[4])
    4b32:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4b36:	82 33       	cpi	r24, 0x32	; 50
    4b38:	99 f1       	breq	.+102    	; 0x4ba0 <__stack+0xba1>
    4b3a:	83 33       	cpi	r24, 0x33	; 51
    4b3c:	09 f4       	brne	.+2      	; 0x4b40 <__stack+0xb41>
    4b3e:	5c c0       	rjmp	.+184    	; 0x4bf8 <__stack+0xbf9>
    4b40:	81 33       	cpi	r24, 0x31	; 49
    4b42:	11 f0       	breq	.+4      	; 0x4b48 <__stack+0xb49>
    4b44:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '1': //Axis 1
             {                   
                ltoa(AxisPosition1,temp,10);            
    4b48:	60 91 ac 27 	lds	r22, 0x27AC	; 0x8027ac <AxisPosition1>
    4b4c:	70 91 ad 27 	lds	r23, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    4b50:	80 91 ae 27 	lds	r24, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    4b54:	90 91 af 27 	lds	r25, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    4b58:	2a e0       	ldi	r18, 0x0A	; 10
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	4b ef       	ldi	r20, 0xFB	; 251
    4b5e:	56 e2       	ldi	r21, 0x26	; 38
    4b60:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <ltoa>
                sprintf(BufferSend,"!0901\t%s\r\n",temp);  
    4b64:	8b ef       	ldi	r24, 0xFB	; 251
    4b66:	96 e2       	ldi	r25, 0x26	; 38
    4b68:	9f 93       	push	r25
    4b6a:	8f 93       	push	r24
    4b6c:	83 e9       	ldi	r24, 0x93	; 147
    4b6e:	93 e2       	ldi	r25, 0x23	; 35
    4b70:	9f 93       	push	r25
    4b72:	8f 93       	push	r24
    4b74:	87 e5       	ldi	r24, 0x57	; 87
    4b76:	99 e2       	ldi	r25, 0x29	; 41
    4b78:	9f 93       	push	r25
    4b7a:	8f 93       	push	r24
    4b7c:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
                Responsing=1;
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady; 
    4b86:	e0 ea       	ldi	r30, 0xA0	; 160
    4b88:	f6 e0       	ldi	r31, 0x06	; 6
    4b8a:	84 81       	ldd	r24, Z+4	; 0x04
    4b8c:	81 60       	ori	r24, 0x01	; 1
    4b8e:	84 83       	std	Z+4, r24	; 0x04
                break;
    4b90:	0f 90       	pop	r0
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
    4b96:	0f 90       	pop	r0
    4b98:	0f 90       	pop	r0
    4b9a:	0f 90       	pop	r0
    4b9c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
             }
             case '2': //Axis 2
             {
                ltoa(AxisPosition2,temp,10);            
    4ba0:	60 91 a8 27 	lds	r22, 0x27A8	; 0x8027a8 <AxisPosition2>
    4ba4:	70 91 a9 27 	lds	r23, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    4ba8:	80 91 aa 27 	lds	r24, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    4bac:	90 91 ab 27 	lds	r25, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    4bb0:	2a e0       	ldi	r18, 0x0A	; 10
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	4b ef       	ldi	r20, 0xFB	; 251
    4bb6:	56 e2       	ldi	r21, 0x26	; 38
    4bb8:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <ltoa>
                sprintf(BufferSend,"!0902\t%s\r\n",temp); 
    4bbc:	8b ef       	ldi	r24, 0xFB	; 251
    4bbe:	96 e2       	ldi	r25, 0x26	; 38
    4bc0:	9f 93       	push	r25
    4bc2:	8f 93       	push	r24
    4bc4:	8e e9       	ldi	r24, 0x9E	; 158
    4bc6:	93 e2       	ldi	r25, 0x23	; 35
    4bc8:	9f 93       	push	r25
    4bca:	8f 93       	push	r24
    4bcc:	87 e5       	ldi	r24, 0x57	; 87
    4bce:	99 e2       	ldi	r25, 0x29	; 41
    4bd0:	9f 93       	push	r25
    4bd2:	8f 93       	push	r24
    4bd4:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
                Responsing=1;  
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady;
    4bde:	e0 ea       	ldi	r30, 0xA0	; 160
    4be0:	f6 e0       	ldi	r31, 0x06	; 6
    4be2:	84 81       	ldd	r24, Z+4	; 0x04
    4be4:	81 60       	ori	r24, 0x01	; 1
    4be6:	84 83       	std	Z+4, r24	; 0x04
                break;
    4be8:	0f 90       	pop	r0
    4bea:	0f 90       	pop	r0
    4bec:	0f 90       	pop	r0
    4bee:	0f 90       	pop	r0
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
             }                          
             case '3': //Axis 3
             {
                ltoa(AxisPosition3,temp,10);            
    4bf8:	60 91 a4 27 	lds	r22, 0x27A4	; 0x8027a4 <AxisPosition3>
    4bfc:	70 91 a5 27 	lds	r23, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    4c00:	80 91 a6 27 	lds	r24, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    4c04:	90 91 a7 27 	lds	r25, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    4c08:	2a e0       	ldi	r18, 0x0A	; 10
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	4b ef       	ldi	r20, 0xFB	; 251
    4c0e:	56 e2       	ldi	r21, 0x26	; 38
    4c10:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <ltoa>
                sprintf(BufferSend,"!0903\t%s\r\n",temp);
    4c14:	8b ef       	ldi	r24, 0xFB	; 251
    4c16:	96 e2       	ldi	r25, 0x26	; 38
    4c18:	9f 93       	push	r25
    4c1a:	8f 93       	push	r24
    4c1c:	89 ea       	ldi	r24, 0xA9	; 169
    4c1e:	93 e2       	ldi	r25, 0x23	; 35
    4c20:	9f 93       	push	r25
    4c22:	8f 93       	push	r24
    4c24:	87 e5       	ldi	r24, 0x57	; 87
    4c26:	99 e2       	ldi	r25, 0x29	; 41
    4c28:	9f 93       	push	r25
    4c2a:	8f 93       	push	r24
    4c2c:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
                Responsing=1; 
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady;
    4c36:	e0 ea       	ldi	r30, 0xA0	; 160
    4c38:	f6 e0       	ldi	r31, 0x06	; 6
    4c3a:	84 81       	ldd	r24, Z+4	; 0x04
    4c3c:	81 60       	ori	r24, 0x01	; 1
    4c3e:	84 83       	std	Z+4, r24	; 0x04
                break;
    4c40:	0f 90       	pop	r0
    4c42:	0f 90       	pop	r0
    4c44:	0f 90       	pop	r0
    4c46:	0f 90       	pop	r0
    4c48:	0f 90       	pop	r0
    4c4a:	0f 90       	pop	r0
    4c4c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
             }             
           }
      }
    }
     else if(strncmp(cmdTemp,"#10",3)==0)
    4c50:	43 e0       	ldi	r20, 0x03	; 3
    4c52:	50 e0       	ldi	r21, 0x00	; 0
    4c54:	64 eb       	ldi	r22, 0xB4	; 180
    4c56:	73 e2       	ldi	r23, 0x23	; 35
    4c58:	80 e1       	ldi	r24, 0x10	; 16
    4c5a:	97 e2       	ldi	r25, 0x27	; 39
    4c5c:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    4c60:	89 2b       	or	r24, r25
    4c62:	09 f0       	breq	.+2      	; 0x4c66 <__stack+0xc67>
    4c64:	8e c0       	rjmp	.+284    	; 0x4d82 <__stack+0xd83>
    {//Clear JOG  
     if(!ProgramRun)
    4c66:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    4c6a:	81 11       	cpse	r24, r1
    4c6c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    {
      if(cmdTemp[3]=='0')
    4c70:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4c74:	80 33       	cpi	r24, 0x30	; 48
    4c76:	11 f0       	breq	.+4      	; 0x4c7c <__stack+0xc7d>
    4c78:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      {
           switch(cmdTemp[4])
    4c7c:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4c80:	82 33       	cpi	r24, 0x32	; 50
    4c82:	79 f1       	breq	.+94     	; 0x4ce2 <__stack+0xce3>
    4c84:	83 33       	cpi	r24, 0x33	; 51
    4c86:	09 f4       	brne	.+2      	; 0x4c8a <__stack+0xc8b>
    4c88:	54 c0       	rjmp	.+168    	; 0x4d32 <__stack+0xd33>
    4c8a:	81 33       	cpi	r24, 0x31	; 49
    4c8c:	11 f0       	breq	.+4      	; 0x4c92 <__stack+0xc93>
    4c8e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
           {
             case '1': //Axis 1
             {                                                
                DistanceToGo1 = 0;
    4c92:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    4c96:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    4c9a:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    4c9e:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
                SetJog1 = AxisPosition1;
    4ca2:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    4ca6:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    4caa:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    4cae:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    4cb2:	80 93 b8 27 	sts	0x27B8, r24	; 0x8027b8 <SetJog1>
    4cb6:	90 93 b9 27 	sts	0x27B9, r25	; 0x8027b9 <SetJog1+0x1>
    4cba:	a0 93 ba 27 	sts	0x27BA, r26	; 0x8027ba <SetJog1+0x2>
    4cbe:	b0 93 bb 27 	sts	0x27BB, r27	; 0x8027bb <SetJog1+0x3>
                if(EchoON) printf("!0701\n\r");
    4cc2:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4cc6:	88 23       	and	r24, r24
    4cc8:	11 f4       	brne	.+4      	; 0x4cce <__stack+0xccf>
    4cca:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4cce:	82 e5       	ldi	r24, 0x52	; 82
    4cd0:	93 e2       	ldi	r25, 0x23	; 35
    4cd2:	9f 93       	push	r25
    4cd4:	8f 93       	push	r24
    4cd6:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4cda:	0f 90       	pop	r0
    4cdc:	0f 90       	pop	r0
    4cde:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
                break;
             }
             case '2': //Axis 2
             {
                DistanceToGo2 = 0;   
    4ce2:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    4ce6:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    4cea:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    4cee:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
                SetJog2 = AxisPosition2;
    4cf2:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    4cf6:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    4cfa:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    4cfe:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    4d02:	80 93 b4 27 	sts	0x27B4, r24	; 0x8027b4 <SetJog2>
    4d06:	90 93 b5 27 	sts	0x27B5, r25	; 0x8027b5 <SetJog2+0x1>
    4d0a:	a0 93 b6 27 	sts	0x27B6, r26	; 0x8027b6 <SetJog2+0x2>
    4d0e:	b0 93 b7 27 	sts	0x27B7, r27	; 0x8027b7 <SetJog2+0x3>
                if(EchoON) printf("!0702\n\r");
    4d12:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4d16:	88 23       	and	r24, r24
    4d18:	11 f4       	brne	.+4      	; 0x4d1e <__stack+0xd1f>
    4d1a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4d1e:	8a e5       	ldi	r24, 0x5A	; 90
    4d20:	93 e2       	ldi	r25, 0x23	; 35
    4d22:	9f 93       	push	r25
    4d24:	8f 93       	push	r24
    4d26:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4d2a:	0f 90       	pop	r0
    4d2c:	0f 90       	pop	r0
    4d2e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
                break;
             }                          
             case '3': //Axis 3
             {
                DistanceToGo3 = 0; 
    4d32:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    4d36:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    4d3a:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    4d3e:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
                SetJog3 = AxisPosition3;                    
    4d42:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    4d46:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    4d4a:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    4d4e:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    4d52:	80 93 b0 27 	sts	0x27B0, r24	; 0x8027b0 <SetJog3>
    4d56:	90 93 b1 27 	sts	0x27B1, r25	; 0x8027b1 <SetJog3+0x1>
    4d5a:	a0 93 b2 27 	sts	0x27B2, r26	; 0x8027b2 <SetJog3+0x2>
    4d5e:	b0 93 b3 27 	sts	0x27B3, r27	; 0x8027b3 <SetJog3+0x3>
                if(EchoON) printf("!0703\n\r");
    4d62:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4d66:	88 23       	and	r24, r24
    4d68:	11 f4       	brne	.+4      	; 0x4d6e <__stack+0xd6f>
    4d6a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4d6e:	82 e6       	ldi	r24, 0x62	; 98
    4d70:	93 e2       	ldi	r25, 0x23	; 35
    4d72:	9f 93       	push	r25
    4d74:	8f 93       	push	r24
    4d76:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4d7a:	0f 90       	pop	r0
    4d7c:	0f 90       	pop	r0
    4d7e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
             }              
           }
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    4d82:	43 e0       	ldi	r20, 0x03	; 3
    4d84:	50 e0       	ldi	r21, 0x00	; 0
    4d86:	68 eb       	ldi	r22, 0xB8	; 184
    4d88:	73 e2       	ldi	r23, 0x23	; 35
    4d8a:	80 e1       	ldi	r24, 0x10	; 16
    4d8c:	97 e2       	ldi	r25, 0x27	; 39
    4d8e:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    4d92:	89 2b       	or	r24, r25
    4d94:	09 f0       	breq	.+2      	; 0x4d98 <__stack+0xd99>
    4d96:	ca c0       	rjmp	.+404    	; 0x4f2c <__stack+0xf2d>
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4d98:	90 91 48 27 	lds	r25, 0x2748	; 0x802748 <AxisIsMoving1>
    4d9c:	91 11       	cpse	r25, r1
    4d9e:	0c 94 bd 33 	jmp	0x677a	; 0x677a <__stack+0x277b>
    4da2:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4da6:	81 11       	cpse	r24, r1
    4da8:	0c 94 e7 33 	jmp	0x67ce	; 0x67ce <__stack+0x27cf>
    4dac:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    4db0:	21 e0       	ldi	r18, 0x01	; 1
    4db2:	81 11       	cpse	r24, r1
    4db4:	01 c0       	rjmp	.+2      	; 0x4db8 <__stack+0xdb9>
    4db6:	20 e0       	ldi	r18, 0x00	; 0
    4db8:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
         
    if (!ProgramRun)
    4dbc:	20 91 bc 27 	lds	r18, 0x27BC	; 0x8027bc <ProgramRun>
    4dc0:	21 11       	cpse	r18, r1
    4dc2:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
     {
     while (AxisMoving == 1) 
    4dc6:	88 23       	and	r24, r24
    4dc8:	99 f0       	breq	.+38     	; 0x4df0 <__stack+0xdf1>
    4dca:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4dce:	81 11       	cpse	r24, r1
    4dd0:	07 c0       	rjmp	.+14     	; 0x4de0 <__stack+0xde1>
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    4dd8:	21 11       	cpse	r18, r1
    4dda:	03 c0       	rjmp	.+6      	; 0x4de2 <__stack+0xde3>
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	01 c0       	rjmp	.+2      	; 0x4de2 <__stack+0xde3>
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	28 2f       	mov	r18, r24
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4de4:	91 11       	cpse	r25, r1
    4de6:	fe cf       	rjmp	.-4      	; 0x4de4 <__stack+0xde5>
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    4de8:	21 11       	cpse	r18, r1
    4dea:	fc cf       	rjmp	.-8      	; 0x4de4 <__stack+0xde5>
    4dec:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
      if(cmdTemp[3]=='0')
    4df0:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4df4:	80 33       	cpi	r24, 0x30	; 48
    4df6:	11 f0       	breq	.+4      	; 0x4dfc <__stack+0xdfd>
    4df8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
      { 
        switch(cmdTemp[4])
    4dfc:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4e00:	82 33       	cpi	r24, 0x32	; 50
    4e02:	b1 f1       	breq	.+108    	; 0x4e70 <__stack+0xe71>
    4e04:	83 33       	cpi	r24, 0x33	; 51
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <__stack+0xe0b>
    4e08:	62 c0       	rjmp	.+196    	; 0x4ece <__stack+0xecf>
    4e0a:	81 33       	cpi	r24, 0x31	; 49
    4e0c:	11 f0       	breq	.+4      	; 0x4e12 <__stack+0xe13>
    4e0e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
        {
          case '1': //Axis 1
          {                   
            for(k=0;k<10;k++)
    4e12:	80 e0       	ldi	r24, 0x00	; 0
            {
              temp[k]=cmdTemp[k+5];
    4e14:	28 2f       	mov	r18, r24
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	f9 01       	movw	r30, r18
    4e1a:	e5 50       	subi	r30, 0x05	; 5
    4e1c:	f9 4d       	sbci	r31, 0xD9	; 217
    4e1e:	d9 01       	movw	r26, r18
    4e20:	a0 5f       	subi	r26, 0xF0	; 240
    4e22:	b8 4d       	sbci	r27, 0xD8	; 216
    4e24:	15 96       	adiw	r26, 0x05	; 5
    4e26:	9c 91       	ld	r25, X
    4e28:	90 83       	st	Z, r25
      { 
        switch(cmdTemp[4])
        {
          case '1': //Axis 1
          {                   
            for(k=0;k<10;k++)
    4e2a:	8f 5f       	subi	r24, 0xFF	; 255
    4e2c:	8a 30       	cpi	r24, 0x0A	; 10
    4e2e:	90 f3       	brcs	.-28     	; 0x4e14 <__stack+0xe15>
    4e30:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4e34:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
            AxisPosition1=atol(temp);
    4e38:	8b ef       	ldi	r24, 0xFB	; 251
    4e3a:	96 e2       	ldi	r25, 0x26	; 38
    4e3c:	0e 94 27 40 	call	0x804e	; 0x804e <atol>
    4e40:	60 93 ac 27 	sts	0x27AC, r22	; 0x8027ac <AxisPosition1>
    4e44:	70 93 ad 27 	sts	0x27AD, r23	; 0x8027ad <AxisPosition1+0x1>
    4e48:	80 93 ae 27 	sts	0x27AE, r24	; 0x8027ae <AxisPosition1+0x2>
    4e4c:	90 93 af 27 	sts	0x27AF, r25	; 0x8027af <AxisPosition1+0x3>
            if(EchoON) printf("!1101\n\r");  
    4e50:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4e54:	88 23       	and	r24, r24
    4e56:	11 f4       	brne	.+4      	; 0x4e5c <__stack+0xe5d>
    4e58:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4e5c:	8c eb       	ldi	r24, 0xBC	; 188
    4e5e:	93 e2       	ldi	r25, 0x23	; 35
    4e60:	9f 93       	push	r25
    4e62:	8f 93       	push	r24
    4e64:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4e68:	0f 90       	pop	r0
    4e6a:	0f 90       	pop	r0
    4e6c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            break;                        
          }
          case '2'://Axis 2
          {                   
            for(k=0;k<10;k++)
    4e70:	80 e0       	ldi	r24, 0x00	; 0
            {
              temp[k]=cmdTemp[k+5];
    4e72:	28 2f       	mov	r18, r24
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	f9 01       	movw	r30, r18
    4e78:	e5 50       	subi	r30, 0x05	; 5
    4e7a:	f9 4d       	sbci	r31, 0xD9	; 217
    4e7c:	d9 01       	movw	r26, r18
    4e7e:	a0 5f       	subi	r26, 0xF0	; 240
    4e80:	b8 4d       	sbci	r27, 0xD8	; 216
    4e82:	15 96       	adiw	r26, 0x05	; 5
    4e84:	9c 91       	ld	r25, X
    4e86:	90 83       	st	Z, r25
            if(EchoON) printf("!1101\n\r");  
            break;                        
          }
          case '2'://Axis 2
          {                   
            for(k=0;k<10;k++)
    4e88:	8f 5f       	subi	r24, 0xFF	; 255
    4e8a:	8a 30       	cpi	r24, 0x0A	; 10
    4e8c:	90 f3       	brcs	.-28     	; 0x4e72 <__stack+0xe73>
    4e8e:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4e92:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
            AxisPosition2=atol(temp);
    4e96:	8b ef       	ldi	r24, 0xFB	; 251
    4e98:	96 e2       	ldi	r25, 0x26	; 38
    4e9a:	0e 94 27 40 	call	0x804e	; 0x804e <atol>
    4e9e:	60 93 a8 27 	sts	0x27A8, r22	; 0x8027a8 <AxisPosition2>
    4ea2:	70 93 a9 27 	sts	0x27A9, r23	; 0x8027a9 <AxisPosition2+0x1>
    4ea6:	80 93 aa 27 	sts	0x27AA, r24	; 0x8027aa <AxisPosition2+0x2>
    4eaa:	90 93 ab 27 	sts	0x27AB, r25	; 0x8027ab <AxisPosition2+0x3>
            if(EchoON) printf("!1102\n\r");  
    4eae:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4eb2:	88 23       	and	r24, r24
    4eb4:	11 f4       	brne	.+4      	; 0x4eba <__stack+0xebb>
    4eb6:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4eba:	84 ec       	ldi	r24, 0xC4	; 196
    4ebc:	93 e2       	ldi	r25, 0x23	; 35
    4ebe:	9f 93       	push	r25
    4ec0:	8f 93       	push	r24
    4ec2:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0
    4eca:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            break;                        
          }
          case '3'://Axis 3
          {                   
            for(k=0;k<10;k++)
    4ece:	80 e0       	ldi	r24, 0x00	; 0
            {
              temp[k]=cmdTemp[k+5];
    4ed0:	28 2f       	mov	r18, r24
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	f9 01       	movw	r30, r18
    4ed6:	e5 50       	subi	r30, 0x05	; 5
    4ed8:	f9 4d       	sbci	r31, 0xD9	; 217
    4eda:	d9 01       	movw	r26, r18
    4edc:	a0 5f       	subi	r26, 0xF0	; 240
    4ede:	b8 4d       	sbci	r27, 0xD8	; 216
    4ee0:	15 96       	adiw	r26, 0x05	; 5
    4ee2:	9c 91       	ld	r25, X
    4ee4:	90 83       	st	Z, r25
            if(EchoON) printf("!1102\n\r");  
            break;                        
          }
          case '3'://Axis 3
          {                   
            for(k=0;k<10;k++)
    4ee6:	8f 5f       	subi	r24, 0xFF	; 255
    4ee8:	8a 30       	cpi	r24, 0x0A	; 10
    4eea:	90 f3       	brcs	.-28     	; 0x4ed0 <__stack+0xed1>
    4eec:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4ef0:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
            AxisPosition3=atol(temp);
    4ef4:	8b ef       	ldi	r24, 0xFB	; 251
    4ef6:	96 e2       	ldi	r25, 0x26	; 38
    4ef8:	0e 94 27 40 	call	0x804e	; 0x804e <atol>
    4efc:	60 93 a4 27 	sts	0x27A4, r22	; 0x8027a4 <AxisPosition3>
    4f00:	70 93 a5 27 	sts	0x27A5, r23	; 0x8027a5 <AxisPosition3+0x1>
    4f04:	80 93 a6 27 	sts	0x27A6, r24	; 0x8027a6 <AxisPosition3+0x2>
    4f08:	90 93 a7 27 	sts	0x27A7, r25	; 0x8027a7 <AxisPosition3+0x3>
            if(EchoON) printf("!1103\n\r");  
    4f0c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4f10:	88 23       	and	r24, r24
    4f12:	11 f4       	brne	.+4      	; 0x4f18 <__stack+0xf19>
    4f14:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4f18:	8c ec       	ldi	r24, 0xCC	; 204
    4f1a:	93 e2       	ldi	r25, 0x23	; 35
    4f1c:	9f 93       	push	r25
    4f1e:	8f 93       	push	r24
    4f20:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    4f24:	0f 90       	pop	r0
    4f26:	0f 90       	pop	r0
    4f28:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
          }                                      
        }
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    4f2c:	43 e0       	ldi	r20, 0x03	; 3
    4f2e:	50 e0       	ldi	r21, 0x00	; 0
    4f30:	64 ed       	ldi	r22, 0xD4	; 212
    4f32:	73 e2       	ldi	r23, 0x23	; 35
    4f34:	80 e1       	ldi	r24, 0x10	; 16
    4f36:	97 e2       	ldi	r25, 0x27	; 39
    4f38:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    4f3c:	89 2b       	or	r24, r25
    4f3e:	81 f5       	brne	.+96     	; 0x4fa0 <__stack+0xfa1>
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    4f40:	90 91 48 27 	lds	r25, 0x2748	; 0x802748 <AxisIsMoving1>
    4f44:	91 11       	cpse	r25, r1
    4f46:	0c 94 c7 33 	jmp	0x678e	; 0x678e <__stack+0x278f>
    4f4a:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4f4e:	81 11       	cpse	r24, r1
    4f50:	0c 94 f1 33 	jmp	0x67e2	; 0x67e2 <__stack+0x27e3>
    4f54:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    4f58:	21 e0       	ldi	r18, 0x01	; 1
    4f5a:	81 11       	cpse	r24, r1
    4f5c:	01 c0       	rjmp	.+2      	; 0x4f60 <__stack+0xf61>
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
    if (!ProgramRun)
    4f64:	20 91 bc 27 	lds	r18, 0x27BC	; 0x8027bc <ProgramRun>
    4f68:	21 11       	cpse	r18, r1
    4f6a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
     {
     while (AxisMoving == 1) 
    4f6e:	88 23       	and	r24, r24
    4f70:	11 f4       	brne	.+4      	; 0x4f76 <__stack+0xf77>
    4f72:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    4f76:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4f7a:	81 11       	cpse	r24, r1
    4f7c:	07 c0       	rjmp	.+14     	; 0x4f8c <__stack+0xf8d>
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    4f84:	21 11       	cpse	r18, r1
    4f86:	03 c0       	rjmp	.+6      	; 0x4f8e <__stack+0xf8f>
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	01 c0       	rjmp	.+2      	; 0x4f8e <__stack+0xf8f>
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	28 2f       	mov	r18, r24
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4f90:	91 11       	cpse	r25, r1
    4f92:	fe cf       	rjmp	.-4      	; 0x4f90 <__stack+0xf91>
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    4f94:	21 11       	cpse	r18, r1
    4f96:	fc cf       	rjmp	.-8      	; 0x4f90 <__stack+0xf91>
    4f98:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    4f9c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }
         }
       }
     }
    }   
    else if(strncmp(cmdTemp,"#13",3)==0)
    4fa0:	43 e0       	ldi	r20, 0x03	; 3
    4fa2:	50 e0       	ldi	r21, 0x00	; 0
    4fa4:	68 ed       	ldi	r22, 0xD8	; 216
    4fa6:	73 e2       	ldi	r23, 0x23	; 35
    4fa8:	80 e1       	ldi	r24, 0x10	; 16
    4faa:	97 e2       	ldi	r25, 0x27	; 39
    4fac:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    4fb0:	89 2b       	or	r24, r25
    4fb2:	09 f0       	breq	.+2      	; 0x4fb6 <__stack+0xfb7>
    4fb4:	eb c0       	rjmp	.+470    	; 0x518c <__stack+0x118d>
    {// Set Speed 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4fb6:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    4fba:	81 11       	cpse	r24, r1
    4fbc:	0c 94 d1 33 	jmp	0x67a2	; 0x67a2 <__stack+0x27a3>
    4fc0:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4fc4:	81 11       	cpse	r24, r1
    4fc6:	0c 94 d1 33 	jmp	0x67a2	; 0x67a2 <__stack+0x27a3>
    4fca:	91 e0       	ldi	r25, 0x01	; 1
    4fcc:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    4fd0:	21 11       	cpse	r18, r1
    4fd2:	01 c0       	rjmp	.+2      	; 0x4fd6 <__stack+0xfd7>
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    4fda:	21 e0       	ldi	r18, 0x01	; 1
    4fdc:	30 91 bc 27 	lds	r19, 0x27BC	; 0x8027bc <ProgramRun>
    4fe0:	31 11       	cpse	r19, r1
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	92 17       	cp	r25, r18
    4fe6:	10 f0       	brcs	.+4      	; 0x4fec <__stack+0xfed>
    4fe8:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
     {
       if(cmdTemp[3]=='0')
    4fec:	90 91 13 27 	lds	r25, 0x2713	; 0x802713 <cmdTemp+0x3>
    4ff0:	90 33       	cpi	r25, 0x30	; 48
    4ff2:	11 f0       	breq	.+4      	; 0x4ff8 <__stack+0xff9>
    4ff4:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         switch(cmdTemp[4])
    4ff8:	90 91 14 27 	lds	r25, 0x2714	; 0x802714 <cmdTemp+0x4>
    4ffc:	92 33       	cpi	r25, 0x32	; 50
    4ffe:	09 f4       	brne	.+2      	; 0x5002 <__stack+0x1003>
    5000:	49 c0       	rjmp	.+146    	; 0x5094 <__stack+0x1095>
    5002:	93 33       	cpi	r25, 0x33	; 51
    5004:	09 f4       	brne	.+2      	; 0x5008 <__stack+0x1009>
    5006:	84 c0       	rjmp	.+264    	; 0x5110 <__stack+0x1111>
    5008:	91 33       	cpi	r25, 0x31	; 49
    500a:	11 f0       	breq	.+4      	; 0x5010 <__stack+0x1011>
    500c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5010:	28 2f       	mov	r18, r24
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	f9 01       	movw	r30, r18
    5016:	e5 50       	subi	r30, 0x05	; 5
    5018:	f9 4d       	sbci	r31, 0xD9	; 217
    501a:	d9 01       	movw	r26, r18
    501c:	a0 5f       	subi	r26, 0xF0	; 240
    501e:	b8 4d       	sbci	r27, 0xD8	; 216
    5020:	15 96       	adiw	r26, 0x05	; 5
    5022:	9c 91       	ld	r25, X
    5024:	90 83       	st	Z, r25
       {
         switch(cmdTemp[4])
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
    5026:	8f 5f       	subi	r24, 0xFF	; 255
    5028:	8a 30       	cpi	r24, 0x0A	; 10
    502a:	90 f3       	brcs	.-28     	; 0x5010 <__stack+0x1011>
    502c:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5030:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              SetSpeed1=atof(temp);  
    5034:	8b ef       	ldi	r24, 0xFB	; 251
    5036:	96 e2       	ldi	r25, 0x26	; 38
    5038:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    503c:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    5040:	60 93 79 27 	sts	0x2779, r22	; 0x802779 <SetSpeed1>
    5044:	70 93 7a 27 	sts	0x277A, r23	; 0x80277a <SetSpeed1+0x1>
    5048:	80 93 7b 27 	sts	0x277B, r24	; 0x80277b <SetSpeed1+0x2>
    504c:	90 93 7c 27 	sts	0x277C, r25	; 0x80277c <SetSpeed1+0x3>
              sprintf(BufferSend,"!1301\t%s\r\n",temp); 
    5050:	0f 2e       	mov	r0, r31
    5052:	fb ef       	ldi	r31, 0xFB	; 251
    5054:	cf 2e       	mov	r12, r31
    5056:	f6 e2       	ldi	r31, 0x26	; 38
    5058:	df 2e       	mov	r13, r31
    505a:	f0 2d       	mov	r31, r0
    505c:	df 92       	push	r13
    505e:	cf 92       	push	r12
    5060:	8c ed       	ldi	r24, 0xDC	; 220
    5062:	93 e2       	ldi	r25, 0x23	; 35
    5064:	9f 93       	push	r25
    5066:	8f 93       	push	r24
    5068:	87 e5       	ldi	r24, 0x57	; 87
    506a:	99 e2       	ldi	r25, 0x29	; 41
    506c:	9f 93       	push	r25
    506e:	8f 93       	push	r24
    5070:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1; 
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    507a:	e0 ea       	ldi	r30, 0xA0	; 160
    507c:	f6 e0       	ldi	r31, 0x06	; 6
    507e:	84 81       	ldd	r24, Z+4	; 0x04
    5080:	81 60       	ori	r24, 0x01	; 1
    5082:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5084:	0f 90       	pop	r0
    5086:	0f 90       	pop	r0
    5088:	0f 90       	pop	r0
    508a:	0f 90       	pop	r0
    508c:	0f 90       	pop	r0
    508e:	0f 90       	pop	r0
    5090:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }
            case '2': //Axis 2
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5094:	28 2f       	mov	r18, r24
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	f9 01       	movw	r30, r18
    509a:	e5 50       	subi	r30, 0x05	; 5
    509c:	f9 4d       	sbci	r31, 0xD9	; 217
    509e:	d9 01       	movw	r26, r18
    50a0:	a0 5f       	subi	r26, 0xF0	; 240
    50a2:	b8 4d       	sbci	r27, 0xD8	; 216
    50a4:	15 96       	adiw	r26, 0x05	; 5
    50a6:	9c 91       	ld	r25, X
    50a8:	90 83       	st	Z, r25
              SetDataReady;
              break; 
            }
            case '2': //Axis 2
            {
              for(k=0;k<10;k++)
    50aa:	8f 5f       	subi	r24, 0xFF	; 255
    50ac:	8a 30       	cpi	r24, 0x0A	; 10
    50ae:	90 f3       	brcs	.-28     	; 0x5094 <__stack+0x1095>
    50b0:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    50b4:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              SetSpeed2=atof(temp);   
    50b8:	8b ef       	ldi	r24, 0xFB	; 251
    50ba:	96 e2       	ldi	r25, 0x26	; 38
    50bc:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    50c0:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    50c4:	60 93 75 27 	sts	0x2775, r22	; 0x802775 <SetSpeed2>
    50c8:	70 93 76 27 	sts	0x2776, r23	; 0x802776 <SetSpeed2+0x1>
    50cc:	80 93 77 27 	sts	0x2777, r24	; 0x802777 <SetSpeed2+0x2>
    50d0:	90 93 78 27 	sts	0x2778, r25	; 0x802778 <SetSpeed2+0x3>
              sprintf(BufferSend,"!1302\t%s\r\n",temp); 
    50d4:	0b ef       	ldi	r16, 0xFB	; 251
    50d6:	16 e2       	ldi	r17, 0x26	; 38
    50d8:	1f 93       	push	r17
    50da:	0f 93       	push	r16
    50dc:	87 ee       	ldi	r24, 0xE7	; 231
    50de:	93 e2       	ldi	r25, 0x23	; 35
    50e0:	9f 93       	push	r25
    50e2:	8f 93       	push	r24
    50e4:	87 e5       	ldi	r24, 0x57	; 87
    50e6:	99 e2       	ldi	r25, 0x29	; 41
    50e8:	9f 93       	push	r25
    50ea:	8f 93       	push	r24
    50ec:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1;
    50f0:	81 e0       	ldi	r24, 0x01	; 1
    50f2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    50f6:	e0 ea       	ldi	r30, 0xA0	; 160
    50f8:	f6 e0       	ldi	r31, 0x06	; 6
    50fa:	84 81       	ldd	r24, Z+4	; 0x04
    50fc:	81 60       	ori	r24, 0x01	; 1
    50fe:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5100:	0f 90       	pop	r0
    5102:	0f 90       	pop	r0
    5104:	0f 90       	pop	r0
    5106:	0f 90       	pop	r0
    5108:	0f 90       	pop	r0
    510a:	0f 90       	pop	r0
    510c:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5110:	28 2f       	mov	r18, r24
    5112:	30 e0       	ldi	r19, 0x00	; 0
    5114:	f9 01       	movw	r30, r18
    5116:	e5 50       	subi	r30, 0x05	; 5
    5118:	f9 4d       	sbci	r31, 0xD9	; 217
    511a:	d9 01       	movw	r26, r18
    511c:	a0 5f       	subi	r26, 0xF0	; 240
    511e:	b8 4d       	sbci	r27, 0xD8	; 216
    5120:	15 96       	adiw	r26, 0x05	; 5
    5122:	9c 91       	ld	r25, X
    5124:	90 83       	st	Z, r25
              SetDataReady;
              break; 
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
    5126:	8f 5f       	subi	r24, 0xFF	; 255
    5128:	8a 30       	cpi	r24, 0x0A	; 10
    512a:	90 f3       	brcs	.-28     	; 0x5110 <__stack+0x1111>
    512c:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5130:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              SetSpeed3=atof(temp);   
    5134:	8b ef       	ldi	r24, 0xFB	; 251
    5136:	96 e2       	ldi	r25, 0x26	; 38
    5138:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    513c:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    5140:	60 93 71 27 	sts	0x2771, r22	; 0x802771 <SetSpeed3>
    5144:	70 93 72 27 	sts	0x2772, r23	; 0x802772 <SetSpeed3+0x1>
    5148:	80 93 73 27 	sts	0x2773, r24	; 0x802773 <SetSpeed3+0x2>
    514c:	90 93 74 27 	sts	0x2774, r25	; 0x802774 <SetSpeed3+0x3>
              sprintf(BufferSend,"!1303\t%s\r\n",temp); 
    5150:	4b ef       	ldi	r20, 0xFB	; 251
    5152:	56 e2       	ldi	r21, 0x26	; 38
    5154:	5f 93       	push	r21
    5156:	4f 93       	push	r20
    5158:	82 ef       	ldi	r24, 0xF2	; 242
    515a:	93 e2       	ldi	r25, 0x23	; 35
    515c:	9f 93       	push	r25
    515e:	8f 93       	push	r24
    5160:	87 e5       	ldi	r24, 0x57	; 87
    5162:	99 e2       	ldi	r25, 0x29	; 41
    5164:	9f 93       	push	r25
    5166:	8f 93       	push	r24
    5168:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1;
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5172:	e0 ea       	ldi	r30, 0xA0	; 160
    5174:	f6 e0       	ldi	r31, 0x06	; 6
    5176:	84 81       	ldd	r24, Z+4	; 0x04
    5178:	81 60       	ori	r24, 0x01	; 1
    517a:	84 83       	std	Z+4, r24	; 0x04
              break; 
    517c:	0f 90       	pop	r0
    517e:	0f 90       	pop	r0
    5180:	0f 90       	pop	r0
    5182:	0f 90       	pop	r0
    5184:	0f 90       	pop	r0
    5186:	0f 90       	pop	r0
    5188:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }            
         }
       }
     }
    }
    else if(strncmp(cmdTemp,"?14",3)==0)
    518c:	43 e0       	ldi	r20, 0x03	; 3
    518e:	50 e0       	ldi	r21, 0x00	; 0
    5190:	6d ef       	ldi	r22, 0xFD	; 253
    5192:	73 e2       	ldi	r23, 0x23	; 35
    5194:	80 e1       	ldi	r24, 0x10	; 16
    5196:	97 e2       	ldi	r25, 0x27	; 39
    5198:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    519c:	89 2b       	or	r24, r25
    519e:	09 f0       	breq	.+2      	; 0x51a2 <__stack+0x11a3>
    51a0:	52 c0       	rjmp	.+164    	; 0x5246 <__stack+0x1247>
    {//AxisIsMoving
       if(cmdTemp[3]=='0')
    51a2:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    51a6:	80 33       	cpi	r24, 0x30	; 48
    51a8:	11 f0       	breq	.+4      	; 0x51ae <__stack+0x11af>
    51aa:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         switch(cmdTemp[4])
    51ae:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    51b2:	82 33       	cpi	r24, 0x32	; 50
    51b4:	e1 f0       	breq	.+56     	; 0x51ee <__stack+0x11ef>
    51b6:	83 33       	cpi	r24, 0x33	; 51
    51b8:	81 f1       	breq	.+96     	; 0x521a <__stack+0x121b>
    51ba:	81 33       	cpi	r24, 0x31	; 49
    51bc:	11 f0       	breq	.+4      	; 0x51c2 <__stack+0x11c3>
    51be:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         {
            case '1': //Axis 1
            {
              if(EchoON) printf("!1401\t%u\n\r",AxisIsMoving1);                      
    51c2:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    51c6:	88 23       	and	r24, r24
    51c8:	11 f4       	brne	.+4      	; 0x51ce <__stack+0x11cf>
    51ca:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    51ce:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    51d2:	1f 92       	push	r1
    51d4:	8f 93       	push	r24
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	94 e2       	ldi	r25, 0x24	; 36
    51da:	9f 93       	push	r25
    51dc:	8f 93       	push	r24
    51de:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    51e2:	0f 90       	pop	r0
    51e4:	0f 90       	pop	r0
    51e6:	0f 90       	pop	r0
    51e8:	0f 90       	pop	r0
    51ea:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
              break; 
            }
            case '2': //Axis 2
            {
              if(EchoON) printf("!1402\t%u\n\r",AxisIsMoving2);
    51ee:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    51f2:	88 23       	and	r24, r24
    51f4:	11 f4       	brne	.+4      	; 0x51fa <__stack+0x11fb>
    51f6:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    51fa:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    51fe:	1f 92       	push	r1
    5200:	8f 93       	push	r24
    5202:	8c e0       	ldi	r24, 0x0C	; 12
    5204:	94 e2       	ldi	r25, 0x24	; 36
    5206:	9f 93       	push	r25
    5208:	8f 93       	push	r24
    520a:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    520e:	0f 90       	pop	r0
    5210:	0f 90       	pop	r0
    5212:	0f 90       	pop	r0
    5214:	0f 90       	pop	r0
    5216:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
              break; 
            }
            case '3': //Axis 3
            {
              if(EchoON) printf("!1403\t%u\n\r",AxisIsMoving3);
    521a:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    521e:	88 23       	and	r24, r24
    5220:	11 f4       	brne	.+4      	; 0x5226 <__stack+0x1227>
    5222:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    5226:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    522a:	1f 92       	push	r1
    522c:	8f 93       	push	r24
    522e:	87 e1       	ldi	r24, 0x17	; 23
    5230:	94 e2       	ldi	r25, 0x24	; 36
    5232:	9f 93       	push	r25
    5234:	8f 93       	push	r24
    5236:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    523a:	0f 90       	pop	r0
    523c:	0f 90       	pop	r0
    523e:	0f 90       	pop	r0
    5240:	0f 90       	pop	r0
    5242:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
              break; 
            }            
         }
       }
    }
    else if(strncmp(cmdTemp,"?15",3)==0)
    5246:	43 e0       	ldi	r20, 0x03	; 3
    5248:	50 e0       	ldi	r21, 0x00	; 0
    524a:	62 e2       	ldi	r22, 0x22	; 34
    524c:	74 e2       	ldi	r23, 0x24	; 36
    524e:	80 e1       	ldi	r24, 0x10	; 16
    5250:	97 e2       	ldi	r25, 0x27	; 39
    5252:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5256:	89 2b       	or	r24, r25
    5258:	09 f0       	breq	.+2      	; 0x525c <__stack+0x125d>
    525a:	71 c0       	rjmp	.+226    	; 0x533e <__stack+0x133f>
    {//Read Axis Speed
       if(cmdTemp[3]=='0')
    525c:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    5260:	80 33       	cpi	r24, 0x30	; 48
    5262:	11 f0       	breq	.+4      	; 0x5268 <__stack+0x1269>
    5264:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         switch(cmdTemp[4])
    5268:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    526c:	82 33       	cpi	r24, 0x32	; 50
    526e:	39 f1       	breq	.+78     	; 0x52be <__stack+0x12bf>
    5270:	83 33       	cpi	r24, 0x33	; 51
    5272:	09 f4       	brne	.+2      	; 0x5276 <__stack+0x1277>
    5274:	44 c0       	rjmp	.+136    	; 0x52fe <__stack+0x12ff>
    5276:	81 33       	cpi	r24, 0x31	; 49
    5278:	11 f0       	breq	.+4      	; 0x527e <__stack+0x127f>
    527a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         {
            case '1': //Axis 1
            {
              if(EchoON) printf("!1501\t%u",SetSpeed1);                      
    527e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    5282:	88 23       	and	r24, r24
    5284:	11 f4       	brne	.+4      	; 0x528a <__stack+0x128b>
    5286:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    528a:	80 91 7c 27 	lds	r24, 0x277C	; 0x80277c <SetSpeed1+0x3>
    528e:	8f 93       	push	r24
    5290:	80 91 7b 27 	lds	r24, 0x277B	; 0x80277b <SetSpeed1+0x2>
    5294:	8f 93       	push	r24
    5296:	80 91 7a 27 	lds	r24, 0x277A	; 0x80277a <SetSpeed1+0x1>
    529a:	8f 93       	push	r24
    529c:	80 91 79 27 	lds	r24, 0x2779	; 0x802779 <SetSpeed1>
    52a0:	8f 93       	push	r24
    52a2:	86 e2       	ldi	r24, 0x26	; 38
    52a4:	94 e2       	ldi	r25, 0x24	; 36
    52a6:	9f 93       	push	r25
    52a8:	8f 93       	push	r24
    52aa:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    52ae:	0f 90       	pop	r0
    52b0:	0f 90       	pop	r0
    52b2:	0f 90       	pop	r0
    52b4:	0f 90       	pop	r0
    52b6:	0f 90       	pop	r0
    52b8:	0f 90       	pop	r0
    52ba:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
              break; 
            }
            case '2': //Axis 2
            {
              if(EchoON) printf("!1502\t%u",SetSpeed2);
    52be:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    52c2:	88 23       	and	r24, r24
    52c4:	11 f4       	brne	.+4      	; 0x52ca <__stack+0x12cb>
    52c6:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    52ca:	80 91 78 27 	lds	r24, 0x2778	; 0x802778 <SetSpeed2+0x3>
    52ce:	8f 93       	push	r24
    52d0:	80 91 77 27 	lds	r24, 0x2777	; 0x802777 <SetSpeed2+0x2>
    52d4:	8f 93       	push	r24
    52d6:	80 91 76 27 	lds	r24, 0x2776	; 0x802776 <SetSpeed2+0x1>
    52da:	8f 93       	push	r24
    52dc:	80 91 75 27 	lds	r24, 0x2775	; 0x802775 <SetSpeed2>
    52e0:	8f 93       	push	r24
    52e2:	8f e2       	ldi	r24, 0x2F	; 47
    52e4:	94 e2       	ldi	r25, 0x24	; 36
    52e6:	9f 93       	push	r25
    52e8:	8f 93       	push	r24
    52ea:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    52ee:	0f 90       	pop	r0
    52f0:	0f 90       	pop	r0
    52f2:	0f 90       	pop	r0
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	0f 90       	pop	r0
    52fa:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
              break; 
            }
            case '3': //Axis 3
            {
              if(EchoON) printf("!1503\t%u",SetSpeed3);
    52fe:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    5302:	88 23       	and	r24, r24
    5304:	11 f4       	brne	.+4      	; 0x530a <__stack+0x130b>
    5306:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
    530a:	80 91 74 27 	lds	r24, 0x2774	; 0x802774 <SetSpeed3+0x3>
    530e:	8f 93       	push	r24
    5310:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <SetSpeed3+0x2>
    5314:	8f 93       	push	r24
    5316:	80 91 72 27 	lds	r24, 0x2772	; 0x802772 <SetSpeed3+0x1>
    531a:	8f 93       	push	r24
    531c:	80 91 71 27 	lds	r24, 0x2771	; 0x802771 <SetSpeed3>
    5320:	8f 93       	push	r24
    5322:	88 e3       	ldi	r24, 0x38	; 56
    5324:	94 e2       	ldi	r25, 0x24	; 36
    5326:	9f 93       	push	r25
    5328:	8f 93       	push	r24
    532a:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    532e:	0f 90       	pop	r0
    5330:	0f 90       	pop	r0
    5332:	0f 90       	pop	r0
    5334:	0f 90       	pop	r0
    5336:	0f 90       	pop	r0
    5338:	0f 90       	pop	r0
    533a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
              break; 
            }            
         }
       }
    }
    else if(strncmp(cmdTemp,"#16",3)==0)
    533e:	43 e0       	ldi	r20, 0x03	; 3
    5340:	50 e0       	ldi	r21, 0x00	; 0
    5342:	61 e4       	ldi	r22, 0x41	; 65
    5344:	74 e2       	ldi	r23, 0x24	; 36
    5346:	80 e1       	ldi	r24, 0x10	; 16
    5348:	97 e2       	ldi	r25, 0x27	; 39
    534a:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    534e:	89 2b       	or	r24, r25
    5350:	09 f0       	breq	.+2      	; 0x5354 <__stack+0x1355>
    5352:	ef c0       	rjmp	.+478    	; 0x5532 <__stack+0x1533>
    {// Set ACC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5354:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    5358:	81 11       	cpse	r24, r1
    535a:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__stack+0x27ab>
    535e:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    5362:	81 11       	cpse	r24, r1
    5364:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__stack+0x27ab>
    5368:	91 e0       	ldi	r25, 0x01	; 1
    536a:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    536e:	21 11       	cpse	r18, r1
    5370:	01 c0       	rjmp	.+2      	; 0x5374 <__stack+0x1375>
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    5378:	21 e0       	ldi	r18, 0x01	; 1
    537a:	30 91 bc 27 	lds	r19, 0x27BC	; 0x8027bc <ProgramRun>
    537e:	31 11       	cpse	r19, r1
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	92 17       	cp	r25, r18
    5384:	10 f0       	brcs	.+4      	; 0x538a <__stack+0x138b>
    5386:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
     {
      if(cmdTemp[3]=='0')
    538a:	90 91 13 27 	lds	r25, 0x2713	; 0x802713 <cmdTemp+0x3>
    538e:	90 33       	cpi	r25, 0x30	; 48
    5390:	11 f0       	breq	.+4      	; 0x5396 <__stack+0x1397>
    5392:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         switch(cmdTemp[4])
    5396:	90 91 14 27 	lds	r25, 0x2714	; 0x802714 <cmdTemp+0x4>
    539a:	92 33       	cpi	r25, 0x32	; 50
    539c:	09 f4       	brne	.+2      	; 0x53a0 <__stack+0x13a1>
    539e:	45 c0       	rjmp	.+138    	; 0x542a <__stack+0x142b>
    53a0:	93 33       	cpi	r25, 0x33	; 51
    53a2:	09 f4       	brne	.+2      	; 0x53a6 <__stack+0x13a7>
    53a4:	84 c0       	rjmp	.+264    	; 0x54ae <__stack+0x14af>
    53a6:	91 33       	cpi	r25, 0x31	; 49
    53a8:	11 f0       	breq	.+4      	; 0x53ae <__stack+0x13af>
    53aa:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    53ae:	28 2f       	mov	r18, r24
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	f9 01       	movw	r30, r18
    53b4:	e5 50       	subi	r30, 0x05	; 5
    53b6:	f9 4d       	sbci	r31, 0xD9	; 217
    53b8:	d9 01       	movw	r26, r18
    53ba:	a0 5f       	subi	r26, 0xF0	; 240
    53bc:	b8 4d       	sbci	r27, 0xD8	; 216
    53be:	15 96       	adiw	r26, 0x05	; 5
    53c0:	9c 91       	ld	r25, X
    53c2:	90 83       	st	Z, r25
       {
         switch(cmdTemp[4])
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
    53c4:	8f 5f       	subi	r24, 0xFF	; 255
    53c6:	8a 30       	cpi	r24, 0x0A	; 10
    53c8:	90 f3       	brcs	.-28     	; 0x53ae <__stack+0x13af>
    53ca:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    53ce:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              ACC1=atof(temp);  
    53d2:	8b ef       	ldi	r24, 0xFB	; 251
    53d4:	96 e2       	ldi	r25, 0x26	; 38
    53d6:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    53da:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    53de:	60 93 69 27 	sts	0x2769, r22	; 0x802769 <ACC1>
    53e2:	70 93 6a 27 	sts	0x276A, r23	; 0x80276a <ACC1+0x1>
    53e6:	80 93 6b 27 	sts	0x276B, r24	; 0x80276b <ACC1+0x2>
    53ea:	90 93 6c 27 	sts	0x276C, r25	; 0x80276c <ACC1+0x3>
              sprintf(BufferSend,"!1601\t%s\r\n",temp); 
    53ee:	ab ef       	ldi	r26, 0xFB	; 251
    53f0:	b6 e2       	ldi	r27, 0x26	; 38
    53f2:	bf 93       	push	r27
    53f4:	af 93       	push	r26
    53f6:	85 e4       	ldi	r24, 0x45	; 69
    53f8:	94 e2       	ldi	r25, 0x24	; 36
    53fa:	9f 93       	push	r25
    53fc:	8f 93       	push	r24
    53fe:	87 e5       	ldi	r24, 0x57	; 87
    5400:	99 e2       	ldi	r25, 0x29	; 41
    5402:	9f 93       	push	r25
    5404:	8f 93       	push	r24
    5406:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1;    
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5410:	e0 ea       	ldi	r30, 0xA0	; 160
    5412:	f6 e0       	ldi	r31, 0x06	; 6
    5414:	84 81       	ldd	r24, Z+4	; 0x04
    5416:	81 60       	ori	r24, 0x01	; 1
    5418:	84 83       	std	Z+4, r24	; 0x04
              break; 
    541a:	0f 90       	pop	r0
    541c:	0f 90       	pop	r0
    541e:	0f 90       	pop	r0
    5420:	0f 90       	pop	r0
    5422:	0f 90       	pop	r0
    5424:	0f 90       	pop	r0
    5426:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }
            case '2': //Axis 2
            { 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    542a:	28 2f       	mov	r18, r24
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	f9 01       	movw	r30, r18
    5430:	e5 50       	subi	r30, 0x05	; 5
    5432:	f9 4d       	sbci	r31, 0xD9	; 217
    5434:	d9 01       	movw	r26, r18
    5436:	a0 5f       	subi	r26, 0xF0	; 240
    5438:	b8 4d       	sbci	r27, 0xD8	; 216
    543a:	15 96       	adiw	r26, 0x05	; 5
    543c:	9c 91       	ld	r25, X
    543e:	90 83       	st	Z, r25
              SetDataReady;
              break; 
            }
            case '2': //Axis 2
            { 
              for(k=0;k<10;k++)
    5440:	8f 5f       	subi	r24, 0xFF	; 255
    5442:	8a 30       	cpi	r24, 0x0A	; 10
    5444:	90 f3       	brcs	.-28     	; 0x542a <__stack+0x142b>
    5446:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    544a:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              ACC2=atof(temp);   
    544e:	8b ef       	ldi	r24, 0xFB	; 251
    5450:	96 e2       	ldi	r25, 0x26	; 38
    5452:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    5456:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    545a:	60 93 65 27 	sts	0x2765, r22	; 0x802765 <ACC2>
    545e:	70 93 66 27 	sts	0x2766, r23	; 0x802766 <ACC2+0x1>
    5462:	80 93 67 27 	sts	0x2767, r24	; 0x802767 <ACC2+0x2>
    5466:	90 93 68 27 	sts	0x2768, r25	; 0x802768 <ACC2+0x3>
              sprintf(BufferSend,"!1602\t%s\r\n",temp); 
    546a:	0f 2e       	mov	r0, r31
    546c:	fb ef       	ldi	r31, 0xFB	; 251
    546e:	af 2e       	mov	r10, r31
    5470:	f6 e2       	ldi	r31, 0x26	; 38
    5472:	bf 2e       	mov	r11, r31
    5474:	f0 2d       	mov	r31, r0
    5476:	bf 92       	push	r11
    5478:	af 92       	push	r10
    547a:	80 e5       	ldi	r24, 0x50	; 80
    547c:	94 e2       	ldi	r25, 0x24	; 36
    547e:	9f 93       	push	r25
    5480:	8f 93       	push	r24
    5482:	87 e5       	ldi	r24, 0x57	; 87
    5484:	99 e2       	ldi	r25, 0x29	; 41
    5486:	9f 93       	push	r25
    5488:	8f 93       	push	r24
    548a:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1;  
    548e:	81 e0       	ldi	r24, 0x01	; 1
    5490:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5494:	e0 ea       	ldi	r30, 0xA0	; 160
    5496:	f6 e0       	ldi	r31, 0x06	; 6
    5498:	84 81       	ldd	r24, Z+4	; 0x04
    549a:	81 60       	ori	r24, 0x01	; 1
    549c:	84 83       	std	Z+4, r24	; 0x04
              break; 
    549e:	0f 90       	pop	r0
    54a0:	0f 90       	pop	r0
    54a2:	0f 90       	pop	r0
    54a4:	0f 90       	pop	r0
    54a6:	0f 90       	pop	r0
    54a8:	0f 90       	pop	r0
    54aa:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    54ae:	28 2f       	mov	r18, r24
    54b0:	30 e0       	ldi	r19, 0x00	; 0
    54b2:	f9 01       	movw	r30, r18
    54b4:	e5 50       	subi	r30, 0x05	; 5
    54b6:	f9 4d       	sbci	r31, 0xD9	; 217
    54b8:	d9 01       	movw	r26, r18
    54ba:	a0 5f       	subi	r26, 0xF0	; 240
    54bc:	b8 4d       	sbci	r27, 0xD8	; 216
    54be:	15 96       	adiw	r26, 0x05	; 5
    54c0:	9c 91       	ld	r25, X
    54c2:	90 83       	st	Z, r25
              SetDataReady;
              break; 
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
    54c4:	8f 5f       	subi	r24, 0xFF	; 255
    54c6:	8a 30       	cpi	r24, 0x0A	; 10
    54c8:	90 f3       	brcs	.-28     	; 0x54ae <__stack+0x14af>
    54ca:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    54ce:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              ACC3=atof(temp);   
    54d2:	8b ef       	ldi	r24, 0xFB	; 251
    54d4:	96 e2       	ldi	r25, 0x26	; 38
    54d6:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    54da:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    54de:	60 93 61 27 	sts	0x2761, r22	; 0x802761 <ACC3>
    54e2:	70 93 62 27 	sts	0x2762, r23	; 0x802762 <ACC3+0x1>
    54e6:	80 93 63 27 	sts	0x2763, r24	; 0x802763 <ACC3+0x2>
    54ea:	90 93 64 27 	sts	0x2764, r25	; 0x802764 <ACC3+0x3>
              sprintf(BufferSend,"!1603\t%s\r\n",temp); 
    54ee:	0f 2e       	mov	r0, r31
    54f0:	fb ef       	ldi	r31, 0xFB	; 251
    54f2:	ef 2e       	mov	r14, r31
    54f4:	f6 e2       	ldi	r31, 0x26	; 38
    54f6:	ff 2e       	mov	r15, r31
    54f8:	f0 2d       	mov	r31, r0
    54fa:	ff 92       	push	r15
    54fc:	ef 92       	push	r14
    54fe:	8b e5       	ldi	r24, 0x5B	; 91
    5500:	94 e2       	ldi	r25, 0x24	; 36
    5502:	9f 93       	push	r25
    5504:	8f 93       	push	r24
    5506:	87 e5       	ldi	r24, 0x57	; 87
    5508:	99 e2       	ldi	r25, 0x29	; 41
    550a:	9f 93       	push	r25
    550c:	8f 93       	push	r24
    550e:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1;
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5518:	e0 ea       	ldi	r30, 0xA0	; 160
    551a:	f6 e0       	ldi	r31, 0x06	; 6
    551c:	84 81       	ldd	r24, Z+4	; 0x04
    551e:	81 60       	ori	r24, 0x01	; 1
    5520:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5522:	0f 90       	pop	r0
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	0f 90       	pop	r0
    552a:	0f 90       	pop	r0
    552c:	0f 90       	pop	r0
    552e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            
         }
       }          
      }
    }
    else if(strncmp(cmdTemp,"#17",3)==0)
    5532:	43 e0       	ldi	r20, 0x03	; 3
    5534:	50 e0       	ldi	r21, 0x00	; 0
    5536:	66 e6       	ldi	r22, 0x66	; 102
    5538:	74 e2       	ldi	r23, 0x24	; 36
    553a:	80 e1       	ldi	r24, 0x10	; 16
    553c:	97 e2       	ldi	r25, 0x27	; 39
    553e:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5542:	89 2b       	or	r24, r25
    5544:	09 f0       	breq	.+2      	; 0x5548 <__stack+0x1549>
    5546:	ee c0       	rjmp	.+476    	; 0x5724 <__stack+0x1725>
    {// Set DEC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5548:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    554c:	81 11       	cpse	r24, r1
    554e:	0c 94 d9 33 	jmp	0x67b2	; 0x67b2 <__stack+0x27b3>
    5552:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    5556:	81 11       	cpse	r24, r1
    5558:	0c 94 d9 33 	jmp	0x67b2	; 0x67b2 <__stack+0x27b3>
    555c:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    5560:	21 e0       	ldi	r18, 0x01	; 1
    5562:	91 11       	cpse	r25, r1
    5564:	01 c0       	rjmp	.+2      	; 0x5568 <__stack+0x1569>
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    556c:	31 e0       	ldi	r19, 0x01	; 1
    556e:	40 91 bc 27 	lds	r20, 0x27BC	; 0x8027bc <ProgramRun>
    5572:	41 11       	cpse	r20, r1
    5574:	30 e0       	ldi	r19, 0x00	; 0
    5576:	23 17       	cp	r18, r19
    5578:	10 f0       	brcs	.+4      	; 0x557e <__stack+0x157f>
    557a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
     {     
       if(cmdTemp[3]=='0')
    557e:	20 91 13 27 	lds	r18, 0x2713	; 0x802713 <cmdTemp+0x3>
    5582:	20 33       	cpi	r18, 0x30	; 48
    5584:	11 f0       	breq	.+4      	; 0x558a <__stack+0x158b>
    5586:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
       {
         switch(cmdTemp[4])
    558a:	20 91 14 27 	lds	r18, 0x2714	; 0x802714 <cmdTemp+0x4>
    558e:	22 33       	cpi	r18, 0x32	; 50
    5590:	09 f4       	brne	.+2      	; 0x5594 <__stack+0x1595>
    5592:	45 c0       	rjmp	.+138    	; 0x561e <__stack+0x161f>
    5594:	23 33       	cpi	r18, 0x33	; 51
    5596:	09 f4       	brne	.+2      	; 0x559a <__stack+0x159b>
    5598:	80 c0       	rjmp	.+256    	; 0x569a <__stack+0x169b>
    559a:	21 33       	cpi	r18, 0x31	; 49
    559c:	11 f0       	breq	.+4      	; 0x55a2 <__stack+0x15a3>
    559e:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    55a2:	28 2f       	mov	r18, r24
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	f9 01       	movw	r30, r18
    55a8:	e5 50       	subi	r30, 0x05	; 5
    55aa:	f9 4d       	sbci	r31, 0xD9	; 217
    55ac:	d9 01       	movw	r26, r18
    55ae:	a0 5f       	subi	r26, 0xF0	; 240
    55b0:	b8 4d       	sbci	r27, 0xD8	; 216
    55b2:	15 96       	adiw	r26, 0x05	; 5
    55b4:	9c 91       	ld	r25, X
    55b6:	90 83       	st	Z, r25
            {
              while(AxisIsMoving1)
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
    55b8:	8f 5f       	subi	r24, 0xFF	; 255
    55ba:	8a 30       	cpi	r24, 0x0A	; 10
    55bc:	90 f3       	brcs	.-28     	; 0x55a2 <__stack+0x15a3>
    55be:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    55c2:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              DEC1=atof(temp);  
    55c6:	8b ef       	ldi	r24, 0xFB	; 251
    55c8:	96 e2       	ldi	r25, 0x26	; 38
    55ca:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    55ce:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    55d2:	60 93 5d 27 	sts	0x275D, r22	; 0x80275d <DEC1>
    55d6:	70 93 5e 27 	sts	0x275E, r23	; 0x80275e <DEC1+0x1>
    55da:	80 93 5f 27 	sts	0x275F, r24	; 0x80275f <DEC1+0x2>
    55de:	90 93 60 27 	sts	0x2760, r25	; 0x802760 <DEC1+0x3>
              sprintf(BufferSend,"!1701\t%s\r\n",temp); 
    55e2:	2b ef       	ldi	r18, 0xFB	; 251
    55e4:	36 e2       	ldi	r19, 0x26	; 38
    55e6:	3f 93       	push	r19
    55e8:	2f 93       	push	r18
    55ea:	8a e6       	ldi	r24, 0x6A	; 106
    55ec:	94 e2       	ldi	r25, 0x24	; 36
    55ee:	9f 93       	push	r25
    55f0:	8f 93       	push	r24
    55f2:	87 e5       	ldi	r24, 0x57	; 87
    55f4:	99 e2       	ldi	r25, 0x29	; 41
    55f6:	9f 93       	push	r25
    55f8:	8f 93       	push	r24
    55fa:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1;  
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5604:	e0 ea       	ldi	r30, 0xA0	; 160
    5606:	f6 e0       	ldi	r31, 0x06	; 6
    5608:	84 81       	ldd	r24, Z+4	; 0x04
    560a:	81 60       	ori	r24, 0x01	; 1
    560c:	84 83       	std	Z+4, r24	; 0x04
              break; 
    560e:	0f 90       	pop	r0
    5610:	0f 90       	pop	r0
    5612:	0f 90       	pop	r0
    5614:	0f 90       	pop	r0
    5616:	0f 90       	pop	r0
    5618:	0f 90       	pop	r0
    561a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
              {
                 /*wait until Is Moving*/
              }
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    561e:	28 2f       	mov	r18, r24
    5620:	30 e0       	ldi	r19, 0x00	; 0
    5622:	f9 01       	movw	r30, r18
    5624:	e5 50       	subi	r30, 0x05	; 5
    5626:	f9 4d       	sbci	r31, 0xD9	; 217
    5628:	d9 01       	movw	r26, r18
    562a:	a0 5f       	subi	r26, 0xF0	; 240
    562c:	b8 4d       	sbci	r27, 0xD8	; 216
    562e:	15 96       	adiw	r26, 0x05	; 5
    5630:	9c 91       	ld	r25, X
    5632:	90 83       	st	Z, r25
            {
              while(AxisIsMoving2)
              {
                 /*wait until Is Moving*/
              }
              for(k=0;k<10;k++)
    5634:	8f 5f       	subi	r24, 0xFF	; 255
    5636:	8a 30       	cpi	r24, 0x0A	; 10
    5638:	90 f3       	brcs	.-28     	; 0x561e <__stack+0x161f>
    563a:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    563e:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              DEC2=atof(temp);  
    5642:	8b ef       	ldi	r24, 0xFB	; 251
    5644:	96 e2       	ldi	r25, 0x26	; 38
    5646:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    564a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    564e:	60 93 59 27 	sts	0x2759, r22	; 0x802759 <DEC2>
    5652:	70 93 5a 27 	sts	0x275A, r23	; 0x80275a <DEC2+0x1>
    5656:	80 93 5b 27 	sts	0x275B, r24	; 0x80275b <DEC2+0x2>
    565a:	90 93 5c 27 	sts	0x275C, r25	; 0x80275c <DEC2+0x3>
              sprintf(BufferSend,"!1702\t%s\r\n",temp); 
    565e:	8b ef       	ldi	r24, 0xFB	; 251
    5660:	96 e2       	ldi	r25, 0x26	; 38
    5662:	9f 93       	push	r25
    5664:	8f 93       	push	r24
    5666:	85 e7       	ldi	r24, 0x75	; 117
    5668:	94 e2       	ldi	r25, 0x24	; 36
    566a:	9f 93       	push	r25
    566c:	8f 93       	push	r24
    566e:	87 e5       	ldi	r24, 0x57	; 87
    5670:	99 e2       	ldi	r25, 0x29	; 41
    5672:	9f 93       	push	r25
    5674:	8f 93       	push	r24
    5676:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1;
    567a:	81 e0       	ldi	r24, 0x01	; 1
    567c:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5680:	e0 ea       	ldi	r30, 0xA0	; 160
    5682:	f6 e0       	ldi	r31, 0x06	; 6
    5684:	84 81       	ldd	r24, Z+4	; 0x04
    5686:	81 60       	ori	r24, 0x01	; 1
    5688:	84 83       	std	Z+4, r24	; 0x04
              break; 
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }
            case '3': //Axis 3
            {
              while(AxisIsMoving3)
    569a:	91 11       	cpse	r25, r1
    569c:	fe cf       	rjmp	.-4      	; 0x569a <__stack+0x169b>
    569e:	29 2f       	mov	r18, r25
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    56a0:	82 2f       	mov	r24, r18
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	fc 01       	movw	r30, r24
    56a6:	e5 50       	subi	r30, 0x05	; 5
    56a8:	f9 4d       	sbci	r31, 0xD9	; 217
    56aa:	dc 01       	movw	r26, r24
    56ac:	a0 5f       	subi	r26, 0xF0	; 240
    56ae:	b8 4d       	sbci	r27, 0xD8	; 216
    56b0:	15 96       	adiw	r26, 0x05	; 5
    56b2:	8c 91       	ld	r24, X
    56b4:	80 83       	st	Z, r24
            {
              while(AxisIsMoving3)
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
    56b6:	2f 5f       	subi	r18, 0xFF	; 255
    56b8:	2a 30       	cpi	r18, 0x0A	; 10
    56ba:	90 f3       	brcs	.-28     	; 0x56a0 <__stack+0x16a1>
    56bc:	20 93 25 27 	sts	0x2725, r18	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    56c0:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              DEC3=atof(temp);  
    56c4:	8b ef       	ldi	r24, 0xFB	; 251
    56c6:	96 e2       	ldi	r25, 0x26	; 38
    56c8:	0e 94 23 40 	call	0x8046	; 0x8046 <atof>
    56cc:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    56d0:	60 93 55 27 	sts	0x2755, r22	; 0x802755 <DEC3>
    56d4:	70 93 56 27 	sts	0x2756, r23	; 0x802756 <DEC3+0x1>
    56d8:	80 93 57 27 	sts	0x2757, r24	; 0x802757 <DEC3+0x2>
    56dc:	90 93 58 27 	sts	0x2758, r25	; 0x802758 <DEC3+0x3>
              sprintf(BufferSend,"!1703\t%s\r\n",temp); 
    56e0:	0f 2e       	mov	r0, r31
    56e2:	fb ef       	ldi	r31, 0xFB	; 251
    56e4:	8f 2e       	mov	r8, r31
    56e6:	f6 e2       	ldi	r31, 0x26	; 38
    56e8:	9f 2e       	mov	r9, r31
    56ea:	f0 2d       	mov	r31, r0
    56ec:	9f 92       	push	r9
    56ee:	8f 92       	push	r8
    56f0:	80 e8       	ldi	r24, 0x80	; 128
    56f2:	94 e2       	ldi	r25, 0x24	; 36
    56f4:	9f 93       	push	r25
    56f6:	8f 93       	push	r24
    56f8:	87 e5       	ldi	r24, 0x57	; 87
    56fa:	99 e2       	ldi	r25, 0x29	; 41
    56fc:	9f 93       	push	r25
    56fe:	8f 93       	push	r24
    5700:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
              Responsing=1;    
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    570a:	e0 ea       	ldi	r30, 0xA0	; 160
    570c:	f6 e0       	ldi	r31, 0x06	; 6
    570e:	84 81       	ldd	r24, Z+4	; 0x04
    5710:	81 60       	ori	r24, 0x01	; 1
    5712:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5714:	0f 90       	pop	r0
    5716:	0f 90       	pop	r0
    5718:	0f 90       	pop	r0
    571a:	0f 90       	pop	r0
    571c:	0f 90       	pop	r0
    571e:	0f 90       	pop	r0
    5720:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
            }            
         }
       }
     }
    }                          
    else if(strncmp(cmdTemp,"#1800",5)==0)
    5724:	45 e0       	ldi	r20, 0x05	; 5
    5726:	50 e0       	ldi	r21, 0x00	; 0
    5728:	6b e8       	ldi	r22, 0x8B	; 139
    572a:	74 e2       	ldi	r23, 0x24	; 36
    572c:	80 e1       	ldi	r24, 0x10	; 16
    572e:	97 e2       	ldi	r25, 0x27	; 39
    5730:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5734:	89 2b       	or	r24, r25
    5736:	09 f0       	breq	.+2      	; 0x573a <__stack+0x173b>
    5738:	02 c1       	rjmp	.+516    	; 0x593e <__stack+0x193f>
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
    573a:	20 91 48 27 	lds	r18, 0x2748	; 0x802748 <AxisIsMoving1>
    573e:	21 11       	cpse	r18, r1
    5740:	0b c0       	rjmp	.+22     	; 0x5758 <__stack+0x1759>
    5742:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    5746:	81 11       	cpse	r24, r1
    5748:	09 c0       	rjmp	.+18     	; 0x575c <__stack+0x175d>
    574a:	91 e0       	ldi	r25, 0x01	; 1
    574c:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    5750:	81 11       	cpse	r24, r1
    5752:	05 c0       	rjmp	.+10     	; 0x575e <__stack+0x175f>
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	03 c0       	rjmp	.+6      	; 0x575e <__stack+0x175f>
    5758:	91 e0       	ldi	r25, 0x01	; 1
    575a:	01 c0       	rjmp	.+2      	; 0x575e <__stack+0x175f>
    575c:	91 e0       	ldi	r25, 0x01	; 1
    575e:	89 2f       	mov	r24, r25
    5760:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
     if (!ProgramRun)
    5764:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    5768:	91 11       	cpse	r25, r1
    576a:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__stack+0x27f5>
     {
      while (AxisMoving == 1) 
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    576e:	30 91 47 27 	lds	r19, 0x2747	; 0x802747 <AxisIsMoving2>
    5772:	91 e0       	ldi	r25, 0x01	; 1
    5774:	40 91 46 27 	lds	r20, 0x2746	; 0x802746 <AxisIsMoving3>
    5778:	41 11       	cpse	r20, r1
    577a:	01 c0       	rjmp	.+2      	; 0x577e <__stack+0x177f>
    577c:	90 e0       	ldi	r25, 0x00	; 0
    else if(strncmp(cmdTemp,"#1800",5)==0)
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    577e:	81 30       	cpi	r24, 0x01	; 1
    5780:	51 f4       	brne	.+20     	; 0x5796 <__stack+0x1797>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5782:	21 11       	cpse	r18, r1
    5784:	04 c0       	rjmp	.+8      	; 0x578e <__stack+0x178f>
    5786:	31 11       	cpse	r19, r1
    5788:	04 c0       	rjmp	.+8      	; 0x5792 <__stack+0x1793>
    578a:	89 2f       	mov	r24, r25
    578c:	f8 cf       	rjmp	.-16     	; 0x577e <__stack+0x177f>
    578e:	81 e0       	ldi	r24, 0x01	; 1
    5790:	f6 cf       	rjmp	.-20     	; 0x577e <__stack+0x177f>
    5792:	81 e0       	ldi	r24, 0x01	; 1
    else if(strncmp(cmdTemp,"#1800",5)==0)
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    5794:	f4 cf       	rjmp	.-24     	; 0x577e <__stack+0x177f>
    5796:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }   
      
      printf("RefDir : %u\r\n",Axes[0].RefrenceDir);
    579a:	80 91 d9 27 	lds	r24, 0x27D9	; 0x8027d9 <Axes+0x1c>
    579e:	1f 92       	push	r1
    57a0:	8f 93       	push	r24
    57a2:	81 e9       	ldi	r24, 0x91	; 145
    57a4:	94 e2       	ldi	r25, 0x24	; 36
    57a6:	9f 93       	push	r25
    57a8:	8f 93       	push	r24
    57aa:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
      if(Axes[0].RefrenceDir==1)
    57ae:	80 91 d9 27 	lds	r24, 0x27D9	; 0x8027d9 <Axes+0x1c>
    57b2:	0f 90       	pop	r0
    57b4:	0f 90       	pop	r0
    57b6:	0f 90       	pop	r0
    57b8:	0f 90       	pop	r0
    57ba:	81 30       	cpi	r24, 0x01	; 1
    57bc:	31 f4       	brne	.+12     	; 0x57ca <__stack+0x17cb>
      {
        
        CLR_DIR1;
    57be:	e0 e2       	ldi	r30, 0x20	; 32
    57c0:	f7 e0       	ldi	r31, 0x07	; 7
    57c2:	84 81       	ldd	r24, Z+4	; 0x04
    57c4:	8f 7e       	andi	r24, 0xEF	; 239
    57c6:	84 83       	std	Z+4, r24	; 0x04
    57c8:	07 c0       	rjmp	.+14     	; 0x57d8 <__stack+0x17d9>
      }
      else if(Axes[0].RefrenceDir==0)
    57ca:	81 11       	cpse	r24, r1
    57cc:	05 c0       	rjmp	.+10     	; 0x57d8 <__stack+0x17d9>
      {
        SET_DIR1;
    57ce:	e0 e2       	ldi	r30, 0x20	; 32
    57d0:	f7 e0       	ldi	r31, 0x07	; 7
    57d2:	84 81       	ldd	r24, Z+4	; 0x04
    57d4:	80 61       	ori	r24, 0x10	; 16
    57d6:	84 83       	std	Z+4, r24	; 0x04
      } 
      
      if(Axes[1].RefrenceDir==1)
    57d8:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <Axes+0x47>
    57dc:	81 30       	cpi	r24, 0x01	; 1
    57de:	31 f4       	brne	.+12     	; 0x57ec <__stack+0x17ed>
      {
        CLR_DIR2;
    57e0:	e0 e2       	ldi	r30, 0x20	; 32
    57e2:	f7 e0       	ldi	r31, 0x07	; 7
    57e4:	84 81       	ldd	r24, Z+4	; 0x04
    57e6:	8b 7f       	andi	r24, 0xFB	; 251
    57e8:	84 83       	std	Z+4, r24	; 0x04
    57ea:	07 c0       	rjmp	.+14     	; 0x57fa <__stack+0x17fb>
      }
      else if(Axes[1].RefrenceDir==0)
    57ec:	81 11       	cpse	r24, r1
    57ee:	05 c0       	rjmp	.+10     	; 0x57fa <__stack+0x17fb>
      {
        SET_DIR2;
    57f0:	e0 e2       	ldi	r30, 0x20	; 32
    57f2:	f7 e0       	ldi	r31, 0x07	; 7
    57f4:	84 81       	ldd	r24, Z+4	; 0x04
    57f6:	84 60       	ori	r24, 0x04	; 4
    57f8:	84 83       	std	Z+4, r24	; 0x04
      }
      
      if(Axes[2].RefrenceDir==1)
    57fa:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <Axes+0x72>
    57fe:	81 30       	cpi	r24, 0x01	; 1
    5800:	31 f4       	brne	.+12     	; 0x580e <__stack+0x180f>
      {
        CLR_DIR3;
    5802:	e0 e2       	ldi	r30, 0x20	; 32
    5804:	f7 e0       	ldi	r31, 0x07	; 7
    5806:	84 81       	ldd	r24, Z+4	; 0x04
    5808:	8e 7f       	andi	r24, 0xFE	; 254
    580a:	84 83       	std	Z+4, r24	; 0x04
    580c:	07 c0       	rjmp	.+14     	; 0x581c <__stack+0x181d>
      }
      else if(Axes[2].RefrenceDir==0)
    580e:	81 11       	cpse	r24, r1
    5810:	05 c0       	rjmp	.+10     	; 0x581c <__stack+0x181d>
      {
        SET_DIR3;
    5812:	e0 e2       	ldi	r30, 0x20	; 32
    5814:	f7 e0       	ldi	r31, 0x07	; 7
    5816:	84 81       	ldd	r24, Z+4	; 0x04
    5818:	81 60       	ori	r24, 0x01	; 1
    581a:	84 83       	std	Z+4, r24	; 0x04
      }       
                             
      MaxSpeed=8000;                         
    581c:	80 e4       	ldi	r24, 0x40	; 64
    581e:	9f e1       	ldi	r25, 0x1F	; 31
    5820:	a0 e0       	ldi	r26, 0x00	; 0
    5822:	b0 e0       	ldi	r27, 0x00	; 0
    5824:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    5828:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    582c:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    5830:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        
      CurSpeedFrq = MaxSpeed;
    5834:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <CurSpeedFrq>
    5838:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <CurSpeedFrq+0x1>
    583c:	a0 93 44 27 	sts	0x2744, r26	; 0x802744 <CurSpeedFrq+0x2>
    5840:	b0 93 45 27 	sts	0x2745, r27	; 0x802745 <CurSpeedFrq+0x3>
      ACC = 0;
    5844:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
      DEC = 0;
    5848:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
      TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);          
    584c:	80 e0       	ldi	r24, 0x00	; 0
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	a0 e0       	ldi	r26, 0x00	; 0
    5852:	b0 e4       	ldi	r27, 0x40	; 64
    5854:	80 93 28 27 	sts	0x2728, r24	; 0x802728 <TimerMainPeriod>
    5858:	90 93 29 27 	sts	0x2729, r25	; 0x802729 <TimerMainPeriod+0x1>
    585c:	a0 93 2a 27 	sts	0x272A, r26	; 0x80272a <TimerMainPeriod+0x2>
    5860:	b0 93 2b 27 	sts	0x272B, r27	; 0x80272b <TimerMainPeriod+0x3>
      RefCmd=1;
    5864:	bb 24       	eor	r11, r11
    5866:	b3 94       	inc	r11
    5868:	b0 92 f4 26 	sts	0x26F4, r11	; 0x8026f4 <RefCmd>
      Ma1=1000; 
    586c:	88 ee       	ldi	r24, 0xE8	; 232
    586e:	93 e0       	ldi	r25, 0x03	; 3
    5870:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    5874:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
      Ma2=1000;
    5878:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    587c:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
      Ma3=1000;
    5880:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    5884:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
      DistanceToGo1=0x7FFFFFFF;
    5888:	8f ef       	ldi	r24, 0xFF	; 255
    588a:	9f ef       	ldi	r25, 0xFF	; 255
    588c:	af ef       	ldi	r26, 0xFF	; 255
    588e:	bf e7       	ldi	r27, 0x7F	; 127
    5890:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    5894:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    5898:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    589c:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
      DistanceToGo2=0x7FFFFFFF;
    58a0:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    58a4:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    58a8:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    58ac:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
      DistanceToGo3=0x7FFFFFFF;   
    58b0:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    58b4:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    58b8:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    58bc:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
         
      tcc0_init();     
    58c0:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
      
      TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);                    
    58c4:	20 e0       	ldi	r18, 0x00	; 0
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	4a e7       	ldi	r20, 0x7A	; 122
    58ca:	54 e4       	ldi	r21, 0x44	; 68
    58cc:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    58d0:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    58d4:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    58d8:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    58dc:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    58e0:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    58e4:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    58e8:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                
      sprintf(BufferSend,"!1800\r\n"); 
    58ec:	88 e0       	ldi	r24, 0x08	; 8
    58ee:	e8 ed       	ldi	r30, 0xD8	; 216
    58f0:	f0 e2       	ldi	r31, 0x20	; 32
    58f2:	a7 e5       	ldi	r26, 0x57	; 87
    58f4:	b9 e2       	ldi	r27, 0x29	; 41
    58f6:	01 90       	ld	r0, Z+
    58f8:	0d 92       	st	X+, r0
    58fa:	8a 95       	dec	r24
    58fc:	e1 f7       	brne	.-8      	; 0x58f6 <__stack+0x18f7>
      AxisPosition1=0;
    58fe:	10 92 ac 27 	sts	0x27AC, r1	; 0x8027ac <AxisPosition1>
    5902:	10 92 ad 27 	sts	0x27AD, r1	; 0x8027ad <AxisPosition1+0x1>
    5906:	10 92 ae 27 	sts	0x27AE, r1	; 0x8027ae <AxisPosition1+0x2>
    590a:	10 92 af 27 	sts	0x27AF, r1	; 0x8027af <AxisPosition1+0x3>
      AxisPosition2=0;
    590e:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <AxisPosition2>
    5912:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <AxisPosition2+0x1>
    5916:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <AxisPosition2+0x2>
    591a:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <AxisPosition2+0x3>
      AxisPosition3=0;
    591e:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <AxisPosition3>
    5922:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <AxisPosition3+0x1>
    5926:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <AxisPosition3+0x2>
    592a:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <AxisPosition3+0x3>
      Responsing=1; 
    592e:	b0 92 8c 28 	sts	0x288C, r11	; 0x80288c <Responsing>
      SetDataReady;                      
    5932:	e0 ea       	ldi	r30, 0xA0	; 160
    5934:	f6 e0       	ldi	r31, 0x06	; 6
    5936:	84 81       	ldd	r24, Z+4	; 0x04
    5938:	81 60       	ori	r24, 0x01	; 1
    593a:	84 83       	std	Z+4, r24	; 0x04
    593c:	5b c7       	rjmp	.+3766   	; 0x67f4 <__stack+0x27f5>
     }
    }     
    else if(strncmp(cmdTemp,"#1901",5)==0)
    593e:	45 e0       	ldi	r20, 0x05	; 5
    5940:	50 e0       	ldi	r21, 0x00	; 0
    5942:	6f e9       	ldi	r22, 0x9F	; 159
    5944:	74 e2       	ldi	r23, 0x24	; 36
    5946:	80 e1       	ldi	r24, 0x10	; 16
    5948:	97 e2       	ldi	r25, 0x27	; 39
    594a:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    594e:	89 2b       	or	r24, r25
    5950:	a1 f4       	brne	.+40     	; 0x597a <__stack+0x197b>
    {
        RefDir1=0;  
    5952:	10 92 7f 27 	sts	0x277F, r1	; 0x80277f <RefDir1>
        sprintf(BufferSend,"!1901\r\n"); 
    5956:	88 e0       	ldi	r24, 0x08	; 8
    5958:	e5 ea       	ldi	r30, 0xA5	; 165
    595a:	f4 e2       	ldi	r31, 0x24	; 36
    595c:	a7 e5       	ldi	r26, 0x57	; 87
    595e:	b9 e2       	ldi	r27, 0x29	; 41
    5960:	01 90       	ld	r0, Z+
    5962:	0d 92       	st	X+, r0
    5964:	8a 95       	dec	r24
    5966:	e1 f7       	brne	.-8      	; 0x5960 <__stack+0x1961>
        Responsing=1; 
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;                    
    596e:	e0 ea       	ldi	r30, 0xA0	; 160
    5970:	f6 e0       	ldi	r31, 0x06	; 6
    5972:	84 81       	ldd	r24, Z+4	; 0x04
    5974:	81 60       	ori	r24, 0x01	; 1
    5976:	84 83       	std	Z+4, r24	; 0x04
    5978:	3d c7       	rjmp	.+3706   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#1902",5)==0)
    597a:	45 e0       	ldi	r20, 0x05	; 5
    597c:	50 e0       	ldi	r21, 0x00	; 0
    597e:	6d ea       	ldi	r22, 0xAD	; 173
    5980:	74 e2       	ldi	r23, 0x24	; 36
    5982:	80 e1       	ldi	r24, 0x10	; 16
    5984:	97 e2       	ldi	r25, 0x27	; 39
    5986:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    598a:	89 2b       	or	r24, r25
    598c:	a1 f4       	brne	.+40     	; 0x59b6 <__stack+0x19b7>
    {             
        RefDir2=0;    
    598e:	10 92 7e 27 	sts	0x277E, r1	; 0x80277e <RefDir2>
        sprintf(BufferSend,"!1902\r\n"); 
    5992:	88 e0       	ldi	r24, 0x08	; 8
    5994:	e3 eb       	ldi	r30, 0xB3	; 179
    5996:	f4 e2       	ldi	r31, 0x24	; 36
    5998:	a7 e5       	ldi	r26, 0x57	; 87
    599a:	b9 e2       	ldi	r27, 0x29	; 41
    599c:	01 90       	ld	r0, Z+
    599e:	0d 92       	st	X+, r0
    59a0:	8a 95       	dec	r24
    59a2:	e1 f7       	brne	.-8      	; 0x599c <__stack+0x199d>
        Responsing=1; 
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady; 
    59aa:	e0 ea       	ldi	r30, 0xA0	; 160
    59ac:	f6 e0       	ldi	r31, 0x06	; 6
    59ae:	84 81       	ldd	r24, Z+4	; 0x04
    59b0:	81 60       	ori	r24, 0x01	; 1
    59b2:	84 83       	std	Z+4, r24	; 0x04
    59b4:	1f c7       	rjmp	.+3646   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#1903",5)==0)
    59b6:	45 e0       	ldi	r20, 0x05	; 5
    59b8:	50 e0       	ldi	r21, 0x00	; 0
    59ba:	6b eb       	ldi	r22, 0xBB	; 187
    59bc:	74 e2       	ldi	r23, 0x24	; 36
    59be:	80 e1       	ldi	r24, 0x10	; 16
    59c0:	97 e2       	ldi	r25, 0x27	; 39
    59c2:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    59c6:	89 2b       	or	r24, r25
    59c8:	a1 f4       	brne	.+40     	; 0x59f2 <__stack+0x19f3>
    {             
        RefDir3=0; 
    59ca:	10 92 7d 27 	sts	0x277D, r1	; 0x80277d <RefDir3>
        sprintf(BufferSend,"!1903\r\n"); 
    59ce:	88 e0       	ldi	r24, 0x08	; 8
    59d0:	e1 ec       	ldi	r30, 0xC1	; 193
    59d2:	f4 e2       	ldi	r31, 0x24	; 36
    59d4:	a7 e5       	ldi	r26, 0x57	; 87
    59d6:	b9 e2       	ldi	r27, 0x29	; 41
    59d8:	01 90       	ld	r0, Z+
    59da:	0d 92       	st	X+, r0
    59dc:	8a 95       	dec	r24
    59de:	e1 f7       	brne	.-8      	; 0x59d8 <__stack+0x19d9>
        Responsing=1; 
    59e0:	81 e0       	ldi	r24, 0x01	; 1
    59e2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady; 
    59e6:	e0 ea       	ldi	r30, 0xA0	; 160
    59e8:	f6 e0       	ldi	r31, 0x06	; 6
    59ea:	84 81       	ldd	r24, Z+4	; 0x04
    59ec:	81 60       	ori	r24, 0x01	; 1
    59ee:	84 83       	std	Z+4, r24	; 0x04
    59f0:	01 c7       	rjmp	.+3586   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2001",5)==0)
    59f2:	45 e0       	ldi	r20, 0x05	; 5
    59f4:	50 e0       	ldi	r21, 0x00	; 0
    59f6:	69 ec       	ldi	r22, 0xC9	; 201
    59f8:	74 e2       	ldi	r23, 0x24	; 36
    59fa:	80 e1       	ldi	r24, 0x10	; 16
    59fc:	97 e2       	ldi	r25, 0x27	; 39
    59fe:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5a02:	89 2b       	or	r24, r25
    5a04:	a1 f4       	brne	.+40     	; 0x5a2e <__stack+0x1a2f>
    {
      RefDir1=1;    
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	80 93 7f 27 	sts	0x277F, r24	; 0x80277f <RefDir1>
      sprintf(BufferSend,"!2001\r\n"); 
    5a0c:	98 e0       	ldi	r25, 0x08	; 8
    5a0e:	ef ec       	ldi	r30, 0xCF	; 207
    5a10:	f4 e2       	ldi	r31, 0x24	; 36
    5a12:	a7 e5       	ldi	r26, 0x57	; 87
    5a14:	b9 e2       	ldi	r27, 0x29	; 41
    5a16:	01 90       	ld	r0, Z+
    5a18:	0d 92       	st	X+, r0
    5a1a:	9a 95       	dec	r25
    5a1c:	e1 f7       	brne	.-8      	; 0x5a16 <__stack+0x1a17>
      Responsing=1; 
    5a1e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
      SetDataReady; 
    5a22:	e0 ea       	ldi	r30, 0xA0	; 160
    5a24:	f6 e0       	ldi	r31, 0x06	; 6
    5a26:	84 81       	ldd	r24, Z+4	; 0x04
    5a28:	81 60       	ori	r24, 0x01	; 1
    5a2a:	84 83       	std	Z+4, r24	; 0x04
    5a2c:	e3 c6       	rjmp	.+3526   	; 0x67f4 <__stack+0x27f5>
    } 
    else if(strncmp(cmdTemp,"#2002",5)==0)
    5a2e:	45 e0       	ldi	r20, 0x05	; 5
    5a30:	50 e0       	ldi	r21, 0x00	; 0
    5a32:	67 ed       	ldi	r22, 0xD7	; 215
    5a34:	74 e2       	ldi	r23, 0x24	; 36
    5a36:	80 e1       	ldi	r24, 0x10	; 16
    5a38:	97 e2       	ldi	r25, 0x27	; 39
    5a3a:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5a3e:	89 2b       	or	r24, r25
    5a40:	a1 f4       	brne	.+40     	; 0x5a6a <__stack+0x1a6b>
    {
        RefDir2=1;  
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	80 93 7e 27 	sts	0x277E, r24	; 0x80277e <RefDir2>
        sprintf(BufferSend,"!2002\r\n"); 
    5a48:	98 e0       	ldi	r25, 0x08	; 8
    5a4a:	ed ed       	ldi	r30, 0xDD	; 221
    5a4c:	f4 e2       	ldi	r31, 0x24	; 36
    5a4e:	a7 e5       	ldi	r26, 0x57	; 87
    5a50:	b9 e2       	ldi	r27, 0x29	; 41
    5a52:	01 90       	ld	r0, Z+
    5a54:	0d 92       	st	X+, r0
    5a56:	9a 95       	dec	r25
    5a58:	e1 f7       	brne	.-8      	; 0x5a52 <__stack+0x1a53>
        Responsing=1; 
    5a5a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady; 
    5a5e:	e0 ea       	ldi	r30, 0xA0	; 160
    5a60:	f6 e0       	ldi	r31, 0x06	; 6
    5a62:	84 81       	ldd	r24, Z+4	; 0x04
    5a64:	81 60       	ori	r24, 0x01	; 1
    5a66:	84 83       	std	Z+4, r24	; 0x04
    5a68:	c5 c6       	rjmp	.+3466   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2003",5)==0)
    5a6a:	45 e0       	ldi	r20, 0x05	; 5
    5a6c:	50 e0       	ldi	r21, 0x00	; 0
    5a6e:	65 ee       	ldi	r22, 0xE5	; 229
    5a70:	74 e2       	ldi	r23, 0x24	; 36
    5a72:	80 e1       	ldi	r24, 0x10	; 16
    5a74:	97 e2       	ldi	r25, 0x27	; 39
    5a76:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5a7a:	89 2b       	or	r24, r25
    5a7c:	a1 f4       	brne	.+40     	; 0x5aa6 <__stack+0x1aa7>
    {
        RefDir3=1;
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	80 93 7d 27 	sts	0x277D, r24	; 0x80277d <RefDir3>
        sprintf(BufferSend,"!2003\r\n"); 
    5a84:	98 e0       	ldi	r25, 0x08	; 8
    5a86:	eb ee       	ldi	r30, 0xEB	; 235
    5a88:	f4 e2       	ldi	r31, 0x24	; 36
    5a8a:	a7 e5       	ldi	r26, 0x57	; 87
    5a8c:	b9 e2       	ldi	r27, 0x29	; 41
    5a8e:	01 90       	ld	r0, Z+
    5a90:	0d 92       	st	X+, r0
    5a92:	9a 95       	dec	r25
    5a94:	e1 f7       	brne	.-8      	; 0x5a8e <__stack+0x1a8f>
        Responsing=1; 
    5a96:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady; 
    5a9a:	e0 ea       	ldi	r30, 0xA0	; 160
    5a9c:	f6 e0       	ldi	r31, 0x06	; 6
    5a9e:	84 81       	ldd	r24, Z+4	; 0x04
    5aa0:	81 60       	ori	r24, 0x01	; 1
    5aa2:	84 83       	std	Z+4, r24	; 0x04
    5aa4:	a7 c6       	rjmp	.+3406   	; 0x67f4 <__stack+0x27f5>
    }   
    else if(strncmp(cmdTemp,"#2110",5)==0)  
    5aa6:	45 e0       	ldi	r20, 0x05	; 5
    5aa8:	50 e0       	ldi	r21, 0x00	; 0
    5aaa:	63 ef       	ldi	r22, 0xF3	; 243
    5aac:	74 e2       	ldi	r23, 0x24	; 36
    5aae:	80 e1       	ldi	r24, 0x10	; 16
    5ab0:	97 e2       	ldi	r25, 0x27	; 39
    5ab2:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5ab6:	89 2b       	or	r24, r25
    5ab8:	a1 f4       	brne	.+40     	; 0x5ae2 <__stack+0x1ae3>
    {
        //Disable Hardware Positive Limit 1 
        PLimitIsActiveA1=0;
    5aba:	10 92 f3 26 	sts	0x26F3, r1	; 0x8026f3 <PLimitIsActiveA1>
        sprintf(BufferSend,"!2110\r\n"); 
    5abe:	88 e0       	ldi	r24, 0x08	; 8
    5ac0:	e9 ef       	ldi	r30, 0xF9	; 249
    5ac2:	f4 e2       	ldi	r31, 0x24	; 36
    5ac4:	a7 e5       	ldi	r26, 0x57	; 87
    5ac6:	b9 e2       	ldi	r27, 0x29	; 41
    5ac8:	01 90       	ld	r0, Z+
    5aca:	0d 92       	st	X+, r0
    5acc:	8a 95       	dec	r24
    5ace:	e1 f7       	brne	.-8      	; 0x5ac8 <__stack+0x1ac9>
        Responsing=1; 
    5ad0:	81 e0       	ldi	r24, 0x01	; 1
    5ad2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5ad6:	e0 ea       	ldi	r30, 0xA0	; 160
    5ad8:	f6 e0       	ldi	r31, 0x06	; 6
    5ada:	84 81       	ldd	r24, Z+4	; 0x04
    5adc:	81 60       	ori	r24, 0x01	; 1
    5ade:	84 83       	std	Z+4, r24	; 0x04
    5ae0:	89 c6       	rjmp	.+3346   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2111",5)==0)
    5ae2:	45 e0       	ldi	r20, 0x05	; 5
    5ae4:	50 e0       	ldi	r21, 0x00	; 0
    5ae6:	61 e0       	ldi	r22, 0x01	; 1
    5ae8:	75 e2       	ldi	r23, 0x25	; 37
    5aea:	80 e1       	ldi	r24, 0x10	; 16
    5aec:	97 e2       	ldi	r25, 0x27	; 39
    5aee:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5af2:	89 2b       	or	r24, r25
    5af4:	a1 f4       	brne	.+40     	; 0x5b1e <__stack+0x1b1f>
    {     
        //Enable Hardware Positive Limit 1
        PLimitIsActiveA1=1; 
    5af6:	81 e0       	ldi	r24, 0x01	; 1
    5af8:	80 93 f3 26 	sts	0x26F3, r24	; 0x8026f3 <PLimitIsActiveA1>
        sprintf(BufferSend,"!2111\r\n"); 
    5afc:	98 e0       	ldi	r25, 0x08	; 8
    5afe:	e7 e0       	ldi	r30, 0x07	; 7
    5b00:	f5 e2       	ldi	r31, 0x25	; 37
    5b02:	a7 e5       	ldi	r26, 0x57	; 87
    5b04:	b9 e2       	ldi	r27, 0x29	; 41
    5b06:	01 90       	ld	r0, Z+
    5b08:	0d 92       	st	X+, r0
    5b0a:	9a 95       	dec	r25
    5b0c:	e1 f7       	brne	.-8      	; 0x5b06 <__stack+0x1b07>
        Responsing=1; 
    5b0e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5b12:	e0 ea       	ldi	r30, 0xA0	; 160
    5b14:	f6 e0       	ldi	r31, 0x06	; 6
    5b16:	84 81       	ldd	r24, Z+4	; 0x04
    5b18:	81 60       	ori	r24, 0x01	; 1
    5b1a:	84 83       	std	Z+4, r24	; 0x04
    5b1c:	6b c6       	rjmp	.+3286   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2120",5)==0)
    5b1e:	45 e0       	ldi	r20, 0x05	; 5
    5b20:	50 e0       	ldi	r21, 0x00	; 0
    5b22:	6f e0       	ldi	r22, 0x0F	; 15
    5b24:	75 e2       	ldi	r23, 0x25	; 37
    5b26:	80 e1       	ldi	r24, 0x10	; 16
    5b28:	97 e2       	ldi	r25, 0x27	; 39
    5b2a:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5b2e:	89 2b       	or	r24, r25
    5b30:	a1 f4       	brne	.+40     	; 0x5b5a <__stack+0x1b5b>
    {
        //Disable Hardware Positive Limit 2
        PLimitIsActiveA2=0;
    5b32:	10 92 f1 26 	sts	0x26F1, r1	; 0x8026f1 <PLimitIsActiveA2>
        sprintf(BufferSend,"!2120\r\n"); 
    5b36:	88 e0       	ldi	r24, 0x08	; 8
    5b38:	e5 e1       	ldi	r30, 0x15	; 21
    5b3a:	f5 e2       	ldi	r31, 0x25	; 37
    5b3c:	a7 e5       	ldi	r26, 0x57	; 87
    5b3e:	b9 e2       	ldi	r27, 0x29	; 41
    5b40:	01 90       	ld	r0, Z+
    5b42:	0d 92       	st	X+, r0
    5b44:	8a 95       	dec	r24
    5b46:	e1 f7       	brne	.-8      	; 0x5b40 <__stack+0x1b41>
        Responsing=1; 
    5b48:	81 e0       	ldi	r24, 0x01	; 1
    5b4a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5b4e:	e0 ea       	ldi	r30, 0xA0	; 160
    5b50:	f6 e0       	ldi	r31, 0x06	; 6
    5b52:	84 81       	ldd	r24, Z+4	; 0x04
    5b54:	81 60       	ori	r24, 0x01	; 1
    5b56:	84 83       	std	Z+4, r24	; 0x04
    5b58:	4d c6       	rjmp	.+3226   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2121",5)==0)
    5b5a:	45 e0       	ldi	r20, 0x05	; 5
    5b5c:	50 e0       	ldi	r21, 0x00	; 0
    5b5e:	6d e1       	ldi	r22, 0x1D	; 29
    5b60:	75 e2       	ldi	r23, 0x25	; 37
    5b62:	80 e1       	ldi	r24, 0x10	; 16
    5b64:	97 e2       	ldi	r25, 0x27	; 39
    5b66:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5b6a:	89 2b       	or	r24, r25
    5b6c:	a1 f4       	brne	.+40     	; 0x5b96 <__stack+0x1b97>
    {
        //Enable Hardware Positive Limit 2
        PLimitIsActiveA2=1;
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	80 93 f1 26 	sts	0x26F1, r24	; 0x8026f1 <PLimitIsActiveA2>
        sprintf(BufferSend,"!2121\r\n"); 
    5b74:	98 e0       	ldi	r25, 0x08	; 8
    5b76:	e3 e2       	ldi	r30, 0x23	; 35
    5b78:	f5 e2       	ldi	r31, 0x25	; 37
    5b7a:	a7 e5       	ldi	r26, 0x57	; 87
    5b7c:	b9 e2       	ldi	r27, 0x29	; 41
    5b7e:	01 90       	ld	r0, Z+
    5b80:	0d 92       	st	X+, r0
    5b82:	9a 95       	dec	r25
    5b84:	e1 f7       	brne	.-8      	; 0x5b7e <__stack+0x1b7f>
        Responsing=1; 
    5b86:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5b8a:	e0 ea       	ldi	r30, 0xA0	; 160
    5b8c:	f6 e0       	ldi	r31, 0x06	; 6
    5b8e:	84 81       	ldd	r24, Z+4	; 0x04
    5b90:	81 60       	ori	r24, 0x01	; 1
    5b92:	84 83       	std	Z+4, r24	; 0x04
    5b94:	2f c6       	rjmp	.+3166   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2130",5)==0)
    5b96:	45 e0       	ldi	r20, 0x05	; 5
    5b98:	50 e0       	ldi	r21, 0x00	; 0
    5b9a:	6b e2       	ldi	r22, 0x2B	; 43
    5b9c:	75 e2       	ldi	r23, 0x25	; 37
    5b9e:	80 e1       	ldi	r24, 0x10	; 16
    5ba0:	97 e2       	ldi	r25, 0x27	; 39
    5ba2:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5ba6:	89 2b       	or	r24, r25
    5ba8:	a1 f4       	brne	.+40     	; 0x5bd2 <__stack+0x1bd3>
    { 
        //Enable Hardware Positive Limit 3
        PLimitIsActiveA3=0;
    5baa:	10 92 ef 26 	sts	0x26EF, r1	; 0x8026ef <PLimitIsActiveA3>
        sprintf(BufferSend,"!2130\r\n"); 
    5bae:	88 e0       	ldi	r24, 0x08	; 8
    5bb0:	e1 e3       	ldi	r30, 0x31	; 49
    5bb2:	f5 e2       	ldi	r31, 0x25	; 37
    5bb4:	a7 e5       	ldi	r26, 0x57	; 87
    5bb6:	b9 e2       	ldi	r27, 0x29	; 41
    5bb8:	01 90       	ld	r0, Z+
    5bba:	0d 92       	st	X+, r0
    5bbc:	8a 95       	dec	r24
    5bbe:	e1 f7       	brne	.-8      	; 0x5bb8 <__stack+0x1bb9>
        Responsing=1; 
    5bc0:	81 e0       	ldi	r24, 0x01	; 1
    5bc2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5bc6:	e0 ea       	ldi	r30, 0xA0	; 160
    5bc8:	f6 e0       	ldi	r31, 0x06	; 6
    5bca:	84 81       	ldd	r24, Z+4	; 0x04
    5bcc:	81 60       	ori	r24, 0x01	; 1
    5bce:	84 83       	std	Z+4, r24	; 0x04
    5bd0:	11 c6       	rjmp	.+3106   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2131",5)==0)
    5bd2:	45 e0       	ldi	r20, 0x05	; 5
    5bd4:	50 e0       	ldi	r21, 0x00	; 0
    5bd6:	69 e3       	ldi	r22, 0x39	; 57
    5bd8:	75 e2       	ldi	r23, 0x25	; 37
    5bda:	80 e1       	ldi	r24, 0x10	; 16
    5bdc:	97 e2       	ldi	r25, 0x27	; 39
    5bde:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5be2:	89 2b       	or	r24, r25
    5be4:	a1 f4       	brne	.+40     	; 0x5c0e <__stack+0x1c0f>
    { 
        //Enable Hardware Positive Limit 3 
        PLimitIsActiveA3=1;
    5be6:	81 e0       	ldi	r24, 0x01	; 1
    5be8:	80 93 ef 26 	sts	0x26EF, r24	; 0x8026ef <PLimitIsActiveA3>
        sprintf(BufferSend,"!2131\r\n"); 
    5bec:	98 e0       	ldi	r25, 0x08	; 8
    5bee:	ef e3       	ldi	r30, 0x3F	; 63
    5bf0:	f5 e2       	ldi	r31, 0x25	; 37
    5bf2:	a7 e5       	ldi	r26, 0x57	; 87
    5bf4:	b9 e2       	ldi	r27, 0x29	; 41
    5bf6:	01 90       	ld	r0, Z+
    5bf8:	0d 92       	st	X+, r0
    5bfa:	9a 95       	dec	r25
    5bfc:	e1 f7       	brne	.-8      	; 0x5bf6 <__stack+0x1bf7>
        Responsing=1; 
    5bfe:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5c02:	e0 ea       	ldi	r30, 0xA0	; 160
    5c04:	f6 e0       	ldi	r31, 0x06	; 6
    5c06:	84 81       	ldd	r24, Z+4	; 0x04
    5c08:	81 60       	ori	r24, 0x01	; 1
    5c0a:	84 83       	std	Z+4, r24	; 0x04
    5c0c:	f3 c5       	rjmp	.+3046   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2210",5)==0)  
    5c0e:	45 e0       	ldi	r20, 0x05	; 5
    5c10:	50 e0       	ldi	r21, 0x00	; 0
    5c12:	67 e4       	ldi	r22, 0x47	; 71
    5c14:	75 e2       	ldi	r23, 0x25	; 37
    5c16:	80 e1       	ldi	r24, 0x10	; 16
    5c18:	97 e2       	ldi	r25, 0x27	; 39
    5c1a:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5c1e:	89 2b       	or	r24, r25
    5c20:	a1 f4       	brne	.+40     	; 0x5c4a <__stack+0x1c4b>
    {  
        NLimitIsActiveA1=0;
    5c22:	10 92 f2 26 	sts	0x26F2, r1	; 0x8026f2 <NLimitIsActiveA1>
        sprintf(BufferSend,"!2210\r\n"); 
    5c26:	88 e0       	ldi	r24, 0x08	; 8
    5c28:	ed e4       	ldi	r30, 0x4D	; 77
    5c2a:	f5 e2       	ldi	r31, 0x25	; 37
    5c2c:	a7 e5       	ldi	r26, 0x57	; 87
    5c2e:	b9 e2       	ldi	r27, 0x29	; 41
    5c30:	01 90       	ld	r0, Z+
    5c32:	0d 92       	st	X+, r0
    5c34:	8a 95       	dec	r24
    5c36:	e1 f7       	brne	.-8      	; 0x5c30 <__stack+0x1c31>
        Responsing=1; 
    5c38:	81 e0       	ldi	r24, 0x01	; 1
    5c3a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5c3e:	e0 ea       	ldi	r30, 0xA0	; 160
    5c40:	f6 e0       	ldi	r31, 0x06	; 6
    5c42:	84 81       	ldd	r24, Z+4	; 0x04
    5c44:	81 60       	ori	r24, 0x01	; 1
    5c46:	84 83       	std	Z+4, r24	; 0x04
    5c48:	d5 c5       	rjmp	.+2986   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2211",5)==0)
    5c4a:	45 e0       	ldi	r20, 0x05	; 5
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	65 e5       	ldi	r22, 0x55	; 85
    5c50:	75 e2       	ldi	r23, 0x25	; 37
    5c52:	80 e1       	ldi	r24, 0x10	; 16
    5c54:	97 e2       	ldi	r25, 0x27	; 39
    5c56:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5c5a:	89 2b       	or	r24, r25
    5c5c:	a1 f4       	brne	.+40     	; 0x5c86 <__stack+0x1c87>
    { 
        NLimitIsActiveA1=1; 
    5c5e:	81 e0       	ldi	r24, 0x01	; 1
    5c60:	80 93 f2 26 	sts	0x26F2, r24	; 0x8026f2 <NLimitIsActiveA1>
        sprintf(BufferSend,"!2211\r\n"); 
    5c64:	98 e0       	ldi	r25, 0x08	; 8
    5c66:	eb e5       	ldi	r30, 0x5B	; 91
    5c68:	f5 e2       	ldi	r31, 0x25	; 37
    5c6a:	a7 e5       	ldi	r26, 0x57	; 87
    5c6c:	b9 e2       	ldi	r27, 0x29	; 41
    5c6e:	01 90       	ld	r0, Z+
    5c70:	0d 92       	st	X+, r0
    5c72:	9a 95       	dec	r25
    5c74:	e1 f7       	brne	.-8      	; 0x5c6e <__stack+0x1c6f>
        Responsing=1; 
    5c76:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5c7a:	e0 ea       	ldi	r30, 0xA0	; 160
    5c7c:	f6 e0       	ldi	r31, 0x06	; 6
    5c7e:	84 81       	ldd	r24, Z+4	; 0x04
    5c80:	81 60       	ori	r24, 0x01	; 1
    5c82:	84 83       	std	Z+4, r24	; 0x04
    5c84:	b7 c5       	rjmp	.+2926   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2220",5)==0)
    5c86:	45 e0       	ldi	r20, 0x05	; 5
    5c88:	50 e0       	ldi	r21, 0x00	; 0
    5c8a:	63 e6       	ldi	r22, 0x63	; 99
    5c8c:	75 e2       	ldi	r23, 0x25	; 37
    5c8e:	80 e1       	ldi	r24, 0x10	; 16
    5c90:	97 e2       	ldi	r25, 0x27	; 39
    5c92:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5c96:	89 2b       	or	r24, r25
    5c98:	a1 f4       	brne	.+40     	; 0x5cc2 <__stack+0x1cc3>
    {
        NLimitIsActiveA2=0;
    5c9a:	10 92 f0 26 	sts	0x26F0, r1	; 0x8026f0 <NLimitIsActiveA2>
        sprintf(BufferSend,"!2220\r\n"); 
    5c9e:	88 e0       	ldi	r24, 0x08	; 8
    5ca0:	e9 e6       	ldi	r30, 0x69	; 105
    5ca2:	f5 e2       	ldi	r31, 0x25	; 37
    5ca4:	a7 e5       	ldi	r26, 0x57	; 87
    5ca6:	b9 e2       	ldi	r27, 0x29	; 41
    5ca8:	01 90       	ld	r0, Z+
    5caa:	0d 92       	st	X+, r0
    5cac:	8a 95       	dec	r24
    5cae:	e1 f7       	brne	.-8      	; 0x5ca8 <__stack+0x1ca9>
        Responsing=1; 
    5cb0:	81 e0       	ldi	r24, 0x01	; 1
    5cb2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5cb6:	e0 ea       	ldi	r30, 0xA0	; 160
    5cb8:	f6 e0       	ldi	r31, 0x06	; 6
    5cba:	84 81       	ldd	r24, Z+4	; 0x04
    5cbc:	81 60       	ori	r24, 0x01	; 1
    5cbe:	84 83       	std	Z+4, r24	; 0x04
    5cc0:	99 c5       	rjmp	.+2866   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2221",5)==0)
    5cc2:	45 e0       	ldi	r20, 0x05	; 5
    5cc4:	50 e0       	ldi	r21, 0x00	; 0
    5cc6:	61 e7       	ldi	r22, 0x71	; 113
    5cc8:	75 e2       	ldi	r23, 0x25	; 37
    5cca:	80 e1       	ldi	r24, 0x10	; 16
    5ccc:	97 e2       	ldi	r25, 0x27	; 39
    5cce:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5cd2:	89 2b       	or	r24, r25
    5cd4:	a1 f4       	brne	.+40     	; 0x5cfe <__stack+0x1cff>
    {
        NLimitIsActiveA2=1;
    5cd6:	81 e0       	ldi	r24, 0x01	; 1
    5cd8:	80 93 f0 26 	sts	0x26F0, r24	; 0x8026f0 <NLimitIsActiveA2>
        sprintf(BufferSend,"!2221\r\n"); 
    5cdc:	98 e0       	ldi	r25, 0x08	; 8
    5cde:	e7 e7       	ldi	r30, 0x77	; 119
    5ce0:	f5 e2       	ldi	r31, 0x25	; 37
    5ce2:	a7 e5       	ldi	r26, 0x57	; 87
    5ce4:	b9 e2       	ldi	r27, 0x29	; 41
    5ce6:	01 90       	ld	r0, Z+
    5ce8:	0d 92       	st	X+, r0
    5cea:	9a 95       	dec	r25
    5cec:	e1 f7       	brne	.-8      	; 0x5ce6 <__stack+0x1ce7>
        Responsing=1; 
    5cee:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5cf2:	e0 ea       	ldi	r30, 0xA0	; 160
    5cf4:	f6 e0       	ldi	r31, 0x06	; 6
    5cf6:	84 81       	ldd	r24, Z+4	; 0x04
    5cf8:	81 60       	ori	r24, 0x01	; 1
    5cfa:	84 83       	std	Z+4, r24	; 0x04
    5cfc:	7b c5       	rjmp	.+2806   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2230",5)==0)
    5cfe:	45 e0       	ldi	r20, 0x05	; 5
    5d00:	50 e0       	ldi	r21, 0x00	; 0
    5d02:	6f e7       	ldi	r22, 0x7F	; 127
    5d04:	75 e2       	ldi	r23, 0x25	; 37
    5d06:	80 e1       	ldi	r24, 0x10	; 16
    5d08:	97 e2       	ldi	r25, 0x27	; 39
    5d0a:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5d0e:	89 2b       	or	r24, r25
    5d10:	a1 f4       	brne	.+40     	; 0x5d3a <__stack+0x1d3b>
    { 
        NLimitIsActiveA3=0;
    5d12:	10 92 ee 26 	sts	0x26EE, r1	; 0x8026ee <NLimitIsActiveA3>
        sprintf(BufferSend,"!2230\r\n"); 
    5d16:	88 e0       	ldi	r24, 0x08	; 8
    5d18:	e5 e8       	ldi	r30, 0x85	; 133
    5d1a:	f5 e2       	ldi	r31, 0x25	; 37
    5d1c:	a7 e5       	ldi	r26, 0x57	; 87
    5d1e:	b9 e2       	ldi	r27, 0x29	; 41
    5d20:	01 90       	ld	r0, Z+
    5d22:	0d 92       	st	X+, r0
    5d24:	8a 95       	dec	r24
    5d26:	e1 f7       	brne	.-8      	; 0x5d20 <__stack+0x1d21>
        Responsing=1; 
    5d28:	81 e0       	ldi	r24, 0x01	; 1
    5d2a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5d2e:	e0 ea       	ldi	r30, 0xA0	; 160
    5d30:	f6 e0       	ldi	r31, 0x06	; 6
    5d32:	84 81       	ldd	r24, Z+4	; 0x04
    5d34:	81 60       	ori	r24, 0x01	; 1
    5d36:	84 83       	std	Z+4, r24	; 0x04
    5d38:	5d c5       	rjmp	.+2746   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2231",5)==0)
    5d3a:	45 e0       	ldi	r20, 0x05	; 5
    5d3c:	50 e0       	ldi	r21, 0x00	; 0
    5d3e:	6d e8       	ldi	r22, 0x8D	; 141
    5d40:	75 e2       	ldi	r23, 0x25	; 37
    5d42:	80 e1       	ldi	r24, 0x10	; 16
    5d44:	97 e2       	ldi	r25, 0x27	; 39
    5d46:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5d4a:	89 2b       	or	r24, r25
    5d4c:	a1 f4       	brne	.+40     	; 0x5d76 <__stack+0x1d77>
    {  
        NLimitIsActiveA3=1;
    5d4e:	81 e0       	ldi	r24, 0x01	; 1
    5d50:	80 93 ee 26 	sts	0x26EE, r24	; 0x8026ee <NLimitIsActiveA3>
        sprintf(BufferSend,"!2231\r\n"); 
    5d54:	98 e0       	ldi	r25, 0x08	; 8
    5d56:	e3 e9       	ldi	r30, 0x93	; 147
    5d58:	f5 e2       	ldi	r31, 0x25	; 37
    5d5a:	a7 e5       	ldi	r26, 0x57	; 87
    5d5c:	b9 e2       	ldi	r27, 0x29	; 41
    5d5e:	01 90       	ld	r0, Z+
    5d60:	0d 92       	st	X+, r0
    5d62:	9a 95       	dec	r25
    5d64:	e1 f7       	brne	.-8      	; 0x5d5e <__stack+0x1d5f>
        Responsing=1; 
    5d66:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5d6a:	e0 ea       	ldi	r30, 0xA0	; 160
    5d6c:	f6 e0       	ldi	r31, 0x06	; 6
    5d6e:	84 81       	ldd	r24, Z+4	; 0x04
    5d70:	81 60       	ori	r24, 0x01	; 1
    5d72:	84 83       	std	Z+4, r24	; 0x04
    5d74:	3f c5       	rjmp	.+2686   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2800",5)==0)
    5d76:	45 e0       	ldi	r20, 0x05	; 5
    5d78:	50 e0       	ldi	r21, 0x00	; 0
    5d7a:	6b e9       	ldi	r22, 0x9B	; 155
    5d7c:	75 e2       	ldi	r23, 0x25	; 37
    5d7e:	80 e1       	ldi	r24, 0x10	; 16
    5d80:	97 e2       	ldi	r25, 0x27	; 39
    5d82:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5d86:	89 2b       	or	r24, r25
    5d88:	61 f4       	brne	.+24     	; 0x5da2 <__stack+0x1da3>
    { 
      EchoON=1; 
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <EchoON>
      if(EchoON) printf("!2800\n\r");
    5d90:	81 ea       	ldi	r24, 0xA1	; 161
    5d92:	95 e2       	ldi	r25, 0x25	; 37
    5d94:	9f 93       	push	r25
    5d96:	8f 93       	push	r24
    5d98:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
    5d9c:	0f 90       	pop	r0
    5d9e:	0f 90       	pop	r0
    5da0:	29 c5       	rjmp	.+2642   	; 0x67f4 <__stack+0x27f5>
    }
    else if(strncmp(cmdTemp,"#2900",5)==0)
    5da2:	45 e0       	ldi	r20, 0x05	; 5
    5da4:	50 e0       	ldi	r21, 0x00	; 0
    5da6:	69 ea       	ldi	r22, 0xA9	; 169
    5da8:	75 e2       	ldi	r23, 0x25	; 37
    5daa:	80 e1       	ldi	r24, 0x10	; 16
    5dac:	97 e2       	ldi	r25, 0x27	; 39
    5dae:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5db2:	89 2b       	or	r24, r25
    5db4:	19 f4       	brne	.+6      	; 0x5dbc <__stack+0x1dbd>
    { 
      EchoON=0; 
    5db6:	10 92 fa 26 	sts	0x26FA, r1	; 0x8026fa <EchoON>
    5dba:	1c c5       	rjmp	.+2616   	; 0x67f4 <__stack+0x27f5>
      if(EchoON) printf("!2900\n\r");
    }
    else if(strncmp(cmdTemp,"#3000",5)==0)
    5dbc:	45 e0       	ldi	r20, 0x05	; 5
    5dbe:	50 e0       	ldi	r21, 0x00	; 0
    5dc0:	6f ea       	ldi	r22, 0xAF	; 175
    5dc2:	75 e2       	ldi	r23, 0x25	; 37
    5dc4:	80 e1       	ldi	r24, 0x10	; 16
    5dc6:	97 e2       	ldi	r25, 0x27	; 39
    5dc8:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    5dcc:	89 2b       	or	r24, r25
    5dce:	09 f0       	breq	.+2      	; 0x5dd2 <__stack+0x1dd3>
    5dd0:	9d c3       	rjmp	.+1850   	; 0x650c <__stack+0x250d>
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5dd2:	20 91 48 27 	lds	r18, 0x2748	; 0x802748 <AxisIsMoving1>
    5dd6:	21 11       	cpse	r18, r1
    5dd8:	0b c0       	rjmp	.+22     	; 0x5df0 <__stack+0x1df1>
    5dda:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    5dde:	81 11       	cpse	r24, r1
    5de0:	09 c0       	rjmp	.+18     	; 0x5df4 <__stack+0x1df5>
    5de2:	91 e0       	ldi	r25, 0x01	; 1
    5de4:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    5de8:	81 11       	cpse	r24, r1
    5dea:	05 c0       	rjmp	.+10     	; 0x5df6 <__stack+0x1df7>
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	03 c0       	rjmp	.+6      	; 0x5df6 <__stack+0x1df7>
    5df0:	91 e0       	ldi	r25, 0x01	; 1
    5df2:	01 c0       	rjmp	.+2      	; 0x5df6 <__stack+0x1df7>
    5df4:	91 e0       	ldi	r25, 0x01	; 1
    5df6:	89 2f       	mov	r24, r25
    5df8:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
         
    if (!ProgramRun)
    5dfc:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    5e00:	91 11       	cpse	r25, r1
    5e02:	f8 c4       	rjmp	.+2544   	; 0x67f4 <__stack+0x27f5>
     {
     while (AxisMoving == 1) 
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5e04:	30 91 47 27 	lds	r19, 0x2747	; 0x802747 <AxisIsMoving2>
    5e08:	91 e0       	ldi	r25, 0x01	; 1
    5e0a:	40 91 46 27 	lds	r20, 0x2746	; 0x802746 <AxisIsMoving3>
    5e0e:	41 11       	cpse	r20, r1
    5e10:	01 c0       	rjmp	.+2      	; 0x5e14 <__stack+0x1e15>
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    5e14:	81 30       	cpi	r24, 0x01	; 1
    5e16:	51 f4       	brne	.+20     	; 0x5e2c <__stack+0x1e2d>
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5e18:	21 11       	cpse	r18, r1
    5e1a:	04 c0       	rjmp	.+8      	; 0x5e24 <__stack+0x1e25>
    5e1c:	31 11       	cpse	r19, r1
    5e1e:	04 c0       	rjmp	.+8      	; 0x5e28 <__stack+0x1e29>
    5e20:	89 2f       	mov	r24, r25
    5e22:	f8 cf       	rjmp	.-16     	; 0x5e14 <__stack+0x1e15>
    5e24:	81 e0       	ldi	r24, 0x01	; 1
    5e26:	f6 cf       	rjmp	.-20     	; 0x5e14 <__stack+0x1e15>
    5e28:	81 e0       	ldi	r24, 0x01	; 1
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    5e2a:	f4 cf       	rjmp	.-24     	; 0x5e14 <__stack+0x1e15>
    5e2c:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
     }      
        if(SetJog1<AxisPosition1) CLR_DIR1;
    5e30:	c0 90 b8 27 	lds	r12, 0x27B8	; 0x8027b8 <SetJog1>
    5e34:	d0 90 b9 27 	lds	r13, 0x27B9	; 0x8027b9 <SetJog1+0x1>
    5e38:	e0 90 ba 27 	lds	r14, 0x27BA	; 0x8027ba <SetJog1+0x2>
    5e3c:	f0 90 bb 27 	lds	r15, 0x27BB	; 0x8027bb <SetJog1+0x3>
    5e40:	cd 82       	std	Y+5, r12	; 0x05
    5e42:	de 82       	std	Y+6, r13	; 0x06
    5e44:	ef 82       	std	Y+7, r14	; 0x07
    5e46:	f8 86       	std	Y+8, r15	; 0x08
    5e48:	e0 90 ac 27 	lds	r14, 0x27AC	; 0x8027ac <AxisPosition1>
    5e4c:	f0 90 ad 27 	lds	r15, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    5e50:	00 91 ae 27 	lds	r16, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    5e54:	10 91 af 27 	lds	r17, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    5e58:	eb 8e       	std	Y+27, r14	; 0x1b
    5e5a:	fc 8e       	std	Y+28, r15	; 0x1c
    5e5c:	0d 8f       	std	Y+29, r16	; 0x1d
    5e5e:	1e 8f       	std	Y+30, r17	; 0x1e
    5e60:	8d 80       	ldd	r8, Y+5	; 0x05
    5e62:	9e 80       	ldd	r9, Y+6	; 0x06
    5e64:	af 80       	ldd	r10, Y+7	; 0x07
    5e66:	b8 84       	ldd	r11, Y+8	; 0x08
    5e68:	8e 14       	cp	r8, r14
    5e6a:	9f 04       	cpc	r9, r15
    5e6c:	a0 06       	cpc	r10, r16
    5e6e:	b1 06       	cpc	r11, r17
    5e70:	2c f4       	brge	.+10     	; 0x5e7c <__stack+0x1e7d>
    5e72:	e0 e2       	ldi	r30, 0x20	; 32
    5e74:	f7 e0       	ldi	r31, 0x07	; 7
    5e76:	84 81       	ldd	r24, Z+4	; 0x04
    5e78:	8f 7e       	andi	r24, 0xEF	; 239
    5e7a:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog1>AxisPosition1) SET_DIR1; 
    5e7c:	ad 80       	ldd	r10, Y+5	; 0x05
    5e7e:	be 80       	ldd	r11, Y+6	; 0x06
    5e80:	cf 80       	ldd	r12, Y+7	; 0x07
    5e82:	d8 84       	ldd	r13, Y+8	; 0x08
    5e84:	eb 8c       	ldd	r14, Y+27	; 0x1b
    5e86:	fc 8c       	ldd	r15, Y+28	; 0x1c
    5e88:	0d 8d       	ldd	r16, Y+29	; 0x1d
    5e8a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    5e8c:	ea 14       	cp	r14, r10
    5e8e:	fb 04       	cpc	r15, r11
    5e90:	0c 05       	cpc	r16, r12
    5e92:	1d 05       	cpc	r17, r13
    5e94:	2c f4       	brge	.+10     	; 0x5ea0 <__stack+0x1ea1>
    5e96:	e0 e2       	ldi	r30, 0x20	; 32
    5e98:	f7 e0       	ldi	r31, 0x07	; 7
    5e9a:	84 81       	ldd	r24, Z+4	; 0x04
    5e9c:	80 61       	ori	r24, 0x10	; 16
    5e9e:	84 83       	std	Z+4, r24	; 0x04
                
        if(SetJog2<AxisPosition2) CLR_DIR2;
    5ea0:	80 90 b4 27 	lds	r8, 0x27B4	; 0x8027b4 <SetJog2>
    5ea4:	90 90 b5 27 	lds	r9, 0x27B5	; 0x8027b5 <SetJog2+0x1>
    5ea8:	a0 90 b6 27 	lds	r10, 0x27B6	; 0x8027b6 <SetJog2+0x2>
    5eac:	b0 90 b7 27 	lds	r11, 0x27B7	; 0x8027b7 <SetJog2+0x3>
    5eb0:	89 86       	std	Y+9, r8	; 0x09
    5eb2:	9a 86       	std	Y+10, r9	; 0x0a
    5eb4:	ab 86       	std	Y+11, r10	; 0x0b
    5eb6:	bc 86       	std	Y+12, r11	; 0x0c
    5eb8:	a0 90 a8 27 	lds	r10, 0x27A8	; 0x8027a8 <AxisPosition2>
    5ebc:	b0 90 a9 27 	lds	r11, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    5ec0:	c0 90 aa 27 	lds	r12, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    5ec4:	d0 90 ab 27 	lds	r13, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    5ec8:	a9 8a       	std	Y+17, r10	; 0x11
    5eca:	ba 8a       	std	Y+18, r11	; 0x12
    5ecc:	cb 8a       	std	Y+19, r12	; 0x13
    5ece:	dc 8a       	std	Y+20, r13	; 0x14
    5ed0:	e9 84       	ldd	r14, Y+9	; 0x09
    5ed2:	fa 84       	ldd	r15, Y+10	; 0x0a
    5ed4:	0b 85       	ldd	r16, Y+11	; 0x0b
    5ed6:	1c 85       	ldd	r17, Y+12	; 0x0c
    5ed8:	ea 14       	cp	r14, r10
    5eda:	fb 04       	cpc	r15, r11
    5edc:	0c 05       	cpc	r16, r12
    5ede:	1d 05       	cpc	r17, r13
    5ee0:	2c f4       	brge	.+10     	; 0x5eec <__stack+0x1eed>
    5ee2:	e0 e2       	ldi	r30, 0x20	; 32
    5ee4:	f7 e0       	ldi	r31, 0x07	; 7
    5ee6:	84 81       	ldd	r24, Z+4	; 0x04
    5ee8:	8b 7f       	andi	r24, 0xFB	; 251
    5eea:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog2>AxisPosition2) SET_DIR2;  
    5eec:	89 84       	ldd	r8, Y+9	; 0x09
    5eee:	9a 84       	ldd	r9, Y+10	; 0x0a
    5ef0:	ab 84       	ldd	r10, Y+11	; 0x0b
    5ef2:	bc 84       	ldd	r11, Y+12	; 0x0c
    5ef4:	c9 88       	ldd	r12, Y+17	; 0x11
    5ef6:	da 88       	ldd	r13, Y+18	; 0x12
    5ef8:	eb 88       	ldd	r14, Y+19	; 0x13
    5efa:	fc 88       	ldd	r15, Y+20	; 0x14
    5efc:	c8 14       	cp	r12, r8
    5efe:	d9 04       	cpc	r13, r9
    5f00:	ea 04       	cpc	r14, r10
    5f02:	fb 04       	cpc	r15, r11
    5f04:	2c f4       	brge	.+10     	; 0x5f10 <__stack+0x1f11>
    5f06:	e0 e2       	ldi	r30, 0x20	; 32
    5f08:	f7 e0       	ldi	r31, 0x07	; 7
    5f0a:	84 81       	ldd	r24, Z+4	; 0x04
    5f0c:	84 60       	ori	r24, 0x04	; 4
    5f0e:	84 83       	std	Z+4, r24	; 0x04
            
        if(SetJog3<AxisPosition3) CLR_DIR3;
    5f10:	e0 90 b0 27 	lds	r14, 0x27B0	; 0x8027b0 <SetJog3>
    5f14:	f0 90 b1 27 	lds	r15, 0x27B1	; 0x8027b1 <SetJog3+0x1>
    5f18:	00 91 b2 27 	lds	r16, 0x27B2	; 0x8027b2 <SetJog3+0x2>
    5f1c:	10 91 b3 27 	lds	r17, 0x27B3	; 0x8027b3 <SetJog3+0x3>
    5f20:	ed 86       	std	Y+13, r14	; 0x0d
    5f22:	fe 86       	std	Y+14, r15	; 0x0e
    5f24:	0f 87       	std	Y+15, r16	; 0x0f
    5f26:	18 8b       	std	Y+16, r17	; 0x10
    5f28:	00 91 a4 27 	lds	r16, 0x27A4	; 0x8027a4 <AxisPosition3>
    5f2c:	10 91 a5 27 	lds	r17, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    5f30:	20 91 a6 27 	lds	r18, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    5f34:	30 91 a7 27 	lds	r19, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    5f38:	09 83       	std	Y+1, r16	; 0x01
    5f3a:	1a 83       	std	Y+2, r17	; 0x02
    5f3c:	2b 83       	std	Y+3, r18	; 0x03
    5f3e:	3c 83       	std	Y+4, r19	; 0x04
    5f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f44:	af 85       	ldd	r26, Y+15	; 0x0f
    5f46:	b8 89       	ldd	r27, Y+16	; 0x10
    5f48:	80 17       	cp	r24, r16
    5f4a:	91 07       	cpc	r25, r17
    5f4c:	a2 07       	cpc	r26, r18
    5f4e:	b3 07       	cpc	r27, r19
    5f50:	2c f4       	brge	.+10     	; 0x5f5c <__stack+0x1f5d>
    5f52:	e0 e2       	ldi	r30, 0x20	; 32
    5f54:	f7 e0       	ldi	r31, 0x07	; 7
    5f56:	84 81       	ldd	r24, Z+4	; 0x04
    5f58:	8e 7f       	andi	r24, 0xFE	; 254
    5f5a:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog3>AxisPosition3) SET_DIR3;           
    5f5c:	8d 84       	ldd	r8, Y+13	; 0x0d
    5f5e:	9e 84       	ldd	r9, Y+14	; 0x0e
    5f60:	af 84       	ldd	r10, Y+15	; 0x0f
    5f62:	b8 88       	ldd	r11, Y+16	; 0x10
    5f64:	c9 80       	ldd	r12, Y+1	; 0x01
    5f66:	da 80       	ldd	r13, Y+2	; 0x02
    5f68:	eb 80       	ldd	r14, Y+3	; 0x03
    5f6a:	fc 80       	ldd	r15, Y+4	; 0x04
    5f6c:	c8 14       	cp	r12, r8
    5f6e:	d9 04       	cpc	r13, r9
    5f70:	ea 04       	cpc	r14, r10
    5f72:	fb 04       	cpc	r15, r11
    5f74:	2c f4       	brge	.+10     	; 0x5f80 <__stack+0x1f81>
    5f76:	e0 e2       	ldi	r30, 0x20	; 32
    5f78:	f7 e0       	ldi	r31, 0x07	; 7
    5f7a:	84 81       	ldd	r24, Z+4	; 0x04
    5f7c:	81 60       	ori	r24, 0x01	; 1
    5f7e:	84 83       	std	Z+4, r24	; 0x04
              
        if(SetSpeed1 >= SetSpeed2 && SetSpeed1 >= SetSpeed3)
    5f80:	60 91 79 27 	lds	r22, 0x2779	; 0x802779 <SetSpeed1>
    5f84:	70 91 7a 27 	lds	r23, 0x277A	; 0x80277a <SetSpeed1+0x1>
    5f88:	80 91 7b 27 	lds	r24, 0x277B	; 0x80277b <SetSpeed1+0x2>
    5f8c:	90 91 7c 27 	lds	r25, 0x277C	; 0x80277c <SetSpeed1+0x3>
    5f90:	40 90 75 27 	lds	r4, 0x2775	; 0x802775 <SetSpeed2>
    5f94:	50 90 76 27 	lds	r5, 0x2776	; 0x802776 <SetSpeed2+0x1>
    5f98:	60 90 77 27 	lds	r6, 0x2777	; 0x802777 <SetSpeed2+0x2>
    5f9c:	70 90 78 27 	lds	r7, 0x2778	; 0x802778 <SetSpeed2+0x3>
    5fa0:	64 15       	cp	r22, r4
    5fa2:	75 05       	cpc	r23, r5
    5fa4:	86 05       	cpc	r24, r6
    5fa6:	97 05       	cpc	r25, r7
    5fa8:	0c f4       	brge	.+2      	; 0x5fac <__stack+0x1fad>
    5faa:	5a c0       	rjmp	.+180    	; 0x6060 <__stack+0x2061>
    5fac:	80 90 71 27 	lds	r8, 0x2771	; 0x802771 <SetSpeed3>
    5fb0:	90 90 72 27 	lds	r9, 0x2772	; 0x802772 <SetSpeed3+0x1>
    5fb4:	a0 90 73 27 	lds	r10, 0x2773	; 0x802773 <SetSpeed3+0x2>
    5fb8:	b0 90 74 27 	lds	r11, 0x2774	; 0x802774 <SetSpeed3+0x3>
    5fbc:	68 15       	cp	r22, r8
    5fbe:	79 05       	cpc	r23, r9
    5fc0:	8a 05       	cpc	r24, r10
    5fc2:	9b 05       	cpc	r25, r11
    5fc4:	0c f4       	brge	.+2      	; 0x5fc8 <__stack+0x1fc9>
    5fc6:	46 c0       	rjmp	.+140    	; 0x6054 <__stack+0x2055>
          { 
            MaxSpeed = SetSpeed1; 
    5fc8:	60 93 6d 27 	sts	0x276D, r22	; 0x80276d <MaxSpeed>
    5fcc:	70 93 6e 27 	sts	0x276E, r23	; 0x80276e <MaxSpeed+0x1>
    5fd0:	80 93 6f 27 	sts	0x276F, r24	; 0x80276f <MaxSpeed+0x2>
    5fd4:	90 93 70 27 	sts	0x2770, r25	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC1; 
    5fd8:	80 90 69 27 	lds	r8, 0x2769	; 0x802769 <ACC1>
    5fdc:	90 90 6a 27 	lds	r9, 0x276A	; 0x80276a <ACC1+0x1>
    5fe0:	a0 90 6b 27 	lds	r10, 0x276B	; 0x80276b <ACC1+0x2>
    5fe4:	b0 90 6c 27 	lds	r11, 0x276C	; 0x80276c <ACC1+0x3>
    5fe8:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    5fec:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    5ff0:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    5ff4:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
            IDEC=DEC1; 
    5ff8:	80 90 5d 27 	lds	r8, 0x275D	; 0x80275d <DEC1>
    5ffc:	90 90 5e 27 	lds	r9, 0x275E	; 0x80275e <DEC1+0x1>
    6000:	a0 90 5f 27 	lds	r10, 0x275F	; 0x80275f <DEC1+0x2>
    6004:	b0 90 60 27 	lds	r11, 0x2760	; 0x802760 <DEC1+0x3>
    6008:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    600c:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6010:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6014:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
            MaxDistanceToGo=labs(AxisPosition1-SetJog1);
    6018:	0b 8d       	ldd	r16, Y+27	; 0x1b
    601a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    601c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    601e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6020:	8d 80       	ldd	r8, Y+5	; 0x05
    6022:	9e 80       	ldd	r9, Y+6	; 0x06
    6024:	af 80       	ldd	r10, Y+7	; 0x07
    6026:	b8 84       	ldd	r11, Y+8	; 0x08
    6028:	08 19       	sub	r16, r8
    602a:	19 09       	sbc	r17, r9
    602c:	2a 09       	sbc	r18, r10
    602e:	3b 09       	sbc	r19, r11
    6030:	48 01       	movw	r8, r16
    6032:	59 01       	movw	r10, r18
    6034:	3a f4       	brpl	.+14     	; 0x6044 <__stack+0x2045>
    6036:	88 24       	eor	r8, r8
    6038:	99 24       	eor	r9, r9
    603a:	54 01       	movw	r10, r8
    603c:	80 1a       	sub	r8, r16
    603e:	91 0a       	sbc	r9, r17
    6040:	a2 0a       	sbc	r10, r18
    6042:	b3 0a       	sbc	r11, r19
    6044:	80 92 94 27 	sts	0x2794, r8	; 0x802794 <MaxDistanceToGo>
    6048:	90 92 95 27 	sts	0x2795, r9	; 0x802795 <MaxDistanceToGo+0x1>
    604c:	a0 92 96 27 	sts	0x2796, r10	; 0x802796 <MaxDistanceToGo+0x2>
    6050:	b0 92 97 27 	sts	0x2797, r11	; 0x802797 <MaxDistanceToGo+0x3>
          }
        if(SetSpeed2 >= SetSpeed1 && SetSpeed2 >= SetSpeed3)
    6054:	46 16       	cp	r4, r22
    6056:	57 06       	cpc	r5, r23
    6058:	68 06       	cpc	r6, r24
    605a:	79 06       	cpc	r7, r25
    605c:	0c f4       	brge	.+2      	; 0x6060 <__stack+0x2061>
    605e:	54 c0       	rjmp	.+168    	; 0x6108 <__stack+0x2109>
    6060:	80 90 71 27 	lds	r8, 0x2771	; 0x802771 <SetSpeed3>
    6064:	90 90 72 27 	lds	r9, 0x2772	; 0x802772 <SetSpeed3+0x1>
    6068:	a0 90 73 27 	lds	r10, 0x2773	; 0x802773 <SetSpeed3+0x2>
    606c:	b0 90 74 27 	lds	r11, 0x2774	; 0x802774 <SetSpeed3+0x3>
    6070:	48 14       	cp	r4, r8
    6072:	59 04       	cpc	r5, r9
    6074:	6a 04       	cpc	r6, r10
    6076:	7b 04       	cpc	r7, r11
    6078:	0c f4       	brge	.+2      	; 0x607c <__stack+0x207d>
    607a:	54 c0       	rjmp	.+168    	; 0x6124 <__stack+0x2125>
          { 
            MaxSpeed = SetSpeed2; 
    607c:	40 92 6d 27 	sts	0x276D, r4	; 0x80276d <MaxSpeed>
    6080:	50 92 6e 27 	sts	0x276E, r5	; 0x80276e <MaxSpeed+0x1>
    6084:	60 92 6f 27 	sts	0x276F, r6	; 0x80276f <MaxSpeed+0x2>
    6088:	70 92 70 27 	sts	0x2770, r7	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC2; 
    608c:	80 90 65 27 	lds	r8, 0x2765	; 0x802765 <ACC2>
    6090:	90 90 66 27 	lds	r9, 0x2766	; 0x802766 <ACC2+0x1>
    6094:	a0 90 67 27 	lds	r10, 0x2767	; 0x802767 <ACC2+0x2>
    6098:	b0 90 68 27 	lds	r11, 0x2768	; 0x802768 <ACC2+0x3>
    609c:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    60a0:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    60a4:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    60a8:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
            IDEC=DEC2; 
    60ac:	80 90 59 27 	lds	r8, 0x2759	; 0x802759 <DEC2>
    60b0:	90 90 5a 27 	lds	r9, 0x275A	; 0x80275a <DEC2+0x1>
    60b4:	a0 90 5b 27 	lds	r10, 0x275B	; 0x80275b <DEC2+0x2>
    60b8:	b0 90 5c 27 	lds	r11, 0x275C	; 0x80275c <DEC2+0x3>
    60bc:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    60c0:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    60c4:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    60c8:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
            MaxDistanceToGo=labs(AxisPosition2-SetJog2);
    60cc:	09 89       	ldd	r16, Y+17	; 0x11
    60ce:	1a 89       	ldd	r17, Y+18	; 0x12
    60d0:	2b 89       	ldd	r18, Y+19	; 0x13
    60d2:	3c 89       	ldd	r19, Y+20	; 0x14
    60d4:	a9 84       	ldd	r10, Y+9	; 0x09
    60d6:	ba 84       	ldd	r11, Y+10	; 0x0a
    60d8:	cb 84       	ldd	r12, Y+11	; 0x0b
    60da:	dc 84       	ldd	r13, Y+12	; 0x0c
    60dc:	0a 19       	sub	r16, r10
    60de:	1b 09       	sbc	r17, r11
    60e0:	2c 09       	sbc	r18, r12
    60e2:	3d 09       	sbc	r19, r13
    60e4:	48 01       	movw	r8, r16
    60e6:	59 01       	movw	r10, r18
    60e8:	3a f4       	brpl	.+14     	; 0x60f8 <__stack+0x20f9>
    60ea:	88 24       	eor	r8, r8
    60ec:	99 24       	eor	r9, r9
    60ee:	54 01       	movw	r10, r8
    60f0:	80 1a       	sub	r8, r16
    60f2:	91 0a       	sbc	r9, r17
    60f4:	a2 0a       	sbc	r10, r18
    60f6:	b3 0a       	sbc	r11, r19
    60f8:	80 92 94 27 	sts	0x2794, r8	; 0x802794 <MaxDistanceToGo>
    60fc:	90 92 95 27 	sts	0x2795, r9	; 0x802795 <MaxDistanceToGo+0x1>
    6100:	a0 92 96 27 	sts	0x2796, r10	; 0x802796 <MaxDistanceToGo+0x2>
    6104:	b0 92 97 27 	sts	0x2797, r11	; 0x802797 <MaxDistanceToGo+0x3>
          }
        if(SetSpeed3 >= SetSpeed2 && SetSpeed3 >= SetSpeed1)
    6108:	80 90 71 27 	lds	r8, 0x2771	; 0x802771 <SetSpeed3>
    610c:	90 90 72 27 	lds	r9, 0x2772	; 0x802772 <SetSpeed3+0x1>
    6110:	a0 90 73 27 	lds	r10, 0x2773	; 0x802773 <SetSpeed3+0x2>
    6114:	b0 90 74 27 	lds	r11, 0x2774	; 0x802774 <SetSpeed3+0x3>
    6118:	84 14       	cp	r8, r4
    611a:	95 04       	cpc	r9, r5
    611c:	a6 04       	cpc	r10, r6
    611e:	b7 04       	cpc	r11, r7
    6120:	0c f4       	brge	.+2      	; 0x6124 <__stack+0x2125>
    6122:	4c c0       	rjmp	.+152    	; 0x61bc <__stack+0x21bd>
    6124:	86 16       	cp	r8, r22
    6126:	97 06       	cpc	r9, r23
    6128:	a8 06       	cpc	r10, r24
    612a:	b9 06       	cpc	r11, r25
    612c:	0c f4       	brge	.+2      	; 0x6130 <__stack+0x2131>
    612e:	46 c0       	rjmp	.+140    	; 0x61bc <__stack+0x21bd>
        { 
          MaxSpeed = SetSpeed3; 
    6130:	80 92 6d 27 	sts	0x276D, r8	; 0x80276d <MaxSpeed>
    6134:	90 92 6e 27 	sts	0x276E, r9	; 0x80276e <MaxSpeed+0x1>
    6138:	a0 92 6f 27 	sts	0x276F, r10	; 0x80276f <MaxSpeed+0x2>
    613c:	b0 92 70 27 	sts	0x2770, r11	; 0x802770 <MaxSpeed+0x3>
          IACC=ACC3; 
    6140:	00 91 61 27 	lds	r16, 0x2761	; 0x802761 <ACC3>
    6144:	10 91 62 27 	lds	r17, 0x2762	; 0x802762 <ACC3+0x1>
    6148:	20 91 63 27 	lds	r18, 0x2763	; 0x802763 <ACC3+0x2>
    614c:	30 91 64 27 	lds	r19, 0x2764	; 0x802764 <ACC3+0x3>
    6150:	00 93 51 27 	sts	0x2751, r16	; 0x802751 <IACC>
    6154:	10 93 52 27 	sts	0x2752, r17	; 0x802752 <IACC+0x1>
    6158:	20 93 53 27 	sts	0x2753, r18	; 0x802753 <IACC+0x2>
    615c:	30 93 54 27 	sts	0x2754, r19	; 0x802754 <IACC+0x3>
          IDEC=DEC3; 
    6160:	00 91 55 27 	lds	r16, 0x2755	; 0x802755 <DEC3>
    6164:	10 91 56 27 	lds	r17, 0x2756	; 0x802756 <DEC3+0x1>
    6168:	20 91 57 27 	lds	r18, 0x2757	; 0x802757 <DEC3+0x2>
    616c:	30 91 58 27 	lds	r19, 0x2758	; 0x802758 <DEC3+0x3>
    6170:	00 93 4d 27 	sts	0x274D, r16	; 0x80274d <IDEC>
    6174:	10 93 4e 27 	sts	0x274E, r17	; 0x80274e <IDEC+0x1>
    6178:	20 93 4f 27 	sts	0x274F, r18	; 0x80274f <IDEC+0x2>
    617c:	30 93 50 27 	sts	0x2750, r19	; 0x802750 <IDEC+0x3>
          MaxDistanceToGo=labs(AxisPosition3-SetJog3);
    6180:	c9 80       	ldd	r12, Y+1	; 0x01
    6182:	da 80       	ldd	r13, Y+2	; 0x02
    6184:	eb 80       	ldd	r14, Y+3	; 0x03
    6186:	fc 80       	ldd	r15, Y+4	; 0x04
    6188:	0d 85       	ldd	r16, Y+13	; 0x0d
    618a:	1e 85       	ldd	r17, Y+14	; 0x0e
    618c:	2f 85       	ldd	r18, Y+15	; 0x0f
    618e:	38 89       	ldd	r19, Y+16	; 0x10
    6190:	c0 1a       	sub	r12, r16
    6192:	d1 0a       	sbc	r13, r17
    6194:	e2 0a       	sbc	r14, r18
    6196:	f3 0a       	sbc	r15, r19
    6198:	97 01       	movw	r18, r14
    619a:	86 01       	movw	r16, r12
    619c:	3a f4       	brpl	.+14     	; 0x61ac <__stack+0x21ad>
    619e:	30 95       	com	r19
    61a0:	20 95       	com	r18
    61a2:	10 95       	com	r17
    61a4:	01 95       	neg	r16
    61a6:	1f 4f       	sbci	r17, 0xFF	; 255
    61a8:	2f 4f       	sbci	r18, 0xFF	; 255
    61aa:	3f 4f       	sbci	r19, 0xFF	; 255
    61ac:	00 93 94 27 	sts	0x2794, r16	; 0x802794 <MaxDistanceToGo>
    61b0:	10 93 95 27 	sts	0x2795, r17	; 0x802795 <MaxDistanceToGo+0x1>
    61b4:	20 93 96 27 	sts	0x2796, r18	; 0x802796 <MaxDistanceToGo+0x2>
    61b8:	30 93 97 27 	sts	0x2797, r19	; 0x802797 <MaxDistanceToGo+0x3>
        }
        if(MaxSpeed>0)
    61bc:	c0 90 6d 27 	lds	r12, 0x276D	; 0x80276d <MaxSpeed>
    61c0:	d0 90 6e 27 	lds	r13, 0x276E	; 0x80276e <MaxSpeed+0x1>
    61c4:	e0 90 6f 27 	lds	r14, 0x276F	; 0x80276f <MaxSpeed+0x2>
    61c8:	f0 90 70 27 	lds	r15, 0x2770	; 0x802770 <MaxSpeed+0x3>
    61cc:	c9 82       	std	Y+1, r12	; 0x01
    61ce:	da 82       	std	Y+2, r13	; 0x02
    61d0:	eb 82       	std	Y+3, r14	; 0x03
    61d2:	fc 82       	std	Y+4, r15	; 0x04
    61d4:	1c 14       	cp	r1, r12
    61d6:	1d 04       	cpc	r1, r13
    61d8:	1e 04       	cpc	r1, r14
    61da:	1f 04       	cpc	r1, r15
    61dc:	0c f0       	brlt	.+2      	; 0x61e0 <__stack+0x21e1>
    61de:	40 c0       	rjmp	.+128    	; 0x6260 <__stack+0x2261>
        {
          Ma1=(unsigned int)((float)(SetSpeed1/MaxSpeed)*1000);
    61e0:	a7 01       	movw	r20, r14
    61e2:	96 01       	movw	r18, r12
    61e4:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    61e8:	ca 01       	movw	r24, r20
    61ea:	b9 01       	movw	r22, r18
    61ec:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    61f0:	20 e0       	ldi	r18, 0x00	; 0
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	4a e7       	ldi	r20, 0x7A	; 122
    61f6:	54 e4       	ldi	r21, 0x44	; 68
    61f8:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    61fc:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    6200:	60 93 30 27 	sts	0x2730, r22	; 0x802730 <Ma1>
    6204:	70 93 31 27 	sts	0x2731, r23	; 0x802731 <Ma1+0x1>
          Ma2=(unsigned int)((float)(SetSpeed2/MaxSpeed)*1000);  
    6208:	c3 01       	movw	r24, r6
    620a:	b2 01       	movw	r22, r4
    620c:	a7 01       	movw	r20, r14
    620e:	96 01       	movw	r18, r12
    6210:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6214:	ca 01       	movw	r24, r20
    6216:	b9 01       	movw	r22, r18
    6218:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    621c:	20 e0       	ldi	r18, 0x00	; 0
    621e:	30 e0       	ldi	r19, 0x00	; 0
    6220:	4a e7       	ldi	r20, 0x7A	; 122
    6222:	54 e4       	ldi	r21, 0x44	; 68
    6224:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    6228:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    622c:	60 93 2e 27 	sts	0x272E, r22	; 0x80272e <Ma2>
    6230:	70 93 2f 27 	sts	0x272F, r23	; 0x80272f <Ma2+0x1>
          Ma3=(unsigned int)((float)(SetSpeed3/MaxSpeed)*1000);          		  
    6234:	c5 01       	movw	r24, r10
    6236:	b4 01       	movw	r22, r8
    6238:	a7 01       	movw	r20, r14
    623a:	96 01       	movw	r18, r12
    623c:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6240:	ca 01       	movw	r24, r20
    6242:	b9 01       	movw	r22, r18
    6244:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6248:	20 e0       	ldi	r18, 0x00	; 0
    624a:	30 e0       	ldi	r19, 0x00	; 0
    624c:	4a e7       	ldi	r20, 0x7A	; 122
    624e:	54 e4       	ldi	r21, 0x44	; 68
    6250:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    6254:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    6258:	60 93 2c 27 	sts	0x272C, r22	; 0x80272c <Ma3>
    625c:	70 93 2d 27 	sts	0x272D, r23	; 0x80272d <Ma3+0x1>
        }
        CurSpeedFrq=0;
    6260:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    6264:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    6268:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    626c:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
        TCC0.CCA=0xFFFF;                                                   
    6270:	8f ef       	ldi	r24, 0xFF	; 255
    6272:	9f ef       	ldi	r25, 0xFF	; 255
    6274:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    6278:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
        if(IACC>0)
    627c:	40 90 51 27 	lds	r4, 0x2751	; 0x802751 <IACC>
    6280:	50 90 52 27 	lds	r5, 0x2752	; 0x802752 <IACC+0x1>
    6284:	60 90 53 27 	lds	r6, 0x2753	; 0x802753 <IACC+0x2>
    6288:	70 90 54 27 	lds	r7, 0x2754	; 0x802754 <IACC+0x3>
    628c:	14 14       	cp	r1, r4
    628e:	15 04       	cpc	r1, r5
    6290:	16 04       	cpc	r1, r6
    6292:	17 04       	cpc	r1, r7
    6294:	54 f5       	brge	.+84     	; 0x62ea <__stack+0x22eb>
        {                 
          ACCSpeedINT = (long int) (100 * (float)((float)MaxSpeed / (float)IACC));// t = V/a                        
          ACCSpeedINT = (long int)(MaxSpeed / ACCSpeedINT); 
    6296:	69 81       	ldd	r22, Y+1	; 0x01
    6298:	7a 81       	ldd	r23, Y+2	; 0x02
    629a:	8b 81       	ldd	r24, Y+3	; 0x03
    629c:	9c 81       	ldd	r25, Y+4	; 0x04
    629e:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    62a2:	4b 01       	movw	r8, r22
    62a4:	5c 01       	movw	r10, r24
    62a6:	c3 01       	movw	r24, r6
    62a8:	b2 01       	movw	r22, r4
    62aa:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    62ae:	9b 01       	movw	r18, r22
    62b0:	ac 01       	movw	r20, r24
    62b2:	c5 01       	movw	r24, r10
    62b4:	b4 01       	movw	r22, r8
    62b6:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    62ba:	20 e0       	ldi	r18, 0x00	; 0
    62bc:	30 e0       	ldi	r19, 0x00	; 0
    62be:	48 ec       	ldi	r20, 0xC8	; 200
    62c0:	52 e4       	ldi	r21, 0x42	; 66
    62c2:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    62c6:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    62ca:	9b 01       	movw	r18, r22
    62cc:	ac 01       	movw	r20, r24
    62ce:	69 81       	ldd	r22, Y+1	; 0x01
    62d0:	7a 81       	ldd	r23, Y+2	; 0x02
    62d2:	8b 81       	ldd	r24, Y+3	; 0x03
    62d4:	9c 81       	ldd	r25, Y+4	; 0x04
    62d6:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    62da:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    62de:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    62e2:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    62e6:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
        }
        if(IDEC>0)
    62ea:	80 90 4d 27 	lds	r8, 0x274D	; 0x80274d <IDEC>
    62ee:	90 90 4e 27 	lds	r9, 0x274E	; 0x80274e <IDEC+0x1>
    62f2:	a0 90 4f 27 	lds	r10, 0x274F	; 0x80274f <IDEC+0x2>
    62f6:	b0 90 50 27 	lds	r11, 0x2750	; 0x802750 <IDEC+0x3>
    62fa:	18 14       	cp	r1, r8
    62fc:	19 04       	cpc	r1, r9
    62fe:	1a 04       	cpc	r1, r10
    6300:	1b 04       	cpc	r1, r11
    6302:	54 f5       	brge	.+84     	; 0x6358 <__stack+0x2359>
        {       
          DECSpeedINT = (long int)(100 * (float)((float)MaxSpeed / (float)IDEC));// t = V/a                        
          DECSpeedINT = (long int)(MaxSpeed / DECSpeedINT);   
    6304:	69 81       	ldd	r22, Y+1	; 0x01
    6306:	7a 81       	ldd	r23, Y+2	; 0x02
    6308:	8b 81       	ldd	r24, Y+3	; 0x03
    630a:	9c 81       	ldd	r25, Y+4	; 0x04
    630c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6310:	6b 01       	movw	r12, r22
    6312:	7c 01       	movw	r14, r24
    6314:	c5 01       	movw	r24, r10
    6316:	b4 01       	movw	r22, r8
    6318:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    631c:	9b 01       	movw	r18, r22
    631e:	ac 01       	movw	r20, r24
    6320:	c7 01       	movw	r24, r14
    6322:	b6 01       	movw	r22, r12
    6324:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6328:	20 e0       	ldi	r18, 0x00	; 0
    632a:	30 e0       	ldi	r19, 0x00	; 0
    632c:	48 ec       	ldi	r20, 0xC8	; 200
    632e:	52 e4       	ldi	r21, 0x42	; 66
    6330:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    6334:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6338:	9b 01       	movw	r18, r22
    633a:	ac 01       	movw	r20, r24
    633c:	69 81       	ldd	r22, Y+1	; 0x01
    633e:	7a 81       	ldd	r23, Y+2	; 0x02
    6340:	8b 81       	ldd	r24, Y+3	; 0x03
    6342:	9c 81       	ldd	r25, Y+4	; 0x04
    6344:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6348:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    634c:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6350:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6354:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
        }                                                  
                       
        DecDTG = pow(MaxSpeed,2)/(IDEC);            
    6358:	69 81       	ldd	r22, Y+1	; 0x01
    635a:	7a 81       	ldd	r23, Y+2	; 0x02
    635c:	8b 81       	ldd	r24, Y+3	; 0x03
    635e:	9c 81       	ldd	r25, Y+4	; 0x04
    6360:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6364:	9b 01       	movw	r18, r22
    6366:	ac 01       	movw	r20, r24
    6368:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    636c:	6b 01       	movw	r12, r22
    636e:	7c 01       	movw	r14, r24
    6370:	c5 01       	movw	r24, r10
    6372:	b4 01       	movw	r22, r8
    6374:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6378:	9b 01       	movw	r18, r22
    637a:	ac 01       	movw	r20, r24
    637c:	c7 01       	movw	r24, r14
    637e:	b6 01       	movw	r22, r12
    6380:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6384:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6388:	60 93 80 27 	sts	0x2780, r22	; 0x802780 <DecDTG>
    638c:	70 93 81 27 	sts	0x2781, r23	; 0x802781 <DecDTG+0x1>
    6390:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <DecDTG+0x2>
    6394:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <DecDTG+0x3>
        AccDTG = MaxDistanceToGo - pow(MaxSpeed,2)/(IACC);
    6398:	00 91 94 27 	lds	r16, 0x2794	; 0x802794 <MaxDistanceToGo>
    639c:	30 90 95 27 	lds	r3, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    63a0:	20 90 96 27 	lds	r2, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    63a4:	10 91 97 27 	lds	r17, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    63a8:	60 2f       	mov	r22, r16
    63aa:	73 2d       	mov	r23, r3
    63ac:	82 2d       	mov	r24, r2
    63ae:	91 2f       	mov	r25, r17
    63b0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    63b4:	6d 8b       	std	Y+21, r22	; 0x15
    63b6:	7e 8b       	std	Y+22, r23	; 0x16
    63b8:	8f 8b       	std	Y+23, r24	; 0x17
    63ba:	98 8f       	std	Y+24, r25	; 0x18
    63bc:	c3 01       	movw	r24, r6
    63be:	b2 01       	movw	r22, r4
    63c0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    63c4:	9b 01       	movw	r18, r22
    63c6:	ac 01       	movw	r20, r24
    63c8:	c7 01       	movw	r24, r14
    63ca:	b6 01       	movw	r22, r12
    63cc:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    63d0:	9b 01       	movw	r18, r22
    63d2:	ac 01       	movw	r20, r24
    63d4:	6d 89       	ldd	r22, Y+21	; 0x15
    63d6:	7e 89       	ldd	r23, Y+22	; 0x16
    63d8:	8f 89       	ldd	r24, Y+23	; 0x17
    63da:	98 8d       	ldd	r25, Y+24	; 0x18
    63dc:	0e 94 a8 3d 	call	0x7b50	; 0x7b50 <__subsf3>
    63e0:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    63e4:	60 93 84 27 	sts	0x2784, r22	; 0x802784 <AccDTG>
    63e8:	70 93 85 27 	sts	0x2785, r23	; 0x802785 <AccDTG+0x1>
    63ec:	80 93 86 27 	sts	0x2786, r24	; 0x802786 <AccDTG+0x2>
    63f0:	90 93 87 27 	sts	0x2787, r25	; 0x802787 <AccDTG+0x3>
                 
        DistanceToGo1=labs(AxisPosition1-SetJog1);  
    63f4:	cb 8c       	ldd	r12, Y+27	; 0x1b
    63f6:	dc 8c       	ldd	r13, Y+28	; 0x1c
    63f8:	ed 8c       	ldd	r14, Y+29	; 0x1d
    63fa:	fe 8c       	ldd	r15, Y+30	; 0x1e
    63fc:	2d 81       	ldd	r18, Y+5	; 0x05
    63fe:	3e 81       	ldd	r19, Y+6	; 0x06
    6400:	4f 81       	ldd	r20, Y+7	; 0x07
    6402:	58 85       	ldd	r21, Y+8	; 0x08
    6404:	c2 1a       	sub	r12, r18
    6406:	d3 0a       	sbc	r13, r19
    6408:	e4 0a       	sbc	r14, r20
    640a:	f5 0a       	sbc	r15, r21
    640c:	d7 01       	movw	r26, r14
    640e:	c6 01       	movw	r24, r12
    6410:	3a f4       	brpl	.+14     	; 0x6420 <__stack+0x2421>
    6412:	88 27       	eor	r24, r24
    6414:	99 27       	eor	r25, r25
    6416:	dc 01       	movw	r26, r24
    6418:	8c 19       	sub	r24, r12
    641a:	9d 09       	sbc	r25, r13
    641c:	ae 09       	sbc	r26, r14
    641e:	bf 09       	sbc	r27, r15
    6420:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    6424:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    6428:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    642c:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
        DistanceToGo2=labs(AxisPosition2-SetJog2);        
    6430:	89 89       	ldd	r24, Y+17	; 0x11
    6432:	9a 89       	ldd	r25, Y+18	; 0x12
    6434:	ab 89       	ldd	r26, Y+19	; 0x13
    6436:	bc 89       	ldd	r27, Y+20	; 0x14
    6438:	c9 84       	ldd	r12, Y+9	; 0x09
    643a:	da 84       	ldd	r13, Y+10	; 0x0a
    643c:	eb 84       	ldd	r14, Y+11	; 0x0b
    643e:	fc 84       	ldd	r15, Y+12	; 0x0c
    6440:	8c 19       	sub	r24, r12
    6442:	9d 09       	sbc	r25, r13
    6444:	ae 09       	sbc	r26, r14
    6446:	bf 09       	sbc	r27, r15
    6448:	ac 01       	movw	r20, r24
    644a:	bd 01       	movw	r22, r26
    644c:	3a f4       	brpl	.+14     	; 0x645c <__stack+0x245d>
    644e:	44 27       	eor	r20, r20
    6450:	55 27       	eor	r21, r21
    6452:	ba 01       	movw	r22, r20
    6454:	48 1b       	sub	r20, r24
    6456:	59 0b       	sbc	r21, r25
    6458:	6a 0b       	sbc	r22, r26
    645a:	7b 0b       	sbc	r23, r27
    645c:	40 93 8c 27 	sts	0x278C, r20	; 0x80278c <DistanceToGo2>
    6460:	50 93 8d 27 	sts	0x278D, r21	; 0x80278d <DistanceToGo2+0x1>
    6464:	60 93 8e 27 	sts	0x278E, r22	; 0x80278e <DistanceToGo2+0x2>
    6468:	70 93 8f 27 	sts	0x278F, r23	; 0x80278f <DistanceToGo2+0x3>
        ACC=1; 
    646c:	ff 24       	eor	r15, r15
    646e:	f3 94       	inc	r15
    6470:	f0 92 39 27 	sts	0x2739, r15	; 0x802739 <ACC>
        sprintf(BufferSend,"!30\tMaxS:%d\tIACC:%d\tIDEC:%d\n\rMa1:%d\tMa2:%d\tBACC:%d\tBDEC:%d\tMAXDTG:%d\n\r",MaxSpeed,IACC,IDEC,Ma1,Ma2,ACCSpeedINT,DECSpeedINT,MaxDistanceToGo); 
    6474:	1f 93       	push	r17
    6476:	2f 92       	push	r2
    6478:	3f 92       	push	r3
    647a:	0f 93       	push	r16
    647c:	80 91 3d 27 	lds	r24, 0x273D	; 0x80273d <DECSpeedINT+0x3>
    6480:	8f 93       	push	r24
    6482:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <DECSpeedINT+0x2>
    6486:	8f 93       	push	r24
    6488:	80 91 3b 27 	lds	r24, 0x273B	; 0x80273b <DECSpeedINT+0x1>
    648c:	8f 93       	push	r24
    648e:	80 91 3a 27 	lds	r24, 0x273A	; 0x80273a <DECSpeedINT>
    6492:	8f 93       	push	r24
    6494:	80 91 41 27 	lds	r24, 0x2741	; 0x802741 <ACCSpeedINT+0x3>
    6498:	8f 93       	push	r24
    649a:	80 91 40 27 	lds	r24, 0x2740	; 0x802740 <ACCSpeedINT+0x2>
    649e:	8f 93       	push	r24
    64a0:	80 91 3f 27 	lds	r24, 0x273F	; 0x80273f <ACCSpeedINT+0x1>
    64a4:	8f 93       	push	r24
    64a6:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <ACCSpeedINT>
    64aa:	8f 93       	push	r24
    64ac:	80 91 2f 27 	lds	r24, 0x272F	; 0x80272f <Ma2+0x1>
    64b0:	8f 93       	push	r24
    64b2:	80 91 2e 27 	lds	r24, 0x272E	; 0x80272e <Ma2>
    64b6:	8f 93       	push	r24
    64b8:	80 91 31 27 	lds	r24, 0x2731	; 0x802731 <Ma1+0x1>
    64bc:	8f 93       	push	r24
    64be:	80 91 30 27 	lds	r24, 0x2730	; 0x802730 <Ma1>
    64c2:	8f 93       	push	r24
    64c4:	bf 92       	push	r11
    64c6:	af 92       	push	r10
    64c8:	9f 92       	push	r9
    64ca:	8f 92       	push	r8
    64cc:	7f 92       	push	r7
    64ce:	6f 92       	push	r6
    64d0:	5f 92       	push	r5
    64d2:	4f 92       	push	r4
    64d4:	dc 80       	ldd	r13, Y+4	; 0x04
    64d6:	df 92       	push	r13
    64d8:	eb 80       	ldd	r14, Y+3	; 0x03
    64da:	ef 92       	push	r14
    64dc:	0a 81       	ldd	r16, Y+2	; 0x02
    64de:	0f 93       	push	r16
    64e0:	19 81       	ldd	r17, Y+1	; 0x01
    64e2:	1f 93       	push	r17
    64e4:	85 eb       	ldi	r24, 0xB5	; 181
    64e6:	95 e2       	ldi	r25, 0x25	; 37
    64e8:	9f 93       	push	r25
    64ea:	8f 93       	push	r24
    64ec:	87 e5       	ldi	r24, 0x57	; 87
    64ee:	99 e2       	ldi	r25, 0x29	; 41
    64f0:	9f 93       	push	r25
    64f2:	8f 93       	push	r24
    64f4:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
        Responsing=1;                     
    64f8:	f0 92 8c 28 	sts	0x288C, r15	; 0x80288c <Responsing>
        SetDataReady;
    64fc:	e0 ea       	ldi	r30, 0xA0	; 160
    64fe:	f6 e0       	ldi	r31, 0x06	; 6
    6500:	84 81       	ldd	r24, Z+4	; 0x04
    6502:	81 60       	ori	r24, 0x01	; 1
    6504:	84 83       	std	Z+4, r24	; 0x04
    6506:	cd bf       	out	0x3d, r28	; 61
    6508:	de bf       	out	0x3e, r29	; 62
    650a:	74 c1       	rjmp	.+744    	; 0x67f4 <__stack+0x27f5>
     }     
    }            
    else if(strncmp(cmdTemp,"#4000",5)==0)
    650c:	45 e0       	ldi	r20, 0x05	; 5
    650e:	50 e0       	ldi	r21, 0x00	; 0
    6510:	6c ef       	ldi	r22, 0xFC	; 252
    6512:	75 e2       	ldi	r23, 0x25	; 37
    6514:	80 e1       	ldi	r24, 0x10	; 16
    6516:	97 e2       	ldi	r25, 0x27	; 39
    6518:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    651c:	89 2b       	or	r24, r25
    651e:	61 f5       	brne	.+88     	; 0x6578 <__stack+0x2579>
    { 
      //if(ProgramRun)
      //{
          ProgramRun=0;
    6520:	10 92 bc 27 	sts	0x27BC, r1	; 0x8027bc <ProgramRun>
          DistanceToGo1=0;
    6524:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    6528:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    652c:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    6530:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          DistanceToGo2=0;
    6534:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    6538:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    653c:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    6540:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
          DistanceToGo3=0;   
    6544:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    6548:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    654c:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    6550:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          DO1_CLR;
    6554:	e0 e0       	ldi	r30, 0x00	; 0
    6556:	f7 e0       	ldi	r31, 0x07	; 7
    6558:	84 81       	ldd	r24, Z+4	; 0x04
    655a:	8b 7f       	andi	r24, 0xFB	; 251
    655c:	84 83       	std	Z+4, r24	; 0x04
          sprintf(BufferSend,"!4000\r\n"); 
    655e:	88 e0       	ldi	r24, 0x08	; 8
    6560:	e2 e0       	ldi	r30, 0x02	; 2
    6562:	f6 e2       	ldi	r31, 0x26	; 38
    6564:	a7 e5       	ldi	r26, 0x57	; 87
    6566:	b9 e2       	ldi	r27, 0x29	; 41
    6568:	01 90       	ld	r0, Z+
    656a:	0d 92       	st	X+, r0
    656c:	8a 95       	dec	r24
    656e:	e1 f7       	brne	.-8      	; 0x6568 <__stack+0x2569>
          Responsing=1;      
    6570:	81 e0       	ldi	r24, 0x01	; 1
    6572:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
    6576:	3e c1       	rjmp	.+636    	; 0x67f4 <__stack+0x27f5>
      //}
    } 
    else if(strncmp(cmdTemp,"#4100",5)==0)
    6578:	45 e0       	ldi	r20, 0x05	; 5
    657a:	50 e0       	ldi	r21, 0x00	; 0
    657c:	6a e0       	ldi	r22, 0x0A	; 10
    657e:	76 e2       	ldi	r23, 0x26	; 38
    6580:	80 e1       	ldi	r24, 0x10	; 16
    6582:	97 e2       	ldi	r25, 0x27	; 39
    6584:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    6588:	89 2b       	or	r24, r25
    658a:	61 f5       	brne	.+88     	; 0x65e4 <__stack+0x25e5>
    { 
      if(ProgramRun)
    658c:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    6590:	88 23       	and	r24, r24
    6592:	09 f4       	brne	.+2      	; 0x6596 <__stack+0x2597>
    6594:	2f c1       	rjmp	.+606    	; 0x67f4 <__stack+0x27f5>
      {
          IsPause=1;
    6596:	81 e0       	ldi	r24, 0x01	; 1
    6598:	80 93 da 26 	sts	0x26DA, r24	; 0x8026da <IsPause>
          DistanceToGo1=0;
    659c:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    65a0:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    65a4:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    65a8:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          DistanceToGo2=0;
    65ac:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    65b0:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    65b4:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    65b8:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
          DistanceToGo3=0;
    65bc:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    65c0:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    65c4:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    65c8:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          sprintf(BufferSend,"!4100\r\n"); 
    65cc:	98 e0       	ldi	r25, 0x08	; 8
    65ce:	e0 e1       	ldi	r30, 0x10	; 16
    65d0:	f6 e2       	ldi	r31, 0x26	; 38
    65d2:	a7 e5       	ldi	r26, 0x57	; 87
    65d4:	b9 e2       	ldi	r27, 0x29	; 41
    65d6:	01 90       	ld	r0, Z+
    65d8:	0d 92       	st	X+, r0
    65da:	9a 95       	dec	r25
    65dc:	e1 f7       	brne	.-8      	; 0x65d6 <__stack+0x25d7>
          Responsing=1;      
    65de:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
    65e2:	08 c1       	rjmp	.+528    	; 0x67f4 <__stack+0x27f5>
      }
    }
    else if(strncmp(cmdTemp,"#9800",5)==0)
    65e4:	45 e0       	ldi	r20, 0x05	; 5
    65e6:	50 e0       	ldi	r21, 0x00	; 0
    65e8:	68 e1       	ldi	r22, 0x18	; 24
    65ea:	76 e2       	ldi	r23, 0x26	; 38
    65ec:	80 e1       	ldi	r24, 0x10	; 16
    65ee:	97 e2       	ldi	r25, 0x27	; 39
    65f0:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    65f4:	89 2b       	or	r24, r25
    65f6:	09 f0       	breq	.+2      	; 0x65fa <__stack+0x25fb>
    65f8:	5f c0       	rjmp	.+190    	; 0x66b8 <__stack+0x26b9>
    {  
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    65fa:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    65fe:	81 11       	cpse	r24, r1
    6600:	0b c0       	rjmp	.+22     	; 0x6618 <__stack+0x2619>
    6602:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    6606:	81 11       	cpse	r24, r1
    6608:	09 c0       	rjmp	.+18     	; 0x661c <__stack+0x261d>
    660a:	81 e0       	ldi	r24, 0x01	; 1
    660c:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    6610:	91 11       	cpse	r25, r1
    6612:	05 c0       	rjmp	.+10     	; 0x661e <__stack+0x261f>
    6614:	80 e0       	ldi	r24, 0x00	; 0
    6616:	03 c0       	rjmp	.+6      	; 0x661e <__stack+0x261f>
    6618:	81 e0       	ldi	r24, 0x01	; 1
    661a:	01 c0       	rjmp	.+2      	; 0x661e <__stack+0x261f>
    661c:	81 e0       	ldi	r24, 0x01	; 1
    661e:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
     if (!ProgramRun)
    6622:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    6626:	81 11       	cpse	r24, r1
    6628:	3d c0       	rjmp	.+122    	; 0x66a4 <__stack+0x26a5>
     { 
      printf("Get Run Command\r\n");
    662a:	8e e1       	ldi	r24, 0x1E	; 30
    662c:	96 e2       	ldi	r25, 0x26	; 38
    662e:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
    6632:	80 91 f9 26 	lds	r24, 0x26F9	; 0x8026f9 <AxisMoving>
      while (AxisMoving == 1) 
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6636:	20 91 48 27 	lds	r18, 0x2748	; 0x802748 <AxisIsMoving1>
    663a:	30 91 47 27 	lds	r19, 0x2747	; 0x802747 <AxisIsMoving2>
    663e:	91 e0       	ldi	r25, 0x01	; 1
    6640:	40 91 46 27 	lds	r20, 0x2746	; 0x802746 <AxisIsMoving3>
    6644:	41 11       	cpse	r20, r1
    6646:	01 c0       	rjmp	.+2      	; 0x664a <__stack+0x264b>
    6648:	90 e0       	ldi	r25, 0x00	; 0
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
     if (!ProgramRun)
     { 
      printf("Get Run Command\r\n");
      while (AxisMoving == 1) 
    664a:	81 30       	cpi	r24, 0x01	; 1
    664c:	51 f4       	brne	.+20     	; 0x6662 <__stack+0x2663>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    664e:	21 11       	cpse	r18, r1
    6650:	04 c0       	rjmp	.+8      	; 0x665a <__stack+0x265b>
    6652:	31 11       	cpse	r19, r1
    6654:	04 c0       	rjmp	.+8      	; 0x665e <__stack+0x265f>
    6656:	89 2f       	mov	r24, r25
    6658:	f8 cf       	rjmp	.-16     	; 0x664a <__stack+0x264b>
    665a:	81 e0       	ldi	r24, 0x01	; 1
    665c:	f6 cf       	rjmp	.-20     	; 0x664a <__stack+0x264b>
    665e:	81 e0       	ldi	r24, 0x01	; 1
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
     if (!ProgramRun)
     { 
      printf("Get Run Command\r\n");
      while (AxisMoving == 1) 
    6660:	f4 cf       	rjmp	.-24     	; 0x664a <__stack+0x264b>
    6662:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
       ContinuousRead=0; 
    6666:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
       PRGEXEindex = 0;
    666a:	10 92 f7 26 	sts	0x26F7, r1	; 0x8026f7 <PRGEXEindex>
    666e:	10 92 f8 26 	sts	0x26F8, r1	; 0x8026f8 <PRGEXEindex+0x1>
       ProgramRun = 1;
    6672:	31 e0       	ldi	r19, 0x01	; 1
    6674:	30 93 bc 27 	sts	0x27BC, r19	; 0x8027bc <ProgramRun>
       printf("Program is running\r\n");       
    6678:	8f e2       	ldi	r24, 0x2F	; 47
    667a:	96 e2       	ldi	r25, 0x26	; 38
    667c:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
       sprintf(BufferSend,"!9800\r\n");
    6680:	88 e0       	ldi	r24, 0x08	; 8
    6682:	e3 e4       	ldi	r30, 0x43	; 67
    6684:	f6 e2       	ldi	r31, 0x26	; 38
    6686:	a7 e5       	ldi	r26, 0x57	; 87
    6688:	b9 e2       	ldi	r27, 0x29	; 41
    668a:	01 90       	ld	r0, Z+
    668c:	0d 92       	st	X+, r0
    668e:	8a 95       	dec	r24
    6690:	e1 f7       	brne	.-8      	; 0x668a <__stack+0x268b>
       Responsing=1;
    6692:	41 e0       	ldi	r20, 0x01	; 1
    6694:	40 93 8c 28 	sts	0x288C, r20	; 0x80288c <Responsing>
       SetDataReady;  
    6698:	e0 ea       	ldi	r30, 0xA0	; 160
    669a:	f6 e0       	ldi	r31, 0x06	; 6
    669c:	84 81       	ldd	r24, Z+4	; 0x04
    669e:	81 60       	ori	r24, 0x01	; 1
    66a0:	84 83       	std	Z+4, r24	; 0x04
    66a2:	a8 c0       	rjmp	.+336    	; 0x67f4 <__stack+0x27f5>
     } 
     else if(IsPause==1)
    66a4:	80 91 da 26 	lds	r24, 0x26DA	; 0x8026da <IsPause>
    66a8:	81 30       	cpi	r24, 0x01	; 1
    66aa:	09 f0       	breq	.+2      	; 0x66ae <__stack+0x26af>
    66ac:	a3 c0       	rjmp	.+326    	; 0x67f4 <__stack+0x27f5>
     {
         PRGExe();
    66ae:	0e 94 0f 11 	call	0x221e	; 0x221e <_Z6PRGExev>
         IsPause=0;
    66b2:	10 92 da 26 	sts	0x26DA, r1	; 0x8026da <IsPause>
    66b6:	9e c0       	rjmp	.+316    	; 0x67f4 <__stack+0x27f5>
     }       
    }
    else if(strncmp(cmdTemp,"#9900",5)==0)
    66b8:	45 e0       	ldi	r20, 0x05	; 5
    66ba:	50 e0       	ldi	r21, 0x00	; 0
    66bc:	6b e4       	ldi	r22, 0x4B	; 75
    66be:	76 e2       	ldi	r23, 0x26	; 38
    66c0:	80 e1       	ldi	r24, 0x10	; 16
    66c2:	97 e2       	ldi	r25, 0x27	; 39
    66c4:	0e 94 4e 40 	call	0x809c	; 0x809c <strncmp>
    66c8:	89 2b       	or	r24, r25
    66ca:	09 f0       	breq	.+2      	; 0x66ce <__stack+0x26cf>
    66cc:	46 c0       	rjmp	.+140    	; 0x675a <__stack+0x275b>
    { 
       ContinuousRead=0; 
    66ce:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
       readRam(); 
    66d2:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
       readRam(); 
    66d6:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
       readRam(); 
    66da:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
       sprintf(BufferSend,"!9800\r\nPL:%u\tMD:%u\tMv1:%d\tMaxDTG:%d\tMaxSpeed:%d\tACCDTG:%d\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode,CMDPRGlist.Move1,CMDPRGlist.MaxDistanceToGo,CMDPRGlist.MaxSpeed,CMDPRGlist.ACCDTG); 
    66de:	ee e3       	ldi	r30, 0x3E	; 62
    66e0:	f8 e2       	ldi	r31, 0x28	; 40
    66e2:	83 a9       	ldd	r24, Z+51	; 0x33
    66e4:	8f 93       	push	r24
    66e6:	82 a9       	ldd	r24, Z+50	; 0x32
    66e8:	8f 93       	push	r24
    66ea:	81 a9       	ldd	r24, Z+49	; 0x31
    66ec:	8f 93       	push	r24
    66ee:	80 a9       	ldd	r24, Z+48	; 0x30
    66f0:	8f 93       	push	r24
    66f2:	83 a1       	ldd	r24, Z+35	; 0x23
    66f4:	8f 93       	push	r24
    66f6:	82 a1       	ldd	r24, Z+34	; 0x22
    66f8:	8f 93       	push	r24
    66fa:	81 a1       	ldd	r24, Z+33	; 0x21
    66fc:	8f 93       	push	r24
    66fe:	80 a1       	ldd	r24, Z+32	; 0x20
    6700:	8f 93       	push	r24
    6702:	87 a1       	ldd	r24, Z+39	; 0x27
    6704:	8f 93       	push	r24
    6706:	86 a1       	ldd	r24, Z+38	; 0x26
    6708:	8f 93       	push	r24
    670a:	85 a1       	ldd	r24, Z+37	; 0x25
    670c:	8f 93       	push	r24
    670e:	84 a1       	ldd	r24, Z+36	; 0x24
    6710:	8f 93       	push	r24
    6712:	80 85       	ldd	r24, Z+8	; 0x08
    6714:	8f 93       	push	r24
    6716:	87 81       	ldd	r24, Z+7	; 0x07
    6718:	8f 93       	push	r24
    671a:	86 81       	ldd	r24, Z+6	; 0x06
    671c:	8f 93       	push	r24
    671e:	85 81       	ldd	r24, Z+5	; 0x05
    6720:	8f 93       	push	r24
    6722:	83 81       	ldd	r24, Z+3	; 0x03
    6724:	1f 92       	push	r1
    6726:	8f 93       	push	r24
    6728:	81 81       	ldd	r24, Z+1	; 0x01
    672a:	8f 93       	push	r24
    672c:	80 81       	ld	r24, Z
    672e:	8f 93       	push	r24
    6730:	81 e5       	ldi	r24, 0x51	; 81
    6732:	96 e2       	ldi	r25, 0x26	; 38
    6734:	9f 93       	push	r25
    6736:	8f 93       	push	r24
    6738:	87 e5       	ldi	r24, 0x57	; 87
    673a:	99 e2       	ldi	r25, 0x29	; 41
    673c:	9f 93       	push	r25
    673e:	8f 93       	push	r24
    6740:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <sprintf>
       //sprintf(BufferSend,"!9900\r\nID:%u\tMaxSpeed:%d\tACC:%d\r\n",Axes[0].ID,Axes[0].MaxSpeed,Axes[0].ACC);
       Responsing=1;
    6744:	81 e0       	ldi	r24, 0x01	; 1
    6746:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
       SetDataReady;
    674a:	e0 ea       	ldi	r30, 0xA0	; 160
    674c:	f6 e0       	ldi	r31, 0x06	; 6
    674e:	84 81       	ldd	r24, Z+4	; 0x04
    6750:	81 60       	ori	r24, 0x01	; 1
    6752:	84 83       	std	Z+4, r24	; 0x04
    6754:	cd bf       	out	0x3d, r28	; 61
    6756:	de bf       	out	0x3e, r29	; 62
    6758:	4d c0       	rjmp	.+154    	; 0x67f4 <__stack+0x27f5>
    }    
    else
    {
      ClrDataReady;
    675a:	e0 ea       	ldi	r30, 0xA0	; 160
    675c:	f6 e0       	ldi	r31, 0x06	; 6
    675e:	84 81       	ldd	r24, Z+4	; 0x04
    6760:	8e 7f       	andi	r24, 0xFE	; 254
    6762:	84 83       	std	Z+4, r24	; 0x04
    }
}
    6764:	47 c0       	rjmp	.+142    	; 0x67f4 <__stack+0x27f5>
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6766:	91 e0       	ldi	r25, 0x01	; 1
    6768:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
         
     if (!ProgramRun)
    676c:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    6770:	99 23       	and	r25, r25
    6772:	11 f4       	brne	.+4      	; 0x6778 <__stack+0x2779>
    6774:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <_Z6cmdExev+0xb38>
    6778:	3d c0       	rjmp	.+122    	; 0x67f4 <__stack+0x27f5>
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    677a:	81 e0       	ldi	r24, 0x01	; 1
    677c:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
         
    if (!ProgramRun)
    6780:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    6784:	88 23       	and	r24, r24
    6786:	11 f4       	brne	.+4      	; 0x678c <__stack+0x278d>
    6788:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <__stack+0xdcb>
    678c:	33 c0       	rjmp	.+102    	; 0x67f4 <__stack+0x27f5>
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    678e:	81 e0       	ldi	r24, 0x01	; 1
    6790:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    if (!ProgramRun)
    6794:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    6798:	88 23       	and	r24, r24
    679a:	11 f4       	brne	.+4      	; 0x67a0 <__stack+0x27a1>
    679c:	0c 94 bb 27 	jmp	0x4f76	; 0x4f76 <__stack+0xf77>
    67a0:	29 c0       	rjmp	.+82     	; 0x67f4 <__stack+0x27f5>
       }
     }
    }   
    else if(strncmp(cmdTemp,"#13",3)==0)
    {// Set Speed 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67a2:	81 e0       	ldi	r24, 0x01	; 1
    67a4:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    67a8:	25 c0       	rjmp	.+74     	; 0x67f4 <__stack+0x27f5>
         }
       }
    }
    else if(strncmp(cmdTemp,"#16",3)==0)
    {// Set ACC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    67b0:	21 c0       	rjmp	.+66     	; 0x67f4 <__stack+0x27f5>
       }          
      }
    }
    else if(strncmp(cmdTemp,"#17",3)==0)
    {// Set DEC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67b2:	81 e0       	ldi	r24, 0x01	; 1
    67b4:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    67b8:	1d c0       	rjmp	.+58     	; 0x67f4 <__stack+0x27f5>
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67ba:	91 e0       	ldi	r25, 0x01	; 1
    67bc:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
         
     if (!ProgramRun)
    67c0:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    67c4:	99 23       	and	r25, r25
    67c6:	11 f4       	brne	.+4      	; 0x67cc <__stack+0x27cd>
    67c8:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <_Z6cmdExev+0xb38>
    67cc:	13 c0       	rjmp	.+38     	; 0x67f4 <__stack+0x27f5>
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67ce:	81 e0       	ldi	r24, 0x01	; 1
    67d0:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
         
    if (!ProgramRun)
    67d4:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    67d8:	88 23       	and	r24, r24
    67da:	11 f4       	brne	.+4      	; 0x67e0 <__stack+0x27e1>
    67dc:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <__stack+0xdcb>
    67e0:	09 c0       	rjmp	.+18     	; 0x67f4 <__stack+0x27f5>
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    67e2:	81 e0       	ldi	r24, 0x01	; 1
    67e4:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    if (!ProgramRun)
    67e8:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    67ec:	88 23       	and	r24, r24
    67ee:	11 f4       	brne	.+4      	; 0x67f4 <__stack+0x27f5>
    67f0:	0c 94 bb 27 	jmp	0x4f76	; 0x4f76 <__stack+0xf77>
    }    
    else
    {
      ClrDataReady;
    }
}
    67f4:	6e 96       	adiw	r28, 0x1e	; 30
    67f6:	cd bf       	out	0x3d, r28	; 61
    67f8:	de bf       	out	0x3e, r29	; 62
    67fa:	df 91       	pop	r29
    67fc:	cf 91       	pop	r28
    67fe:	1f 91       	pop	r17
    6800:	0f 91       	pop	r16
    6802:	ff 90       	pop	r15
    6804:	ef 90       	pop	r14
    6806:	df 90       	pop	r13
    6808:	cf 90       	pop	r12
    680a:	bf 90       	pop	r11
    680c:	af 90       	pop	r10
    680e:	9f 90       	pop	r9
    6810:	8f 90       	pop	r8
    6812:	7f 90       	pop	r7
    6814:	6f 90       	pop	r6
    6816:	5f 90       	pop	r5
    6818:	4f 90       	pop	r4
    681a:	3f 90       	pop	r3
    681c:	2f 90       	pop	r2
    681e:	08 95       	ret

00006820 <_Z18system_clocks_initv>:
	unsigned char n,s;

	// Optimize for speed
	#pragma optsize-
	// Save interrupts enabled/disabled state
	s=SREG;
    6820:	9f b7       	in	r25, 0x3f	; 63
	// Disable interrupts
	asm("cli");
    6822:	f8 94       	cli

	// Internal 32 kHz RC oscillator initialization
	// Enable the internal 32 kHz RC oscillator
	OSC.CTRL|=OSC_RC32KEN_bm;
    6824:	e0 e5       	ldi	r30, 0x50	; 80
    6826:	f0 e0       	ldi	r31, 0x00	; 0
    6828:	80 81       	ld	r24, Z
    682a:	84 60       	ori	r24, 0x04	; 4
    682c:	80 83       	st	Z, r24
	// Wait for the internal 32 kHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
    682e:	81 81       	ldd	r24, Z+1	; 0x01
    6830:	82 ff       	sbrs	r24, 2
    6832:	fd cf       	rjmp	.-6      	; 0x682e <_Z18system_clocks_initv+0xe>

	// Internal 32 MHz RC oscillator initialization
	// Enable the internal 32 MHz RC oscillator
	OSC.CTRL|=OSC_RC32MEN_bm;
    6834:	e0 e5       	ldi	r30, 0x50	; 80
    6836:	f0 e0       	ldi	r31, 0x00	; 0
    6838:	80 81       	ld	r24, Z
    683a:	82 60       	ori	r24, 0x02	; 2
    683c:	80 83       	st	Z, r24
	// System Clock prescalers B & C division factors: B:1, C:1
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    683e:	a0 e4       	ldi	r26, 0x40	; 64
    6840:	b0 e0       	ldi	r27, 0x00	; 0
    6842:	11 96       	adiw	r26, 0x01	; 1
    6844:	8c 91       	ld	r24, X
    6846:	11 97       	sbiw	r26, 0x01	; 1
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
    6848:	80 78       	andi	r24, 0x80	; 128
	CCP=CCP_IOREG_gc;
    684a:	28 ed       	ldi	r18, 0xD8	; 216
    684c:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
    684e:	11 96       	adiw	r26, 0x01	; 1
    6850:	8c 93       	st	X, r24

	// Internal 32 MHz RC osc. calibration reference clock source: 32.768 kHz Internal Osc.
	OSC.DFLLCTRL&= ~(OSC_RC32MCREF_bm | OSC_RC2MCREF_bm);
    6852:	86 81       	ldd	r24, Z+6	; 0x06
    6854:	8c 7f       	andi	r24, 0xFC	; 252
    6856:	86 83       	std	Z+6, r24	; 0x06
	// Enable the auto-calibration of the internal 32 MHz RC oscillator
	DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
    6858:	e0 e6       	ldi	r30, 0x60	; 96
    685a:	f0 e0       	ldi	r31, 0x00	; 0
    685c:	80 81       	ld	r24, Z
    685e:	81 60       	ori	r24, 0x01	; 1
    6860:	80 83       	st	Z, r24

	// Wait for the internal 32 MHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
    6862:	e0 e5       	ldi	r30, 0x50	; 80
    6864:	f0 e0       	ldi	r31, 0x00	; 0
    6866:	81 81       	ldd	r24, Z+1	; 0x01
    6868:	81 ff       	sbrs	r24, 1
    686a:	fd cf       	rjmp	.-6      	; 0x6866 <_Z18system_clocks_initv+0x46>

	// Select the system clock source: 32 MHz Internal RC Osc.
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
    686c:	e0 e4       	ldi	r30, 0x40	; 64
    686e:	f0 e0       	ldi	r31, 0x00	; 0
    6870:	80 81       	ld	r24, Z
    6872:	88 7f       	andi	r24, 0xF8	; 248
    6874:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
    6876:	28 ed       	ldi	r18, 0xD8	; 216
    6878:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
    687a:	80 83       	st	Z, r24

	// Disable the unused oscillators: 2 MHz, external clock/crystal oscillator, PLL
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    687c:	e0 e5       	ldi	r30, 0x50	; 80
    687e:	f0 e0       	ldi	r31, 0x00	; 0
    6880:	80 81       	ld	r24, Z
    6882:	86 7e       	andi	r24, 0xE6	; 230
    6884:	80 83       	st	Z, r24

	// ClkPer output disabled
	PORTCFG.CLKEVOUT&= ~PORTCFG_CLKOUT_gm;
    6886:	e0 eb       	ldi	r30, 0xB0	; 176
    6888:	f0 e0       	ldi	r31, 0x00	; 0
    688a:	84 81       	ldd	r24, Z+4	; 0x04
    688c:	8c 7f       	andi	r24, 0xFC	; 252
    688e:	84 83       	std	Z+4, r24	; 0x04
	// Restore interrupts enabled/disabled state
	SREG=s;
    6890:	9f bf       	out	0x3f, r25	; 63
    6892:	08 95       	ret

00006894 <__vector_96>:
	#pragma optsize_default
}

// PORTH interrupt 0 service routine
ISR (PORTH_INT0_vect)
{
    6894:	1f 92       	push	r1
    6896:	0f 92       	push	r0
    6898:	0f b6       	in	r0, 0x3f	; 63
    689a:	0f 92       	push	r0
    689c:	11 24       	eor	r1, r1
    689e:	08 b6       	in	r0, 0x38	; 56
    68a0:	0f 92       	push	r0
    68a2:	18 be       	out	0x38, r1	; 56
    68a4:	09 b6       	in	r0, 0x39	; 57
    68a6:	0f 92       	push	r0
    68a8:	19 be       	out	0x39, r1	; 57
    68aa:	0a b6       	in	r0, 0x3a	; 58
    68ac:	0f 92       	push	r0
    68ae:	1a be       	out	0x3a, r1	; 58
    68b0:	0b b6       	in	r0, 0x3b	; 59
    68b2:	0f 92       	push	r0
    68b4:	1b be       	out	0x3b, r1	; 59
    68b6:	4f 92       	push	r4
    68b8:	5f 92       	push	r5
    68ba:	6f 92       	push	r6
    68bc:	7f 92       	push	r7
    68be:	8f 92       	push	r8
    68c0:	9f 92       	push	r9
    68c2:	af 92       	push	r10
    68c4:	bf 92       	push	r11
    68c6:	cf 92       	push	r12
    68c8:	df 92       	push	r13
    68ca:	ef 92       	push	r14
    68cc:	ff 92       	push	r15
    68ce:	2f 93       	push	r18
    68d0:	3f 93       	push	r19
    68d2:	4f 93       	push	r20
    68d4:	5f 93       	push	r21
    68d6:	6f 93       	push	r22
    68d8:	7f 93       	push	r23
    68da:	8f 93       	push	r24
    68dc:	9f 93       	push	r25
    68de:	af 93       	push	r26
    68e0:	bf 93       	push	r27
    68e2:	ef 93       	push	r30
    68e4:	ff 93       	push	r31
    68e6:	cf 93       	push	r28
    68e8:	df 93       	push	r29
    68ea:	00 d0       	rcall	.+0      	; 0x68ec <__vector_96+0x58>
    68ec:	1f 92       	push	r1
    68ee:	cd b7       	in	r28, 0x3d	; 61
    68f0:	de b7       	in	r29, 0x3e	; 62
	if(JogPos)
    68f2:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    68f6:	81 ff       	sbrs	r24, 1
    68f8:	71 c0       	rjmp	.+226    	; 0x69dc <__vector_96+0x148>
	{
		printf("Jog+\r\n");
    68fa:	8d e8       	ldi	r24, 0x8D	; 141
    68fc:	96 e2       	ldi	r25, 0x26	; 38
    68fe:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
		if(!JogNeg)
    6902:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    6906:	83 fd       	sbrc	r24, 3
    6908:	25 c2       	rjmp	.+1098   	; 0x6d54 <__vector_96+0x4c0>
		{
			MaxSpeed=10000;
    690a:	80 e1       	ldi	r24, 0x10	; 16
    690c:	97 e2       	ldi	r25, 0x27	; 39
    690e:	a0 e0       	ldi	r26, 0x00	; 0
    6910:	b0 e0       	ldi	r27, 0x00	; 0
    6912:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    6916:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    691a:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    691e:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
			IACC=5000;
    6922:	88 e8       	ldi	r24, 0x88	; 136
    6924:	93 e1       	ldi	r25, 0x13	; 19
    6926:	a0 e0       	ldi	r26, 0x00	; 0
    6928:	b0 e0       	ldi	r27, 0x00	; 0
    692a:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    692e:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    6932:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    6936:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
			IDEC=5000;
    693a:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    693e:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    6942:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    6946:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
			CurSpeedFrq=0;
    694a:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    694e:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    6952:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    6956:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    695a:	8f ef       	ldi	r24, 0xFF	; 255
    695c:	9f ef       	ldi	r25, 0xFF	; 255
    695e:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    6962:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6966:	82 e3       	ldi	r24, 0x32	; 50
    6968:	90 e0       	ldi	r25, 0x00	; 0
    696a:	a0 e0       	ldi	r26, 0x00	; 0
    696c:	b0 e0       	ldi	r27, 0x00	; 0
    696e:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <ACCSpeedINT>
    6972:	90 93 3f 27 	sts	0x273F, r25	; 0x80273f <ACCSpeedINT+0x1>
    6976:	a0 93 40 27 	sts	0x2740, r26	; 0x802740 <ACCSpeedINT+0x2>
    697a:	b0 93 41 27 	sts	0x2741, r27	; 0x802741 <ACCSpeedINT+0x3>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    697e:	80 93 3a 27 	sts	0x273A, r24	; 0x80273a <DECSpeedINT>
    6982:	90 93 3b 27 	sts	0x273B, r25	; 0x80273b <DECSpeedINT+0x1>
    6986:	a0 93 3c 27 	sts	0x273C, r26	; 0x80273c <DECSpeedINT+0x2>
    698a:	b0 93 3d 27 	sts	0x273D, r27	; 0x80273d <DECSpeedINT+0x3>
			switch(SelectedAxis)
    698e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <SelectedAxis>
    6992:	82 30       	cpi	r24, 0x02	; 2
    6994:	69 f0       	breq	.+26     	; 0x69b0 <__vector_96+0x11c>
    6996:	83 30       	cpi	r24, 0x03	; 3
    6998:	a1 f0       	breq	.+40     	; 0x69c2 <__vector_96+0x12e>
    699a:	81 30       	cpi	r24, 0x01	; 1
    699c:	d9 f4       	brne	.+54     	; 0x69d4 <__vector_96+0x140>
			{
				case 1:
				{
					
					if(!LIM_POS1 && Axes[0].HardwareLimitPosIsActive)
    699e:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    69a2:	83 fd       	sbrc	r24, 3
    69a4:	38 c0       	rjmp	.+112    	; 0x6a16 <__vector_96+0x182>
    69a6:	80 91 e6 27 	lds	r24, 0x27E6	; 0x8027e6 <Axes+0x29>
    69aa:	81 11       	cpse	r24, r1
    69ac:	13 c0       	rjmp	.+38     	; 0x69d4 <__vector_96+0x140>
    69ae:	33 c0       	rjmp	.+102    	; 0x6a16 <__vector_96+0x182>
					break;
					
				}
				case 2:
				{
					if(!LIM_POS2 && Axes[1].HardwareLimitPosIsActive)
    69b0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    69b4:	80 fd       	sbrc	r24, 0
    69b6:	b6 c0       	rjmp	.+364    	; 0x6b24 <__vector_96+0x290>
    69b8:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <Axes+0x54>
    69bc:	81 11       	cpse	r24, r1
    69be:	0a c0       	rjmp	.+20     	; 0x69d4 <__vector_96+0x140>
    69c0:	b1 c0       	rjmp	.+354    	; 0x6b24 <__vector_96+0x290>
					break;
					
				}
				case 3:
				{
					if(!LIM_POS3 && Axes[2].HardwareLimitPosIsActive)
    69c2:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    69c6:	85 fd       	sbrc	r24, 5
    69c8:	34 c1       	rjmp	.+616    	; 0x6c32 <__vector_96+0x39e>
    69ca:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <Axes+0x7f>
    69ce:	88 23       	and	r24, r24
    69d0:	09 f4       	brne	.+2      	; 0x69d4 <__vector_96+0x140>
    69d2:	2f c1       	rjmp	.+606    	; 0x6c32 <__vector_96+0x39e>
					break;
					
				}
			}
			
			ACC=1;
    69d4:	81 e0       	ldi	r24, 0x01	; 1
    69d6:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
    69da:	bc c1       	rjmp	.+888    	; 0x6d54 <__vector_96+0x4c0>
		}
	}
	else if((FreeJog==1 && DIR1)||(FreeJog==2 && DIR2)||(FreeJog==3 && DIR3))
    69dc:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <FreeJog>
    69e0:	81 30       	cpi	r24, 0x01	; 1
    69e2:	29 f4       	brne	.+10     	; 0x69ee <__vector_96+0x15a>
    69e4:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    69e8:	84 fd       	sbrc	r24, 4
    69ea:	0f c0       	rjmp	.+30     	; 0x6a0a <__vector_96+0x176>
    69ec:	b3 c1       	rjmp	.+870    	; 0x6d54 <__vector_96+0x4c0>
    69ee:	82 30       	cpi	r24, 0x02	; 2
    69f0:	29 f4       	brne	.+10     	; 0x69fc <__vector_96+0x168>
    69f2:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    69f6:	82 fd       	sbrc	r24, 2
    69f8:	08 c0       	rjmp	.+16     	; 0x6a0a <__vector_96+0x176>
    69fa:	ac c1       	rjmp	.+856    	; 0x6d54 <__vector_96+0x4c0>
    69fc:	83 30       	cpi	r24, 0x03	; 3
    69fe:	09 f0       	breq	.+2      	; 0x6a02 <__vector_96+0x16e>
    6a00:	a9 c1       	rjmp	.+850    	; 0x6d54 <__vector_96+0x4c0>
    6a02:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6a06:	80 ff       	sbrs	r24, 0
    6a08:	a5 c1       	rjmp	.+842    	; 0x6d54 <__vector_96+0x4c0>
	{
		ACC=0;
    6a0a:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
		DEC=1;
    6a0e:	81 e0       	ldi	r24, 0x01	; 1
    6a10:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
	}
}
    6a14:	9f c1       	rjmp	.+830    	; 0x6d54 <__vector_96+0x4c0>
				case 1:
				{
					
					if(!LIM_POS1 && Axes[0].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[0].MaxSpeed;
    6a16:	ed eb       	ldi	r30, 0xBD	; 189
    6a18:	f7 e2       	ldi	r31, 0x27	; 39
    6a1a:	c5 80       	ldd	r12, Z+5	; 0x05
    6a1c:	d6 80       	ldd	r13, Z+6	; 0x06
    6a1e:	e7 80       	ldd	r14, Z+7	; 0x07
    6a20:	f0 84       	ldd	r15, Z+8	; 0x08
    6a22:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    6a26:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    6a2a:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    6a2e:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    6a32:	41 84       	ldd	r4, Z+9	; 0x09
    6a34:	52 84       	ldd	r5, Z+10	; 0x0a
    6a36:	63 84       	ldd	r6, Z+11	; 0x0b
    6a38:	74 84       	ldd	r7, Z+12	; 0x0c
    6a3a:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    6a3e:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    6a42:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    6a46:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[0].DEC;
    6a4a:	85 84       	ldd	r8, Z+13	; 0x0d
    6a4c:	96 84       	ldd	r9, Z+14	; 0x0e
    6a4e:	a7 84       	ldd	r10, Z+15	; 0x0f
    6a50:	b0 88       	ldd	r11, Z+16	; 0x10
    6a52:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6a56:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6a5a:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6a5e:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6a62:	c7 01       	movw	r24, r14
    6a64:	b6 01       	movw	r22, r12
    6a66:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6a6a:	20 e0       	ldi	r18, 0x00	; 0
    6a6c:	30 e0       	ldi	r19, 0x00	; 0
    6a6e:	48 ec       	ldi	r20, 0xC8	; 200
    6a70:	52 e4       	ldi	r21, 0x42	; 66
    6a72:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    6a76:	69 83       	std	Y+1, r22	; 0x01
    6a78:	7a 83       	std	Y+2, r23	; 0x02
    6a7a:	8b 83       	std	Y+3, r24	; 0x03
    6a7c:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6a7e:	c3 01       	movw	r24, r6
    6a80:	b2 01       	movw	r22, r4
    6a82:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6a86:	9b 01       	movw	r18, r22
    6a88:	ac 01       	movw	r20, r24
    6a8a:	69 81       	ldd	r22, Y+1	; 0x01
    6a8c:	7a 81       	ldd	r23, Y+2	; 0x02
    6a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    6a90:	9c 81       	ldd	r25, Y+4	; 0x04
    6a92:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6a96:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6a9a:	9b 01       	movw	r18, r22
    6a9c:	ac 01       	movw	r20, r24
    6a9e:	c7 01       	movw	r24, r14
    6aa0:	b6 01       	movw	r22, r12
    6aa2:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6aa6:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6aaa:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6aae:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6ab2:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6ab6:	c5 01       	movw	r24, r10
    6ab8:	b4 01       	movw	r22, r8
    6aba:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6abe:	9b 01       	movw	r18, r22
    6ac0:	ac 01       	movw	r20, r24
    6ac2:	69 81       	ldd	r22, Y+1	; 0x01
    6ac4:	7a 81       	ldd	r23, Y+2	; 0x02
    6ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    6aca:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6ace:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6ad2:	9b 01       	movw	r18, r22
    6ad4:	ac 01       	movw	r20, r24
    6ad6:	c7 01       	movw	r24, r14
    6ad8:	b6 01       	movw	r22, r12
    6ada:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6ade:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6ae2:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6ae6:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6aea:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					SET_DIR1;
    6aee:	e0 e2       	ldi	r30, 0x20	; 32
    6af0:	f7 e0       	ldi	r31, 0x07	; 7
    6af2:	84 81       	ldd	r24, Z+4	; 0x04
    6af4:	80 61       	ori	r24, 0x10	; 16
    6af6:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=1;
    6af8:	81 e0       	ldi	r24, 0x01	; 1
    6afa:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma1=1000;
    6afe:	88 ee       	ldi	r24, 0xE8	; 232
    6b00:	93 e0       	ldi	r25, 0x03	; 3
    6b02:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    6b06:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
					DistanceToGo1=0x7FFFFFFF;
    6b0a:	8f ef       	ldi	r24, 0xFF	; 255
    6b0c:	9f ef       	ldi	r25, 0xFF	; 255
    6b0e:	af ef       	ldi	r26, 0xFF	; 255
    6b10:	bf e7       	ldi	r27, 0x7F	; 127
    6b12:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    6b16:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    6b1a:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    6b1e:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
					break;
    6b22:	58 cf       	rjmp	.-336    	; 0x69d4 <__vector_96+0x140>
				}
				case 2:
				{
					if(!LIM_POS2 && Axes[1].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[1].MaxSpeed;
    6b24:	ed eb       	ldi	r30, 0xBD	; 189
    6b26:	f7 e2       	ldi	r31, 0x27	; 39
    6b28:	c0 a8       	ldd	r12, Z+48	; 0x30
    6b2a:	d1 a8       	ldd	r13, Z+49	; 0x31
    6b2c:	e2 a8       	ldd	r14, Z+50	; 0x32
    6b2e:	f3 a8       	ldd	r15, Z+51	; 0x33
    6b30:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    6b34:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    6b38:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    6b3c:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    6b40:	44 a8       	ldd	r4, Z+52	; 0x34
    6b42:	55 a8       	ldd	r5, Z+53	; 0x35
    6b44:	66 a8       	ldd	r6, Z+54	; 0x36
    6b46:	77 a8       	ldd	r7, Z+55	; 0x37
    6b48:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    6b4c:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    6b50:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    6b54:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[1].DEC;
    6b58:	80 ac       	ldd	r8, Z+56	; 0x38
    6b5a:	91 ac       	ldd	r9, Z+57	; 0x39
    6b5c:	a2 ac       	ldd	r10, Z+58	; 0x3a
    6b5e:	b3 ac       	ldd	r11, Z+59	; 0x3b
    6b60:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6b64:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6b68:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6b6c:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6b70:	c7 01       	movw	r24, r14
    6b72:	b6 01       	movw	r22, r12
    6b74:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6b78:	20 e0       	ldi	r18, 0x00	; 0
    6b7a:	30 e0       	ldi	r19, 0x00	; 0
    6b7c:	48 ec       	ldi	r20, 0xC8	; 200
    6b7e:	52 e4       	ldi	r21, 0x42	; 66
    6b80:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    6b84:	69 83       	std	Y+1, r22	; 0x01
    6b86:	7a 83       	std	Y+2, r23	; 0x02
    6b88:	8b 83       	std	Y+3, r24	; 0x03
    6b8a:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6b8c:	c3 01       	movw	r24, r6
    6b8e:	b2 01       	movw	r22, r4
    6b90:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6b94:	9b 01       	movw	r18, r22
    6b96:	ac 01       	movw	r20, r24
    6b98:	69 81       	ldd	r22, Y+1	; 0x01
    6b9a:	7a 81       	ldd	r23, Y+2	; 0x02
    6b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    6ba0:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6ba4:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6ba8:	9b 01       	movw	r18, r22
    6baa:	ac 01       	movw	r20, r24
    6bac:	c7 01       	movw	r24, r14
    6bae:	b6 01       	movw	r22, r12
    6bb0:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6bb4:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6bb8:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6bbc:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6bc0:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6bc4:	c5 01       	movw	r24, r10
    6bc6:	b4 01       	movw	r22, r8
    6bc8:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6bcc:	9b 01       	movw	r18, r22
    6bce:	ac 01       	movw	r20, r24
    6bd0:	69 81       	ldd	r22, Y+1	; 0x01
    6bd2:	7a 81       	ldd	r23, Y+2	; 0x02
    6bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    6bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    6bd8:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6bdc:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6be0:	9b 01       	movw	r18, r22
    6be2:	ac 01       	movw	r20, r24
    6be4:	c7 01       	movw	r24, r14
    6be6:	b6 01       	movw	r22, r12
    6be8:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6bec:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6bf0:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6bf4:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6bf8:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					SET_DIR2;
    6bfc:	e0 e2       	ldi	r30, 0x20	; 32
    6bfe:	f7 e0       	ldi	r31, 0x07	; 7
    6c00:	84 81       	ldd	r24, Z+4	; 0x04
    6c02:	84 60       	ori	r24, 0x04	; 4
    6c04:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=2;
    6c06:	82 e0       	ldi	r24, 0x02	; 2
    6c08:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma2=1000;
    6c0c:	88 ee       	ldi	r24, 0xE8	; 232
    6c0e:	93 e0       	ldi	r25, 0x03	; 3
    6c10:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    6c14:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
					DistanceToGo2=0x7FFFFFFF;
    6c18:	8f ef       	ldi	r24, 0xFF	; 255
    6c1a:	9f ef       	ldi	r25, 0xFF	; 255
    6c1c:	af ef       	ldi	r26, 0xFF	; 255
    6c1e:	bf e7       	ldi	r27, 0x7F	; 127
    6c20:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    6c24:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    6c28:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    6c2c:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
					break;
    6c30:	d1 ce       	rjmp	.-606    	; 0x69d4 <__vector_96+0x140>
				}
				case 3:
				{
					if(!LIM_POS3 && Axes[2].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[2].MaxSpeed;
    6c32:	c0 90 18 28 	lds	r12, 0x2818	; 0x802818 <Axes+0x5b>
    6c36:	d0 90 19 28 	lds	r13, 0x2819	; 0x802819 <Axes+0x5c>
    6c3a:	e0 90 1a 28 	lds	r14, 0x281A	; 0x80281a <Axes+0x5d>
    6c3e:	f0 90 1b 28 	lds	r15, 0x281B	; 0x80281b <Axes+0x5e>
    6c42:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    6c46:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    6c4a:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    6c4e:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    6c52:	40 90 1c 28 	lds	r4, 0x281C	; 0x80281c <Axes+0x5f>
    6c56:	50 90 1d 28 	lds	r5, 0x281D	; 0x80281d <Axes+0x60>
    6c5a:	60 90 1e 28 	lds	r6, 0x281E	; 0x80281e <Axes+0x61>
    6c5e:	70 90 1f 28 	lds	r7, 0x281F	; 0x80281f <Axes+0x62>
    6c62:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    6c66:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    6c6a:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    6c6e:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[2].DEC;
    6c72:	80 90 20 28 	lds	r8, 0x2820	; 0x802820 <Axes+0x63>
    6c76:	90 90 21 28 	lds	r9, 0x2821	; 0x802821 <Axes+0x64>
    6c7a:	a0 90 22 28 	lds	r10, 0x2822	; 0x802822 <Axes+0x65>
    6c7e:	b0 90 23 28 	lds	r11, 0x2823	; 0x802823 <Axes+0x66>
    6c82:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6c86:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6c8a:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6c8e:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6c92:	c7 01       	movw	r24, r14
    6c94:	b6 01       	movw	r22, r12
    6c96:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6c9a:	20 e0       	ldi	r18, 0x00	; 0
    6c9c:	30 e0       	ldi	r19, 0x00	; 0
    6c9e:	48 ec       	ldi	r20, 0xC8	; 200
    6ca0:	52 e4       	ldi	r21, 0x42	; 66
    6ca2:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    6ca6:	69 83       	std	Y+1, r22	; 0x01
    6ca8:	7a 83       	std	Y+2, r23	; 0x02
    6caa:	8b 83       	std	Y+3, r24	; 0x03
    6cac:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6cae:	c3 01       	movw	r24, r6
    6cb0:	b2 01       	movw	r22, r4
    6cb2:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6cb6:	9b 01       	movw	r18, r22
    6cb8:	ac 01       	movw	r20, r24
    6cba:	69 81       	ldd	r22, Y+1	; 0x01
    6cbc:	7a 81       	ldd	r23, Y+2	; 0x02
    6cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    6cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    6cc2:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6cc6:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6cca:	9b 01       	movw	r18, r22
    6ccc:	ac 01       	movw	r20, r24
    6cce:	c7 01       	movw	r24, r14
    6cd0:	b6 01       	movw	r22, r12
    6cd2:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6cd6:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6cda:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6cde:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6ce2:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6ce6:	c5 01       	movw	r24, r10
    6ce8:	b4 01       	movw	r22, r8
    6cea:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6cee:	9b 01       	movw	r18, r22
    6cf0:	ac 01       	movw	r20, r24
    6cf2:	69 81       	ldd	r22, Y+1	; 0x01
    6cf4:	7a 81       	ldd	r23, Y+2	; 0x02
    6cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    6cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    6cfa:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6cfe:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6d02:	9b 01       	movw	r18, r22
    6d04:	ac 01       	movw	r20, r24
    6d06:	c7 01       	movw	r24, r14
    6d08:	b6 01       	movw	r22, r12
    6d0a:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6d0e:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6d12:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6d16:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6d1a:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					SET_DIR3;
    6d1e:	e0 e2       	ldi	r30, 0x20	; 32
    6d20:	f7 e0       	ldi	r31, 0x07	; 7
    6d22:	84 81       	ldd	r24, Z+4	; 0x04
    6d24:	81 60       	ori	r24, 0x01	; 1
    6d26:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=3;
    6d28:	83 e0       	ldi	r24, 0x03	; 3
    6d2a:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma3=1000;
    6d2e:	88 ee       	ldi	r24, 0xE8	; 232
    6d30:	93 e0       	ldi	r25, 0x03	; 3
    6d32:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    6d36:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
					DistanceToGo3=0x7FFFFFFF;
    6d3a:	8f ef       	ldi	r24, 0xFF	; 255
    6d3c:	9f ef       	ldi	r25, 0xFF	; 255
    6d3e:	af ef       	ldi	r26, 0xFF	; 255
    6d40:	bf e7       	ldi	r27, 0x7F	; 127
    6d42:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    6d46:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    6d4a:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    6d4e:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
					break;
    6d52:	40 ce       	rjmp	.-896    	; 0x69d4 <__vector_96+0x140>
	else if((FreeJog==1 && DIR1)||(FreeJog==2 && DIR2)||(FreeJog==3 && DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    6d54:	24 96       	adiw	r28, 0x04	; 4
    6d56:	cd bf       	out	0x3d, r28	; 61
    6d58:	de bf       	out	0x3e, r29	; 62
    6d5a:	df 91       	pop	r29
    6d5c:	cf 91       	pop	r28
    6d5e:	ff 91       	pop	r31
    6d60:	ef 91       	pop	r30
    6d62:	bf 91       	pop	r27
    6d64:	af 91       	pop	r26
    6d66:	9f 91       	pop	r25
    6d68:	8f 91       	pop	r24
    6d6a:	7f 91       	pop	r23
    6d6c:	6f 91       	pop	r22
    6d6e:	5f 91       	pop	r21
    6d70:	4f 91       	pop	r20
    6d72:	3f 91       	pop	r19
    6d74:	2f 91       	pop	r18
    6d76:	ff 90       	pop	r15
    6d78:	ef 90       	pop	r14
    6d7a:	df 90       	pop	r13
    6d7c:	cf 90       	pop	r12
    6d7e:	bf 90       	pop	r11
    6d80:	af 90       	pop	r10
    6d82:	9f 90       	pop	r9
    6d84:	8f 90       	pop	r8
    6d86:	7f 90       	pop	r7
    6d88:	6f 90       	pop	r6
    6d8a:	5f 90       	pop	r5
    6d8c:	4f 90       	pop	r4
    6d8e:	0f 90       	pop	r0
    6d90:	0b be       	out	0x3b, r0	; 59
    6d92:	0f 90       	pop	r0
    6d94:	0a be       	out	0x3a, r0	; 58
    6d96:	0f 90       	pop	r0
    6d98:	09 be       	out	0x39, r0	; 57
    6d9a:	0f 90       	pop	r0
    6d9c:	08 be       	out	0x38, r0	; 56
    6d9e:	0f 90       	pop	r0
    6da0:	0f be       	out	0x3f, r0	; 63
    6da2:	0f 90       	pop	r0
    6da4:	1f 90       	pop	r1
    6da6:	18 95       	reti

00006da8 <__vector_64>:

// PORTH interrupt 0 service routine
ISR (PORTD_INT0_vect)
{
    6da8:	1f 92       	push	r1
    6daa:	0f 92       	push	r0
    6dac:	0f b6       	in	r0, 0x3f	; 63
    6dae:	0f 92       	push	r0
    6db0:	11 24       	eor	r1, r1
    6db2:	08 b6       	in	r0, 0x38	; 56
    6db4:	0f 92       	push	r0
    6db6:	18 be       	out	0x38, r1	; 56
    6db8:	09 b6       	in	r0, 0x39	; 57
    6dba:	0f 92       	push	r0
    6dbc:	19 be       	out	0x39, r1	; 57
    6dbe:	0a b6       	in	r0, 0x3a	; 58
    6dc0:	0f 92       	push	r0
    6dc2:	1a be       	out	0x3a, r1	; 58
    6dc4:	0b b6       	in	r0, 0x3b	; 59
    6dc6:	0f 92       	push	r0
    6dc8:	1b be       	out	0x3b, r1	; 59
    6dca:	4f 92       	push	r4
    6dcc:	5f 92       	push	r5
    6dce:	6f 92       	push	r6
    6dd0:	7f 92       	push	r7
    6dd2:	8f 92       	push	r8
    6dd4:	9f 92       	push	r9
    6dd6:	af 92       	push	r10
    6dd8:	bf 92       	push	r11
    6dda:	cf 92       	push	r12
    6ddc:	df 92       	push	r13
    6dde:	ef 92       	push	r14
    6de0:	ff 92       	push	r15
    6de2:	2f 93       	push	r18
    6de4:	3f 93       	push	r19
    6de6:	4f 93       	push	r20
    6de8:	5f 93       	push	r21
    6dea:	6f 93       	push	r22
    6dec:	7f 93       	push	r23
    6dee:	8f 93       	push	r24
    6df0:	9f 93       	push	r25
    6df2:	af 93       	push	r26
    6df4:	bf 93       	push	r27
    6df6:	ef 93       	push	r30
    6df8:	ff 93       	push	r31
    6dfa:	cf 93       	push	r28
    6dfc:	df 93       	push	r29
    6dfe:	00 d0       	rcall	.+0      	; 0x6e00 <__vector_64+0x58>
    6e00:	1f 92       	push	r1
    6e02:	cd b7       	in	r28, 0x3d	; 61
    6e04:	de b7       	in	r29, 0x3e	; 62
	if(JogNeg)
    6e06:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    6e0a:	83 ff       	sbrs	r24, 3
    6e0c:	8d c0       	rjmp	.+282    	; 0x6f28 <__vector_64+0x180>
	{
		if(!JogPos)
    6e0e:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    6e12:	81 fd       	sbrc	r24, 1
    6e14:	45 c2       	rjmp	.+1162   	; 0x72a0 <__vector_64+0x4f8>
		{
			CurSpeedFrq=0;
    6e16:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    6e1a:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    6e1e:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    6e22:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    6e26:	8f ef       	ldi	r24, 0xFF	; 255
    6e28:	9f ef       	ldi	r25, 0xFF	; 255
    6e2a:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    6e2e:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6e32:	c0 90 6d 27 	lds	r12, 0x276D	; 0x80276d <MaxSpeed>
    6e36:	d0 90 6e 27 	lds	r13, 0x276E	; 0x80276e <MaxSpeed+0x1>
    6e3a:	e0 90 6f 27 	lds	r14, 0x276F	; 0x80276f <MaxSpeed+0x2>
    6e3e:	f0 90 70 27 	lds	r15, 0x2770	; 0x802770 <MaxSpeed+0x3>
    6e42:	c7 01       	movw	r24, r14
    6e44:	b6 01       	movw	r22, r12
    6e46:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6e4a:	20 e0       	ldi	r18, 0x00	; 0
    6e4c:	30 e0       	ldi	r19, 0x00	; 0
    6e4e:	48 ec       	ldi	r20, 0xC8	; 200
    6e50:	52 e4       	ldi	r21, 0x42	; 66
    6e52:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    6e56:	4b 01       	movw	r8, r22
    6e58:	5c 01       	movw	r10, r24
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6e5a:	60 91 51 27 	lds	r22, 0x2751	; 0x802751 <IACC>
    6e5e:	70 91 52 27 	lds	r23, 0x2752	; 0x802752 <IACC+0x1>
    6e62:	80 91 53 27 	lds	r24, 0x2753	; 0x802753 <IACC+0x2>
    6e66:	90 91 54 27 	lds	r25, 0x2754	; 0x802754 <IACC+0x3>
    6e6a:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6e6e:	9b 01       	movw	r18, r22
    6e70:	ac 01       	movw	r20, r24
    6e72:	c5 01       	movw	r24, r10
    6e74:	b4 01       	movw	r22, r8
    6e76:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6e7a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6e7e:	9b 01       	movw	r18, r22
    6e80:	ac 01       	movw	r20, r24
    6e82:	c7 01       	movw	r24, r14
    6e84:	b6 01       	movw	r22, r12
    6e86:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6e8a:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6e8e:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6e92:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6e96:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    6e9a:	60 91 4d 27 	lds	r22, 0x274D	; 0x80274d <IDEC>
    6e9e:	70 91 4e 27 	lds	r23, 0x274E	; 0x80274e <IDEC+0x1>
    6ea2:	80 91 4f 27 	lds	r24, 0x274F	; 0x80274f <IDEC+0x2>
    6ea6:	90 91 50 27 	lds	r25, 0x2750	; 0x802750 <IDEC+0x3>
    6eaa:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6eae:	9b 01       	movw	r18, r22
    6eb0:	ac 01       	movw	r20, r24
    6eb2:	c5 01       	movw	r24, r10
    6eb4:	b4 01       	movw	r22, r8
    6eb6:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6eba:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6ebe:	9b 01       	movw	r18, r22
    6ec0:	ac 01       	movw	r20, r24
    6ec2:	c7 01       	movw	r24, r14
    6ec4:	b6 01       	movw	r22, r12
    6ec6:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6eca:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6ece:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6ed2:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6ed6:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
			switch(SelectedAxis)
    6eda:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <SelectedAxis>
    6ede:	82 30       	cpi	r24, 0x02	; 2
    6ee0:	69 f0       	breq	.+26     	; 0x6efc <__vector_64+0x154>
    6ee2:	83 30       	cpi	r24, 0x03	; 3
    6ee4:	a1 f0       	breq	.+40     	; 0x6f0e <__vector_64+0x166>
    6ee6:	81 30       	cpi	r24, 0x01	; 1
    6ee8:	d9 f4       	brne	.+54     	; 0x6f20 <__vector_64+0x178>
			{
				case 1:
				{
					if(!LIM_NEG1 && Axes[0].HardwareLimitNegIsActive)
    6eea:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    6eee:	84 fd       	sbrc	r24, 4
    6ef0:	38 c0       	rjmp	.+112    	; 0x6f62 <__vector_64+0x1ba>
    6ef2:	80 91 e7 27 	lds	r24, 0x27E7	; 0x8027e7 <Axes+0x2a>
    6ef6:	81 11       	cpse	r24, r1
    6ef8:	13 c0       	rjmp	.+38     	; 0x6f20 <__vector_64+0x178>
    6efa:	33 c0       	rjmp	.+102    	; 0x6f62 <__vector_64+0x1ba>
					break;
					
				}
				case 2:
				{
					if(!LIM_NEG2 && Axes[1].HardwareLimitNegIsActive)
    6efc:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    6f00:	86 fd       	sbrc	r24, 6
    6f02:	b6 c0       	rjmp	.+364    	; 0x7070 <__vector_64+0x2c8>
    6f04:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <Axes+0x55>
    6f08:	81 11       	cpse	r24, r1
    6f0a:	0a c0       	rjmp	.+20     	; 0x6f20 <__vector_64+0x178>
    6f0c:	b1 c0       	rjmp	.+354    	; 0x7070 <__vector_64+0x2c8>
					break;
					
				}
				case 3:
				{
					if(!LIM_NEG3 && Axes[2].HardwareLimitNegIsActive)
    6f0e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    6f12:	84 fd       	sbrc	r24, 4
    6f14:	34 c1       	rjmp	.+616    	; 0x717e <__vector_64+0x3d6>
    6f16:	80 91 3d 28 	lds	r24, 0x283D	; 0x80283d <Axes+0x80>
    6f1a:	88 23       	and	r24, r24
    6f1c:	09 f4       	brne	.+2      	; 0x6f20 <__vector_64+0x178>
    6f1e:	2f c1       	rjmp	.+606    	; 0x717e <__vector_64+0x3d6>
					DistanceToGo3=0x7FFFFFFF;
					break;
				}
			}
			
			ACC=1;
    6f20:	81 e0       	ldi	r24, 0x01	; 1
    6f22:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
    6f26:	bc c1       	rjmp	.+888    	; 0x72a0 <__vector_64+0x4f8>
		}
	}
	else if((FreeJog==1 && !DIR1)||(FreeJog==2 && !DIR2)||(FreeJog==3 && !DIR3))
    6f28:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <FreeJog>
    6f2c:	81 30       	cpi	r24, 0x01	; 1
    6f2e:	29 f4       	brne	.+10     	; 0x6f3a <__vector_64+0x192>
    6f30:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6f34:	84 ff       	sbrs	r24, 4
    6f36:	0f c0       	rjmp	.+30     	; 0x6f56 <__vector_64+0x1ae>
    6f38:	b3 c1       	rjmp	.+870    	; 0x72a0 <__vector_64+0x4f8>
    6f3a:	82 30       	cpi	r24, 0x02	; 2
    6f3c:	29 f4       	brne	.+10     	; 0x6f48 <__vector_64+0x1a0>
    6f3e:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6f42:	82 ff       	sbrs	r24, 2
    6f44:	08 c0       	rjmp	.+16     	; 0x6f56 <__vector_64+0x1ae>
    6f46:	ac c1       	rjmp	.+856    	; 0x72a0 <__vector_64+0x4f8>
    6f48:	83 30       	cpi	r24, 0x03	; 3
    6f4a:	09 f0       	breq	.+2      	; 0x6f4e <__vector_64+0x1a6>
    6f4c:	a9 c1       	rjmp	.+850    	; 0x72a0 <__vector_64+0x4f8>
    6f4e:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6f52:	80 fd       	sbrc	r24, 0
    6f54:	a5 c1       	rjmp	.+842    	; 0x72a0 <__vector_64+0x4f8>
	{
		ACC=0;
    6f56:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
		DEC=1;
    6f5a:	81 e0       	ldi	r24, 0x01	; 1
    6f5c:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
	}
}
    6f60:	9f c1       	rjmp	.+830    	; 0x72a0 <__vector_64+0x4f8>
			{
				case 1:
				{
					if(!LIM_NEG1 && Axes[0].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[0].MaxSpeed;
    6f62:	ed eb       	ldi	r30, 0xBD	; 189
    6f64:	f7 e2       	ldi	r31, 0x27	; 39
    6f66:	c5 80       	ldd	r12, Z+5	; 0x05
    6f68:	d6 80       	ldd	r13, Z+6	; 0x06
    6f6a:	e7 80       	ldd	r14, Z+7	; 0x07
    6f6c:	f0 84       	ldd	r15, Z+8	; 0x08
    6f6e:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    6f72:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    6f76:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    6f7a:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    6f7e:	41 84       	ldd	r4, Z+9	; 0x09
    6f80:	52 84       	ldd	r5, Z+10	; 0x0a
    6f82:	63 84       	ldd	r6, Z+11	; 0x0b
    6f84:	74 84       	ldd	r7, Z+12	; 0x0c
    6f86:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    6f8a:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    6f8e:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    6f92:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[0].DEC;
    6f96:	85 84       	ldd	r8, Z+13	; 0x0d
    6f98:	96 84       	ldd	r9, Z+14	; 0x0e
    6f9a:	a7 84       	ldd	r10, Z+15	; 0x0f
    6f9c:	b0 88       	ldd	r11, Z+16	; 0x10
    6f9e:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6fa2:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6fa6:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6faa:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6fae:	c7 01       	movw	r24, r14
    6fb0:	b6 01       	movw	r22, r12
    6fb2:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6fb6:	20 e0       	ldi	r18, 0x00	; 0
    6fb8:	30 e0       	ldi	r19, 0x00	; 0
    6fba:	48 ec       	ldi	r20, 0xC8	; 200
    6fbc:	52 e4       	ldi	r21, 0x42	; 66
    6fbe:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    6fc2:	69 83       	std	Y+1, r22	; 0x01
    6fc4:	7a 83       	std	Y+2, r23	; 0x02
    6fc6:	8b 83       	std	Y+3, r24	; 0x03
    6fc8:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6fca:	c3 01       	movw	r24, r6
    6fcc:	b2 01       	movw	r22, r4
    6fce:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    6fd2:	9b 01       	movw	r18, r22
    6fd4:	ac 01       	movw	r20, r24
    6fd6:	69 81       	ldd	r22, Y+1	; 0x01
    6fd8:	7a 81       	ldd	r23, Y+2	; 0x02
    6fda:	8b 81       	ldd	r24, Y+3	; 0x03
    6fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    6fde:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    6fe2:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    6fe6:	9b 01       	movw	r18, r22
    6fe8:	ac 01       	movw	r20, r24
    6fea:	c7 01       	movw	r24, r14
    6fec:	b6 01       	movw	r22, r12
    6fee:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    6ff2:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6ff6:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6ffa:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6ffe:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    7002:	c5 01       	movw	r24, r10
    7004:	b4 01       	movw	r22, r8
    7006:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    700a:	9b 01       	movw	r18, r22
    700c:	ac 01       	movw	r20, r24
    700e:	69 81       	ldd	r22, Y+1	; 0x01
    7010:	7a 81       	ldd	r23, Y+2	; 0x02
    7012:	8b 81       	ldd	r24, Y+3	; 0x03
    7014:	9c 81       	ldd	r25, Y+4	; 0x04
    7016:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    701a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    701e:	9b 01       	movw	r18, r22
    7020:	ac 01       	movw	r20, r24
    7022:	c7 01       	movw	r24, r14
    7024:	b6 01       	movw	r22, r12
    7026:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    702a:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    702e:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    7032:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    7036:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					CLR_DIR1;
    703a:	e0 e2       	ldi	r30, 0x20	; 32
    703c:	f7 e0       	ldi	r31, 0x07	; 7
    703e:	84 81       	ldd	r24, Z+4	; 0x04
    7040:	8f 7e       	andi	r24, 0xEF	; 239
    7042:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=1;
    7044:	81 e0       	ldi	r24, 0x01	; 1
    7046:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma1=1000;
    704a:	88 ee       	ldi	r24, 0xE8	; 232
    704c:	93 e0       	ldi	r25, 0x03	; 3
    704e:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    7052:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
					DistanceToGo1=0x7FFFFFFF;
    7056:	8f ef       	ldi	r24, 0xFF	; 255
    7058:	9f ef       	ldi	r25, 0xFF	; 255
    705a:	af ef       	ldi	r26, 0xFF	; 255
    705c:	bf e7       	ldi	r27, 0x7F	; 127
    705e:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    7062:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    7066:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    706a:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
					break;
    706e:	58 cf       	rjmp	.-336    	; 0x6f20 <__vector_64+0x178>
				}
				case 2:
				{
					if(!LIM_NEG2 && Axes[1].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[1].MaxSpeed;
    7070:	ed eb       	ldi	r30, 0xBD	; 189
    7072:	f7 e2       	ldi	r31, 0x27	; 39
    7074:	c0 a8       	ldd	r12, Z+48	; 0x30
    7076:	d1 a8       	ldd	r13, Z+49	; 0x31
    7078:	e2 a8       	ldd	r14, Z+50	; 0x32
    707a:	f3 a8       	ldd	r15, Z+51	; 0x33
    707c:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    7080:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    7084:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    7088:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    708c:	44 a8       	ldd	r4, Z+52	; 0x34
    708e:	55 a8       	ldd	r5, Z+53	; 0x35
    7090:	66 a8       	ldd	r6, Z+54	; 0x36
    7092:	77 a8       	ldd	r7, Z+55	; 0x37
    7094:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    7098:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    709c:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    70a0:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[1].DEC;
    70a4:	80 ac       	ldd	r8, Z+56	; 0x38
    70a6:	91 ac       	ldd	r9, Z+57	; 0x39
    70a8:	a2 ac       	ldd	r10, Z+58	; 0x3a
    70aa:	b3 ac       	ldd	r11, Z+59	; 0x3b
    70ac:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    70b0:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    70b4:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    70b8:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    70bc:	c7 01       	movw	r24, r14
    70be:	b6 01       	movw	r22, r12
    70c0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    70c4:	20 e0       	ldi	r18, 0x00	; 0
    70c6:	30 e0       	ldi	r19, 0x00	; 0
    70c8:	48 ec       	ldi	r20, 0xC8	; 200
    70ca:	52 e4       	ldi	r21, 0x42	; 66
    70cc:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    70d0:	69 83       	std	Y+1, r22	; 0x01
    70d2:	7a 83       	std	Y+2, r23	; 0x02
    70d4:	8b 83       	std	Y+3, r24	; 0x03
    70d6:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    70d8:	c3 01       	movw	r24, r6
    70da:	b2 01       	movw	r22, r4
    70dc:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    70e0:	9b 01       	movw	r18, r22
    70e2:	ac 01       	movw	r20, r24
    70e4:	69 81       	ldd	r22, Y+1	; 0x01
    70e6:	7a 81       	ldd	r23, Y+2	; 0x02
    70e8:	8b 81       	ldd	r24, Y+3	; 0x03
    70ea:	9c 81       	ldd	r25, Y+4	; 0x04
    70ec:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    70f0:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    70f4:	9b 01       	movw	r18, r22
    70f6:	ac 01       	movw	r20, r24
    70f8:	c7 01       	movw	r24, r14
    70fa:	b6 01       	movw	r22, r12
    70fc:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    7100:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    7104:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    7108:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    710c:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    7110:	c5 01       	movw	r24, r10
    7112:	b4 01       	movw	r22, r8
    7114:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    7118:	9b 01       	movw	r18, r22
    711a:	ac 01       	movw	r20, r24
    711c:	69 81       	ldd	r22, Y+1	; 0x01
    711e:	7a 81       	ldd	r23, Y+2	; 0x02
    7120:	8b 81       	ldd	r24, Y+3	; 0x03
    7122:	9c 81       	ldd	r25, Y+4	; 0x04
    7124:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    7128:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    712c:	9b 01       	movw	r18, r22
    712e:	ac 01       	movw	r20, r24
    7130:	c7 01       	movw	r24, r14
    7132:	b6 01       	movw	r22, r12
    7134:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    7138:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    713c:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    7140:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    7144:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					CLR_DIR2;
    7148:	e0 e2       	ldi	r30, 0x20	; 32
    714a:	f7 e0       	ldi	r31, 0x07	; 7
    714c:	84 81       	ldd	r24, Z+4	; 0x04
    714e:	8b 7f       	andi	r24, 0xFB	; 251
    7150:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=2;
    7152:	82 e0       	ldi	r24, 0x02	; 2
    7154:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma2=1000;
    7158:	88 ee       	ldi	r24, 0xE8	; 232
    715a:	93 e0       	ldi	r25, 0x03	; 3
    715c:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    7160:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
					DistanceToGo2=0x7FFFFFFF;
    7164:	8f ef       	ldi	r24, 0xFF	; 255
    7166:	9f ef       	ldi	r25, 0xFF	; 255
    7168:	af ef       	ldi	r26, 0xFF	; 255
    716a:	bf e7       	ldi	r27, 0x7F	; 127
    716c:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    7170:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    7174:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    7178:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
					break;
    717c:	d1 ce       	rjmp	.-606    	; 0x6f20 <__vector_64+0x178>
				}
				case 3:
				{
					if(!LIM_NEG3 && Axes[2].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[2].MaxSpeed;
    717e:	c0 90 18 28 	lds	r12, 0x2818	; 0x802818 <Axes+0x5b>
    7182:	d0 90 19 28 	lds	r13, 0x2819	; 0x802819 <Axes+0x5c>
    7186:	e0 90 1a 28 	lds	r14, 0x281A	; 0x80281a <Axes+0x5d>
    718a:	f0 90 1b 28 	lds	r15, 0x281B	; 0x80281b <Axes+0x5e>
    718e:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    7192:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    7196:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    719a:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    719e:	40 90 1c 28 	lds	r4, 0x281C	; 0x80281c <Axes+0x5f>
    71a2:	50 90 1d 28 	lds	r5, 0x281D	; 0x80281d <Axes+0x60>
    71a6:	60 90 1e 28 	lds	r6, 0x281E	; 0x80281e <Axes+0x61>
    71aa:	70 90 1f 28 	lds	r7, 0x281F	; 0x80281f <Axes+0x62>
    71ae:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    71b2:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    71b6:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    71ba:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[2].DEC;
    71be:	80 90 20 28 	lds	r8, 0x2820	; 0x802820 <Axes+0x63>
    71c2:	90 90 21 28 	lds	r9, 0x2821	; 0x802821 <Axes+0x64>
    71c6:	a0 90 22 28 	lds	r10, 0x2822	; 0x802822 <Axes+0x65>
    71ca:	b0 90 23 28 	lds	r11, 0x2823	; 0x802823 <Axes+0x66>
    71ce:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    71d2:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    71d6:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    71da:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    71de:	c7 01       	movw	r24, r14
    71e0:	b6 01       	movw	r22, r12
    71e2:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    71e6:	20 e0       	ldi	r18, 0x00	; 0
    71e8:	30 e0       	ldi	r19, 0x00	; 0
    71ea:	48 ec       	ldi	r20, 0xC8	; 200
    71ec:	52 e4       	ldi	r21, 0x42	; 66
    71ee:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    71f2:	69 83       	std	Y+1, r22	; 0x01
    71f4:	7a 83       	std	Y+2, r23	; 0x02
    71f6:	8b 83       	std	Y+3, r24	; 0x03
    71f8:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    71fa:	c3 01       	movw	r24, r6
    71fc:	b2 01       	movw	r22, r4
    71fe:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    7202:	9b 01       	movw	r18, r22
    7204:	ac 01       	movw	r20, r24
    7206:	69 81       	ldd	r22, Y+1	; 0x01
    7208:	7a 81       	ldd	r23, Y+2	; 0x02
    720a:	8b 81       	ldd	r24, Y+3	; 0x03
    720c:	9c 81       	ldd	r25, Y+4	; 0x04
    720e:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    7212:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    7216:	9b 01       	movw	r18, r22
    7218:	ac 01       	movw	r20, r24
    721a:	c7 01       	movw	r24, r14
    721c:	b6 01       	movw	r22, r12
    721e:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    7222:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    7226:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    722a:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    722e:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    7232:	c5 01       	movw	r24, r10
    7234:	b4 01       	movw	r22, r8
    7236:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    723a:	9b 01       	movw	r18, r22
    723c:	ac 01       	movw	r20, r24
    723e:	69 81       	ldd	r22, Y+1	; 0x01
    7240:	7a 81       	ldd	r23, Y+2	; 0x02
    7242:	8b 81       	ldd	r24, Y+3	; 0x03
    7244:	9c 81       	ldd	r25, Y+4	; 0x04
    7246:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    724a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <__fixsfsi>
    724e:	9b 01       	movw	r18, r22
    7250:	ac 01       	movw	r20, r24
    7252:	c7 01       	movw	r24, r14
    7254:	b6 01       	movw	r22, r12
    7256:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodsi4>
    725a:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    725e:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    7262:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    7266:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					CLR_DIR3;
    726a:	e0 e2       	ldi	r30, 0x20	; 32
    726c:	f7 e0       	ldi	r31, 0x07	; 7
    726e:	84 81       	ldd	r24, Z+4	; 0x04
    7270:	8e 7f       	andi	r24, 0xFE	; 254
    7272:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=3;
    7274:	83 e0       	ldi	r24, 0x03	; 3
    7276:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma3=1000;
    727a:	88 ee       	ldi	r24, 0xE8	; 232
    727c:	93 e0       	ldi	r25, 0x03	; 3
    727e:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    7282:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
					DistanceToGo3=0x7FFFFFFF;
    7286:	8f ef       	ldi	r24, 0xFF	; 255
    7288:	9f ef       	ldi	r25, 0xFF	; 255
    728a:	af ef       	ldi	r26, 0xFF	; 255
    728c:	bf e7       	ldi	r27, 0x7F	; 127
    728e:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    7292:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    7296:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    729a:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
					break;
    729e:	40 ce       	rjmp	.-896    	; 0x6f20 <__vector_64+0x178>
	else if((FreeJog==1 && !DIR1)||(FreeJog==2 && !DIR2)||(FreeJog==3 && !DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    72a0:	24 96       	adiw	r28, 0x04	; 4
    72a2:	cd bf       	out	0x3d, r28	; 61
    72a4:	de bf       	out	0x3e, r29	; 62
    72a6:	df 91       	pop	r29
    72a8:	cf 91       	pop	r28
    72aa:	ff 91       	pop	r31
    72ac:	ef 91       	pop	r30
    72ae:	bf 91       	pop	r27
    72b0:	af 91       	pop	r26
    72b2:	9f 91       	pop	r25
    72b4:	8f 91       	pop	r24
    72b6:	7f 91       	pop	r23
    72b8:	6f 91       	pop	r22
    72ba:	5f 91       	pop	r21
    72bc:	4f 91       	pop	r20
    72be:	3f 91       	pop	r19
    72c0:	2f 91       	pop	r18
    72c2:	ff 90       	pop	r15
    72c4:	ef 90       	pop	r14
    72c6:	df 90       	pop	r13
    72c8:	cf 90       	pop	r12
    72ca:	bf 90       	pop	r11
    72cc:	af 90       	pop	r10
    72ce:	9f 90       	pop	r9
    72d0:	8f 90       	pop	r8
    72d2:	7f 90       	pop	r7
    72d4:	6f 90       	pop	r6
    72d6:	5f 90       	pop	r5
    72d8:	4f 90       	pop	r4
    72da:	0f 90       	pop	r0
    72dc:	0b be       	out	0x3b, r0	; 59
    72de:	0f 90       	pop	r0
    72e0:	0a be       	out	0x3a, r0	; 58
    72e2:	0f 90       	pop	r0
    72e4:	09 be       	out	0x39, r0	; 57
    72e6:	0f 90       	pop	r0
    72e8:	08 be       	out	0x38, r0	; 56
    72ea:	0f 90       	pop	r0
    72ec:	0f be       	out	0x3f, r0	; 63
    72ee:	0f 90       	pop	r0
    72f0:	1f 90       	pop	r1
    72f2:	18 95       	reti

000072f4 <__vector_65>:

ISR (PORTD_INT1_vect)
{
    72f4:	1f 92       	push	r1
    72f6:	0f 92       	push	r0
    72f8:	0f b6       	in	r0, 0x3f	; 63
    72fa:	0f 92       	push	r0
    72fc:	11 24       	eor	r1, r1
    72fe:	08 b6       	in	r0, 0x38	; 56
    7300:	0f 92       	push	r0
    7302:	18 be       	out	0x38, r1	; 56
    7304:	09 b6       	in	r0, 0x39	; 57
    7306:	0f 92       	push	r0
    7308:	19 be       	out	0x39, r1	; 57
    730a:	0a b6       	in	r0, 0x3a	; 58
    730c:	0f 92       	push	r0
    730e:	1a be       	out	0x3a, r1	; 58
    7310:	0b b6       	in	r0, 0x3b	; 59
    7312:	0f 92       	push	r0
    7314:	1b be       	out	0x3b, r1	; 59
    7316:	2f 92       	push	r2
    7318:	3f 92       	push	r3
    731a:	4f 92       	push	r4
    731c:	5f 92       	push	r5
    731e:	6f 92       	push	r6
    7320:	7f 92       	push	r7
    7322:	8f 92       	push	r8
    7324:	9f 92       	push	r9
    7326:	af 92       	push	r10
    7328:	bf 92       	push	r11
    732a:	cf 92       	push	r12
    732c:	df 92       	push	r13
    732e:	ef 92       	push	r14
    7330:	ff 92       	push	r15
    7332:	0f 93       	push	r16
    7334:	1f 93       	push	r17
    7336:	2f 93       	push	r18
    7338:	3f 93       	push	r19
    733a:	4f 93       	push	r20
    733c:	5f 93       	push	r21
    733e:	6f 93       	push	r22
    7340:	7f 93       	push	r23
    7342:	8f 93       	push	r24
    7344:	9f 93       	push	r25
    7346:	af 93       	push	r26
    7348:	bf 93       	push	r27
    734a:	ef 93       	push	r30
    734c:	ff 93       	push	r31
    734e:	cf 93       	push	r28
    7350:	df 93       	push	r29
    7352:	cd b7       	in	r28, 0x3d	; 61
    7354:	de b7       	in	r29, 0x3e	; 62
    7356:	28 97       	sbiw	r28, 0x08	; 8
    7358:	cd bf       	out	0x3d, r28	; 61
    735a:	de bf       	out	0x3e, r29	; 62
	//printf("PortD INT1\r\n");
	if(RunProgram)
    735c:	e0 e6       	ldi	r30, 0x60	; 96
    735e:	f6 e0       	ldi	r31, 0x06	; 6
    7360:	80 85       	ldd	r24, Z+8	; 0x08
		//     {
		//         PRGExe();
		//         IsPause=0;
		//     }
	}
	if(StopProgram)
    7362:	80 85       	ldd	r24, Z+8	; 0x08
    7364:	82 ff       	sbrs	r24, 2
    7366:	87 c2       	rjmp	.+1294   	; 0x7876 <__vector_65+0x582>
	{
		if(ProgramRun)
    7368:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    736c:	88 23       	and	r24, r24
    736e:	31 f1       	breq	.+76     	; 0x73bc <__vector_65+0xc8>
		{
			IsPause=1;
    7370:	81 e0       	ldi	r24, 0x01	; 1
    7372:	80 93 da 26 	sts	0x26DA, r24	; 0x8026da <IsPause>
			DistanceToGo1=0;
    7376:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    737a:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    737e:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    7382:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
			DistanceToGo2=0;
    7386:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    738a:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    738e:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    7392:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
			DistanceToGo3=0;
    7396:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    739a:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    739e:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    73a2:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
			sprintf(BufferSend,"!4100\r\n");
    73a6:	98 e0       	ldi	r25, 0x08	; 8
    73a8:	e0 e1       	ldi	r30, 0x10	; 16
    73aa:	f6 e2       	ldi	r31, 0x26	; 38
    73ac:	a7 e5       	ldi	r26, 0x57	; 87
    73ae:	b9 e2       	ldi	r27, 0x29	; 41
    73b0:	01 90       	ld	r0, Z+
    73b2:	0d 92       	st	X+, r0
    73b4:	9a 95       	dec	r25
    73b6:	e1 f7       	brne	.-8      	; 0x73b0 <__vector_65+0xbc>
			Responsing=1;
    73b8:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
		}
		
		StopTime=0;
    73bc:	10 92 d9 26 	sts	0x26D9, r1	; 0x8026d9 <StopTime>
			{


				DO1_CLR;

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    73c0:	22 24       	eor	r2, r2
    73c2:	23 94       	inc	r2
			sprintf(BufferSend,"!4100\r\n");
			Responsing=1;
		}
		
		StopTime=0;
		while(StopProgram)
    73c4:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    73c8:	82 ff       	sbrs	r24, 2
    73ca:	55 c2       	rjmp	.+1194   	; 0x7876 <__vector_65+0x582>
    73cc:	87 ea       	ldi	r24, 0xA7	; 167
    73ce:	91 e6       	ldi	r25, 0x61	; 97
    73d0:	01 97       	sbiw	r24, 0x01	; 1
    73d2:	f1 f7       	brne	.-4      	; 0x73d0 <__vector_65+0xdc>
    73d4:	00 c0       	rjmp	.+0      	; 0x73d6 <__vector_65+0xe2>
    73d6:	00 00       	nop
		{
			_delay_ms(100);
			StopTime++;
    73d8:	80 91 d9 26 	lds	r24, 0x26D9	; 0x8026d9 <StopTime>
    73dc:	8f 5f       	subi	r24, 0xFF	; 255
    73de:	80 93 d9 26 	sts	0x26D9, r24	; 0x8026d9 <StopTime>
			if(StopTime>30)
    73e2:	8f 31       	cpi	r24, 0x1F	; 31
    73e4:	78 f3       	brcs	.-34     	; 0x73c4 <__vector_65+0xd0>
			{


				DO1_CLR;
    73e6:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>
    73ea:	8b 7f       	andi	r24, 0xFB	; 251
    73ec:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    73f0:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    73f4:	81 11       	cpse	r24, r1
    73f6:	0e c0       	rjmp	.+28     	; 0x7414 <__vector_65+0x120>
    73f8:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    73fc:	91 11       	cpse	r25, r1
    73fe:	0a c0       	rjmp	.+20     	; 0x7414 <__vector_65+0x120>
    7400:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    7404:	22 2d       	mov	r18, r2
    7406:	91 11       	cpse	r25, r1
    7408:	01 c0       	rjmp	.+2      	; 0x740c <__vector_65+0x118>
    740a:	20 e0       	ldi	r18, 0x00	; 0
    740c:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
				while (AxisMoving == 1)
    7410:	99 23       	and	r25, r25
    7412:	99 f0       	breq	.+38     	; 0x743a <__vector_65+0x146>
    7414:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    7418:	91 11       	cpse	r25, r1
    741a:	07 c0       	rjmp	.+14     	; 0x742a <__vector_65+0x136>
    741c:	22 2d       	mov	r18, r2
    741e:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    7422:	91 11       	cpse	r25, r1
    7424:	03 c0       	rjmp	.+6      	; 0x742c <__vector_65+0x138>
    7426:	20 e0       	ldi	r18, 0x00	; 0
    7428:	01 c0       	rjmp	.+2      	; 0x742c <__vector_65+0x138>
    742a:	22 2d       	mov	r18, r2
    742c:	92 2f       	mov	r25, r18
				{
					AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    742e:	81 11       	cpse	r24, r1
    7430:	fe cf       	rjmp	.-4      	; 0x742e <__vector_65+0x13a>


				DO1_CLR;

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
				while (AxisMoving == 1)
    7432:	91 11       	cpse	r25, r1
    7434:	fc cf       	rjmp	.-8      	; 0x742e <__vector_65+0x13a>
    7436:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
				{
					AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
				}
				if(SoftRef1<AxisPosition1) CLR_DIR1;
    743a:	40 90 a0 27 	lds	r4, 0x27A0	; 0x8027a0 <SoftRef1>
    743e:	50 90 a1 27 	lds	r5, 0x27A1	; 0x8027a1 <SoftRef1+0x1>
    7442:	60 90 a2 27 	lds	r6, 0x27A2	; 0x8027a2 <SoftRef1+0x2>
    7446:	70 90 a3 27 	lds	r7, 0x27A3	; 0x8027a3 <SoftRef1+0x3>
    744a:	c0 90 ac 27 	lds	r12, 0x27AC	; 0x8027ac <AxisPosition1>
    744e:	d0 90 ad 27 	lds	r13, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    7452:	e0 90 ae 27 	lds	r14, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    7456:	f0 90 af 27 	lds	r15, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    745a:	4c 14       	cp	r4, r12
    745c:	5d 04       	cpc	r5, r13
    745e:	6e 04       	cpc	r6, r14
    7460:	7f 04       	cpc	r7, r15
    7462:	2c f4       	brge	.+10     	; 0x746e <__vector_65+0x17a>
    7464:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    7468:	8f 7e       	andi	r24, 0xEF	; 239
    746a:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef1>AxisPosition1) SET_DIR1;
    746e:	c4 14       	cp	r12, r4
    7470:	d5 04       	cpc	r13, r5
    7472:	e6 04       	cpc	r14, r6
    7474:	f7 04       	cpc	r15, r7
    7476:	2c f4       	brge	.+10     	; 0x7482 <__vector_65+0x18e>
    7478:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    747c:	80 61       	ori	r24, 0x10	; 16
    747e:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				if(SoftRef2<AxisPosition2) CLR_DIR2;
    7482:	80 90 9c 27 	lds	r8, 0x279C	; 0x80279c <SoftRef2>
    7486:	90 90 9d 27 	lds	r9, 0x279D	; 0x80279d <SoftRef2+0x1>
    748a:	a0 90 9e 27 	lds	r10, 0x279E	; 0x80279e <SoftRef2+0x2>
    748e:	b0 90 9f 27 	lds	r11, 0x279F	; 0x80279f <SoftRef2+0x3>
    7492:	40 91 a8 27 	lds	r20, 0x27A8	; 0x8027a8 <AxisPosition2>
    7496:	50 91 a9 27 	lds	r21, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    749a:	60 91 aa 27 	lds	r22, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    749e:	70 91 ab 27 	lds	r23, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    74a2:	84 16       	cp	r8, r20
    74a4:	95 06       	cpc	r9, r21
    74a6:	a6 06       	cpc	r10, r22
    74a8:	b7 06       	cpc	r11, r23
    74aa:	2c f4       	brge	.+10     	; 0x74b6 <__vector_65+0x1c2>
    74ac:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    74b0:	8b 7f       	andi	r24, 0xFB	; 251
    74b2:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef2>AxisPosition2) SET_DIR2;
    74b6:	48 15       	cp	r20, r8
    74b8:	59 05       	cpc	r21, r9
    74ba:	6a 05       	cpc	r22, r10
    74bc:	7b 05       	cpc	r23, r11
    74be:	2c f4       	brge	.+10     	; 0x74ca <__vector_65+0x1d6>
    74c0:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    74c4:	84 60       	ori	r24, 0x04	; 4
    74c6:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				if(SoftRef3<AxisPosition3) CLR_DIR3;
    74ca:	00 91 98 27 	lds	r16, 0x2798	; 0x802798 <SoftRef3>
    74ce:	10 91 99 27 	lds	r17, 0x2799	; 0x802799 <SoftRef3+0x1>
    74d2:	20 91 9a 27 	lds	r18, 0x279A	; 0x80279a <SoftRef3+0x2>
    74d6:	30 91 9b 27 	lds	r19, 0x279B	; 0x80279b <SoftRef3+0x3>
    74da:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    74de:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    74e2:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    74e6:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    74ea:	08 17       	cp	r16, r24
    74ec:	19 07       	cpc	r17, r25
    74ee:	2a 07       	cpc	r18, r26
    74f0:	3b 07       	cpc	r19, r27
    74f2:	34 f4       	brge	.+12     	; 0x7500 <__vector_65+0x20c>
    74f4:	30 90 24 07 	lds	r3, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    74f8:	e3 2d       	mov	r30, r3
    74fa:	ee 7f       	andi	r30, 0xFE	; 254
    74fc:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef3>AxisPosition3) SET_DIR3;
    7500:	80 17       	cp	r24, r16
    7502:	91 07       	cpc	r25, r17
    7504:	a2 07       	cpc	r26, r18
    7506:	b3 07       	cpc	r27, r19
    7508:	34 f4       	brge	.+12     	; 0x7516 <__vector_65+0x222>
    750a:	30 90 24 07 	lds	r3, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    750e:	f3 2d       	mov	r31, r3
    7510:	f1 60       	ori	r31, 0x01	; 1
    7512:	f0 93 24 07 	sts	0x0724, r31	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				//printf("SoftRef1: %d\tSoftRef2: %d\tSoftRef3: %d\r\n",SoftRef1,SoftRef2,SoftRef3);
				DistanceToGo1=labs(AxisPosition1-SoftRef1);
    7516:	c4 18       	sub	r12, r4
    7518:	d5 08       	sbc	r13, r5
    751a:	e6 08       	sbc	r14, r6
    751c:	f7 08       	sbc	r15, r7
    751e:	26 01       	movw	r4, r12
    7520:	37 01       	movw	r6, r14
    7522:	3a f4       	brpl	.+14     	; 0x7532 <__vector_65+0x23e>
    7524:	44 24       	eor	r4, r4
    7526:	55 24       	eor	r5, r5
    7528:	32 01       	movw	r6, r4
    752a:	4c 18       	sub	r4, r12
    752c:	5d 08       	sbc	r5, r13
    752e:	6e 08       	sbc	r6, r14
    7530:	7f 08       	sbc	r7, r15
    7532:	73 01       	movw	r14, r6
    7534:	62 01       	movw	r12, r4
    7536:	40 92 90 27 	sts	0x2790, r4	; 0x802790 <DistanceToGo1>
    753a:	50 92 91 27 	sts	0x2791, r5	; 0x802791 <DistanceToGo1+0x1>
    753e:	60 92 92 27 	sts	0x2792, r6	; 0x802792 <DistanceToGo1+0x2>
    7542:	70 92 93 27 	sts	0x2793, r7	; 0x802793 <DistanceToGo1+0x3>
				DistanceToGo2=labs(AxisPosition2-SoftRef2);
    7546:	48 19       	sub	r20, r8
    7548:	59 09       	sbc	r21, r9
    754a:	6a 09       	sbc	r22, r10
    754c:	7b 09       	sbc	r23, r11
    754e:	4a 01       	movw	r8, r20
    7550:	5b 01       	movw	r10, r22
    7552:	3a f4       	brpl	.+14     	; 0x7562 <__vector_65+0x26e>
    7554:	88 24       	eor	r8, r8
    7556:	99 24       	eor	r9, r9
    7558:	54 01       	movw	r10, r8
    755a:	84 1a       	sub	r8, r20
    755c:	95 0a       	sbc	r9, r21
    755e:	a6 0a       	sbc	r10, r22
    7560:	b7 0a       	sbc	r11, r23
    7562:	24 01       	movw	r4, r8
    7564:	35 01       	movw	r6, r10
    7566:	80 92 8c 27 	sts	0x278C, r8	; 0x80278c <DistanceToGo2>
    756a:	90 92 8d 27 	sts	0x278D, r9	; 0x80278d <DistanceToGo2+0x1>
    756e:	a0 92 8e 27 	sts	0x278E, r10	; 0x80278e <DistanceToGo2+0x2>
    7572:	b0 92 8f 27 	sts	0x278F, r11	; 0x80278f <DistanceToGo2+0x3>
				DistanceToGo3=labs(AxisPosition3-SoftRef3);
    7576:	80 1b       	sub	r24, r16
    7578:	91 0b       	sbc	r25, r17
    757a:	a2 0b       	sbc	r26, r18
    757c:	b3 0b       	sbc	r27, r19
    757e:	ac 01       	movw	r20, r24
    7580:	bd 01       	movw	r22, r26
    7582:	3a f4       	brpl	.+14     	; 0x7592 <__vector_65+0x29e>
    7584:	44 27       	eor	r20, r20
    7586:	55 27       	eor	r21, r21
    7588:	ba 01       	movw	r22, r20
    758a:	48 1b       	sub	r20, r24
    758c:	59 0b       	sbc	r21, r25
    758e:	6a 0b       	sbc	r22, r26
    7590:	7b 0b       	sbc	r23, r27
    7592:	49 83       	std	Y+1, r20	; 0x01
    7594:	5a 83       	std	Y+2, r21	; 0x02
    7596:	6b 83       	std	Y+3, r22	; 0x03
    7598:	7c 83       	std	Y+4, r23	; 0x04
    759a:	40 93 88 27 	sts	0x2788, r20	; 0x802788 <DistanceToGo3>
    759e:	50 93 89 27 	sts	0x2789, r21	; 0x802789 <DistanceToGo3+0x1>
    75a2:	60 93 8a 27 	sts	0x278A, r22	; 0x80278a <DistanceToGo3+0x2>
    75a6:	70 93 8b 27 	sts	0x278B, r23	; 0x80278b <DistanceToGo3+0x3>
				//printf("DistanceToGo1: %d\tDistanceToGo2: %d\tDistanceToGo3: %d\r\n",DistanceToGo1,DistanceToGo2,DistanceToGo3);
				if(DistanceToGo1 > DistanceToGo2 && DistanceToGo1 > DistanceToGo3)
    75aa:	4c 14       	cp	r4, r12
    75ac:	5d 04       	cpc	r5, r13
    75ae:	6e 04       	cpc	r6, r14
    75b0:	7f 04       	cpc	r7, r15
    75b2:	ec f5       	brge	.+122    	; 0x762e <__vector_65+0x33a>
    75b4:	4c 15       	cp	r20, r12
    75b6:	5d 05       	cpc	r21, r13
    75b8:	6e 05       	cpc	r22, r14
    75ba:	7f 05       	cpc	r23, r15
    75bc:	c4 f5       	brge	.+112    	; 0x762e <__vector_65+0x33a>
				{
					MaxSpeed = Axes[0].MaxSpeed;
    75be:	80 91 c2 27 	lds	r24, 0x27C2	; 0x8027c2 <Axes+0x5>
    75c2:	90 91 c3 27 	lds	r25, 0x27C3	; 0x8027c3 <Axes+0x6>
    75c6:	a0 91 c4 27 	lds	r26, 0x27C4	; 0x8027c4 <Axes+0x7>
    75ca:	b0 91 c5 27 	lds	r27, 0x27C5	; 0x8027c5 <Axes+0x8>
    75ce:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    75d2:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    75d6:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    75da:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    75de:	80 91 c6 27 	lds	r24, 0x27C6	; 0x8027c6 <Axes+0x9>
    75e2:	90 91 c7 27 	lds	r25, 0x27C7	; 0x8027c7 <Axes+0xa>
    75e6:	a0 91 c8 27 	lds	r26, 0x27C8	; 0x8027c8 <Axes+0xb>
    75ea:	b0 91 c9 27 	lds	r27, 0x27C9	; 0x8027c9 <Axes+0xc>
    75ee:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    75f2:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    75f6:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    75fa:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
					IDEC=Axes[0].DEC;
    75fe:	80 91 ca 27 	lds	r24, 0x27CA	; 0x8027ca <Axes+0xd>
    7602:	90 91 cb 27 	lds	r25, 0x27CB	; 0x8027cb <Axes+0xe>
    7606:	a0 91 cc 27 	lds	r26, 0x27CC	; 0x8027cc <Axes+0xf>
    760a:	b0 91 cd 27 	lds	r27, 0x27CD	; 0x8027cd <Axes+0x10>
    760e:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    7612:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    7616:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    761a:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition1-SoftRef1);
    761e:	c0 92 94 27 	sts	0x2794, r12	; 0x802794 <MaxDistanceToGo>
    7622:	d0 92 95 27 	sts	0x2795, r13	; 0x802795 <MaxDistanceToGo+0x1>
    7626:	e0 92 96 27 	sts	0x2796, r14	; 0x802796 <MaxDistanceToGo+0x2>
    762a:	f0 92 97 27 	sts	0x2797, r15	; 0x802797 <MaxDistanceToGo+0x3>
				}
				if(DistanceToGo2 > DistanceToGo1 && DistanceToGo2 > DistanceToGo3)
    762e:	c4 14       	cp	r12, r4
    7630:	d5 04       	cpc	r13, r5
    7632:	e6 04       	cpc	r14, r6
    7634:	f7 04       	cpc	r15, r7
    7636:	0c f0       	brlt	.+2      	; 0x763a <__vector_65+0x346>
    7638:	41 c0       	rjmp	.+130    	; 0x76bc <__vector_65+0x3c8>
    763a:	89 81       	ldd	r24, Y+1	; 0x01
    763c:	9a 81       	ldd	r25, Y+2	; 0x02
    763e:	ab 81       	ldd	r26, Y+3	; 0x03
    7640:	bc 81       	ldd	r27, Y+4	; 0x04
    7642:	84 15       	cp	r24, r4
    7644:	95 05       	cpc	r25, r5
    7646:	a6 05       	cpc	r26, r6
    7648:	b7 05       	cpc	r27, r7
    764a:	c4 f5       	brge	.+112    	; 0x76bc <__vector_65+0x3c8>
				{
					MaxSpeed = Axes[1].MaxSpeed;
    764c:	80 91 ed 27 	lds	r24, 0x27ED	; 0x8027ed <Axes+0x30>
    7650:	90 91 ee 27 	lds	r25, 0x27EE	; 0x8027ee <Axes+0x31>
    7654:	a0 91 ef 27 	lds	r26, 0x27EF	; 0x8027ef <Axes+0x32>
    7658:	b0 91 f0 27 	lds	r27, 0x27F0	; 0x8027f0 <Axes+0x33>
    765c:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    7660:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    7664:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    7668:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    766c:	80 91 f1 27 	lds	r24, 0x27F1	; 0x8027f1 <Axes+0x34>
    7670:	90 91 f2 27 	lds	r25, 0x27F2	; 0x8027f2 <Axes+0x35>
    7674:	a0 91 f3 27 	lds	r26, 0x27F3	; 0x8027f3 <Axes+0x36>
    7678:	b0 91 f4 27 	lds	r27, 0x27F4	; 0x8027f4 <Axes+0x37>
    767c:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    7680:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    7684:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    7688:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
					IDEC=Axes[1].DEC;
    768c:	80 91 f5 27 	lds	r24, 0x27F5	; 0x8027f5 <Axes+0x38>
    7690:	90 91 f6 27 	lds	r25, 0x27F6	; 0x8027f6 <Axes+0x39>
    7694:	a0 91 f7 27 	lds	r26, 0x27F7	; 0x8027f7 <Axes+0x3a>
    7698:	b0 91 f8 27 	lds	r27, 0x27F8	; 0x8027f8 <Axes+0x3b>
    769c:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    76a0:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    76a4:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    76a8:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition2-SoftRef2);
    76ac:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    76b0:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    76b4:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    76b8:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
				}
				if(DistanceToGo3 > DistanceToGo1 && DistanceToGo3 > DistanceToGo2)
    76bc:	89 81       	ldd	r24, Y+1	; 0x01
    76be:	9a 81       	ldd	r25, Y+2	; 0x02
    76c0:	ab 81       	ldd	r26, Y+3	; 0x03
    76c2:	bc 81       	ldd	r27, Y+4	; 0x04
    76c4:	c8 16       	cp	r12, r24
    76c6:	d9 06       	cpc	r13, r25
    76c8:	ea 06       	cpc	r14, r26
    76ca:	fb 06       	cpc	r15, r27
    76cc:	dc f5       	brge	.+118    	; 0x7744 <__vector_65+0x450>
    76ce:	48 16       	cp	r4, r24
    76d0:	59 06       	cpc	r5, r25
    76d2:	6a 06       	cpc	r6, r26
    76d4:	7b 06       	cpc	r7, r27
    76d6:	b4 f5       	brge	.+108    	; 0x7744 <__vector_65+0x450>
				{
					MaxSpeed = Axes[2].MaxSpeed;
    76d8:	e8 e1       	ldi	r30, 0x18	; 24
    76da:	f8 e2       	ldi	r31, 0x28	; 40
    76dc:	80 81       	ld	r24, Z
    76de:	91 81       	ldd	r25, Z+1	; 0x01
    76e0:	a2 81       	ldd	r26, Z+2	; 0x02
    76e2:	b3 81       	ldd	r27, Z+3	; 0x03
    76e4:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    76e8:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    76ec:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    76f0:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    76f4:	ec e1       	ldi	r30, 0x1C	; 28
    76f6:	f8 e2       	ldi	r31, 0x28	; 40
    76f8:	80 81       	ld	r24, Z
    76fa:	91 81       	ldd	r25, Z+1	; 0x01
    76fc:	a2 81       	ldd	r26, Z+2	; 0x02
    76fe:	b3 81       	ldd	r27, Z+3	; 0x03
    7700:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    7704:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    7708:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    770c:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
					IDEC=Axes[2].DEC;
    7710:	e0 e2       	ldi	r30, 0x20	; 32
    7712:	f8 e2       	ldi	r31, 0x28	; 40
    7714:	80 81       	ld	r24, Z
    7716:	91 81       	ldd	r25, Z+1	; 0x01
    7718:	a2 81       	ldd	r26, Z+2	; 0x02
    771a:	b3 81       	ldd	r27, Z+3	; 0x03
    771c:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    7720:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    7724:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    7728:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition3-SoftRef3);
    772c:	89 81       	ldd	r24, Y+1	; 0x01
    772e:	9a 81       	ldd	r25, Y+2	; 0x02
    7730:	ab 81       	ldd	r26, Y+3	; 0x03
    7732:	bc 81       	ldd	r27, Y+4	; 0x04
    7734:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <MaxDistanceToGo>
    7738:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <MaxDistanceToGo+0x1>
    773c:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <MaxDistanceToGo+0x2>
    7740:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <MaxDistanceToGo+0x3>
				}
				//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
				if(MaxSpeed>0)
    7744:	80 90 6d 27 	lds	r8, 0x276D	; 0x80276d <MaxSpeed>
    7748:	90 90 6e 27 	lds	r9, 0x276E	; 0x80276e <MaxSpeed+0x1>
    774c:	a0 90 6f 27 	lds	r10, 0x276F	; 0x80276f <MaxSpeed+0x2>
    7750:	b0 90 70 27 	lds	r11, 0x2770	; 0x802770 <MaxSpeed+0x3>
    7754:	18 14       	cp	r1, r8
    7756:	19 04       	cpc	r1, r9
    7758:	1a 04       	cpc	r1, r10
    775a:	1b 04       	cpc	r1, r11
    775c:	0c f0       	brlt	.+2      	; 0x7760 <__vector_65+0x46c>
    775e:	52 c0       	rjmp	.+164    	; 0x7804 <__vector_65+0x510>
				{
					Ma1=(unsigned int)((float)((float)DistanceToGo1/(float)MaxDistanceToGo)*1000);
    7760:	60 91 94 27 	lds	r22, 0x2794	; 0x802794 <MaxDistanceToGo>
    7764:	70 91 95 27 	lds	r23, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    7768:	80 91 96 27 	lds	r24, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    776c:	90 91 97 27 	lds	r25, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    7770:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    7774:	6d 83       	std	Y+5, r22	; 0x05
    7776:	7e 83       	std	Y+6, r23	; 0x06
    7778:	8f 83       	std	Y+7, r24	; 0x07
    777a:	98 87       	std	Y+8, r25	; 0x08
    777c:	c7 01       	movw	r24, r14
    777e:	b6 01       	movw	r22, r12
    7780:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    7784:	2d 81       	ldd	r18, Y+5	; 0x05
    7786:	3e 81       	ldd	r19, Y+6	; 0x06
    7788:	4f 81       	ldd	r20, Y+7	; 0x07
    778a:	58 85       	ldd	r21, Y+8	; 0x08
    778c:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    7790:	20 e0       	ldi	r18, 0x00	; 0
    7792:	30 e0       	ldi	r19, 0x00	; 0
    7794:	4a e7       	ldi	r20, 0x7A	; 122
    7796:	54 e4       	ldi	r21, 0x44	; 68
    7798:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    779c:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    77a0:	60 93 30 27 	sts	0x2730, r22	; 0x802730 <Ma1>
    77a4:	70 93 31 27 	sts	0x2731, r23	; 0x802731 <Ma1+0x1>
					Ma2=(unsigned int)((float)((float)DistanceToGo2/(float)MaxDistanceToGo)*1000);
    77a8:	c3 01       	movw	r24, r6
    77aa:	b2 01       	movw	r22, r4
    77ac:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    77b0:	2d 81       	ldd	r18, Y+5	; 0x05
    77b2:	3e 81       	ldd	r19, Y+6	; 0x06
    77b4:	4f 81       	ldd	r20, Y+7	; 0x07
    77b6:	58 85       	ldd	r21, Y+8	; 0x08
    77b8:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    77bc:	20 e0       	ldi	r18, 0x00	; 0
    77be:	30 e0       	ldi	r19, 0x00	; 0
    77c0:	4a e7       	ldi	r20, 0x7A	; 122
    77c2:	54 e4       	ldi	r21, 0x44	; 68
    77c4:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    77c8:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    77cc:	60 93 2e 27 	sts	0x272E, r22	; 0x80272e <Ma2>
    77d0:	70 93 2f 27 	sts	0x272F, r23	; 0x80272f <Ma2+0x1>
					Ma3=(unsigned int)((float)((float)DistanceToGo3/(float)MaxDistanceToGo)*1000);
    77d4:	69 81       	ldd	r22, Y+1	; 0x01
    77d6:	7a 81       	ldd	r23, Y+2	; 0x02
    77d8:	8b 81       	ldd	r24, Y+3	; 0x03
    77da:	9c 81       	ldd	r25, Y+4	; 0x04
    77dc:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    77e0:	2d 81       	ldd	r18, Y+5	; 0x05
    77e2:	3e 81       	ldd	r19, Y+6	; 0x06
    77e4:	4f 81       	ldd	r20, Y+7	; 0x07
    77e6:	58 85       	ldd	r21, Y+8	; 0x08
    77e8:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    77ec:	20 e0       	ldi	r18, 0x00	; 0
    77ee:	30 e0       	ldi	r19, 0x00	; 0
    77f0:	4a e7       	ldi	r20, 0x7A	; 122
    77f2:	54 e4       	ldi	r21, 0x44	; 68
    77f4:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    77f8:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    77fc:	60 93 2c 27 	sts	0x272C, r22	; 0x80272c <Ma3>
    7800:	70 93 2d 27 	sts	0x272D, r23	; 0x80272d <Ma3+0x1>
					//printf("MaxSpeed: %d\tMa1: %d\tMa2: %d\tMa3: %d\r\n",MaxSpeed,Ma1,Ma2,Ma3);
				}
				CurSpeedFrq=MaxSpeed;
    7804:	80 92 42 27 	sts	0x2742, r8	; 0x802742 <CurSpeedFrq>
    7808:	90 92 43 27 	sts	0x2743, r9	; 0x802743 <CurSpeedFrq+0x1>
    780c:	a0 92 44 27 	sts	0x2744, r10	; 0x802744 <CurSpeedFrq+0x2>
    7810:	b0 92 45 27 	sts	0x2745, r11	; 0x802745 <CurSpeedFrq+0x3>
				ACC = 0;
    7814:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
				DEC = 0;
    7818:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
				TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    781c:	c5 01       	movw	r24, r10
    781e:	b4 01       	movw	r22, r8
    7820:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__floatsisf>
    7824:	9b 01       	movw	r18, r22
    7826:	ac 01       	movw	r20, r24
    7828:	60 e0       	ldi	r22, 0x00	; 0
    782a:	70 e0       	ldi	r23, 0x00	; 0
    782c:	8a e7       	ldi	r24, 0x7A	; 122
    782e:	96 e4       	ldi	r25, 0x46	; 70
    7830:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divsf3>
    7834:	60 93 28 27 	sts	0x2728, r22	; 0x802728 <TimerMainPeriod>
    7838:	70 93 29 27 	sts	0x2729, r23	; 0x802729 <TimerMainPeriod+0x1>
    783c:	80 93 2a 27 	sts	0x272A, r24	; 0x80272a <TimerMainPeriod+0x2>
    7840:	90 93 2b 27 	sts	0x272B, r25	; 0x80272b <TimerMainPeriod+0x3>
				tcc0_init();
    7844:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
				TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    7848:	20 e0       	ldi	r18, 0x00	; 0
    784a:	30 e0       	ldi	r19, 0x00	; 0
    784c:	4a e7       	ldi	r20, 0x7A	; 122
    784e:	54 e4       	ldi	r21, 0x44	; 68
    7850:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    7854:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    7858:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    785c:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    7860:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    7864:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    7868:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    786c:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				ProgramRun=0;
    7870:	10 92 bc 27 	sts	0x27BC, r1	; 0x8027bc <ProgramRun>
    7874:	a7 cd       	rjmp	.-1202   	; 0x73c4 <__vector_65+0xd0>
				//DistanceToGo3=0;
			}
		}
		
	}
}
    7876:	28 96       	adiw	r28, 0x08	; 8
    7878:	cd bf       	out	0x3d, r28	; 61
    787a:	de bf       	out	0x3e, r29	; 62
    787c:	df 91       	pop	r29
    787e:	cf 91       	pop	r28
    7880:	ff 91       	pop	r31
    7882:	ef 91       	pop	r30
    7884:	bf 91       	pop	r27
    7886:	af 91       	pop	r26
    7888:	9f 91       	pop	r25
    788a:	8f 91       	pop	r24
    788c:	7f 91       	pop	r23
    788e:	6f 91       	pop	r22
    7890:	5f 91       	pop	r21
    7892:	4f 91       	pop	r20
    7894:	3f 91       	pop	r19
    7896:	2f 91       	pop	r18
    7898:	1f 91       	pop	r17
    789a:	0f 91       	pop	r16
    789c:	ff 90       	pop	r15
    789e:	ef 90       	pop	r14
    78a0:	df 90       	pop	r13
    78a2:	cf 90       	pop	r12
    78a4:	bf 90       	pop	r11
    78a6:	af 90       	pop	r10
    78a8:	9f 90       	pop	r9
    78aa:	8f 90       	pop	r8
    78ac:	7f 90       	pop	r7
    78ae:	6f 90       	pop	r6
    78b0:	5f 90       	pop	r5
    78b2:	4f 90       	pop	r4
    78b4:	3f 90       	pop	r3
    78b6:	2f 90       	pop	r2
    78b8:	0f 90       	pop	r0
    78ba:	0b be       	out	0x3b, r0	; 59
    78bc:	0f 90       	pop	r0
    78be:	0a be       	out	0x3a, r0	; 58
    78c0:	0f 90       	pop	r0
    78c2:	09 be       	out	0x39, r0	; 57
    78c4:	0f 90       	pop	r0
    78c6:	08 be       	out	0x38, r0	; 56
    78c8:	0f 90       	pop	r0
    78ca:	0f be       	out	0x3f, r0	; 63
    78cc:	0f 90       	pop	r0
    78ce:	1f 90       	pop	r1
    78d0:	18 95       	reti

000078d2 <_Z12usartc0_initv>:
	// Note: The correct PORTC direction for the RxD, TxD and XCK signals
	// is configured in the ports_init function.

	// Transmitter is enabled
	// Set TxD=1
	PORTC.OUTSET=0x08;
    78d2:	88 e0       	ldi	r24, 0x08	; 8
    78d4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	// Communication mode: Asynchronous USART
	// Data bits: 8
	// Stop bits: 1
	// Parity: Disabled
	USARTC0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    78d8:	e0 ea       	ldi	r30, 0xA0	; 160
    78da:	f8 e0       	ldi	r31, 0x08	; 8
    78dc:	83 e0       	ldi	r24, 0x03	; 3
    78de:	85 83       	std	Z+5, r24	; 0x05

	// Receive complete interrupt: Medium Level
	// Transmit complete interrupt: Disabled
	// Data register empty interrupt: Disabled
	USARTC0.CTRLA=(USARTC0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
    78e0:	83 81       	ldd	r24, Z+3	; 0x03
	USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    78e2:	80 7c       	andi	r24, 0xC0	; 192
    78e4:	80 62       	ori	r24, 0x20	; 32
    78e6:	83 83       	std	Z+3, r24	; 0x03

	// Required Baud rate: 115200
	// Real Baud Rate: 115211.5 (x1 Mode), Error: 0.0 %
	USARTC0.BAUDCTRLA=0x2E;
    78e8:	8e e2       	ldi	r24, 0x2E	; 46
    78ea:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x08;
    78ec:	88 e9       	ldi	r24, 0x98	; 152
    78ee:	87 83       	std	Z+7, r24	; 0x07

	// Receiver: On
	// Transmitter: On
	// Double transmission speed mode: Off
	// Multi-processor communication mode: Off
	USARTC0.CTRLB=(USARTC0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
    78f0:	84 81       	ldd	r24, Z+4	; 0x04
	USART_RXEN_bm | USART_TXEN_bm;
    78f2:	80 7e       	andi	r24, 0xE0	; 224
    78f4:	88 61       	ori	r24, 0x18	; 24
    78f6:	84 83       	std	Z+4, r24	; 0x04
    78f8:	08 95       	ret

000078fa <__vector_25>:
// This flag is set on USARTC0 Receiver buffer overflow
bool rx_buffer_overflow_usartc0=0;

// USARTC0 Receiver interrupt service routine
ISR (USARTC0_RXC_vect)
{
    78fa:	1f 92       	push	r1
    78fc:	0f 92       	push	r0
    78fe:	0f b6       	in	r0, 0x3f	; 63
    7900:	0f 92       	push	r0
    7902:	11 24       	eor	r1, r1
    7904:	08 b6       	in	r0, 0x38	; 56
    7906:	0f 92       	push	r0
    7908:	18 be       	out	0x38, r1	; 56
    790a:	0b b6       	in	r0, 0x3b	; 59
    790c:	0f 92       	push	r0
    790e:	1b be       	out	0x3b, r1	; 59
    7910:	8f 93       	push	r24
    7912:	9f 93       	push	r25
    7914:	ef 93       	push	r30
    7916:	ff 93       	push	r31
	unsigned char status;
	char data;

	status=USARTC0.STATUS;
    7918:	e0 ea       	ldi	r30, 0xA0	; 160
    791a:	f8 e0       	ldi	r31, 0x08	; 8
    791c:	81 81       	ldd	r24, Z+1	; 0x01
	data=USARTC0.DATA;
    791e:	90 81       	ld	r25, Z
	if ((status & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
    7920:	8c 71       	andi	r24, 0x1C	; 28
    7922:	d9 f4       	brne	.+54     	; 0x795a <__vector_25+0x60>
	{
		rx_buffer_usartc0[rx_wr_index_usartc0++]=data;
    7924:	e0 91 d0 26 	lds	r30, 0x26D0	; 0x8026d0 <rx_wr_index_usartc0>
    7928:	81 e0       	ldi	r24, 0x01	; 1
    792a:	8e 0f       	add	r24, r30
    792c:	80 93 d0 26 	sts	0x26D0, r24	; 0x8026d0 <rx_wr_index_usartc0>
    7930:	f0 e0       	ldi	r31, 0x00	; 0
    7932:	ef 52       	subi	r30, 0x2F	; 47
    7934:	f9 4d       	sbci	r31, 0xD9	; 217
    7936:	90 83       	st	Z, r25
		#if RX_BUFFER_SIZE_USARTC0 == 256
		// special case for receiver buffer size=256
		if (++rx_counter_usartc0 == 0) rx_buffer_overflow_usartc0=1;
		#else
		if (rx_wr_index_usartc0 == RX_BUFFER_SIZE_USARTC0) rx_wr_index_usartc0=0;
    7938:	88 30       	cpi	r24, 0x08	; 8
    793a:	11 f4       	brne	.+4      	; 0x7940 <__vector_25+0x46>
    793c:	10 92 d0 26 	sts	0x26D0, r1	; 0x8026d0 <rx_wr_index_usartc0>
		if (++rx_counter_usartc0 == RX_BUFFER_SIZE_USARTC0)
    7940:	80 91 cf 26 	lds	r24, 0x26CF	; 0x8026cf <rx_counter_usartc0>
    7944:	8f 5f       	subi	r24, 0xFF	; 255
    7946:	88 30       	cpi	r24, 0x08	; 8
    7948:	19 f0       	breq	.+6      	; 0x7950 <__vector_25+0x56>
    794a:	80 93 cf 26 	sts	0x26CF, r24	; 0x8026cf <rx_counter_usartc0>
    794e:	05 c0       	rjmp	.+10     	; 0x795a <__vector_25+0x60>
		{
			rx_counter_usartc0=0;
    7950:	10 92 cf 26 	sts	0x26CF, r1	; 0x8026cf <rx_counter_usartc0>
			rx_buffer_overflow_usartc0=1;
    7954:	81 e0       	ldi	r24, 0x01	; 1
    7956:	80 93 ce 26 	sts	0x26CE, r24	; 0x8026ce <__data_end>
		}
		#endif
	}
}
    795a:	ff 91       	pop	r31
    795c:	ef 91       	pop	r30
    795e:	9f 91       	pop	r25
    7960:	8f 91       	pop	r24
    7962:	0f 90       	pop	r0
    7964:	0b be       	out	0x3b, r0	; 59
    7966:	0f 90       	pop	r0
    7968:	08 be       	out	0x38, r0	; 56
    796a:	0f 90       	pop	r0
    796c:	0f be       	out	0x3f, r0	; 63
    796e:	0f 90       	pop	r0
    7970:	1f 90       	pop	r1
    7972:	18 95       	reti

00007974 <main>:

    // Interrupt system initialization
    // Optimize for speed
    #pragma optsize-
    // Make sure the interrupts are disabled
    asm("cli");
    7974:	f8 94       	cli
    // Low level interrupt: On
    // Round-robin scheduling for low level interrupt: Off
    // Medium level interrupt: On
    // High level interrupt: On
    // The interrupt vectors will be placed at the start of the Application FLASH section
    n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
    7976:	e0 ea       	ldi	r30, 0xA0	; 160
    7978:	f0 e0       	ldi	r31, 0x00	; 0
    797a:	82 81       	ldd	r24, Z+2	; 0x02
    PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    797c:	88 73       	andi	r24, 0x38	; 56
    797e:	87 60       	ori	r24, 0x07	; 7
    CCP=CCP_IOREG_gc;
    7980:	98 ed       	ldi	r25, 0xD8	; 216
    7982:	94 bf       	out	0x34, r25	; 52
    PMIC.CTRL=n;
    7984:	82 83       	std	Z+2, r24	; 0x02
    // Set the default priority for round-robin scheduling
    PMIC.INTPRI=0x00;
    7986:	11 82       	std	Z+1, r1	; 0x01
    // Restore optimization for size if needed
    #pragma optsize_default

    // System clocks initialization
    system_clocks_init();
    7988:	0e 94 10 34 	call	0x6820	; 0x6820 <_Z18system_clocks_initv>

    // Ports initialization
    ports_init();
    798c:	0e 94 40 01 	call	0x280	; 0x280 <_Z10ports_initv>

    // Virtual Ports initialization
    //vports_init();
    spif_init();
    7990:	0e 94 00 02 	call	0x400	; 0x400 <_Z9spif_initv>


    // Globally enable interrupts
    asm("sei");
    7994:	78 94       	sei

    tcc0_init();
    7996:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
    tcc1_init();
    799a:	0e 94 15 0c 	call	0x182a	; 0x182a <_Z9tcc1_initv>
    tcd1_init();
    799e:	0e 94 37 0c 	call	0x186e	; 0x186e <_Z9tcd1_initv>
    spie_init();
    79a2:	0e 94 85 02 	call	0x50a	; 0x50a <_Z9spie_initv>
    SG17_SET;
    79a6:	e0 e0       	ldi	r30, 0x00	; 0
    79a8:	f7 e0       	ldi	r31, 0x07	; 7
    79aa:	84 81       	ldd	r24, Z+4	; 0x04
    79ac:	82 60       	ori	r24, 0x02	; 2
    79ae:	84 83       	std	Z+4, r24	; 0x04
    usartc0_init();
    79b0:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <_Z12usartc0_initv>
    SETSFRST;
    79b4:	e0 e8       	ldi	r30, 0x80	; 128
    79b6:	f6 e0       	ldi	r31, 0x06	; 6
    79b8:	84 81       	ldd	r24, Z+4	; 0x04
    79ba:	84 60       	ori	r24, 0x04	; 4
    79bc:	84 83       	std	Z+4, r24	; 0x04
    SETSFWP;
    79be:	84 81       	ldd	r24, Z+4	; 0x04
    79c0:	82 60       	ori	r24, 0x02	; 2
    79c2:	84 83       	std	Z+4, r24	; 0x04
    79c4:	83 e2       	ldi	r24, 0x23	; 35
    79c6:	94 ef       	ldi	r25, 0xF4	; 244
    79c8:	01 97       	sbiw	r24, 0x01	; 1
    79ca:	f1 f7       	brne	.-4      	; 0x79c8 <main+0x54>
    79cc:	00 c0       	rjmp	.+0      	; 0x79ce <main+0x5a>
    79ce:	00 00       	nop
    _delay_ms(250);
    printf("Reading Config...\r\n");
    79d0:	83 e9       	ldi	r24, 0x93	; 147
    79d2:	96 e2       	ldi	r25, 0x26	; 38
    79d4:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
    ReadConfig();
    79d8:	0e 94 c9 02 	call	0x592	; 0x592 <_Z10ReadConfigv>

    while (1)
    {
	    
	    if(JogNeg) SETBIT(PORTR.OUT,0);
    79dc:	0f 2e       	mov	r0, r31
    79de:	f0 e6       	ldi	r31, 0x60	; 96
    79e0:	ef 2e       	mov	r14, r31
    79e2:	f6 e0       	ldi	r31, 0x06	; 6
    79e4:	ff 2e       	mov	r15, r31
    79e6:	f0 2d       	mov	r31, r0
    79e8:	c0 ee       	ldi	r28, 0xE0	; 224
    79ea:	d7 e0       	ldi	r29, 0x07	; 7
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
	    
	    if(JogPos) SETBIT(PORTR.OUT,1);
    79ec:	00 ee       	ldi	r16, 0xE0	; 224
    79ee:	16 e0       	ldi	r17, 0x06	; 6
	    
	    if(RefCmd==0)
	    {
		    //TODO : 
	    }
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    79f0:	44 24       	eor	r4, r4
    79f2:	43 94       	inc	r4
			    else
			    {
				    printf("Read Main Program.\r\n");
				    readRam();
			    }
			    printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    79f4:	0f 2e       	mov	r0, r31
    79f6:	fe e3       	ldi	r31, 0x3E	; 62
    79f8:	cf 2e       	mov	r12, r31
    79fa:	f8 e2       	ldi	r31, 0x28	; 40
    79fc:	df 2e       	mov	r13, r31
    79fe:	f0 2d       	mov	r31, r0
    7a00:	0f 2e       	mov	r0, r31
    7a02:	f7 ef       	ldi	r31, 0xF7	; 247
    7a04:	af 2e       	mov	r10, r31
    7a06:	f0 e2       	ldi	r31, 0x20	; 32
    7a08:	bf 2e       	mov	r11, r31
    7a0a:	f0 2d       	mov	r31, r0
	    
	    if(RefCmd==0)
	    {
		    //TODO : 
	    }
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    7a0c:	54 2c       	mov	r5, r4
    7a0e:	0f 2e       	mov	r0, r31
    7a10:	f5 e1       	ldi	r31, 0x15	; 21
    7a12:	6f 2e       	mov	r6, r31
    7a14:	71 2c       	mov	r7, r1
    7a16:	f0 2d       	mov	r31, r0
    ReadConfig();

    while (1)
    {
	    
	    if(JogNeg) SETBIT(PORTR.OUT,0);
    7a18:	f7 01       	movw	r30, r14
    7a1a:	80 85       	ldd	r24, Z+8	; 0x08
    7a1c:	83 ff       	sbrs	r24, 3
    7a1e:	03 c0       	rjmp	.+6      	; 0x7a26 <main+0xb2>
    7a20:	8c 81       	ldd	r24, Y+4	; 0x04
    7a22:	81 60       	ori	r24, 0x01	; 1
    7a24:	8c 83       	std	Y+4, r24	; 0x04
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
    7a26:	f7 01       	movw	r30, r14
    7a28:	80 85       	ldd	r24, Z+8	; 0x08
    7a2a:	83 fd       	sbrc	r24, 3
    7a2c:	03 c0       	rjmp	.+6      	; 0x7a34 <main+0xc0>
    7a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    7a30:	8e 7f       	andi	r24, 0xFE	; 254
    7a32:	8c 83       	std	Y+4, r24	; 0x04
	    
	    if(JogPos) SETBIT(PORTR.OUT,1);
    7a34:	f8 01       	movw	r30, r16
    7a36:	80 85       	ldd	r24, Z+8	; 0x08
    7a38:	81 ff       	sbrs	r24, 1
    7a3a:	03 c0       	rjmp	.+6      	; 0x7a42 <main+0xce>
    7a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    7a3e:	82 60       	ori	r24, 0x02	; 2
    7a40:	8c 83       	std	Y+4, r24	; 0x04
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
    7a42:	f8 01       	movw	r30, r16
    7a44:	80 85       	ldd	r24, Z+8	; 0x08
    7a46:	81 fd       	sbrc	r24, 1
    7a48:	03 c0       	rjmp	.+6      	; 0x7a50 <main+0xdc>
    7a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    7a4c:	8d 7f       	andi	r24, 0xFD	; 253
    7a4e:	8c 83       	std	Y+4, r24	; 0x04
	    
	    if(RefCmd==0)
	    {
		    //TODO : 
	    }
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    7a50:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    7a54:	81 11       	cpse	r24, r1
    7a56:	79 c0       	rjmp	.+242    	; 0x7b4a <main+0x1d6>
    7a58:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    7a5c:	81 11       	cpse	r24, r1
    7a5e:	75 c0       	rjmp	.+234    	; 0x7b4a <main+0x1d6>
    7a60:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    7a64:	85 2d       	mov	r24, r5
    7a66:	91 11       	cpse	r25, r1
    7a68:	01 c0       	rjmp	.+2      	; 0x7a6c <main+0xf8>
    7a6a:	80 e0       	ldi	r24, 0x00	; 0
    7a6c:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
	    if(ProgramRun && !AxisMoving)
    7a70:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    7a74:	88 23       	and	r24, r24
    7a76:	f1 f1       	breq	.+124    	; 0x7af4 <main+0x180>
    7a78:	91 11       	cpse	r25, r1
    7a7a:	3c c0       	rjmp	.+120    	; 0x7af4 <main+0x180>
	    {
		    if(IsPause==0)
    7a7c:	80 91 da 26 	lds	r24, 0x26DA	; 0x8026da <IsPause>
    7a80:	81 11       	cpse	r24, r1
    7a82:	38 c0       	rjmp	.+112    	; 0x7af4 <main+0x180>
		    {
			    if(RunSubProgram)
    7a84:	80 91 db 26 	lds	r24, 0x26DB	; 0x8026db <RunSubProgram>
    7a88:	88 23       	and	r24, r24
    7a8a:	49 f0       	breq	.+18     	; 0x7a9e <main+0x12a>
			    {
				    printf("Read Sub Program.\r\n");
    7a8c:	86 ea       	ldi	r24, 0xA6	; 166
    7a8e:	96 e2       	ldi	r25, 0x26	; 38
    7a90:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
				    
				    ReadSubProgram(0);
    7a94:	80 e0       	ldi	r24, 0x00	; 0
    7a96:	90 e0       	ldi	r25, 0x00	; 0
    7a98:	0e 94 f6 07 	call	0xfec	; 0xfec <_Z14ReadSubProgramj>
    7a9c:	06 c0       	rjmp	.+12     	; 0x7aaa <main+0x136>
			    }
			    else
			    {
				    printf("Read Main Program.\r\n");
    7a9e:	89 eb       	ldi	r24, 0xB9	; 185
    7aa0:	96 e2       	ldi	r25, 0x26	; 38
    7aa2:	0e 94 c1 40 	call	0x8182	; 0x8182 <puts>
				    readRam();
    7aa6:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
			    }
			    printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    7aaa:	f6 01       	movw	r30, r12
    7aac:	83 81       	ldd	r24, Z+3	; 0x03
    7aae:	1f 92       	push	r1
    7ab0:	8f 93       	push	r24
    7ab2:	81 81       	ldd	r24, Z+1	; 0x01
    7ab4:	8f 93       	push	r24
    7ab6:	80 81       	ld	r24, Z
    7ab8:	8f 93       	push	r24
    7aba:	bf 92       	push	r11
    7abc:	af 92       	push	r10
    7abe:	0e 94 ad 40 	call	0x815a	; 0x815a <printf>
			    
				PORTR.OUTTGL=0x01; //TGLBIT(PORTR.OUT,0);
    7ac2:	4f 82       	std	Y+7, r4	; 0x07
			    PRGExe();
    7ac4:	0e 94 0f 11 	call	0x221e	; 0x221e <_Z6PRGExev>
			    if(PRGEXEindex < PRGSize) PRGEXEindex++;
    7ac8:	80 91 f7 26 	lds	r24, 0x26F7	; 0x8026f7 <PRGEXEindex>
    7acc:	90 91 f8 26 	lds	r25, 0x26F8	; 0x8026f8 <PRGEXEindex+0x1>
    7ad0:	0f 90       	pop	r0
    7ad2:	0f 90       	pop	r0
    7ad4:	0f 90       	pop	r0
    7ad6:	0f 90       	pop	r0
    7ad8:	0f 90       	pop	r0
    7ada:	0f 90       	pop	r0
    7adc:	20 91 f5 26 	lds	r18, 0x26F5	; 0x8026f5 <PRGSize>
    7ae0:	30 91 f6 26 	lds	r19, 0x26F6	; 0x8026f6 <PRGSize+0x1>
    7ae4:	82 17       	cp	r24, r18
    7ae6:	93 07       	cpc	r25, r19
    7ae8:	2c f4       	brge	.+10     	; 0x7af4 <main+0x180>
    7aea:	01 96       	adiw	r24, 0x01	; 1
    7aec:	80 93 f7 26 	sts	0x26F7, r24	; 0x8026f7 <PRGEXEindex>
    7af0:	90 93 f8 26 	sts	0x26F8, r25	; 0x8026f8 <PRGEXEindex+0x1>
		    }
	    }
	    /**********************************************/
	    if(cmdIsReady==0) continue;
    7af4:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <cmdIsReady>
    7af8:	88 23       	and	r24, r24
    7afa:	09 f4       	brne	.+2      	; 0x7afe <main+0x18a>
    7afc:	8d cf       	rjmp	.-230    	; 0x7a18 <main+0xa4>
    7afe:	0f 2e       	mov	r0, r31
    7b00:	f0 e1       	ldi	r31, 0x10	; 16
    7b02:	8f 2e       	mov	r8, r31
    7b04:	f7 e2       	ldi	r31, 0x27	; 39
    7b06:	9f 2e       	mov	r9, r31
    7b08:	f0 2d       	mov	r31, r0
    7b0a:	ee e8       	ldi	r30, 0x8E	; 142
    7b0c:	f8 e2       	ldi	r31, 0x28	; 40
    7b0e:	23 ea       	ldi	r18, 0xA3	; 163
    7b10:	38 e2       	ldi	r19, 0x28	; 40
    7b12:	d4 01       	movw	r26, r8
	    for (j = 0 ; j < 21 ; j++)
	    {
		    cmdTemp[j] = EXECMD[j];
    7b14:	80 81       	ld	r24, Z
    7b16:	8d 93       	st	X+, r24
		    EXECMD[j] = 0;
    7b18:	11 92       	st	Z+, r1
			    if(PRGEXEindex < PRGSize) PRGEXEindex++;
		    }
	    }
	    /**********************************************/
	    if(cmdIsReady==0) continue;
	    for (j = 0 ; j < 21 ; j++)
    7b1a:	2e 17       	cp	r18, r30
    7b1c:	3f 07       	cpc	r19, r31
    7b1e:	d1 f7       	brne	.-12     	; 0x7b14 <main+0x1a0>
    7b20:	60 92 26 27 	sts	0x2726, r6	; 0x802726 <j>
    7b24:	70 92 27 27 	sts	0x2727, r7	; 0x802727 <j+0x1>
	    {
		    cmdTemp[j] = EXECMD[j];
		    EXECMD[j] = 0;
	    }
	    cmdExe();
    7b28:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_Z6cmdExev>
    7b2c:	85 e2       	ldi	r24, 0x25	; 37
    7b2e:	97 e2       	ldi	r25, 0x27	; 39
	    for (j=0;j<21;j++) cmdTemp[j] = 0;
    7b30:	f4 01       	movw	r30, r8
    7b32:	11 92       	st	Z+, r1
    7b34:	4f 01       	movw	r8, r30
    7b36:	e8 17       	cp	r30, r24
    7b38:	f9 07       	cpc	r31, r25
    7b3a:	d1 f7       	brne	.-12     	; 0x7b30 <main+0x1bc>
    7b3c:	60 92 26 27 	sts	0x2726, r6	; 0x802726 <j>
    7b40:	70 92 27 27 	sts	0x2727, r7	; 0x802727 <j+0x1>
	    cmdIsReady=0;
    7b44:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <cmdIsReady>
    7b48:	67 cf       	rjmp	.-306    	; 0x7a18 <main+0xa4>
	    
	    if(RefCmd==0)
	    {
		    //TODO : 
	    }
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    7b4a:	50 92 f9 26 	sts	0x26F9, r5	; 0x8026f9 <AxisMoving>
    7b4e:	d2 cf       	rjmp	.-92     	; 0x7af4 <main+0x180>

00007b50 <__subsf3>:
    7b50:	50 58       	subi	r21, 0x80	; 128

00007b52 <__addsf3>:
    7b52:	bb 27       	eor	r27, r27
    7b54:	aa 27       	eor	r26, r26
    7b56:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__addsf3x>
    7b5a:	0c 94 11 3f 	jmp	0x7e22	; 0x7e22 <__fp_round>
    7b5e:	0e 94 03 3f 	call	0x7e06	; 0x7e06 <__fp_pscA>
    7b62:	38 f0       	brcs	.+14     	; 0x7b72 <__addsf3+0x20>
    7b64:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__fp_pscB>
    7b68:	20 f0       	brcs	.+8      	; 0x7b72 <__addsf3+0x20>
    7b6a:	39 f4       	brne	.+14     	; 0x7b7a <__addsf3+0x28>
    7b6c:	9f 3f       	cpi	r25, 0xFF	; 255
    7b6e:	19 f4       	brne	.+6      	; 0x7b76 <__addsf3+0x24>
    7b70:	26 f4       	brtc	.+8      	; 0x7b7a <__addsf3+0x28>
    7b72:	0c 94 00 3f 	jmp	0x7e00	; 0x7e00 <__fp_nan>
    7b76:	0e f4       	brtc	.+2      	; 0x7b7a <__addsf3+0x28>
    7b78:	e0 95       	com	r30
    7b7a:	e7 fb       	bst	r30, 7
    7b7c:	0c 94 fa 3e 	jmp	0x7df4	; 0x7df4 <__fp_inf>

00007b80 <__addsf3x>:
    7b80:	e9 2f       	mov	r30, r25
    7b82:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <__fp_split3>
    7b86:	58 f3       	brcs	.-42     	; 0x7b5e <__addsf3+0xc>
    7b88:	ba 17       	cp	r27, r26
    7b8a:	62 07       	cpc	r22, r18
    7b8c:	73 07       	cpc	r23, r19
    7b8e:	84 07       	cpc	r24, r20
    7b90:	95 07       	cpc	r25, r21
    7b92:	20 f0       	brcs	.+8      	; 0x7b9c <__addsf3x+0x1c>
    7b94:	79 f4       	brne	.+30     	; 0x7bb4 <__addsf3x+0x34>
    7b96:	a6 f5       	brtc	.+104    	; 0x7c00 <__addsf3x+0x80>
    7b98:	0c 94 44 3f 	jmp	0x7e88	; 0x7e88 <__fp_zero>
    7b9c:	0e f4       	brtc	.+2      	; 0x7ba0 <__addsf3x+0x20>
    7b9e:	e0 95       	com	r30
    7ba0:	0b 2e       	mov	r0, r27
    7ba2:	ba 2f       	mov	r27, r26
    7ba4:	a0 2d       	mov	r26, r0
    7ba6:	0b 01       	movw	r0, r22
    7ba8:	b9 01       	movw	r22, r18
    7baa:	90 01       	movw	r18, r0
    7bac:	0c 01       	movw	r0, r24
    7bae:	ca 01       	movw	r24, r20
    7bb0:	a0 01       	movw	r20, r0
    7bb2:	11 24       	eor	r1, r1
    7bb4:	ff 27       	eor	r31, r31
    7bb6:	59 1b       	sub	r21, r25
    7bb8:	99 f0       	breq	.+38     	; 0x7be0 <__addsf3x+0x60>
    7bba:	59 3f       	cpi	r21, 0xF9	; 249
    7bbc:	50 f4       	brcc	.+20     	; 0x7bd2 <__addsf3x+0x52>
    7bbe:	50 3e       	cpi	r21, 0xE0	; 224
    7bc0:	68 f1       	brcs	.+90     	; 0x7c1c <__addsf3x+0x9c>
    7bc2:	1a 16       	cp	r1, r26
    7bc4:	f0 40       	sbci	r31, 0x00	; 0
    7bc6:	a2 2f       	mov	r26, r18
    7bc8:	23 2f       	mov	r18, r19
    7bca:	34 2f       	mov	r19, r20
    7bcc:	44 27       	eor	r20, r20
    7bce:	58 5f       	subi	r21, 0xF8	; 248
    7bd0:	f3 cf       	rjmp	.-26     	; 0x7bb8 <__addsf3x+0x38>
    7bd2:	46 95       	lsr	r20
    7bd4:	37 95       	ror	r19
    7bd6:	27 95       	ror	r18
    7bd8:	a7 95       	ror	r26
    7bda:	f0 40       	sbci	r31, 0x00	; 0
    7bdc:	53 95       	inc	r21
    7bde:	c9 f7       	brne	.-14     	; 0x7bd2 <__addsf3x+0x52>
    7be0:	7e f4       	brtc	.+30     	; 0x7c00 <__addsf3x+0x80>
    7be2:	1f 16       	cp	r1, r31
    7be4:	ba 0b       	sbc	r27, r26
    7be6:	62 0b       	sbc	r22, r18
    7be8:	73 0b       	sbc	r23, r19
    7bea:	84 0b       	sbc	r24, r20
    7bec:	ba f0       	brmi	.+46     	; 0x7c1c <__addsf3x+0x9c>
    7bee:	91 50       	subi	r25, 0x01	; 1
    7bf0:	a1 f0       	breq	.+40     	; 0x7c1a <__addsf3x+0x9a>
    7bf2:	ff 0f       	add	r31, r31
    7bf4:	bb 1f       	adc	r27, r27
    7bf6:	66 1f       	adc	r22, r22
    7bf8:	77 1f       	adc	r23, r23
    7bfa:	88 1f       	adc	r24, r24
    7bfc:	c2 f7       	brpl	.-16     	; 0x7bee <__addsf3x+0x6e>
    7bfe:	0e c0       	rjmp	.+28     	; 0x7c1c <__addsf3x+0x9c>
    7c00:	ba 0f       	add	r27, r26
    7c02:	62 1f       	adc	r22, r18
    7c04:	73 1f       	adc	r23, r19
    7c06:	84 1f       	adc	r24, r20
    7c08:	48 f4       	brcc	.+18     	; 0x7c1c <__addsf3x+0x9c>
    7c0a:	87 95       	ror	r24
    7c0c:	77 95       	ror	r23
    7c0e:	67 95       	ror	r22
    7c10:	b7 95       	ror	r27
    7c12:	f7 95       	ror	r31
    7c14:	9e 3f       	cpi	r25, 0xFE	; 254
    7c16:	08 f0       	brcs	.+2      	; 0x7c1a <__addsf3x+0x9a>
    7c18:	b0 cf       	rjmp	.-160    	; 0x7b7a <__addsf3+0x28>
    7c1a:	93 95       	inc	r25
    7c1c:	88 0f       	add	r24, r24
    7c1e:	08 f0       	brcs	.+2      	; 0x7c22 <__addsf3x+0xa2>
    7c20:	99 27       	eor	r25, r25
    7c22:	ee 0f       	add	r30, r30
    7c24:	97 95       	ror	r25
    7c26:	87 95       	ror	r24
    7c28:	08 95       	ret

00007c2a <__divsf3>:
    7c2a:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <__divsf3x>
    7c2e:	0c 94 11 3f 	jmp	0x7e22	; 0x7e22 <__fp_round>
    7c32:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__fp_pscB>
    7c36:	58 f0       	brcs	.+22     	; 0x7c4e <__divsf3+0x24>
    7c38:	0e 94 03 3f 	call	0x7e06	; 0x7e06 <__fp_pscA>
    7c3c:	40 f0       	brcs	.+16     	; 0x7c4e <__divsf3+0x24>
    7c3e:	29 f4       	brne	.+10     	; 0x7c4a <__divsf3+0x20>
    7c40:	5f 3f       	cpi	r21, 0xFF	; 255
    7c42:	29 f0       	breq	.+10     	; 0x7c4e <__divsf3+0x24>
    7c44:	0c 94 fa 3e 	jmp	0x7df4	; 0x7df4 <__fp_inf>
    7c48:	51 11       	cpse	r21, r1
    7c4a:	0c 94 45 3f 	jmp	0x7e8a	; 0x7e8a <__fp_szero>
    7c4e:	0c 94 00 3f 	jmp	0x7e00	; 0x7e00 <__fp_nan>

00007c52 <__divsf3x>:
    7c52:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <__fp_split3>
    7c56:	68 f3       	brcs	.-38     	; 0x7c32 <__divsf3+0x8>

00007c58 <__divsf3_pse>:
    7c58:	99 23       	and	r25, r25
    7c5a:	b1 f3       	breq	.-20     	; 0x7c48 <__divsf3+0x1e>
    7c5c:	55 23       	and	r21, r21
    7c5e:	91 f3       	breq	.-28     	; 0x7c44 <__divsf3+0x1a>
    7c60:	95 1b       	sub	r25, r21
    7c62:	55 0b       	sbc	r21, r21
    7c64:	bb 27       	eor	r27, r27
    7c66:	aa 27       	eor	r26, r26
    7c68:	62 17       	cp	r22, r18
    7c6a:	73 07       	cpc	r23, r19
    7c6c:	84 07       	cpc	r24, r20
    7c6e:	38 f0       	brcs	.+14     	; 0x7c7e <__divsf3_pse+0x26>
    7c70:	9f 5f       	subi	r25, 0xFF	; 255
    7c72:	5f 4f       	sbci	r21, 0xFF	; 255
    7c74:	22 0f       	add	r18, r18
    7c76:	33 1f       	adc	r19, r19
    7c78:	44 1f       	adc	r20, r20
    7c7a:	aa 1f       	adc	r26, r26
    7c7c:	a9 f3       	breq	.-22     	; 0x7c68 <__divsf3_pse+0x10>
    7c7e:	35 d0       	rcall	.+106    	; 0x7cea <__divsf3_pse+0x92>
    7c80:	0e 2e       	mov	r0, r30
    7c82:	3a f0       	brmi	.+14     	; 0x7c92 <__divsf3_pse+0x3a>
    7c84:	e0 e8       	ldi	r30, 0x80	; 128
    7c86:	32 d0       	rcall	.+100    	; 0x7cec <__divsf3_pse+0x94>
    7c88:	91 50       	subi	r25, 0x01	; 1
    7c8a:	50 40       	sbci	r21, 0x00	; 0
    7c8c:	e6 95       	lsr	r30
    7c8e:	00 1c       	adc	r0, r0
    7c90:	ca f7       	brpl	.-14     	; 0x7c84 <__divsf3_pse+0x2c>
    7c92:	2b d0       	rcall	.+86     	; 0x7cea <__divsf3_pse+0x92>
    7c94:	fe 2f       	mov	r31, r30
    7c96:	29 d0       	rcall	.+82     	; 0x7cea <__divsf3_pse+0x92>
    7c98:	66 0f       	add	r22, r22
    7c9a:	77 1f       	adc	r23, r23
    7c9c:	88 1f       	adc	r24, r24
    7c9e:	bb 1f       	adc	r27, r27
    7ca0:	26 17       	cp	r18, r22
    7ca2:	37 07       	cpc	r19, r23
    7ca4:	48 07       	cpc	r20, r24
    7ca6:	ab 07       	cpc	r26, r27
    7ca8:	b0 e8       	ldi	r27, 0x80	; 128
    7caa:	09 f0       	breq	.+2      	; 0x7cae <__divsf3_pse+0x56>
    7cac:	bb 0b       	sbc	r27, r27
    7cae:	80 2d       	mov	r24, r0
    7cb0:	bf 01       	movw	r22, r30
    7cb2:	ff 27       	eor	r31, r31
    7cb4:	93 58       	subi	r25, 0x83	; 131
    7cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    7cb8:	3a f0       	brmi	.+14     	; 0x7cc8 <__divsf3_pse+0x70>
    7cba:	9e 3f       	cpi	r25, 0xFE	; 254
    7cbc:	51 05       	cpc	r21, r1
    7cbe:	78 f0       	brcs	.+30     	; 0x7cde <__divsf3_pse+0x86>
    7cc0:	0c 94 fa 3e 	jmp	0x7df4	; 0x7df4 <__fp_inf>
    7cc4:	0c 94 45 3f 	jmp	0x7e8a	; 0x7e8a <__fp_szero>
    7cc8:	5f 3f       	cpi	r21, 0xFF	; 255
    7cca:	e4 f3       	brlt	.-8      	; 0x7cc4 <__divsf3_pse+0x6c>
    7ccc:	98 3e       	cpi	r25, 0xE8	; 232
    7cce:	d4 f3       	brlt	.-12     	; 0x7cc4 <__divsf3_pse+0x6c>
    7cd0:	86 95       	lsr	r24
    7cd2:	77 95       	ror	r23
    7cd4:	67 95       	ror	r22
    7cd6:	b7 95       	ror	r27
    7cd8:	f7 95       	ror	r31
    7cda:	9f 5f       	subi	r25, 0xFF	; 255
    7cdc:	c9 f7       	brne	.-14     	; 0x7cd0 <__divsf3_pse+0x78>
    7cde:	88 0f       	add	r24, r24
    7ce0:	91 1d       	adc	r25, r1
    7ce2:	96 95       	lsr	r25
    7ce4:	87 95       	ror	r24
    7ce6:	97 f9       	bld	r25, 7
    7ce8:	08 95       	ret
    7cea:	e1 e0       	ldi	r30, 0x01	; 1
    7cec:	66 0f       	add	r22, r22
    7cee:	77 1f       	adc	r23, r23
    7cf0:	88 1f       	adc	r24, r24
    7cf2:	bb 1f       	adc	r27, r27
    7cf4:	62 17       	cp	r22, r18
    7cf6:	73 07       	cpc	r23, r19
    7cf8:	84 07       	cpc	r24, r20
    7cfa:	ba 07       	cpc	r27, r26
    7cfc:	20 f0       	brcs	.+8      	; 0x7d06 <__divsf3_pse+0xae>
    7cfe:	62 1b       	sub	r22, r18
    7d00:	73 0b       	sbc	r23, r19
    7d02:	84 0b       	sbc	r24, r20
    7d04:	ba 0b       	sbc	r27, r26
    7d06:	ee 1f       	adc	r30, r30
    7d08:	88 f7       	brcc	.-30     	; 0x7cec <__divsf3_pse+0x94>
    7d0a:	e0 95       	com	r30
    7d0c:	08 95       	ret

00007d0e <__fixsfsi>:
    7d0e:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <__fixunssfsi>
    7d12:	68 94       	set
    7d14:	b1 11       	cpse	r27, r1
    7d16:	0c 94 45 3f 	jmp	0x7e8a	; 0x7e8a <__fp_szero>
    7d1a:	08 95       	ret

00007d1c <__fixunssfsi>:
    7d1c:	0e 94 2a 3f 	call	0x7e54	; 0x7e54 <__fp_splitA>
    7d20:	88 f0       	brcs	.+34     	; 0x7d44 <__fixunssfsi+0x28>
    7d22:	9f 57       	subi	r25, 0x7F	; 127
    7d24:	98 f0       	brcs	.+38     	; 0x7d4c <__fixunssfsi+0x30>
    7d26:	b9 2f       	mov	r27, r25
    7d28:	99 27       	eor	r25, r25
    7d2a:	b7 51       	subi	r27, 0x17	; 23
    7d2c:	b0 f0       	brcs	.+44     	; 0x7d5a <__fixunssfsi+0x3e>
    7d2e:	e1 f0       	breq	.+56     	; 0x7d68 <__fixunssfsi+0x4c>
    7d30:	66 0f       	add	r22, r22
    7d32:	77 1f       	adc	r23, r23
    7d34:	88 1f       	adc	r24, r24
    7d36:	99 1f       	adc	r25, r25
    7d38:	1a f0       	brmi	.+6      	; 0x7d40 <__fixunssfsi+0x24>
    7d3a:	ba 95       	dec	r27
    7d3c:	c9 f7       	brne	.-14     	; 0x7d30 <__fixunssfsi+0x14>
    7d3e:	14 c0       	rjmp	.+40     	; 0x7d68 <__fixunssfsi+0x4c>
    7d40:	b1 30       	cpi	r27, 0x01	; 1
    7d42:	91 f0       	breq	.+36     	; 0x7d68 <__fixunssfsi+0x4c>
    7d44:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__fp_zero>
    7d48:	b1 e0       	ldi	r27, 0x01	; 1
    7d4a:	08 95       	ret
    7d4c:	0c 94 44 3f 	jmp	0x7e88	; 0x7e88 <__fp_zero>
    7d50:	67 2f       	mov	r22, r23
    7d52:	78 2f       	mov	r23, r24
    7d54:	88 27       	eor	r24, r24
    7d56:	b8 5f       	subi	r27, 0xF8	; 248
    7d58:	39 f0       	breq	.+14     	; 0x7d68 <__fixunssfsi+0x4c>
    7d5a:	b9 3f       	cpi	r27, 0xF9	; 249
    7d5c:	cc f3       	brlt	.-14     	; 0x7d50 <__fixunssfsi+0x34>
    7d5e:	86 95       	lsr	r24
    7d60:	77 95       	ror	r23
    7d62:	67 95       	ror	r22
    7d64:	b3 95       	inc	r27
    7d66:	d9 f7       	brne	.-10     	; 0x7d5e <__fixunssfsi+0x42>
    7d68:	3e f4       	brtc	.+14     	; 0x7d78 <__fixunssfsi+0x5c>
    7d6a:	90 95       	com	r25
    7d6c:	80 95       	com	r24
    7d6e:	70 95       	com	r23
    7d70:	61 95       	neg	r22
    7d72:	7f 4f       	sbci	r23, 0xFF	; 255
    7d74:	8f 4f       	sbci	r24, 0xFF	; 255
    7d76:	9f 4f       	sbci	r25, 0xFF	; 255
    7d78:	08 95       	ret

00007d7a <__floatunsisf>:
    7d7a:	e8 94       	clt
    7d7c:	09 c0       	rjmp	.+18     	; 0x7d90 <__floatsisf+0x12>

00007d7e <__floatsisf>:
    7d7e:	97 fb       	bst	r25, 7
    7d80:	3e f4       	brtc	.+14     	; 0x7d90 <__floatsisf+0x12>
    7d82:	90 95       	com	r25
    7d84:	80 95       	com	r24
    7d86:	70 95       	com	r23
    7d88:	61 95       	neg	r22
    7d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    7d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d90:	99 23       	and	r25, r25
    7d92:	a9 f0       	breq	.+42     	; 0x7dbe <__floatsisf+0x40>
    7d94:	f9 2f       	mov	r31, r25
    7d96:	96 e9       	ldi	r25, 0x96	; 150
    7d98:	bb 27       	eor	r27, r27
    7d9a:	93 95       	inc	r25
    7d9c:	f6 95       	lsr	r31
    7d9e:	87 95       	ror	r24
    7da0:	77 95       	ror	r23
    7da2:	67 95       	ror	r22
    7da4:	b7 95       	ror	r27
    7da6:	f1 11       	cpse	r31, r1
    7da8:	f8 cf       	rjmp	.-16     	; 0x7d9a <__floatsisf+0x1c>
    7daa:	fa f4       	brpl	.+62     	; 0x7dea <__floatsisf+0x6c>
    7dac:	bb 0f       	add	r27, r27
    7dae:	11 f4       	brne	.+4      	; 0x7db4 <__floatsisf+0x36>
    7db0:	60 ff       	sbrs	r22, 0
    7db2:	1b c0       	rjmp	.+54     	; 0x7dea <__floatsisf+0x6c>
    7db4:	6f 5f       	subi	r22, 0xFF	; 255
    7db6:	7f 4f       	sbci	r23, 0xFF	; 255
    7db8:	8f 4f       	sbci	r24, 0xFF	; 255
    7dba:	9f 4f       	sbci	r25, 0xFF	; 255
    7dbc:	16 c0       	rjmp	.+44     	; 0x7dea <__floatsisf+0x6c>
    7dbe:	88 23       	and	r24, r24
    7dc0:	11 f0       	breq	.+4      	; 0x7dc6 <__floatsisf+0x48>
    7dc2:	96 e9       	ldi	r25, 0x96	; 150
    7dc4:	11 c0       	rjmp	.+34     	; 0x7de8 <__floatsisf+0x6a>
    7dc6:	77 23       	and	r23, r23
    7dc8:	21 f0       	breq	.+8      	; 0x7dd2 <__floatsisf+0x54>
    7dca:	9e e8       	ldi	r25, 0x8E	; 142
    7dcc:	87 2f       	mov	r24, r23
    7dce:	76 2f       	mov	r23, r22
    7dd0:	05 c0       	rjmp	.+10     	; 0x7ddc <__floatsisf+0x5e>
    7dd2:	66 23       	and	r22, r22
    7dd4:	71 f0       	breq	.+28     	; 0x7df2 <__floatsisf+0x74>
    7dd6:	96 e8       	ldi	r25, 0x86	; 134
    7dd8:	86 2f       	mov	r24, r22
    7dda:	70 e0       	ldi	r23, 0x00	; 0
    7ddc:	60 e0       	ldi	r22, 0x00	; 0
    7dde:	2a f0       	brmi	.+10     	; 0x7dea <__floatsisf+0x6c>
    7de0:	9a 95       	dec	r25
    7de2:	66 0f       	add	r22, r22
    7de4:	77 1f       	adc	r23, r23
    7de6:	88 1f       	adc	r24, r24
    7de8:	da f7       	brpl	.-10     	; 0x7de0 <__floatsisf+0x62>
    7dea:	88 0f       	add	r24, r24
    7dec:	96 95       	lsr	r25
    7dee:	87 95       	ror	r24
    7df0:	97 f9       	bld	r25, 7
    7df2:	08 95       	ret

00007df4 <__fp_inf>:
    7df4:	97 f9       	bld	r25, 7
    7df6:	9f 67       	ori	r25, 0x7F	; 127
    7df8:	80 e8       	ldi	r24, 0x80	; 128
    7dfa:	70 e0       	ldi	r23, 0x00	; 0
    7dfc:	60 e0       	ldi	r22, 0x00	; 0
    7dfe:	08 95       	ret

00007e00 <__fp_nan>:
    7e00:	9f ef       	ldi	r25, 0xFF	; 255
    7e02:	80 ec       	ldi	r24, 0xC0	; 192
    7e04:	08 95       	ret

00007e06 <__fp_pscA>:
    7e06:	00 24       	eor	r0, r0
    7e08:	0a 94       	dec	r0
    7e0a:	16 16       	cp	r1, r22
    7e0c:	17 06       	cpc	r1, r23
    7e0e:	18 06       	cpc	r1, r24
    7e10:	09 06       	cpc	r0, r25
    7e12:	08 95       	ret

00007e14 <__fp_pscB>:
    7e14:	00 24       	eor	r0, r0
    7e16:	0a 94       	dec	r0
    7e18:	12 16       	cp	r1, r18
    7e1a:	13 06       	cpc	r1, r19
    7e1c:	14 06       	cpc	r1, r20
    7e1e:	05 06       	cpc	r0, r21
    7e20:	08 95       	ret

00007e22 <__fp_round>:
    7e22:	09 2e       	mov	r0, r25
    7e24:	03 94       	inc	r0
    7e26:	00 0c       	add	r0, r0
    7e28:	11 f4       	brne	.+4      	; 0x7e2e <__fp_round+0xc>
    7e2a:	88 23       	and	r24, r24
    7e2c:	52 f0       	brmi	.+20     	; 0x7e42 <__fp_round+0x20>
    7e2e:	bb 0f       	add	r27, r27
    7e30:	40 f4       	brcc	.+16     	; 0x7e42 <__fp_round+0x20>
    7e32:	bf 2b       	or	r27, r31
    7e34:	11 f4       	brne	.+4      	; 0x7e3a <__fp_round+0x18>
    7e36:	60 ff       	sbrs	r22, 0
    7e38:	04 c0       	rjmp	.+8      	; 0x7e42 <__fp_round+0x20>
    7e3a:	6f 5f       	subi	r22, 0xFF	; 255
    7e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    7e40:	9f 4f       	sbci	r25, 0xFF	; 255
    7e42:	08 95       	ret

00007e44 <__fp_split3>:
    7e44:	57 fd       	sbrc	r21, 7
    7e46:	90 58       	subi	r25, 0x80	; 128
    7e48:	44 0f       	add	r20, r20
    7e4a:	55 1f       	adc	r21, r21
    7e4c:	59 f0       	breq	.+22     	; 0x7e64 <__fp_splitA+0x10>
    7e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    7e50:	71 f0       	breq	.+28     	; 0x7e6e <__fp_splitA+0x1a>
    7e52:	47 95       	ror	r20

00007e54 <__fp_splitA>:
    7e54:	88 0f       	add	r24, r24
    7e56:	97 fb       	bst	r25, 7
    7e58:	99 1f       	adc	r25, r25
    7e5a:	61 f0       	breq	.+24     	; 0x7e74 <__fp_splitA+0x20>
    7e5c:	9f 3f       	cpi	r25, 0xFF	; 255
    7e5e:	79 f0       	breq	.+30     	; 0x7e7e <__fp_splitA+0x2a>
    7e60:	87 95       	ror	r24
    7e62:	08 95       	ret
    7e64:	12 16       	cp	r1, r18
    7e66:	13 06       	cpc	r1, r19
    7e68:	14 06       	cpc	r1, r20
    7e6a:	55 1f       	adc	r21, r21
    7e6c:	f2 cf       	rjmp	.-28     	; 0x7e52 <__fp_split3+0xe>
    7e6e:	46 95       	lsr	r20
    7e70:	f1 df       	rcall	.-30     	; 0x7e54 <__fp_splitA>
    7e72:	08 c0       	rjmp	.+16     	; 0x7e84 <__fp_splitA+0x30>
    7e74:	16 16       	cp	r1, r22
    7e76:	17 06       	cpc	r1, r23
    7e78:	18 06       	cpc	r1, r24
    7e7a:	99 1f       	adc	r25, r25
    7e7c:	f1 cf       	rjmp	.-30     	; 0x7e60 <__fp_splitA+0xc>
    7e7e:	86 95       	lsr	r24
    7e80:	71 05       	cpc	r23, r1
    7e82:	61 05       	cpc	r22, r1
    7e84:	08 94       	sec
    7e86:	08 95       	ret

00007e88 <__fp_zero>:
    7e88:	e8 94       	clt

00007e8a <__fp_szero>:
    7e8a:	bb 27       	eor	r27, r27
    7e8c:	66 27       	eor	r22, r22
    7e8e:	77 27       	eor	r23, r23
    7e90:	cb 01       	movw	r24, r22
    7e92:	97 f9       	bld	r25, 7
    7e94:	08 95       	ret

00007e96 <__mulsf3>:
    7e96:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3x>
    7e9a:	0c 94 11 3f 	jmp	0x7e22	; 0x7e22 <__fp_round>
    7e9e:	0e 94 03 3f 	call	0x7e06	; 0x7e06 <__fp_pscA>
    7ea2:	38 f0       	brcs	.+14     	; 0x7eb2 <__mulsf3+0x1c>
    7ea4:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__fp_pscB>
    7ea8:	20 f0       	brcs	.+8      	; 0x7eb2 <__mulsf3+0x1c>
    7eaa:	95 23       	and	r25, r21
    7eac:	11 f0       	breq	.+4      	; 0x7eb2 <__mulsf3+0x1c>
    7eae:	0c 94 fa 3e 	jmp	0x7df4	; 0x7df4 <__fp_inf>
    7eb2:	0c 94 00 3f 	jmp	0x7e00	; 0x7e00 <__fp_nan>
    7eb6:	11 24       	eor	r1, r1
    7eb8:	0c 94 45 3f 	jmp	0x7e8a	; 0x7e8a <__fp_szero>

00007ebc <__mulsf3x>:
    7ebc:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <__fp_split3>
    7ec0:	70 f3       	brcs	.-36     	; 0x7e9e <__mulsf3+0x8>

00007ec2 <__mulsf3_pse>:
    7ec2:	95 9f       	mul	r25, r21
    7ec4:	c1 f3       	breq	.-16     	; 0x7eb6 <__mulsf3+0x20>
    7ec6:	95 0f       	add	r25, r21
    7ec8:	50 e0       	ldi	r21, 0x00	; 0
    7eca:	55 1f       	adc	r21, r21
    7ecc:	62 9f       	mul	r22, r18
    7ece:	f0 01       	movw	r30, r0
    7ed0:	72 9f       	mul	r23, r18
    7ed2:	bb 27       	eor	r27, r27
    7ed4:	f0 0d       	add	r31, r0
    7ed6:	b1 1d       	adc	r27, r1
    7ed8:	63 9f       	mul	r22, r19
    7eda:	aa 27       	eor	r26, r26
    7edc:	f0 0d       	add	r31, r0
    7ede:	b1 1d       	adc	r27, r1
    7ee0:	aa 1f       	adc	r26, r26
    7ee2:	64 9f       	mul	r22, r20
    7ee4:	66 27       	eor	r22, r22
    7ee6:	b0 0d       	add	r27, r0
    7ee8:	a1 1d       	adc	r26, r1
    7eea:	66 1f       	adc	r22, r22
    7eec:	82 9f       	mul	r24, r18
    7eee:	22 27       	eor	r18, r18
    7ef0:	b0 0d       	add	r27, r0
    7ef2:	a1 1d       	adc	r26, r1
    7ef4:	62 1f       	adc	r22, r18
    7ef6:	73 9f       	mul	r23, r19
    7ef8:	b0 0d       	add	r27, r0
    7efa:	a1 1d       	adc	r26, r1
    7efc:	62 1f       	adc	r22, r18
    7efe:	83 9f       	mul	r24, r19
    7f00:	a0 0d       	add	r26, r0
    7f02:	61 1d       	adc	r22, r1
    7f04:	22 1f       	adc	r18, r18
    7f06:	74 9f       	mul	r23, r20
    7f08:	33 27       	eor	r19, r19
    7f0a:	a0 0d       	add	r26, r0
    7f0c:	61 1d       	adc	r22, r1
    7f0e:	23 1f       	adc	r18, r19
    7f10:	84 9f       	mul	r24, r20
    7f12:	60 0d       	add	r22, r0
    7f14:	21 1d       	adc	r18, r1
    7f16:	82 2f       	mov	r24, r18
    7f18:	76 2f       	mov	r23, r22
    7f1a:	6a 2f       	mov	r22, r26
    7f1c:	11 24       	eor	r1, r1
    7f1e:	9f 57       	subi	r25, 0x7F	; 127
    7f20:	50 40       	sbci	r21, 0x00	; 0
    7f22:	9a f0       	brmi	.+38     	; 0x7f4a <__mulsf3_pse+0x88>
    7f24:	f1 f0       	breq	.+60     	; 0x7f62 <__mulsf3_pse+0xa0>
    7f26:	88 23       	and	r24, r24
    7f28:	4a f0       	brmi	.+18     	; 0x7f3c <__mulsf3_pse+0x7a>
    7f2a:	ee 0f       	add	r30, r30
    7f2c:	ff 1f       	adc	r31, r31
    7f2e:	bb 1f       	adc	r27, r27
    7f30:	66 1f       	adc	r22, r22
    7f32:	77 1f       	adc	r23, r23
    7f34:	88 1f       	adc	r24, r24
    7f36:	91 50       	subi	r25, 0x01	; 1
    7f38:	50 40       	sbci	r21, 0x00	; 0
    7f3a:	a9 f7       	brne	.-22     	; 0x7f26 <__mulsf3_pse+0x64>
    7f3c:	9e 3f       	cpi	r25, 0xFE	; 254
    7f3e:	51 05       	cpc	r21, r1
    7f40:	80 f0       	brcs	.+32     	; 0x7f62 <__mulsf3_pse+0xa0>
    7f42:	0c 94 fa 3e 	jmp	0x7df4	; 0x7df4 <__fp_inf>
    7f46:	0c 94 45 3f 	jmp	0x7e8a	; 0x7e8a <__fp_szero>
    7f4a:	5f 3f       	cpi	r21, 0xFF	; 255
    7f4c:	e4 f3       	brlt	.-8      	; 0x7f46 <__mulsf3_pse+0x84>
    7f4e:	98 3e       	cpi	r25, 0xE8	; 232
    7f50:	d4 f3       	brlt	.-12     	; 0x7f46 <__mulsf3_pse+0x84>
    7f52:	86 95       	lsr	r24
    7f54:	77 95       	ror	r23
    7f56:	67 95       	ror	r22
    7f58:	b7 95       	ror	r27
    7f5a:	f7 95       	ror	r31
    7f5c:	e7 95       	ror	r30
    7f5e:	9f 5f       	subi	r25, 0xFF	; 255
    7f60:	c1 f7       	brne	.-16     	; 0x7f52 <__mulsf3_pse+0x90>
    7f62:	fe 2b       	or	r31, r30
    7f64:	88 0f       	add	r24, r24
    7f66:	91 1d       	adc	r25, r1
    7f68:	96 95       	lsr	r25
    7f6a:	87 95       	ror	r24
    7f6c:	97 f9       	bld	r25, 7
    7f6e:	08 95       	ret

00007f70 <__mulsi3>:
    7f70:	db 01       	movw	r26, r22
    7f72:	8f 93       	push	r24
    7f74:	9f 93       	push	r25
    7f76:	0e 94 09 40 	call	0x8012	; 0x8012 <__muluhisi3>
    7f7a:	bf 91       	pop	r27
    7f7c:	af 91       	pop	r26
    7f7e:	a2 9f       	mul	r26, r18
    7f80:	80 0d       	add	r24, r0
    7f82:	91 1d       	adc	r25, r1
    7f84:	a3 9f       	mul	r26, r19
    7f86:	90 0d       	add	r25, r0
    7f88:	b2 9f       	mul	r27, r18
    7f8a:	90 0d       	add	r25, r0
    7f8c:	11 24       	eor	r1, r1
    7f8e:	08 95       	ret

00007f90 <__udivmodsi4>:
    7f90:	a1 e2       	ldi	r26, 0x21	; 33
    7f92:	1a 2e       	mov	r1, r26
    7f94:	aa 1b       	sub	r26, r26
    7f96:	bb 1b       	sub	r27, r27
    7f98:	fd 01       	movw	r30, r26
    7f9a:	0d c0       	rjmp	.+26     	; 0x7fb6 <__udivmodsi4_ep>

00007f9c <__udivmodsi4_loop>:
    7f9c:	aa 1f       	adc	r26, r26
    7f9e:	bb 1f       	adc	r27, r27
    7fa0:	ee 1f       	adc	r30, r30
    7fa2:	ff 1f       	adc	r31, r31
    7fa4:	a2 17       	cp	r26, r18
    7fa6:	b3 07       	cpc	r27, r19
    7fa8:	e4 07       	cpc	r30, r20
    7faa:	f5 07       	cpc	r31, r21
    7fac:	20 f0       	brcs	.+8      	; 0x7fb6 <__udivmodsi4_ep>
    7fae:	a2 1b       	sub	r26, r18
    7fb0:	b3 0b       	sbc	r27, r19
    7fb2:	e4 0b       	sbc	r30, r20
    7fb4:	f5 0b       	sbc	r31, r21

00007fb6 <__udivmodsi4_ep>:
    7fb6:	66 1f       	adc	r22, r22
    7fb8:	77 1f       	adc	r23, r23
    7fba:	88 1f       	adc	r24, r24
    7fbc:	99 1f       	adc	r25, r25
    7fbe:	1a 94       	dec	r1
    7fc0:	69 f7       	brne	.-38     	; 0x7f9c <__udivmodsi4_loop>
    7fc2:	60 95       	com	r22
    7fc4:	70 95       	com	r23
    7fc6:	80 95       	com	r24
    7fc8:	90 95       	com	r25
    7fca:	9b 01       	movw	r18, r22
    7fcc:	ac 01       	movw	r20, r24
    7fce:	bd 01       	movw	r22, r26
    7fd0:	cf 01       	movw	r24, r30
    7fd2:	08 95       	ret

00007fd4 <__divmodsi4>:
    7fd4:	05 2e       	mov	r0, r21
    7fd6:	97 fb       	bst	r25, 7
    7fd8:	1e f4       	brtc	.+6      	; 0x7fe0 <__divmodsi4+0xc>
    7fda:	00 94       	com	r0
    7fdc:	0e 94 01 40 	call	0x8002	; 0x8002 <__negsi2>
    7fe0:	57 fd       	sbrc	r21, 7
    7fe2:	07 d0       	rcall	.+14     	; 0x7ff2 <__divmodsi4_neg2>
    7fe4:	0e 94 c8 3f 	call	0x7f90	; 0x7f90 <__udivmodsi4>
    7fe8:	07 fc       	sbrc	r0, 7
    7fea:	03 d0       	rcall	.+6      	; 0x7ff2 <__divmodsi4_neg2>
    7fec:	4e f4       	brtc	.+18     	; 0x8000 <__divmodsi4_exit>
    7fee:	0c 94 01 40 	jmp	0x8002	; 0x8002 <__negsi2>

00007ff2 <__divmodsi4_neg2>:
    7ff2:	50 95       	com	r21
    7ff4:	40 95       	com	r20
    7ff6:	30 95       	com	r19
    7ff8:	21 95       	neg	r18
    7ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    7ffc:	4f 4f       	sbci	r20, 0xFF	; 255
    7ffe:	5f 4f       	sbci	r21, 0xFF	; 255

00008000 <__divmodsi4_exit>:
    8000:	08 95       	ret

00008002 <__negsi2>:
    8002:	90 95       	com	r25
    8004:	80 95       	com	r24
    8006:	70 95       	com	r23
    8008:	61 95       	neg	r22
    800a:	7f 4f       	sbci	r23, 0xFF	; 255
    800c:	8f 4f       	sbci	r24, 0xFF	; 255
    800e:	9f 4f       	sbci	r25, 0xFF	; 255
    8010:	08 95       	ret

00008012 <__muluhisi3>:
    8012:	0e 94 14 40 	call	0x8028	; 0x8028 <__umulhisi3>
    8016:	a5 9f       	mul	r26, r21
    8018:	90 0d       	add	r25, r0
    801a:	b4 9f       	mul	r27, r20
    801c:	90 0d       	add	r25, r0
    801e:	a4 9f       	mul	r26, r20
    8020:	80 0d       	add	r24, r0
    8022:	91 1d       	adc	r25, r1
    8024:	11 24       	eor	r1, r1
    8026:	08 95       	ret

00008028 <__umulhisi3>:
    8028:	a2 9f       	mul	r26, r18
    802a:	b0 01       	movw	r22, r0
    802c:	b3 9f       	mul	r27, r19
    802e:	c0 01       	movw	r24, r0
    8030:	a3 9f       	mul	r26, r19
    8032:	70 0d       	add	r23, r0
    8034:	81 1d       	adc	r24, r1
    8036:	11 24       	eor	r1, r1
    8038:	91 1d       	adc	r25, r1
    803a:	b2 9f       	mul	r27, r18
    803c:	70 0d       	add	r23, r0
    803e:	81 1d       	adc	r24, r1
    8040:	11 24       	eor	r1, r1
    8042:	91 1d       	adc	r25, r1
    8044:	08 95       	ret

00008046 <atof>:
    8046:	66 27       	eor	r22, r22
    8048:	77 27       	eor	r23, r23
    804a:	0c 94 1e 43 	jmp	0x863c	; 0x863c <strtod>

0000804e <atol>:
    804e:	1f 93       	push	r17
    8050:	fc 01       	movw	r30, r24
    8052:	99 27       	eor	r25, r25
    8054:	88 27       	eor	r24, r24
    8056:	bc 01       	movw	r22, r24
    8058:	e8 94       	clt
    805a:	11 91       	ld	r17, Z+
    805c:	10 32       	cpi	r17, 0x20	; 32
    805e:	e9 f3       	breq	.-6      	; 0x805a <atol+0xc>
    8060:	19 30       	cpi	r17, 0x09	; 9
    8062:	10 f0       	brcs	.+4      	; 0x8068 <atol+0x1a>
    8064:	1e 30       	cpi	r17, 0x0E	; 14
    8066:	c8 f3       	brcs	.-14     	; 0x805a <atol+0xc>
    8068:	1b 32       	cpi	r17, 0x2B	; 43
    806a:	51 f0       	breq	.+20     	; 0x8080 <atol+0x32>
    806c:	1d 32       	cpi	r17, 0x2D	; 45
    806e:	49 f4       	brne	.+18     	; 0x8082 <atol+0x34>
    8070:	68 94       	set
    8072:	06 c0       	rjmp	.+12     	; 0x8080 <atol+0x32>
    8074:	0e 94 76 40 	call	0x80ec	; 0x80ec <__mulsi_const_10>
    8078:	61 0f       	add	r22, r17
    807a:	71 1d       	adc	r23, r1
    807c:	81 1d       	adc	r24, r1
    807e:	91 1d       	adc	r25, r1
    8080:	11 91       	ld	r17, Z+
    8082:	10 53       	subi	r17, 0x30	; 48
    8084:	1a 30       	cpi	r17, 0x0A	; 10
    8086:	b0 f3       	brcs	.-20     	; 0x8074 <atol+0x26>
    8088:	3e f4       	brtc	.+14     	; 0x8098 <atol+0x4a>
    808a:	90 95       	com	r25
    808c:	80 95       	com	r24
    808e:	70 95       	com	r23
    8090:	61 95       	neg	r22
    8092:	7f 4f       	sbci	r23, 0xFF	; 255
    8094:	8f 4f       	sbci	r24, 0xFF	; 255
    8096:	9f 4f       	sbci	r25, 0xFF	; 255
    8098:	1f 91       	pop	r17
    809a:	08 95       	ret

0000809c <strncmp>:
    809c:	fb 01       	movw	r30, r22
    809e:	dc 01       	movw	r26, r24
    80a0:	41 50       	subi	r20, 0x01	; 1
    80a2:	50 40       	sbci	r21, 0x00	; 0
    80a4:	30 f0       	brcs	.+12     	; 0x80b2 <strncmp+0x16>
    80a6:	8d 91       	ld	r24, X+
    80a8:	01 90       	ld	r0, Z+
    80aa:	80 19       	sub	r24, r0
    80ac:	19 f4       	brne	.+6      	; 0x80b4 <strncmp+0x18>
    80ae:	00 20       	and	r0, r0
    80b0:	b9 f7       	brne	.-18     	; 0x80a0 <strncmp+0x4>
    80b2:	88 1b       	sub	r24, r24
    80b4:	99 0b       	sbc	r25, r25
    80b6:	08 95       	ret

000080b8 <ltoa>:
    80b8:	25 32       	cpi	r18, 0x25	; 37
    80ba:	31 05       	cpc	r19, r1
    80bc:	20 f4       	brcc	.+8      	; 0x80c6 <ltoa+0xe>
    80be:	22 30       	cpi	r18, 0x02	; 2
    80c0:	10 f0       	brcs	.+4      	; 0x80c6 <ltoa+0xe>
    80c2:	0c 94 67 40 	jmp	0x80ce	; 0x80ce <__ltoa_ncheck>
    80c6:	fa 01       	movw	r30, r20
    80c8:	10 82       	st	Z, r1
    80ca:	ca 01       	movw	r24, r20
    80cc:	08 95       	ret

000080ce <__ltoa_ncheck>:
    80ce:	bb 27       	eor	r27, r27
    80d0:	2a 30       	cpi	r18, 0x0A	; 10
    80d2:	51 f4       	brne	.+20     	; 0x80e8 <__ltoa_ncheck+0x1a>
    80d4:	99 23       	and	r25, r25
    80d6:	42 f4       	brpl	.+16     	; 0x80e8 <__ltoa_ncheck+0x1a>
    80d8:	bd e2       	ldi	r27, 0x2D	; 45
    80da:	90 95       	com	r25
    80dc:	80 95       	com	r24
    80de:	70 95       	com	r23
    80e0:	61 95       	neg	r22
    80e2:	7f 4f       	sbci	r23, 0xFF	; 255
    80e4:	8f 4f       	sbci	r24, 0xFF	; 255
    80e6:	9f 4f       	sbci	r25, 0xFF	; 255
    80e8:	0c 94 8c 40 	jmp	0x8118	; 0x8118 <__ultoa_common>

000080ec <__mulsi_const_10>:
    80ec:	59 2f       	mov	r21, r25
    80ee:	48 2f       	mov	r20, r24
    80f0:	37 2f       	mov	r19, r23
    80f2:	26 2f       	mov	r18, r22
    80f4:	66 0f       	add	r22, r22
    80f6:	77 1f       	adc	r23, r23
    80f8:	88 1f       	adc	r24, r24
    80fa:	99 1f       	adc	r25, r25
    80fc:	66 0f       	add	r22, r22
    80fe:	77 1f       	adc	r23, r23
    8100:	88 1f       	adc	r24, r24
    8102:	99 1f       	adc	r25, r25
    8104:	62 0f       	add	r22, r18
    8106:	73 1f       	adc	r23, r19
    8108:	84 1f       	adc	r24, r20
    810a:	95 1f       	adc	r25, r21
    810c:	66 0f       	add	r22, r22
    810e:	77 1f       	adc	r23, r23
    8110:	88 1f       	adc	r24, r24
    8112:	99 1f       	adc	r25, r25
    8114:	08 95       	ret

00008116 <__ultoa_ncheck>:
    8116:	bb 27       	eor	r27, r27

00008118 <__ultoa_common>:
    8118:	fa 01       	movw	r30, r20
    811a:	a6 2f       	mov	r26, r22
    811c:	62 17       	cp	r22, r18
    811e:	71 05       	cpc	r23, r1
    8120:	81 05       	cpc	r24, r1
    8122:	91 05       	cpc	r25, r1
    8124:	33 0b       	sbc	r19, r19
    8126:	30 fb       	bst	r19, 0
    8128:	66 f0       	brts	.+24     	; 0x8142 <__ultoa_common+0x2a>
    812a:	aa 27       	eor	r26, r26
    812c:	66 0f       	add	r22, r22
    812e:	77 1f       	adc	r23, r23
    8130:	88 1f       	adc	r24, r24
    8132:	99 1f       	adc	r25, r25
    8134:	aa 1f       	adc	r26, r26
    8136:	a2 17       	cp	r26, r18
    8138:	10 f0       	brcs	.+4      	; 0x813e <__ultoa_common+0x26>
    813a:	a2 1b       	sub	r26, r18
    813c:	63 95       	inc	r22
    813e:	38 50       	subi	r19, 0x08	; 8
    8140:	a9 f7       	brne	.-22     	; 0x812c <__ultoa_common+0x14>
    8142:	a0 5d       	subi	r26, 0xD0	; 208
    8144:	aa 33       	cpi	r26, 0x3A	; 58
    8146:	08 f0       	brcs	.+2      	; 0x814a <__ultoa_common+0x32>
    8148:	a9 5d       	subi	r26, 0xD9	; 217
    814a:	a1 93       	st	Z+, r26
    814c:	36 f7       	brtc	.-52     	; 0x811a <__ultoa_common+0x2>
    814e:	b1 11       	cpse	r27, r1
    8150:	b1 93       	st	Z+, r27
    8152:	10 82       	st	Z, r1
    8154:	ca 01       	movw	r24, r20
    8156:	0c 94 b1 44 	jmp	0x8962	; 0x8962 <strrev>

0000815a <printf>:
    815a:	cf 93       	push	r28
    815c:	df 93       	push	r29
    815e:	cd b7       	in	r28, 0x3d	; 61
    8160:	de b7       	in	r29, 0x3e	; 62
    8162:	ae 01       	movw	r20, r28
    8164:	4a 5f       	subi	r20, 0xFA	; 250
    8166:	5f 4f       	sbci	r21, 0xFF	; 255
    8168:	fa 01       	movw	r30, r20
    816a:	61 91       	ld	r22, Z+
    816c:	71 91       	ld	r23, Z+
    816e:	af 01       	movw	r20, r30
    8170:	80 91 bd 29 	lds	r24, 0x29BD	; 0x8029bd <__iob+0x2>
    8174:	90 91 be 29 	lds	r25, 0x29BE	; 0x8029be <__iob+0x3>
    8178:	0e 94 1a 41 	call	0x8234	; 0x8234 <vfprintf>
    817c:	df 91       	pop	r29
    817e:	cf 91       	pop	r28
    8180:	08 95       	ret

00008182 <puts>:
    8182:	0f 93       	push	r16
    8184:	1f 93       	push	r17
    8186:	cf 93       	push	r28
    8188:	df 93       	push	r29
    818a:	e0 91 bd 29 	lds	r30, 0x29BD	; 0x8029bd <__iob+0x2>
    818e:	f0 91 be 29 	lds	r31, 0x29BE	; 0x8029be <__iob+0x3>
    8192:	23 81       	ldd	r18, Z+3	; 0x03
    8194:	21 ff       	sbrs	r18, 1
    8196:	1b c0       	rjmp	.+54     	; 0x81ce <puts+0x4c>
    8198:	8c 01       	movw	r16, r24
    819a:	d0 e0       	ldi	r29, 0x00	; 0
    819c:	c0 e0       	ldi	r28, 0x00	; 0
    819e:	f8 01       	movw	r30, r16
    81a0:	81 91       	ld	r24, Z+
    81a2:	8f 01       	movw	r16, r30
    81a4:	60 91 bd 29 	lds	r22, 0x29BD	; 0x8029bd <__iob+0x2>
    81a8:	70 91 be 29 	lds	r23, 0x29BE	; 0x8029be <__iob+0x3>
    81ac:	db 01       	movw	r26, r22
    81ae:	18 96       	adiw	r26, 0x08	; 8
    81b0:	ed 91       	ld	r30, X+
    81b2:	fc 91       	ld	r31, X
    81b4:	19 97       	sbiw	r26, 0x09	; 9
    81b6:	88 23       	and	r24, r24
    81b8:	31 f0       	breq	.+12     	; 0x81c6 <puts+0x44>
    81ba:	19 95       	eicall
    81bc:	89 2b       	or	r24, r25
    81be:	79 f3       	breq	.-34     	; 0x819e <puts+0x1c>
    81c0:	df ef       	ldi	r29, 0xFF	; 255
    81c2:	cf ef       	ldi	r28, 0xFF	; 255
    81c4:	ec cf       	rjmp	.-40     	; 0x819e <puts+0x1c>
    81c6:	8a e0       	ldi	r24, 0x0A	; 10
    81c8:	19 95       	eicall
    81ca:	89 2b       	or	r24, r25
    81cc:	19 f0       	breq	.+6      	; 0x81d4 <puts+0x52>
    81ce:	8f ef       	ldi	r24, 0xFF	; 255
    81d0:	9f ef       	ldi	r25, 0xFF	; 255
    81d2:	02 c0       	rjmp	.+4      	; 0x81d8 <puts+0x56>
    81d4:	8d 2f       	mov	r24, r29
    81d6:	9c 2f       	mov	r25, r28
    81d8:	df 91       	pop	r29
    81da:	cf 91       	pop	r28
    81dc:	1f 91       	pop	r17
    81de:	0f 91       	pop	r16
    81e0:	08 95       	ret

000081e2 <sprintf>:
    81e2:	0f 93       	push	r16
    81e4:	1f 93       	push	r17
    81e6:	cf 93       	push	r28
    81e8:	df 93       	push	r29
    81ea:	cd b7       	in	r28, 0x3d	; 61
    81ec:	de b7       	in	r29, 0x3e	; 62
    81ee:	2e 97       	sbiw	r28, 0x0e	; 14
    81f0:	cd bf       	out	0x3d, r28	; 61
    81f2:	de bf       	out	0x3e, r29	; 62
    81f4:	0e 89       	ldd	r16, Y+22	; 0x16
    81f6:	1f 89       	ldd	r17, Y+23	; 0x17
    81f8:	86 e0       	ldi	r24, 0x06	; 6
    81fa:	8c 83       	std	Y+4, r24	; 0x04
    81fc:	09 83       	std	Y+1, r16	; 0x01
    81fe:	1a 83       	std	Y+2, r17	; 0x02
    8200:	8f ef       	ldi	r24, 0xFF	; 255
    8202:	9f e7       	ldi	r25, 0x7F	; 127
    8204:	8d 83       	std	Y+5, r24	; 0x05
    8206:	9e 83       	std	Y+6, r25	; 0x06
    8208:	ae 01       	movw	r20, r28
    820a:	46 5e       	subi	r20, 0xE6	; 230
    820c:	5f 4f       	sbci	r21, 0xFF	; 255
    820e:	68 8d       	ldd	r22, Y+24	; 0x18
    8210:	79 8d       	ldd	r23, Y+25	; 0x19
    8212:	ce 01       	movw	r24, r28
    8214:	01 96       	adiw	r24, 0x01	; 1
    8216:	0e 94 1a 41 	call	0x8234	; 0x8234 <vfprintf>
    821a:	ef 81       	ldd	r30, Y+7	; 0x07
    821c:	f8 85       	ldd	r31, Y+8	; 0x08
    821e:	e0 0f       	add	r30, r16
    8220:	f1 1f       	adc	r31, r17
    8222:	10 82       	st	Z, r1
    8224:	2e 96       	adiw	r28, 0x0e	; 14
    8226:	cd bf       	out	0x3d, r28	; 61
    8228:	de bf       	out	0x3e, r29	; 62
    822a:	df 91       	pop	r29
    822c:	cf 91       	pop	r28
    822e:	1f 91       	pop	r17
    8230:	0f 91       	pop	r16
    8232:	08 95       	ret

00008234 <vfprintf>:
    8234:	2f 92       	push	r2
    8236:	3f 92       	push	r3
    8238:	4f 92       	push	r4
    823a:	5f 92       	push	r5
    823c:	6f 92       	push	r6
    823e:	7f 92       	push	r7
    8240:	8f 92       	push	r8
    8242:	9f 92       	push	r9
    8244:	af 92       	push	r10
    8246:	bf 92       	push	r11
    8248:	cf 92       	push	r12
    824a:	df 92       	push	r13
    824c:	ef 92       	push	r14
    824e:	ff 92       	push	r15
    8250:	0f 93       	push	r16
    8252:	1f 93       	push	r17
    8254:	cf 93       	push	r28
    8256:	df 93       	push	r29
    8258:	cd b7       	in	r28, 0x3d	; 61
    825a:	de b7       	in	r29, 0x3e	; 62
    825c:	2b 97       	sbiw	r28, 0x0b	; 11
    825e:	cd bf       	out	0x3d, r28	; 61
    8260:	de bf       	out	0x3e, r29	; 62
    8262:	6c 01       	movw	r12, r24
    8264:	7b 01       	movw	r14, r22
    8266:	8a 01       	movw	r16, r20
    8268:	fc 01       	movw	r30, r24
    826a:	16 82       	std	Z+6, r1	; 0x06
    826c:	17 82       	std	Z+7, r1	; 0x07
    826e:	83 81       	ldd	r24, Z+3	; 0x03
    8270:	81 ff       	sbrs	r24, 1
    8272:	cc c1       	rjmp	.+920    	; 0x860c <vfprintf+0x3d8>
    8274:	ce 01       	movw	r24, r28
    8276:	01 96       	adiw	r24, 0x01	; 1
    8278:	3c 01       	movw	r6, r24
    827a:	f6 01       	movw	r30, r12
    827c:	93 81       	ldd	r25, Z+3	; 0x03
    827e:	f7 01       	movw	r30, r14
    8280:	93 fd       	sbrc	r25, 3
    8282:	85 91       	lpm	r24, Z+
    8284:	93 ff       	sbrs	r25, 3
    8286:	81 91       	ld	r24, Z+
    8288:	7f 01       	movw	r14, r30
    828a:	88 23       	and	r24, r24
    828c:	09 f4       	brne	.+2      	; 0x8290 <vfprintf+0x5c>
    828e:	ba c1       	rjmp	.+884    	; 0x8604 <vfprintf+0x3d0>
    8290:	85 32       	cpi	r24, 0x25	; 37
    8292:	39 f4       	brne	.+14     	; 0x82a2 <vfprintf+0x6e>
    8294:	93 fd       	sbrc	r25, 3
    8296:	85 91       	lpm	r24, Z+
    8298:	93 ff       	sbrs	r25, 3
    829a:	81 91       	ld	r24, Z+
    829c:	7f 01       	movw	r14, r30
    829e:	85 32       	cpi	r24, 0x25	; 37
    82a0:	29 f4       	brne	.+10     	; 0x82ac <vfprintf+0x78>
    82a2:	b6 01       	movw	r22, r12
    82a4:	90 e0       	ldi	r25, 0x00	; 0
    82a6:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    82aa:	e7 cf       	rjmp	.-50     	; 0x827a <vfprintf+0x46>
    82ac:	91 2c       	mov	r9, r1
    82ae:	21 2c       	mov	r2, r1
    82b0:	31 2c       	mov	r3, r1
    82b2:	ff e1       	ldi	r31, 0x1F	; 31
    82b4:	f3 15       	cp	r31, r3
    82b6:	d8 f0       	brcs	.+54     	; 0x82ee <vfprintf+0xba>
    82b8:	8b 32       	cpi	r24, 0x2B	; 43
    82ba:	79 f0       	breq	.+30     	; 0x82da <vfprintf+0xa6>
    82bc:	38 f4       	brcc	.+14     	; 0x82cc <vfprintf+0x98>
    82be:	80 32       	cpi	r24, 0x20	; 32
    82c0:	79 f0       	breq	.+30     	; 0x82e0 <vfprintf+0xac>
    82c2:	83 32       	cpi	r24, 0x23	; 35
    82c4:	a1 f4       	brne	.+40     	; 0x82ee <vfprintf+0xba>
    82c6:	23 2d       	mov	r18, r3
    82c8:	20 61       	ori	r18, 0x10	; 16
    82ca:	1d c0       	rjmp	.+58     	; 0x8306 <vfprintf+0xd2>
    82cc:	8d 32       	cpi	r24, 0x2D	; 45
    82ce:	61 f0       	breq	.+24     	; 0x82e8 <vfprintf+0xb4>
    82d0:	80 33       	cpi	r24, 0x30	; 48
    82d2:	69 f4       	brne	.+26     	; 0x82ee <vfprintf+0xba>
    82d4:	23 2d       	mov	r18, r3
    82d6:	21 60       	ori	r18, 0x01	; 1
    82d8:	16 c0       	rjmp	.+44     	; 0x8306 <vfprintf+0xd2>
    82da:	83 2d       	mov	r24, r3
    82dc:	82 60       	ori	r24, 0x02	; 2
    82de:	38 2e       	mov	r3, r24
    82e0:	e3 2d       	mov	r30, r3
    82e2:	e4 60       	ori	r30, 0x04	; 4
    82e4:	3e 2e       	mov	r3, r30
    82e6:	2a c0       	rjmp	.+84     	; 0x833c <vfprintf+0x108>
    82e8:	f3 2d       	mov	r31, r3
    82ea:	f8 60       	ori	r31, 0x08	; 8
    82ec:	1d c0       	rjmp	.+58     	; 0x8328 <vfprintf+0xf4>
    82ee:	37 fc       	sbrc	r3, 7
    82f0:	2d c0       	rjmp	.+90     	; 0x834c <vfprintf+0x118>
    82f2:	20 ed       	ldi	r18, 0xD0	; 208
    82f4:	28 0f       	add	r18, r24
    82f6:	2a 30       	cpi	r18, 0x0A	; 10
    82f8:	40 f0       	brcs	.+16     	; 0x830a <vfprintf+0xd6>
    82fa:	8e 32       	cpi	r24, 0x2E	; 46
    82fc:	b9 f4       	brne	.+46     	; 0x832c <vfprintf+0xf8>
    82fe:	36 fc       	sbrc	r3, 6
    8300:	81 c1       	rjmp	.+770    	; 0x8604 <vfprintf+0x3d0>
    8302:	23 2d       	mov	r18, r3
    8304:	20 64       	ori	r18, 0x40	; 64
    8306:	32 2e       	mov	r3, r18
    8308:	19 c0       	rjmp	.+50     	; 0x833c <vfprintf+0x108>
    830a:	36 fe       	sbrs	r3, 6
    830c:	06 c0       	rjmp	.+12     	; 0x831a <vfprintf+0xe6>
    830e:	8a e0       	ldi	r24, 0x0A	; 10
    8310:	98 9e       	mul	r9, r24
    8312:	20 0d       	add	r18, r0
    8314:	11 24       	eor	r1, r1
    8316:	92 2e       	mov	r9, r18
    8318:	11 c0       	rjmp	.+34     	; 0x833c <vfprintf+0x108>
    831a:	ea e0       	ldi	r30, 0x0A	; 10
    831c:	2e 9e       	mul	r2, r30
    831e:	20 0d       	add	r18, r0
    8320:	11 24       	eor	r1, r1
    8322:	22 2e       	mov	r2, r18
    8324:	f3 2d       	mov	r31, r3
    8326:	f0 62       	ori	r31, 0x20	; 32
    8328:	3f 2e       	mov	r3, r31
    832a:	08 c0       	rjmp	.+16     	; 0x833c <vfprintf+0x108>
    832c:	8c 36       	cpi	r24, 0x6C	; 108
    832e:	21 f4       	brne	.+8      	; 0x8338 <vfprintf+0x104>
    8330:	83 2d       	mov	r24, r3
    8332:	80 68       	ori	r24, 0x80	; 128
    8334:	38 2e       	mov	r3, r24
    8336:	02 c0       	rjmp	.+4      	; 0x833c <vfprintf+0x108>
    8338:	88 36       	cpi	r24, 0x68	; 104
    833a:	41 f4       	brne	.+16     	; 0x834c <vfprintf+0x118>
    833c:	f7 01       	movw	r30, r14
    833e:	93 fd       	sbrc	r25, 3
    8340:	85 91       	lpm	r24, Z+
    8342:	93 ff       	sbrs	r25, 3
    8344:	81 91       	ld	r24, Z+
    8346:	7f 01       	movw	r14, r30
    8348:	81 11       	cpse	r24, r1
    834a:	b3 cf       	rjmp	.-154    	; 0x82b2 <vfprintf+0x7e>
    834c:	98 2f       	mov	r25, r24
    834e:	9f 7d       	andi	r25, 0xDF	; 223
    8350:	95 54       	subi	r25, 0x45	; 69
    8352:	93 30       	cpi	r25, 0x03	; 3
    8354:	28 f4       	brcc	.+10     	; 0x8360 <vfprintf+0x12c>
    8356:	0c 5f       	subi	r16, 0xFC	; 252
    8358:	1f 4f       	sbci	r17, 0xFF	; 255
    835a:	9f e3       	ldi	r25, 0x3F	; 63
    835c:	99 83       	std	Y+1, r25	; 0x01
    835e:	0d c0       	rjmp	.+26     	; 0x837a <vfprintf+0x146>
    8360:	83 36       	cpi	r24, 0x63	; 99
    8362:	31 f0       	breq	.+12     	; 0x8370 <vfprintf+0x13c>
    8364:	83 37       	cpi	r24, 0x73	; 115
    8366:	71 f0       	breq	.+28     	; 0x8384 <vfprintf+0x150>
    8368:	83 35       	cpi	r24, 0x53	; 83
    836a:	09 f0       	breq	.+2      	; 0x836e <vfprintf+0x13a>
    836c:	59 c0       	rjmp	.+178    	; 0x8420 <vfprintf+0x1ec>
    836e:	21 c0       	rjmp	.+66     	; 0x83b2 <vfprintf+0x17e>
    8370:	f8 01       	movw	r30, r16
    8372:	80 81       	ld	r24, Z
    8374:	89 83       	std	Y+1, r24	; 0x01
    8376:	0e 5f       	subi	r16, 0xFE	; 254
    8378:	1f 4f       	sbci	r17, 0xFF	; 255
    837a:	88 24       	eor	r8, r8
    837c:	83 94       	inc	r8
    837e:	91 2c       	mov	r9, r1
    8380:	53 01       	movw	r10, r6
    8382:	13 c0       	rjmp	.+38     	; 0x83aa <vfprintf+0x176>
    8384:	28 01       	movw	r4, r16
    8386:	f2 e0       	ldi	r31, 0x02	; 2
    8388:	4f 0e       	add	r4, r31
    838a:	51 1c       	adc	r5, r1
    838c:	f8 01       	movw	r30, r16
    838e:	a0 80       	ld	r10, Z
    8390:	b1 80       	ldd	r11, Z+1	; 0x01
    8392:	36 fe       	sbrs	r3, 6
    8394:	03 c0       	rjmp	.+6      	; 0x839c <vfprintf+0x168>
    8396:	69 2d       	mov	r22, r9
    8398:	70 e0       	ldi	r23, 0x00	; 0
    839a:	02 c0       	rjmp	.+4      	; 0x83a0 <vfprintf+0x16c>
    839c:	6f ef       	ldi	r22, 0xFF	; 255
    839e:	7f ef       	ldi	r23, 0xFF	; 255
    83a0:	c5 01       	movw	r24, r10
    83a2:	0e 94 a6 44 	call	0x894c	; 0x894c <strnlen>
    83a6:	4c 01       	movw	r8, r24
    83a8:	82 01       	movw	r16, r4
    83aa:	f3 2d       	mov	r31, r3
    83ac:	ff 77       	andi	r31, 0x7F	; 127
    83ae:	3f 2e       	mov	r3, r31
    83b0:	16 c0       	rjmp	.+44     	; 0x83de <vfprintf+0x1aa>
    83b2:	28 01       	movw	r4, r16
    83b4:	22 e0       	ldi	r18, 0x02	; 2
    83b6:	42 0e       	add	r4, r18
    83b8:	51 1c       	adc	r5, r1
    83ba:	f8 01       	movw	r30, r16
    83bc:	a0 80       	ld	r10, Z
    83be:	b1 80       	ldd	r11, Z+1	; 0x01
    83c0:	36 fe       	sbrs	r3, 6
    83c2:	03 c0       	rjmp	.+6      	; 0x83ca <vfprintf+0x196>
    83c4:	69 2d       	mov	r22, r9
    83c6:	70 e0       	ldi	r23, 0x00	; 0
    83c8:	02 c0       	rjmp	.+4      	; 0x83ce <vfprintf+0x19a>
    83ca:	6f ef       	ldi	r22, 0xFF	; 255
    83cc:	7f ef       	ldi	r23, 0xFF	; 255
    83ce:	c5 01       	movw	r24, r10
    83d0:	0e 94 9b 44 	call	0x8936	; 0x8936 <strnlen_P>
    83d4:	4c 01       	movw	r8, r24
    83d6:	f3 2d       	mov	r31, r3
    83d8:	f0 68       	ori	r31, 0x80	; 128
    83da:	3f 2e       	mov	r3, r31
    83dc:	82 01       	movw	r16, r4
    83de:	33 fc       	sbrc	r3, 3
    83e0:	1b c0       	rjmp	.+54     	; 0x8418 <vfprintf+0x1e4>
    83e2:	82 2d       	mov	r24, r2
    83e4:	90 e0       	ldi	r25, 0x00	; 0
    83e6:	88 16       	cp	r8, r24
    83e8:	99 06       	cpc	r9, r25
    83ea:	b0 f4       	brcc	.+44     	; 0x8418 <vfprintf+0x1e4>
    83ec:	b6 01       	movw	r22, r12
    83ee:	80 e2       	ldi	r24, 0x20	; 32
    83f0:	90 e0       	ldi	r25, 0x00	; 0
    83f2:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    83f6:	2a 94       	dec	r2
    83f8:	f4 cf       	rjmp	.-24     	; 0x83e2 <vfprintf+0x1ae>
    83fa:	f5 01       	movw	r30, r10
    83fc:	37 fc       	sbrc	r3, 7
    83fe:	85 91       	lpm	r24, Z+
    8400:	37 fe       	sbrs	r3, 7
    8402:	81 91       	ld	r24, Z+
    8404:	5f 01       	movw	r10, r30
    8406:	b6 01       	movw	r22, r12
    8408:	90 e0       	ldi	r25, 0x00	; 0
    840a:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    840e:	21 10       	cpse	r2, r1
    8410:	2a 94       	dec	r2
    8412:	21 e0       	ldi	r18, 0x01	; 1
    8414:	82 1a       	sub	r8, r18
    8416:	91 08       	sbc	r9, r1
    8418:	81 14       	cp	r8, r1
    841a:	91 04       	cpc	r9, r1
    841c:	71 f7       	brne	.-36     	; 0x83fa <vfprintf+0x1c6>
    841e:	e8 c0       	rjmp	.+464    	; 0x85f0 <vfprintf+0x3bc>
    8420:	84 36       	cpi	r24, 0x64	; 100
    8422:	11 f0       	breq	.+4      	; 0x8428 <vfprintf+0x1f4>
    8424:	89 36       	cpi	r24, 0x69	; 105
    8426:	41 f5       	brne	.+80     	; 0x8478 <vfprintf+0x244>
    8428:	f8 01       	movw	r30, r16
    842a:	37 fe       	sbrs	r3, 7
    842c:	07 c0       	rjmp	.+14     	; 0x843c <vfprintf+0x208>
    842e:	60 81       	ld	r22, Z
    8430:	71 81       	ldd	r23, Z+1	; 0x01
    8432:	82 81       	ldd	r24, Z+2	; 0x02
    8434:	93 81       	ldd	r25, Z+3	; 0x03
    8436:	0c 5f       	subi	r16, 0xFC	; 252
    8438:	1f 4f       	sbci	r17, 0xFF	; 255
    843a:	08 c0       	rjmp	.+16     	; 0x844c <vfprintf+0x218>
    843c:	60 81       	ld	r22, Z
    843e:	71 81       	ldd	r23, Z+1	; 0x01
    8440:	07 2e       	mov	r0, r23
    8442:	00 0c       	add	r0, r0
    8444:	88 0b       	sbc	r24, r24
    8446:	99 0b       	sbc	r25, r25
    8448:	0e 5f       	subi	r16, 0xFE	; 254
    844a:	1f 4f       	sbci	r17, 0xFF	; 255
    844c:	f3 2d       	mov	r31, r3
    844e:	ff 76       	andi	r31, 0x6F	; 111
    8450:	3f 2e       	mov	r3, r31
    8452:	97 ff       	sbrs	r25, 7
    8454:	09 c0       	rjmp	.+18     	; 0x8468 <vfprintf+0x234>
    8456:	90 95       	com	r25
    8458:	80 95       	com	r24
    845a:	70 95       	com	r23
    845c:	61 95       	neg	r22
    845e:	7f 4f       	sbci	r23, 0xFF	; 255
    8460:	8f 4f       	sbci	r24, 0xFF	; 255
    8462:	9f 4f       	sbci	r25, 0xFF	; 255
    8464:	f0 68       	ori	r31, 0x80	; 128
    8466:	3f 2e       	mov	r3, r31
    8468:	2a e0       	ldi	r18, 0x0A	; 10
    846a:	30 e0       	ldi	r19, 0x00	; 0
    846c:	a3 01       	movw	r20, r6
    846e:	0e 94 fd 44 	call	0x89fa	; 0x89fa <__ultoa_invert>
    8472:	88 2e       	mov	r8, r24
    8474:	86 18       	sub	r8, r6
    8476:	45 c0       	rjmp	.+138    	; 0x8502 <vfprintf+0x2ce>
    8478:	85 37       	cpi	r24, 0x75	; 117
    847a:	31 f4       	brne	.+12     	; 0x8488 <vfprintf+0x254>
    847c:	23 2d       	mov	r18, r3
    847e:	2f 7e       	andi	r18, 0xEF	; 239
    8480:	b2 2e       	mov	r11, r18
    8482:	2a e0       	ldi	r18, 0x0A	; 10
    8484:	30 e0       	ldi	r19, 0x00	; 0
    8486:	25 c0       	rjmp	.+74     	; 0x84d2 <vfprintf+0x29e>
    8488:	93 2d       	mov	r25, r3
    848a:	99 7f       	andi	r25, 0xF9	; 249
    848c:	b9 2e       	mov	r11, r25
    848e:	8f 36       	cpi	r24, 0x6F	; 111
    8490:	c1 f0       	breq	.+48     	; 0x84c2 <vfprintf+0x28e>
    8492:	18 f4       	brcc	.+6      	; 0x849a <vfprintf+0x266>
    8494:	88 35       	cpi	r24, 0x58	; 88
    8496:	79 f0       	breq	.+30     	; 0x84b6 <vfprintf+0x282>
    8498:	b5 c0       	rjmp	.+362    	; 0x8604 <vfprintf+0x3d0>
    849a:	80 37       	cpi	r24, 0x70	; 112
    849c:	19 f0       	breq	.+6      	; 0x84a4 <vfprintf+0x270>
    849e:	88 37       	cpi	r24, 0x78	; 120
    84a0:	21 f0       	breq	.+8      	; 0x84aa <vfprintf+0x276>
    84a2:	b0 c0       	rjmp	.+352    	; 0x8604 <vfprintf+0x3d0>
    84a4:	e9 2f       	mov	r30, r25
    84a6:	e0 61       	ori	r30, 0x10	; 16
    84a8:	be 2e       	mov	r11, r30
    84aa:	b4 fe       	sbrs	r11, 4
    84ac:	0d c0       	rjmp	.+26     	; 0x84c8 <vfprintf+0x294>
    84ae:	fb 2d       	mov	r31, r11
    84b0:	f4 60       	ori	r31, 0x04	; 4
    84b2:	bf 2e       	mov	r11, r31
    84b4:	09 c0       	rjmp	.+18     	; 0x84c8 <vfprintf+0x294>
    84b6:	34 fe       	sbrs	r3, 4
    84b8:	0a c0       	rjmp	.+20     	; 0x84ce <vfprintf+0x29a>
    84ba:	29 2f       	mov	r18, r25
    84bc:	26 60       	ori	r18, 0x06	; 6
    84be:	b2 2e       	mov	r11, r18
    84c0:	06 c0       	rjmp	.+12     	; 0x84ce <vfprintf+0x29a>
    84c2:	28 e0       	ldi	r18, 0x08	; 8
    84c4:	30 e0       	ldi	r19, 0x00	; 0
    84c6:	05 c0       	rjmp	.+10     	; 0x84d2 <vfprintf+0x29e>
    84c8:	20 e1       	ldi	r18, 0x10	; 16
    84ca:	30 e0       	ldi	r19, 0x00	; 0
    84cc:	02 c0       	rjmp	.+4      	; 0x84d2 <vfprintf+0x29e>
    84ce:	20 e1       	ldi	r18, 0x10	; 16
    84d0:	32 e0       	ldi	r19, 0x02	; 2
    84d2:	f8 01       	movw	r30, r16
    84d4:	b7 fe       	sbrs	r11, 7
    84d6:	07 c0       	rjmp	.+14     	; 0x84e6 <vfprintf+0x2b2>
    84d8:	60 81       	ld	r22, Z
    84da:	71 81       	ldd	r23, Z+1	; 0x01
    84dc:	82 81       	ldd	r24, Z+2	; 0x02
    84de:	93 81       	ldd	r25, Z+3	; 0x03
    84e0:	0c 5f       	subi	r16, 0xFC	; 252
    84e2:	1f 4f       	sbci	r17, 0xFF	; 255
    84e4:	06 c0       	rjmp	.+12     	; 0x84f2 <vfprintf+0x2be>
    84e6:	60 81       	ld	r22, Z
    84e8:	71 81       	ldd	r23, Z+1	; 0x01
    84ea:	80 e0       	ldi	r24, 0x00	; 0
    84ec:	90 e0       	ldi	r25, 0x00	; 0
    84ee:	0e 5f       	subi	r16, 0xFE	; 254
    84f0:	1f 4f       	sbci	r17, 0xFF	; 255
    84f2:	a3 01       	movw	r20, r6
    84f4:	0e 94 fd 44 	call	0x89fa	; 0x89fa <__ultoa_invert>
    84f8:	88 2e       	mov	r8, r24
    84fa:	86 18       	sub	r8, r6
    84fc:	fb 2d       	mov	r31, r11
    84fe:	ff 77       	andi	r31, 0x7F	; 127
    8500:	3f 2e       	mov	r3, r31
    8502:	36 fe       	sbrs	r3, 6
    8504:	0d c0       	rjmp	.+26     	; 0x8520 <vfprintf+0x2ec>
    8506:	23 2d       	mov	r18, r3
    8508:	2e 7f       	andi	r18, 0xFE	; 254
    850a:	a2 2e       	mov	r10, r18
    850c:	89 14       	cp	r8, r9
    850e:	58 f4       	brcc	.+22     	; 0x8526 <vfprintf+0x2f2>
    8510:	34 fe       	sbrs	r3, 4
    8512:	0b c0       	rjmp	.+22     	; 0x852a <vfprintf+0x2f6>
    8514:	32 fc       	sbrc	r3, 2
    8516:	09 c0       	rjmp	.+18     	; 0x852a <vfprintf+0x2f6>
    8518:	83 2d       	mov	r24, r3
    851a:	8e 7e       	andi	r24, 0xEE	; 238
    851c:	a8 2e       	mov	r10, r24
    851e:	05 c0       	rjmp	.+10     	; 0x852a <vfprintf+0x2f6>
    8520:	b8 2c       	mov	r11, r8
    8522:	a3 2c       	mov	r10, r3
    8524:	03 c0       	rjmp	.+6      	; 0x852c <vfprintf+0x2f8>
    8526:	b8 2c       	mov	r11, r8
    8528:	01 c0       	rjmp	.+2      	; 0x852c <vfprintf+0x2f8>
    852a:	b9 2c       	mov	r11, r9
    852c:	a4 fe       	sbrs	r10, 4
    852e:	0f c0       	rjmp	.+30     	; 0x854e <vfprintf+0x31a>
    8530:	fe 01       	movw	r30, r28
    8532:	e8 0d       	add	r30, r8
    8534:	f1 1d       	adc	r31, r1
    8536:	80 81       	ld	r24, Z
    8538:	80 33       	cpi	r24, 0x30	; 48
    853a:	21 f4       	brne	.+8      	; 0x8544 <vfprintf+0x310>
    853c:	9a 2d       	mov	r25, r10
    853e:	99 7e       	andi	r25, 0xE9	; 233
    8540:	a9 2e       	mov	r10, r25
    8542:	09 c0       	rjmp	.+18     	; 0x8556 <vfprintf+0x322>
    8544:	a2 fe       	sbrs	r10, 2
    8546:	06 c0       	rjmp	.+12     	; 0x8554 <vfprintf+0x320>
    8548:	b3 94       	inc	r11
    854a:	b3 94       	inc	r11
    854c:	04 c0       	rjmp	.+8      	; 0x8556 <vfprintf+0x322>
    854e:	8a 2d       	mov	r24, r10
    8550:	86 78       	andi	r24, 0x86	; 134
    8552:	09 f0       	breq	.+2      	; 0x8556 <vfprintf+0x322>
    8554:	b3 94       	inc	r11
    8556:	a3 fc       	sbrc	r10, 3
    8558:	11 c0       	rjmp	.+34     	; 0x857c <vfprintf+0x348>
    855a:	a0 fe       	sbrs	r10, 0
    855c:	06 c0       	rjmp	.+12     	; 0x856a <vfprintf+0x336>
    855e:	b2 14       	cp	r11, r2
    8560:	88 f4       	brcc	.+34     	; 0x8584 <vfprintf+0x350>
    8562:	28 0c       	add	r2, r8
    8564:	92 2c       	mov	r9, r2
    8566:	9b 18       	sub	r9, r11
    8568:	0e c0       	rjmp	.+28     	; 0x8586 <vfprintf+0x352>
    856a:	b2 14       	cp	r11, r2
    856c:	60 f4       	brcc	.+24     	; 0x8586 <vfprintf+0x352>
    856e:	b6 01       	movw	r22, r12
    8570:	80 e2       	ldi	r24, 0x20	; 32
    8572:	90 e0       	ldi	r25, 0x00	; 0
    8574:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    8578:	b3 94       	inc	r11
    857a:	f7 cf       	rjmp	.-18     	; 0x856a <vfprintf+0x336>
    857c:	b2 14       	cp	r11, r2
    857e:	18 f4       	brcc	.+6      	; 0x8586 <vfprintf+0x352>
    8580:	2b 18       	sub	r2, r11
    8582:	02 c0       	rjmp	.+4      	; 0x8588 <vfprintf+0x354>
    8584:	98 2c       	mov	r9, r8
    8586:	21 2c       	mov	r2, r1
    8588:	a4 fe       	sbrs	r10, 4
    858a:	10 c0       	rjmp	.+32     	; 0x85ac <vfprintf+0x378>
    858c:	b6 01       	movw	r22, r12
    858e:	80 e3       	ldi	r24, 0x30	; 48
    8590:	90 e0       	ldi	r25, 0x00	; 0
    8592:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    8596:	a2 fe       	sbrs	r10, 2
    8598:	17 c0       	rjmp	.+46     	; 0x85c8 <vfprintf+0x394>
    859a:	a1 fc       	sbrc	r10, 1
    859c:	03 c0       	rjmp	.+6      	; 0x85a4 <vfprintf+0x370>
    859e:	88 e7       	ldi	r24, 0x78	; 120
    85a0:	90 e0       	ldi	r25, 0x00	; 0
    85a2:	02 c0       	rjmp	.+4      	; 0x85a8 <vfprintf+0x374>
    85a4:	88 e5       	ldi	r24, 0x58	; 88
    85a6:	90 e0       	ldi	r25, 0x00	; 0
    85a8:	b6 01       	movw	r22, r12
    85aa:	0c c0       	rjmp	.+24     	; 0x85c4 <vfprintf+0x390>
    85ac:	8a 2d       	mov	r24, r10
    85ae:	86 78       	andi	r24, 0x86	; 134
    85b0:	59 f0       	breq	.+22     	; 0x85c8 <vfprintf+0x394>
    85b2:	a1 fe       	sbrs	r10, 1
    85b4:	02 c0       	rjmp	.+4      	; 0x85ba <vfprintf+0x386>
    85b6:	8b e2       	ldi	r24, 0x2B	; 43
    85b8:	01 c0       	rjmp	.+2      	; 0x85bc <vfprintf+0x388>
    85ba:	80 e2       	ldi	r24, 0x20	; 32
    85bc:	a7 fc       	sbrc	r10, 7
    85be:	8d e2       	ldi	r24, 0x2D	; 45
    85c0:	b6 01       	movw	r22, r12
    85c2:	90 e0       	ldi	r25, 0x00	; 0
    85c4:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    85c8:	89 14       	cp	r8, r9
    85ca:	38 f4       	brcc	.+14     	; 0x85da <vfprintf+0x3a6>
    85cc:	b6 01       	movw	r22, r12
    85ce:	80 e3       	ldi	r24, 0x30	; 48
    85d0:	90 e0       	ldi	r25, 0x00	; 0
    85d2:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    85d6:	9a 94       	dec	r9
    85d8:	f7 cf       	rjmp	.-18     	; 0x85c8 <vfprintf+0x394>
    85da:	8a 94       	dec	r8
    85dc:	f3 01       	movw	r30, r6
    85de:	e8 0d       	add	r30, r8
    85e0:	f1 1d       	adc	r31, r1
    85e2:	80 81       	ld	r24, Z
    85e4:	b6 01       	movw	r22, r12
    85e6:	90 e0       	ldi	r25, 0x00	; 0
    85e8:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    85ec:	81 10       	cpse	r8, r1
    85ee:	f5 cf       	rjmp	.-22     	; 0x85da <vfprintf+0x3a6>
    85f0:	22 20       	and	r2, r2
    85f2:	09 f4       	brne	.+2      	; 0x85f6 <vfprintf+0x3c2>
    85f4:	42 ce       	rjmp	.-892    	; 0x827a <vfprintf+0x46>
    85f6:	b6 01       	movw	r22, r12
    85f8:	80 e2       	ldi	r24, 0x20	; 32
    85fa:	90 e0       	ldi	r25, 0x00	; 0
    85fc:	0e 94 c1 44 	call	0x8982	; 0x8982 <fputc>
    8600:	2a 94       	dec	r2
    8602:	f6 cf       	rjmp	.-20     	; 0x85f0 <vfprintf+0x3bc>
    8604:	f6 01       	movw	r30, r12
    8606:	86 81       	ldd	r24, Z+6	; 0x06
    8608:	97 81       	ldd	r25, Z+7	; 0x07
    860a:	02 c0       	rjmp	.+4      	; 0x8610 <vfprintf+0x3dc>
    860c:	8f ef       	ldi	r24, 0xFF	; 255
    860e:	9f ef       	ldi	r25, 0xFF	; 255
    8610:	2b 96       	adiw	r28, 0x0b	; 11
    8612:	cd bf       	out	0x3d, r28	; 61
    8614:	de bf       	out	0x3e, r29	; 62
    8616:	df 91       	pop	r29
    8618:	cf 91       	pop	r28
    861a:	1f 91       	pop	r17
    861c:	0f 91       	pop	r16
    861e:	ff 90       	pop	r15
    8620:	ef 90       	pop	r14
    8622:	df 90       	pop	r13
    8624:	cf 90       	pop	r12
    8626:	bf 90       	pop	r11
    8628:	af 90       	pop	r10
    862a:	9f 90       	pop	r9
    862c:	8f 90       	pop	r8
    862e:	7f 90       	pop	r7
    8630:	6f 90       	pop	r6
    8632:	5f 90       	pop	r5
    8634:	4f 90       	pop	r4
    8636:	3f 90       	pop	r3
    8638:	2f 90       	pop	r2
    863a:	08 95       	ret

0000863c <strtod>:
    863c:	8f 92       	push	r8
    863e:	9f 92       	push	r9
    8640:	af 92       	push	r10
    8642:	bf 92       	push	r11
    8644:	cf 92       	push	r12
    8646:	df 92       	push	r13
    8648:	ef 92       	push	r14
    864a:	ff 92       	push	r15
    864c:	0f 93       	push	r16
    864e:	1f 93       	push	r17
    8650:	cf 93       	push	r28
    8652:	df 93       	push	r29
    8654:	ec 01       	movw	r28, r24
    8656:	6b 01       	movw	r12, r22
    8658:	61 15       	cp	r22, r1
    865a:	71 05       	cpc	r23, r1
    865c:	19 f0       	breq	.+6      	; 0x8664 <strtod+0x28>
    865e:	fb 01       	movw	r30, r22
    8660:	80 83       	st	Z, r24
    8662:	91 83       	std	Z+1, r25	; 0x01
    8664:	7e 01       	movw	r14, r28
    8666:	ff ef       	ldi	r31, 0xFF	; 255
    8668:	ef 1a       	sub	r14, r31
    866a:	ff 0a       	sbc	r15, r31
    866c:	08 81       	ld	r16, Y
    866e:	80 2f       	mov	r24, r16
    8670:	90 e0       	ldi	r25, 0x00	; 0
    8672:	0e 94 7a 44 	call	0x88f4	; 0x88f4 <isspace>
    8676:	89 2b       	or	r24, r25
    8678:	11 f0       	breq	.+4      	; 0x867e <strtod+0x42>
    867a:	e7 01       	movw	r28, r14
    867c:	f3 cf       	rjmp	.-26     	; 0x8664 <strtod+0x28>
    867e:	0d 32       	cpi	r16, 0x2D	; 45
    8680:	39 f4       	brne	.+14     	; 0x8690 <strtod+0x54>
    8682:	7e 01       	movw	r14, r28
    8684:	82 e0       	ldi	r24, 0x02	; 2
    8686:	e8 0e       	add	r14, r24
    8688:	f1 1c       	adc	r15, r1
    868a:	09 81       	ldd	r16, Y+1	; 0x01
    868c:	11 e0       	ldi	r17, 0x01	; 1
    868e:	08 c0       	rjmp	.+16     	; 0x86a0 <strtod+0x64>
    8690:	0b 32       	cpi	r16, 0x2B	; 43
    8692:	29 f4       	brne	.+10     	; 0x869e <strtod+0x62>
    8694:	7e 01       	movw	r14, r28
    8696:	92 e0       	ldi	r25, 0x02	; 2
    8698:	e9 0e       	add	r14, r25
    869a:	f1 1c       	adc	r15, r1
    869c:	09 81       	ldd	r16, Y+1	; 0x01
    869e:	10 e0       	ldi	r17, 0x00	; 0
    86a0:	e7 01       	movw	r28, r14
    86a2:	21 97       	sbiw	r28, 0x01	; 1
    86a4:	43 e0       	ldi	r20, 0x03	; 3
    86a6:	50 e0       	ldi	r21, 0x00	; 0
    86a8:	6c ef       	ldi	r22, 0xFC	; 252
    86aa:	71 e0       	ldi	r23, 0x01	; 1
    86ac:	ce 01       	movw	r24, r28
    86ae:	0e 94 83 44 	call	0x8906	; 0x8906 <strncasecmp_P>
    86b2:	89 2b       	or	r24, r25
    86b4:	c1 f4       	brne	.+48     	; 0x86e6 <strtod+0xaa>
    86b6:	23 96       	adiw	r28, 0x03	; 3
    86b8:	45 e0       	ldi	r20, 0x05	; 5
    86ba:	50 e0       	ldi	r21, 0x00	; 0
    86bc:	67 ef       	ldi	r22, 0xF7	; 247
    86be:	71 e0       	ldi	r23, 0x01	; 1
    86c0:	ce 01       	movw	r24, r28
    86c2:	0e 94 83 44 	call	0x8906	; 0x8906 <strncasecmp_P>
    86c6:	89 2b       	or	r24, r25
    86c8:	09 f4       	brne	.+2      	; 0x86cc <strtod+0x90>
    86ca:	25 96       	adiw	r28, 0x05	; 5
    86cc:	c1 14       	cp	r12, r1
    86ce:	d1 04       	cpc	r13, r1
    86d0:	19 f0       	breq	.+6      	; 0x86d8 <strtod+0x9c>
    86d2:	f6 01       	movw	r30, r12
    86d4:	c0 83       	st	Z, r28
    86d6:	d1 83       	std	Z+1, r29	; 0x01
    86d8:	11 11       	cpse	r17, r1
    86da:	f6 c0       	rjmp	.+492    	; 0x88c8 <strtod+0x28c>
    86dc:	60 e0       	ldi	r22, 0x00	; 0
    86de:	70 e0       	ldi	r23, 0x00	; 0
    86e0:	80 e8       	ldi	r24, 0x80	; 128
    86e2:	9f e7       	ldi	r25, 0x7F	; 127
    86e4:	fa c0       	rjmp	.+500    	; 0x88da <strtod+0x29e>
    86e6:	43 e0       	ldi	r20, 0x03	; 3
    86e8:	50 e0       	ldi	r21, 0x00	; 0
    86ea:	64 ef       	ldi	r22, 0xF4	; 244
    86ec:	71 e0       	ldi	r23, 0x01	; 1
    86ee:	ce 01       	movw	r24, r28
    86f0:	0e 94 83 44 	call	0x8906	; 0x8906 <strncasecmp_P>
    86f4:	89 2b       	or	r24, r25
    86f6:	59 f4       	brne	.+22     	; 0x870e <strtod+0xd2>
    86f8:	c1 14       	cp	r12, r1
    86fa:	d1 04       	cpc	r13, r1
    86fc:	09 f4       	brne	.+2      	; 0x8700 <strtod+0xc4>
    86fe:	e9 c0       	rjmp	.+466    	; 0x88d2 <strtod+0x296>
    8700:	f2 e0       	ldi	r31, 0x02	; 2
    8702:	ef 0e       	add	r14, r31
    8704:	f1 1c       	adc	r15, r1
    8706:	f6 01       	movw	r30, r12
    8708:	e0 82       	st	Z, r14
    870a:	f1 82       	std	Z+1, r15	; 0x01
    870c:	e2 c0       	rjmp	.+452    	; 0x88d2 <strtod+0x296>
    870e:	20 e0       	ldi	r18, 0x00	; 0
    8710:	30 e0       	ldi	r19, 0x00	; 0
    8712:	a9 01       	movw	r20, r18
    8714:	c0 e0       	ldi	r28, 0x00	; 0
    8716:	d0 e0       	ldi	r29, 0x00	; 0
    8718:	f7 01       	movw	r30, r14
    871a:	60 ed       	ldi	r22, 0xD0	; 208
    871c:	a6 2e       	mov	r10, r22
    871e:	a0 0e       	add	r10, r16
    8720:	89 e0       	ldi	r24, 0x09	; 9
    8722:	8a 15       	cp	r24, r10
    8724:	30 f1       	brcs	.+76     	; 0x8772 <strtod+0x136>
    8726:	91 2f       	mov	r25, r17
    8728:	92 60       	ori	r25, 0x02	; 2
    872a:	b9 2e       	mov	r11, r25
    872c:	81 2f       	mov	r24, r17
    872e:	88 70       	andi	r24, 0x08	; 8
    8730:	12 ff       	sbrs	r17, 2
    8732:	04 c0       	rjmp	.+8      	; 0x873c <strtod+0x100>
    8734:	81 11       	cpse	r24, r1
    8736:	24 c0       	rjmp	.+72     	; 0x8780 <strtod+0x144>
    8738:	21 96       	adiw	r28, 0x01	; 1
    873a:	22 c0       	rjmp	.+68     	; 0x8780 <strtod+0x144>
    873c:	81 11       	cpse	r24, r1
    873e:	21 97       	sbiw	r28, 0x01	; 1
    8740:	a5 e0       	ldi	r26, 0x05	; 5
    8742:	b0 e0       	ldi	r27, 0x00	; 0
    8744:	0e 94 09 40 	call	0x8012	; 0x8012 <__muluhisi3>
    8748:	dc 01       	movw	r26, r24
    874a:	cb 01       	movw	r24, r22
    874c:	88 0f       	add	r24, r24
    874e:	99 1f       	adc	r25, r25
    8750:	aa 1f       	adc	r26, r26
    8752:	bb 1f       	adc	r27, r27
    8754:	9c 01       	movw	r18, r24
    8756:	ad 01       	movw	r20, r26
    8758:	2a 0d       	add	r18, r10
    875a:	31 1d       	adc	r19, r1
    875c:	41 1d       	adc	r20, r1
    875e:	51 1d       	adc	r21, r1
    8760:	28 39       	cpi	r18, 0x98	; 152
    8762:	89 e9       	ldi	r24, 0x99	; 153
    8764:	38 07       	cpc	r19, r24
    8766:	48 07       	cpc	r20, r24
    8768:	89 e1       	ldi	r24, 0x19	; 25
    876a:	58 07       	cpc	r21, r24
    876c:	48 f0       	brcs	.+18     	; 0x8780 <strtod+0x144>
    876e:	16 60       	ori	r17, 0x06	; 6
    8770:	06 c0       	rjmp	.+12     	; 0x877e <strtod+0x142>
    8772:	9e ef       	ldi	r25, 0xFE	; 254
    8774:	a9 12       	cpse	r10, r25
    8776:	0a c0       	rjmp	.+20     	; 0x878c <strtod+0x150>
    8778:	13 fd       	sbrc	r17, 3
    877a:	40 c0       	rjmp	.+128    	; 0x87fc <strtod+0x1c0>
    877c:	18 60       	ori	r17, 0x08	; 8
    877e:	b1 2e       	mov	r11, r17
    8780:	8f ef       	ldi	r24, 0xFF	; 255
    8782:	e8 1a       	sub	r14, r24
    8784:	f8 0a       	sbc	r15, r24
    8786:	00 81       	ld	r16, Z
    8788:	1b 2d       	mov	r17, r11
    878a:	c6 cf       	rjmp	.-116    	; 0x8718 <strtod+0xdc>
    878c:	80 2f       	mov	r24, r16
    878e:	8f 7d       	andi	r24, 0xDF	; 223
    8790:	85 34       	cpi	r24, 0x45	; 69
    8792:	a1 f5       	brne	.+104    	; 0x87fc <strtod+0x1c0>
    8794:	80 81       	ld	r24, Z
    8796:	8d 32       	cpi	r24, 0x2D	; 45
    8798:	11 f4       	brne	.+4      	; 0x879e <strtod+0x162>
    879a:	10 61       	ori	r17, 0x10	; 16
    879c:	06 c0       	rjmp	.+12     	; 0x87aa <strtod+0x16e>
    879e:	8b 32       	cpi	r24, 0x2B	; 43
    87a0:	21 f0       	breq	.+8      	; 0x87aa <strtod+0x16e>
    87a2:	31 96       	adiw	r30, 0x01	; 1
    87a4:	61 e0       	ldi	r22, 0x01	; 1
    87a6:	70 e0       	ldi	r23, 0x00	; 0
    87a8:	04 c0       	rjmp	.+8      	; 0x87b2 <strtod+0x176>
    87aa:	81 81       	ldd	r24, Z+1	; 0x01
    87ac:	32 96       	adiw	r30, 0x02	; 2
    87ae:	62 e0       	ldi	r22, 0x02	; 2
    87b0:	70 e0       	ldi	r23, 0x00	; 0
    87b2:	80 53       	subi	r24, 0x30	; 48
    87b4:	8a 30       	cpi	r24, 0x0A	; 10
    87b6:	18 f0       	brcs	.+6      	; 0x87be <strtod+0x182>
    87b8:	e6 1b       	sub	r30, r22
    87ba:	f7 0b       	sbc	r31, r23
    87bc:	1f c0       	rjmp	.+62     	; 0x87fc <strtod+0x1c0>
    87be:	60 e0       	ldi	r22, 0x00	; 0
    87c0:	70 e0       	ldi	r23, 0x00	; 0
    87c2:	60 38       	cpi	r22, 0x80	; 128
    87c4:	9c e0       	ldi	r25, 0x0C	; 12
    87c6:	79 07       	cpc	r23, r25
    87c8:	5c f4       	brge	.+22     	; 0x87e0 <strtod+0x1a4>
    87ca:	db 01       	movw	r26, r22
    87cc:	aa 0f       	add	r26, r26
    87ce:	bb 1f       	adc	r27, r27
    87d0:	aa 0f       	add	r26, r26
    87d2:	bb 1f       	adc	r27, r27
    87d4:	6a 0f       	add	r22, r26
    87d6:	7b 1f       	adc	r23, r27
    87d8:	66 0f       	add	r22, r22
    87da:	77 1f       	adc	r23, r23
    87dc:	68 0f       	add	r22, r24
    87de:	71 1d       	adc	r23, r1
    87e0:	31 96       	adiw	r30, 0x01	; 1
    87e2:	df 01       	movw	r26, r30
    87e4:	11 97       	sbiw	r26, 0x01	; 1
    87e6:	8c 91       	ld	r24, X
    87e8:	80 53       	subi	r24, 0x30	; 48
    87ea:	8a 30       	cpi	r24, 0x0A	; 10
    87ec:	50 f3       	brcs	.-44     	; 0x87c2 <strtod+0x186>
    87ee:	14 ff       	sbrs	r17, 4
    87f0:	03 c0       	rjmp	.+6      	; 0x87f8 <strtod+0x1bc>
    87f2:	71 95       	neg	r23
    87f4:	61 95       	neg	r22
    87f6:	71 09       	sbc	r23, r1
    87f8:	c6 0f       	add	r28, r22
    87fa:	d7 1f       	adc	r29, r23
    87fc:	11 ff       	sbrs	r17, 1
    87fe:	08 c0       	rjmp	.+16     	; 0x8810 <strtod+0x1d4>
    8800:	c1 14       	cp	r12, r1
    8802:	d1 04       	cpc	r13, r1
    8804:	29 f0       	breq	.+10     	; 0x8810 <strtod+0x1d4>
    8806:	cf 01       	movw	r24, r30
    8808:	01 97       	sbiw	r24, 0x01	; 1
    880a:	f6 01       	movw	r30, r12
    880c:	80 83       	st	Z, r24
    880e:	91 83       	std	Z+1, r25	; 0x01
    8810:	ca 01       	movw	r24, r20
    8812:	b9 01       	movw	r22, r18
    8814:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__floatunsisf>
    8818:	21 2f       	mov	r18, r17
    881a:	23 70       	andi	r18, 0x03	; 3
    881c:	23 30       	cpi	r18, 0x03	; 3
    881e:	19 f0       	breq	.+6      	; 0x8826 <strtod+0x1ea>
    8820:	4b 01       	movw	r8, r22
    8822:	5c 01       	movw	r10, r24
    8824:	06 c0       	rjmp	.+12     	; 0x8832 <strtod+0x1f6>
    8826:	4b 01       	movw	r8, r22
    8828:	5c 01       	movw	r10, r24
    882a:	b7 fa       	bst	r11, 7
    882c:	b0 94       	com	r11
    882e:	b7 f8       	bld	r11, 7
    8830:	b0 94       	com	r11
    8832:	20 e0       	ldi	r18, 0x00	; 0
    8834:	30 e0       	ldi	r19, 0x00	; 0
    8836:	a9 01       	movw	r20, r18
    8838:	c5 01       	movw	r24, r10
    883a:	b4 01       	movw	r22, r8
    883c:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__cmpsf2>
    8840:	88 23       	and	r24, r24
    8842:	09 f4       	brne	.+2      	; 0x8846 <strtod+0x20a>
    8844:	3e c0       	rjmp	.+124    	; 0x88c2 <strtod+0x286>
    8846:	d7 ff       	sbrs	r29, 7
    8848:	06 c0       	rjmp	.+12     	; 0x8856 <strtod+0x21a>
    884a:	d1 95       	neg	r29
    884c:	c1 95       	neg	r28
    884e:	d1 09       	sbc	r29, r1
    8850:	03 e1       	ldi	r16, 0x13	; 19
    8852:	12 e0       	ldi	r17, 0x02	; 2
    8854:	02 c0       	rjmp	.+4      	; 0x885a <strtod+0x21e>
    8856:	0b e2       	ldi	r16, 0x2B	; 43
    8858:	12 e0       	ldi	r17, 0x02	; 2
    885a:	68 01       	movw	r12, r16
    885c:	f8 e1       	ldi	r31, 0x18	; 24
    885e:	cf 1a       	sub	r12, r31
    8860:	d1 08       	sbc	r13, r1
    8862:	90 e2       	ldi	r25, 0x20	; 32
    8864:	e9 2e       	mov	r14, r25
    8866:	f1 2c       	mov	r15, r1
    8868:	ce 15       	cp	r28, r14
    886a:	df 05       	cpc	r29, r15
    886c:	74 f0       	brlt	.+28     	; 0x888a <strtod+0x24e>
    886e:	f8 01       	movw	r30, r16
    8870:	25 91       	lpm	r18, Z+
    8872:	35 91       	lpm	r19, Z+
    8874:	45 91       	lpm	r20, Z+
    8876:	54 91       	lpm	r21, Z
    8878:	c5 01       	movw	r24, r10
    887a:	b4 01       	movw	r22, r8
    887c:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__mulsf3>
    8880:	4b 01       	movw	r8, r22
    8882:	5c 01       	movw	r10, r24
    8884:	ce 19       	sub	r28, r14
    8886:	df 09       	sbc	r29, r15
    8888:	ef cf       	rjmp	.-34     	; 0x8868 <strtod+0x22c>
    888a:	04 50       	subi	r16, 0x04	; 4
    888c:	11 09       	sbc	r17, r1
    888e:	f5 94       	asr	r15
    8890:	e7 94       	ror	r14
    8892:	0c 15       	cp	r16, r12
    8894:	1d 05       	cpc	r17, r13
    8896:	41 f7       	brne	.-48     	; 0x8868 <strtod+0x22c>
    8898:	8a 2d       	mov	r24, r10
    889a:	88 0f       	add	r24, r24
    889c:	8b 2d       	mov	r24, r11
    889e:	88 1f       	adc	r24, r24
    88a0:	8f 3f       	cpi	r24, 0xFF	; 255
    88a2:	49 f0       	breq	.+18     	; 0x88b6 <strtod+0x27a>
    88a4:	20 e0       	ldi	r18, 0x00	; 0
    88a6:	30 e0       	ldi	r19, 0x00	; 0
    88a8:	a9 01       	movw	r20, r18
    88aa:	c5 01       	movw	r24, r10
    88ac:	b4 01       	movw	r22, r8
    88ae:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__cmpsf2>
    88b2:	81 11       	cpse	r24, r1
    88b4:	06 c0       	rjmp	.+12     	; 0x88c2 <strtod+0x286>
    88b6:	82 e2       	ldi	r24, 0x22	; 34
    88b8:	90 e0       	ldi	r25, 0x00	; 0
    88ba:	80 93 c1 29 	sts	0x29C1, r24	; 0x8029c1 <errno>
    88be:	90 93 c2 29 	sts	0x29C2, r25	; 0x8029c2 <errno+0x1>
    88c2:	c5 01       	movw	r24, r10
    88c4:	b4 01       	movw	r22, r8
    88c6:	09 c0       	rjmp	.+18     	; 0x88da <strtod+0x29e>
    88c8:	60 e0       	ldi	r22, 0x00	; 0
    88ca:	70 e0       	ldi	r23, 0x00	; 0
    88cc:	80 e8       	ldi	r24, 0x80	; 128
    88ce:	9f ef       	ldi	r25, 0xFF	; 255
    88d0:	04 c0       	rjmp	.+8      	; 0x88da <strtod+0x29e>
    88d2:	60 e0       	ldi	r22, 0x00	; 0
    88d4:	70 e0       	ldi	r23, 0x00	; 0
    88d6:	80 ec       	ldi	r24, 0xC0	; 192
    88d8:	9f e7       	ldi	r25, 0x7F	; 127
    88da:	df 91       	pop	r29
    88dc:	cf 91       	pop	r28
    88de:	1f 91       	pop	r17
    88e0:	0f 91       	pop	r16
    88e2:	ff 90       	pop	r15
    88e4:	ef 90       	pop	r14
    88e6:	df 90       	pop	r13
    88e8:	cf 90       	pop	r12
    88ea:	bf 90       	pop	r11
    88ec:	af 90       	pop	r10
    88ee:	9f 90       	pop	r9
    88f0:	8f 90       	pop	r8
    88f2:	08 95       	ret

000088f4 <isspace>:
    88f4:	91 11       	cpse	r25, r1
    88f6:	0c 94 84 45 	jmp	0x8b08	; 0x8b08 <__ctype_isfalse>
    88fa:	80 32       	cpi	r24, 0x20	; 32
    88fc:	19 f0       	breq	.+6      	; 0x8904 <isspace+0x10>
    88fe:	89 50       	subi	r24, 0x09	; 9
    8900:	85 50       	subi	r24, 0x05	; 5
    8902:	c8 f7       	brcc	.-14     	; 0x88f6 <isspace+0x2>
    8904:	08 95       	ret

00008906 <strncasecmp_P>:
    8906:	fb 01       	movw	r30, r22
    8908:	dc 01       	movw	r26, r24
    890a:	41 50       	subi	r20, 0x01	; 1
    890c:	50 40       	sbci	r21, 0x00	; 0
    890e:	88 f0       	brcs	.+34     	; 0x8932 <strncasecmp_P+0x2c>
    8910:	8d 91       	ld	r24, X+
    8912:	81 34       	cpi	r24, 0x41	; 65
    8914:	1c f0       	brlt	.+6      	; 0x891c <strncasecmp_P+0x16>
    8916:	8b 35       	cpi	r24, 0x5B	; 91
    8918:	0c f4       	brge	.+2      	; 0x891c <strncasecmp_P+0x16>
    891a:	80 5e       	subi	r24, 0xE0	; 224
    891c:	65 91       	lpm	r22, Z+
    891e:	61 34       	cpi	r22, 0x41	; 65
    8920:	1c f0       	brlt	.+6      	; 0x8928 <strncasecmp_P+0x22>
    8922:	6b 35       	cpi	r22, 0x5B	; 91
    8924:	0c f4       	brge	.+2      	; 0x8928 <strncasecmp_P+0x22>
    8926:	60 5e       	subi	r22, 0xE0	; 224
    8928:	86 1b       	sub	r24, r22
    892a:	61 11       	cpse	r22, r1
    892c:	71 f3       	breq	.-36     	; 0x890a <strncasecmp_P+0x4>
    892e:	99 0b       	sbc	r25, r25
    8930:	08 95       	ret
    8932:	88 1b       	sub	r24, r24
    8934:	fc cf       	rjmp	.-8      	; 0x892e <strncasecmp_P+0x28>

00008936 <strnlen_P>:
    8936:	fc 01       	movw	r30, r24
    8938:	05 90       	lpm	r0, Z+
    893a:	61 50       	subi	r22, 0x01	; 1
    893c:	70 40       	sbci	r23, 0x00	; 0
    893e:	01 10       	cpse	r0, r1
    8940:	d8 f7       	brcc	.-10     	; 0x8938 <strnlen_P+0x2>
    8942:	80 95       	com	r24
    8944:	90 95       	com	r25
    8946:	8e 0f       	add	r24, r30
    8948:	9f 1f       	adc	r25, r31
    894a:	08 95       	ret

0000894c <strnlen>:
    894c:	fc 01       	movw	r30, r24
    894e:	61 50       	subi	r22, 0x01	; 1
    8950:	70 40       	sbci	r23, 0x00	; 0
    8952:	01 90       	ld	r0, Z+
    8954:	01 10       	cpse	r0, r1
    8956:	d8 f7       	brcc	.-10     	; 0x894e <strnlen+0x2>
    8958:	80 95       	com	r24
    895a:	90 95       	com	r25
    895c:	8e 0f       	add	r24, r30
    895e:	9f 1f       	adc	r25, r31
    8960:	08 95       	ret

00008962 <strrev>:
    8962:	dc 01       	movw	r26, r24
    8964:	fc 01       	movw	r30, r24
    8966:	67 2f       	mov	r22, r23
    8968:	71 91       	ld	r23, Z+
    896a:	77 23       	and	r23, r23
    896c:	e1 f7       	brne	.-8      	; 0x8966 <strrev+0x4>
    896e:	32 97       	sbiw	r30, 0x02	; 2
    8970:	04 c0       	rjmp	.+8      	; 0x897a <strrev+0x18>
    8972:	7c 91       	ld	r23, X
    8974:	6d 93       	st	X+, r22
    8976:	70 83       	st	Z, r23
    8978:	62 91       	ld	r22, -Z
    897a:	ae 17       	cp	r26, r30
    897c:	bf 07       	cpc	r27, r31
    897e:	c8 f3       	brcs	.-14     	; 0x8972 <strrev+0x10>
    8980:	08 95       	ret

00008982 <fputc>:
    8982:	0f 93       	push	r16
    8984:	1f 93       	push	r17
    8986:	cf 93       	push	r28
    8988:	df 93       	push	r29
    898a:	fb 01       	movw	r30, r22
    898c:	23 81       	ldd	r18, Z+3	; 0x03
    898e:	21 fd       	sbrc	r18, 1
    8990:	03 c0       	rjmp	.+6      	; 0x8998 <fputc+0x16>
    8992:	8f ef       	ldi	r24, 0xFF	; 255
    8994:	9f ef       	ldi	r25, 0xFF	; 255
    8996:	2c c0       	rjmp	.+88     	; 0x89f0 <fputc+0x6e>
    8998:	22 ff       	sbrs	r18, 2
    899a:	16 c0       	rjmp	.+44     	; 0x89c8 <fputc+0x46>
    899c:	46 81       	ldd	r20, Z+6	; 0x06
    899e:	57 81       	ldd	r21, Z+7	; 0x07
    89a0:	24 81       	ldd	r18, Z+4	; 0x04
    89a2:	35 81       	ldd	r19, Z+5	; 0x05
    89a4:	42 17       	cp	r20, r18
    89a6:	53 07       	cpc	r21, r19
    89a8:	44 f4       	brge	.+16     	; 0x89ba <fputc+0x38>
    89aa:	a0 81       	ld	r26, Z
    89ac:	b1 81       	ldd	r27, Z+1	; 0x01
    89ae:	9d 01       	movw	r18, r26
    89b0:	2f 5f       	subi	r18, 0xFF	; 255
    89b2:	3f 4f       	sbci	r19, 0xFF	; 255
    89b4:	20 83       	st	Z, r18
    89b6:	31 83       	std	Z+1, r19	; 0x01
    89b8:	8c 93       	st	X, r24
    89ba:	26 81       	ldd	r18, Z+6	; 0x06
    89bc:	37 81       	ldd	r19, Z+7	; 0x07
    89be:	2f 5f       	subi	r18, 0xFF	; 255
    89c0:	3f 4f       	sbci	r19, 0xFF	; 255
    89c2:	26 83       	std	Z+6, r18	; 0x06
    89c4:	37 83       	std	Z+7, r19	; 0x07
    89c6:	14 c0       	rjmp	.+40     	; 0x89f0 <fputc+0x6e>
    89c8:	8b 01       	movw	r16, r22
    89ca:	ec 01       	movw	r28, r24
    89cc:	fb 01       	movw	r30, r22
    89ce:	00 84       	ldd	r0, Z+8	; 0x08
    89d0:	f1 85       	ldd	r31, Z+9	; 0x09
    89d2:	e0 2d       	mov	r30, r0
    89d4:	19 95       	eicall
    89d6:	89 2b       	or	r24, r25
    89d8:	e1 f6       	brne	.-72     	; 0x8992 <fputc+0x10>
    89da:	d8 01       	movw	r26, r16
    89dc:	16 96       	adiw	r26, 0x06	; 6
    89de:	8d 91       	ld	r24, X+
    89e0:	9c 91       	ld	r25, X
    89e2:	17 97       	sbiw	r26, 0x07	; 7
    89e4:	01 96       	adiw	r24, 0x01	; 1
    89e6:	16 96       	adiw	r26, 0x06	; 6
    89e8:	8d 93       	st	X+, r24
    89ea:	9c 93       	st	X, r25
    89ec:	17 97       	sbiw	r26, 0x07	; 7
    89ee:	ce 01       	movw	r24, r28
    89f0:	df 91       	pop	r29
    89f2:	cf 91       	pop	r28
    89f4:	1f 91       	pop	r17
    89f6:	0f 91       	pop	r16
    89f8:	08 95       	ret

000089fa <__ultoa_invert>:
    89fa:	fa 01       	movw	r30, r20
    89fc:	aa 27       	eor	r26, r26
    89fe:	28 30       	cpi	r18, 0x08	; 8
    8a00:	51 f1       	breq	.+84     	; 0x8a56 <__ultoa_invert+0x5c>
    8a02:	20 31       	cpi	r18, 0x10	; 16
    8a04:	81 f1       	breq	.+96     	; 0x8a66 <__ultoa_invert+0x6c>
    8a06:	e8 94       	clt
    8a08:	6f 93       	push	r22
    8a0a:	6e 7f       	andi	r22, 0xFE	; 254
    8a0c:	6e 5f       	subi	r22, 0xFE	; 254
    8a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    8a10:	8f 4f       	sbci	r24, 0xFF	; 255
    8a12:	9f 4f       	sbci	r25, 0xFF	; 255
    8a14:	af 4f       	sbci	r26, 0xFF	; 255
    8a16:	b1 e0       	ldi	r27, 0x01	; 1
    8a18:	3e d0       	rcall	.+124    	; 0x8a96 <__ultoa_invert+0x9c>
    8a1a:	b4 e0       	ldi	r27, 0x04	; 4
    8a1c:	3c d0       	rcall	.+120    	; 0x8a96 <__ultoa_invert+0x9c>
    8a1e:	67 0f       	add	r22, r23
    8a20:	78 1f       	adc	r23, r24
    8a22:	89 1f       	adc	r24, r25
    8a24:	9a 1f       	adc	r25, r26
    8a26:	a1 1d       	adc	r26, r1
    8a28:	68 0f       	add	r22, r24
    8a2a:	79 1f       	adc	r23, r25
    8a2c:	8a 1f       	adc	r24, r26
    8a2e:	91 1d       	adc	r25, r1
    8a30:	a1 1d       	adc	r26, r1
    8a32:	6a 0f       	add	r22, r26
    8a34:	71 1d       	adc	r23, r1
    8a36:	81 1d       	adc	r24, r1
    8a38:	91 1d       	adc	r25, r1
    8a3a:	a1 1d       	adc	r26, r1
    8a3c:	20 d0       	rcall	.+64     	; 0x8a7e <__ultoa_invert+0x84>
    8a3e:	09 f4       	brne	.+2      	; 0x8a42 <__ultoa_invert+0x48>
    8a40:	68 94       	set
    8a42:	3f 91       	pop	r19
    8a44:	2a e0       	ldi	r18, 0x0A	; 10
    8a46:	26 9f       	mul	r18, r22
    8a48:	11 24       	eor	r1, r1
    8a4a:	30 19       	sub	r19, r0
    8a4c:	30 5d       	subi	r19, 0xD0	; 208
    8a4e:	31 93       	st	Z+, r19
    8a50:	de f6       	brtc	.-74     	; 0x8a08 <__ultoa_invert+0xe>
    8a52:	cf 01       	movw	r24, r30
    8a54:	08 95       	ret
    8a56:	46 2f       	mov	r20, r22
    8a58:	47 70       	andi	r20, 0x07	; 7
    8a5a:	40 5d       	subi	r20, 0xD0	; 208
    8a5c:	41 93       	st	Z+, r20
    8a5e:	b3 e0       	ldi	r27, 0x03	; 3
    8a60:	0f d0       	rcall	.+30     	; 0x8a80 <__ultoa_invert+0x86>
    8a62:	c9 f7       	brne	.-14     	; 0x8a56 <__ultoa_invert+0x5c>
    8a64:	f6 cf       	rjmp	.-20     	; 0x8a52 <__ultoa_invert+0x58>
    8a66:	46 2f       	mov	r20, r22
    8a68:	4f 70       	andi	r20, 0x0F	; 15
    8a6a:	40 5d       	subi	r20, 0xD0	; 208
    8a6c:	4a 33       	cpi	r20, 0x3A	; 58
    8a6e:	18 f0       	brcs	.+6      	; 0x8a76 <__ultoa_invert+0x7c>
    8a70:	49 5d       	subi	r20, 0xD9	; 217
    8a72:	31 fd       	sbrc	r19, 1
    8a74:	40 52       	subi	r20, 0x20	; 32
    8a76:	41 93       	st	Z+, r20
    8a78:	02 d0       	rcall	.+4      	; 0x8a7e <__ultoa_invert+0x84>
    8a7a:	a9 f7       	brne	.-22     	; 0x8a66 <__ultoa_invert+0x6c>
    8a7c:	ea cf       	rjmp	.-44     	; 0x8a52 <__ultoa_invert+0x58>
    8a7e:	b4 e0       	ldi	r27, 0x04	; 4
    8a80:	a6 95       	lsr	r26
    8a82:	97 95       	ror	r25
    8a84:	87 95       	ror	r24
    8a86:	77 95       	ror	r23
    8a88:	67 95       	ror	r22
    8a8a:	ba 95       	dec	r27
    8a8c:	c9 f7       	brne	.-14     	; 0x8a80 <__ultoa_invert+0x86>
    8a8e:	00 97       	sbiw	r24, 0x00	; 0
    8a90:	61 05       	cpc	r22, r1
    8a92:	71 05       	cpc	r23, r1
    8a94:	08 95       	ret
    8a96:	9b 01       	movw	r18, r22
    8a98:	ac 01       	movw	r20, r24
    8a9a:	0a 2e       	mov	r0, r26
    8a9c:	06 94       	lsr	r0
    8a9e:	57 95       	ror	r21
    8aa0:	47 95       	ror	r20
    8aa2:	37 95       	ror	r19
    8aa4:	27 95       	ror	r18
    8aa6:	ba 95       	dec	r27
    8aa8:	c9 f7       	brne	.-14     	; 0x8a9c <__ultoa_invert+0xa2>
    8aaa:	62 0f       	add	r22, r18
    8aac:	73 1f       	adc	r23, r19
    8aae:	84 1f       	adc	r24, r20
    8ab0:	95 1f       	adc	r25, r21
    8ab2:	a0 1d       	adc	r26, r0
    8ab4:	08 95       	ret

00008ab6 <__cmpsf2>:
    8ab6:	0e 94 60 45 	call	0x8ac0	; 0x8ac0 <__fp_cmp>
    8aba:	08 f4       	brcc	.+2      	; 0x8abe <__cmpsf2+0x8>
    8abc:	81 e0       	ldi	r24, 0x01	; 1
    8abe:	08 95       	ret

00008ac0 <__fp_cmp>:
    8ac0:	99 0f       	add	r25, r25
    8ac2:	00 08       	sbc	r0, r0
    8ac4:	55 0f       	add	r21, r21
    8ac6:	aa 0b       	sbc	r26, r26
    8ac8:	e0 e8       	ldi	r30, 0x80	; 128
    8aca:	fe ef       	ldi	r31, 0xFE	; 254
    8acc:	16 16       	cp	r1, r22
    8ace:	17 06       	cpc	r1, r23
    8ad0:	e8 07       	cpc	r30, r24
    8ad2:	f9 07       	cpc	r31, r25
    8ad4:	c0 f0       	brcs	.+48     	; 0x8b06 <__fp_cmp+0x46>
    8ad6:	12 16       	cp	r1, r18
    8ad8:	13 06       	cpc	r1, r19
    8ada:	e4 07       	cpc	r30, r20
    8adc:	f5 07       	cpc	r31, r21
    8ade:	98 f0       	brcs	.+38     	; 0x8b06 <__fp_cmp+0x46>
    8ae0:	62 1b       	sub	r22, r18
    8ae2:	73 0b       	sbc	r23, r19
    8ae4:	84 0b       	sbc	r24, r20
    8ae6:	95 0b       	sbc	r25, r21
    8ae8:	39 f4       	brne	.+14     	; 0x8af8 <__fp_cmp+0x38>
    8aea:	0a 26       	eor	r0, r26
    8aec:	61 f0       	breq	.+24     	; 0x8b06 <__fp_cmp+0x46>
    8aee:	23 2b       	or	r18, r19
    8af0:	24 2b       	or	r18, r20
    8af2:	25 2b       	or	r18, r21
    8af4:	21 f4       	brne	.+8      	; 0x8afe <__fp_cmp+0x3e>
    8af6:	08 95       	ret
    8af8:	0a 26       	eor	r0, r26
    8afa:	09 f4       	brne	.+2      	; 0x8afe <__fp_cmp+0x3e>
    8afc:	a1 40       	sbci	r26, 0x01	; 1
    8afe:	a6 95       	lsr	r26
    8b00:	8f ef       	ldi	r24, 0xFF	; 255
    8b02:	81 1d       	adc	r24, r1
    8b04:	81 1d       	adc	r24, r1
    8b06:	08 95       	ret

00008b08 <__ctype_isfalse>:
    8b08:	99 27       	eor	r25, r25
    8b0a:	88 27       	eor	r24, r24

00008b0c <__ctype_istrue>:
    8b0c:	08 95       	ret

00008b0e <_exit>:
    8b0e:	f8 94       	cli

00008b10 <__stop_program>:
    8b10:	ff cf       	rjmp	.-2      	; 0x8b10 <__stop_program>
