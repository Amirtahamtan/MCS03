
MCS03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000613a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000446  00802000  0000613a  000061ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fe  00802446  00802446  00006614  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000066b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007c87  00000000  00000000  00006828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003828  00000000  00000000  0000e4af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dd4  00000000  00000000  00011cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  00014aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040a1  00000000  00000000  000153b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026ff  00000000  00000000  00019455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0001bb54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__ctors_end>
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_16>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      50:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_20>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 aa 27 	jmp	0x4f54	; 0x4f54 <__vector_25>
      68:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      6c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      70:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      7c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      80:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      84:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      8c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      90:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      94:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      98:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      fc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     100:	0c 94 0a 24 	jmp	0x4814	; 0x4814 <__vector_64>
     104:	0c 94 b6 25 	jmp	0x4b6c	; 0x4b6c <__vector_65>
     108:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     10c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     110:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     114:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     118:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     11c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     120:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     124:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     128:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     12c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     130:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     134:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     138:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     13c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     140:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     144:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     148:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     14c:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_83>
     150:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     154:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     158:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     15c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     160:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     164:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     168:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     16c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     170:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     174:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     178:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     17c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     180:	0c 94 7a 22 	jmp	0x44f4	; 0x44f4 <__vector_96>
     184:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     188:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     18c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     190:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     194:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     198:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     19c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d8:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__vector_118>
     1dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

000001f4 <__trampolines_end>:
     1f4:	4e 41       	sbci	r20, 0x1E	; 30
     1f6:	4e 49       	Address 0x000001f6 is out of bounds.
.word	0xffff	; ????

000001f7 <pstr_inity>:
     1f7:	49 4e 49 54 59                                      INITY

000001fc <pstr_inf>:
     1fc:	49 4e 46                                            INF

000001ff <pwr_m10>:
     1ff:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     20f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000217 <pwr_p10>:
     217:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     227:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000230 <__ctors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df e3       	ldi	r29, 0x3F	; 63
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60
     240:	18 be       	out	0x38, r1	; 56
     242:	19 be       	out	0x39, r1	; 57
     244:	1a be       	out	0x3a, r1	; 58
     246:	1b be       	out	0x3b, r1	; 59

00000248 <__do_copy_data>:
     248:	14 e2       	ldi	r17, 0x24	; 36
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	ea e3       	ldi	r30, 0x3A	; 58
     250:	f1 e6       	ldi	r31, 0x61	; 97
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a6 34       	cpi	r26, 0x46	; 70
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>
     262:	1b be       	out	0x3b, r1	; 59

00000264 <__do_clear_bss>:
     264:	27 e2       	ldi	r18, 0x27	; 39
     266:	a6 e4       	ldi	r26, 0x46	; 70
     268:	b4 e2       	ldi	r27, 0x24	; 36
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	a4 34       	cpi	r26, 0x44	; 68
     270:	b2 07       	cpc	r27, r18
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>
     274:	0e 94 e7 27 	call	0x4fce	; 0x4fce <main>
     278:	0c 94 9b 30 	jmp	0x6136	; 0x6136 <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <_Z20ResetDistanceToGoEXPc>:
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
     280:	e8 e1       	ldi	r30, 0x18	; 24
     282:	f7 e2       	ldi	r31, 0x27	; 39
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	82 17       	cp	r24, r18
     28c:	93 07       	cpc	r25, r19
     28e:	21 f0       	breq	.+8      	; 0x298 <_Z20ResetDistanceToGoEXPc+0x18>
     290:	10 82       	st	Z, r1
     292:	11 82       	std	Z+1, r1	; 0x01
     294:	12 82       	std	Z+2, r1	; 0x02
     296:	13 82       	std	Z+3, r1	; 0x03
     298:	2f 5f       	subi	r18, 0xFF	; 255
     29a:	3f 4f       	sbci	r19, 0xFF	; 255
     29c:	34 96       	adiw	r30, 0x04	; 4
     29e:	23 30       	cpi	r18, 0x03	; 3
     2a0:	31 05       	cpc	r19, r1
     2a2:	99 f7       	brne	.-26     	; 0x28a <_Z20ResetDistanceToGoEXPc+0xa>
     2a4:	08 95       	ret

000002a6 <_Z15IsAnyAxisMovingv>:
     2a6:	ee ee       	ldi	r30, 0xEE	; 238
     2a8:	f6 e2       	ldi	r31, 0x26	; 38
     2aa:	90 81       	ld	r25, Z
     2ac:	81 81       	ldd	r24, Z+1	; 0x01
     2ae:	89 2b       	or	r24, r25
     2b0:	92 81       	ldd	r25, Z+2	; 0x02
     2b2:	89 2b       	or	r24, r25
     2b4:	08 95       	ret

000002b6 <_Z9AxisPulsec>:
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	41 f0       	breq	.+16     	; 0x2ca <_Z9AxisPulsec+0x14>
     2ba:	18 f0       	brcs	.+6      	; 0x2c2 <_Z9AxisPulsec+0xc>
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	49 f0       	breq	.+18     	; 0x2d2 <_Z9AxisPulsec+0x1c>
     2c0:	08 95       	ret
     2c2:	80 e2       	ldi	r24, 0x20	; 32
     2c4:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
     2c8:	08 95       	ret
     2ca:	88 e0       	ldi	r24, 0x08	; 8
     2cc:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
     2d0:	08 95       	ret
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
     2d8:	08 95       	ret

000002da <_Z10SetAxisDiric>:
     2da:	fc 01       	movw	r30, r24
     2dc:	e1 52       	subi	r30, 0x21	; 33
     2de:	f9 4d       	sbci	r31, 0xD9	; 217
     2e0:	60 83       	st	Z, r22
     2e2:	66 23       	and	r22, r22
     2e4:	19 f0       	breq	.+6      	; 0x2ec <_Z10SetAxisDiric+0x12>
     2e6:	61 30       	cpi	r22, 0x01	; 1
     2e8:	d9 f0       	breq	.+54     	; 0x320 <_Z10SetAxisDiric+0x46>
     2ea:	08 95       	ret
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	91 05       	cpc	r25, r1
     2f0:	59 f0       	breq	.+22     	; 0x308 <_Z10SetAxisDiric+0x2e>
     2f2:	82 30       	cpi	r24, 0x02	; 2
     2f4:	91 05       	cpc	r25, r1
     2f6:	71 f0       	breq	.+28     	; 0x314 <_Z10SetAxisDiric+0x3a>
     2f8:	89 2b       	or	r24, r25
     2fa:	59 f5       	brne	.+86     	; 0x352 <_Z10SetAxisDiric+0x78>
     2fc:	e0 e2       	ldi	r30, 0x20	; 32
     2fe:	f7 e0       	ldi	r31, 0x07	; 7
     300:	84 81       	ldd	r24, Z+4	; 0x04
     302:	8f 7e       	andi	r24, 0xEF	; 239
     304:	84 83       	std	Z+4, r24	; 0x04
     306:	08 95       	ret
     308:	e0 e2       	ldi	r30, 0x20	; 32
     30a:	f7 e0       	ldi	r31, 0x07	; 7
     30c:	84 81       	ldd	r24, Z+4	; 0x04
     30e:	8b 7f       	andi	r24, 0xFB	; 251
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	08 95       	ret
     314:	e0 e2       	ldi	r30, 0x20	; 32
     316:	f7 e0       	ldi	r31, 0x07	; 7
     318:	84 81       	ldd	r24, Z+4	; 0x04
     31a:	8e 7f       	andi	r24, 0xFE	; 254
     31c:	84 83       	std	Z+4, r24	; 0x04
     31e:	08 95       	ret
     320:	81 30       	cpi	r24, 0x01	; 1
     322:	91 05       	cpc	r25, r1
     324:	59 f0       	breq	.+22     	; 0x33c <_Z10SetAxisDiric+0x62>
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	91 05       	cpc	r25, r1
     32a:	71 f0       	breq	.+28     	; 0x348 <_Z10SetAxisDiric+0x6e>
     32c:	89 2b       	or	r24, r25
     32e:	89 f4       	brne	.+34     	; 0x352 <_Z10SetAxisDiric+0x78>
     330:	e0 e2       	ldi	r30, 0x20	; 32
     332:	f7 e0       	ldi	r31, 0x07	; 7
     334:	84 81       	ldd	r24, Z+4	; 0x04
     336:	80 61       	ori	r24, 0x10	; 16
     338:	84 83       	std	Z+4, r24	; 0x04
     33a:	08 95       	ret
     33c:	e0 e2       	ldi	r30, 0x20	; 32
     33e:	f7 e0       	ldi	r31, 0x07	; 7
     340:	84 81       	ldd	r24, Z+4	; 0x04
     342:	84 60       	ori	r24, 0x04	; 4
     344:	84 83       	std	Z+4, r24	; 0x04
     346:	08 95       	ret
     348:	e0 e2       	ldi	r30, 0x20	; 32
     34a:	f7 e0       	ldi	r31, 0x07	; 7
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	81 60       	ori	r24, 0x01	; 1
     350:	84 83       	std	Z+4, r24	; 0x04
     352:	08 95       	ret

00000354 <_Z10SetAxisEMGic>:
     354:	fc 01       	movw	r30, r24
     356:	e4 52       	subi	r30, 0x24	; 36
     358:	f9 4d       	sbci	r31, 0xD9	; 217
     35a:	60 83       	st	Z, r22
     35c:	66 23       	and	r22, r22
     35e:	19 f0       	breq	.+6      	; 0x366 <_Z10SetAxisEMGic+0x12>
     360:	61 30       	cpi	r22, 0x01	; 1
     362:	d9 f0       	breq	.+54     	; 0x39a <_Z10SetAxisEMGic+0x46>
     364:	08 95       	ret
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	91 05       	cpc	r25, r1
     36a:	59 f0       	breq	.+22     	; 0x382 <_Z10SetAxisEMGic+0x2e>
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	91 05       	cpc	r25, r1
     370:	71 f0       	breq	.+28     	; 0x38e <_Z10SetAxisEMGic+0x3a>
     372:	89 2b       	or	r24, r25
     374:	59 f5       	brne	.+86     	; 0x3cc <_Z10SetAxisEMGic+0x78>
     376:	e0 e0       	ldi	r30, 0x00	; 0
     378:	f6 e0       	ldi	r31, 0x06	; 6
     37a:	84 81       	ldd	r24, Z+4	; 0x04
     37c:	8f 7b       	andi	r24, 0xBF	; 191
     37e:	84 83       	std	Z+4, r24	; 0x04
     380:	08 95       	ret
     382:	e0 e2       	ldi	r30, 0x20	; 32
     384:	f6 e0       	ldi	r31, 0x06	; 6
     386:	84 81       	ldd	r24, Z+4	; 0x04
     388:	8f 7e       	andi	r24, 0xEF	; 239
     38a:	84 83       	std	Z+4, r24	; 0x04
     38c:	08 95       	ret
     38e:	e0 e4       	ldi	r30, 0x40	; 64
     390:	f6 e0       	ldi	r31, 0x06	; 6
     392:	84 81       	ldd	r24, Z+4	; 0x04
     394:	87 7f       	andi	r24, 0xF7	; 247
     396:	84 83       	std	Z+4, r24	; 0x04
     398:	08 95       	ret
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	91 05       	cpc	r25, r1
     39e:	59 f0       	breq	.+22     	; 0x3b6 <_Z10SetAxisEMGic+0x62>
     3a0:	82 30       	cpi	r24, 0x02	; 2
     3a2:	91 05       	cpc	r25, r1
     3a4:	71 f0       	breq	.+28     	; 0x3c2 <_Z10SetAxisEMGic+0x6e>
     3a6:	89 2b       	or	r24, r25
     3a8:	89 f4       	brne	.+34     	; 0x3cc <_Z10SetAxisEMGic+0x78>
     3aa:	e0 e0       	ldi	r30, 0x00	; 0
     3ac:	f6 e0       	ldi	r31, 0x06	; 6
     3ae:	84 81       	ldd	r24, Z+4	; 0x04
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	84 83       	std	Z+4, r24	; 0x04
     3b4:	08 95       	ret
     3b6:	e0 e2       	ldi	r30, 0x20	; 32
     3b8:	f6 e0       	ldi	r31, 0x06	; 6
     3ba:	84 81       	ldd	r24, Z+4	; 0x04
     3bc:	80 61       	ori	r24, 0x10	; 16
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	08 95       	ret
     3c2:	e0 e4       	ldi	r30, 0x40	; 64
     3c4:	f6 e0       	ldi	r31, 0x06	; 6
     3c6:	84 81       	ldd	r24, Z+4	; 0x04
     3c8:	88 60       	ori	r24, 0x08	; 8
     3ca:	84 83       	std	Z+4, r24	; 0x04
     3cc:	08 95       	ret

000003ce <_Z13SetAxisEnableic>:
     3ce:	fc 01       	movw	r30, r24
     3d0:	e7 52       	subi	r30, 0x27	; 39
     3d2:	f9 4d       	sbci	r31, 0xD9	; 217
     3d4:	60 83       	st	Z, r22
     3d6:	66 23       	and	r22, r22
     3d8:	19 f0       	breq	.+6      	; 0x3e0 <_Z13SetAxisEnableic+0x12>
     3da:	61 30       	cpi	r22, 0x01	; 1
     3dc:	d9 f0       	breq	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3de:	08 95       	ret
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	91 05       	cpc	r25, r1
     3e4:	59 f0       	breq	.+22     	; 0x3fc <_Z13SetAxisEnableic+0x2e>
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	91 05       	cpc	r25, r1
     3ea:	71 f0       	breq	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3ec:	89 2b       	or	r24, r25
     3ee:	59 f5       	brne	.+86     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3f0:	e0 e0       	ldi	r30, 0x00	; 0
     3f2:	f6 e0       	ldi	r31, 0x06	; 6
     3f4:	84 81       	ldd	r24, Z+4	; 0x04
     3f6:	8f 77       	andi	r24, 0x7F	; 127
     3f8:	84 83       	std	Z+4, r24	; 0x04
     3fa:	08 95       	ret
     3fc:	e0 e2       	ldi	r30, 0x20	; 32
     3fe:	f6 e0       	ldi	r31, 0x06	; 6
     400:	84 81       	ldd	r24, Z+4	; 0x04
     402:	8f 77       	andi	r24, 0x7F	; 127
     404:	84 83       	std	Z+4, r24	; 0x04
     406:	08 95       	ret
     408:	e0 e4       	ldi	r30, 0x40	; 64
     40a:	f6 e0       	ldi	r31, 0x06	; 6
     40c:	84 81       	ldd	r24, Z+4	; 0x04
     40e:	8f 77       	andi	r24, 0x7F	; 127
     410:	84 83       	std	Z+4, r24	; 0x04
     412:	08 95       	ret
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	91 05       	cpc	r25, r1
     418:	59 f0       	breq	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	91 05       	cpc	r25, r1
     41e:	71 f0       	breq	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     420:	89 2b       	or	r24, r25
     422:	89 f4       	brne	.+34     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     424:	e0 e0       	ldi	r30, 0x00	; 0
     426:	f6 e0       	ldi	r31, 0x06	; 6
     428:	84 81       	ldd	r24, Z+4	; 0x04
     42a:	80 68       	ori	r24, 0x80	; 128
     42c:	84 83       	std	Z+4, r24	; 0x04
     42e:	08 95       	ret
     430:	e0 e2       	ldi	r30, 0x20	; 32
     432:	f6 e0       	ldi	r31, 0x06	; 6
     434:	84 81       	ldd	r24, Z+4	; 0x04
     436:	80 68       	ori	r24, 0x80	; 128
     438:	84 83       	std	Z+4, r24	; 0x04
     43a:	08 95       	ret
     43c:	e0 e4       	ldi	r30, 0x40	; 64
     43e:	f6 e0       	ldi	r31, 0x06	; 6
     440:	84 81       	ldd	r24, Z+4	; 0x04
     442:	80 68       	ori	r24, 0x80	; 128
     444:	84 83       	std	Z+4, r24	; 0x04
     446:	08 95       	ret

00000448 <_Z9AxisAlarmc>:
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	51 f0       	breq	.+20     	; 0x460 <_Z9AxisAlarmc+0x18>
     44c:	18 f0       	brcs	.+6      	; 0x454 <_Z9AxisAlarmc+0xc>
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	61 f0       	breq	.+24     	; 0x46a <_Z9AxisAlarmc+0x22>
     452:	0f c0       	rjmp	.+30     	; 0x472 <_Z9AxisAlarmc+0x2a>
     454:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     458:	82 fb       	bst	r24, 2
     45a:	88 27       	eor	r24, r24
     45c:	80 f9       	bld	r24, 0
     45e:	08 95       	ret
     460:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     464:	86 95       	lsr	r24
     466:	81 70       	andi	r24, 0x01	; 1
     468:	08 95       	ret
     46a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     46e:	81 70       	andi	r24, 0x01	; 1
     470:	08 95       	ret
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	08 95       	ret

00000476 <_Z9AxisInPosc>:
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	49 f0       	breq	.+18     	; 0x48c <_Z9AxisInPosc+0x16>
     47a:	18 f0       	brcs	.+6      	; 0x482 <_Z9AxisInPosc+0xc>
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	61 f0       	breq	.+24     	; 0x498 <_Z9AxisInPosc+0x22>
     480:	10 c0       	rjmp	.+32     	; 0x4a2 <_Z9AxisInPosc+0x2c>
     482:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     486:	86 95       	lsr	r24
     488:	81 70       	andi	r24, 0x01	; 1
     48a:	08 95       	ret
     48c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     490:	82 fb       	bst	r24, 2
     492:	88 27       	eor	r24, r24
     494:	80 f9       	bld	r24, 0
     496:	08 95       	ret
     498:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     49c:	86 95       	lsr	r24
     49e:	81 70       	andi	r24, 0x01	; 1
     4a0:	08 95       	ret
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	08 95       	ret

000004a6 <_Z12AxisLimitNegc>:
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	49 f0       	breq	.+18     	; 0x4bc <_Z12AxisLimitNegc+0x16>
     4aa:	18 f0       	brcs	.+6      	; 0x4b2 <_Z12AxisLimitNegc+0xc>
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	61 f0       	breq	.+24     	; 0x4c8 <_Z12AxisLimitNegc+0x22>
     4b0:	10 c0       	rjmp	.+32     	; 0x4d2 <_Z12AxisLimitNegc+0x2c>
     4b2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     4b6:	82 95       	swap	r24
     4b8:	81 70       	andi	r24, 0x01	; 1
     4ba:	08 95       	ret
     4bc:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     4c0:	86 fb       	bst	r24, 6
     4c2:	88 27       	eor	r24, r24
     4c4:	80 f9       	bld	r24, 0
     4c6:	08 95       	ret
     4c8:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     4cc:	82 95       	swap	r24
     4ce:	81 70       	andi	r24, 0x01	; 1
     4d0:	08 95       	ret
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret

000004d6 <_Z12AxisLimitPosc>:
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	51 f0       	breq	.+20     	; 0x4ee <_Z12AxisLimitPosc+0x18>
     4da:	18 f0       	brcs	.+6      	; 0x4e2 <_Z12AxisLimitPosc+0xc>
     4dc:	82 30       	cpi	r24, 0x02	; 2
     4de:	59 f0       	breq	.+22     	; 0x4f6 <_Z12AxisLimitPosc+0x20>
     4e0:	10 c0       	rjmp	.+32     	; 0x502 <_Z12AxisLimitPosc+0x2c>
     4e2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     4e6:	83 fb       	bst	r24, 3
     4e8:	88 27       	eor	r24, r24
     4ea:	80 f9       	bld	r24, 0
     4ec:	08 95       	ret
     4ee:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     4f2:	81 70       	andi	r24, 0x01	; 1
     4f4:	08 95       	ret
     4f6:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     4fa:	85 fb       	bst	r24, 5
     4fc:	88 27       	eor	r24, r24
     4fe:	80 f9       	bld	r24, 0
     500:	08 95       	ret
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret

00000506 <_Z7AxisRefc>:
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	51 f0       	breq	.+20     	; 0x51e <_Z7AxisRefc+0x18>
     50a:	18 f0       	brcs	.+6      	; 0x512 <_Z7AxisRefc+0xc>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	69 f0       	breq	.+26     	; 0x52a <_Z7AxisRefc+0x24>
     510:	12 c0       	rjmp	.+36     	; 0x536 <_Z7AxisRefc+0x30>
     512:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     516:	85 fb       	bst	r24, 5
     518:	88 27       	eor	r24, r24
     51a:	80 f9       	bld	r24, 0
     51c:	08 95       	ret
     51e:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     522:	85 fb       	bst	r24, 5
     524:	88 27       	eor	r24, r24
     526:	80 f9       	bld	r24, 0
     528:	08 95       	ret
     52a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     52e:	86 fb       	bst	r24, 6
     530:	88 27       	eor	r24, r24
     532:	80 f9       	bld	r24, 0
     534:	08 95       	ret
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	08 95       	ret

0000053a <_Z10ports_initv>:
     53a:	e0 e0       	ldi	r30, 0x00	; 0
     53c:	f6 e0       	ldi	r31, 0x06	; 6
     53e:	14 82       	std	Z+4, r1	; 0x04
     540:	80 ec       	ldi	r24, 0xC0	; 192
     542:	80 83       	st	Z, r24
     544:	10 8a       	std	Z+16, r1	; 0x10
     546:	11 8a       	std	Z+17, r1	; 0x11
     548:	12 8a       	std	Z+18, r1	; 0x12
     54a:	13 8a       	std	Z+19, r1	; 0x13
     54c:	14 8a       	std	Z+20, r1	; 0x14
     54e:	15 8a       	std	Z+21, r1	; 0x15
     550:	16 8a       	std	Z+22, r1	; 0x16
     552:	17 8a       	std	Z+23, r1	; 0x17
     554:	81 85       	ldd	r24, Z+9	; 0x09
     556:	80 7f       	andi	r24, 0xF0	; 240
     558:	81 87       	std	Z+9, r24	; 0x09
     55a:	12 86       	std	Z+10, r1	; 0x0a
     55c:	13 86       	std	Z+11, r1	; 0x0b
     55e:	e0 e2       	ldi	r30, 0x20	; 32
     560:	f6 e0       	ldi	r31, 0x06	; 6
     562:	14 82       	std	Z+4, r1	; 0x04
     564:	80 e9       	ldi	r24, 0x90	; 144
     566:	80 83       	st	Z, r24
     568:	10 8a       	std	Z+16, r1	; 0x10
     56a:	11 8a       	std	Z+17, r1	; 0x11
     56c:	12 8a       	std	Z+18, r1	; 0x12
     56e:	13 8a       	std	Z+19, r1	; 0x13
     570:	14 8a       	std	Z+20, r1	; 0x14
     572:	15 8a       	std	Z+21, r1	; 0x15
     574:	16 8a       	std	Z+22, r1	; 0x16
     576:	17 8a       	std	Z+23, r1	; 0x17
     578:	81 85       	ldd	r24, Z+9	; 0x09
     57a:	80 7f       	andi	r24, 0xF0	; 240
     57c:	81 87       	std	Z+9, r24	; 0x09
     57e:	12 86       	std	Z+10, r1	; 0x0a
     580:	13 86       	std	Z+11, r1	; 0x0b
     582:	e0 e4       	ldi	r30, 0x40	; 64
     584:	f6 e0       	ldi	r31, 0x06	; 6
     586:	88 e8       	ldi	r24, 0x88	; 136
     588:	84 83       	std	Z+4, r24	; 0x04
     58a:	98 e0       	ldi	r25, 0x08	; 8
     58c:	90 83       	st	Z, r25
     58e:	10 8a       	std	Z+16, r1	; 0x10
     590:	11 8a       	std	Z+17, r1	; 0x11
     592:	12 8a       	std	Z+18, r1	; 0x12
     594:	13 8a       	std	Z+19, r1	; 0x13
     596:	14 8a       	std	Z+20, r1	; 0x14
     598:	15 8a       	std	Z+21, r1	; 0x15
     59a:	16 8a       	std	Z+22, r1	; 0x16
     59c:	17 8a       	std	Z+23, r1	; 0x17
     59e:	81 85       	ldd	r24, Z+9	; 0x09
     5a0:	80 7f       	andi	r24, 0xF0	; 240
     5a2:	81 87       	std	Z+9, r24	; 0x09
     5a4:	12 86       	std	Z+10, r1	; 0x0a
     5a6:	13 86       	std	Z+11, r1	; 0x0b
     5a8:	e0 e6       	ldi	r30, 0x60	; 96
     5aa:	f6 e0       	ldi	r31, 0x06	; 6
     5ac:	14 82       	std	Z+4, r1	; 0x04
     5ae:	10 82       	st	Z, r1
     5b0:	10 8a       	std	Z+16, r1	; 0x10
     5b2:	11 8a       	std	Z+17, r1	; 0x11
     5b4:	12 8a       	std	Z+18, r1	; 0x12
     5b6:	13 8a       	std	Z+19, r1	; 0x13
     5b8:	14 8a       	std	Z+20, r1	; 0x14
     5ba:	15 8a       	std	Z+21, r1	; 0x15
     5bc:	16 8a       	std	Z+22, r1	; 0x16
     5be:	17 8a       	std	Z+23, r1	; 0x17
     5c0:	81 85       	ldd	r24, Z+9	; 0x09
     5c2:	80 7f       	andi	r24, 0xF0	; 240
     5c4:	85 60       	ori	r24, 0x05	; 5
     5c6:	81 87       	std	Z+9, r24	; 0x09
     5c8:	92 87       	std	Z+10, r25	; 0x0a
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	83 87       	std	Z+11, r24	; 0x0b
     5ce:	e0 e8       	ldi	r30, 0x80	; 128
     5d0:	f6 e0       	ldi	r31, 0x06	; 6
     5d2:	14 82       	std	Z+4, r1	; 0x04
     5d4:	86 eb       	ldi	r24, 0xB6	; 182
     5d6:	80 83       	st	Z, r24
     5d8:	10 8a       	std	Z+16, r1	; 0x10
     5da:	11 8a       	std	Z+17, r1	; 0x11
     5dc:	12 8a       	std	Z+18, r1	; 0x12
     5de:	13 8a       	std	Z+19, r1	; 0x13
     5e0:	14 8a       	std	Z+20, r1	; 0x14
     5e2:	15 8a       	std	Z+21, r1	; 0x15
     5e4:	16 8a       	std	Z+22, r1	; 0x16
     5e6:	17 8a       	std	Z+23, r1	; 0x17
     5e8:	81 85       	ldd	r24, Z+9	; 0x09
     5ea:	80 7f       	andi	r24, 0xF0	; 240
     5ec:	81 87       	std	Z+9, r24	; 0x09
     5ee:	12 86       	std	Z+10, r1	; 0x0a
     5f0:	13 86       	std	Z+11, r1	; 0x0b
     5f2:	e0 ea       	ldi	r30, 0xA0	; 160
     5f4:	f6 e0       	ldi	r31, 0x06	; 6
     5f6:	14 82       	std	Z+4, r1	; 0x04
     5f8:	81 e4       	ldi	r24, 0x41	; 65
     5fa:	80 83       	st	Z, r24
     5fc:	10 8a       	std	Z+16, r1	; 0x10
     5fe:	11 8a       	std	Z+17, r1	; 0x11
     600:	12 8a       	std	Z+18, r1	; 0x12
     602:	13 8a       	std	Z+19, r1	; 0x13
     604:	14 8a       	std	Z+20, r1	; 0x14
     606:	15 8a       	std	Z+21, r1	; 0x15
     608:	16 8a       	std	Z+22, r1	; 0x16
     60a:	17 8a       	std	Z+23, r1	; 0x17
     60c:	81 85       	ldd	r24, Z+9	; 0x09
     60e:	80 7f       	andi	r24, 0xF0	; 240
     610:	81 87       	std	Z+9, r24	; 0x09
     612:	12 86       	std	Z+10, r1	; 0x0a
     614:	13 86       	std	Z+11, r1	; 0x0b
     616:	e0 ee       	ldi	r30, 0xE0	; 224
     618:	f6 e0       	ldi	r31, 0x06	; 6
     61a:	14 82       	std	Z+4, r1	; 0x04
     61c:	8c ef       	ldi	r24, 0xFC	; 252
     61e:	80 83       	st	Z, r24
     620:	10 8a       	std	Z+16, r1	; 0x10
     622:	11 8a       	std	Z+17, r1	; 0x11
     624:	12 8a       	std	Z+18, r1	; 0x12
     626:	13 8a       	std	Z+19, r1	; 0x13
     628:	14 8a       	std	Z+20, r1	; 0x14
     62a:	15 8a       	std	Z+21, r1	; 0x15
     62c:	16 8a       	std	Z+22, r1	; 0x16
     62e:	17 8a       	std	Z+23, r1	; 0x17
     630:	81 85       	ldd	r24, Z+9	; 0x09
     632:	80 7f       	andi	r24, 0xF0	; 240
     634:	81 60       	ori	r24, 0x01	; 1
     636:	81 87       	std	Z+9, r24	; 0x09
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	82 87       	std	Z+10, r24	; 0x0a
     63c:	13 86       	std	Z+11, r1	; 0x0b
     63e:	e0 e0       	ldi	r30, 0x00	; 0
     640:	f7 e0       	ldi	r31, 0x07	; 7
     642:	14 82       	std	Z+4, r1	; 0x04
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	80 83       	st	Z, r24
     648:	10 8a       	std	Z+16, r1	; 0x10
     64a:	11 8a       	std	Z+17, r1	; 0x11
     64c:	12 8a       	std	Z+18, r1	; 0x12
     64e:	13 8a       	std	Z+19, r1	; 0x13
     650:	14 8a       	std	Z+20, r1	; 0x14
     652:	15 8a       	std	Z+21, r1	; 0x15
     654:	16 8a       	std	Z+22, r1	; 0x16
     656:	17 8a       	std	Z+23, r1	; 0x17
     658:	81 85       	ldd	r24, Z+9	; 0x09
     65a:	80 7f       	andi	r24, 0xF0	; 240
     65c:	81 87       	std	Z+9, r24	; 0x09
     65e:	12 86       	std	Z+10, r1	; 0x0a
     660:	13 86       	std	Z+11, r1	; 0x0b
     662:	e0 e2       	ldi	r30, 0x20	; 32
     664:	f7 e0       	ldi	r31, 0x07	; 7
     666:	14 82       	std	Z+4, r1	; 0x04
     668:	8f e3       	ldi	r24, 0x3F	; 63
     66a:	80 83       	st	Z, r24
     66c:	10 8a       	std	Z+16, r1	; 0x10
     66e:	11 8a       	std	Z+17, r1	; 0x11
     670:	12 8a       	std	Z+18, r1	; 0x12
     672:	13 8a       	std	Z+19, r1	; 0x13
     674:	14 8a       	std	Z+20, r1	; 0x14
     676:	15 8a       	std	Z+21, r1	; 0x15
     678:	16 8a       	std	Z+22, r1	; 0x16
     67a:	17 8a       	std	Z+23, r1	; 0x17
     67c:	81 85       	ldd	r24, Z+9	; 0x09
     67e:	80 7f       	andi	r24, 0xF0	; 240
     680:	81 87       	std	Z+9, r24	; 0x09
     682:	12 86       	std	Z+10, r1	; 0x0a
     684:	13 86       	std	Z+11, r1	; 0x0b
     686:	e0 ec       	ldi	r30, 0xC0	; 192
     688:	f7 e0       	ldi	r31, 0x07	; 7
     68a:	14 82       	std	Z+4, r1	; 0x04
     68c:	10 82       	st	Z, r1
     68e:	10 8a       	std	Z+16, r1	; 0x10
     690:	11 8a       	std	Z+17, r1	; 0x11
     692:	12 8a       	std	Z+18, r1	; 0x12
     694:	13 8a       	std	Z+19, r1	; 0x13
     696:	81 85       	ldd	r24, Z+9	; 0x09
     698:	80 7f       	andi	r24, 0xF0	; 240
     69a:	81 87       	std	Z+9, r24	; 0x09
     69c:	12 86       	std	Z+10, r1	; 0x0a
     69e:	13 86       	std	Z+11, r1	; 0x0b
     6a0:	e0 ee       	ldi	r30, 0xE0	; 224
     6a2:	f7 e0       	ldi	r31, 0x07	; 7
     6a4:	14 82       	std	Z+4, r1	; 0x04
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	80 83       	st	Z, r24
     6aa:	10 8a       	std	Z+16, r1	; 0x10
     6ac:	11 8a       	std	Z+17, r1	; 0x11
     6ae:	81 85       	ldd	r24, Z+9	; 0x09
     6b0:	80 7f       	andi	r24, 0xF0	; 240
     6b2:	81 87       	std	Z+9, r24	; 0x09
     6b4:	12 86       	std	Z+10, r1	; 0x0a
     6b6:	13 86       	std	Z+11, r1	; 0x0b
     6b8:	08 95       	ret

000006ba <_Z9spif_initv>:
     6ba:	e0 ec       	ldi	r30, 0xC0	; 192
     6bc:	fb e0       	ldi	r31, 0x0B	; 11
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	80 83       	st	Z, r24
     6c2:	83 e0       	ldi	r24, 0x03	; 3
     6c4:	81 83       	std	Z+1, r24	; 0x01
     6c6:	08 95       	ret

000006c8 <__vector_118>:
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
     6d2:	08 b6       	in	r0, 0x38	; 56
     6d4:	0f 92       	push	r0
     6d6:	18 be       	out	0x38, r1	; 56
     6d8:	09 b6       	in	r0, 0x39	; 57
     6da:	0f 92       	push	r0
     6dc:	19 be       	out	0x39, r1	; 57
     6de:	0a b6       	in	r0, 0x3a	; 58
     6e0:	0f 92       	push	r0
     6e2:	1a be       	out	0x3a, r1	; 58
     6e4:	0b b6       	in	r0, 0x3b	; 59
     6e6:	0f 92       	push	r0
     6e8:	1b be       	out	0x3b, r1	; 59
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ef 93       	push	r30
     6fc:	ff 93       	push	r31
     6fe:	e0 ec       	ldi	r30, 0xC0	; 192
     700:	fb e0       	ldi	r31, 0x0B	; 11
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	80 91 9c 25 	lds	r24, 0x259C	; 0x80259c <Responsing>
     70a:	81 11       	cpse	r24, r1
     70c:	39 c0       	rjmp	.+114    	; 0x780 <__vector_118+0xb8>
     70e:	9d 30       	cpi	r25, 0x0D	; 13
     710:	b9 f0       	breq	.+46     	; 0x740 <__vector_118+0x78>
     712:	99 23       	and	r25, r25
     714:	09 f4       	brne	.+2      	; 0x718 <__vector_118+0x50>
     716:	55 c0       	rjmp	.+170    	; 0x7c2 <__vector_118+0xfa>
     718:	20 91 9d 25 	lds	r18, 0x259D	; 0x80259d <indexBR>
     71c:	30 91 9e 25 	lds	r19, 0x259E	; 0x80259e <indexBR+0x1>
     720:	24 36       	cpi	r18, 0x64	; 100
     722:	31 05       	cpc	r19, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <__vector_118+0x60>
     726:	4f c0       	rjmp	.+158    	; 0x7c6 <__vector_118+0xfe>
     728:	f9 01       	movw	r30, r18
     72a:	ed 5f       	subi	r30, 0xFD	; 253
     72c:	f9 4d       	sbci	r31, 0xD9	; 217
     72e:	90 83       	st	Z, r25
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	20 93 9d 25 	sts	0x259D, r18	; 0x80259d <indexBR>
     738:	30 93 9e 25 	sts	0x259E, r19	; 0x80259e <indexBR+0x1>
     73c:	20 e2       	ldi	r18, 0x20	; 32
     73e:	44 c0       	rjmp	.+136    	; 0x7c8 <__vector_118+0x100>
     740:	cf e9       	ldi	r28, 0x9F	; 159
     742:	d5 e2       	ldi	r29, 0x25	; 37
     744:	a3 e0       	ldi	r26, 0x03	; 3
     746:	b6 e2       	ldi	r27, 0x26	; 38
     748:	87 e6       	ldi	r24, 0x67	; 103
     74a:	96 e2       	ldi	r25, 0x26	; 38
     74c:	fd 01       	movw	r30, r26
     74e:	20 81       	ld	r18, Z
     750:	29 93       	st	Y+, r18
     752:	11 92       	st	Z+, r1
     754:	e8 17       	cp	r30, r24
     756:	f9 07       	cpc	r31, r25
     758:	d1 f7       	brne	.-12     	; 0x74e <__vector_118+0x86>
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	20 93 9b 25 	sts	0x259B, r18	; 0x80259b <cmdIsReady>
     760:	1d 92       	st	X+, r1
     762:	a8 17       	cp	r26, r24
     764:	b9 07       	cpc	r27, r25
     766:	e1 f7       	brne	.-8      	; 0x760 <__vector_118+0x98>
     768:	84 e6       	ldi	r24, 0x64	; 100
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	80 93 99 25 	sts	0x2599, r24	; 0x802599 <h>
     770:	90 93 9a 25 	sts	0x259A, r25	; 0x80259a <h+0x1>
     774:	10 92 9d 25 	sts	0x259D, r1	; 0x80259d <indexBR>
     778:	10 92 9e 25 	sts	0x259E, r1	; 0x80259e <indexBR+0x1>
     77c:	20 e2       	ldi	r18, 0x20	; 32
     77e:	24 c0       	rjmp	.+72     	; 0x7c8 <__vector_118+0x100>
     780:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <indexBS>
     784:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <indexBS+0x1>
     788:	84 36       	cpi	r24, 0x64	; 100
     78a:	91 05       	cpc	r25, r1
     78c:	2c f4       	brge	.+10     	; 0x798 <__vector_118+0xd0>
     78e:	fc 01       	movw	r30, r24
     790:	e7 59       	subi	r30, 0x97	; 151
     792:	f9 4d       	sbci	r31, 0xD9	; 217
     794:	20 81       	ld	r18, Z
     796:	01 c0       	rjmp	.+2      	; 0x79a <__vector_118+0xd2>
     798:	20 e2       	ldi	r18, 0x20	; 32
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	80 93 67 26 	sts	0x2667, r24	; 0x802667 <indexBS>
     7a0:	90 93 68 26 	sts	0x2668, r25	; 0x802668 <indexBS+0x1>
     7a4:	85 36       	cpi	r24, 0x65	; 101
     7a6:	91 05       	cpc	r25, r1
     7a8:	79 f4       	brne	.+30     	; 0x7c8 <__vector_118+0x100>
     7aa:	e0 ea       	ldi	r30, 0xA0	; 160
     7ac:	f6 e0       	ldi	r31, 0x06	; 6
     7ae:	84 81       	ldd	r24, Z+4	; 0x04
     7b0:	8e 7f       	andi	r24, 0xFE	; 254
     7b2:	84 83       	std	Z+4, r24	; 0x04
     7b4:	10 92 9c 25 	sts	0x259C, r1	; 0x80259c <Responsing>
     7b8:	10 92 67 26 	sts	0x2667, r1	; 0x802667 <indexBS>
     7bc:	10 92 68 26 	sts	0x2668, r1	; 0x802668 <indexBS+0x1>
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <__vector_118+0x100>
     7c2:	20 e2       	ldi	r18, 0x20	; 32
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <__vector_118+0x100>
     7c6:	20 e2       	ldi	r18, 0x20	; 32
     7c8:	20 93 c3 0b 	sts	0x0BC3, r18	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
     7cc:	ff 91       	pop	r31
     7ce:	ef 91       	pop	r30
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	3f 91       	pop	r19
     7de:	2f 91       	pop	r18
     7e0:	0f 90       	pop	r0
     7e2:	0b be       	out	0x3b, r0	; 59
     7e4:	0f 90       	pop	r0
     7e6:	0a be       	out	0x3a, r0	; 58
     7e8:	0f 90       	pop	r0
     7ea:	09 be       	out	0x39, r0	; 57
     7ec:	0f 90       	pop	r0
     7ee:	08 be       	out	0x38, r0	; 56
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <_Z9spie_initv>:
     7fa:	e0 ec       	ldi	r30, 0xC0	; 192
     7fc:	fa e0       	ldi	r31, 0x0A	; 10
     7fe:	83 e5       	ldi	r24, 0x53	; 83
     800:	80 83       	st	Z, r24
     802:	11 82       	std	Z+1, r1	; 0x01
     804:	08 95       	ret

00000806 <_Z17spie_master_tx_rxh>:
     806:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     80a:	e0 ec       	ldi	r30, 0xC0	; 192
     80c:	fa e0       	ldi	r31, 0x0A	; 10
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	88 23       	and	r24, r24
     812:	ec f7       	brge	.-6      	; 0x80e <_Z17spie_master_tx_rxh+0x8>
     814:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     818:	08 95       	ret

0000081a <_Z4ltoblPc>:
     81a:	fa 01       	movw	r30, r20
     81c:	60 83       	st	Z, r22
     81e:	71 83       	std	Z+1, r23	; 0x01
     820:	82 83       	std	Z+2, r24	; 0x02
     822:	93 83       	std	Z+3, r25	; 0x03
     824:	08 95       	ret

00000826 <_Z4btolPc>:
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	fc 01       	movw	r30, r24
     82c:	03 81       	ldd	r16, Z+3	; 0x03
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	30 2f       	mov	r19, r16
     836:	22 27       	eor	r18, r18
     838:	11 27       	eor	r17, r17
     83a:	00 27       	eor	r16, r16
     83c:	42 81       	ldd	r20, Z+2	; 0x02
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	ba 01       	movw	r22, r20
     846:	55 27       	eor	r21, r21
     848:	44 27       	eor	r20, r20
     84a:	04 0f       	add	r16, r20
     84c:	15 1f       	adc	r17, r21
     84e:	26 1f       	adc	r18, r22
     850:	37 1f       	adc	r19, r23
     852:	41 81       	ldd	r20, Z+1	; 0x01
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	76 2f       	mov	r23, r22
     85c:	65 2f       	mov	r22, r21
     85e:	54 2f       	mov	r21, r20
     860:	44 27       	eor	r20, r20
     862:	d9 01       	movw	r26, r18
     864:	c8 01       	movw	r24, r16
     866:	84 0f       	add	r24, r20
     868:	95 1f       	adc	r25, r21
     86a:	a6 1f       	adc	r26, r22
     86c:	b7 1f       	adc	r27, r23
     86e:	20 81       	ld	r18, Z
     870:	bc 01       	movw	r22, r24
     872:	cd 01       	movw	r24, r26
     874:	62 0f       	add	r22, r18
     876:	71 1d       	adc	r23, r1
     878:	81 1d       	adc	r24, r1
     87a:	91 1d       	adc	r25, r1
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	08 95       	ret

00000882 <_Z10ReadConfigv>:
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <_Z10ReadConfigv+0x16>
     898:	1f 92       	push	r1
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	10 92 94 25 	sts	0x2594, r1	; 0x802594 <fk>
     8a2:	10 92 95 25 	sts	0x2595, r1	; 0x802595 <fk+0x1>
     8a6:	10 92 96 25 	sts	0x2596, r1	; 0x802596 <fk+0x2>
     8aa:	10 92 97 25 	sts	0x2597, r1	; 0x802597 <fk+0x3>
     8ae:	10 92 92 25 	sts	0x2592, r1	; 0x802592 <ft>
     8b2:	10 92 93 25 	sts	0x2593, r1	; 0x802593 <ft+0x1>
     8b6:	10 92 91 25 	sts	0x2591, r1	; 0x802591 <fadd1>
     8ba:	10 92 90 25 	sts	0x2590, r1	; 0x802590 <fadd2>
     8be:	e0 e8       	ldi	r30, 0x80	; 128
     8c0:	f6 e0       	ldi	r31, 0x06	; 6
     8c2:	84 81       	ldd	r24, Z+4	; 0x04
     8c4:	80 61       	ori	r24, 0x10	; 16
     8c6:	84 83       	std	Z+4, r24	; 0x04
     8c8:	84 81       	ldd	r24, Z+4	; 0x04
     8ca:	8f 7e       	andi	r24, 0xEF	; 239
     8cc:	84 83       	std	Z+4, r24	; 0x04
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     8d4:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
     8d8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     8dc:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
     8e0:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     8ea:	0b ec       	ldi	r16, 0xCB	; 203
     8ec:	14 e2       	ldi	r17, 0x24	; 36
     8ee:	e1 2c       	mov	r14, r1
     8f0:	f1 2c       	mov	r15, r1
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f2 e0       	ldi	r31, 0x02	; 2
     8f6:	af 2e       	mov	r10, r31
     8f8:	f0 e2       	ldi	r31, 0x20	; 32
     8fa:	bf 2e       	mov	r11, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	0f 2e       	mov	r0, r31
     900:	f3 e2       	ldi	r31, 0x23	; 35
     902:	cf 2e       	mov	r12, r31
     904:	f0 e2       	ldi	r31, 0x20	; 32
     906:	df 2e       	mov	r13, r31
     908:	f0 2d       	mov	r31, r0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     910:	8a 83       	std	Y+2, r24	; 0x02
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	2a 81       	ldd	r18, Y+2	; 0x02
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	32 2f       	mov	r19, r18
     920:	22 27       	eor	r18, r18
     922:	a9 01       	movw	r20, r18
     924:	48 0f       	add	r20, r24
     926:	51 1d       	adc	r21, r1
     928:	f8 01       	movw	r30, r16
     92a:	40 83       	st	Z, r20
     92c:	51 83       	std	Z+1, r21	; 0x01
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     934:	f8 01       	movw	r30, r16
     936:	82 83       	std	Z+2, r24	; 0x02
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     93e:	f8 01       	movw	r30, r16
     940:	83 83       	std	Z+3, r24	; 0x03
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     948:	f8 01       	movw	r30, r16
     94a:	84 83       	std	Z+4, r24	; 0x04
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     952:	8c 83       	std	Y+4, r24	; 0x04
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     95a:	8b 83       	std	Y+3, r24	; 0x03
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     962:	8a 83       	std	Y+2, r24	; 0x02
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     974:	f8 01       	movw	r30, r16
     976:	65 83       	std	Z+5, r22	; 0x05
     978:	76 83       	std	Z+6, r23	; 0x06
     97a:	87 83       	std	Z+7, r24	; 0x07
     97c:	90 87       	std	Z+8, r25	; 0x08
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     984:	8c 83       	std	Y+4, r24	; 0x04
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     98c:	8b 83       	std	Y+3, r24	; 0x03
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     994:	8a 83       	std	Y+2, r24	; 0x02
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     9a6:	f8 01       	movw	r30, r16
     9a8:	61 87       	std	Z+9, r22	; 0x09
     9aa:	72 87       	std	Z+10, r23	; 0x0a
     9ac:	83 87       	std	Z+11, r24	; 0x0b
     9ae:	94 87       	std	Z+12, r25	; 0x0c
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9b6:	8c 83       	std	Y+4, r24	; 0x04
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9c6:	8a 83       	std	Y+2, r24	; 0x02
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	ce 01       	movw	r24, r28
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     9d8:	f8 01       	movw	r30, r16
     9da:	65 87       	std	Z+13, r22	; 0x0d
     9dc:	76 87       	std	Z+14, r23	; 0x0e
     9de:	87 87       	std	Z+15, r24	; 0x0f
     9e0:	90 8b       	std	Z+16, r25	; 0x10
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9e8:	8c 83       	std	Y+4, r24	; 0x04
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9f0:	8b 83       	std	Y+3, r24	; 0x03
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9f8:	8a 83       	std	Y+2, r24	; 0x02
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     a0a:	f8 01       	movw	r30, r16
     a0c:	61 8b       	std	Z+17, r22	; 0x11
     a0e:	72 8b       	std	Z+18, r23	; 0x12
     a10:	83 8b       	std	Z+19, r24	; 0x13
     a12:	94 8b       	std	Z+20, r25	; 0x14
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a1a:	8c 83       	std	Y+4, r24	; 0x04
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a22:	8b 83       	std	Y+3, r24	; 0x03
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a2a:	8a 83       	std	Y+2, r24	; 0x02
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     a3c:	f8 01       	movw	r30, r16
     a3e:	65 8b       	std	Z+21, r22	; 0x15
     a40:	76 8b       	std	Z+22, r23	; 0x16
     a42:	87 8b       	std	Z+23, r24	; 0x17
     a44:	90 8f       	std	Z+24, r25	; 0x18
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	2a 81       	ldd	r18, Y+2	; 0x02
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	32 2f       	mov	r19, r18
     a5c:	22 27       	eor	r18, r18
     a5e:	a9 01       	movw	r20, r18
     a60:	48 0f       	add	r20, r24
     a62:	51 1d       	adc	r21, r1
     a64:	f8 01       	movw	r30, r16
     a66:	41 8f       	std	Z+25, r20	; 0x19
     a68:	52 8f       	std	Z+26, r21	; 0x1a
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a70:	f8 01       	movw	r30, r16
     a72:	83 8f       	std	Z+27, r24	; 0x1b
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a7a:	f8 01       	movw	r30, r16
     a7c:	84 8f       	std	Z+28, r24	; 0x1c
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a84:	8c 83       	std	Y+4, r24	; 0x04
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a8c:	8b 83       	std	Y+3, r24	; 0x03
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a94:	8a 83       	std	Y+2, r24	; 0x02
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     aa6:	f8 01       	movw	r30, r16
     aa8:	65 8f       	std	Z+29, r22	; 0x1d
     aaa:	76 8f       	std	Z+30, r23	; 0x1e
     aac:	87 8f       	std	Z+31, r24	; 0x1f
     aae:	90 a3       	std	Z+32, r25	; 0x20
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ab6:	8c 83       	std	Y+4, r24	; 0x04
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     abe:	8b 83       	std	Y+3, r24	; 0x03
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ac6:	8a 83       	std	Y+2, r24	; 0x02
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     ad8:	f8 01       	movw	r30, r16
     ada:	61 a3       	std	Z+33, r22	; 0x21
     adc:	72 a3       	std	Z+34, r23	; 0x22
     ade:	83 a3       	std	Z+35, r24	; 0x23
     ae0:	94 a3       	std	Z+36, r25	; 0x24
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ae8:	f8 01       	movw	r30, r16
     aea:	85 a3       	std	Z+37, r24	; 0x25
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     af2:	f8 01       	movw	r30, r16
     af4:	86 a3       	std	Z+38, r24	; 0x26
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     afc:	f8 01       	movw	r30, r16
     afe:	87 a3       	std	Z+39, r24	; 0x27
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     b06:	f8 01       	movw	r30, r16
     b08:	80 a7       	std	Z+40, r24	; 0x28
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     b10:	f8 01       	movw	r30, r16
     b12:	81 a7       	std	Z+41, r24	; 0x29
     b14:	1f 92       	push	r1
     b16:	8f 93       	push	r24
     b18:	ff 92       	push	r15
     b1a:	ef 92       	push	r14
     b1c:	bf 92       	push	r11
     b1e:	af 92       	push	r10
     b20:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     b2a:	f8 01       	movw	r30, r16
     b2c:	82 a7       	std	Z+42, r24	; 0x2a
     b2e:	1f 92       	push	r1
     b30:	8f 93       	push	r24
     b32:	ff 92       	push	r15
     b34:	ef 92       	push	r14
     b36:	df 92       	push	r13
     b38:	cf 92       	push	r12
     b3a:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
     b3e:	ff ef       	ldi	r31, 0xFF	; 255
     b40:	ef 1a       	sub	r14, r31
     b42:	ff 0a       	sbc	r15, r31
     b44:	05 5d       	subi	r16, 0xD5	; 213
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	53 e0       	ldi	r21, 0x03	; 3
     b4e:	e5 16       	cp	r14, r21
     b50:	f1 04       	cpc	r15, r1
     b52:	09 f0       	breq	.+2      	; 0xb56 <_Z10ReadConfigv+0x2d4>
     b54:	da ce       	rjmp	.-588    	; 0x90a <_Z10ReadConfigv+0x88>
     b56:	24 96       	adiw	r28, 0x04	; 4
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	af 90       	pop	r10
     b70:	08 95       	ret

00000b72 <_Z7readRamv>:
     b72:	2f 92       	push	r2
     b74:	3f 92       	push	r3
     b76:	4f 92       	push	r4
     b78:	5f 92       	push	r5
     b7a:	6f 92       	push	r6
     b7c:	7f 92       	push	r7
     b7e:	8f 92       	push	r8
     b80:	9f 92       	push	r9
     b82:	af 92       	push	r10
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	00 d0       	rcall	.+0      	; 0xb98 <_Z7readRamv+0x26>
     b98:	1f 92       	push	r1
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	84 e4       	ldi	r24, 0x44	; 68
     ba0:	90 e2       	ldi	r25, 0x20	; 32
     ba2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
     ba6:	80 91 98 25 	lds	r24, 0x2598	; 0x802598 <ContinuousRead>
     baa:	81 11       	cpse	r24, r1
     bac:	4f c0       	rjmp	.+158    	; 0xc4c <_Z7readRamv+0xda>
     bae:	83 e5       	ldi	r24, 0x53	; 83
     bb0:	90 e2       	ldi	r25, 0x20	; 32
     bb2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
     bb6:	88 ee       	ldi	r24, 0xE8	; 232
     bb8:	93 e0       	ldi	r25, 0x03	; 3
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <fk>
     bc2:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <fk+0x1>
     bc6:	a0 93 96 25 	sts	0x2596, r26	; 0x802596 <fk+0x2>
     bca:	b0 93 97 25 	sts	0x2597, r27	; 0x802597 <fk+0x3>
     bce:	1f 92       	push	r1
     bd0:	1f 92       	push	r1
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	8f 93       	push	r24
     bd6:	88 ee       	ldi	r24, 0xE8	; 232
     bd8:	8f 93       	push	r24
     bda:	88 e6       	ldi	r24, 0x68	; 104
     bdc:	90 e2       	ldi	r25, 0x20	; 32
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
     be6:	80 91 94 25 	lds	r24, 0x2594	; 0x802594 <fk>
     bea:	90 91 95 25 	lds	r25, 0x2595	; 0x802595 <fk+0x1>
     bee:	a0 91 96 25 	lds	r26, 0x2596	; 0x802596 <fk+0x2>
     bf2:	b0 91 97 25 	lds	r27, 0x2597	; 0x802597 <fk+0x3>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	aa 1f       	adc	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <ft>
     c02:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <ft+0x1>
     c06:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <fadd1>
     c0a:	90 93 90 25 	sts	0x2590, r25	; 0x802590 <fadd2>
     c0e:	e0 e8       	ldi	r30, 0x80	; 128
     c10:	f6 e0       	ldi	r31, 0x06	; 6
     c12:	84 81       	ldd	r24, Z+4	; 0x04
     c14:	80 61       	ori	r24, 0x10	; 16
     c16:	84 83       	std	Z+4, r24	; 0x04
     c18:	84 81       	ldd	r24, Z+4	; 0x04
     c1a:	8f 7e       	andi	r24, 0xEF	; 239
     c1c:	84 83       	std	Z+4, r24	; 0x04
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c24:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
     c28:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c2c:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
     c30:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 98 25 	sts	0x2598, r24	; 0x802598 <ContinuousRead>
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c52:	8a 83       	std	Y+2, r24	; 0x02
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	0c e4       	ldi	r16, 0x4C	; 76
     c5e:	15 e2       	ldi	r17, 0x25	; 37
     c60:	2a 81       	ldd	r18, Y+2	; 0x02
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	32 2f       	mov	r19, r18
     c66:	22 27       	eor	r18, r18
     c68:	a9 01       	movw	r20, r18
     c6a:	48 0f       	add	r20, r24
     c6c:	51 1d       	adc	r21, r1
     c6e:	f8 01       	movw	r30, r16
     c70:	40 83       	st	Z, r20
     c72:	51 83       	std	Z+1, r21	; 0x01
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c7a:	f8 01       	movw	r30, r16
     c7c:	82 83       	std	Z+2, r24	; 0x02
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c84:	f8 01       	movw	r30, r16
     c86:	83 83       	std	Z+3, r24	; 0x03
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <_Z7readRamv+0x11c>
     c8c:	22 c1       	rjmp	.+580    	; 0xed2 <_Z7readRamv+0x360>
     c8e:	20 f0       	brcs	.+8      	; 0xc98 <_Z7readRamv+0x126>
     c90:	8a 35       	cpi	r24, 0x5A	; 90
     c92:	09 f4       	brne	.+2      	; 0xc96 <_Z7readRamv+0x124>
     c94:	cd c1       	rjmp	.+922    	; 0x1030 <_Z7readRamv+0x4be>
     c96:	15 c2       	rjmp	.+1066   	; 0x10c2 <_Z7readRamv+0x550>
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c9e:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <CMDPRGlist+0x4>
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <_Z7readRamv+0x136>
     ca6:	8a c0       	rjmp	.+276    	; 0xdbc <_Z7readRamv+0x24a>
     ca8:	0f 2e       	mov	r0, r31
     caa:	f1 e5       	ldi	r31, 0x51	; 81
     cac:	8f 2e       	mov	r8, r31
     cae:	f5 e2       	ldi	r31, 0x25	; 37
     cb0:	9f 2e       	mov	r9, r31
     cb2:	f0 2d       	mov	r31, r0
     cb4:	a1 2c       	mov	r10, r1
     cb6:	b1 2c       	mov	r11, r1
     cb8:	3e 01       	movw	r6, r28
     cba:	f5 e0       	ldi	r31, 0x05	; 5
     cbc:	6f 0e       	add	r6, r31
     cbe:	71 1c       	adc	r7, r1
     cc0:	ae 01       	movw	r20, r28
     cc2:	4f 5f       	subi	r20, 0xFF	; 255
     cc4:	5f 4f       	sbci	r21, 0xFF	; 255
     cc6:	7a 01       	movw	r14, r20
     cc8:	0f 2e       	mov	r0, r31
     cca:	fc e4       	ldi	r31, 0x4C	; 76
     ccc:	4f 2e       	mov	r4, r31
     cce:	f5 e2       	ldi	r31, 0x25	; 37
     cd0:	5f 2e       	mov	r5, r31
     cd2:	f0 2d       	mov	r31, r0
     cd4:	26 2c       	mov	r2, r6
     cd6:	37 2c       	mov	r3, r7
     cd8:	67 01       	movw	r12, r14
     cda:	83 01       	movw	r16, r6
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <_Z7readRamv+0x174>
     cde:	18 16       	cp	r1, r24
     ce0:	19 06       	cpc	r1, r25
     ce2:	ec f0       	brlt	.+58     	; 0xd1e <_Z7readRamv+0x1ac>
     ce4:	6b c0       	rjmp	.+214    	; 0xdbc <_Z7readRamv+0x24a>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     cec:	f8 01       	movw	r30, r16
     cee:	82 93       	st	-Z, r24
     cf0:	8f 01       	movw	r16, r30
     cf2:	ee 16       	cp	r14, r30
     cf4:	ff 06       	cpc	r15, r31
     cf6:	b9 f7       	brne	.-18     	; 0xce6 <_Z7readRamv+0x174>
     cf8:	c7 01       	movw	r24, r14
     cfa:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     cfe:	f4 01       	movw	r30, r8
     d00:	61 93       	st	Z+, r22
     d02:	71 93       	st	Z+, r23
     d04:	81 93       	st	Z+, r24
     d06:	91 93       	st	Z+, r25
     d08:	4f 01       	movw	r8, r30
     d0a:	ff ef       	ldi	r31, 0xFF	; 255
     d0c:	af 1a       	sub	r10, r31
     d0e:	bf 0a       	sbc	r11, r31
     d10:	f2 01       	movw	r30, r4
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a8 16       	cp	r10, r24
     d18:	b9 06       	cpc	r11, r25
     d1a:	e4 f2       	brlt	.-72     	; 0xcd4 <_Z7readRamv+0x162>
     d1c:	e0 cf       	rjmp	.-64     	; 0xcde <_Z7readRamv+0x16c>
     d1e:	0f 2e       	mov	r0, r31
     d20:	f0 e6       	ldi	r31, 0x60	; 96
     d22:	af 2e       	mov	r10, r31
     d24:	f5 e2       	ldi	r31, 0x25	; 37
     d26:	bf 2e       	mov	r11, r31
     d28:	f0 2d       	mov	r31, r0
     d2a:	e1 2c       	mov	r14, r1
     d2c:	f1 2c       	mov	r15, r1
     d2e:	0f 2e       	mov	r0, r31
     d30:	fc e4       	ldi	r31, 0x4C	; 76
     d32:	8f 2e       	mov	r8, r31
     d34:	f5 e2       	ldi	r31, 0x25	; 37
     d36:	9f 2e       	mov	r9, r31
     d38:	f0 2d       	mov	r31, r0
     d3a:	02 2d       	mov	r16, r2
     d3c:	13 2d       	mov	r17, r3
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <_Z7readRamv+0x1d8>
     d40:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
     d44:	81 11       	cpse	r24, r1
     d46:	1e c0       	rjmp	.+60     	; 0xd84 <_Z7readRamv+0x212>
     d48:	39 c0       	rjmp	.+114    	; 0xdbc <_Z7readRamv+0x24a>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     d50:	f8 01       	movw	r30, r16
     d52:	82 93       	st	-Z, r24
     d54:	8f 01       	movw	r16, r30
     d56:	ec 15       	cp	r30, r12
     d58:	fd 05       	cpc	r31, r13
     d5a:	b9 f7       	brne	.-18     	; 0xd4a <_Z7readRamv+0x1d8>
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     d64:	f5 01       	movw	r30, r10
     d66:	61 93       	st	Z+, r22
     d68:	71 93       	st	Z+, r23
     d6a:	81 93       	st	Z+, r24
     d6c:	91 93       	st	Z+, r25
     d6e:	5f 01       	movw	r10, r30
     d70:	ff ef       	ldi	r31, 0xFF	; 255
     d72:	ef 1a       	sub	r14, r31
     d74:	ff 0a       	sbc	r15, r31
     d76:	f4 01       	movw	r30, r8
     d78:	84 81       	ldd	r24, Z+4	; 0x04
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	e8 16       	cp	r14, r24
     d7e:	f9 06       	cpc	r15, r25
     d80:	e4 f2       	brlt	.-72     	; 0xd3a <_Z7readRamv+0x1c8>
     d82:	de cf       	rjmp	.-68     	; 0xd40 <_Z7readRamv+0x1ce>
     d84:	0f 2e       	mov	r0, r31
     d86:	fd e5       	ldi	r31, 0x5D	; 93
     d88:	ef 2e       	mov	r14, r31
     d8a:	f5 e2       	ldi	r31, 0x25	; 37
     d8c:	ff 2e       	mov	r15, r31
     d8e:	f0 2d       	mov	r31, r0
     d90:	00 e0       	ldi	r16, 0x00	; 0
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	0f 2e       	mov	r0, r31
     d96:	fc e4       	ldi	r31, 0x4C	; 76
     d98:	cf 2e       	mov	r12, r31
     d9a:	f5 e2       	ldi	r31, 0x25	; 37
     d9c:	df 2e       	mov	r13, r31
     d9e:	f0 2d       	mov	r31, r0
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     da6:	f7 01       	movw	r30, r14
     da8:	81 93       	st	Z+, r24
     daa:	7f 01       	movw	r14, r30
     dac:	0f 5f       	subi	r16, 0xFF	; 255
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	f6 01       	movw	r30, r12
     db2:	84 81       	ldd	r24, Z+4	; 0x04
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	08 17       	cp	r16, r24
     db8:	19 07       	cpc	r17, r25
     dba:	94 f3       	brlt	.-28     	; 0xda0 <_Z7readRamv+0x22e>
     dbc:	7e 01       	movw	r14, r28
     dbe:	f5 e0       	ldi	r31, 0x05	; 5
     dc0:	ef 0e       	add	r14, r31
     dc2:	f1 1c       	adc	r15, r1
     dc4:	8e 01       	movw	r16, r28
     dc6:	0f 5f       	subi	r16, 0xFF	; 255
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	67 01       	movw	r12, r14
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     dd2:	f6 01       	movw	r30, r12
     dd4:	82 93       	st	-Z, r24
     dd6:	6f 01       	movw	r12, r30
     dd8:	e0 17       	cp	r30, r16
     dda:	f1 07       	cpc	r31, r17
     ddc:	b9 f7       	brne	.-18     	; 0xdcc <_Z7readRamv+0x25a>
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     de6:	60 93 6c 25 	sts	0x256C, r22	; 0x80256c <CMDPRGlist+0x20>
     dea:	70 93 6d 25 	sts	0x256D, r23	; 0x80256d <CMDPRGlist+0x21>
     dee:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <CMDPRGlist+0x22>
     df2:	90 93 6f 25 	sts	0x256F, r25	; 0x80256f <CMDPRGlist+0x23>
     df6:	67 01       	movw	r12, r14
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     dfe:	f6 01       	movw	r30, r12
     e00:	82 93       	st	-Z, r24
     e02:	6f 01       	movw	r12, r30
     e04:	e0 17       	cp	r30, r16
     e06:	f1 07       	cpc	r31, r17
     e08:	b9 f7       	brne	.-18     	; 0xdf8 <_Z7readRamv+0x286>
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     e12:	60 93 70 25 	sts	0x2570, r22	; 0x802570 <CMDPRGlist+0x24>
     e16:	70 93 71 25 	sts	0x2571, r23	; 0x802571 <CMDPRGlist+0x25>
     e1a:	80 93 72 25 	sts	0x2572, r24	; 0x802572 <CMDPRGlist+0x26>
     e1e:	90 93 73 25 	sts	0x2573, r25	; 0x802573 <CMDPRGlist+0x27>
     e22:	67 01       	movw	r12, r14
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     e2a:	f6 01       	movw	r30, r12
     e2c:	82 93       	st	-Z, r24
     e2e:	6f 01       	movw	r12, r30
     e30:	e0 17       	cp	r30, r16
     e32:	f1 07       	cpc	r31, r17
     e34:	b9 f7       	brne	.-18     	; 0xe24 <_Z7readRamv+0x2b2>
     e36:	ce 01       	movw	r24, r28
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     e3e:	60 93 74 25 	sts	0x2574, r22	; 0x802574 <CMDPRGlist+0x28>
     e42:	70 93 75 25 	sts	0x2575, r23	; 0x802575 <CMDPRGlist+0x29>
     e46:	80 93 76 25 	sts	0x2576, r24	; 0x802576 <CMDPRGlist+0x2a>
     e4a:	90 93 77 25 	sts	0x2577, r25	; 0x802577 <CMDPRGlist+0x2b>
     e4e:	67 01       	movw	r12, r14
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     e56:	f6 01       	movw	r30, r12
     e58:	82 93       	st	-Z, r24
     e5a:	6f 01       	movw	r12, r30
     e5c:	e0 17       	cp	r30, r16
     e5e:	f1 07       	cpc	r31, r17
     e60:	b9 f7       	brne	.-18     	; 0xe50 <_Z7readRamv+0x2de>
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     e6a:	60 93 78 25 	sts	0x2578, r22	; 0x802578 <CMDPRGlist+0x2c>
     e6e:	70 93 79 25 	sts	0x2579, r23	; 0x802579 <CMDPRGlist+0x2d>
     e72:	80 93 7a 25 	sts	0x257A, r24	; 0x80257a <CMDPRGlist+0x2e>
     e76:	90 93 7b 25 	sts	0x257B, r25	; 0x80257b <CMDPRGlist+0x2f>
     e7a:	67 01       	movw	r12, r14
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     e82:	f6 01       	movw	r30, r12
     e84:	82 93       	st	-Z, r24
     e86:	6f 01       	movw	r12, r30
     e88:	e0 17       	cp	r30, r16
     e8a:	f1 07       	cpc	r31, r17
     e8c:	b9 f7       	brne	.-18     	; 0xe7c <_Z7readRamv+0x30a>
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     e96:	60 93 7c 25 	sts	0x257C, r22	; 0x80257c <CMDPRGlist+0x30>
     e9a:	70 93 7d 25 	sts	0x257D, r23	; 0x80257d <CMDPRGlist+0x31>
     e9e:	80 93 7e 25 	sts	0x257E, r24	; 0x80257e <CMDPRGlist+0x32>
     ea2:	90 93 7f 25 	sts	0x257F, r25	; 0x80257f <CMDPRGlist+0x33>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     eac:	f7 01       	movw	r30, r14
     eae:	82 93       	st	-Z, r24
     eb0:	7f 01       	movw	r14, r30
     eb2:	e0 17       	cp	r30, r16
     eb4:	f1 07       	cpc	r31, r17
     eb6:	b9 f7       	brne	.-18     	; 0xea6 <_Z7readRamv+0x334>
     eb8:	ce 01       	movw	r24, r28
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     ec0:	60 93 80 25 	sts	0x2580, r22	; 0x802580 <CMDPRGlist+0x34>
     ec4:	70 93 81 25 	sts	0x2581, r23	; 0x802581 <CMDPRGlist+0x35>
     ec8:	80 93 82 25 	sts	0x2582, r24	; 0x802582 <CMDPRGlist+0x36>
     ecc:	90 93 83 25 	sts	0x2583, r25	; 0x802583 <CMDPRGlist+0x37>
     ed0:	f8 c0       	rjmp	.+496    	; 0x10c2 <_Z7readRamv+0x550>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ed8:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <CMDPRGlist+0x4>
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <_Z7readRamv+0x370>
     ee0:	8a c0       	rjmp	.+276    	; 0xff6 <_Z7readRamv+0x484>
     ee2:	0f 2e       	mov	r0, r31
     ee4:	f1 e5       	ldi	r31, 0x51	; 81
     ee6:	8f 2e       	mov	r8, r31
     ee8:	f5 e2       	ldi	r31, 0x25	; 37
     eea:	9f 2e       	mov	r9, r31
     eec:	f0 2d       	mov	r31, r0
     eee:	a1 2c       	mov	r10, r1
     ef0:	b1 2c       	mov	r11, r1
     ef2:	3e 01       	movw	r6, r28
     ef4:	f5 e0       	ldi	r31, 0x05	; 5
     ef6:	6f 0e       	add	r6, r31
     ef8:	71 1c       	adc	r7, r1
     efa:	ae 01       	movw	r20, r28
     efc:	4f 5f       	subi	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	7a 01       	movw	r14, r20
     f02:	0f 2e       	mov	r0, r31
     f04:	fc e4       	ldi	r31, 0x4C	; 76
     f06:	4f 2e       	mov	r4, r31
     f08:	f5 e2       	ldi	r31, 0x25	; 37
     f0a:	5f 2e       	mov	r5, r31
     f0c:	f0 2d       	mov	r31, r0
     f0e:	26 2c       	mov	r2, r6
     f10:	37 2c       	mov	r3, r7
     f12:	67 01       	movw	r12, r14
     f14:	83 01       	movw	r16, r6
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <_Z7readRamv+0x3ae>
     f18:	18 16       	cp	r1, r24
     f1a:	19 06       	cpc	r1, r25
     f1c:	ec f0       	brlt	.+58     	; 0xf58 <_Z7readRamv+0x3e6>
     f1e:	6b c0       	rjmp	.+214    	; 0xff6 <_Z7readRamv+0x484>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     f26:	f8 01       	movw	r30, r16
     f28:	82 93       	st	-Z, r24
     f2a:	8f 01       	movw	r16, r30
     f2c:	ee 16       	cp	r14, r30
     f2e:	ff 06       	cpc	r15, r31
     f30:	b9 f7       	brne	.-18     	; 0xf20 <_Z7readRamv+0x3ae>
     f32:	c7 01       	movw	r24, r14
     f34:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     f38:	f4 01       	movw	r30, r8
     f3a:	61 93       	st	Z+, r22
     f3c:	71 93       	st	Z+, r23
     f3e:	81 93       	st	Z+, r24
     f40:	91 93       	st	Z+, r25
     f42:	4f 01       	movw	r8, r30
     f44:	ff ef       	ldi	r31, 0xFF	; 255
     f46:	af 1a       	sub	r10, r31
     f48:	bf 0a       	sbc	r11, r31
     f4a:	f2 01       	movw	r30, r4
     f4c:	84 81       	ldd	r24, Z+4	; 0x04
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a8 16       	cp	r10, r24
     f52:	b9 06       	cpc	r11, r25
     f54:	e4 f2       	brlt	.-72     	; 0xf0e <_Z7readRamv+0x39c>
     f56:	e0 cf       	rjmp	.-64     	; 0xf18 <_Z7readRamv+0x3a6>
     f58:	0f 2e       	mov	r0, r31
     f5a:	f0 e6       	ldi	r31, 0x60	; 96
     f5c:	af 2e       	mov	r10, r31
     f5e:	f5 e2       	ldi	r31, 0x25	; 37
     f60:	bf 2e       	mov	r11, r31
     f62:	f0 2d       	mov	r31, r0
     f64:	e1 2c       	mov	r14, r1
     f66:	f1 2c       	mov	r15, r1
     f68:	0f 2e       	mov	r0, r31
     f6a:	fc e4       	ldi	r31, 0x4C	; 76
     f6c:	8f 2e       	mov	r8, r31
     f6e:	f5 e2       	ldi	r31, 0x25	; 37
     f70:	9f 2e       	mov	r9, r31
     f72:	f0 2d       	mov	r31, r0
     f74:	02 2d       	mov	r16, r2
     f76:	13 2d       	mov	r17, r3
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <_Z7readRamv+0x412>
     f7a:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
     f7e:	81 11       	cpse	r24, r1
     f80:	1e c0       	rjmp	.+60     	; 0xfbe <_Z7readRamv+0x44c>
     f82:	39 c0       	rjmp	.+114    	; 0xff6 <_Z7readRamv+0x484>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     f8a:	f8 01       	movw	r30, r16
     f8c:	82 93       	st	-Z, r24
     f8e:	8f 01       	movw	r16, r30
     f90:	ce 16       	cp	r12, r30
     f92:	df 06       	cpc	r13, r31
     f94:	b9 f7       	brne	.-18     	; 0xf84 <_Z7readRamv+0x412>
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     f9e:	f5 01       	movw	r30, r10
     fa0:	61 93       	st	Z+, r22
     fa2:	71 93       	st	Z+, r23
     fa4:	81 93       	st	Z+, r24
     fa6:	91 93       	st	Z+, r25
     fa8:	5f 01       	movw	r10, r30
     faa:	ff ef       	ldi	r31, 0xFF	; 255
     fac:	ef 1a       	sub	r14, r31
     fae:	ff 0a       	sbc	r15, r31
     fb0:	f4 01       	movw	r30, r8
     fb2:	84 81       	ldd	r24, Z+4	; 0x04
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	e8 16       	cp	r14, r24
     fb8:	f9 06       	cpc	r15, r25
     fba:	e4 f2       	brlt	.-72     	; 0xf74 <_Z7readRamv+0x402>
     fbc:	de cf       	rjmp	.-68     	; 0xf7a <_Z7readRamv+0x408>
     fbe:	0f 2e       	mov	r0, r31
     fc0:	fd e5       	ldi	r31, 0x5D	; 93
     fc2:	ef 2e       	mov	r14, r31
     fc4:	f5 e2       	ldi	r31, 0x25	; 37
     fc6:	ff 2e       	mov	r15, r31
     fc8:	f0 2d       	mov	r31, r0
     fca:	00 e0       	ldi	r16, 0x00	; 0
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	0f 2e       	mov	r0, r31
     fd0:	fc e4       	ldi	r31, 0x4C	; 76
     fd2:	cf 2e       	mov	r12, r31
     fd4:	f5 e2       	ldi	r31, 0x25	; 37
     fd6:	df 2e       	mov	r13, r31
     fd8:	f0 2d       	mov	r31, r0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     fe0:	f7 01       	movw	r30, r14
     fe2:	81 93       	st	Z+, r24
     fe4:	7f 01       	movw	r14, r30
     fe6:	0f 5f       	subi	r16, 0xFF	; 255
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	f6 01       	movw	r30, r12
     fec:	84 81       	ldd	r24, Z+4	; 0x04
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	08 17       	cp	r16, r24
     ff2:	19 07       	cpc	r17, r25
     ff4:	94 f3       	brlt	.-28     	; 0xfda <_Z7readRamv+0x468>
     ff6:	8e 01       	movw	r16, r28
     ff8:	0b 5f       	subi	r16, 0xFB	; 251
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	ae 01       	movw	r20, r28
     ffe:	4f 5f       	subi	r20, 0xFF	; 255
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	7a 01       	movw	r14, r20
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    100a:	f8 01       	movw	r30, r16
    100c:	82 93       	st	-Z, r24
    100e:	8f 01       	movw	r16, r30
    1010:	ee 16       	cp	r14, r30
    1012:	ff 06       	cpc	r15, r31
    1014:	b9 f7       	brne	.-18     	; 0x1004 <_Z7readRamv+0x492>
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    101e:	60 93 6c 25 	sts	0x256C, r22	; 0x80256c <CMDPRGlist+0x20>
    1022:	70 93 6d 25 	sts	0x256D, r23	; 0x80256d <CMDPRGlist+0x21>
    1026:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <CMDPRGlist+0x22>
    102a:	90 93 6f 25 	sts	0x256F, r25	; 0x80256f <CMDPRGlist+0x23>
    102e:	49 c0       	rjmp	.+146    	; 0x10c2 <_Z7readRamv+0x550>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1036:	0c e4       	ldi	r16, 0x4C	; 76
    1038:	15 e2       	ldi	r17, 0x25	; 37
    103a:	f8 01       	movw	r30, r16
    103c:	80 af       	std	Z+56, r24	; 0x38
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1044:	8c 83       	std	Y+4, r24	; 0x04
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    104c:	8b 83       	std	Y+3, r24	; 0x03
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1066:	f8 01       	movw	r30, r16
    1068:	61 af       	std	Z+57, r22	; 0x39
    106a:	72 af       	std	Z+58, r23	; 0x3a
    106c:	83 af       	std	Z+59, r24	; 0x3b
    106e:	94 af       	std	Z+60, r25	; 0x3c
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1076:	8c 83       	std	Y+4, r24	; 0x04
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1086:	8a 83       	std	Y+2, r24	; 0x02
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1098:	60 93 89 25 	sts	0x2589, r22	; 0x802589 <CMDPRGlist+0x3d>
    109c:	70 93 8a 25 	sts	0x258A, r23	; 0x80258a <CMDPRGlist+0x3e>
    10a0:	80 93 8b 25 	sts	0x258B, r24	; 0x80258b <CMDPRGlist+0x3f>
    10a4:	90 93 8c 25 	sts	0x258C, r25	; 0x80258c <CMDPRGlist+0x40>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    10ae:	80 93 8d 25 	sts	0x258D, r24	; 0x80258d <CMDPRGlist+0x41>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	80 93 8e 25 	sts	0x258E, r24	; 0x80258e <CMDPRGlist+0x42>
    10be:	90 93 8f 25 	sts	0x258F, r25	; 0x80258f <CMDPRGlist+0x43>
    10c2:	24 96       	adiw	r28, 0x04	; 4
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	7f 90       	pop	r7
    10e2:	6f 90       	pop	r6
    10e4:	5f 90       	pop	r5
    10e6:	4f 90       	pop	r4
    10e8:	3f 90       	pop	r3
    10ea:	2f 90       	pop	r2
    10ec:	08 95       	ret

000010ee <_Z10ReadSerialv>:
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <_Z10ReadSerialv+0x6>
    10f4:	1f 92       	push	r1
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	82 e8       	ldi	r24, 0x82	; 130
    10fc:	90 e2       	ldi	r25, 0x20	; 32
    10fe:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
    1102:	87 ee       	ldi	r24, 0xE7	; 231
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	a0 e0       	ldi	r26, 0x00	; 0
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <fk>
    110e:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <fk+0x1>
    1112:	a0 93 96 25 	sts	0x2596, r26	; 0x802596 <fk+0x2>
    1116:	b0 93 97 25 	sts	0x2597, r27	; 0x802597 <fk+0x3>
    111a:	8e ec       	ldi	r24, 0xCE	; 206
    111c:	97 e0       	ldi	r25, 0x07	; 7
    111e:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <ft>
    1122:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <ft+0x1>
    1126:	8e ec       	ldi	r24, 0xCE	; 206
    1128:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <fadd1>
    112c:	87 e0       	ldi	r24, 0x07	; 7
    112e:	80 93 90 25 	sts	0x2590, r24	; 0x802590 <fadd2>
    1132:	e0 e8       	ldi	r30, 0x80	; 128
    1134:	f6 e0       	ldi	r31, 0x06	; 6
    1136:	84 81       	ldd	r24, Z+4	; 0x04
    1138:	80 61       	ori	r24, 0x10	; 16
    113a:	84 83       	std	Z+4, r24	; 0x04
    113c:	84 81       	ldd	r24, Z+4	; 0x04
    113e:	8f 7e       	andi	r24, 0xEF	; 239
    1140:	84 83       	std	Z+4, r24	; 0x04
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1148:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    114c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1150:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    1154:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1164:	8c 83       	std	Y+4, r24	; 0x04
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1174:	8a 83       	std	Y+2, r24	; 0x02
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	1f 92       	push	r1
    1182:	9f 93       	push	r25
    1184:	9b 81       	ldd	r25, Y+3	; 0x03
    1186:	1f 92       	push	r1
    1188:	9f 93       	push	r25
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	1f 92       	push	r1
    118e:	9f 93       	push	r25
    1190:	1f 92       	push	r1
    1192:	8f 93       	push	r24
    1194:	85 e9       	ldi	r24, 0x95	; 149
    1196:	90 e2       	ldi	r25, 0x20	; 32
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	24 96       	adiw	r28, 0x04	; 4
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <_Z14ReadSubProgramj>:
    11b8:	2f 92       	push	r2
    11ba:	3f 92       	push	r3
    11bc:	4f 92       	push	r4
    11be:	5f 92       	push	r5
    11c0:	6f 92       	push	r6
    11c2:	7f 92       	push	r7
    11c4:	8f 92       	push	r8
    11c6:	9f 92       	push	r9
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	00 d0       	rcall	.+0      	; 0x11de <_Z14ReadSubProgramj+0x26>
    11de:	1f 92       	push	r1
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	20 91 98 25 	lds	r18, 0x2598	; 0x802598 <ContinuousRead>
    11e8:	21 11       	cpse	r18, r1
    11ea:	2f c0       	rjmp	.+94     	; 0x124a <_Z14ReadSubProgramj+0x92>
    11ec:	a0 e0       	ldi	r26, 0x00	; 0
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <fk>
    11f4:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <fk+0x1>
    11f8:	a0 93 96 25 	sts	0x2596, r26	; 0x802596 <fk+0x2>
    11fc:	b0 93 97 25 	sts	0x2597, r27	; 0x802597 <fk+0x3>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	aa 1f       	adc	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <ft>
    120c:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <ft+0x1>
    1210:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <fadd1>
    1214:	90 93 90 25 	sts	0x2590, r25	; 0x802590 <fadd2>
    1218:	e0 e8       	ldi	r30, 0x80	; 128
    121a:	f6 e0       	ldi	r31, 0x06	; 6
    121c:	84 81       	ldd	r24, Z+4	; 0x04
    121e:	80 61       	ori	r24, 0x10	; 16
    1220:	84 83       	std	Z+4, r24	; 0x04
    1222:	84 81       	ldd	r24, Z+4	; 0x04
    1224:	8f 7e       	andi	r24, 0xEF	; 239
    1226:	84 83       	std	Z+4, r24	; 0x04
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    122e:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    1232:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1236:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    123a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 93 98 25 	sts	0x2598, r24	; 0x802598 <ContinuousRead>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1250:	8a 83       	std	Y+2, r24	; 0x02
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	0c e4       	ldi	r16, 0x4C	; 76
    125c:	15 e2       	ldi	r17, 0x25	; 37
    125e:	2a 81       	ldd	r18, Y+2	; 0x02
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	32 2f       	mov	r19, r18
    1264:	22 27       	eor	r18, r18
    1266:	a9 01       	movw	r20, r18
    1268:	48 0f       	add	r20, r24
    126a:	51 1d       	adc	r21, r1
    126c:	f8 01       	movw	r30, r16
    126e:	40 83       	st	Z, r20
    1270:	51 83       	std	Z+1, r21	; 0x01
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1278:	f8 01       	movw	r30, r16
    127a:	82 83       	std	Z+2, r24	; 0x02
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1282:	f8 01       	movw	r30, r16
    1284:	83 83       	std	Z+3, r24	; 0x03
    1286:	88 23       	and	r24, r24
    1288:	21 f0       	breq	.+8      	; 0x1292 <_Z14ReadSubProgramj+0xda>
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	09 f4       	brne	.+2      	; 0x1290 <_Z14ReadSubProgramj+0xd8>
    128e:	1e c1       	rjmp	.+572    	; 0x14cc <_Z14ReadSubProgramj+0x314>
    1290:	cb c1       	rjmp	.+918    	; 0x1628 <_Z14ReadSubProgramj+0x470>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1298:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <CMDPRGlist+0x4>
    129c:	88 23       	and	r24, r24
    129e:	09 f4       	brne	.+2      	; 0x12a2 <_Z14ReadSubProgramj+0xea>
    12a0:	8a c0       	rjmp	.+276    	; 0x13b6 <_Z14ReadSubProgramj+0x1fe>
    12a2:	0f 2e       	mov	r0, r31
    12a4:	f1 e5       	ldi	r31, 0x51	; 81
    12a6:	8f 2e       	mov	r8, r31
    12a8:	f5 e2       	ldi	r31, 0x25	; 37
    12aa:	9f 2e       	mov	r9, r31
    12ac:	f0 2d       	mov	r31, r0
    12ae:	a1 2c       	mov	r10, r1
    12b0:	b1 2c       	mov	r11, r1
    12b2:	3e 01       	movw	r6, r28
    12b4:	f5 e0       	ldi	r31, 0x05	; 5
    12b6:	6f 0e       	add	r6, r31
    12b8:	71 1c       	adc	r7, r1
    12ba:	ae 01       	movw	r20, r28
    12bc:	4f 5f       	subi	r20, 0xFF	; 255
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	7a 01       	movw	r14, r20
    12c2:	0f 2e       	mov	r0, r31
    12c4:	fc e4       	ldi	r31, 0x4C	; 76
    12c6:	4f 2e       	mov	r4, r31
    12c8:	f5 e2       	ldi	r31, 0x25	; 37
    12ca:	5f 2e       	mov	r5, r31
    12cc:	f0 2d       	mov	r31, r0
    12ce:	26 2c       	mov	r2, r6
    12d0:	37 2c       	mov	r3, r7
    12d2:	67 01       	movw	r12, r14
    12d4:	83 01       	movw	r16, r6
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <_Z14ReadSubProgramj+0x128>
    12d8:	18 16       	cp	r1, r24
    12da:	19 06       	cpc	r1, r25
    12dc:	ec f0       	brlt	.+58     	; 0x1318 <_Z14ReadSubProgramj+0x160>
    12de:	6b c0       	rjmp	.+214    	; 0x13b6 <_Z14ReadSubProgramj+0x1fe>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    12e6:	f8 01       	movw	r30, r16
    12e8:	82 93       	st	-Z, r24
    12ea:	8f 01       	movw	r16, r30
    12ec:	ee 16       	cp	r14, r30
    12ee:	ff 06       	cpc	r15, r31
    12f0:	b9 f7       	brne	.-18     	; 0x12e0 <_Z14ReadSubProgramj+0x128>
    12f2:	c7 01       	movw	r24, r14
    12f4:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    12f8:	f4 01       	movw	r30, r8
    12fa:	61 93       	st	Z+, r22
    12fc:	71 93       	st	Z+, r23
    12fe:	81 93       	st	Z+, r24
    1300:	91 93       	st	Z+, r25
    1302:	4f 01       	movw	r8, r30
    1304:	ff ef       	ldi	r31, 0xFF	; 255
    1306:	af 1a       	sub	r10, r31
    1308:	bf 0a       	sbc	r11, r31
    130a:	f2 01       	movw	r30, r4
    130c:	84 81       	ldd	r24, Z+4	; 0x04
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a8 16       	cp	r10, r24
    1312:	b9 06       	cpc	r11, r25
    1314:	e4 f2       	brlt	.-72     	; 0x12ce <_Z14ReadSubProgramj+0x116>
    1316:	e0 cf       	rjmp	.-64     	; 0x12d8 <_Z14ReadSubProgramj+0x120>
    1318:	0f 2e       	mov	r0, r31
    131a:	f0 e6       	ldi	r31, 0x60	; 96
    131c:	af 2e       	mov	r10, r31
    131e:	f5 e2       	ldi	r31, 0x25	; 37
    1320:	bf 2e       	mov	r11, r31
    1322:	f0 2d       	mov	r31, r0
    1324:	e1 2c       	mov	r14, r1
    1326:	f1 2c       	mov	r15, r1
    1328:	0f 2e       	mov	r0, r31
    132a:	fc e4       	ldi	r31, 0x4C	; 76
    132c:	8f 2e       	mov	r8, r31
    132e:	f5 e2       	ldi	r31, 0x25	; 37
    1330:	9f 2e       	mov	r9, r31
    1332:	f0 2d       	mov	r31, r0
    1334:	02 2d       	mov	r16, r2
    1336:	13 2d       	mov	r17, r3
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <_Z14ReadSubProgramj+0x18c>
    133a:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
    133e:	81 11       	cpse	r24, r1
    1340:	1e c0       	rjmp	.+60     	; 0x137e <_Z14ReadSubProgramj+0x1c6>
    1342:	39 c0       	rjmp	.+114    	; 0x13b6 <_Z14ReadSubProgramj+0x1fe>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    134a:	f8 01       	movw	r30, r16
    134c:	82 93       	st	-Z, r24
    134e:	8f 01       	movw	r16, r30
    1350:	ec 15       	cp	r30, r12
    1352:	fd 05       	cpc	r31, r13
    1354:	b9 f7       	brne	.-18     	; 0x1344 <_Z14ReadSubProgramj+0x18c>
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    135e:	f5 01       	movw	r30, r10
    1360:	61 93       	st	Z+, r22
    1362:	71 93       	st	Z+, r23
    1364:	81 93       	st	Z+, r24
    1366:	91 93       	st	Z+, r25
    1368:	5f 01       	movw	r10, r30
    136a:	ff ef       	ldi	r31, 0xFF	; 255
    136c:	ef 1a       	sub	r14, r31
    136e:	ff 0a       	sbc	r15, r31
    1370:	f4 01       	movw	r30, r8
    1372:	84 81       	ldd	r24, Z+4	; 0x04
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	e8 16       	cp	r14, r24
    1378:	f9 06       	cpc	r15, r25
    137a:	e4 f2       	brlt	.-72     	; 0x1334 <_Z14ReadSubProgramj+0x17c>
    137c:	de cf       	rjmp	.-68     	; 0x133a <_Z14ReadSubProgramj+0x182>
    137e:	0f 2e       	mov	r0, r31
    1380:	fd e5       	ldi	r31, 0x5D	; 93
    1382:	ef 2e       	mov	r14, r31
    1384:	f5 e2       	ldi	r31, 0x25	; 37
    1386:	ff 2e       	mov	r15, r31
    1388:	f0 2d       	mov	r31, r0
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	0f 2e       	mov	r0, r31
    1390:	fc e4       	ldi	r31, 0x4C	; 76
    1392:	cf 2e       	mov	r12, r31
    1394:	f5 e2       	ldi	r31, 0x25	; 37
    1396:	df 2e       	mov	r13, r31
    1398:	f0 2d       	mov	r31, r0
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    13a0:	f7 01       	movw	r30, r14
    13a2:	81 93       	st	Z+, r24
    13a4:	7f 01       	movw	r14, r30
    13a6:	0f 5f       	subi	r16, 0xFF	; 255
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	f6 01       	movw	r30, r12
    13ac:	84 81       	ldd	r24, Z+4	; 0x04
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	08 17       	cp	r16, r24
    13b2:	19 07       	cpc	r17, r25
    13b4:	94 f3       	brlt	.-28     	; 0x139a <_Z14ReadSubProgramj+0x1e2>
    13b6:	7e 01       	movw	r14, r28
    13b8:	f5 e0       	ldi	r31, 0x05	; 5
    13ba:	ef 0e       	add	r14, r31
    13bc:	f1 1c       	adc	r15, r1
    13be:	8e 01       	movw	r16, r28
    13c0:	0f 5f       	subi	r16, 0xFF	; 255
    13c2:	1f 4f       	sbci	r17, 0xFF	; 255
    13c4:	67 01       	movw	r12, r14
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    13cc:	f6 01       	movw	r30, r12
    13ce:	82 93       	st	-Z, r24
    13d0:	6f 01       	movw	r12, r30
    13d2:	e0 17       	cp	r30, r16
    13d4:	f1 07       	cpc	r31, r17
    13d6:	b9 f7       	brne	.-18     	; 0x13c6 <_Z14ReadSubProgramj+0x20e>
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    13e0:	60 93 6c 25 	sts	0x256C, r22	; 0x80256c <CMDPRGlist+0x20>
    13e4:	70 93 6d 25 	sts	0x256D, r23	; 0x80256d <CMDPRGlist+0x21>
    13e8:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <CMDPRGlist+0x22>
    13ec:	90 93 6f 25 	sts	0x256F, r25	; 0x80256f <CMDPRGlist+0x23>
    13f0:	67 01       	movw	r12, r14
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    13f8:	f6 01       	movw	r30, r12
    13fa:	82 93       	st	-Z, r24
    13fc:	6f 01       	movw	r12, r30
    13fe:	e0 17       	cp	r30, r16
    1400:	f1 07       	cpc	r31, r17
    1402:	b9 f7       	brne	.-18     	; 0x13f2 <_Z14ReadSubProgramj+0x23a>
    1404:	ce 01       	movw	r24, r28
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    140c:	60 93 70 25 	sts	0x2570, r22	; 0x802570 <CMDPRGlist+0x24>
    1410:	70 93 71 25 	sts	0x2571, r23	; 0x802571 <CMDPRGlist+0x25>
    1414:	80 93 72 25 	sts	0x2572, r24	; 0x802572 <CMDPRGlist+0x26>
    1418:	90 93 73 25 	sts	0x2573, r25	; 0x802573 <CMDPRGlist+0x27>
    141c:	67 01       	movw	r12, r14
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1424:	f6 01       	movw	r30, r12
    1426:	82 93       	st	-Z, r24
    1428:	6f 01       	movw	r12, r30
    142a:	e0 17       	cp	r30, r16
    142c:	f1 07       	cpc	r31, r17
    142e:	b9 f7       	brne	.-18     	; 0x141e <_Z14ReadSubProgramj+0x266>
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1438:	60 93 74 25 	sts	0x2574, r22	; 0x802574 <CMDPRGlist+0x28>
    143c:	70 93 75 25 	sts	0x2575, r23	; 0x802575 <CMDPRGlist+0x29>
    1440:	80 93 76 25 	sts	0x2576, r24	; 0x802576 <CMDPRGlist+0x2a>
    1444:	90 93 77 25 	sts	0x2577, r25	; 0x802577 <CMDPRGlist+0x2b>
    1448:	67 01       	movw	r12, r14
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1450:	f6 01       	movw	r30, r12
    1452:	82 93       	st	-Z, r24
    1454:	6f 01       	movw	r12, r30
    1456:	e0 17       	cp	r30, r16
    1458:	f1 07       	cpc	r31, r17
    145a:	b9 f7       	brne	.-18     	; 0x144a <_Z14ReadSubProgramj+0x292>
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1464:	60 93 78 25 	sts	0x2578, r22	; 0x802578 <CMDPRGlist+0x2c>
    1468:	70 93 79 25 	sts	0x2579, r23	; 0x802579 <CMDPRGlist+0x2d>
    146c:	80 93 7a 25 	sts	0x257A, r24	; 0x80257a <CMDPRGlist+0x2e>
    1470:	90 93 7b 25 	sts	0x257B, r25	; 0x80257b <CMDPRGlist+0x2f>
    1474:	67 01       	movw	r12, r14
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    147c:	f6 01       	movw	r30, r12
    147e:	82 93       	st	-Z, r24
    1480:	6f 01       	movw	r12, r30
    1482:	e0 17       	cp	r30, r16
    1484:	f1 07       	cpc	r31, r17
    1486:	b9 f7       	brne	.-18     	; 0x1476 <_Z14ReadSubProgramj+0x2be>
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1490:	60 93 7c 25 	sts	0x257C, r22	; 0x80257c <CMDPRGlist+0x30>
    1494:	70 93 7d 25 	sts	0x257D, r23	; 0x80257d <CMDPRGlist+0x31>
    1498:	80 93 7e 25 	sts	0x257E, r24	; 0x80257e <CMDPRGlist+0x32>
    149c:	90 93 7f 25 	sts	0x257F, r25	; 0x80257f <CMDPRGlist+0x33>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    14a6:	f7 01       	movw	r30, r14
    14a8:	82 93       	st	-Z, r24
    14aa:	7f 01       	movw	r14, r30
    14ac:	e0 17       	cp	r30, r16
    14ae:	f1 07       	cpc	r31, r17
    14b0:	b9 f7       	brne	.-18     	; 0x14a0 <_Z14ReadSubProgramj+0x2e8>
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    14ba:	60 93 80 25 	sts	0x2580, r22	; 0x802580 <CMDPRGlist+0x34>
    14be:	70 93 81 25 	sts	0x2581, r23	; 0x802581 <CMDPRGlist+0x35>
    14c2:	80 93 82 25 	sts	0x2582, r24	; 0x802582 <CMDPRGlist+0x36>
    14c6:	90 93 83 25 	sts	0x2583, r25	; 0x802583 <CMDPRGlist+0x37>
    14ca:	ae c0       	rjmp	.+348    	; 0x1628 <_Z14ReadSubProgramj+0x470>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    14d2:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <CMDPRGlist+0x4>
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <_Z14ReadSubProgramj+0x324>
    14da:	8a c0       	rjmp	.+276    	; 0x15f0 <_Z14ReadSubProgramj+0x438>
    14dc:	0f 2e       	mov	r0, r31
    14de:	f1 e5       	ldi	r31, 0x51	; 81
    14e0:	8f 2e       	mov	r8, r31
    14e2:	f5 e2       	ldi	r31, 0x25	; 37
    14e4:	9f 2e       	mov	r9, r31
    14e6:	f0 2d       	mov	r31, r0
    14e8:	a1 2c       	mov	r10, r1
    14ea:	b1 2c       	mov	r11, r1
    14ec:	3e 01       	movw	r6, r28
    14ee:	f5 e0       	ldi	r31, 0x05	; 5
    14f0:	6f 0e       	add	r6, r31
    14f2:	71 1c       	adc	r7, r1
    14f4:	ae 01       	movw	r20, r28
    14f6:	4f 5f       	subi	r20, 0xFF	; 255
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	7a 01       	movw	r14, r20
    14fc:	0f 2e       	mov	r0, r31
    14fe:	fc e4       	ldi	r31, 0x4C	; 76
    1500:	4f 2e       	mov	r4, r31
    1502:	f5 e2       	ldi	r31, 0x25	; 37
    1504:	5f 2e       	mov	r5, r31
    1506:	f0 2d       	mov	r31, r0
    1508:	26 2c       	mov	r2, r6
    150a:	37 2c       	mov	r3, r7
    150c:	67 01       	movw	r12, r14
    150e:	83 01       	movw	r16, r6
    1510:	04 c0       	rjmp	.+8      	; 0x151a <_Z14ReadSubProgramj+0x362>
    1512:	18 16       	cp	r1, r24
    1514:	19 06       	cpc	r1, r25
    1516:	ec f0       	brlt	.+58     	; 0x1552 <_Z14ReadSubProgramj+0x39a>
    1518:	6b c0       	rjmp	.+214    	; 0x15f0 <_Z14ReadSubProgramj+0x438>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1520:	f8 01       	movw	r30, r16
    1522:	82 93       	st	-Z, r24
    1524:	8f 01       	movw	r16, r30
    1526:	ee 16       	cp	r14, r30
    1528:	ff 06       	cpc	r15, r31
    152a:	b9 f7       	brne	.-18     	; 0x151a <_Z14ReadSubProgramj+0x362>
    152c:	c7 01       	movw	r24, r14
    152e:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1532:	f4 01       	movw	r30, r8
    1534:	61 93       	st	Z+, r22
    1536:	71 93       	st	Z+, r23
    1538:	81 93       	st	Z+, r24
    153a:	91 93       	st	Z+, r25
    153c:	4f 01       	movw	r8, r30
    153e:	ff ef       	ldi	r31, 0xFF	; 255
    1540:	af 1a       	sub	r10, r31
    1542:	bf 0a       	sbc	r11, r31
    1544:	f2 01       	movw	r30, r4
    1546:	84 81       	ldd	r24, Z+4	; 0x04
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a8 16       	cp	r10, r24
    154c:	b9 06       	cpc	r11, r25
    154e:	e4 f2       	brlt	.-72     	; 0x1508 <_Z14ReadSubProgramj+0x350>
    1550:	e0 cf       	rjmp	.-64     	; 0x1512 <_Z14ReadSubProgramj+0x35a>
    1552:	0f 2e       	mov	r0, r31
    1554:	f0 e6       	ldi	r31, 0x60	; 96
    1556:	af 2e       	mov	r10, r31
    1558:	f5 e2       	ldi	r31, 0x25	; 37
    155a:	bf 2e       	mov	r11, r31
    155c:	f0 2d       	mov	r31, r0
    155e:	e1 2c       	mov	r14, r1
    1560:	f1 2c       	mov	r15, r1
    1562:	0f 2e       	mov	r0, r31
    1564:	fc e4       	ldi	r31, 0x4C	; 76
    1566:	8f 2e       	mov	r8, r31
    1568:	f5 e2       	ldi	r31, 0x25	; 37
    156a:	9f 2e       	mov	r9, r31
    156c:	f0 2d       	mov	r31, r0
    156e:	02 2d       	mov	r16, r2
    1570:	13 2d       	mov	r17, r3
    1572:	05 c0       	rjmp	.+10     	; 0x157e <_Z14ReadSubProgramj+0x3c6>
    1574:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
    1578:	81 11       	cpse	r24, r1
    157a:	1e c0       	rjmp	.+60     	; 0x15b8 <_Z14ReadSubProgramj+0x400>
    157c:	39 c0       	rjmp	.+114    	; 0x15f0 <_Z14ReadSubProgramj+0x438>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1584:	f8 01       	movw	r30, r16
    1586:	82 93       	st	-Z, r24
    1588:	8f 01       	movw	r16, r30
    158a:	ce 16       	cp	r12, r30
    158c:	df 06       	cpc	r13, r31
    158e:	b9 f7       	brne	.-18     	; 0x157e <_Z14ReadSubProgramj+0x3c6>
    1590:	ce 01       	movw	r24, r28
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1598:	f5 01       	movw	r30, r10
    159a:	61 93       	st	Z+, r22
    159c:	71 93       	st	Z+, r23
    159e:	81 93       	st	Z+, r24
    15a0:	91 93       	st	Z+, r25
    15a2:	5f 01       	movw	r10, r30
    15a4:	ff ef       	ldi	r31, 0xFF	; 255
    15a6:	ef 1a       	sub	r14, r31
    15a8:	ff 0a       	sbc	r15, r31
    15aa:	f4 01       	movw	r30, r8
    15ac:	84 81       	ldd	r24, Z+4	; 0x04
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	e8 16       	cp	r14, r24
    15b2:	f9 06       	cpc	r15, r25
    15b4:	e4 f2       	brlt	.-72     	; 0x156e <_Z14ReadSubProgramj+0x3b6>
    15b6:	de cf       	rjmp	.-68     	; 0x1574 <_Z14ReadSubProgramj+0x3bc>
    15b8:	0f 2e       	mov	r0, r31
    15ba:	fd e5       	ldi	r31, 0x5D	; 93
    15bc:	ef 2e       	mov	r14, r31
    15be:	f5 e2       	ldi	r31, 0x25	; 37
    15c0:	ff 2e       	mov	r15, r31
    15c2:	f0 2d       	mov	r31, r0
    15c4:	00 e0       	ldi	r16, 0x00	; 0
    15c6:	10 e0       	ldi	r17, 0x00	; 0
    15c8:	0f 2e       	mov	r0, r31
    15ca:	fc e4       	ldi	r31, 0x4C	; 76
    15cc:	cf 2e       	mov	r12, r31
    15ce:	f5 e2       	ldi	r31, 0x25	; 37
    15d0:	df 2e       	mov	r13, r31
    15d2:	f0 2d       	mov	r31, r0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    15da:	f7 01       	movw	r30, r14
    15dc:	81 93       	st	Z+, r24
    15de:	7f 01       	movw	r14, r30
    15e0:	0f 5f       	subi	r16, 0xFF	; 255
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	f6 01       	movw	r30, r12
    15e6:	84 81       	ldd	r24, Z+4	; 0x04
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	08 17       	cp	r16, r24
    15ec:	19 07       	cpc	r17, r25
    15ee:	94 f3       	brlt	.-28     	; 0x15d4 <_Z14ReadSubProgramj+0x41c>
    15f0:	8e 01       	movw	r16, r28
    15f2:	0b 5f       	subi	r16, 0xFB	; 251
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	ae 01       	movw	r20, r28
    15f8:	4f 5f       	subi	r20, 0xFF	; 255
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	7a 01       	movw	r14, r20
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1604:	f8 01       	movw	r30, r16
    1606:	82 93       	st	-Z, r24
    1608:	8f 01       	movw	r16, r30
    160a:	ee 16       	cp	r14, r30
    160c:	ff 06       	cpc	r15, r31
    160e:	b9 f7       	brne	.-18     	; 0x15fe <_Z14ReadSubProgramj+0x446>
    1610:	ce 01       	movw	r24, r28
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1618:	60 93 6c 25 	sts	0x256C, r22	; 0x80256c <CMDPRGlist+0x20>
    161c:	70 93 6d 25 	sts	0x256D, r23	; 0x80256d <CMDPRGlist+0x21>
    1620:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <CMDPRGlist+0x22>
    1624:	90 93 6f 25 	sts	0x256F, r25	; 0x80256f <CMDPRGlist+0x23>
    1628:	24 96       	adiw	r28, 0x04	; 4
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	9f 90       	pop	r9
    1644:	8f 90       	pop	r8
    1646:	7f 90       	pop	r7
    1648:	6f 90       	pop	r6
    164a:	5f 90       	pop	r5
    164c:	4f 90       	pop	r4
    164e:	3f 90       	pop	r3
    1650:	2f 90       	pop	r2
    1652:	08 95       	ret

00001654 <_Z11WriteSeriall>:
    1654:	7f 92       	push	r7
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	00 d0       	rcall	.+0      	; 0x1670 <_Z11WriteSeriall+0x1c>
    1670:	1f 92       	push	r1
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	4b 01       	movw	r8, r22
    1678:	5c 01       	movw	r10, r24
    167a:	87 ee       	ldi	r24, 0xE7	; 231
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <fk>
    1686:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <fk+0x1>
    168a:	a0 93 96 25 	sts	0x2596, r26	; 0x802596 <fk+0x2>
    168e:	b0 93 97 25 	sts	0x2597, r27	; 0x802597 <fk+0x3>
    1692:	8e ec       	ldi	r24, 0xCE	; 206
    1694:	97 e0       	ldi	r25, 0x07	; 7
    1696:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <ft>
    169a:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <ft+0x1>
    169e:	8e ec       	ldi	r24, 0xCE	; 206
    16a0:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <fadd1>
    16a4:	87 e0       	ldi	r24, 0x07	; 7
    16a6:	80 93 90 25 	sts	0x2590, r24	; 0x802590 <fadd2>
    16aa:	00 e8       	ldi	r16, 0x80	; 128
    16ac:	16 e0       	ldi	r17, 0x06	; 6
    16ae:	f8 01       	movw	r30, r16
    16b0:	84 81       	ldd	r24, Z+4	; 0x04
    16b2:	80 61       	ori	r24, 0x10	; 16
    16b4:	84 83       	std	Z+4, r24	; 0x04
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	8f 7e       	andi	r24, 0xEF	; 239
    16ba:	84 83       	std	Z+4, r24	; 0x04
    16bc:	81 e8       	ldi	r24, 0x81	; 129
    16be:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    16c2:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    16c6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    16ca:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    16ce:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    16d8:	f8 01       	movw	r30, r16
    16da:	84 81       	ldd	r24, Z+4	; 0x04
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	84 83       	std	Z+4, r24	; 0x04
    16e0:	0f 2e       	mov	r0, r31
    16e2:	f0 ee       	ldi	r31, 0xE0	; 224
    16e4:	ef 2e       	mov	r14, r31
    16e6:	f7 e0       	ldi	r31, 0x07	; 7
    16e8:	ff 2e       	mov	r15, r31
    16ea:	f0 2d       	mov	r31, r0
    16ec:	0f 2e       	mov	r0, r31
    16ee:	f3 eb       	ldi	r31, 0xB3	; 179
    16f0:	cf 2e       	mov	r12, r31
    16f2:	f0 e2       	ldi	r31, 0x20	; 32
    16f4:	df 2e       	mov	r13, r31
    16f6:	f0 2d       	mov	r31, r0
    16f8:	f8 01       	movw	r30, r16
    16fa:	84 81       	ldd	r24, Z+4	; 0x04
    16fc:	8f 7e       	andi	r24, 0xEF	; 239
    16fe:	84 83       	std	Z+4, r24	; 0x04
    1700:	f7 01       	movw	r30, r14
    1702:	84 81       	ldd	r24, Z+4	; 0x04
    1704:	80 ff       	sbrs	r24, 0
    1706:	03 c0       	rjmp	.+6      	; 0x170e <_Z11WriteSeriall+0xba>
    1708:	84 81       	ldd	r24, Z+4	; 0x04
    170a:	84 83       	std	Z+4, r24	; 0x04
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <_Z11WriteSeriall+0xc2>
    170e:	f7 01       	movw	r30, r14
    1710:	84 81       	ldd	r24, Z+4	; 0x04
    1712:	81 60       	ori	r24, 0x01	; 1
    1714:	84 83       	std	Z+4, r24	; 0x04
    1716:	87 ed       	ldi	r24, 0xD7	; 215
    1718:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1722:	78 2e       	mov	r7, r24
    1724:	1f 92       	push	r1
    1726:	8f 93       	push	r24
    1728:	df 92       	push	r13
    172a:	cf 92       	push	r12
    172c:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    1730:	f8 01       	movw	r30, r16
    1732:	84 81       	ldd	r24, Z+4	; 0x04
    1734:	80 61       	ori	r24, 0x10	; 16
    1736:	84 83       	std	Z+4, r24	; 0x04
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	77 20       	and	r7, r7
    1742:	d4 f6       	brge	.-76     	; 0x16f8 <_Z11WriteSeriall+0xa4>
    1744:	e0 e8       	ldi	r30, 0x80	; 128
    1746:	f6 e0       	ldi	r31, 0x06	; 6
    1748:	84 81       	ldd	r24, Z+4	; 0x04
    174a:	8f 7e       	andi	r24, 0xEF	; 239
    174c:	84 83       	std	Z+4, r24	; 0x04
    174e:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7007e4>
    1752:	81 ff       	sbrs	r24, 1
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <_Z11WriteSeriall+0x10e>
    1756:	e0 ee       	ldi	r30, 0xE0	; 224
    1758:	f7 e0       	ldi	r31, 0x07	; 7
    175a:	84 81       	ldd	r24, Z+4	; 0x04
    175c:	8e 7f       	andi	r24, 0xFE	; 254
    175e:	84 83       	std	Z+4, r24	; 0x04
    1760:	05 c0       	rjmp	.+10     	; 0x176c <_Z11WriteSeriall+0x118>
    1762:	e0 ee       	ldi	r30, 0xE0	; 224
    1764:	f7 e0       	ldi	r31, 0x07	; 7
    1766:	84 81       	ldd	r24, Z+4	; 0x04
    1768:	82 60       	ori	r24, 0x02	; 2
    176a:	84 83       	std	Z+4, r24	; 0x04
    176c:	84 e8       	ldi	r24, 0x84	; 132
    176e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1772:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    1776:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    177a:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    177e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1788:	ae 01       	movw	r20, r28
    178a:	4f 5f       	subi	r20, 0xFF	; 255
    178c:	5f 4f       	sbci	r21, 0xFF	; 255
    178e:	c5 01       	movw	r24, r10
    1790:	b4 01       	movw	r22, r8
    1792:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z4ltoblPc>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	1f 92       	push	r1
    179a:	8f 93       	push	r24
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	1f 92       	push	r1
    17a0:	8f 93       	push	r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	1f 92       	push	r1
    17a6:	8f 93       	push	r24
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	1f 92       	push	r1
    17ac:	8f 93       	push	r24
    17ae:	80 ec       	ldi	r24, 0xC0	; 192
    17b0:	90 e2       	ldi	r25, 0x20	; 32
    17b2:	9f 93       	push	r25
    17b4:	8f 93       	push	r24
    17b6:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17d2:	00 e8       	ldi	r16, 0x80	; 128
    17d4:	16 e0       	ldi	r17, 0x06	; 6
    17d6:	f8 01       	movw	r30, r16
    17d8:	84 81       	ldd	r24, Z+4	; 0x04
    17da:	80 61       	ori	r24, 0x10	; 16
    17dc:	84 83       	std	Z+4, r24	; 0x04
    17de:	84 81       	ldd	r24, Z+4	; 0x04
    17e0:	8f 7e       	andi	r24, 0xEF	; 239
    17e2:	84 83       	std	Z+4, r24	; 0x04
    17e4:	83 e8       	ldi	r24, 0x83	; 131
    17e6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17ea:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    17ee:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17f2:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    17f6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1800:	f8 01       	movw	r30, r16
    1802:	84 81       	ldd	r24, Z+4	; 0x04
    1804:	80 61       	ori	r24, 0x10	; 16
    1806:	84 83       	std	Z+4, r24	; 0x04
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	24 96       	adiw	r28, 0x04	; 4
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	08 95       	ret

0000182e <_Z9tcc0_initv>:
    182e:	2f b7       	in	r18, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	e0 e0       	ldi	r30, 0x00	; 0
    1834:	f8 e0       	ldi	r31, 0x08	; 8
    1836:	10 82       	st	Z, r1
    1838:	8c e0       	ldi	r24, 0x0C	; 12
    183a:	81 87       	std	Z+9, r24	; 0x09
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 83       	st	Z, r24
    1840:	81 83       	std	Z+1, r24	; 0x01
    1842:	13 82       	std	Z+3, r1	; 0x03
    1844:	14 82       	std	Z+4, r1	; 0x04
    1846:	16 82       	std	Z+6, r1	; 0x06
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	87 83       	std	Z+7, r24	; 0x07
    184c:	a0 e9       	ldi	r26, 0x90	; 144
    184e:	b8 e0       	ldi	r27, 0x08	; 8
    1850:	8c 91       	ld	r24, X
    1852:	8e 7f       	andi	r24, 0xFE	; 254
    1854:	8c 93       	st	X, r24
    1856:	a0 e9       	ldi	r26, 0x90	; 144
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	19 96       	adiw	r26, 0x09	; 9
    185c:	8c 91       	ld	r24, X
    185e:	19 97       	sbiw	r26, 0x09	; 9
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	98 ed       	ldi	r25, 0xD8	; 216
    1864:	94 bf       	out	0x34, r25	; 52
    1866:	19 96       	adiw	r26, 0x09	; 9
    1868:	8c 93       	st	X, r24
    186a:	a0 e8       	ldi	r26, 0x80	; 128
    186c:	b8 e0       	ldi	r27, 0x08	; 8
    186e:	1c 92       	st	X, r1
    1870:	18 96       	adiw	r26, 0x08	; 8
    1872:	1c 92       	st	X, r1
    1874:	18 97       	sbiw	r26, 0x08	; 8
    1876:	19 96       	adiw	r26, 0x09	; 9
    1878:	1c 92       	st	X, r1
    187a:	19 97       	sbiw	r26, 0x09	; 9
    187c:	1c 96       	adiw	r26, 0x0c	; 12
    187e:	1c 92       	st	X, r1
    1880:	1c 97       	sbiw	r26, 0x0c	; 12
    1882:	13 96       	adiw	r26, 0x03	; 3
    1884:	8c 91       	ld	r24, X
    1886:	13 97       	sbiw	r26, 0x03	; 3
    1888:	88 7e       	andi	r24, 0xE8	; 232
    188a:	13 96       	adiw	r26, 0x03	; 3
    188c:	8c 93       	st	X, r24
    188e:	13 97       	sbiw	r26, 0x03	; 3
    1890:	12 96       	adiw	r26, 0x02	; 2
    1892:	1c 92       	st	X, r1
    1894:	12 97       	sbiw	r26, 0x02	; 2
    1896:	14 96       	adiw	r26, 0x04	; 4
    1898:	8c 91       	ld	r24, X
    189a:	14 97       	sbiw	r26, 0x04	; 4
    189c:	14 96       	adiw	r26, 0x04	; 4
    189e:	9c 91       	ld	r25, X
    18a0:	14 97       	sbiw	r26, 0x04	; 4
    18a2:	84 70       	andi	r24, 0x04	; 4
    18a4:	89 2b       	or	r24, r25
    18a6:	14 96       	adiw	r26, 0x04	; 4
    18a8:	8c 93       	st	X, r24
    18aa:	84 85       	ldd	r24, Z+12	; 0x0c
    18ac:	84 87       	std	Z+12, r24	; 0x0c
    18ae:	10 a2       	std	Z+32, r1	; 0x20
    18b0:	11 a2       	std	Z+33, r1	; 0x21
    18b2:	16 a2       	std	Z+38, r1	; 0x26
    18b4:	17 a2       	std	Z+39, r1	; 0x27
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
    18ba:	80 a7       	std	Z+40, r24	; 0x28
    18bc:	91 a7       	std	Z+41, r25	; 0x29
    18be:	12 a6       	std	Z+42, r1	; 0x2a
    18c0:	13 a6       	std	Z+43, r1	; 0x2b
    18c2:	14 a6       	std	Z+44, r1	; 0x2c
    18c4:	15 a6       	std	Z+45, r1	; 0x2d
    18c6:	16 a6       	std	Z+46, r1	; 0x2e
    18c8:	17 a6       	std	Z+47, r1	; 0x2f
    18ca:	2f bf       	out	0x3f, r18	; 63
    18cc:	08 95       	ret

000018ce <_Z9tcc1_initv>:

// Note: The correct PORTC direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    18ce:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    18d0:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    18d2:	e0 e4       	ldi	r30, 0x40	; 64
    18d4:	f8 e0       	ldi	r31, 0x08	; 8
    18d6:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    18d8:	8c e0       	ldi	r24, 0x0C	; 12
    18da:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCC1);
// Clock source: ClkPer/8
TCC1.CTRLA=TC_CLKSEL_DIV8_gc;
    18dc:	84 e0       	ldi	r24, 0x04	; 4
    18de:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCC1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    18e0:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCC1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    18e2:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCC1.CTRLE=(0<<TC1_BYTEM_bp);
    18e4:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Medium Level
// Error interrupt: Disabled
TCC1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCC1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    18ea:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESC.CTRLA&= ~HIRES_HREN1_bm;
    18ec:	a0 e9       	ldi	r26, 0x90	; 144
    18ee:	b8 e0       	ldi	r27, 0x08	; 8
    18f0:	8c 91       	ld	r24, X
    18f2:	8d 7f       	andi	r24, 0xFD	; 253
    18f4:	8c 93       	st	X, r24

// Clear the interrupt flags
TCC1.INTFLAGS=TCC1.INTFLAGS;
    18f6:	84 85       	ldd	r24, Z+12	; 0x0c
    18f8:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCC1.CNT=0x0000;
    18fa:	10 a2       	std	Z+32, r1	; 0x20
    18fc:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCC1.PER=0x9C3F;
    18fe:	2f e3       	ldi	r18, 0x3F	; 63
    1900:	3c e9       	ldi	r19, 0x9C	; 156
    1902:	26 a3       	std	Z+38, r18	; 0x26
    1904:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCC1.CCA=0x0000;
    1906:	10 a6       	std	Z+40, r1	; 0x28
    1908:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCC1.CCB=0x0000;
    190a:	12 a6       	std	Z+42, r1	; 0x2a
    190c:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    190e:	9f bf       	out	0x3f, r25	; 63
    1910:	08 95       	ret

00001912 <_Z9tcd1_initv>:

// Note: The correct PORTD direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    1912:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    1914:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    1916:	e0 e4       	ldi	r30, 0x40	; 64
    1918:	f9 e0       	ldi	r31, 0x09	; 9
    191a:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    191c:	8c e0       	ldi	r24, 0x0C	; 12
    191e:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCD1);
// Clock source: ClkPer/64
TCD1.CTRLA=TC_CLKSEL_DIV64_gc;
    1920:	85 e0       	ldi	r24, 0x05	; 5
    1922:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCD1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    1924:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCD1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1926:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCD1.CTRLE=(0<<TC1_BYTEM_bp);
    1928:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Low Level
// Error interrupt: Disabled
TCD1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_LO_gc;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCD1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    192e:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESD.CTRLA&= ~HIRES_HREN1_bm;
    1930:	a0 e9       	ldi	r26, 0x90	; 144
    1932:	b9 e0       	ldi	r27, 0x09	; 9
    1934:	8c 91       	ld	r24, X
    1936:	8d 7f       	andi	r24, 0xFD	; 253
    1938:	8c 93       	st	X, r24

// Clear the interrupt flags
TCD1.INTFLAGS=TCD1.INTFLAGS;
    193a:	84 85       	ldd	r24, Z+12	; 0x0c
    193c:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCD1.CNT=0x0000;
    193e:	10 a2       	std	Z+32, r1	; 0x20
    1940:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCD1.PER=0xC34F;
    1942:	2f e4       	ldi	r18, 0x4F	; 79
    1944:	33 ec       	ldi	r19, 0xC3	; 195
    1946:	26 a3       	std	Z+38, r18	; 0x26
    1948:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCD1.CCA=0x0000;
    194a:	10 a6       	std	Z+40, r1	; 0x28
    194c:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCD1.CCB=0x0000;
    194e:	12 a6       	std	Z+42, r1	; 0x2a
    1950:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    1952:	9f bf       	out	0x3f, r25	; 63
    1954:	08 95       	ret

00001956 <__vector_16>:

// Timer/Counter TCC0 Compare/Capture A interrupt service routine
// timer to make pulses level 0

ISR (TCC0_CCA_vect)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	08 b6       	in	r0, 0x38	; 56
    1962:	0f 92       	push	r0
    1964:	18 be       	out	0x38, r1	; 56
    1966:	09 b6       	in	r0, 0x39	; 57
    1968:	0f 92       	push	r0
    196a:	19 be       	out	0x39, r1	; 57
    196c:	0a b6       	in	r0, 0x3a	; 58
    196e:	0f 92       	push	r0
    1970:	1a be       	out	0x3a, r1	; 58
    1972:	0b b6       	in	r0, 0x3b	; 59
    1974:	0f 92       	push	r0
    1976:	1b be       	out	0x3b, r1	; 59
    1978:	4f 92       	push	r4
    197a:	5f 92       	push	r5
    197c:	6f 92       	push	r6
    197e:	7f 92       	push	r7
    1980:	8f 92       	push	r8
    1982:	9f 92       	push	r9
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	7f 93       	push	r23
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
	if (TCC0.INTFLAGS & TC0_CCAIF_bm) TCC0.INTFLAGS |= TC0_CCAIF_bm;
    19b0:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    19b4:	84 ff       	sbrs	r24, 4
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <__vector_16+0x6c>
    19b8:	e0 e0       	ldi	r30, 0x00	; 0
    19ba:	f8 e0       	ldi	r31, 0x08	; 8
    19bc:	84 85       	ldd	r24, Z+12	; 0x0c
    19be:	80 61       	ori	r24, 0x10	; 16
    19c0:	84 87       	std	Z+12, r24	; 0x0c
	
	if(MaxDistanceToGo>0) MaxDistanceToGo--;
    19c2:	80 91 8b 24 	lds	r24, 0x248B	; 0x80248b <MaxDistanceToGo>
    19c6:	90 91 8c 24 	lds	r25, 0x248C	; 0x80248c <MaxDistanceToGo+0x1>
    19ca:	a0 91 8d 24 	lds	r26, 0x248D	; 0x80248d <MaxDistanceToGo+0x2>
    19ce:	b0 91 8e 24 	lds	r27, 0x248E	; 0x80248e <MaxDistanceToGo+0x3>
    19d2:	18 16       	cp	r1, r24
    19d4:	19 06       	cpc	r1, r25
    19d6:	1a 06       	cpc	r1, r26
    19d8:	1b 06       	cpc	r1, r27
    19da:	0c f0       	brlt	.+2      	; 0x19de <__vector_16+0x88>
    19dc:	6f c0       	rjmp	.+222    	; 0x1abc <__vector_16+0x166>
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	a1 09       	sbc	r26, r1
    19e2:	b1 09       	sbc	r27, r1
    19e4:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    19e8:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    19ec:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    19f0:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
    19f4:	63 c0       	rjmp	.+198    	; 0x1abc <__vector_16+0x166>
	
	for (int ax = 0 ; ax < AxisNumber ; ax++)
	{
		if (DistanceToGo[ax] > 0)
    19f6:	88 81       	ld	r24, Y
    19f8:	99 81       	ldd	r25, Y+1	; 0x01
    19fa:	aa 81       	ldd	r26, Y+2	; 0x02
    19fc:	bb 81       	ldd	r27, Y+3	; 0x03
    19fe:	18 16       	cp	r1, r24
    1a00:	19 06       	cpc	r1, r25
    1a02:	1a 06       	cpc	r1, r26
    1a04:	1b 06       	cpc	r1, r27
    1a06:	0c f0       	brlt	.+2      	; 0x1a0a <__vector_16+0xb4>
    1a08:	43 c0       	rjmp	.+134    	; 0x1a90 <__vector_16+0x13a>
		{
			Pi[ax] += Ma[ax];
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	20 81       	ld	r18, Z
    1a0e:	31 81       	ldd	r19, Z+1	; 0x01
    1a10:	f6 01       	movw	r30, r12
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	82 0f       	add	r24, r18
    1a18:	93 1f       	adc	r25, r19
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	80 83       	st	Z, r24
    1a1e:	91 83       	std	Z+1, r25	; 0x01
			if (Pi[ax] >= 1000)
    1a20:	88 3e       	cpi	r24, 0xE8	; 232
    1a22:	93 40       	sbci	r25, 0x03	; 3
    1a24:	90 f1       	brcs	.+100    	; 0x1a8a <__vector_16+0x134>
			{
				AxisPulse(ax); ///should be correct
    1a26:	85 2d       	mov	r24, r5
    1a28:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z9AxisPulsec>
				Pi[ax] -= 1000;
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	88 5e       	subi	r24, 0xE8	; 232
    1a34:	93 40       	sbci	r25, 0x03	; 3
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
				DistanceToGo[ax]--;
    1a3a:	88 81       	ld	r24, Y
    1a3c:	99 81       	ldd	r25, Y+1	; 0x01
    1a3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a40:	bb 81       	ldd	r27, Y+3	; 0x03
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	a1 09       	sbc	r26, r1
    1a46:	b1 09       	sbc	r27, r1
    1a48:	88 83       	st	Y, r24
    1a4a:	99 83       	std	Y+1, r25	; 0x01
    1a4c:	aa 83       	std	Y+2, r26	; 0x02
    1a4e:	bb 83       	std	Y+3, r27	; 0x03
				if (AxisDir[ax] == 0)
    1a50:	f4 01       	movw	r30, r8
    1a52:	80 81       	ld	r24, Z
    1a54:	81 11       	cpse	r24, r1
    1a56:	0d c0       	rjmp	.+26     	; 0x1a72 <__vector_16+0x11c>
				AxisPosition[ax]--;
    1a58:	f5 01       	movw	r30, r10
    1a5a:	80 81       	ld	r24, Z
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a60:	b3 81       	ldd	r27, Z+3	; 0x03
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	a1 09       	sbc	r26, r1
    1a66:	b1 09       	sbc	r27, r1
    1a68:	80 83       	st	Z, r24
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	a2 83       	std	Z+2, r26	; 0x02
    1a6e:	b3 83       	std	Z+3, r27	; 0x03
    1a70:	0c c0       	rjmp	.+24     	; 0x1a8a <__vector_16+0x134>
				else
				AxisPosition[ax]++;
    1a72:	f5 01       	movw	r30, r10
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	a2 81       	ldd	r26, Z+2	; 0x02
    1a7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	b1 1d       	adc	r27, r1
    1a82:	80 83       	st	Z, r24
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	b3 83       	std	Z+3, r27	; 0x03
			}
			AxisIsMoving[ax] = 1;
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	40 82       	st	Z, r4
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <__vector_16+0x13e>
		}
		else
		{
			AxisIsMoving[ax] = 0;
    1a90:	f7 01       	movw	r30, r14
    1a92:	10 82       	st	Z, r1
    1a94:	24 96       	adiw	r28, 0x04	; 4
    1a96:	ff ef       	ldi	r31, 0xFF	; 255
    1a98:	ef 1a       	sub	r14, r31
    1a9a:	ff 0a       	sbc	r15, r31
    1a9c:	0e 5f       	subi	r16, 0xFE	; 254
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	22 e0       	ldi	r18, 0x02	; 2
    1aa2:	c2 0e       	add	r12, r18
    1aa4:	d1 1c       	adc	r13, r1
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	a8 0e       	add	r10, r24
    1aaa:	b1 1c       	adc	r11, r1
    1aac:	53 94       	inc	r5
    1aae:	ef ef       	ldi	r30, 0xFF	; 255
    1ab0:	8e 1a       	sub	r8, r30
    1ab2:	9e 0a       	sbc	r9, r30
{
	if (TCC0.INTFLAGS & TC0_CCAIF_bm) TCC0.INTFLAGS |= TC0_CCAIF_bm;
	
	if(MaxDistanceToGo>0) MaxDistanceToGo--;
	
	for (int ax = 0 ; ax < AxisNumber ; ax++)
    1ab4:	f3 e0       	ldi	r31, 0x03	; 3
    1ab6:	5f 12       	cpse	r5, r31
    1ab8:	9e cf       	rjmp	.-196    	; 0x19f6 <__vector_16+0xa0>
    1aba:	20 c0       	rjmp	.+64     	; 0x1afc <__vector_16+0x1a6>
    1abc:	c8 e1       	ldi	r28, 0x18	; 24
    1abe:	d7 e2       	ldi	r29, 0x27	; 39
    1ac0:	0f 2e       	mov	r0, r31
    1ac2:	fe ee       	ldi	r31, 0xEE	; 238
    1ac4:	ef 2e       	mov	r14, r31
    1ac6:	f6 e2       	ldi	r31, 0x26	; 38
    1ac8:	ff 2e       	mov	r15, r31
    1aca:	f0 2d       	mov	r31, r0
    1acc:	08 ee       	ldi	r16, 0xE8	; 232
    1ace:	16 e2       	ldi	r17, 0x26	; 38
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	f2 ee       	ldi	r31, 0xE2	; 226
    1ad4:	cf 2e       	mov	r12, r31
    1ad6:	f6 e2       	ldi	r31, 0x26	; 38
    1ad8:	df 2e       	mov	r13, r31
    1ada:	f0 2d       	mov	r31, r0
    1adc:	0f 2e       	mov	r0, r31
    1ade:	f4 e2       	ldi	r31, 0x24	; 36
    1ae0:	af 2e       	mov	r10, r31
    1ae2:	f7 e2       	ldi	r31, 0x27	; 39
    1ae4:	bf 2e       	mov	r11, r31
    1ae6:	f0 2d       	mov	r31, r0
    1ae8:	0f 2e       	mov	r0, r31
    1aea:	ff ed       	ldi	r31, 0xDF	; 223
    1aec:	8f 2e       	mov	r8, r31
    1aee:	f6 e2       	ldi	r31, 0x26	; 38
    1af0:	9f 2e       	mov	r9, r31
    1af2:	f0 2d       	mov	r31, r0

// Timer/Counter TCC0 Compare/Capture A interrupt service routine
// timer to make pulses level 0

ISR (TCC0_CCA_vect)
{
    1af4:	51 2c       	mov	r5, r1
				if (AxisDir[ax] == 0)
				AxisPosition[ax]--;
				else
				AxisPosition[ax]++;
			}
			AxisIsMoving[ax] = 1;
    1af6:	44 24       	eor	r4, r4
    1af8:	43 94       	inc	r4
    1afa:	7d cf       	rjmp	.-262    	; 0x19f6 <__vector_16+0xa0>
		else
		{
			AxisIsMoving[ax] = 0;
		}
	}
}
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	bf 90       	pop	r11
    1b26:	af 90       	pop	r10
    1b28:	9f 90       	pop	r9
    1b2a:	8f 90       	pop	r8
    1b2c:	7f 90       	pop	r7
    1b2e:	6f 90       	pop	r6
    1b30:	5f 90       	pop	r5
    1b32:	4f 90       	pop	r4
    1b34:	0f 90       	pop	r0
    1b36:	0b be       	out	0x3b, r0	; 59
    1b38:	0f 90       	pop	r0
    1b3a:	0a be       	out	0x3a, r0	; 58
    1b3c:	0f 90       	pop	r0
    1b3e:	09 be       	out	0x39, r0	; 57
    1b40:	0f 90       	pop	r0
    1b42:	08 be       	out	0x38, r0	; 56
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_20>:

// Timer/Counter TCC1 Overflow/Underflow interrupt service routine
// Timer to set speed according to acceleration and deceleration Level 1
ISR (TCC1_OVF_vect)
{
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	08 b6       	in	r0, 0x38	; 56
    1b5a:	0f 92       	push	r0
    1b5c:	18 be       	out	0x38, r1	; 56
    1b5e:	09 b6       	in	r0, 0x39	; 57
    1b60:	0f 92       	push	r0
    1b62:	19 be       	out	0x39, r1	; 57
    1b64:	0b b6       	in	r0, 0x3b	; 59
    1b66:	0f 92       	push	r0
    1b68:	1b be       	out	0x3b, r1	; 59
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	4f 93       	push	r20
    1b7c:	5f 93       	push	r21
    1b7e:	6f 93       	push	r22
    1b80:	7f 93       	push	r23
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25
    1b86:	af 93       	push	r26
    1b88:	bf 93       	push	r27
    1b8a:	ef 93       	push	r30
    1b8c:	ff 93       	push	r31
	float PER;
	j++;
    1b8e:	80 91 c4 24 	lds	r24, 0x24C4	; 0x8024c4 <j>
    1b92:	90 91 c5 24 	lds	r25, 0x24C5	; 0x8024c5 <j+0x1>
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	80 93 c4 24 	sts	0x24C4, r24	; 0x8024c4 <j>
    1b9c:	90 93 c5 24 	sts	0x24C5, r25	; 0x8024c5 <j+0x1>
	if(MaxDistanceToGo>0)
    1ba0:	c0 90 8b 24 	lds	r12, 0x248B	; 0x80248b <MaxDistanceToGo>
    1ba4:	d0 90 8c 24 	lds	r13, 0x248C	; 0x80248c <MaxDistanceToGo+0x1>
    1ba8:	e0 90 8d 24 	lds	r14, 0x248D	; 0x80248d <MaxDistanceToGo+0x2>
    1bac:	f0 90 8e 24 	lds	r15, 0x248E	; 0x80248e <MaxDistanceToGo+0x3>
    1bb0:	1c 14       	cp	r1, r12
    1bb2:	1d 04       	cpc	r1, r13
    1bb4:	1e 04       	cpc	r1, r14
    1bb6:	1f 04       	cpc	r1, r15
    1bb8:	0c f0       	brlt	.+2      	; 0x1bbc <__vector_20+0x6e>
    1bba:	86 c0       	rjmp	.+268    	; 0x1cc8 <__vector_20+0x17a>
	{
		if(MaxDistanceToGo >= AccDTG)
    1bbc:	80 91 93 24 	lds	r24, 0x2493	; 0x802493 <AccDTG>
    1bc0:	90 91 94 24 	lds	r25, 0x2494	; 0x802494 <AccDTG+0x1>
    1bc4:	a0 91 95 24 	lds	r26, 0x2495	; 0x802495 <AccDTG+0x2>
    1bc8:	b0 91 96 24 	lds	r27, 0x2496	; 0x802496 <AccDTG+0x3>
    1bcc:	c8 16       	cp	r12, r24
    1bce:	d9 06       	cpc	r13, r25
    1bd0:	ea 06       	cpc	r14, r26
    1bd2:	fb 06       	cpc	r15, r27
    1bd4:	b4 f1       	brlt	.+108    	; 0x1c42 <__vector_20+0xf4>
		{
			CurSpeedFrq += ACCSpeedINT;
    1bd6:	40 91 77 24 	lds	r20, 0x2477	; 0x802477 <CurSpeedFrq>
    1bda:	50 91 78 24 	lds	r21, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1bde:	60 91 79 24 	lds	r22, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1be2:	70 91 7a 24 	lds	r23, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1be6:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <ACCSpeedINT>
    1bea:	90 91 74 24 	lds	r25, 0x2474	; 0x802474 <ACCSpeedINT+0x1>
    1bee:	a0 91 75 24 	lds	r26, 0x2475	; 0x802475 <ACCSpeedINT+0x2>
    1bf2:	b0 91 76 24 	lds	r27, 0x2476	; 0x802476 <ACCSpeedINT+0x3>
    1bf6:	8a 01       	movw	r16, r20
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	08 0f       	add	r16, r24
    1bfc:	19 1f       	adc	r17, r25
    1bfe:	2a 1f       	adc	r18, r26
    1c00:	3b 1f       	adc	r19, r27
    1c02:	c9 01       	movw	r24, r18
    1c04:	b8 01       	movw	r22, r16
    1c06:	00 93 77 24 	sts	0x2477, r16	; 0x802477 <CurSpeedFrq>
    1c0a:	10 93 78 24 	sts	0x2478, r17	; 0x802478 <CurSpeedFrq+0x1>
    1c0e:	20 93 79 24 	sts	0x2479, r18	; 0x802479 <CurSpeedFrq+0x2>
    1c12:	30 93 7a 24 	sts	0x247A, r19	; 0x80247a <CurSpeedFrq+0x3>
			PER=(float)(16000.0/CurSpeedFrq);
			TCC0.CCA=(unsigned int)(PER*1000);
    1c16:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    1c1a:	9b 01       	movw	r18, r22
    1c1c:	ac 01       	movw	r20, r24
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	8a e7       	ldi	r24, 0x7A	; 122
    1c24:	96 e4       	ldi	r25, 0x46	; 70
    1c26:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a e7       	ldi	r20, 0x7A	; 122
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    1c36:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    1c3a:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1c3e:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
		}
		if(MaxDistanceToGo <= DecDTG)
    1c42:	80 91 8f 24 	lds	r24, 0x248F	; 0x80248f <DecDTG>
    1c46:	90 91 90 24 	lds	r25, 0x2490	; 0x802490 <DecDTG+0x1>
    1c4a:	a0 91 91 24 	lds	r26, 0x2491	; 0x802491 <DecDTG+0x2>
    1c4e:	b0 91 92 24 	lds	r27, 0x2492	; 0x802492 <DecDTG+0x3>
    1c52:	8c 15       	cp	r24, r12
    1c54:	9d 05       	cpc	r25, r13
    1c56:	ae 05       	cpc	r26, r14
    1c58:	bf 05       	cpc	r27, r15
    1c5a:	0c f4       	brge	.+2      	; 0x1c5e <__vector_20+0x110>
    1c5c:	f3 c0       	rjmp	.+486    	; 0x1e44 <__vector_20+0x2f6>
		{
			CurSpeedFrq -= ACCSpeedINT;
    1c5e:	80 91 77 24 	lds	r24, 0x2477	; 0x802477 <CurSpeedFrq>
    1c62:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1c66:	a0 91 79 24 	lds	r26, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1c6a:	b0 91 7a 24 	lds	r27, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1c6e:	c0 90 73 24 	lds	r12, 0x2473	; 0x802473 <ACCSpeedINT>
    1c72:	d0 90 74 24 	lds	r13, 0x2474	; 0x802474 <ACCSpeedINT+0x1>
    1c76:	e0 90 75 24 	lds	r14, 0x2475	; 0x802475 <ACCSpeedINT+0x2>
    1c7a:	f0 90 76 24 	lds	r15, 0x2476	; 0x802476 <ACCSpeedINT+0x3>
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	6c 19       	sub	r22, r12
    1c84:	7d 09       	sbc	r23, r13
    1c86:	8e 09       	sbc	r24, r14
    1c88:	9f 09       	sbc	r25, r15
    1c8a:	60 93 77 24 	sts	0x2477, r22	; 0x802477 <CurSpeedFrq>
    1c8e:	70 93 78 24 	sts	0x2478, r23	; 0x802478 <CurSpeedFrq+0x1>
    1c92:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <CurSpeedFrq+0x2>
    1c96:	90 93 7a 24 	sts	0x247A, r25	; 0x80247a <CurSpeedFrq+0x3>
			PER=(float)(16000.0/CurSpeedFrq);
			TCC0.CCA=(unsigned int)(PER*1000);
    1c9a:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    1c9e:	9b 01       	movw	r18, r22
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	8a e7       	ldi	r24, 0x7A	; 122
    1ca8:	96 e4       	ldi	r25, 0x46	; 70
    1caa:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a e7       	ldi	r20, 0x7A	; 122
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    1cba:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    1cbe:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1cc2:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1cc6:	be c0       	rjmp	.+380    	; 0x1e44 <__vector_20+0x2f6>
		}
	}
	else
	{
		if(ACC==1)
    1cc8:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <ACC>
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <__vector_20+0x184>
    1cd0:	51 c0       	rjmp	.+162    	; 0x1d74 <__vector_20+0x226>
		{
			CurSpeedFrq += ACCSpeedINT;
    1cd2:	40 91 77 24 	lds	r20, 0x2477	; 0x802477 <CurSpeedFrq>
    1cd6:	50 91 78 24 	lds	r21, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1cda:	60 91 79 24 	lds	r22, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1cde:	70 91 7a 24 	lds	r23, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1ce2:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <ACCSpeedINT>
    1ce6:	90 91 74 24 	lds	r25, 0x2474	; 0x802474 <ACCSpeedINT+0x1>
    1cea:	a0 91 75 24 	lds	r26, 0x2475	; 0x802475 <ACCSpeedINT+0x2>
    1cee:	b0 91 76 24 	lds	r27, 0x2476	; 0x802476 <ACCSpeedINT+0x3>
    1cf2:	84 0f       	add	r24, r20
    1cf4:	95 1f       	adc	r25, r21
    1cf6:	a6 1f       	adc	r26, r22
    1cf8:	b7 1f       	adc	r27, r23
    1cfa:	80 93 77 24 	sts	0x2477, r24	; 0x802477 <CurSpeedFrq>
    1cfe:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <CurSpeedFrq+0x1>
    1d02:	a0 93 79 24 	sts	0x2479, r26	; 0x802479 <CurSpeedFrq+0x2>
    1d06:	b0 93 7a 24 	sts	0x247A, r27	; 0x80247a <CurSpeedFrq+0x3>
			if(CurSpeedFrq >= MaxSpeed)
    1d0a:	40 91 87 24 	lds	r20, 0x2487	; 0x802487 <MaxSpeed>
    1d0e:	50 91 88 24 	lds	r21, 0x2488	; 0x802488 <MaxSpeed+0x1>
    1d12:	60 91 89 24 	lds	r22, 0x2489	; 0x802489 <MaxSpeed+0x2>
    1d16:	70 91 8a 24 	lds	r23, 0x248A	; 0x80248a <MaxSpeed+0x3>
    1d1a:	84 17       	cp	r24, r20
    1d1c:	95 07       	cpc	r25, r21
    1d1e:	a6 07       	cpc	r26, r22
    1d20:	b7 07       	cpc	r27, r23
    1d22:	54 f0       	brlt	.+20     	; 0x1d38 <__vector_20+0x1ea>
			{
				CurSpeedFrq = MaxSpeed;
    1d24:	40 93 77 24 	sts	0x2477, r20	; 0x802477 <CurSpeedFrq>
    1d28:	50 93 78 24 	sts	0x2478, r21	; 0x802478 <CurSpeedFrq+0x1>
    1d2c:	60 93 79 24 	sts	0x2479, r22	; 0x802479 <CurSpeedFrq+0x2>
    1d30:	70 93 7a 24 	sts	0x247A, r23	; 0x80247a <CurSpeedFrq+0x3>
				ACC = 0;
    1d34:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
			}
			PER=(float)(16000.0/CurSpeedFrq);
			
			TCC0.CCA=(unsigned int)(PER*1000);
    1d38:	60 91 77 24 	lds	r22, 0x2477	; 0x802477 <CurSpeedFrq>
    1d3c:	70 91 78 24 	lds	r23, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1d40:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1d44:	90 91 7a 24 	lds	r25, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1d48:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    1d4c:	9b 01       	movw	r18, r22
    1d4e:	ac 01       	movw	r20, r24
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	8a e7       	ldi	r24, 0x7A	; 122
    1d56:	96 e4       	ldi	r25, 0x46	; 70
    1d58:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    1d68:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    1d6c:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1d70:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
		}
		if(DEC==1)
    1d74:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <DEC>
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <__vector_20+0x230>
    1d7c:	63 c0       	rjmp	.+198    	; 0x1e44 <__vector_20+0x2f6>
		{
			CurSpeedFrq -= DECSpeedINT;
    1d7e:	40 91 6f 24 	lds	r20, 0x246F	; 0x80246f <DECSpeedINT>
    1d82:	50 91 70 24 	lds	r21, 0x2470	; 0x802470 <DECSpeedINT+0x1>
    1d86:	60 91 71 24 	lds	r22, 0x2471	; 0x802471 <DECSpeedINT+0x2>
    1d8a:	70 91 72 24 	lds	r23, 0x2472	; 0x802472 <DECSpeedINT+0x3>
    1d8e:	80 91 77 24 	lds	r24, 0x2477	; 0x802477 <CurSpeedFrq>
    1d92:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1d96:	a0 91 79 24 	lds	r26, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1d9a:	b0 91 7a 24 	lds	r27, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1d9e:	84 1b       	sub	r24, r20
    1da0:	95 0b       	sbc	r25, r21
    1da2:	a6 0b       	sbc	r26, r22
    1da4:	b7 0b       	sbc	r27, r23
			if(CurSpeedFrq <= DECSpeedINT)
    1da6:	48 17       	cp	r20, r24
    1da8:	59 07       	cpc	r21, r25
    1daa:	6a 07       	cpc	r22, r26
    1dac:	7b 07       	cpc	r23, r27
    1dae:	4c f4       	brge	.+18     	; 0x1dc2 <__vector_20+0x274>
			
			TCC0.CCA=(unsigned int)(PER*1000);
		}
		if(DEC==1)
		{
			CurSpeedFrq -= DECSpeedINT;
    1db0:	80 93 77 24 	sts	0x2477, r24	; 0x802477 <CurSpeedFrq>
    1db4:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <CurSpeedFrq+0x1>
    1db8:	a0 93 79 24 	sts	0x2479, r26	; 0x802479 <CurSpeedFrq+0x2>
    1dbc:	b0 93 7a 24 	sts	0x247A, r27	; 0x80247a <CurSpeedFrq+0x3>
    1dc0:	23 c0       	rjmp	.+70     	; 0x1e08 <__vector_20+0x2ba>
			if(CurSpeedFrq <= DECSpeedINT)
			{
				CurSpeedFrq=DECSpeedINT;
    1dc2:	40 93 77 24 	sts	0x2477, r20	; 0x802477 <CurSpeedFrq>
    1dc6:	50 93 78 24 	sts	0x2478, r21	; 0x802478 <CurSpeedFrq+0x1>
    1dca:	60 93 79 24 	sts	0x2479, r22	; 0x802479 <CurSpeedFrq+0x2>
    1dce:	70 93 7a 24 	sts	0x247A, r23	; 0x80247a <CurSpeedFrq+0x3>
				DEC=0;
    1dd2:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
				if (FreeJog != -1)
    1dd6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <FreeJog>
    1dda:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <FreeJog+0x1>
    1dde:	8f 3f       	cpi	r24, 0xFF	; 255
    1de0:	1f ef       	ldi	r17, 0xFF	; 255
    1de2:	91 07       	cpc	r25, r17
    1de4:	89 f0       	breq	.+34     	; 0x1e08 <__vector_20+0x2ba>
				{
					DistanceToGo[FreeJog] = 0;
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	fc 01       	movw	r30, r24
    1df0:	e8 5e       	subi	r30, 0xE8	; 232
    1df2:	f8 4d       	sbci	r31, 0xD8	; 216
    1df4:	10 82       	st	Z, r1
    1df6:	11 82       	std	Z+1, r1	; 0x01
    1df8:	12 82       	std	Z+2, r1	; 0x02
    1dfa:	13 82       	std	Z+3, r1	; 0x03
					FreeJog = -1;
    1dfc:	8f ef       	ldi	r24, 0xFF	; 255
    1dfe:	9f ef       	ldi	r25, 0xFF	; 255
    1e00:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <FreeJog>
    1e04:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <FreeJog+0x1>
				}
			}
			PER=(float)(16000.0/CurSpeedFrq);
			
			TCC0.CCA=(unsigned int)(PER*1000);
    1e08:	60 91 77 24 	lds	r22, 0x2477	; 0x802477 <CurSpeedFrq>
    1e0c:	70 91 78 24 	lds	r23, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1e10:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1e14:	90 91 7a 24 	lds	r25, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1e18:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    1e1c:	9b 01       	movw	r18, r22
    1e1e:	ac 01       	movw	r20, r24
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	8a e7       	ldi	r24, 0x7A	; 122
    1e26:	96 e4       	ldi	r25, 0x46	; 70
    1e28:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    1e38:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    1e3c:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1e40:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
		}
	}
	//printf("%u\r\n",TCC0.CCA);
}
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	cf 90       	pop	r12
    1e68:	0f 90       	pop	r0
    1e6a:	0b be       	out	0x3b, r0	; 59
    1e6c:	0f 90       	pop	r0
    1e6e:	09 be       	out	0x39, r0	; 57
    1e70:	0f 90       	pop	r0
    1e72:	08 be       	out	0x38, r0	; 56
    1e74:	0f 90       	pop	r0
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	0f 90       	pop	r0
    1e7a:	1f 90       	pop	r1
    1e7c:	18 95       	reti

00001e7e <__vector_83>:

// Timer/Counter TCD1 Overflow/Underflow interrupt service routine
// PLC INterpolation in this time level 4
ISR (TCD1_OVF_vect)
{
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	08 b6       	in	r0, 0x38	; 56
    1e8a:	0f 92       	push	r0
    1e8c:	18 be       	out	0x38, r1	; 56
    1e8e:	09 b6       	in	r0, 0x39	; 57
    1e90:	0f 92       	push	r0
    1e92:	19 be       	out	0x39, r1	; 57
    1e94:	0a b6       	in	r0, 0x3a	; 58
    1e96:	0f 92       	push	r0
    1e98:	1a be       	out	0x3a, r1	; 58
    1e9a:	0b b6       	in	r0, 0x3b	; 59
    1e9c:	0f 92       	push	r0
    1e9e:	1b be       	out	0x3b, r1	; 59
    1ea0:	7f 92       	push	r7
    1ea2:	8f 92       	push	r8
    1ea4:	9f 92       	push	r9
    1ea6:	af 92       	push	r10
    1ea8:	bf 92       	push	r11
    1eaa:	cf 92       	push	r12
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	2f 93       	push	r18
    1eb8:	3f 93       	push	r19
    1eba:	4f 93       	push	r20
    1ebc:	5f 93       	push	r21
    1ebe:	6f 93       	push	r22
    1ec0:	7f 93       	push	r23
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
    1ed2:	0b ec       	ldi	r16, 0xCB	; 203
    1ed4:	14 e2       	ldi	r17, 0x24	; 36
    1ed6:	0f 2e       	mov	r0, r31
    1ed8:	f8 e1       	ldi	r31, 0x18	; 24
    1eda:	af 2e       	mov	r10, r31
    1edc:	f7 e2       	ldi	r31, 0x27	; 39
    1ede:	bf 2e       	mov	r11, r31
    1ee0:	f0 2d       	mov	r31, r0
    1ee2:	0f 2e       	mov	r0, r31
    1ee4:	fe ee       	ldi	r31, 0xEE	; 238
    1ee6:	cf 2e       	mov	r12, r31
    1ee8:	f6 e2       	ldi	r31, 0x26	; 38
    1eea:	df 2e       	mov	r13, r31
    1eec:	f0 2d       	mov	r31, r0
    1eee:	0f 2e       	mov	r0, r31
    1ef0:	ff ed       	ldi	r31, 0xDF	; 223
    1ef2:	ef 2e       	mov	r14, r31
    1ef4:	f6 e2       	ldi	r31, 0x26	; 38
    1ef6:	ff 2e       	mov	r15, r31
    1ef8:	f0 2d       	mov	r31, r0
	for (int ax = 0 ; ax < AxisNumber ; ax++)
    1efa:	c0 e0       	ldi	r28, 0x00	; 0
    1efc:	d0 e0       	ldi	r29, 0x00	; 0
						ResetDistanceToGoEXP(ax);
					}
				}
			}
		}
		if(Axes[0].HardwareLimitPosIsActive)
    1efe:	48 01       	movw	r8, r16
// PLC INterpolation in this time level 4
ISR (TCD1_OVF_vect)
{
	for (int ax = 0 ; ax < AxisNumber ; ax++)
	{
		if(Axes[ax].HardwareLimitNegIsActive)
    1f00:	f8 01       	movw	r30, r16
    1f02:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f04:	88 23       	and	r24, r24
    1f06:	29 f1       	breq	.+74     	; 0x1f52 <__vector_83+0xd4>
		{
			//printf("Hardware Limit Axis X is Active.(From PLC Timer routine)\r\n");
			//printf("LIM POS X: %u\r\n",LIM_NEG1);
			if(!AxisDir[ax] && !AxisLimitNeg(ax))
    1f08:	f7 01       	movw	r30, r14
    1f0a:	80 81       	ld	r24, Z
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	5b c0       	rjmp	.+182    	; 0x1fc6 <__vector_83+0x148>
    1f10:	8c 2f       	mov	r24, r28
    1f12:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z12AxisLimitNegc>
    1f16:	81 11       	cpse	r24, r1
    1f18:	1c c0       	rjmp	.+56     	; 0x1f52 <__vector_83+0xd4>
			{
				if(AxisIsMoving[ax])
    1f1a:	f6 01       	movw	r30, r12
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 23       	and	r24, r24
    1f20:	c1 f0       	breq	.+48     	; 0x1f52 <__vector_83+0xd4>
				{
					DistanceToGo[ax] = 0;
    1f22:	f5 01       	movw	r30, r10
    1f24:	10 82       	st	Z, r1
    1f26:	11 82       	std	Z+1, r1	; 0x01
    1f28:	12 82       	std	Z+2, r1	; 0x02
    1f2a:	13 82       	std	Z+3, r1	; 0x03
					if(!RefCmd)
    1f2c:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <RefCmd>
    1f30:	81 11       	cpse	r24, r1
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <__vector_83+0xd4>
					{
						FreeJog = ax;
    1f34:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <FreeJog>
    1f38:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <FreeJog+0x1>
						MaxDistanceToGo = 0;
    1f3c:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <MaxDistanceToGo>
    1f40:	10 92 8c 24 	sts	0x248C, r1	; 0x80248c <MaxDistanceToGo+0x1>
    1f44:	10 92 8d 24 	sts	0x248D, r1	; 0x80248d <MaxDistanceToGo+0x2>
    1f48:	10 92 8e 24 	sts	0x248E, r1	; 0x80248e <MaxDistanceToGo+0x3>
						ResetDistanceToGoEXP(ax);
    1f4c:	8c 2f       	mov	r24, r28
    1f4e:	0e 94 40 01 	call	0x280	; 0x280 <_Z20ResetDistanceToGoEXPc>
					}
				}
			}
		}
		if(Axes[0].HardwareLimitPosIsActive)
    1f52:	f4 01       	movw	r30, r8
    1f54:	81 a5       	ldd	r24, Z+41	; 0x29
    1f56:	88 23       	and	r24, r24
    1f58:	29 f1       	breq	.+74     	; 0x1fa4 <__vector_83+0x126>
		{
			//printf("Hardware Limit Axis X is Active.(From PLC Timer routine)\r\n");
			//printf("LIM POS X: %u\r\n",LIM_NEG1);
			if(AxisDir[ax] && !AxisLimitPos(ax))
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 23       	and	r24, r24
    1f60:	09 f1       	breq	.+66     	; 0x1fa4 <__vector_83+0x126>
    1f62:	8c 2f       	mov	r24, r28
    1f64:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z12AxisLimitPosc>
    1f68:	81 11       	cpse	r24, r1
    1f6a:	1c c0       	rjmp	.+56     	; 0x1fa4 <__vector_83+0x126>
			{
				//printf("Axis X PLimit is Active.\r\n");
				if(AxisIsMoving[ax])
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	80 81       	ld	r24, Z
    1f70:	88 23       	and	r24, r24
    1f72:	c1 f0       	breq	.+48     	; 0x1fa4 <__vector_83+0x126>
				{
					DistanceToGo[ax] = 0;
    1f74:	f5 01       	movw	r30, r10
    1f76:	10 82       	st	Z, r1
    1f78:	11 82       	std	Z+1, r1	; 0x01
    1f7a:	12 82       	std	Z+2, r1	; 0x02
    1f7c:	13 82       	std	Z+3, r1	; 0x03
					if(!RefCmd)
    1f7e:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <RefCmd>
    1f82:	81 11       	cpse	r24, r1
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <__vector_83+0x126>
					{
						FreeJog = ax;
    1f86:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <FreeJog>
    1f8a:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <FreeJog+0x1>
						MaxDistanceToGo = 0;
    1f8e:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <MaxDistanceToGo>
    1f92:	10 92 8c 24 	sts	0x248C, r1	; 0x80248c <MaxDistanceToGo+0x1>
    1f96:	10 92 8d 24 	sts	0x248D, r1	; 0x80248d <MaxDistanceToGo+0x2>
    1f9a:	10 92 8e 24 	sts	0x248E, r1	; 0x80248e <MaxDistanceToGo+0x3>
						ResetDistanceToGoEXP(ax);
    1f9e:	8c 2f       	mov	r24, r28
    1fa0:	0e 94 40 01 	call	0x280	; 0x280 <_Z20ResetDistanceToGoEXPc>

// Timer/Counter TCD1 Overflow/Underflow interrupt service routine
// PLC INterpolation in this time level 4
ISR (TCD1_OVF_vect)
{
	for (int ax = 0 ; ax < AxisNumber ; ax++)
    1fa4:	21 96       	adiw	r28, 0x01	; 1
    1fa6:	05 5d       	subi	r16, 0xD5	; 213
    1fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1faa:	f4 e0       	ldi	r31, 0x04	; 4
    1fac:	af 0e       	add	r10, r31
    1fae:	b1 1c       	adc	r11, r1
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	c8 1a       	sub	r12, r24
    1fb4:	d8 0a       	sbc	r13, r24
    1fb6:	ef ef       	ldi	r30, 0xFF	; 255
    1fb8:	ee 1a       	sub	r14, r30
    1fba:	fe 0a       	sbc	r15, r30
    1fbc:	c3 30       	cpi	r28, 0x03	; 3
    1fbe:	d1 05       	cpc	r29, r1
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <__vector_83+0x146>
    1fc2:	9e cf       	rjmp	.-196    	; 0x1f00 <__vector_83+0x82>
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <__vector_83+0x152>
						ResetDistanceToGoEXP(ax);
					}
				}
			}
		}
		if(Axes[0].HardwareLimitPosIsActive)
    1fc6:	f4 01       	movw	r30, r8
    1fc8:	81 a5       	ldd	r24, Z+41	; 0x29
    1fca:	88 23       	and	r24, r24
    1fcc:	59 f3       	breq	.-42     	; 0x1fa4 <__vector_83+0x126>
    1fce:	c9 cf       	rjmp	.-110    	; 0x1f62 <__vector_83+0xe4>
					}
				}
			}
		}
	}
}
    1fd0:	ff 91       	pop	r31
    1fd2:	ef 91       	pop	r30
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	bf 91       	pop	r27
    1fda:	af 91       	pop	r26
    1fdc:	9f 91       	pop	r25
    1fde:	8f 91       	pop	r24
    1fe0:	7f 91       	pop	r23
    1fe2:	6f 91       	pop	r22
    1fe4:	5f 91       	pop	r21
    1fe6:	4f 91       	pop	r20
    1fe8:	3f 91       	pop	r19
    1fea:	2f 91       	pop	r18
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	df 90       	pop	r13
    1ff6:	cf 90       	pop	r12
    1ff8:	bf 90       	pop	r11
    1ffa:	af 90       	pop	r10
    1ffc:	9f 90       	pop	r9
    1ffe:	8f 90       	pop	r8
    2000:	7f 90       	pop	r7
    2002:	0f 90       	pop	r0
    2004:	0b be       	out	0x3b, r0	; 59
    2006:	0f 90       	pop	r0
    2008:	0a be       	out	0x3a, r0	; 58
    200a:	0f 90       	pop	r0
    200c:	09 be       	out	0x39, r0	; 57
    200e:	0f 90       	pop	r0
    2010:	08 be       	out	0x38, r0	; 56
    2012:	0f 90       	pop	r0
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	0f 90       	pop	r0
    2018:	1f 90       	pop	r1
    201a:	18 95       	reti

0000201c <_Z6PRGExev>:


// run a single block the command will be in the CMDPRGList structure
// the structure will load in Main program
void PRGExe()
{
    201c:	2f 92       	push	r2
    201e:	3f 92       	push	r3
    2020:	4f 92       	push	r4
    2022:	5f 92       	push	r5
    2024:	6f 92       	push	r6
    2026:	7f 92       	push	r7
    2028:	8f 92       	push	r8
    202a:	9f 92       	push	r9
    202c:	af 92       	push	r10
    202e:	bf 92       	push	r11
    2030:	cf 92       	push	r12
    2032:	df 92       	push	r13
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
	switch (CMDPRGlist.Mode)
    2040:	80 91 4f 25 	lds	r24, 0x254F	; 0x80254f <CMDPRGlist+0x3>
    2044:	8e 30       	cpi	r24, 0x0E	; 14
    2046:	09 f4       	brne	.+2      	; 0x204a <_Z6PRGExev+0x2e>
    2048:	f6 c1       	rjmp	.+1004   	; 0x2436 <_Z6PRGExev+0x41a>
    204a:	58 f4       	brcc	.+22     	; 0x2062 <_Z6PRGExev+0x46>
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	09 f4       	brne	.+2      	; 0x2052 <_Z6PRGExev+0x36>
    2050:	bc c0       	rjmp	.+376    	; 0x21ca <_Z6PRGExev+0x1ae>
    2052:	c8 f0       	brcs	.+50     	; 0x2086 <_Z6PRGExev+0x6a>
    2054:	8c 30       	cpi	r24, 0x0C	; 12
    2056:	09 f4       	brne	.+2      	; 0x205a <_Z6PRGExev+0x3e>
    2058:	54 c1       	rjmp	.+680    	; 0x2302 <_Z6PRGExev+0x2e6>
    205a:	8d 30       	cpi	r24, 0x0D	; 13
    205c:	09 f4       	brne	.+2      	; 0x2060 <_Z6PRGExev+0x44>
    205e:	d5 c1       	rjmp	.+938    	; 0x240a <_Z6PRGExev+0x3ee>
    2060:	c0 c4       	rjmp	.+2432   	; 0x29e2 <_Z6PRGExev+0x9c6>
    2062:	8a 35       	cpi	r24, 0x5A	; 90
    2064:	09 f4       	brne	.+2      	; 0x2068 <_Z6PRGExev+0x4c>
    2066:	05 c3       	rjmp	.+1546   	; 0x2672 <_Z6PRGExev+0x656>
    2068:	38 f4       	brcc	.+14     	; 0x2078 <_Z6PRGExev+0x5c>
    206a:	81 35       	cpi	r24, 0x51	; 81
    206c:	09 f4       	brne	.+2      	; 0x2070 <_Z6PRGExev+0x54>
    206e:	f5 c2       	rjmp	.+1514   	; 0x265a <_Z6PRGExev+0x63e>
    2070:	82 35       	cpi	r24, 0x52	; 82
    2072:	09 f4       	brne	.+2      	; 0x2076 <_Z6PRGExev+0x5a>
    2074:	f8 c2       	rjmp	.+1520   	; 0x2666 <_Z6PRGExev+0x64a>
    2076:	b5 c4       	rjmp	.+2410   	; 0x29e2 <_Z6PRGExev+0x9c6>
    2078:	84 36       	cpi	r24, 0x64	; 100
    207a:	09 f4       	brne	.+2      	; 0x207e <_Z6PRGExev+0x62>
    207c:	5c c4       	rjmp	.+2232   	; 0x2936 <_Z6PRGExev+0x91a>
    207e:	85 36       	cpi	r24, 0x65	; 101
    2080:	09 f4       	brne	.+2      	; 0x2084 <_Z6PRGExev+0x68>
    2082:	62 c4       	rjmp	.+2244   	; 0x2948 <_Z6PRGExev+0x92c>
    2084:	ae c4       	rjmp	.+2396   	; 0x29e2 <_Z6PRGExev+0x9c6>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    2086:	e0 e0       	ldi	r30, 0x00	; 0
    2088:	f8 e0       	ldi	r31, 0x08	; 8
    208a:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    208c:	8c e0       	ldi	r24, 0x0C	; 12
    208e:	81 87       	std	Z+9, r24	; 0x09
	{
		case 0 :  //Acceleration Mode
		{
			tc0_disable(&TCC0);
			for (int ax = 0 ; ax < CMDPRGlist.AxisNum ; ax++)
    2090:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
    2094:	88 23       	and	r24, r24
    2096:	f1 f1       	breq	.+124    	; 0x2114 <_Z6PRGExev+0xf8>
    2098:	0f 2e       	mov	r0, r31
    209a:	f2 ee       	ldi	r31, 0xE2	; 226
    209c:	cf 2e       	mov	r12, r31
    209e:	f6 e2       	ldi	r31, 0x26	; 38
    20a0:	df 2e       	mov	r13, r31
    20a2:	f0 2d       	mov	r31, r0
    20a4:	0f 2e       	mov	r0, r31
    20a6:	fd e5       	ldi	r31, 0x5D	; 93
    20a8:	ef 2e       	mov	r14, r31
    20aa:	f5 e2       	ldi	r31, 0x25	; 37
    20ac:	ff 2e       	mov	r15, r31
    20ae:	f0 2d       	mov	r31, r0
    20b0:	0f 2e       	mov	r0, r31
    20b2:	f1 e5       	ldi	r31, 0x51	; 81
    20b4:	8f 2e       	mov	r8, r31
    20b6:	f5 e2       	ldi	r31, 0x25	; 37
    20b8:	9f 2e       	mov	r9, r31
    20ba:	f0 2d       	mov	r31, r0
    20bc:	08 e1       	ldi	r16, 0x18	; 24
    20be:	17 e2       	ldi	r17, 0x27	; 39
    20c0:	c0 e0       	ldi	r28, 0x00	; 0
    20c2:	d0 e0       	ldi	r29, 0x00	; 0
    20c4:	0f 2e       	mov	r0, r31
    20c6:	fc e4       	ldi	r31, 0x4C	; 76
    20c8:	af 2e       	mov	r10, r31
    20ca:	f5 e2       	ldi	r31, 0x25	; 37
    20cc:	bf 2e       	mov	r11, r31
    20ce:	f0 2d       	mov	r31, r0
			{
				Ma[ax] = CMDPRGlist.SpeedMa[ax];
    20d0:	f4 01       	movw	r30, r8
    20d2:	87 85       	ldd	r24, Z+15	; 0x0f
    20d4:	90 89       	ldd	r25, Z+16	; 0x10
    20d6:	f6 01       	movw	r30, r12
    20d8:	81 93       	st	Z+, r24
    20da:	91 93       	st	Z+, r25
    20dc:	6f 01       	movw	r12, r30
				SetAxisDir(ax,CMDPRGlist.Direction[ax]);
    20de:	f7 01       	movw	r30, r14
    20e0:	61 91       	ld	r22, Z+
    20e2:	7f 01       	movw	r14, r30
    20e4:	ce 01       	movw	r24, r28
    20e6:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				DistanceToGo[ax] = CMDPRGlist.Move[ax];
    20ea:	f4 01       	movw	r30, r8
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	a2 81       	ldd	r26, Z+2	; 0x02
    20f2:	b3 81       	ldd	r27, Z+3	; 0x03
    20f4:	f4 e0       	ldi	r31, 0x04	; 4
    20f6:	8f 0e       	add	r8, r31
    20f8:	91 1c       	adc	r9, r1
    20fa:	f8 01       	movw	r30, r16
    20fc:	81 93       	st	Z+, r24
    20fe:	91 93       	st	Z+, r25
    2100:	a1 93       	st	Z+, r26
    2102:	b1 93       	st	Z+, r27
    2104:	8f 01       	movw	r16, r30
	switch (CMDPRGlist.Mode)
	{
		case 0 :  //Acceleration Mode
		{
			tc0_disable(&TCC0);
			for (int ax = 0 ; ax < CMDPRGlist.AxisNum ; ax++)
    2106:	21 96       	adiw	r28, 0x01	; 1
    2108:	f5 01       	movw	r30, r10
    210a:	84 81       	ldd	r24, Z+4	; 0x04
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	c8 17       	cp	r28, r24
    2110:	d9 07       	cpc	r29, r25
    2112:	f4 f2       	brlt	.-68     	; 0x20d0 <_Z6PRGExev+0xb4>
				Ma[ax] = CMDPRGlist.SpeedMa[ax];
				SetAxisDir(ax,CMDPRGlist.Direction[ax]);
				DistanceToGo[ax] = CMDPRGlist.Move[ax];
			}
			
			MaxSpeed = CMDPRGlist.MaxSpeed;
    2114:	ec e4       	ldi	r30, 0x4C	; 76
    2116:	f5 e2       	ldi	r31, 0x25	; 37
    2118:	80 a1       	ldd	r24, Z+32	; 0x20
    211a:	91 a1       	ldd	r25, Z+33	; 0x21
    211c:	a2 a1       	ldd	r26, Z+34	; 0x22
    211e:	b3 a1       	ldd	r27, Z+35	; 0x23
    2120:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    2124:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    2128:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    212c:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			ACCSpeedINT = CMDPRGlist.ACCSpeedINT;
    2130:	80 a5       	ldd	r24, Z+40	; 0x28
    2132:	91 a5       	ldd	r25, Z+41	; 0x29
    2134:	a2 a5       	ldd	r26, Z+42	; 0x2a
    2136:	b3 a5       	ldd	r27, Z+43	; 0x2b
    2138:	80 93 73 24 	sts	0x2473, r24	; 0x802473 <ACCSpeedINT>
    213c:	90 93 74 24 	sts	0x2474, r25	; 0x802474 <ACCSpeedINT+0x1>
    2140:	a0 93 75 24 	sts	0x2475, r26	; 0x802475 <ACCSpeedINT+0x2>
    2144:	b0 93 76 24 	sts	0x2476, r27	; 0x802476 <ACCSpeedINT+0x3>
			DECSpeedINT = CMDPRGlist.DECSpeedINT;
    2148:	84 a5       	ldd	r24, Z+44	; 0x2c
    214a:	95 a5       	ldd	r25, Z+45	; 0x2d
    214c:	a6 a5       	ldd	r26, Z+46	; 0x2e
    214e:	b7 a5       	ldd	r27, Z+47	; 0x2f
    2150:	80 93 6f 24 	sts	0x246F, r24	; 0x80246f <DECSpeedINT>
    2154:	90 93 70 24 	sts	0x2470, r25	; 0x802470 <DECSpeedINT+0x1>
    2158:	a0 93 71 24 	sts	0x2471, r26	; 0x802471 <DECSpeedINT+0x2>
    215c:	b0 93 72 24 	sts	0x2472, r27	; 0x802472 <DECSpeedINT+0x3>
			MaxDistanceToGo=CMDPRGlist.MaxDistanceToGo;
    2160:	84 a1       	ldd	r24, Z+36	; 0x24
    2162:	95 a1       	ldd	r25, Z+37	; 0x25
    2164:	a6 a1       	ldd	r26, Z+38	; 0x26
    2166:	b7 a1       	ldd	r27, Z+39	; 0x27
    2168:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    216c:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    2170:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    2174:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
			AccDTG=CMDPRGlist.ACCDTG;
    2178:	80 a9       	ldd	r24, Z+48	; 0x30
    217a:	91 a9       	ldd	r25, Z+49	; 0x31
    217c:	a2 a9       	ldd	r26, Z+50	; 0x32
    217e:	b3 a9       	ldd	r27, Z+51	; 0x33
    2180:	80 93 93 24 	sts	0x2493, r24	; 0x802493 <AccDTG>
    2184:	90 93 94 24 	sts	0x2494, r25	; 0x802494 <AccDTG+0x1>
    2188:	a0 93 95 24 	sts	0x2495, r26	; 0x802495 <AccDTG+0x2>
    218c:	b0 93 96 24 	sts	0x2496, r27	; 0x802496 <AccDTG+0x3>
			DecDTG=CMDPRGlist.DECDTG;
    2190:	84 a9       	ldd	r24, Z+52	; 0x34
    2192:	95 a9       	ldd	r25, Z+53	; 0x35
    2194:	a6 a9       	ldd	r26, Z+54	; 0x36
    2196:	b7 a9       	ldd	r27, Z+55	; 0x37
    2198:	80 93 8f 24 	sts	0x248F, r24	; 0x80248f <DecDTG>
    219c:	90 93 90 24 	sts	0x2490, r25	; 0x802490 <DecDTG+0x1>
    21a0:	a0 93 91 24 	sts	0x2491, r26	; 0x802491 <DecDTG+0x2>
    21a4:	b0 93 92 24 	sts	0x2492, r27	; 0x802492 <DecDTG+0x3>
			
			CurSpeedFrq = 0;
    21a8:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    21ac:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    21b0:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    21b4:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
			tcc0_init();
    21b8:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			TCC0.CCA = 0XFFFF;
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	9f ef       	ldi	r25, 0xFF	; 255
    21c0:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    21c4:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			//        ACC = 1;
			
			break;
    21c8:	0c c4       	rjmp	.+2072   	; 0x29e2 <_Z6PRGExev+0x9c6>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    21ca:	e0 e0       	ldi	r30, 0x00	; 0
    21cc:	f8 e0       	ldi	r31, 0x08	; 8
    21ce:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    21d0:	8c e0       	ldi	r24, 0x0C	; 12
    21d2:	81 87       	std	Z+9, r24	; 0x09
		}
		case 1 : // With out ACC Mode
		{
			tc0_disable(&TCC0);
			for (int ax = 0 ; ax < CMDPRGlist.AxisNum ; ax++)
    21d4:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
    21d8:	88 23       	and	r24, r24
    21da:	f1 f1       	breq	.+124    	; 0x2258 <_Z6PRGExev+0x23c>
    21dc:	0f 2e       	mov	r0, r31
    21de:	f2 ee       	ldi	r31, 0xE2	; 226
    21e0:	cf 2e       	mov	r12, r31
    21e2:	f6 e2       	ldi	r31, 0x26	; 38
    21e4:	df 2e       	mov	r13, r31
    21e6:	f0 2d       	mov	r31, r0
    21e8:	0f 2e       	mov	r0, r31
    21ea:	fd e5       	ldi	r31, 0x5D	; 93
    21ec:	ef 2e       	mov	r14, r31
    21ee:	f5 e2       	ldi	r31, 0x25	; 37
    21f0:	ff 2e       	mov	r15, r31
    21f2:	f0 2d       	mov	r31, r0
    21f4:	0f 2e       	mov	r0, r31
    21f6:	f1 e5       	ldi	r31, 0x51	; 81
    21f8:	8f 2e       	mov	r8, r31
    21fa:	f5 e2       	ldi	r31, 0x25	; 37
    21fc:	9f 2e       	mov	r9, r31
    21fe:	f0 2d       	mov	r31, r0
    2200:	08 e1       	ldi	r16, 0x18	; 24
    2202:	17 e2       	ldi	r17, 0x27	; 39
    2204:	c0 e0       	ldi	r28, 0x00	; 0
    2206:	d0 e0       	ldi	r29, 0x00	; 0
    2208:	0f 2e       	mov	r0, r31
    220a:	fc e4       	ldi	r31, 0x4C	; 76
    220c:	af 2e       	mov	r10, r31
    220e:	f5 e2       	ldi	r31, 0x25	; 37
    2210:	bf 2e       	mov	r11, r31
    2212:	f0 2d       	mov	r31, r0
			{
				Ma[ax] = CMDPRGlist.SpeedMa[ax];
    2214:	f4 01       	movw	r30, r8
    2216:	87 85       	ldd	r24, Z+15	; 0x0f
    2218:	90 89       	ldd	r25, Z+16	; 0x10
    221a:	f6 01       	movw	r30, r12
    221c:	81 93       	st	Z+, r24
    221e:	91 93       	st	Z+, r25
    2220:	6f 01       	movw	r12, r30
				SetAxisDir(ax,CMDPRGlist.Direction[ax]);
    2222:	f7 01       	movw	r30, r14
    2224:	61 91       	ld	r22, Z+
    2226:	7f 01       	movw	r14, r30
    2228:	ce 01       	movw	r24, r28
    222a:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				DistanceToGo[ax] = CMDPRGlist.Move[ax];
    222e:	f4 01       	movw	r30, r8
    2230:	80 81       	ld	r24, Z
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	a2 81       	ldd	r26, Z+2	; 0x02
    2236:	b3 81       	ldd	r27, Z+3	; 0x03
    2238:	f4 e0       	ldi	r31, 0x04	; 4
    223a:	8f 0e       	add	r8, r31
    223c:	91 1c       	adc	r9, r1
    223e:	f8 01       	movw	r30, r16
    2240:	81 93       	st	Z+, r24
    2242:	91 93       	st	Z+, r25
    2244:	a1 93       	st	Z+, r26
    2246:	b1 93       	st	Z+, r27
    2248:	8f 01       	movw	r16, r30
			break;
		}
		case 1 : // With out ACC Mode
		{
			tc0_disable(&TCC0);
			for (int ax = 0 ; ax < CMDPRGlist.AxisNum ; ax++)
    224a:	21 96       	adiw	r28, 0x01	; 1
    224c:	f5 01       	movw	r30, r10
    224e:	84 81       	ldd	r24, Z+4	; 0x04
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	c8 17       	cp	r28, r24
    2254:	d9 07       	cpc	r29, r25
    2256:	f4 f2       	brlt	.-68     	; 0x2214 <_Z6PRGExev+0x1f8>
				Ma[ax] = CMDPRGlist.SpeedMa[ax];
				SetAxisDir(ax,CMDPRGlist.Direction[ax]);
				DistanceToGo[ax] = CMDPRGlist.Move[ax];
			}
			
			MaxSpeed = CMDPRGlist.MaxSpeed;
    2258:	60 91 6c 25 	lds	r22, 0x256C	; 0x80256c <CMDPRGlist+0x20>
    225c:	70 91 6d 25 	lds	r23, 0x256D	; 0x80256d <CMDPRGlist+0x21>
    2260:	80 91 6e 25 	lds	r24, 0x256E	; 0x80256e <CMDPRGlist+0x22>
    2264:	90 91 6f 25 	lds	r25, 0x256F	; 0x80256f <CMDPRGlist+0x23>
    2268:	60 93 87 24 	sts	0x2487, r22	; 0x802487 <MaxSpeed>
    226c:	70 93 88 24 	sts	0x2488, r23	; 0x802488 <MaxSpeed+0x1>
    2270:	80 93 89 24 	sts	0x2489, r24	; 0x802489 <MaxSpeed+0x2>
    2274:	90 93 8a 24 	sts	0x248A, r25	; 0x80248a <MaxSpeed+0x3>
			AccDTG = 0;
    2278:	10 92 93 24 	sts	0x2493, r1	; 0x802493 <AccDTG>
    227c:	10 92 94 24 	sts	0x2494, r1	; 0x802494 <AccDTG+0x1>
    2280:	10 92 95 24 	sts	0x2495, r1	; 0x802495 <AccDTG+0x2>
    2284:	10 92 96 24 	sts	0x2496, r1	; 0x802496 <AccDTG+0x3>
			DecDTG = 0;
    2288:	10 92 8f 24 	sts	0x248F, r1	; 0x80248f <DecDTG>
    228c:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <DecDTG+0x1>
    2290:	10 92 91 24 	sts	0x2491, r1	; 0x802491 <DecDTG+0x2>
    2294:	10 92 92 24 	sts	0x2492, r1	; 0x802492 <DecDTG+0x3>
			
			CurSpeedFrq = MaxSpeed;
    2298:	60 93 77 24 	sts	0x2477, r22	; 0x802477 <CurSpeedFrq>
    229c:	70 93 78 24 	sts	0x2478, r23	; 0x802478 <CurSpeedFrq+0x1>
    22a0:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <CurSpeedFrq+0x2>
    22a4:	90 93 7a 24 	sts	0x247A, r25	; 0x80247a <CurSpeedFrq+0x3>
			ACC = 0;
    22a8:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
			DEC = 0;
    22ac:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
			TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    22b0:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    22b4:	9b 01       	movw	r18, r22
    22b6:	ac 01       	movw	r20, r24
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	8a e7       	ldi	r24, 0x7A	; 122
    22be:	96 e4       	ldi	r25, 0x46	; 70
    22c0:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    22c4:	60 93 c6 24 	sts	0x24C6, r22	; 0x8024c6 <TimerMainPeriod>
    22c8:	70 93 c7 24 	sts	0x24C7, r23	; 0x8024c7 <TimerMainPeriod+0x1>
    22cc:	80 93 c8 24 	sts	0x24C8, r24	; 0x8024c8 <TimerMainPeriod+0x2>
    22d0:	90 93 c9 24 	sts	0x24C9, r25	; 0x8024c9 <TimerMainPeriod+0x3>
			tcc0_init();
    22d4:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	54 e4       	ldi	r21, 0x44	; 68
    22e0:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    22e4:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    22e8:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    22ec:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    22f0:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    22f4:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    22f8:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    22fc:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			break;
    2300:	70 c3       	rjmp	.+1760   	; 0x29e2 <_Z6PRGExev+0x9c6>
		}
		case 12: //Go to Refrence
		{
			while (IsAnyAxisMoving() == 1);
    2302:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	f1 f3       	breq	.-4      	; 0x2306 <_Z6PRGExev+0x2ea>
    230a:	0b ec       	ldi	r16, 0xCB	; 203
    230c:	14 e2       	ldi	r17, 0x24	; 36
    230e:	0f 2e       	mov	r0, r31
    2310:	f2 ee       	ldi	r31, 0xE2	; 226
    2312:	cf 2e       	mov	r12, r31
    2314:	f6 e2       	ldi	r31, 0x26	; 38
    2316:	df 2e       	mov	r13, r31
    2318:	f0 2d       	mov	r31, r0
    231a:	0f 2e       	mov	r0, r31
    231c:	f8 e1       	ldi	r31, 0x18	; 24
    231e:	ef 2e       	mov	r14, r31
    2320:	f7 e2       	ldi	r31, 0x27	; 39
    2322:	ff 2e       	mov	r15, r31
    2324:	f0 2d       	mov	r31, r0
    2326:	c0 e0       	ldi	r28, 0x00	; 0
    2328:	d0 e0       	ldi	r29, 0x00	; 0
			
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				SetAxisDir(ax,Axes[ax].RefrenceDir);
				Ma[ax] = 1000;
    232a:	0f 2e       	mov	r0, r31
    232c:	f8 ee       	ldi	r31, 0xE8	; 232
    232e:	6f 2e       	mov	r6, r31
    2330:	f3 e0       	ldi	r31, 0x03	; 3
    2332:	7f 2e       	mov	r7, r31
    2334:	f0 2d       	mov	r31, r0
				DistanceToGo[ax] = 0x7FFFFFFF;
    2336:	0f 2e       	mov	r0, r31
    2338:	88 24       	eor	r8, r8
    233a:	8a 94       	dec	r8
    233c:	98 2c       	mov	r9, r8
    233e:	a8 2c       	mov	r10, r8
    2340:	ff e7       	ldi	r31, 0x7F	; 127
    2342:	bf 2e       	mov	r11, r31
    2344:	f0 2d       	mov	r31, r0
		{
			while (IsAnyAxisMoving() == 1);
			
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				SetAxisDir(ax,Axes[ax].RefrenceDir);
    2346:	f8 01       	movw	r30, r16
    2348:	64 8d       	ldd	r22, Z+28	; 0x1c
    234a:	ce 01       	movw	r24, r28
    234c:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				Ma[ax] = 1000;
    2350:	f6 01       	movw	r30, r12
    2352:	61 92       	st	Z+, r6
    2354:	71 92       	st	Z+, r7
    2356:	6f 01       	movw	r12, r30
				DistanceToGo[ax] = 0x7FFFFFFF;
    2358:	f7 01       	movw	r30, r14
    235a:	81 92       	st	Z+, r8
    235c:	91 92       	st	Z+, r9
    235e:	a1 92       	st	Z+, r10
    2360:	b1 92       	st	Z+, r11
    2362:	7f 01       	movw	r14, r30
		}
		case 12: //Go to Refrence
		{
			while (IsAnyAxisMoving() == 1);
			
			for (int ax = 0 ; ax < AxisNumber ; ax++)
    2364:	21 96       	adiw	r28, 0x01	; 1
    2366:	05 5d       	subi	r16, 0xD5	; 213
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	c3 30       	cpi	r28, 0x03	; 3
    236c:	d1 05       	cpc	r29, r1
    236e:	59 f7       	brne	.-42     	; 0x2346 <_Z6PRGExev+0x32a>
				SetAxisDir(ax,Axes[ax].RefrenceDir);
				Ma[ax] = 1000;
				DistanceToGo[ax] = 0x7FFFFFFF;
			}
			
			MaxSpeed=8000;
    2370:	80 e4       	ldi	r24, 0x40	; 64
    2372:	9f e1       	ldi	r25, 0x1F	; 31
    2374:	a0 e0       	ldi	r26, 0x00	; 0
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    237c:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    2380:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    2384:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			
			CurSpeedFrq = MaxSpeed;
    2388:	80 93 77 24 	sts	0x2477, r24	; 0x802477 <CurSpeedFrq>
    238c:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <CurSpeedFrq+0x1>
    2390:	a0 93 79 24 	sts	0x2479, r26	; 0x802479 <CurSpeedFrq+0x2>
    2394:	b0 93 7a 24 	sts	0x247A, r27	; 0x80247a <CurSpeedFrq+0x3>
			ACC = 0;
    2398:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
			DEC = 0;
    239c:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
			TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e0       	ldi	r26, 0x00	; 0
    23a6:	b0 e4       	ldi	r27, 0x40	; 64
    23a8:	80 93 c6 24 	sts	0x24C6, r24	; 0x8024c6 <TimerMainPeriod>
    23ac:	90 93 c7 24 	sts	0x24C7, r25	; 0x8024c7 <TimerMainPeriod+0x1>
    23b0:	a0 93 c8 24 	sts	0x24C8, r26	; 0x8024c8 <TimerMainPeriod+0x2>
    23b4:	b0 93 c9 24 	sts	0x24C9, r27	; 0x8024c9 <TimerMainPeriod+0x3>
			RefCmd=1;
    23b8:	c1 e0       	ldi	r28, 0x01	; 1
    23ba:	c0 93 68 24 	sts	0x2468, r28	; 0x802468 <RefCmd>
			
			tcc0_init();
    23be:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			
			TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a e7       	ldi	r20, 0x7A	; 122
    23c8:	54 e4       	ldi	r21, 0x44	; 68
    23ca:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    23ce:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    23d2:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    23d6:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    23da:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    23de:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    23e2:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    23e6:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			sprintf(BufferSend,"!1200\r\n");
    23ea:	88 e0       	ldi	r24, 0x08	; 8
    23ec:	ea ed       	ldi	r30, 0xDA	; 218
    23ee:	f0 e2       	ldi	r31, 0x20	; 32
    23f0:	a9 e6       	ldi	r26, 0x69	; 105
    23f2:	b6 e2       	ldi	r27, 0x26	; 38
    23f4:	01 90       	ld	r0, Z+
    23f6:	0d 92       	st	X+, r0
    23f8:	8a 95       	dec	r24
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <_Z6PRGExev+0x3d8>
			Responsing = 1;
    23fc:	c0 93 9c 25 	sts	0x259C, r28	; 0x80259c <Responsing>
			SetDataReady; //there is some data for raspberry to receive
    2400:	e0 ea       	ldi	r30, 0xA0	; 160
    2402:	f6 e0       	ldi	r31, 0x06	; 6
    2404:	84 81       	ldd	r24, Z+4	; 0x04
    2406:	81 60       	ori	r24, 0x01	; 1
    2408:	84 83       	std	Z+4, r24	; 0x04
		}
		case 13: //set this position as reference
		{
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				SoftRefrence[ax] = AxisPosition[ax];
    240a:	e3 ed       	ldi	r30, 0xD3	; 211
    240c:	f6 e2       	ldi	r31, 0x26	; 38
    240e:	a4 e2       	ldi	r26, 0x24	; 36
    2410:	b7 e2       	ldi	r27, 0x27	; 39
    2412:	8d 91       	ld	r24, X+
    2414:	9c 91       	ld	r25, X
    2416:	11 97       	sbiw	r26, 0x01	; 1
    2418:	80 83       	st	Z, r24
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	14 96       	adiw	r26, 0x04	; 4
    241e:	8d 91       	ld	r24, X+
    2420:	9c 91       	ld	r25, X
    2422:	15 97       	sbiw	r26, 0x05	; 5
    2424:	82 83       	std	Z+2, r24	; 0x02
    2426:	93 83       	std	Z+3, r25	; 0x03
    2428:	18 96       	adiw	r26, 0x08	; 8
    242a:	8d 91       	ld	r24, X+
    242c:	9c 91       	ld	r25, X
    242e:	19 97       	sbiw	r26, 0x09	; 9
    2430:	84 83       	std	Z+4, r24	; 0x04
    2432:	95 83       	std	Z+5, r25	; 0x05
    2434:	d6 c2       	rjmp	.+1452   	; 0x29e2 <_Z6PRGExev+0x9c6>
			break;
		}
		case 14: //goto software refrence
		{
			//printf("Back to Software reference.\r\n");
			while (IsAnyAxisMoving() == 1);
    2436:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	f1 f3       	breq	.-4      	; 0x243a <_Z6PRGExev+0x41e>
    243e:	04 e2       	ldi	r16, 0x24	; 36
    2440:	17 e2       	ldi	r17, 0x27	; 39
    2442:	c3 ed       	ldi	r28, 0xD3	; 211
    2444:	d6 e2       	ldi	r29, 0x26	; 38
    2446:	0f 2e       	mov	r0, r31
    2448:	f8 e1       	ldi	r31, 0x18	; 24
    244a:	af 2e       	mov	r10, r31
    244c:	f7 e2       	ldi	r31, 0x27	; 39
    244e:	bf 2e       	mov	r11, r31
    2450:	f0 2d       	mov	r31, r0
    2452:	45 01       	movw	r8, r10
    2454:	e1 2c       	mov	r14, r1
    2456:	f1 2c       	mov	r15, r1
    2458:	21 2c       	mov	r2, r1
    245a:	31 2c       	mov	r3, r1
    245c:	c1 2c       	mov	r12, r1
    245e:	d1 2c       	mov	r13, r1
    2460:	3e 01       	movw	r6, r28
    2462:	28 01       	movw	r4, r16
			unsigned int temp = 0;
			int tempa = 0;
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				if(SoftRefrence[ax]<AxisPosition[ax]) SetAxisDir(ax,0);
    2464:	88 81       	ld	r24, Y
    2466:	99 81       	ldd	r25, Y+1	; 0x01
    2468:	a0 e0       	ldi	r26, 0x00	; 0
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	f8 01       	movw	r30, r16
    246e:	40 81       	ld	r20, Z
    2470:	51 81       	ldd	r21, Z+1	; 0x01
    2472:	62 81       	ldd	r22, Z+2	; 0x02
    2474:	73 81       	ldd	r23, Z+3	; 0x03
    2476:	84 17       	cp	r24, r20
    2478:	95 07       	cpc	r25, r21
    247a:	a6 07       	cpc	r26, r22
    247c:	b7 07       	cpc	r27, r23
    247e:	94 f4       	brge	.+36     	; 0x24a4 <_Z6PRGExev+0x488>
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	c7 01       	movw	r24, r14
    2484:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				if(SoftRefrence[ax]>=AxisPosition[ax]) SetAxisDir(ax,1);
    2488:	88 81       	ld	r24, Y
    248a:	99 81       	ldd	r25, Y+1	; 0x01
    248c:	a0 e0       	ldi	r26, 0x00	; 0
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	f8 01       	movw	r30, r16
    2492:	40 81       	ld	r20, Z
    2494:	51 81       	ldd	r21, Z+1	; 0x01
    2496:	62 81       	ldd	r22, Z+2	; 0x02
    2498:	73 81       	ldd	r23, Z+3	; 0x03
    249a:	84 17       	cp	r24, r20
    249c:	95 07       	cpc	r25, r21
    249e:	a6 07       	cpc	r26, r22
    24a0:	b7 07       	cpc	r27, r23
    24a2:	24 f0       	brlt	.+8      	; 0x24ac <_Z6PRGExev+0x490>
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	c7 01       	movw	r24, r14
    24a8:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
    24ac:	0c 5f       	subi	r16, 0xFC	; 252
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	22 96       	adiw	r28, 0x02	; 2
				DistanceToGo[ax] = 	labs(AxisPosition[ax]-SoftRefrence[ax]);
    24b2:	f3 01       	movw	r30, r6
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	f2 01       	movw	r30, r4
    24ba:	40 81       	ld	r20, Z
    24bc:	51 81       	ldd	r21, Z+1	; 0x01
    24be:	62 81       	ldd	r22, Z+2	; 0x02
    24c0:	73 81       	ldd	r23, Z+3	; 0x03
    24c2:	48 1b       	sub	r20, r24
    24c4:	59 0b       	sbc	r21, r25
    24c6:	61 09       	sbc	r22, r1
    24c8:	71 09       	sbc	r23, r1
    24ca:	db 01       	movw	r26, r22
    24cc:	ca 01       	movw	r24, r20
    24ce:	3a f4       	brpl	.+14     	; 0x24de <_Z6PRGExev+0x4c2>
    24d0:	88 27       	eor	r24, r24
    24d2:	99 27       	eor	r25, r25
    24d4:	dc 01       	movw	r26, r24
    24d6:	84 1b       	sub	r24, r20
    24d8:	95 0b       	sbc	r25, r21
    24da:	a6 0b       	sbc	r26, r22
    24dc:	b7 0b       	sbc	r27, r23
    24de:	f4 01       	movw	r30, r8
    24e0:	81 93       	st	Z+, r24
    24e2:	91 93       	st	Z+, r25
    24e4:	a1 93       	st	Z+, r26
    24e6:	b1 93       	st	Z+, r27
    24e8:	4f 01       	movw	r8, r30
				if (DistanceToGo[ax] > temp)
    24ea:	a6 01       	movw	r20, r12
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	48 17       	cp	r20, r24
    24f2:	59 07       	cpc	r21, r25
    24f4:	6a 07       	cpc	r22, r26
    24f6:	7b 07       	cpc	r23, r27
    24f8:	14 f4       	brge	.+4      	; 0x24fe <_Z6PRGExev+0x4e2>
				{
					temp = DistanceToGo[ax];
    24fa:	6c 01       	movw	r12, r24
    24fc:	17 01       	movw	r2, r14
		{
			//printf("Back to Software reference.\r\n");
			while (IsAnyAxisMoving() == 1);
			unsigned int temp = 0;
			int tempa = 0;
			for (int ax = 0 ; ax < AxisNumber ; ax++)
    24fe:	ff ef       	ldi	r31, 0xFF	; 255
    2500:	ef 1a       	sub	r14, r31
    2502:	ff 0a       	sbc	r15, r31
    2504:	23 e0       	ldi	r18, 0x03	; 3
    2506:	e2 16       	cp	r14, r18
    2508:	f1 04       	cpc	r15, r1
    250a:	09 f0       	breq	.+2      	; 0x250e <_Z6PRGExev+0x4f2>
    250c:	a9 cf       	rjmp	.-174    	; 0x2460 <_Z6PRGExev+0x444>
				}
			}
			
			//printf("SoftRef1: %d\tSoftRef2: %d\tSoftRef3: %d\r\n",SoftRef1,SoftRef2,SoftRef3);
			//printf("DistanceToGo1: %d\tDistanceToGo2: %d\tDistanceToGo3: %d\r\n",DistanceToGo1,DistanceToGo2,DistanceToGo3);
			MaxSpeed = Axes[tempa].MaxSpeed;
    250e:	8b e2       	ldi	r24, 0x2B	; 43
    2510:	82 9d       	mul	r24, r2
    2512:	f0 01       	movw	r30, r0
    2514:	83 9d       	mul	r24, r3
    2516:	f0 0d       	add	r31, r0
    2518:	11 24       	eor	r1, r1
    251a:	e5 53       	subi	r30, 0x35	; 53
    251c:	fb 4d       	sbci	r31, 0xDB	; 219
    251e:	85 81       	ldd	r24, Z+5	; 0x05
    2520:	96 81       	ldd	r25, Z+6	; 0x06
    2522:	a7 81       	ldd	r26, Z+7	; 0x07
    2524:	b0 85       	ldd	r27, Z+8	; 0x08
    2526:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    252a:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    252e:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    2532:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			IACC = Axes[tempa].ACC;
    2536:	41 85       	ldd	r20, Z+9	; 0x09
    2538:	52 85       	ldd	r21, Z+10	; 0x0a
    253a:	63 85       	ldd	r22, Z+11	; 0x0b
    253c:	74 85       	ldd	r23, Z+12	; 0x0c
    253e:	40 93 83 24 	sts	0x2483, r20	; 0x802483 <IACC>
    2542:	50 93 84 24 	sts	0x2484, r21	; 0x802484 <IACC+0x1>
    2546:	60 93 85 24 	sts	0x2485, r22	; 0x802485 <IACC+0x2>
    254a:	70 93 86 24 	sts	0x2486, r23	; 0x802486 <IACC+0x3>
			IDEC = Axes[tempa].DEC;
    254e:	45 85       	ldd	r20, Z+13	; 0x0d
    2550:	56 85       	ldd	r21, Z+14	; 0x0e
    2552:	67 85       	ldd	r22, Z+15	; 0x0f
    2554:	70 89       	ldd	r23, Z+16	; 0x10
    2556:	40 93 7f 24 	sts	0x247F, r20	; 0x80247f <IDEC>
    255a:	50 93 80 24 	sts	0x2480, r21	; 0x802480 <IDEC+0x1>
    255e:	60 93 81 24 	sts	0x2481, r22	; 0x802481 <IDEC+0x2>
    2562:	70 93 82 24 	sts	0x2482, r23	; 0x802482 <IDEC+0x3>
			MaxDistanceToGo = temp;
    2566:	e1 2c       	mov	r14, r1
    2568:	f1 2c       	mov	r15, r1
    256a:	c0 92 8b 24 	sts	0x248B, r12	; 0x80248b <MaxDistanceToGo>
    256e:	d0 92 8c 24 	sts	0x248C, r13	; 0x80248c <MaxDistanceToGo+0x1>
    2572:	e0 92 8d 24 	sts	0x248D, r14	; 0x80248d <MaxDistanceToGo+0x2>
    2576:	f0 92 8e 24 	sts	0x248E, r15	; 0x80248e <MaxDistanceToGo+0x3>
			//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
			if(MaxSpeed == 0)
    257a:	89 2b       	or	r24, r25
    257c:	8a 2b       	or	r24, r26
    257e:	8b 2b       	or	r24, r27
    2580:	09 f0       	breq	.+2      	; 0x2584 <_Z6PRGExev+0x568>
    2582:	2a c2       	rjmp	.+1108   	; 0x29d8 <_Z6PRGExev+0x9bc>
			{
				MaxSpeed = 500;
    2584:	84 ef       	ldi	r24, 0xF4	; 244
    2586:	91 e0       	ldi	r25, 0x01	; 1
    2588:	a0 e0       	ldi	r26, 0x00	; 0
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    2590:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    2594:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    2598:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
				ACC = 0;
    259c:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
				DEC = 0;
    25a0:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
    25a4:	19 c2       	rjmp	.+1074   	; 0x29d8 <_Z6PRGExev+0x9bc>
			}
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				Ma[ax] = (unsigned int)((float)((float)DistanceToGo[ax]/(float)MaxDistanceToGo)*1000);
    25a6:	f5 01       	movw	r30, r10
    25a8:	61 91       	ld	r22, Z+
    25aa:	71 91       	ld	r23, Z+
    25ac:	81 91       	ld	r24, Z+
    25ae:	91 91       	ld	r25, Z+
    25b0:	5f 01       	movw	r10, r30
    25b2:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    25b6:	2b 01       	movw	r4, r22
    25b8:	3c 01       	movw	r6, r24
    25ba:	c7 01       	movw	r24, r14
    25bc:	b6 01       	movw	r22, r12
    25be:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	c3 01       	movw	r24, r6
    25c8:	b2 01       	movw	r22, r4
    25ca:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a e7       	ldi	r20, 0x7A	; 122
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    25da:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    25de:	69 93       	st	Y+, r22
    25e0:	79 93       	st	Y+, r23
			{
				MaxSpeed = 500;
				ACC = 0;
				DEC = 0;
			}
			for (int ax = 0 ; ax < AxisNumber ; ax++)
    25e2:	a0 16       	cp	r10, r16
    25e4:	b1 06       	cpc	r11, r17
    25e6:	f9 f6       	brne	.-66     	; 0x25a6 <_Z6PRGExev+0x58a>
			{
				Ma[ax] = (unsigned int)((float)((float)DistanceToGo[ax]/(float)MaxDistanceToGo)*1000);
			}
			//printf("MaxSpeed: %d\tMa1: %d\tMa2: %d\tMa3: %d\r\n",MaxSpeed,Ma1,Ma2,Ma3);
			
			CurSpeedFrq=MaxSpeed;
    25e8:	60 91 87 24 	lds	r22, 0x2487	; 0x802487 <MaxSpeed>
    25ec:	70 91 88 24 	lds	r23, 0x2488	; 0x802488 <MaxSpeed+0x1>
    25f0:	80 91 89 24 	lds	r24, 0x2489	; 0x802489 <MaxSpeed+0x2>
    25f4:	90 91 8a 24 	lds	r25, 0x248A	; 0x80248a <MaxSpeed+0x3>
    25f8:	60 93 77 24 	sts	0x2477, r22	; 0x802477 <CurSpeedFrq>
    25fc:	70 93 78 24 	sts	0x2478, r23	; 0x802478 <CurSpeedFrq+0x1>
    2600:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <CurSpeedFrq+0x2>
    2604:	90 93 7a 24 	sts	0x247A, r25	; 0x80247a <CurSpeedFrq+0x3>

			TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    2608:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    260c:	9b 01       	movw	r18, r22
    260e:	ac 01       	movw	r20, r24
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	8a e7       	ldi	r24, 0x7A	; 122
    2616:	96 e4       	ldi	r25, 0x46	; 70
    2618:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    261c:	60 93 c6 24 	sts	0x24C6, r22	; 0x8024c6 <TimerMainPeriod>
    2620:	70 93 c7 24 	sts	0x24C7, r23	; 0x8024c7 <TimerMainPeriod+0x1>
    2624:	80 93 c8 24 	sts	0x24C8, r24	; 0x8024c8 <TimerMainPeriod+0x2>
    2628:	90 93 c9 24 	sts	0x24C9, r25	; 0x8024c9 <TimerMainPeriod+0x3>
			tcc0_init();
    262c:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    263c:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    2640:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    2644:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    2648:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    264c:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    2650:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2654:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			break;
    2658:	c4 c1       	rjmp	.+904    	; 0x29e2 <_Z6PRGExev+0x9c6>
		{
			break;
		}
		case 81 : //pen Down
		{
			DO1_SET;
    265a:	e0 e0       	ldi	r30, 0x00	; 0
    265c:	f7 e0       	ldi	r31, 0x07	; 7
    265e:	84 81       	ldd	r24, Z+4	; 0x04
    2660:	84 60       	ori	r24, 0x04	; 4
    2662:	84 83       	std	Z+4, r24	; 0x04
			
			break;
    2664:	be c1       	rjmp	.+892    	; 0x29e2 <_Z6PRGExev+0x9c6>
		}
		case 82 : //Pen UP
		{
			DO1_CLR;
    2666:	e0 e0       	ldi	r30, 0x00	; 0
    2668:	f7 e0       	ldi	r31, 0x07	; 7
    266a:	84 81       	ldd	r24, Z+4	; 0x04
    266c:	8b 7f       	andi	r24, 0xFB	; 251
    266e:	84 83       	std	Z+4, r24	; 0x04
			break;
    2670:	b8 c1       	rjmp	.+880    	; 0x29e2 <_Z6PRGExev+0x9c6>
		}
		case 90: //Serial number mode
		{
			char digit;
			int di=0;
			LastPLine = CMDPRGlist.PRGLine;
    2672:	80 91 4c 25 	lds	r24, 0x254C	; 0x80254c <CMDPRGlist>
    2676:	90 91 4d 25 	lds	r25, 0x254D	; 0x80254d <CMDPRGlist+0x1>
    267a:	80 93 64 24 	sts	0x2464, r24	; 0x802464 <LastPLine>
    267e:	90 93 65 24 	sts	0x2465, r25	; 0x802465 <LastPLine+0x1>
			
			CurrentSerial=ReadSerial();
    2682:	0e 94 77 08 	call	0x10ee	; 0x10ee <_Z10ReadSerialv>
    2686:	60 93 60 24 	sts	0x2460, r22	; 0x802460 <CurrentSerial>
    268a:	70 93 61 24 	sts	0x2461, r23	; 0x802461 <CurrentSerial+0x1>
    268e:	80 93 62 24 	sts	0x2462, r24	; 0x802462 <CurrentSerial+0x2>
    2692:	90 93 63 24 	sts	0x2463, r25	; 0x802463 <CurrentSerial+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2696:	ff ef       	ldi	r31, 0xFF	; 255
    2698:	23 ec       	ldi	r18, 0xC3	; 195
    269a:	89 e0       	ldi	r24, 0x09	; 9
    269c:	f1 50       	subi	r31, 0x01	; 1
    269e:	20 40       	sbci	r18, 0x00	; 0
    26a0:	80 40       	sbci	r24, 0x00	; 0
    26a2:	e1 f7       	brne	.-8      	; 0x269c <_Z6PRGExev+0x680>
    26a4:	00 c0       	rjmp	.+0      	; 0x26a6 <_Z6PRGExev+0x68a>
    26a6:	00 00       	nop
			_delay_ms(100);
			if(((CurrentSerial <= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 0)) || ((CurrentSerial >= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 1)))
    26a8:	00 91 89 25 	lds	r16, 0x2589	; 0x802589 <CMDPRGlist+0x3d>
    26ac:	10 91 8a 25 	lds	r17, 0x258A	; 0x80258a <CMDPRGlist+0x3e>
    26b0:	20 91 8b 25 	lds	r18, 0x258B	; 0x80258b <CMDPRGlist+0x3f>
    26b4:	30 91 8c 25 	lds	r19, 0x258C	; 0x80258c <CMDPRGlist+0x40>
    26b8:	60 91 60 24 	lds	r22, 0x2460	; 0x802460 <CurrentSerial>
    26bc:	70 91 61 24 	lds	r23, 0x2461	; 0x802461 <CurrentSerial+0x1>
    26c0:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <CurrentSerial+0x2>
    26c4:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <CurrentSerial+0x3>
    26c8:	06 17       	cp	r16, r22
    26ca:	17 07       	cpc	r17, r23
    26cc:	28 07       	cpc	r18, r24
    26ce:	39 07       	cpc	r19, r25
    26d0:	50 f0       	brcs	.+20     	; 0x26e6 <_Z6PRGExev+0x6ca>
    26d2:	40 91 84 25 	lds	r20, 0x2584	; 0x802584 <CMDPRGlist+0x38>
    26d6:	44 23       	and	r20, r20
    26d8:	59 f0       	breq	.+22     	; 0x26f0 <_Z6PRGExev+0x6d4>
    26da:	60 17       	cp	r22, r16
    26dc:	71 07       	cpc	r23, r17
    26de:	82 07       	cpc	r24, r18
    26e0:	93 07       	cpc	r25, r19
    26e2:	08 f4       	brcc	.+2      	; 0x26e6 <_Z6PRGExev+0x6ca>
    26e4:	08 c1       	rjmp	.+528    	; 0x28f6 <_Z6PRGExev+0x8da>
    26e6:	20 91 84 25 	lds	r18, 0x2584	; 0x802584 <CMDPRGlist+0x38>
    26ea:	21 30       	cpi	r18, 0x01	; 1
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <_Z6PRGExev+0x6d4>
    26ee:	03 c1       	rjmp	.+518    	; 0x28f6 <_Z6PRGExev+0x8da>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    26f0:	2a e0       	ldi	r18, 0x0A	; 10
    26f2:	46 e5       	ldi	r20, 0x56	; 86
    26f4:	54 e2       	ldi	r21, 0x24	; 36
    26f6:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <__ltoa_ncheck>
			{
				ltoa(CurrentSerial,SerialCh,10);
				if(CMDPRGlist.FillWithZero)
    26fa:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <CMDPRGlist+0x41>
    26fe:	88 23       	and	r24, r24
    2700:	09 f4       	brne	.+2      	; 0x2704 <_Z6PRGExev+0x6e8>
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <_Z6PRGExev+0x766>
				{
					digit = CurrentSerial / 10;
    2704:	60 91 60 24 	lds	r22, 0x2460	; 0x802460 <CurrentSerial>
    2708:	70 91 61 24 	lds	r23, 0x2461	; 0x802461 <CurrentSerial+0x1>
    270c:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <CurrentSerial+0x2>
    2710:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <CurrentSerial+0x3>
    2714:	2a e0       	ldi	r18, 0x0A	; 10
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <__udivmodsi4>
					digit++;
    2720:	2f 5f       	subi	r18, 0xFF	; 255
					if(CMDPRGlist.DigitNumber>digit)
    2722:	40 91 8e 25 	lds	r20, 0x258E	; 0x80258e <CMDPRGlist+0x42>
    2726:	50 91 8f 25 	lds	r21, 0x258F	; 0x80258f <CMDPRGlist+0x43>
    272a:	62 2f       	mov	r22, r18
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	64 17       	cp	r22, r20
    2730:	75 07       	cpc	r23, r21
    2732:	3c f5       	brge	.+78     	; 0x2782 <_Z6PRGExev+0x766>
					{
						for(di=digit-1;di>=0;di--)
    2734:	cb 01       	movw	r24, r22
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	3a f4       	brpl	.+14     	; 0x2748 <_Z6PRGExev+0x72c>
						{
							SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
						}
						for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    273a:	ca 01       	movw	r24, r20
    273c:	86 1b       	sub	r24, r22
    273e:	97 0b       	sbc	r25, r23
    2740:	18 16       	cp	r1, r24
    2742:	19 06       	cpc	r1, r25
    2744:	84 f0       	brlt	.+32     	; 0x2766 <_Z6PRGExev+0x74a>
    2746:	18 c0       	rjmp	.+48     	; 0x2778 <_Z6PRGExev+0x75c>
    2748:	e2 2f       	mov	r30, r18
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	ea 5a       	subi	r30, 0xAA	; 170
    274e:	fb 4d       	sbci	r31, 0xDB	; 219
    2750:	da 01       	movw	r26, r20
    2752:	aa 5a       	subi	r26, 0xAA	; 170
    2754:	bb 4d       	sbci	r27, 0xDB	; 219
    2756:	26 e5       	ldi	r18, 0x56	; 86
    2758:	34 e2       	ldi	r19, 0x24	; 36
					digit++;
					if(CMDPRGlist.DigitNumber>digit)
					{
						for(di=digit-1;di>=0;di--)
						{
							SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
    275a:	82 91       	ld	r24, -Z
    275c:	8e 93       	st	-X, r24
				{
					digit = CurrentSerial / 10;
					digit++;
					if(CMDPRGlist.DigitNumber>digit)
					{
						for(di=digit-1;di>=0;di--)
    275e:	e2 17       	cp	r30, r18
    2760:	f3 07       	cpc	r31, r19
    2762:	d9 f7       	brne	.-10     	; 0x275a <_Z6PRGExev+0x73e>
    2764:	ea cf       	rjmp	.-44     	; 0x273a <_Z6PRGExev+0x71e>
    2766:	e6 e5       	ldi	r30, 0x56	; 86
    2768:	f4 e2       	ldi	r31, 0x24	; 36
    276a:	8a 5a       	subi	r24, 0xAA	; 170
    276c:	9b 4d       	sbci	r25, 0xDB	; 219
						{
							SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
						}
						for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
						{
							SerialCh[di] = '0';
    276e:	20 e3       	ldi	r18, 0x30	; 48
    2770:	21 93       	st	Z+, r18
					{
						for(di=digit-1;di>=0;di--)
						{
							SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
						}
						for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    2772:	e8 17       	cp	r30, r24
    2774:	f9 07       	cpc	r31, r25
    2776:	e1 f7       	brne	.-8      	; 0x2770 <_Z6PRGExev+0x754>
						{
							SerialCh[di] = '0';
						}
						SerialCh[CMDPRGlist.DigitNumber] = '0';
    2778:	fa 01       	movw	r30, r20
    277a:	ea 5a       	subi	r30, 0xAA	; 170
    277c:	fb 4d       	sbci	r31, 0xDB	; 219
    277e:	80 e3       	ldi	r24, 0x30	; 48
    2780:	80 83       	st	Z, r24
					}
				}
				if(CMDPRGlist.SerialCountType == 0)
    2782:	80 91 84 25 	lds	r24, 0x2584	; 0x802584 <CMDPRGlist+0x38>
    2786:	81 11       	cpse	r24, r1
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <_Z6PRGExev+0x796>
				{
					CurrentSerial++;
    278a:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <CurrentSerial>
    278e:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <CurrentSerial+0x1>
    2792:	a0 91 62 24 	lds	r26, 0x2462	; 0x802462 <CurrentSerial+0x2>
    2796:	b0 91 63 24 	lds	r27, 0x2463	; 0x802463 <CurrentSerial+0x3>
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	a1 1d       	adc	r26, r1
    279e:	b1 1d       	adc	r27, r1
    27a0:	80 93 60 24 	sts	0x2460, r24	; 0x802460 <CurrentSerial>
    27a4:	90 93 61 24 	sts	0x2461, r25	; 0x802461 <CurrentSerial+0x1>
    27a8:	a0 93 62 24 	sts	0x2462, r26	; 0x802462 <CurrentSerial+0x2>
    27ac:	b0 93 63 24 	sts	0x2463, r27	; 0x802463 <CurrentSerial+0x3>
    27b0:	13 c0       	rjmp	.+38     	; 0x27d8 <_Z6PRGExev+0x7bc>
				}
				else
				{
					CurrentSerial--;
    27b2:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <CurrentSerial>
    27b6:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <CurrentSerial+0x1>
    27ba:	a0 91 62 24 	lds	r26, 0x2462	; 0x802462 <CurrentSerial+0x2>
    27be:	b0 91 63 24 	lds	r27, 0x2463	; 0x802463 <CurrentSerial+0x3>
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	a1 09       	sbc	r26, r1
    27c6:	b1 09       	sbc	r27, r1
    27c8:	80 93 60 24 	sts	0x2460, r24	; 0x802460 <CurrentSerial>
    27cc:	90 93 61 24 	sts	0x2461, r25	; 0x802461 <CurrentSerial+0x1>
    27d0:	a0 93 62 24 	sts	0x2462, r26	; 0x802462 <CurrentSerial+0x2>
    27d4:	b0 93 63 24 	sts	0x2463, r27	; 0x802463 <CurrentSerial+0x3>
				}
				
				SerChIndex = 0;
    27d8:	10 92 54 24 	sts	0x2454, r1	; 0x802454 <SerChIndex>
    27dc:	10 92 55 24 	sts	0x2455, r1	; 0x802455 <SerChIndex+0x1>
				ContinuousRead = 0;
    27e0:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
				WriteSerial(CurrentSerial);
    27e4:	60 91 60 24 	lds	r22, 0x2460	; 0x802460 <CurrentSerial>
    27e8:	70 91 61 24 	lds	r23, 0x2461	; 0x802461 <CurrentSerial+0x1>
    27ec:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <CurrentSerial+0x2>
    27f0:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <CurrentSerial+0x3>
    27f4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_Z11WriteSeriall>
    27f8:	9f ef       	ldi	r25, 0xFF	; 255
    27fa:	e3 ed       	ldi	r30, 0xD3	; 211
    27fc:	f0 e3       	ldi	r31, 0x30	; 48
    27fe:	91 50       	subi	r25, 0x01	; 1
    2800:	e0 40       	sbci	r30, 0x00	; 0
    2802:	f0 40       	sbci	r31, 0x00	; 0
    2804:	e1 f7       	brne	.-8      	; 0x27fe <_Z6PRGExev+0x7e2>
    2806:	00 c0       	rjmp	.+0      	; 0x2808 <_Z6PRGExev+0x7ec>
    2808:	00 00       	nop
				_delay_ms(500);
				CurrentSerial = ReadSerial();
    280a:	0e 94 77 08 	call	0x10ee	; 0x10ee <_Z10ReadSerialv>
    280e:	60 93 60 24 	sts	0x2460, r22	; 0x802460 <CurrentSerial>
    2812:	70 93 61 24 	sts	0x2461, r23	; 0x802461 <CurrentSerial+0x1>
    2816:	80 93 62 24 	sts	0x2462, r24	; 0x802462 <CurrentSerial+0x2>
    281a:	90 93 63 24 	sts	0x2463, r25	; 0x802463 <CurrentSerial+0x3>
    281e:	2f ef       	ldi	r18, 0xFF	; 255
    2820:	83 ec       	ldi	r24, 0xC3	; 195
    2822:	99 e0       	ldi	r25, 0x09	; 9
    2824:	21 50       	subi	r18, 0x01	; 1
    2826:	80 40       	sbci	r24, 0x00	; 0
    2828:	90 40       	sbci	r25, 0x00	; 0
    282a:	e1 f7       	brne	.-8      	; 0x2824 <_Z6PRGExev+0x808>
    282c:	00 c0       	rjmp	.+0      	; 0x282e <_Z6PRGExev+0x812>
    282e:	00 00       	nop
				_delay_ms(100);
				printf("Current Serial is %lu\r\n",CurrentSerial);
    2830:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <CurrentSerial+0x3>
    2834:	8f 93       	push	r24
    2836:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <CurrentSerial+0x2>
    283a:	8f 93       	push	r24
    283c:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <CurrentSerial+0x1>
    2840:	8f 93       	push	r24
    2842:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <CurrentSerial>
    2846:	8f 93       	push	r24
    2848:	82 ee       	ldi	r24, 0xE2	; 226
    284a:	90 e2       	ldi	r25, 0x20	; 32
    284c:	9f 93       	push	r25
    284e:	8f 93       	push	r24
    2850:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
				ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100);
    2854:	e0 91 54 24 	lds	r30, 0x2454	; 0x802454 <SerChIndex>
    2858:	f0 91 55 24 	lds	r31, 0x2455	; 0x802455 <SerChIndex+0x1>
    285c:	ea 5a       	subi	r30, 0xAA	; 170
    285e:	fb 4d       	sbci	r31, 0xDB	; 219
    2860:	20 81       	ld	r18, Z
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	20 53       	subi	r18, 0x30	; 48
    2866:	31 09       	sbc	r19, r1
    2868:	c9 01       	movw	r24, r18
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	22 0f       	add	r18, r18
    2870:	33 1f       	adc	r19, r19
    2872:	22 0f       	add	r18, r18
    2874:	33 1f       	adc	r19, r19
    2876:	22 0f       	add	r18, r18
    2878:	33 1f       	adc	r19, r19
    287a:	82 0f       	add	r24, r18
    287c:	93 1f       	adc	r25, r19
    287e:	8c 59       	subi	r24, 0x9C	; 156
    2880:	9f 4f       	sbci	r25, 0xFF	; 255
    2882:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_Z14ReadSubProgramj>
				printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    2886:	cc e4       	ldi	r28, 0x4C	; 76
    2888:	d5 e2       	ldi	r29, 0x25	; 37
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	1f 92       	push	r1
    288e:	8f 93       	push	r24
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	8f 93       	push	r24
    2894:	88 81       	ld	r24, Y
    2896:	8f 93       	push	r24
    2898:	8a ef       	ldi	r24, 0xFA	; 250
    289a:	90 e2       	ldi	r25, 0x20	; 32
    289c:	9f 93       	push	r25
    289e:	8f 93       	push	r24
    28a0:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
				printf("Move1:%lu\tMove2:%lu\tMove3:%lu\r\n",CMDPRGlist.Move[0],CMDPRGlist.Move[1],CMDPRGlist.Move[2]);
    28a4:	88 89       	ldd	r24, Y+16	; 0x10
    28a6:	8f 93       	push	r24
    28a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28aa:	8f 93       	push	r24
    28ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ae:	8f 93       	push	r24
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	8f 93       	push	r24
    28b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28b6:	8f 93       	push	r24
    28b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ba:	8f 93       	push	r24
    28bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28be:	8f 93       	push	r24
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	8f 93       	push	r24
    28c4:	88 85       	ldd	r24, Y+8	; 0x08
    28c6:	8f 93       	push	r24
    28c8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ca:	8f 93       	push	r24
    28cc:	8e 81       	ldd	r24, Y+6	; 0x06
    28ce:	8f 93       	push	r24
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	8f 93       	push	r24
    28d4:	87 e1       	ldi	r24, 0x17	; 23
    28d6:	91 e2       	ldi	r25, 0x21	; 33
    28d8:	9f 93       	push	r25
    28da:	8f 93       	push	r24
    28dc:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
				PRGExe();
    28e0:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z6PRGExev>
				RunSubProgram=1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	80 93 53 24 	sts	0x2453, r24	; 0x802453 <RunSubProgram>
    28ea:	ed b7       	in	r30, 0x3d	; 61
    28ec:	fe b7       	in	r31, 0x3e	; 62
    28ee:	7a 96       	adiw	r30, 0x1a	; 26
    28f0:	ed bf       	out	0x3d, r30	; 61
    28f2:	fe bf       	out	0x3e, r31	; 62
    28f4:	76 c0       	rjmp	.+236    	; 0x29e2 <_Z6PRGExev+0x9c6>
			}
			else
			{
				RunSubProgram=0;
    28f6:	10 92 53 24 	sts	0x2453, r1	; 0x802453 <RunSubProgram>
				ContinuousRead=0;
    28fa:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
				readRam();
    28fe:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
				while(CMDPRGlist.PRGLine != LastPLine)
    2902:	20 91 4c 25 	lds	r18, 0x254C	; 0x80254c <CMDPRGlist>
    2906:	30 91 4d 25 	lds	r19, 0x254D	; 0x80254d <CMDPRGlist+0x1>
    290a:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <LastPLine>
    290e:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <LastPLine+0x1>
    2912:	28 17       	cp	r18, r24
    2914:	39 07       	cpc	r19, r25
    2916:	09 f4       	brne	.+2      	; 0x291a <_Z6PRGExev+0x8fe>
    2918:	64 c0       	rjmp	.+200    	; 0x29e2 <_Z6PRGExev+0x9c6>
    291a:	cc e4       	ldi	r28, 0x4C	; 76
    291c:	d5 e2       	ldi	r29, 0x25	; 37
				{
					readRam();
    291e:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
			else
			{
				RunSubProgram=0;
				ContinuousRead=0;
				readRam();
				while(CMDPRGlist.PRGLine != LastPLine)
    2922:	28 81       	ld	r18, Y
    2924:	39 81       	ldd	r19, Y+1	; 0x01
    2926:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <LastPLine>
    292a:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <LastPLine+0x1>
    292e:	28 17       	cp	r18, r24
    2930:	39 07       	cpc	r19, r25
    2932:	a9 f7       	brne	.-22     	; 0x291e <_Z6PRGExev+0x902>
    2934:	56 c0       	rjmp	.+172    	; 0x29e2 <_Z6PRGExev+0x9c6>
			}
			break;
		}
		case 100 :
		{
			printf("End Of Program.\r\n");
    2936:	87 e3       	ldi	r24, 0x37	; 55
    2938:	91 e2       	ldi	r25, 0x21	; 33
    293a:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
			ProgramRun = 0;
    293e:	10 92 ca 24 	sts	0x24CA, r1	; 0x8024ca <ProgramRun>
			ContinuousRead = 0;
    2942:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
			break;
    2946:	4d c0       	rjmp	.+154    	; 0x29e2 <_Z6PRGExev+0x9c6>
		}
		case 101:
		{
			SerChIndex++;
    2948:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <SerChIndex>
    294c:	90 91 55 24 	lds	r25, 0x2455	; 0x802455 <SerChIndex+0x1>
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	80 93 54 24 	sts	0x2454, r24	; 0x802454 <SerChIndex>
    2956:	90 93 55 24 	sts	0x2455, r25	; 0x802455 <SerChIndex+0x1>
			
			if(SerialCh[SerChIndex]!=0)
    295a:	fc 01       	movw	r30, r24
    295c:	ea 5a       	subi	r30, 0xAA	; 170
    295e:	fb 4d       	sbci	r31, 0xDB	; 219
    2960:	20 81       	ld	r18, Z
    2962:	22 23       	and	r18, r18
    2964:	d1 f0       	breq	.+52     	; 0x299a <_Z6PRGExev+0x97e>
			{
				RunSubProgram = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	80 93 53 24 	sts	0x2453, r24	; 0x802453 <RunSubProgram>
				ContinuousRead = 0;
    296c:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
				ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100);
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	20 53       	subi	r18, 0x30	; 48
    2974:	31 09       	sbc	r19, r1
    2976:	c9 01       	movw	r24, r18
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	22 0f       	add	r18, r18
    297e:	33 1f       	adc	r19, r19
    2980:	22 0f       	add	r18, r18
    2982:	33 1f       	adc	r19, r19
    2984:	22 0f       	add	r18, r18
    2986:	33 1f       	adc	r19, r19
    2988:	82 0f       	add	r24, r18
    298a:	93 1f       	adc	r25, r19
    298c:	8c 59       	subi	r24, 0x9C	; 156
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_Z14ReadSubProgramj>
				PRGExe();
    2994:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z6PRGExev>
    2998:	24 c0       	rjmp	.+72     	; 0x29e2 <_Z6PRGExev+0x9c6>
			}
			else
			{
				RunSubProgram=0;
    299a:	10 92 53 24 	sts	0x2453, r1	; 0x802453 <RunSubProgram>
				ContinuousRead=0;
    299e:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
				readRam();
    29a2:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
				while(CMDPRGlist.PRGLine != LastPLine)
    29a6:	20 91 4c 25 	lds	r18, 0x254C	; 0x80254c <CMDPRGlist>
    29aa:	30 91 4d 25 	lds	r19, 0x254D	; 0x80254d <CMDPRGlist+0x1>
    29ae:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <LastPLine>
    29b2:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <LastPLine+0x1>
    29b6:	28 17       	cp	r18, r24
    29b8:	39 07       	cpc	r19, r25
    29ba:	99 f0       	breq	.+38     	; 0x29e2 <_Z6PRGExev+0x9c6>
    29bc:	cc e4       	ldi	r28, 0x4C	; 76
    29be:	d5 e2       	ldi	r29, 0x25	; 37
				{
					readRam();
    29c0:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
			else
			{
				RunSubProgram=0;
				ContinuousRead=0;
				readRam();
				while(CMDPRGlist.PRGLine != LastPLine)
    29c4:	28 81       	ld	r18, Y
    29c6:	39 81       	ldd	r19, Y+1	; 0x01
    29c8:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <LastPLine>
    29cc:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <LastPLine+0x1>
    29d0:	28 17       	cp	r18, r24
    29d2:	39 07       	cpc	r19, r25
    29d4:	a9 f7       	brne	.-22     	; 0x29c0 <_Z6PRGExev+0x9a4>
    29d6:	05 c0       	rjmp	.+10     	; 0x29e2 <_Z6PRGExev+0x9c6>
    29d8:	c2 ee       	ldi	r28, 0xE2	; 226
    29da:	d6 e2       	ldi	r29, 0x26	; 38
    29dc:	04 e2       	ldi	r16, 0x24	; 36
    29de:	17 e2       	ldi	r17, 0x27	; 39
    29e0:	e2 cd       	rjmp	.-1084   	; 0x25a6 <_Z6PRGExev+0x58a>
				}
			}
			break;
		}
	}
}
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
    29f2:	bf 90       	pop	r11
    29f4:	af 90       	pop	r10
    29f6:	9f 90       	pop	r9
    29f8:	8f 90       	pop	r8
    29fa:	7f 90       	pop	r7
    29fc:	6f 90       	pop	r6
    29fe:	5f 90       	pop	r5
    2a00:	4f 90       	pop	r4
    2a02:	3f 90       	pop	r3
    2a04:	2f 90       	pop	r2
    2a06:	08 95       	ret

00002a08 <_Z6cmdExev>:

// run command that comes from raspberry the command will be in cmdtemp
void cmdExe()
{
    2a08:	2f 92       	push	r2
    2a0a:	3f 92       	push	r3
    2a0c:	4f 92       	push	r4
    2a0e:	5f 92       	push	r5
    2a10:	6f 92       	push	r6
    2a12:	7f 92       	push	r7
    2a14:	8f 92       	push	r8
    2a16:	9f 92       	push	r9
    2a18:	af 92       	push	r10
    2a1a:	bf 92       	push	r11
    2a1c:	cf 92       	push	r12
    2a1e:	df 92       	push	r13
    2a20:	ef 92       	push	r14
    2a22:	ff 92       	push	r15
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	2b 97       	sbiw	r28, 0x0b	; 11
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	de bf       	out	0x3e, r29	; 62
	int ax = cmdTemp[4] - 1;
    2a36:	00 91 b1 24 	lds	r16, 0x24B1	; 0x8024b1 <cmdTemp+0x4>
    2a3a:	20 2f       	mov	r18, r16
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	19 01       	movw	r2, r18
    2a40:	41 e0       	ldi	r20, 0x01	; 1
    2a42:	24 1a       	sub	r2, r20
    2a44:	31 08       	sbc	r3, r1
	if(strncmp(cmdTemp,"?0000",3)==0)
    2a46:	43 e0       	ldi	r20, 0x03	; 3
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	68 e4       	ldi	r22, 0x48	; 72
    2a4c:	71 e2       	ldi	r23, 0x21	; 33
    2a4e:	8d ea       	ldi	r24, 0xAD	; 173
    2a50:	94 e2       	ldi	r25, 0x24	; 36
    2a52:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    2a56:	89 2b       	or	r24, r25
    2a58:	89 f4       	brne	.+34     	; 0x2a7c <_Z6cmdExev+0x74>
	{
		sprintf(BufferSend,"!0000\n\r");
    2a5a:	88 e0       	ldi	r24, 0x08	; 8
    2a5c:	ee e4       	ldi	r30, 0x4E	; 78
    2a5e:	f1 e2       	ldi	r31, 0x21	; 33
    2a60:	a9 e6       	ldi	r26, 0x69	; 105
    2a62:	b6 e2       	ldi	r27, 0x26	; 38
    2a64:	01 90       	ld	r0, Z+
    2a66:	0d 92       	st	X+, r0
    2a68:	8a 95       	dec	r24
    2a6a:	e1 f7       	brne	.-8      	; 0x2a64 <_Z6cmdExev+0x5c>
		Responsing=1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
		SetDataReady;
    2a72:	e0 ea       	ldi	r30, 0xA0	; 160
    2a74:	f6 e0       	ldi	r31, 0x06	; 6
    2a76:	84 81       	ldd	r24, Z+4	; 0x04
    2a78:	81 60       	ori	r24, 0x01	; 1
    2a7a:	84 83       	std	Z+4, r24	; 0x04
	}
	if(strncmp(cmdTemp,"?01",3)==0)
    2a7c:	43 e0       	ldi	r20, 0x03	; 3
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	66 e5       	ldi	r22, 0x56	; 86
    2a82:	71 e2       	ldi	r23, 0x21	; 33
    2a84:	8d ea       	ldi	r24, 0xAD	; 173
    2a86:	94 e2       	ldi	r25, 0x24	; 36
    2a88:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    2a8c:	89 2b       	or	r24, r25
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <_Z6cmdExev+0x8a>
    2a90:	a1 c0       	rjmp	.+322    	; 0x2bd4 <_Z6cmdExev+0x1cc>
	{
		if(cmdTemp[3]=='0') //Read Axis Inputs
    2a92:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2a96:	80 33       	cpi	r24, 0x30	; 48
    2a98:	11 f0       	breq	.+4      	; 0x2a9e <_Z6cmdExev+0x96>
    2a9a:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
		{
			switch(cmdTemp[5])
    2a9e:	80 91 b2 24 	lds	r24, 0x24B2	; 0x8024b2 <cmdTemp+0x5>
    2aa2:	82 33       	cpi	r24, 0x32	; 50
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <_Z6cmdExev+0xa0>
    2aa6:	45 c0       	rjmp	.+138    	; 0x2b32 <_Z6cmdExev+0x12a>
    2aa8:	30 f4       	brcc	.+12     	; 0x2ab6 <_Z6cmdExev+0xae>
    2aaa:	80 33       	cpi	r24, 0x30	; 48
    2aac:	61 f0       	breq	.+24     	; 0x2ac6 <_Z6cmdExev+0xbe>
    2aae:	81 33       	cpi	r24, 0x31	; 49
    2ab0:	29 f1       	breq	.+74     	; 0x2afc <_Z6cmdExev+0xf4>
    2ab2:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2ab6:	83 33       	cpi	r24, 0x33	; 51
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <_Z6cmdExev+0xb4>
    2aba:	56 c0       	rjmp	.+172    	; 0x2b68 <_Z6cmdExev+0x160>
    2abc:	84 33       	cpi	r24, 0x34	; 52
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <_Z6cmdExev+0xba>
    2ac0:	6e c0       	rjmp	.+220    	; 0x2b9e <_Z6cmdExev+0x196>
    2ac2:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			{
				case '0': //ALARM
				{
					if(EchoON) printf("!010%d0\t%u\n\r",ax,AxisAlarm(ax));
    2ac6:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2aca:	88 23       	and	r24, r24
    2acc:	11 f4       	brne	.+4      	; 0x2ad2 <_Z6cmdExev+0xca>
    2ace:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2ad2:	82 2d       	mov	r24, r2
    2ad4:	0e 94 24 02 	call	0x448	; 0x448 <_Z9AxisAlarmc>
    2ad8:	1f 92       	push	r1
    2ada:	8f 93       	push	r24
    2adc:	3f 92       	push	r3
    2ade:	2f 92       	push	r2
    2ae0:	8a e5       	ldi	r24, 0x5A	; 90
    2ae2:	91 e2       	ldi	r25, 0x21	; 33
    2ae4:	9f 93       	push	r25
    2ae6:	8f 93       	push	r24
    2ae8:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
					break;
				}
				case '1': //INPOS
				{
					if(EchoON) printf("!010%d1\t%u\n\r",ax,AxisInPos(ax));
    2afc:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2b00:	88 23       	and	r24, r24
    2b02:	11 f4       	brne	.+4      	; 0x2b08 <_Z6cmdExev+0x100>
    2b04:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2b08:	82 2d       	mov	r24, r2
    2b0a:	0e 94 3b 02 	call	0x476	; 0x476 <_Z9AxisInPosc>
    2b0e:	1f 92       	push	r1
    2b10:	8f 93       	push	r24
    2b12:	3f 92       	push	r3
    2b14:	2f 92       	push	r2
    2b16:	87 e6       	ldi	r24, 0x67	; 103
    2b18:	91 e2       	ldi	r25, 0x21	; 33
    2b1a:	9f 93       	push	r25
    2b1c:	8f 93       	push	r24
    2b1e:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
					break;
				}
				case '2': //REF
				{
					if(EchoON) printf("!010%d2\t%u\n\r",ax,AxisRef(ax));
    2b32:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2b36:	88 23       	and	r24, r24
    2b38:	11 f4       	brne	.+4      	; 0x2b3e <_Z6cmdExev+0x136>
    2b3a:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2b3e:	82 2d       	mov	r24, r2
    2b40:	0e 94 83 02 	call	0x506	; 0x506 <_Z7AxisRefc>
    2b44:	1f 92       	push	r1
    2b46:	8f 93       	push	r24
    2b48:	3f 92       	push	r3
    2b4a:	2f 92       	push	r2
    2b4c:	84 e7       	ldi	r24, 0x74	; 116
    2b4e:	91 e2       	ldi	r25, 0x21	; 33
    2b50:	9f 93       	push	r25
    2b52:	8f 93       	push	r24
    2b54:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
					break;
				}
				case '3': //LIMIT+
				{
					if(EchoON) printf("!010%d3\t%u\n\r",ax,AxisLimitPos(ax));
    2b68:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2b6c:	88 23       	and	r24, r24
    2b6e:	11 f4       	brne	.+4      	; 0x2b74 <_Z6cmdExev+0x16c>
    2b70:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2b74:	82 2d       	mov	r24, r2
    2b76:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z12AxisLimitPosc>
    2b7a:	1f 92       	push	r1
    2b7c:	8f 93       	push	r24
    2b7e:	3f 92       	push	r3
    2b80:	2f 92       	push	r2
    2b82:	81 e8       	ldi	r24, 0x81	; 129
    2b84:	91 e2       	ldi	r25, 0x21	; 33
    2b86:	9f 93       	push	r25
    2b88:	8f 93       	push	r24
    2b8a:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
					break;
				}
				case '4': //LIMIT-
				{
					if(EchoON) printf("!010%d4\t%u\n\r",ax,AxisLimitNeg(ax));
    2b9e:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2ba2:	88 23       	and	r24, r24
    2ba4:	11 f4       	brne	.+4      	; 0x2baa <_Z6cmdExev+0x1a2>
    2ba6:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2baa:	82 2d       	mov	r24, r2
    2bac:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z12AxisLimitNegc>
    2bb0:	1f 92       	push	r1
    2bb2:	8f 93       	push	r24
    2bb4:	3f 92       	push	r3
    2bb6:	2f 92       	push	r2
    2bb8:	8e e8       	ldi	r24, 0x8E	; 142
    2bba:	91 e2       	ldi	r25, 0x21	; 33
    2bbc:	9f 93       	push	r25
    2bbe:	8f 93       	push	r24
    2bc0:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
					break;
				}
			}
		}
	}
	else if(strncmp(cmdTemp,"#02",3)==0)
    2bd4:	43 e0       	ldi	r20, 0x03	; 3
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	6b e9       	ldi	r22, 0x9B	; 155
    2bda:	71 e2       	ldi	r23, 0x21	; 33
    2bdc:	8d ea       	ldi	r24, 0xAD	; 173
    2bde:	94 e2       	ldi	r25, 0x24	; 36
    2be0:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    2be4:	89 2b       	or	r24, r25
    2be6:	e1 f4       	brne	.+56     	; 0x2c20 <_Z6cmdExev+0x218>
	{
		if(cmdTemp[3]=='0')//Write Axis Outputs
    2be8:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2bec:	80 33       	cpi	r24, 0x30	; 48
    2bee:	11 f0       	breq	.+4      	; 0x2bf4 <_Z6cmdExev+0x1ec>
    2bf0:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
		{
			switch(cmdTemp[5])
    2bf4:	80 91 b2 24 	lds	r24, 0x24B2	; 0x8024b2 <cmdTemp+0x5>
    2bf8:	80 33       	cpi	r24, 0x30	; 48
    2bfa:	21 f0       	breq	.+8      	; 0x2c04 <_Z6cmdExev+0x1fc>
    2bfc:	81 33       	cpi	r24, 0x31	; 49
    2bfe:	49 f0       	breq	.+18     	; 0x2c12 <_Z6cmdExev+0x20a>
    2c00:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			{
				case '0': //Enable
				{
					SetAxisEnable(ax,cmdTemp[6]);
    2c04:	60 91 b3 24 	lds	r22, 0x24B3	; 0x8024b3 <cmdTemp+0x6>
    2c08:	c1 01       	movw	r24, r2
    2c0a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z13SetAxisEnableic>
					break;
    2c0e:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
				}
				case '1': //EMG
				{
					SetAxisEMG(ax,cmdTemp[6]);
    2c12:	60 91 b3 24 	lds	r22, 0x24B3	; 0x8024b3 <cmdTemp+0x6>
    2c16:	c1 01       	movw	r24, r2
    2c18:	0e 94 aa 01 	call	0x354	; 0x354 <_Z10SetAxisEMGic>
					break;
    2c1c:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
					break;
				}
			}
		}
	}
	else if(strncmp(cmdTemp,"?03",3)==0)
    2c20:	43 e0       	ldi	r20, 0x03	; 3
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	6f e9       	ldi	r22, 0x9F	; 159
    2c26:	71 e2       	ldi	r23, 0x21	; 33
    2c28:	8d ea       	ldi	r24, 0xAD	; 173
    2c2a:	94 e2       	ldi	r25, 0x24	; 36
    2c2c:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    2c30:	89 2b       	or	r24, r25
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <_Z6cmdExev+0x22e>
    2c34:	46 c0       	rjmp	.+140    	; 0x2cc2 <_Z6cmdExev+0x2ba>
	{
		if(cmdTemp[3]=='0') //Read Axis Output
    2c36:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2c3a:	80 33       	cpi	r24, 0x30	; 48
    2c3c:	11 f0       	breq	.+4      	; 0x2c42 <_Z6cmdExev+0x23a>
    2c3e:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
		{
			switch(cmdTemp[5])
    2c42:	80 91 b2 24 	lds	r24, 0x24B2	; 0x8024b2 <cmdTemp+0x5>
    2c46:	80 33       	cpi	r24, 0x30	; 48
    2c48:	21 f0       	breq	.+8      	; 0x2c52 <_Z6cmdExev+0x24a>
    2c4a:	81 33       	cpi	r24, 0x31	; 49
    2c4c:	f1 f0       	breq	.+60     	; 0x2c8a <_Z6cmdExev+0x282>
    2c4e:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			{
				case '0': //Enable
				{
					if(EchoON) printf("!030%d0\t%u\n\r",ax,AxisEnable[ax]);
    2c52:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2c56:	88 23       	and	r24, r24
    2c58:	11 f4       	brne	.+4      	; 0x2c5e <_Z6cmdExev+0x256>
    2c5a:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2c5e:	f1 01       	movw	r30, r2
    2c60:	e7 52       	subi	r30, 0x27	; 39
    2c62:	f9 4d       	sbci	r31, 0xD9	; 217
    2c64:	80 81       	ld	r24, Z
    2c66:	1f 92       	push	r1
    2c68:	8f 93       	push	r24
    2c6a:	3f 92       	push	r3
    2c6c:	2f 92       	push	r2
    2c6e:	83 ea       	ldi	r24, 0xA3	; 163
    2c70:	91 e2       	ldi	r25, 0x21	; 33
    2c72:	9f 93       	push	r25
    2c74:	8f 93       	push	r24
    2c76:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
					break;
				}
				case '1': //EMG
				{
					if(EchoON) printf("!030%d1\t%u\n\r",ax,AxisEMG[ax]);
    2c8a:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2c8e:	88 23       	and	r24, r24
    2c90:	11 f4       	brne	.+4      	; 0x2c96 <_Z6cmdExev+0x28e>
    2c92:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2c96:	f1 01       	movw	r30, r2
    2c98:	e4 52       	subi	r30, 0x24	; 36
    2c9a:	f9 4d       	sbci	r31, 0xD9	; 217
    2c9c:	80 81       	ld	r24, Z
    2c9e:	1f 92       	push	r1
    2ca0:	8f 93       	push	r24
    2ca2:	3f 92       	push	r3
    2ca4:	2f 92       	push	r2
    2ca6:	80 eb       	ldi	r24, 0xB0	; 176
    2ca8:	91 e2       	ldi	r25, 0x21	; 33
    2caa:	9f 93       	push	r25
    2cac:	8f 93       	push	r24
    2cae:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
					break;
				}
			}
		}
	}
	else if(strncmp(cmdTemp,"#04",3)==0) // Jog Each Axis
    2cc2:	43 e0       	ldi	r20, 0x03	; 3
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	6d eb       	ldi	r22, 0xBD	; 189
    2cc8:	71 e2       	ldi	r23, 0x21	; 33
    2cca:	8d ea       	ldi	r24, 0xAD	; 173
    2ccc:	94 e2       	ldi	r25, 0x24	; 36
    2cce:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    2cd2:	89 2b       	or	r24, r25
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <_Z6cmdExev+0x2d0>
    2cd6:	49 c0       	rjmp	.+146    	; 0x2d6a <_Z6cmdExev+0x362>
	{
		if (!ProgramRun)
    2cd8:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    2cdc:	81 11       	cpse	r24, r1
    2cde:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
		{
			if(cmdTemp[3]=='0')//SET JOG FOR AXIS
    2ce2:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2ce6:	80 33       	cpi	r24, 0x30	; 48
    2ce8:	11 f0       	breq	.+4      	; 0x2cee <_Z6cmdExev+0x2e6>
    2cea:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2cee:	e2 eb       	ldi	r30, 0xB2	; 178
    2cf0:	f4 e2       	ldi	r31, 0x24	; 36
    2cf2:	a8 e9       	ldi	r26, 0x98	; 152
    2cf4:	b4 e2       	ldi	r27, 0x24	; 36
    2cf6:	20 ec       	ldi	r18, 0xC0	; 192
    2cf8:	34 e2       	ldi	r19, 0x24	; 36
			{
				for(k = 0 ; k < 14 ; k++)
				{
					temp[k]=cmdTemp[k+5];
    2cfa:	81 91       	ld	r24, Z+
    2cfc:	8d 93       	st	X+, r24
	{
		if (!ProgramRun)
		{
			if(cmdTemp[3]=='0')//SET JOG FOR AXIS
			{
				for(k = 0 ; k < 14 ; k++)
    2cfe:	2e 17       	cp	r18, r30
    2d00:	3f 07       	cpc	r19, r31
    2d02:	d9 f7       	brne	.-10     	; 0x2cfa <_Z6cmdExev+0x2f2>
    2d04:	8e e0       	ldi	r24, 0x0E	; 14
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	80 93 c2 24 	sts	0x24C2, r24	; 0x8024c2 <k>
    2d0c:	90 93 c3 24 	sts	0x24C3, r25	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[20]=0;
    2d10:	08 e9       	ldi	r16, 0x98	; 152
    2d12:	14 e2       	ldi	r17, 0x24	; 36
    2d14:	d8 01       	movw	r26, r16
    2d16:	54 96       	adiw	r26, 0x14	; 20
    2d18:	1c 92       	st	X, r1
				SetJog[ax]=atol(temp);
    2d1a:	c8 01       	movw	r24, r16
    2d1c:	0e 94 46 2b 	call	0x568c	; 0x568c <atol>
    2d20:	f1 01       	movw	r30, r2
    2d22:	ee 0f       	add	r30, r30
    2d24:	ff 1f       	adc	r31, r31
    2d26:	ee 0f       	add	r30, r30
    2d28:	ff 1f       	adc	r31, r31
    2d2a:	e0 5d       	subi	r30, 0xD0	; 208
    2d2c:	f8 4d       	sbci	r31, 0xD8	; 216
    2d2e:	60 83       	st	Z, r22
    2d30:	71 83       	std	Z+1, r23	; 0x01
    2d32:	82 83       	std	Z+2, r24	; 0x02
    2d34:	93 83       	std	Z+3, r25	; 0x03
				sprintf(BufferSend,"!040%d\t%s\n\r",ax,temp);
    2d36:	1f 93       	push	r17
    2d38:	0f 93       	push	r16
    2d3a:	3f 92       	push	r3
    2d3c:	2f 92       	push	r2
    2d3e:	81 ec       	ldi	r24, 0xC1	; 193
    2d40:	91 e2       	ldi	r25, 0x21	; 33
    2d42:	9f 93       	push	r25
    2d44:	8f 93       	push	r24
    2d46:	89 e6       	ldi	r24, 0x69	; 105
    2d48:	96 e2       	ldi	r25, 0x26	; 38
    2d4a:	9f 93       	push	r25
    2d4c:	8f 93       	push	r24
    2d4e:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    2d58:	e0 ea       	ldi	r30, 0xA0	; 160
    2d5a:	f6 e0       	ldi	r31, 0x06	; 6
    2d5c:	84 81       	ldd	r24, Z+4	; 0x04
    2d5e:	81 60       	ori	r24, 0x01	; 1
    2d60:	84 83       	std	Z+4, r24	; 0x04
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			}
		}
	}
	else if(strncmp(cmdTemp,"?05",3)==0)
    2d6a:	43 e0       	ldi	r20, 0x03	; 3
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	6d ec       	ldi	r22, 0xCD	; 205
    2d70:	71 e2       	ldi	r23, 0x21	; 33
    2d72:	8d ea       	ldi	r24, 0xAD	; 173
    2d74:	94 e2       	ldi	r25, 0x24	; 36
    2d76:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    2d7a:	89 2b       	or	r24, r25
    2d7c:	09 f0       	breq	.+2      	; 0x2d80 <_Z6cmdExev+0x378>
    2d7e:	40 c0       	rjmp	.+128    	; 0x2e00 <_Z6cmdExev+0x3f8>
	{
		if(cmdTemp[3]=='0')//READ JOG FOR AXIS
    2d80:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2d84:	80 33       	cpi	r24, 0x30	; 48
    2d86:	11 f0       	breq	.+4      	; 0x2d8c <_Z6cmdExev+0x384>
    2d88:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2d8c:	e8 e9       	ldi	r30, 0x98	; 152
    2d8e:	f4 e2       	ldi	r31, 0x24	; 36
    2d90:	82 ea       	ldi	r24, 0xA2	; 162
    2d92:	94 e2       	ldi	r25, 0x24	; 36
		{
			for(k=0;k<10;k++)
			{
				temp[k]=0;
    2d94:	11 92       	st	Z+, r1
	}
	else if(strncmp(cmdTemp,"?05",3)==0)
	{
		if(cmdTemp[3]=='0')//READ JOG FOR AXIS
		{
			for(k=0;k<10;k++)
    2d96:	8e 17       	cp	r24, r30
    2d98:	9f 07       	cpc	r25, r31
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <_Z6cmdExev+0x38c>
    2d9c:	8a e0       	ldi	r24, 0x0A	; 10
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	80 93 c2 24 	sts	0x24C2, r24	; 0x8024c2 <k>
    2da4:	90 93 c3 24 	sts	0x24C3, r25	; 0x8024c3 <k+0x1>
			{
				temp[k]=0;
			}
			temp[10]=0;
    2da8:	10 92 a2 24 	sts	0x24A2, r1	; 0x8024a2 <temp+0xa>
			ltoa(SetJog[ax],temp,10);
    2dac:	f1 01       	movw	r30, r2
    2dae:	ee 0f       	add	r30, r30
    2db0:	ff 1f       	adc	r31, r31
    2db2:	ee 0f       	add	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	e0 5d       	subi	r30, 0xD0	; 208
    2db8:	f8 4d       	sbci	r31, 0xD8	; 216
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	2a e0       	ldi	r18, 0x0A	; 10
    2dc4:	48 e9       	ldi	r20, 0x98	; 152
    2dc6:	54 e2       	ldi	r21, 0x24	; 36
    2dc8:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <__ltoa_ncheck>
			if(EchoON) printf("!050%d\t%s\n\r",ax,temp);
    2dcc:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2dd0:	88 23       	and	r24, r24
    2dd2:	11 f4       	brne	.+4      	; 0x2dd8 <_Z6cmdExev+0x3d0>
    2dd4:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
    2dd8:	88 e9       	ldi	r24, 0x98	; 152
    2dda:	94 e2       	ldi	r25, 0x24	; 36
    2ddc:	9f 93       	push	r25
    2dde:	8f 93       	push	r24
    2de0:	3f 92       	push	r3
    2de2:	2f 92       	push	r2
    2de4:	81 ed       	ldi	r24, 0xD1	; 209
    2de6:	91 e2       	ldi	r25, 0x21	; 33
    2de8:	9f 93       	push	r25
    2dea:	8f 93       	push	r24
    2dec:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#06",3)==0)
    2e00:	43 e0       	ldi	r20, 0x03	; 3
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	6d ed       	ldi	r22, 0xDD	; 221
    2e06:	71 e2       	ldi	r23, 0x21	; 33
    2e08:	8d ea       	ldi	r24, 0xAD	; 173
    2e0a:	94 e2       	ldi	r25, 0x24	; 36
    2e0c:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    2e10:	89 2b       	or	r24, r25
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <_Z6cmdExev+0x40e>
    2e14:	7e c3       	rjmp	.+1788   	; 0x3512 <_Z6cmdExev+0xb0a>
	{
		if (!ProgramRun)
    2e16:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    2e1a:	81 11       	cpse	r24, r1
    2e1c:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
		{
			while (IsAnyAxisMoving() == 1);
    2e20:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	f1 f3       	breq	.-4      	; 0x2e24 <_Z6cmdExev+0x41c>
			if(cmdTemp[3]=='0')//RUN JOG
    2e28:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2e2c:	80 33       	cpi	r24, 0x30	; 48
    2e2e:	09 f0       	breq	.+2      	; 0x2e32 <_Z6cmdExev+0x42a>
    2e30:	d0 c1       	rjmp	.+928    	; 0x31d2 <_Z6cmdExev+0x7ca>
			{
				if (SetJog[ax] < AxisPosition[ax])
    2e32:	c1 01       	movw	r24, r2
    2e34:	88 0f       	add	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	e0 5d       	subi	r30, 0xD0	; 208
    2e40:	f8 4d       	sbci	r31, 0xD8	; 216
    2e42:	dc 01       	movw	r26, r24
    2e44:	ac 5d       	subi	r26, 0xDC	; 220
    2e46:	b8 4d       	sbci	r27, 0xD8	; 216
    2e48:	40 81       	ld	r20, Z
    2e4a:	51 81       	ldd	r21, Z+1	; 0x01
    2e4c:	62 81       	ldd	r22, Z+2	; 0x02
    2e4e:	73 81       	ldd	r23, Z+3	; 0x03
    2e50:	8d 91       	ld	r24, X+
    2e52:	9d 91       	ld	r25, X+
    2e54:	0d 90       	ld	r0, X+
    2e56:	bc 91       	ld	r27, X
    2e58:	a0 2d       	mov	r26, r0
    2e5a:	48 17       	cp	r20, r24
    2e5c:	59 07       	cpc	r21, r25
    2e5e:	6a 07       	cpc	r22, r26
    2e60:	7b 07       	cpc	r23, r27
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <_Z6cmdExev+0x466>
				SetAxisDir(ax,0);
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	c1 01       	movw	r24, r2
    2e68:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
    2e6c:	04 c0       	rjmp	.+8      	; 0x2e76 <_Z6cmdExev+0x46e>
				else
				SetAxisDir(ax,1);
    2e6e:	61 e0       	ldi	r22, 0x01	; 1
    2e70:	c1 01       	movw	r24, r2
    2e72:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				MaxSpeed = SetSpeed[ax];
    2e76:	c1 01       	movw	r24, r2
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	88 0f       	add	r24, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	fc 01       	movw	r30, r24
    2e82:	e4 5f       	subi	r30, 0xF4	; 244
    2e84:	f8 4d       	sbci	r31, 0xD8	; 216
    2e86:	c0 80       	ld	r12, Z
    2e88:	d1 80       	ldd	r13, Z+1	; 0x01
    2e8a:	e2 80       	ldd	r14, Z+2	; 0x02
    2e8c:	f3 80       	ldd	r15, Z+3	; 0x03
    2e8e:	c0 92 87 24 	sts	0x2487, r12	; 0x802487 <MaxSpeed>
    2e92:	d0 92 88 24 	sts	0x2488, r13	; 0x802488 <MaxSpeed+0x1>
    2e96:	e0 92 89 24 	sts	0x2489, r14	; 0x802489 <MaxSpeed+0x2>
    2e9a:	f0 92 8a 24 	sts	0x248A, r15	; 0x80248a <MaxSpeed+0x3>
				IACC=AxACC[ax];
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e0 50       	subi	r30, 0x00	; 0
    2ea2:	f9 4d       	sbci	r31, 0xD9	; 217
    2ea4:	80 80       	ld	r8, Z
    2ea6:	91 80       	ldd	r9, Z+1	; 0x01
    2ea8:	a2 80       	ldd	r10, Z+2	; 0x02
    2eaa:	b3 80       	ldd	r11, Z+3	; 0x03
    2eac:	80 92 83 24 	sts	0x2483, r8	; 0x802483 <IACC>
    2eb0:	90 92 84 24 	sts	0x2484, r9	; 0x802484 <IACC+0x1>
    2eb4:	a0 92 85 24 	sts	0x2485, r10	; 0x802485 <IACC+0x2>
    2eb8:	b0 92 86 24 	sts	0x2486, r11	; 0x802486 <IACC+0x3>
				IDEC=AxDEC[ax];
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	ec 50       	subi	r30, 0x0C	; 12
    2ec0:	f9 4d       	sbci	r31, 0xD9	; 217
    2ec2:	40 81       	ld	r20, Z
    2ec4:	51 81       	ldd	r21, Z+1	; 0x01
    2ec6:	62 81       	ldd	r22, Z+2	; 0x02
    2ec8:	73 81       	ldd	r23, Z+3	; 0x03
    2eca:	40 93 7f 24 	sts	0x247F, r20	; 0x80247f <IDEC>
    2ece:	50 93 80 24 	sts	0x2480, r21	; 0x802480 <IDEC+0x1>
    2ed2:	60 93 81 24 	sts	0x2481, r22	; 0x802481 <IDEC+0x2>
    2ed6:	70 93 82 24 	sts	0x2482, r23	; 0x802482 <IDEC+0x3>
				MaxDistanceToGo=labs(AxisPosition[ax]-SetJog[ax]);
    2eda:	fc 01       	movw	r30, r24
    2edc:	ec 5d       	subi	r30, 0xDC	; 220
    2ede:	f8 4d       	sbci	r31, 0xD8	; 216
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	a0 5d       	subi	r26, 0xD0	; 208
    2ee4:	b8 4d       	sbci	r27, 0xD8	; 216
    2ee6:	00 81       	ld	r16, Z
    2ee8:	11 81       	ldd	r17, Z+1	; 0x01
    2eea:	22 81       	ldd	r18, Z+2	; 0x02
    2eec:	33 81       	ldd	r19, Z+3	; 0x03
    2eee:	8d 91       	ld	r24, X+
    2ef0:	9d 91       	ld	r25, X+
    2ef2:	0d 90       	ld	r0, X+
    2ef4:	bc 91       	ld	r27, X
    2ef6:	a0 2d       	mov	r26, r0
    2ef8:	08 1b       	sub	r16, r24
    2efa:	19 0b       	sbc	r17, r25
    2efc:	2a 0b       	sbc	r18, r26
    2efe:	3b 0b       	sbc	r19, r27
    2f00:	d9 01       	movw	r26, r18
    2f02:	c8 01       	movw	r24, r16
    2f04:	3a f4       	brpl	.+14     	; 0x2f14 <_Z6cmdExev+0x50c>
    2f06:	88 27       	eor	r24, r24
    2f08:	99 27       	eor	r25, r25
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	80 1b       	sub	r24, r16
    2f0e:	91 0b       	sbc	r25, r17
    2f10:	a2 0b       	sbc	r26, r18
    2f12:	b3 0b       	sbc	r27, r19
    2f14:	2c 01       	movw	r4, r24
    2f16:	3d 01       	movw	r6, r26
    2f18:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    2f1c:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    2f20:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    2f24:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
				Ma[ax]=1000;
    2f28:	f1 01       	movw	r30, r2
    2f2a:	ee 0f       	add	r30, r30
    2f2c:	ff 1f       	adc	r31, r31
    2f2e:	ee 51       	subi	r30, 0x1E	; 30
    2f30:	f9 4d       	sbci	r31, 0xD9	; 217
    2f32:	88 ee       	ldi	r24, 0xE8	; 232
    2f34:	93 e0       	ldi	r25, 0x03	; 3
    2f36:	80 83       	st	Z, r24
    2f38:	91 83       	std	Z+1, r25	; 0x01
				CurSpeedFrq=0;
    2f3a:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    2f3e:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    2f42:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    2f46:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
				TCC0.CCA=0xFFFF;
    2f4a:	8f ef       	ldi	r24, 0xFF	; 255
    2f4c:	9f ef       	ldi	r25, 0xFF	; 255
    2f4e:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2f52:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				
				if (IACC == 0) IACC = 100;
    2f56:	89 28       	or	r8, r9
    2f58:	8a 28       	or	r8, r10
    2f5a:	8b 28       	or	r8, r11
    2f5c:	61 f4       	brne	.+24     	; 0x2f76 <_Z6cmdExev+0x56e>
    2f5e:	84 e6       	ldi	r24, 0x64	; 100
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	a0 e0       	ldi	r26, 0x00	; 0
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <IACC>
    2f6a:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <IACC+0x1>
    2f6e:	a0 93 85 24 	sts	0x2485, r26	; 0x802485 <IACC+0x2>
    2f72:	b0 93 86 24 	sts	0x2486, r27	; 0x802486 <IACC+0x3>
				if (IDEC == 0) IDEC = 100;
    2f76:	45 2b       	or	r20, r21
    2f78:	46 2b       	or	r20, r22
    2f7a:	47 2b       	or	r20, r23
    2f7c:	61 f4       	brne	.+24     	; 0x2f96 <_Z6cmdExev+0x58e>
    2f7e:	84 e6       	ldi	r24, 0x64	; 100
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a0 e0       	ldi	r26, 0x00	; 0
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	80 93 7f 24 	sts	0x247F, r24	; 0x80247f <IDEC>
    2f8a:	90 93 80 24 	sts	0x2480, r25	; 0x802480 <IDEC+0x1>
    2f8e:	a0 93 81 24 	sts	0x2481, r26	; 0x802481 <IDEC+0x2>
    2f92:	b0 93 82 24 	sts	0x2482, r27	; 0x802482 <IDEC+0x3>
								
				ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    2f96:	c7 01       	movw	r24, r14
    2f98:	b6 01       	movw	r22, r12
    2f9a:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	48 ec       	ldi	r20, 0xC8	; 200
    2fa4:	52 e4       	ldi	r21, 0x42	; 66
    2fa6:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    2faa:	6d 83       	std	Y+5, r22	; 0x05
    2fac:	7e 83       	std	Y+6, r23	; 0x06
    2fae:	8f 83       	std	Y+7, r24	; 0x07
    2fb0:	98 87       	std	Y+8, r25	; 0x08
    2fb2:	00 91 83 24 	lds	r16, 0x2483	; 0x802483 <IACC>
    2fb6:	10 91 84 24 	lds	r17, 0x2484	; 0x802484 <IACC+0x1>
    2fba:	20 91 85 24 	lds	r18, 0x2485	; 0x802485 <IACC+0x2>
    2fbe:	30 91 86 24 	lds	r19, 0x2486	; 0x802486 <IACC+0x3>
    2fc2:	09 83       	std	Y+1, r16	; 0x01
    2fc4:	1a 83       	std	Y+2, r17	; 0x02
    2fc6:	2b 83       	std	Y+3, r18	; 0x03
    2fc8:	3c 83       	std	Y+4, r19	; 0x04
				ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    2fca:	c9 01       	movw	r24, r18
    2fcc:	b8 01       	movw	r22, r16
    2fce:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    2fd2:	9b 01       	movw	r18, r22
    2fd4:	ac 01       	movw	r20, r24
    2fd6:	6d 81       	ldd	r22, Y+5	; 0x05
    2fd8:	7e 81       	ldd	r23, Y+6	; 0x06
    2fda:	8f 81       	ldd	r24, Y+7	; 0x07
    2fdc:	98 85       	ldd	r25, Y+8	; 0x08
    2fde:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    2fe2:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    2fe6:	9b 01       	movw	r18, r22
    2fe8:	ac 01       	movw	r20, r24
    2fea:	c7 01       	movw	r24, r14
    2fec:	b6 01       	movw	r22, r12
    2fee:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    2ff2:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    2ff6:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    2ffa:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    2ffe:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
				
				DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
    3002:	80 90 7f 24 	lds	r8, 0x247F	; 0x80247f <IDEC>
    3006:	90 90 80 24 	lds	r9, 0x2480	; 0x802480 <IDEC+0x1>
    300a:	a0 90 81 24 	lds	r10, 0x2481	; 0x802481 <IDEC+0x2>
    300e:	b0 90 82 24 	lds	r11, 0x2482	; 0x802482 <IDEC+0x3>
				DECSpeedINT= MaxSpeed / DECSpeedINT;
    3012:	c5 01       	movw	r24, r10
    3014:	b4 01       	movw	r22, r8
    3016:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    301a:	9b 01       	movw	r18, r22
    301c:	ac 01       	movw	r20, r24
    301e:	6d 81       	ldd	r22, Y+5	; 0x05
    3020:	7e 81       	ldd	r23, Y+6	; 0x06
    3022:	8f 81       	ldd	r24, Y+7	; 0x07
    3024:	98 85       	ldd	r25, Y+8	; 0x08
    3026:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    302a:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    302e:	9b 01       	movw	r18, r22
    3030:	ac 01       	movw	r20, r24
    3032:	c7 01       	movw	r24, r14
    3034:	b6 01       	movw	r22, r12
    3036:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    303a:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    303e:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    3042:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    3046:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
				
				DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);
    304a:	a7 01       	movw	r20, r14
    304c:	96 01       	movw	r18, r12
    304e:	c7 01       	movw	r24, r14
    3050:	b6 01       	movw	r22, r12
    3052:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsi3>
    3056:	6d 83       	std	Y+5, r22	; 0x05
    3058:	7e 83       	std	Y+6, r23	; 0x06
    305a:	8f 83       	std	Y+7, r24	; 0x07
    305c:	98 87       	std	Y+8, r25	; 0x08
    305e:	a5 01       	movw	r20, r10
    3060:	94 01       	movw	r18, r8
    3062:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    3066:	69 01       	movw	r12, r18
    3068:	7a 01       	movw	r14, r20
    306a:	20 93 8f 24 	sts	0x248F, r18	; 0x80248f <DecDTG>
    306e:	30 93 90 24 	sts	0x2490, r19	; 0x802490 <DecDTG+0x1>
    3072:	40 93 91 24 	sts	0x2491, r20	; 0x802491 <DecDTG+0x2>
    3076:	50 93 92 24 	sts	0x2492, r21	; 0x802492 <DecDTG+0x3>
				AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);
    307a:	6d 81       	ldd	r22, Y+5	; 0x05
    307c:	7e 81       	ldd	r23, Y+6	; 0x06
    307e:	8f 81       	ldd	r24, Y+7	; 0x07
    3080:	98 85       	ldd	r25, Y+8	; 0x08
    3082:	29 81       	ldd	r18, Y+1	; 0x01
    3084:	3a 81       	ldd	r19, Y+2	; 0x02
    3086:	4b 81       	ldd	r20, Y+3	; 0x03
    3088:	5c 81       	ldd	r21, Y+4	; 0x04
    308a:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
				SumAccDecDTG = DecDTG + AccDTG;
    308e:	46 01       	movw	r8, r12
    3090:	57 01       	movw	r10, r14
    3092:	82 0e       	add	r8, r18
    3094:	93 1e       	adc	r9, r19
    3096:	a4 1e       	adc	r10, r20
    3098:	b5 1e       	adc	r11, r21
    309a:	80 92 7b 24 	sts	0x247B, r8	; 0x80247b <SumAccDecDTG>
    309e:	90 92 7c 24 	sts	0x247C, r9	; 0x80247c <SumAccDecDTG+0x1>
    30a2:	a0 92 7d 24 	sts	0x247D, r10	; 0x80247d <SumAccDecDTG+0x2>
    30a6:	b0 92 7e 24 	sts	0x247E, r11	; 0x80247e <SumAccDecDTG+0x3>
				if (MaxDistanceToGo <= SumAccDecDTG)
    30aa:	84 14       	cp	r8, r4
    30ac:	95 04       	cpc	r9, r5
    30ae:	a6 04       	cpc	r10, r6
    30b0:	b7 04       	cpc	r11, r7
    30b2:	cc f1       	brlt	.+114    	; 0x3126 <_Z6cmdExev+0x71e>
				{
					DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    30b4:	c3 01       	movw	r24, r6
    30b6:	b2 01       	movw	r22, r4
    30b8:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    30bc:	69 83       	std	Y+1, r22	; 0x01
    30be:	7a 83       	std	Y+2, r23	; 0x02
    30c0:	8b 83       	std	Y+3, r24	; 0x03
    30c2:	9c 83       	std	Y+4, r25	; 0x04
    30c4:	c5 01       	movw	r24, r10
    30c6:	b4 01       	movw	r22, r8
    30c8:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    30cc:	9b 01       	movw	r18, r22
    30ce:	ac 01       	movw	r20, r24
    30d0:	69 81       	ldd	r22, Y+1	; 0x01
    30d2:	7a 81       	ldd	r23, Y+2	; 0x02
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    30dc:	4b 01       	movw	r8, r22
    30de:	5c 01       	movw	r10, r24
    30e0:	c7 01       	movw	r24, r14
    30e2:	b6 01       	movw	r22, r12
    30e4:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    30e8:	9b 01       	movw	r18, r22
    30ea:	ac 01       	movw	r20, r24
    30ec:	c5 01       	movw	r24, r10
    30ee:	b4 01       	movw	r22, r8
    30f0:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    30f4:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    30f8:	60 93 8f 24 	sts	0x248F, r22	; 0x80248f <DecDTG>
    30fc:	70 93 90 24 	sts	0x2490, r23	; 0x802490 <DecDTG+0x1>
    3100:	80 93 91 24 	sts	0x2491, r24	; 0x802491 <DecDTG+0x2>
    3104:	90 93 92 24 	sts	0x2492, r25	; 0x802492 <DecDTG+0x3>
					AccDTG = MaxDistanceToGo - DecDTG;
    3108:	a3 01       	movw	r20, r6
    310a:	92 01       	movw	r18, r4
    310c:	26 1b       	sub	r18, r22
    310e:	37 0b       	sbc	r19, r23
    3110:	48 0b       	sbc	r20, r24
    3112:	59 0b       	sbc	r21, r25
    3114:	20 93 93 24 	sts	0x2493, r18	; 0x802493 <AccDTG>
    3118:	30 93 94 24 	sts	0x2494, r19	; 0x802494 <AccDTG+0x1>
    311c:	40 93 95 24 	sts	0x2495, r20	; 0x802495 <AccDTG+0x2>
    3120:	50 93 96 24 	sts	0x2496, r21	; 0x802496 <AccDTG+0x3>
    3124:	0e c0       	rjmp	.+28     	; 0x3142 <_Z6cmdExev+0x73a>
				}
				else
				{
					AccDTG = MaxDistanceToGo - AccDTG;
    3126:	d3 01       	movw	r26, r6
    3128:	c2 01       	movw	r24, r4
    312a:	82 1b       	sub	r24, r18
    312c:	93 0b       	sbc	r25, r19
    312e:	a4 0b       	sbc	r26, r20
    3130:	b5 0b       	sbc	r27, r21
    3132:	80 93 93 24 	sts	0x2493, r24	; 0x802493 <AccDTG>
    3136:	90 93 94 24 	sts	0x2494, r25	; 0x802494 <AccDTG+0x1>
    313a:	a0 93 95 24 	sts	0x2495, r26	; 0x802495 <AccDTG+0x2>
    313e:	b0 93 96 24 	sts	0x2496, r27	; 0x802496 <AccDTG+0x3>
				}
				
				DistanceToGo[ax] = labs(AxisPosition[ax]-SetJog[ax]);
    3142:	c1 01       	movw	r24, r2
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	fc 01       	movw	r30, r24
    314e:	e8 5e       	subi	r30, 0xE8	; 232
    3150:	f8 4d       	sbci	r31, 0xD8	; 216
    3152:	dc 01       	movw	r26, r24
    3154:	ac 5d       	subi	r26, 0xDC	; 220
    3156:	b8 4d       	sbci	r27, 0xD8	; 216
    3158:	80 5d       	subi	r24, 0xD0	; 208
    315a:	98 4d       	sbci	r25, 0xD8	; 216
    315c:	4d 91       	ld	r20, X+
    315e:	5d 91       	ld	r21, X+
    3160:	6d 91       	ld	r22, X+
    3162:	7c 91       	ld	r23, X
    3164:	dc 01       	movw	r26, r24
    3166:	cd 90       	ld	r12, X+
    3168:	dd 90       	ld	r13, X+
    316a:	ed 90       	ld	r14, X+
    316c:	fc 90       	ld	r15, X
    316e:	db 01       	movw	r26, r22
    3170:	ca 01       	movw	r24, r20
    3172:	8c 19       	sub	r24, r12
    3174:	9d 09       	sbc	r25, r13
    3176:	ae 09       	sbc	r26, r14
    3178:	bf 09       	sbc	r27, r15
    317a:	ac 01       	movw	r20, r24
    317c:	bd 01       	movw	r22, r26
    317e:	3a f4       	brpl	.+14     	; 0x318e <_Z6cmdExev+0x786>
    3180:	44 27       	eor	r20, r20
    3182:	55 27       	eor	r21, r21
    3184:	ba 01       	movw	r22, r20
    3186:	48 1b       	sub	r20, r24
    3188:	59 0b       	sbc	r21, r25
    318a:	6a 0b       	sbc	r22, r26
    318c:	7b 0b       	sbc	r23, r27
    318e:	40 83       	st	Z, r20
    3190:	51 83       	std	Z+1, r21	; 0x01
    3192:	62 83       	std	Z+2, r22	; 0x02
    3194:	73 83       	std	Z+3, r23	; 0x03
				ACC=1;
    3196:	11 e0       	ldi	r17, 0x01	; 1
    3198:	10 93 6e 24 	sts	0x246E, r17	; 0x80246e <ACC>
				sprintf(BufferSend,"!060%d\r\n",ax);
    319c:	3f 92       	push	r3
    319e:	2f 92       	push	r2
    31a0:	81 ee       	ldi	r24, 0xE1	; 225
    31a2:	91 e2       	ldi	r25, 0x21	; 33
    31a4:	9f 93       	push	r25
    31a6:	8f 93       	push	r24
    31a8:	89 e6       	ldi	r24, 0x69	; 105
    31aa:	96 e2       	ldi	r25, 0x26	; 38
    31ac:	9f 93       	push	r25
    31ae:	8f 93       	push	r24
    31b0:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing=1;
    31b4:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
				SetDataReady;
    31b8:	e0 ea       	ldi	r30, 0xA0	; 160
    31ba:	f6 e0       	ldi	r31, 0x06	; 6
    31bc:	84 81       	ldd	r24, Z+4	; 0x04
    31be:	81 60       	ori	r24, 0x01	; 1
    31c0:	84 83       	std	Z+4, r24	; 0x04
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			}
			
			else if(cmdTemp[3]=='1') //Axis Selected
    31d2:	81 33       	cpi	r24, 0x31	; 49
    31d4:	01 f5       	brne	.+64     	; 0x3216 <_Z6cmdExev+0x80e>
			{
				SelectedAxis = ax;
    31d6:	20 92 66 24 	sts	0x2466, r2	; 0x802466 <SelectedAxis>
    31da:	30 92 67 24 	sts	0x2467, r3	; 0x802467 <SelectedAxis+0x1>
				sprintf(BufferSend,"!061%d\r\n",ax);
    31de:	3f 92       	push	r3
    31e0:	2f 92       	push	r2
    31e2:	8a ee       	ldi	r24, 0xEA	; 234
    31e4:	91 e2       	ldi	r25, 0x21	; 33
    31e6:	9f 93       	push	r25
    31e8:	8f 93       	push	r24
    31ea:	89 e6       	ldi	r24, 0x69	; 105
    31ec:	96 e2       	ldi	r25, 0x26	; 38
    31ee:	9f 93       	push	r25
    31f0:	8f 93       	push	r24
    31f2:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing=1;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    31fc:	e0 ea       	ldi	r30, 0xA0	; 160
    31fe:	f6 e0       	ldi	r31, 0x06	; 6
    3200:	84 81       	ldd	r24, Z+4	; 0x04
    3202:	81 60       	ori	r24, 0x01	; 1
    3204:	84 83       	std	Z+4, r24	; 0x04
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			}
			else if(cmdTemp[3]=='2')//Free Jog  to Positive ?062X
    3216:	82 33       	cpi	r24, 0x32	; 50
    3218:	09 f0       	breq	.+2      	; 0x321c <_Z6cmdExev+0x814>
    321a:	ac c0       	rjmp	.+344    	; 0x3374 <_Z6cmdExev+0x96c>
			{
				SetAxisDir(ax,1);
    321c:	61 e0       	ldi	r22, 0x01	; 1
    321e:	c1 01       	movw	r24, r2
    3220:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				MaxSpeed=SetSpeed[ax];
    3224:	c1 01       	movw	r24, r2
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	fc 01       	movw	r30, r24
    3230:	e4 5f       	subi	r30, 0xF4	; 244
    3232:	f8 4d       	sbci	r31, 0xD8	; 216
    3234:	c0 80       	ld	r12, Z
    3236:	d1 80       	ldd	r13, Z+1	; 0x01
    3238:	e2 80       	ldd	r14, Z+2	; 0x02
    323a:	f3 80       	ldd	r15, Z+3	; 0x03
    323c:	c0 92 87 24 	sts	0x2487, r12	; 0x802487 <MaxSpeed>
    3240:	d0 92 88 24 	sts	0x2488, r13	; 0x802488 <MaxSpeed+0x1>
    3244:	e0 92 89 24 	sts	0x2489, r14	; 0x802489 <MaxSpeed+0x2>
    3248:	f0 92 8a 24 	sts	0x248A, r15	; 0x80248a <MaxSpeed+0x3>
				IACC=AxACC[ax];
    324c:	fc 01       	movw	r30, r24
    324e:	e0 50       	subi	r30, 0x00	; 0
    3250:	f9 4d       	sbci	r31, 0xD9	; 217
    3252:	40 80       	ld	r4, Z
    3254:	51 80       	ldd	r5, Z+1	; 0x01
    3256:	62 80       	ldd	r6, Z+2	; 0x02
    3258:	73 80       	ldd	r7, Z+3	; 0x03
    325a:	40 92 83 24 	sts	0x2483, r4	; 0x802483 <IACC>
    325e:	50 92 84 24 	sts	0x2484, r5	; 0x802484 <IACC+0x1>
    3262:	60 92 85 24 	sts	0x2485, r6	; 0x802485 <IACC+0x2>
    3266:	70 92 86 24 	sts	0x2486, r7	; 0x802486 <IACC+0x3>
				IDEC=AxDEC[ax];
    326a:	fc 01       	movw	r30, r24
    326c:	ec 50       	subi	r30, 0x0C	; 12
    326e:	f9 4d       	sbci	r31, 0xD9	; 217
    3270:	80 80       	ld	r8, Z
    3272:	91 80       	ldd	r9, Z+1	; 0x01
    3274:	a2 80       	ldd	r10, Z+2	; 0x02
    3276:	b3 80       	ldd	r11, Z+3	; 0x03
    3278:	80 92 7f 24 	sts	0x247F, r8	; 0x80247f <IDEC>
    327c:	90 92 80 24 	sts	0x2480, r9	; 0x802480 <IDEC+0x1>
    3280:	a0 92 81 24 	sts	0x2481, r10	; 0x802481 <IDEC+0x2>
    3284:	b0 92 82 24 	sts	0x2482, r11	; 0x802482 <IDEC+0x3>
				CurSpeedFrq=0;
    3288:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    328c:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    3290:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    3294:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
				TCC0.CCA=0xFFFF;
    3298:	8f ef       	ldi	r24, 0xFF	; 255
    329a:	9f ef       	ldi	r25, 0xFF	; 255
    329c:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    32a0:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				
				ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    32a4:	c7 01       	movw	r24, r14
    32a6:	b6 01       	movw	r22, r12
    32a8:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	48 ec       	ldi	r20, 0xC8	; 200
    32b2:	52 e4       	ldi	r21, 0x42	; 66
    32b4:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    32b8:	69 83       	std	Y+1, r22	; 0x01
    32ba:	7a 83       	std	Y+2, r23	; 0x02
    32bc:	8b 83       	std	Y+3, r24	; 0x03
    32be:	9c 83       	std	Y+4, r25	; 0x04
				ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    32c0:	c3 01       	movw	r24, r6
    32c2:	b2 01       	movw	r22, r4
    32c4:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    32c8:	9b 01       	movw	r18, r22
    32ca:	ac 01       	movw	r20, r24
    32cc:	69 81       	ldd	r22, Y+1	; 0x01
    32ce:	7a 81       	ldd	r23, Y+2	; 0x02
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	9c 81       	ldd	r25, Y+4	; 0x04
    32d4:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    32d8:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    32dc:	9b 01       	movw	r18, r22
    32de:	ac 01       	movw	r20, r24
    32e0:	c7 01       	movw	r24, r14
    32e2:	b6 01       	movw	r22, r12
    32e4:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    32e8:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    32ec:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    32f0:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    32f4:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
				
				DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
				DECSpeedINT= MaxSpeed / DECSpeedINT;
    32f8:	c5 01       	movw	r24, r10
    32fa:	b4 01       	movw	r22, r8
    32fc:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    3300:	9b 01       	movw	r18, r22
    3302:	ac 01       	movw	r20, r24
    3304:	69 81       	ldd	r22, Y+1	; 0x01
    3306:	7a 81       	ldd	r23, Y+2	; 0x02
    3308:	8b 81       	ldd	r24, Y+3	; 0x03
    330a:	9c 81       	ldd	r25, Y+4	; 0x04
    330c:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    3310:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    3314:	9b 01       	movw	r18, r22
    3316:	ac 01       	movw	r20, r24
    3318:	c7 01       	movw	r24, r14
    331a:	b6 01       	movw	r22, r12
    331c:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    3320:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    3324:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    3328:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    332c:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
				FreeJog = ax;
    3330:	20 92 00 20 	sts	0x2000, r2	; 0x802000 <FreeJog>
    3334:	30 92 01 20 	sts	0x2001, r3	; 0x802001 <FreeJog+0x1>
				ACC=1;
    3338:	11 e0       	ldi	r17, 0x01	; 1
    333a:	10 93 6e 24 	sts	0x246E, r17	; 0x80246e <ACC>
				sprintf(BufferSend,"!062%d\r\n",ax);
    333e:	3f 92       	push	r3
    3340:	2f 92       	push	r2
    3342:	83 ef       	ldi	r24, 0xF3	; 243
    3344:	91 e2       	ldi	r25, 0x21	; 33
    3346:	9f 93       	push	r25
    3348:	8f 93       	push	r24
    334a:	89 e6       	ldi	r24, 0x69	; 105
    334c:	96 e2       	ldi	r25, 0x26	; 38
    334e:	9f 93       	push	r25
    3350:	8f 93       	push	r24
    3352:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing=1;
    3356:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
				SetDataReady;
    335a:	e0 ea       	ldi	r30, 0xA0	; 160
    335c:	f6 e0       	ldi	r31, 0x06	; 6
    335e:	84 81       	ldd	r24, Z+4	; 0x04
    3360:	81 60       	ori	r24, 0x01	; 1
    3362:	84 83       	std	Z+4, r24	; 0x04
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			}
			else if(cmdTemp[3]=='3')//Free Jog   STOP ?63X
    3374:	83 33       	cpi	r24, 0x33	; 51
    3376:	f1 f4       	brne	.+60     	; 0x33b4 <_Z6cmdExev+0x9ac>
			{
				DEC=1;
    3378:	11 e0       	ldi	r17, 0x01	; 1
    337a:	10 93 6d 24 	sts	0x246D, r17	; 0x80246d <DEC>
				sprintf(BufferSend,"!063%d\r\n",ax);
    337e:	3f 92       	push	r3
    3380:	2f 92       	push	r2
    3382:	8c ef       	ldi	r24, 0xFC	; 252
    3384:	91 e2       	ldi	r25, 0x21	; 33
    3386:	9f 93       	push	r25
    3388:	8f 93       	push	r24
    338a:	89 e6       	ldi	r24, 0x69	; 105
    338c:	96 e2       	ldi	r25, 0x26	; 38
    338e:	9f 93       	push	r25
    3390:	8f 93       	push	r24
    3392:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing=1;
    3396:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
				SetDataReady;
    339a:	e0 ea       	ldi	r30, 0xA0	; 160
    339c:	f6 e0       	ldi	r31, 0x06	; 6
    339e:	84 81       	ldd	r24, Z+4	; 0x04
    33a0:	81 60       	ori	r24, 0x01	; 1
    33a2:	84 83       	std	Z+4, r24	; 0x04
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			}
			else if (cmdTemp[3] =='4') // free jog to negative
    33b4:	84 33       	cpi	r24, 0x34	; 52
    33b6:	11 f0       	breq	.+4      	; 0x33bc <_Z6cmdExev+0x9b4>
    33b8:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__stack+0x455>
			{
				SetAxisDir(ax,0);
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	c1 01       	movw	r24, r2
    33c0:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				MaxSpeed=SetSpeed[ax];
    33c4:	c1 01       	movw	r24, r2
    33c6:	88 0f       	add	r24, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	fc 01       	movw	r30, r24
    33d0:	e4 5f       	subi	r30, 0xF4	; 244
    33d2:	f8 4d       	sbci	r31, 0xD8	; 216
    33d4:	c0 80       	ld	r12, Z
    33d6:	d1 80       	ldd	r13, Z+1	; 0x01
    33d8:	e2 80       	ldd	r14, Z+2	; 0x02
    33da:	f3 80       	ldd	r15, Z+3	; 0x03
    33dc:	c0 92 87 24 	sts	0x2487, r12	; 0x802487 <MaxSpeed>
    33e0:	d0 92 88 24 	sts	0x2488, r13	; 0x802488 <MaxSpeed+0x1>
    33e4:	e0 92 89 24 	sts	0x2489, r14	; 0x802489 <MaxSpeed+0x2>
    33e8:	f0 92 8a 24 	sts	0x248A, r15	; 0x80248a <MaxSpeed+0x3>
				IACC=AxACC[ax];
    33ec:	fc 01       	movw	r30, r24
    33ee:	e0 50       	subi	r30, 0x00	; 0
    33f0:	f9 4d       	sbci	r31, 0xD9	; 217
    33f2:	40 80       	ld	r4, Z
    33f4:	51 80       	ldd	r5, Z+1	; 0x01
    33f6:	62 80       	ldd	r6, Z+2	; 0x02
    33f8:	73 80       	ldd	r7, Z+3	; 0x03
    33fa:	40 92 83 24 	sts	0x2483, r4	; 0x802483 <IACC>
    33fe:	50 92 84 24 	sts	0x2484, r5	; 0x802484 <IACC+0x1>
    3402:	60 92 85 24 	sts	0x2485, r6	; 0x802485 <IACC+0x2>
    3406:	70 92 86 24 	sts	0x2486, r7	; 0x802486 <IACC+0x3>
				IDEC=AxDEC[ax];
    340a:	fc 01       	movw	r30, r24
    340c:	ec 50       	subi	r30, 0x0C	; 12
    340e:	f9 4d       	sbci	r31, 0xD9	; 217
    3410:	80 80       	ld	r8, Z
    3412:	91 80       	ldd	r9, Z+1	; 0x01
    3414:	a2 80       	ldd	r10, Z+2	; 0x02
    3416:	b3 80       	ldd	r11, Z+3	; 0x03
    3418:	80 92 7f 24 	sts	0x247F, r8	; 0x80247f <IDEC>
    341c:	90 92 80 24 	sts	0x2480, r9	; 0x802480 <IDEC+0x1>
    3420:	a0 92 81 24 	sts	0x2481, r10	; 0x802481 <IDEC+0x2>
    3424:	b0 92 82 24 	sts	0x2482, r11	; 0x802482 <IDEC+0x3>
				CurSpeedFrq=0;
    3428:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    342c:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    3430:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    3434:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
				TCC0.CCA=0xFFFF;
    3438:	8f ef       	ldi	r24, 0xFF	; 255
    343a:	9f ef       	ldi	r25, 0xFF	; 255
    343c:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3440:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				
				ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    3444:	c7 01       	movw	r24, r14
    3446:	b6 01       	movw	r22, r12
    3448:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	48 ec       	ldi	r20, 0xC8	; 200
    3452:	52 e4       	ldi	r21, 0x42	; 66
    3454:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    3458:	69 83       	std	Y+1, r22	; 0x01
    345a:	7a 83       	std	Y+2, r23	; 0x02
    345c:	8b 83       	std	Y+3, r24	; 0x03
    345e:	9c 83       	std	Y+4, r25	; 0x04
				ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    3460:	c3 01       	movw	r24, r6
    3462:	b2 01       	movw	r22, r4
    3464:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    3468:	9b 01       	movw	r18, r22
    346a:	ac 01       	movw	r20, r24
    346c:	69 81       	ldd	r22, Y+1	; 0x01
    346e:	7a 81       	ldd	r23, Y+2	; 0x02
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	9c 81       	ldd	r25, Y+4	; 0x04
    3474:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    3478:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	c7 01       	movw	r24, r14
    3482:	b6 01       	movw	r22, r12
    3484:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    3488:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    348c:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    3490:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    3494:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
				
				DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
				DECSpeedINT= MaxSpeed / DECSpeedINT;
    3498:	c5 01       	movw	r24, r10
    349a:	b4 01       	movw	r22, r8
    349c:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    34a0:	9b 01       	movw	r18, r22
    34a2:	ac 01       	movw	r20, r24
    34a4:	69 81       	ldd	r22, Y+1	; 0x01
    34a6:	7a 81       	ldd	r23, Y+2	; 0x02
    34a8:	8b 81       	ldd	r24, Y+3	; 0x03
    34aa:	9c 81       	ldd	r25, Y+4	; 0x04
    34ac:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    34b0:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    34b4:	9b 01       	movw	r18, r22
    34b6:	ac 01       	movw	r20, r24
    34b8:	c7 01       	movw	r24, r14
    34ba:	b6 01       	movw	r22, r12
    34bc:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    34c0:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    34c4:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    34c8:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    34cc:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
				FreeJog = ax;
    34d0:	20 92 00 20 	sts	0x2000, r2	; 0x802000 <FreeJog>
    34d4:	30 92 01 20 	sts	0x2001, r3	; 0x802001 <FreeJog+0x1>
				ACC=1;
    34d8:	11 e0       	ldi	r17, 0x01	; 1
    34da:	10 93 6e 24 	sts	0x246E, r17	; 0x80246e <ACC>
				sprintf(BufferSend,"!064%d\r\n",ax);
    34de:	3f 92       	push	r3
    34e0:	2f 92       	push	r2
    34e2:	85 e0       	ldi	r24, 0x05	; 5
    34e4:	92 e2       	ldi	r25, 0x22	; 34
    34e6:	9f 93       	push	r25
    34e8:	8f 93       	push	r24
    34ea:	89 e6       	ldi	r24, 0x69	; 105
    34ec:	96 e2       	ldi	r25, 0x26	; 38
    34ee:	9f 93       	push	r25
    34f0:	8f 93       	push	r24
    34f2:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing=1;
    34f6:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
				SetDataReady;
    34fa:	e0 ea       	ldi	r30, 0xA0	; 160
    34fc:	f6 e0       	ldi	r31, 0x06	; 6
    34fe:	84 81       	ldd	r24, Z+4	; 0x04
    3500:	81 60       	ori	r24, 0x01	; 1
    3502:	84 83       	std	Z+4, r24	; 0x04
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	a1 c7       	rjmp	.+3906   	; 0x4454 <__stack+0x455>
			}
		}
	}
	else if(strncmp(cmdTemp,"#07",3)==0)
    3512:	43 e0       	ldi	r20, 0x03	; 3
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	6e e0       	ldi	r22, 0x0E	; 14
    3518:	72 e2       	ldi	r23, 0x22	; 34
    351a:	8d ea       	ldi	r24, 0xAD	; 173
    351c:	94 e2       	ldi	r25, 0x24	; 36
    351e:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3522:	89 2b       	or	r24, r25
    3524:	31 f5       	brne	.+76     	; 0x3572 <_Z6cmdExev+0xb6a>
	{
		if(!ProgramRun)
    3526:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    352a:	81 11       	cpse	r24, r1
    352c:	93 c7       	rjmp	.+3878   	; 0x4454 <__stack+0x455>
		{
			if(cmdTemp[3]=='0')//STOP JOG
    352e:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3532:	80 33       	cpi	r24, 0x30	; 48
    3534:	09 f0       	breq	.+2      	; 0x3538 <_Z6cmdExev+0xb30>
    3536:	8e c7       	rjmp	.+3868   	; 0x4454 <__stack+0x455>
			{
				DistanceToGo[ax] = 0;
    3538:	f1 01       	movw	r30, r2
    353a:	ee 0f       	add	r30, r30
    353c:	ff 1f       	adc	r31, r31
    353e:	ee 0f       	add	r30, r30
    3540:	ff 1f       	adc	r31, r31
    3542:	e8 5e       	subi	r30, 0xE8	; 232
    3544:	f8 4d       	sbci	r31, 0xD8	; 216
    3546:	10 82       	st	Z, r1
    3548:	11 82       	std	Z+1, r1	; 0x01
    354a:	12 82       	std	Z+2, r1	; 0x02
    354c:	13 82       	std	Z+3, r1	; 0x03
				if(EchoON) printf("!070%d\n\r",ax);
    354e:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    3552:	88 23       	and	r24, r24
    3554:	09 f4       	brne	.+2      	; 0x3558 <_Z6cmdExev+0xb50>
    3556:	7e c7       	rjmp	.+3836   	; 0x4454 <__stack+0x455>
    3558:	3f 92       	push	r3
    355a:	2f 92       	push	r2
    355c:	82 e1       	ldi	r24, 0x12	; 18
    355e:	92 e2       	ldi	r25, 0x22	; 34
    3560:	9f 93       	push	r25
    3562:	8f 93       	push	r24
    3564:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	71 c7       	rjmp	.+3810   	; 0x4454 <__stack+0x455>
			}
		}
	}
	else if(strncmp(cmdTemp,"?08",3)==0)
    3572:	43 e0       	ldi	r20, 0x03	; 3
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	6b e1       	ldi	r22, 0x1B	; 27
    3578:	72 e2       	ldi	r23, 0x22	; 34
    357a:	8d ea       	ldi	r24, 0xAD	; 173
    357c:	94 e2       	ldi	r25, 0x24	; 36
    357e:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3582:	89 2b       	or	r24, r25
    3584:	69 f5       	brne	.+90     	; 0x35e0 <_Z6cmdExev+0xbd8>
	{
		if(cmdTemp[3]=='0')//Read DistanceToGo
    3586:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    358a:	80 33       	cpi	r24, 0x30	; 48
    358c:	09 f0       	breq	.+2      	; 0x3590 <_Z6cmdExev+0xb88>
    358e:	62 c7       	rjmp	.+3780   	; 0x4454 <__stack+0x455>
		{
			ltoa(DistanceToGo[ax],temp,10);
    3590:	f1 01       	movw	r30, r2
    3592:	ee 0f       	add	r30, r30
    3594:	ff 1f       	adc	r31, r31
    3596:	ee 0f       	add	r30, r30
    3598:	ff 1f       	adc	r31, r31
    359a:	e8 5e       	subi	r30, 0xE8	; 232
    359c:	f8 4d       	sbci	r31, 0xD8	; 216
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	2a e0       	ldi	r18, 0x0A	; 10
    35a8:	48 e9       	ldi	r20, 0x98	; 152
    35aa:	54 e2       	ldi	r21, 0x24	; 36
    35ac:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <__ltoa_ncheck>
			if(EchoON) printf("!080%d\t%s\n\r",ax,temp);
    35b0:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    35b4:	88 23       	and	r24, r24
    35b6:	09 f4       	brne	.+2      	; 0x35ba <_Z6cmdExev+0xbb2>
    35b8:	4d c7       	rjmp	.+3738   	; 0x4454 <__stack+0x455>
    35ba:	88 e9       	ldi	r24, 0x98	; 152
    35bc:	94 e2       	ldi	r25, 0x24	; 36
    35be:	9f 93       	push	r25
    35c0:	8f 93       	push	r24
    35c2:	3f 92       	push	r3
    35c4:	2f 92       	push	r2
    35c6:	8f e1       	ldi	r24, 0x1F	; 31
    35c8:	92 e2       	ldi	r25, 0x22	; 34
    35ca:	9f 93       	push	r25
    35cc:	8f 93       	push	r24
    35ce:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	0f 90       	pop	r0
    35de:	3a c7       	rjmp	.+3700   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"?09",3)==0)
    35e0:	43 e0       	ldi	r20, 0x03	; 3
    35e2:	50 e0       	ldi	r21, 0x00	; 0
    35e4:	6b e2       	ldi	r22, 0x2B	; 43
    35e6:	72 e2       	ldi	r23, 0x22	; 34
    35e8:	8d ea       	ldi	r24, 0xAD	; 173
    35ea:	94 e2       	ldi	r25, 0x24	; 36
    35ec:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    35f0:	89 2b       	or	r24, r25
    35f2:	81 f5       	brne	.+96     	; 0x3654 <_Z6cmdExev+0xc4c>
	{
		if(cmdTemp[3]=='0')//Read Axis Position
    35f4:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    35f8:	80 33       	cpi	r24, 0x30	; 48
    35fa:	09 f0       	breq	.+2      	; 0x35fe <_Z6cmdExev+0xbf6>
    35fc:	2b c7       	rjmp	.+3670   	; 0x4454 <__stack+0x455>
		{
			ltoa(AxisPosition[ax],temp,10);
    35fe:	f1 01       	movw	r30, r2
    3600:	ee 0f       	add	r30, r30
    3602:	ff 1f       	adc	r31, r31
    3604:	ee 0f       	add	r30, r30
    3606:	ff 1f       	adc	r31, r31
    3608:	ec 5d       	subi	r30, 0xDC	; 220
    360a:	f8 4d       	sbci	r31, 0xD8	; 216
    360c:	60 81       	ld	r22, Z
    360e:	71 81       	ldd	r23, Z+1	; 0x01
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	2a e0       	ldi	r18, 0x0A	; 10
    3616:	48 e9       	ldi	r20, 0x98	; 152
    3618:	54 e2       	ldi	r21, 0x24	; 36
    361a:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <__ltoa_ncheck>
			sprintf(BufferSend,"!090%d\t%s\r\n",ax,temp);
    361e:	88 e9       	ldi	r24, 0x98	; 152
    3620:	94 e2       	ldi	r25, 0x24	; 36
    3622:	9f 93       	push	r25
    3624:	8f 93       	push	r24
    3626:	3f 92       	push	r3
    3628:	2f 92       	push	r2
    362a:	8f e2       	ldi	r24, 0x2F	; 47
    362c:	92 e2       	ldi	r25, 0x22	; 34
    362e:	9f 93       	push	r25
    3630:	8f 93       	push	r24
    3632:	89 e6       	ldi	r24, 0x69	; 105
    3634:	96 e2       	ldi	r25, 0x26	; 38
    3636:	9f 93       	push	r25
    3638:	8f 93       	push	r24
    363a:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
			Responsing=1;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3644:	e0 ea       	ldi	r30, 0xA0	; 160
    3646:	f6 e0       	ldi	r31, 0x06	; 6
    3648:	84 81       	ldd	r24, Z+4	; 0x04
    364a:	81 60       	ori	r24, 0x01	; 1
    364c:	84 83       	std	Z+4, r24	; 0x04
    364e:	cd bf       	out	0x3d, r28	; 61
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	00 c7       	rjmp	.+3584   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#10",3)==0)
    3654:	43 e0       	ldi	r20, 0x03	; 3
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	6b e3       	ldi	r22, 0x3B	; 59
    365a:	72 e2       	ldi	r23, 0x22	; 34
    365c:	8d ea       	ldi	r24, 0xAD	; 173
    365e:	94 e2       	ldi	r25, 0x24	; 36
    3660:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3664:	89 2b       	or	r24, r25
    3666:	b1 f5       	brne	.+108    	; 0x36d4 <_Z6cmdExev+0xccc>
	{
		if(!ProgramRun)//Clear JOG
    3668:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    366c:	81 11       	cpse	r24, r1
    366e:	f2 c6       	rjmp	.+3556   	; 0x4454 <__stack+0x455>
		{
			if(cmdTemp[3]=='0')
    3670:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3674:	80 33       	cpi	r24, 0x30	; 48
    3676:	09 f0       	breq	.+2      	; 0x367a <_Z6cmdExev+0xc72>
    3678:	ed c6       	rjmp	.+3546   	; 0x4454 <__stack+0x455>
			{
				DistanceToGo[ax] = 0;
    367a:	c1 01       	movw	r24, r2
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	fc 01       	movw	r30, r24
    3686:	e8 5e       	subi	r30, 0xE8	; 232
    3688:	f8 4d       	sbci	r31, 0xD8	; 216
    368a:	10 82       	st	Z, r1
    368c:	11 82       	std	Z+1, r1	; 0x01
    368e:	12 82       	std	Z+2, r1	; 0x02
    3690:	13 82       	std	Z+3, r1	; 0x03
				SetJog[ax] = AxisPosition[ax];
    3692:	fc 01       	movw	r30, r24
    3694:	e0 5d       	subi	r30, 0xD0	; 208
    3696:	f8 4d       	sbci	r31, 0xD8	; 216
    3698:	dc 01       	movw	r26, r24
    369a:	ac 5d       	subi	r26, 0xDC	; 220
    369c:	b8 4d       	sbci	r27, 0xD8	; 216
    369e:	8d 91       	ld	r24, X+
    36a0:	9d 91       	ld	r25, X+
    36a2:	0d 90       	ld	r0, X+
    36a4:	bc 91       	ld	r27, X
    36a6:	a0 2d       	mov	r26, r0
    36a8:	80 83       	st	Z, r24
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	a2 83       	std	Z+2, r26	; 0x02
    36ae:	b3 83       	std	Z+3, r27	; 0x03
				if(EchoON) printf("!100%d\n\r",ax);
    36b0:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    36b4:	88 23       	and	r24, r24
    36b6:	09 f4       	brne	.+2      	; 0x36ba <_Z6cmdExev+0xcb2>
    36b8:	cd c6       	rjmp	.+3482   	; 0x4454 <__stack+0x455>
    36ba:	3f 92       	push	r3
    36bc:	2f 92       	push	r2
    36be:	8f e3       	ldi	r24, 0x3F	; 63
    36c0:	92 e2       	ldi	r25, 0x22	; 34
    36c2:	9f 93       	push	r25
    36c4:	8f 93       	push	r24
    36c6:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	c0 c6       	rjmp	.+3456   	; 0x4454 <__stack+0x455>
			}
		}
	}
	else if(strncmp(cmdTemp,"#11",3)==0)
    36d4:	43 e0       	ldi	r20, 0x03	; 3
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	68 e4       	ldi	r22, 0x48	; 72
    36da:	72 e2       	ldi	r23, 0x22	; 34
    36dc:	8d ea       	ldi	r24, 0xAD	; 173
    36de:	94 e2       	ldi	r25, 0x24	; 36
    36e0:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    36e4:	89 2b       	or	r24, r25
    36e6:	09 f0       	breq	.+2      	; 0x36ea <_Z6cmdExev+0xce2>
    36e8:	41 c0       	rjmp	.+130    	; 0x376c <_Z6cmdExev+0xd64>
	{
		if (!ProgramRun)
    36ea:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    36ee:	81 11       	cpse	r24, r1
    36f0:	b1 c6       	rjmp	.+3426   	; 0x4454 <__stack+0x455>
		{
			while (IsAnyAxisMoving() == 1);
    36f2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    36f6:	81 30       	cpi	r24, 0x01	; 1
    36f8:	f1 f3       	breq	.-4      	; 0x36f6 <_Z6cmdExev+0xcee>
			if(cmdTemp[3]=='0')//Set AXIS Position
    36fa:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    36fe:	80 33       	cpi	r24, 0x30	; 48
    3700:	09 f0       	breq	.+2      	; 0x3704 <_Z6cmdExev+0xcfc>
    3702:	a8 c6       	rjmp	.+3408   	; 0x4454 <__stack+0x455>
    3704:	e2 eb       	ldi	r30, 0xB2	; 178
    3706:	f4 e2       	ldi	r31, 0x24	; 36
    3708:	a8 e9       	ldi	r26, 0x98	; 152
    370a:	b4 e2       	ldi	r27, 0x24	; 36
    370c:	8c eb       	ldi	r24, 0xBC	; 188
    370e:	94 e2       	ldi	r25, 0x24	; 36
			{
				for(k=0;k<10;k++)
				{
					temp[k]=cmdTemp[k+5];
    3710:	21 91       	ld	r18, Z+
    3712:	2d 93       	st	X+, r18
		if (!ProgramRun)
		{
			while (IsAnyAxisMoving() == 1);
			if(cmdTemp[3]=='0')//Set AXIS Position
			{
				for(k=0;k<10;k++)
    3714:	8e 17       	cp	r24, r30
    3716:	9f 07       	cpc	r25, r31
    3718:	d9 f7       	brne	.-10     	; 0x3710 <_Z6cmdExev+0xd08>
    371a:	8a e0       	ldi	r24, 0x0A	; 10
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	80 93 c2 24 	sts	0x24C2, r24	; 0x8024c2 <k>
    3722:	90 93 c3 24 	sts	0x24C3, r25	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[10]=0;
    3726:	10 92 a2 24 	sts	0x24A2, r1	; 0x8024a2 <temp+0xa>
				AxisPosition[ax]=atol(temp);
    372a:	88 e9       	ldi	r24, 0x98	; 152
    372c:	94 e2       	ldi	r25, 0x24	; 36
    372e:	0e 94 46 2b 	call	0x568c	; 0x568c <atol>
    3732:	f1 01       	movw	r30, r2
    3734:	ee 0f       	add	r30, r30
    3736:	ff 1f       	adc	r31, r31
    3738:	ee 0f       	add	r30, r30
    373a:	ff 1f       	adc	r31, r31
    373c:	ec 5d       	subi	r30, 0xDC	; 220
    373e:	f8 4d       	sbci	r31, 0xD8	; 216
    3740:	60 83       	st	Z, r22
    3742:	71 83       	std	Z+1, r23	; 0x01
    3744:	82 83       	std	Z+2, r24	; 0x02
    3746:	93 83       	std	Z+3, r25	; 0x03
				if(EchoON) printf("!110%d\n\r",ax);
    3748:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    374c:	88 23       	and	r24, r24
    374e:	09 f4       	brne	.+2      	; 0x3752 <_Z6cmdExev+0xd4a>
    3750:	81 c6       	rjmp	.+3330   	; 0x4454 <__stack+0x455>
    3752:	3f 92       	push	r3
    3754:	2f 92       	push	r2
    3756:	8c e4       	ldi	r24, 0x4C	; 76
    3758:	92 e2       	ldi	r25, 0x22	; 34
    375a:	9f 93       	push	r25
    375c:	8f 93       	push	r24
    375e:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	74 c6       	rjmp	.+3304   	; 0x4454 <__stack+0x455>
			}
		}
	}
	else if(strncmp(cmdTemp,"#12",3)==0)
    376c:	43 e0       	ldi	r20, 0x03	; 3
    376e:	50 e0       	ldi	r21, 0x00	; 0
    3770:	65 e5       	ldi	r22, 0x55	; 85
    3772:	72 e2       	ldi	r23, 0x22	; 34
    3774:	8d ea       	ldi	r24, 0xAD	; 173
    3776:	94 e2       	ldi	r25, 0x24	; 36
    3778:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    377c:	89 2b       	or	r24, r25
    377e:	49 f4       	brne	.+18     	; 0x3792 <_Z6cmdExev+0xd8a>
	{//Go To REF
		if (!ProgramRun)
    3780:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    3784:	81 11       	cpse	r24, r1
    3786:	66 c6       	rjmp	.+3276   	; 0x4454 <__stack+0x455>
		{
			while (IsAnyAxisMoving() == 1);
    3788:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    378c:	81 30       	cpi	r24, 0x01	; 1
    378e:	f1 f3       	breq	.-4      	; 0x378c <_Z6cmdExev+0xd84>
    3790:	61 c6       	rjmp	.+3266   	; 0x4454 <__stack+0x455>
			{
				// TODO: It should be implemented for going to reference
			}
		}
	}
	else if(strncmp(cmdTemp,"#13",3)==0)
    3792:	43 e0       	ldi	r20, 0x03	; 3
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	69 e5       	ldi	r22, 0x59	; 89
    3798:	72 e2       	ldi	r23, 0x22	; 34
    379a:	8d ea       	ldi	r24, 0xAD	; 173
    379c:	94 e2       	ldi	r25, 0x24	; 36
    379e:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    37a2:	8c 01       	movw	r16, r24
    37a4:	89 2b       	or	r24, r25
    37a6:	09 f0       	breq	.+2      	; 0x37aa <_Z6cmdExev+0xda2>
    37a8:	56 c0       	rjmp	.+172    	; 0x3856 <_Z6cmdExev+0xe4e>
	{// Set Speed
		if (!ProgramRun & !IsAnyAxisMoving())
    37aa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    37ae:	91 e0       	ldi	r25, 0x01	; 1
    37b0:	20 91 ca 24 	lds	r18, 0x24CA	; 0x8024ca <ProgramRun>
    37b4:	21 11       	cpse	r18, r1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	99 23       	and	r25, r25
    37ba:	09 f4       	brne	.+2      	; 0x37be <_Z6cmdExev+0xdb6>
    37bc:	4b c6       	rjmp	.+3222   	; 0x4454 <__stack+0x455>
    37be:	91 e0       	ldi	r25, 0x01	; 1
    37c0:	81 11       	cpse	r24, r1
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	99 23       	and	r25, r25
    37c6:	09 f4       	brne	.+2      	; 0x37ca <_Z6cmdExev+0xdc2>
    37c8:	45 c6       	rjmp	.+3210   	; 0x4454 <__stack+0x455>
		{
			if(cmdTemp[3]=='0')
    37ca:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    37ce:	80 33       	cpi	r24, 0x30	; 48
    37d0:	09 f0       	breq	.+2      	; 0x37d4 <_Z6cmdExev+0xdcc>
    37d2:	40 c6       	rjmp	.+3200   	; 0x4454 <__stack+0x455>
    37d4:	a2 eb       	ldi	r26, 0xB2	; 178
    37d6:	b4 e2       	ldi	r27, 0x24	; 36
    37d8:	e8 e9       	ldi	r30, 0x98	; 152
    37da:	f4 e2       	ldi	r31, 0x24	; 36
			{
				for(k=0;k<10;k++)
				{
					temp[k]=cmdTemp[k+5];
    37dc:	8d 91       	ld	r24, X+
    37de:	81 93       	st	Z+, r24
	{// Set Speed
		if (!ProgramRun & !IsAnyAxisMoving())
		{
			if(cmdTemp[3]=='0')
			{
				for(k=0;k<10;k++)
    37e0:	0f 5f       	subi	r16, 0xFF	; 255
    37e2:	1f 4f       	sbci	r17, 0xFF	; 255
    37e4:	0a 30       	cpi	r16, 0x0A	; 10
    37e6:	11 05       	cpc	r17, r1
    37e8:	cc f3       	brlt	.-14     	; 0x37dc <_Z6cmdExev+0xdd4>
    37ea:	00 93 c2 24 	sts	0x24C2, r16	; 0x8024c2 <k>
    37ee:	10 93 c3 24 	sts	0x24C3, r17	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[10]=0;
    37f2:	08 e9       	ldi	r16, 0x98	; 152
    37f4:	14 e2       	ldi	r17, 0x24	; 36
    37f6:	d8 01       	movw	r26, r16
    37f8:	1a 96       	adiw	r26, 0x0a	; 10
    37fa:	1c 92       	st	X, r1
				SetSpeed[ax]=atof(temp);
    37fc:	c8 01       	movw	r24, r16
    37fe:	0e 94 42 2b 	call	0x5684	; 0x5684 <atof>
    3802:	91 01       	movw	r18, r2
    3804:	22 0f       	add	r18, r18
    3806:	33 1f       	adc	r19, r19
    3808:	22 0f       	add	r18, r18
    380a:	33 1f       	adc	r19, r19
    380c:	f9 01       	movw	r30, r18
    380e:	e4 5f       	subi	r30, 0xF4	; 244
    3810:	f8 4d       	sbci	r31, 0xD8	; 216
    3812:	7f 01       	movw	r14, r30
    3814:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    3818:	d7 01       	movw	r26, r14
    381a:	6d 93       	st	X+, r22
    381c:	7d 93       	st	X+, r23
    381e:	8d 93       	st	X+, r24
    3820:	9c 93       	st	X, r25
    3822:	13 97       	sbiw	r26, 0x03	; 3
				sprintf(BufferSend,"!130%d\t%s\r\n",ax,temp);
    3824:	1f 93       	push	r17
    3826:	0f 93       	push	r16
    3828:	3f 92       	push	r3
    382a:	2f 92       	push	r2
    382c:	8d e5       	ldi	r24, 0x5D	; 93
    382e:	92 e2       	ldi	r25, 0x22	; 34
    3830:	9f 93       	push	r25
    3832:	8f 93       	push	r24
    3834:	89 e6       	ldi	r24, 0x69	; 105
    3836:	96 e2       	ldi	r25, 0x26	; 38
    3838:	9f 93       	push	r25
    383a:	8f 93       	push	r24
    383c:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing=1;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    3846:	e0 ea       	ldi	r30, 0xA0	; 160
    3848:	f6 e0       	ldi	r31, 0x06	; 6
    384a:	84 81       	ldd	r24, Z+4	; 0x04
    384c:	81 60       	ori	r24, 0x01	; 1
    384e:	84 83       	std	Z+4, r24	; 0x04
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	ff c5       	rjmp	.+3070   	; 0x4454 <__stack+0x455>
			}
		}
	}
	else if(strncmp(cmdTemp,"?14",3)==0)
    3856:	43 e0       	ldi	r20, 0x03	; 3
    3858:	50 e0       	ldi	r21, 0x00	; 0
    385a:	69 e6       	ldi	r22, 0x69	; 105
    385c:	72 e2       	ldi	r23, 0x22	; 34
    385e:	8d ea       	ldi	r24, 0xAD	; 173
    3860:	94 e2       	ldi	r25, 0x24	; 36
    3862:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3866:	89 2b       	or	r24, r25
    3868:	f9 f4       	brne	.+62     	; 0x38a8 <_Z6cmdExev+0xea0>
	{//AxisIsMoving
		if(cmdTemp[3]=='0')
    386a:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    386e:	80 33       	cpi	r24, 0x30	; 48
    3870:	09 f0       	breq	.+2      	; 0x3874 <_Z6cmdExev+0xe6c>
    3872:	f0 c5       	rjmp	.+3040   	; 0x4454 <__stack+0x455>
		{
			if(EchoON) printf("!140%d\t%u\n\r",ax,AxisIsMoving[ax]);
    3874:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    3878:	88 23       	and	r24, r24
    387a:	09 f4       	brne	.+2      	; 0x387e <_Z6cmdExev+0xe76>
    387c:	eb c5       	rjmp	.+3030   	; 0x4454 <__stack+0x455>
    387e:	f1 01       	movw	r30, r2
    3880:	e2 51       	subi	r30, 0x12	; 18
    3882:	f9 4d       	sbci	r31, 0xD9	; 217
    3884:	80 81       	ld	r24, Z
    3886:	1f 92       	push	r1
    3888:	8f 93       	push	r24
    388a:	3f 92       	push	r3
    388c:	2f 92       	push	r2
    388e:	8d e6       	ldi	r24, 0x6D	; 109
    3890:	92 e2       	ldi	r25, 0x22	; 34
    3892:	9f 93       	push	r25
    3894:	8f 93       	push	r24
    3896:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	d6 c5       	rjmp	.+2988   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"?15",3)==0)
    38a8:	43 e0       	ldi	r20, 0x03	; 3
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	69 e7       	ldi	r22, 0x79	; 121
    38ae:	72 e2       	ldi	r23, 0x22	; 34
    38b0:	8d ea       	ldi	r24, 0xAD	; 173
    38b2:	94 e2       	ldi	r25, 0x24	; 36
    38b4:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    38b8:	89 2b       	or	r24, r25
    38ba:	21 f5       	brne	.+72     	; 0x3904 <_Z6cmdExev+0xefc>
	{//Read Axis Speed
		if(cmdTemp[3]=='0')
    38bc:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    38c0:	80 33       	cpi	r24, 0x30	; 48
    38c2:	09 f0       	breq	.+2      	; 0x38c6 <_Z6cmdExev+0xebe>
    38c4:	c7 c5       	rjmp	.+2958   	; 0x4454 <__stack+0x455>
		{
			if(EchoON) printf("!150%d\t%lu",ax,SetSpeed[ax]);
    38c6:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    38ca:	88 23       	and	r24, r24
    38cc:	09 f4       	brne	.+2      	; 0x38d0 <_Z6cmdExev+0xec8>
    38ce:	c2 c5       	rjmp	.+2948   	; 0x4454 <__stack+0x455>
    38d0:	f1 01       	movw	r30, r2
    38d2:	ee 0f       	add	r30, r30
    38d4:	ff 1f       	adc	r31, r31
    38d6:	ee 0f       	add	r30, r30
    38d8:	ff 1f       	adc	r31, r31
    38da:	e4 5f       	subi	r30, 0xF4	; 244
    38dc:	f8 4d       	sbci	r31, 0xD8	; 216
    38de:	83 81       	ldd	r24, Z+3	; 0x03
    38e0:	8f 93       	push	r24
    38e2:	82 81       	ldd	r24, Z+2	; 0x02
    38e4:	8f 93       	push	r24
    38e6:	81 81       	ldd	r24, Z+1	; 0x01
    38e8:	8f 93       	push	r24
    38ea:	80 81       	ld	r24, Z
    38ec:	8f 93       	push	r24
    38ee:	3f 92       	push	r3
    38f0:	2f 92       	push	r2
    38f2:	8d e7       	ldi	r24, 0x7D	; 125
    38f4:	92 e2       	ldi	r25, 0x22	; 34
    38f6:	9f 93       	push	r25
    38f8:	8f 93       	push	r24
    38fa:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	a8 c5       	rjmp	.+2896   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#16",3)==0)
    3904:	43 e0       	ldi	r20, 0x03	; 3
    3906:	50 e0       	ldi	r21, 0x00	; 0
    3908:	68 e8       	ldi	r22, 0x88	; 136
    390a:	72 e2       	ldi	r23, 0x22	; 34
    390c:	8d ea       	ldi	r24, 0xAD	; 173
    390e:	94 e2       	ldi	r25, 0x24	; 36
    3910:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3914:	8c 01       	movw	r16, r24
    3916:	89 2b       	or	r24, r25
    3918:	09 f0       	breq	.+2      	; 0x391c <_Z6cmdExev+0xf14>
    391a:	56 c0       	rjmp	.+172    	; 0x39c8 <_Z6cmdExev+0xfc0>
	{// Set ACC
		if (!ProgramRun & !IsAnyAxisMoving())
    391c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    3920:	91 e0       	ldi	r25, 0x01	; 1
    3922:	20 91 ca 24 	lds	r18, 0x24CA	; 0x8024ca <ProgramRun>
    3926:	21 11       	cpse	r18, r1
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	99 23       	and	r25, r25
    392c:	09 f4       	brne	.+2      	; 0x3930 <_Z6cmdExev+0xf28>
    392e:	92 c5       	rjmp	.+2852   	; 0x4454 <__stack+0x455>
    3930:	91 e0       	ldi	r25, 0x01	; 1
    3932:	81 11       	cpse	r24, r1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	99 23       	and	r25, r25
    3938:	09 f4       	brne	.+2      	; 0x393c <_Z6cmdExev+0xf34>
    393a:	8c c5       	rjmp	.+2840   	; 0x4454 <__stack+0x455>
		{
			if(cmdTemp[3]=='0')
    393c:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3940:	80 33       	cpi	r24, 0x30	; 48
    3942:	09 f0       	breq	.+2      	; 0x3946 <_Z6cmdExev+0xf3e>
    3944:	87 c5       	rjmp	.+2830   	; 0x4454 <__stack+0x455>
    3946:	a2 eb       	ldi	r26, 0xB2	; 178
    3948:	b4 e2       	ldi	r27, 0x24	; 36
    394a:	e8 e9       	ldi	r30, 0x98	; 152
    394c:	f4 e2       	ldi	r31, 0x24	; 36
			{
				for(k=0;k<10;k++)
				{
					temp[k]=cmdTemp[k+5];
    394e:	8d 91       	ld	r24, X+
    3950:	81 93       	st	Z+, r24
	{// Set ACC
		if (!ProgramRun & !IsAnyAxisMoving())
		{
			if(cmdTemp[3]=='0')
			{
				for(k=0;k<10;k++)
    3952:	0f 5f       	subi	r16, 0xFF	; 255
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	0a 30       	cpi	r16, 0x0A	; 10
    3958:	11 05       	cpc	r17, r1
    395a:	cc f3       	brlt	.-14     	; 0x394e <_Z6cmdExev+0xf46>
    395c:	00 93 c2 24 	sts	0x24C2, r16	; 0x8024c2 <k>
    3960:	10 93 c3 24 	sts	0x24C3, r17	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[10]=0;
    3964:	08 e9       	ldi	r16, 0x98	; 152
    3966:	14 e2       	ldi	r17, 0x24	; 36
    3968:	d8 01       	movw	r26, r16
    396a:	1a 96       	adiw	r26, 0x0a	; 10
    396c:	1c 92       	st	X, r1
				AxACC[ax]=atof(temp);
    396e:	c8 01       	movw	r24, r16
    3970:	0e 94 42 2b 	call	0x5684	; 0x5684 <atof>
    3974:	91 01       	movw	r18, r2
    3976:	22 0f       	add	r18, r18
    3978:	33 1f       	adc	r19, r19
    397a:	22 0f       	add	r18, r18
    397c:	33 1f       	adc	r19, r19
    397e:	f9 01       	movw	r30, r18
    3980:	e0 50       	subi	r30, 0x00	; 0
    3982:	f9 4d       	sbci	r31, 0xD9	; 217
    3984:	7f 01       	movw	r14, r30
    3986:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    398a:	d7 01       	movw	r26, r14
    398c:	6d 93       	st	X+, r22
    398e:	7d 93       	st	X+, r23
    3990:	8d 93       	st	X+, r24
    3992:	9c 93       	st	X, r25
    3994:	13 97       	sbiw	r26, 0x03	; 3
				sprintf(BufferSend,"!160%d\t%s\r\n",ax,temp);
    3996:	1f 93       	push	r17
    3998:	0f 93       	push	r16
    399a:	3f 92       	push	r3
    399c:	2f 92       	push	r2
    399e:	8c e8       	ldi	r24, 0x8C	; 140
    39a0:	92 e2       	ldi	r25, 0x22	; 34
    39a2:	9f 93       	push	r25
    39a4:	8f 93       	push	r24
    39a6:	89 e6       	ldi	r24, 0x69	; 105
    39a8:	96 e2       	ldi	r25, 0x26	; 38
    39aa:	9f 93       	push	r25
    39ac:	8f 93       	push	r24
    39ae:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing=1;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    39b8:	e0 ea       	ldi	r30, 0xA0	; 160
    39ba:	f6 e0       	ldi	r31, 0x06	; 6
    39bc:	84 81       	ldd	r24, Z+4	; 0x04
    39be:	81 60       	ori	r24, 0x01	; 1
    39c0:	84 83       	std	Z+4, r24	; 0x04
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	46 c5       	rjmp	.+2700   	; 0x4454 <__stack+0x455>

			}
		}
	}
	else if(strncmp(cmdTemp,"#17",3)==0)
    39c8:	43 e0       	ldi	r20, 0x03	; 3
    39ca:	50 e0       	ldi	r21, 0x00	; 0
    39cc:	68 e9       	ldi	r22, 0x98	; 152
    39ce:	72 e2       	ldi	r23, 0x22	; 34
    39d0:	8d ea       	ldi	r24, 0xAD	; 173
    39d2:	94 e2       	ldi	r25, 0x24	; 36
    39d4:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    39d8:	8c 01       	movw	r16, r24
    39da:	89 2b       	or	r24, r25
    39dc:	09 f0       	breq	.+2      	; 0x39e0 <_Z6cmdExev+0xfd8>
    39de:	56 c0       	rjmp	.+172    	; 0x3a8c <_Z6cmdExev+0x1084>
	{// Set DEC
		if (!ProgramRun & !IsAnyAxisMoving())
    39e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    39e4:	91 e0       	ldi	r25, 0x01	; 1
    39e6:	20 91 ca 24 	lds	r18, 0x24CA	; 0x8024ca <ProgramRun>
    39ea:	21 11       	cpse	r18, r1
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	99 23       	and	r25, r25
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <_Z6cmdExev+0xfec>
    39f2:	30 c5       	rjmp	.+2656   	; 0x4454 <__stack+0x455>
    39f4:	91 e0       	ldi	r25, 0x01	; 1
    39f6:	81 11       	cpse	r24, r1
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	99 23       	and	r25, r25
    39fc:	09 f4       	brne	.+2      	; 0x3a00 <_Z6cmdExev+0xff8>
    39fe:	2a c5       	rjmp	.+2644   	; 0x4454 <__stack+0x455>
		{
			if(cmdTemp[3]=='0')
    3a00:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3a04:	80 33       	cpi	r24, 0x30	; 48
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <_Z6cmdExev+0x1002>
    3a08:	25 c5       	rjmp	.+2634   	; 0x4454 <__stack+0x455>
    3a0a:	a2 eb       	ldi	r26, 0xB2	; 178
    3a0c:	b4 e2       	ldi	r27, 0x24	; 36
    3a0e:	e8 e9       	ldi	r30, 0x98	; 152
    3a10:	f4 e2       	ldi	r31, 0x24	; 36
			{
				for(k=0;k<10;k++)
				{
					temp[k]=cmdTemp[k+5];
    3a12:	8d 91       	ld	r24, X+
    3a14:	81 93       	st	Z+, r24
	{// Set DEC
		if (!ProgramRun & !IsAnyAxisMoving())
		{
			if(cmdTemp[3]=='0')
			{
				for(k=0;k<10;k++)
    3a16:	0f 5f       	subi	r16, 0xFF	; 255
    3a18:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1a:	0a 30       	cpi	r16, 0x0A	; 10
    3a1c:	11 05       	cpc	r17, r1
    3a1e:	cc f3       	brlt	.-14     	; 0x3a12 <_Z6cmdExev+0x100a>
    3a20:	00 93 c2 24 	sts	0x24C2, r16	; 0x8024c2 <k>
    3a24:	10 93 c3 24 	sts	0x24C3, r17	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[10]=0;
    3a28:	08 e9       	ldi	r16, 0x98	; 152
    3a2a:	14 e2       	ldi	r17, 0x24	; 36
    3a2c:	d8 01       	movw	r26, r16
    3a2e:	1a 96       	adiw	r26, 0x0a	; 10
    3a30:	1c 92       	st	X, r1
				AxDEC[ax]=atof(temp);
    3a32:	c8 01       	movw	r24, r16
    3a34:	0e 94 42 2b 	call	0x5684	; 0x5684 <atof>
    3a38:	91 01       	movw	r18, r2
    3a3a:	22 0f       	add	r18, r18
    3a3c:	33 1f       	adc	r19, r19
    3a3e:	22 0f       	add	r18, r18
    3a40:	33 1f       	adc	r19, r19
    3a42:	f9 01       	movw	r30, r18
    3a44:	ec 50       	subi	r30, 0x0C	; 12
    3a46:	f9 4d       	sbci	r31, 0xD9	; 217
    3a48:	7f 01       	movw	r14, r30
    3a4a:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    3a4e:	d7 01       	movw	r26, r14
    3a50:	6d 93       	st	X+, r22
    3a52:	7d 93       	st	X+, r23
    3a54:	8d 93       	st	X+, r24
    3a56:	9c 93       	st	X, r25
    3a58:	13 97       	sbiw	r26, 0x03	; 3
				sprintf(BufferSend,"!170%d\t%s\r\n",ax,temp);
    3a5a:	1f 93       	push	r17
    3a5c:	0f 93       	push	r16
    3a5e:	3f 92       	push	r3
    3a60:	2f 92       	push	r2
    3a62:	8c e9       	ldi	r24, 0x9C	; 156
    3a64:	92 e2       	ldi	r25, 0x22	; 34
    3a66:	9f 93       	push	r25
    3a68:	8f 93       	push	r24
    3a6a:	89 e6       	ldi	r24, 0x69	; 105
    3a6c:	96 e2       	ldi	r25, 0x26	; 38
    3a6e:	9f 93       	push	r25
    3a70:	8f 93       	push	r24
    3a72:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
				Responsing=1;
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    3a7c:	e0 ea       	ldi	r30, 0xA0	; 160
    3a7e:	f6 e0       	ldi	r31, 0x06	; 6
    3a80:	84 81       	ldd	r24, Z+4	; 0x04
    3a82:	81 60       	ori	r24, 0x01	; 1
    3a84:	84 83       	std	Z+4, r24	; 0x04
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	de bf       	out	0x3e, r29	; 62
    3a8a:	e4 c4       	rjmp	.+2504   	; 0x4454 <__stack+0x455>
			}
		}
	}
	else if(strncmp(cmdTemp,"#1800",5)==0)
    3a8c:	45 e0       	ldi	r20, 0x05	; 5
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	68 ea       	ldi	r22, 0xA8	; 168
    3a92:	72 e2       	ldi	r23, 0x22	; 34
    3a94:	8d ea       	ldi	r24, 0xAD	; 173
    3a96:	94 e2       	ldi	r25, 0x24	; 36
    3a98:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3a9c:	89 2b       	or	r24, r25
    3a9e:	09 f0       	breq	.+2      	; 0x3aa2 <_Z6cmdExev+0x109a>
    3aa0:	b5 c0       	rjmp	.+362    	; 0x3c0c <_Z6cmdExev+0x1204>
	{//Go To Refrence
		if (!ProgramRun)
    3aa2:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    3aa6:	81 11       	cpse	r24, r1
    3aa8:	d5 c4       	rjmp	.+2474   	; 0x4454 <__stack+0x455>
		{
			while (IsAnyAxisMoving() == 1);
    3aaa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    3aae:	81 30       	cpi	r24, 0x01	; 1
    3ab0:	f1 f3       	breq	.-4      	; 0x3aae <_Z6cmdExev+0x10a6>
			printf("RefDir : %u\r\n",Axes[ax].RefrenceDir);
    3ab2:	8b e2       	ldi	r24, 0x2B	; 43
    3ab4:	82 9d       	mul	r24, r2
    3ab6:	f0 01       	movw	r30, r0
    3ab8:	83 9d       	mul	r24, r3
    3aba:	f0 0d       	add	r31, r0
    3abc:	11 24       	eor	r1, r1
    3abe:	e5 53       	subi	r30, 0x35	; 53
    3ac0:	fb 4d       	sbci	r31, 0xDB	; 219
    3ac2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ac4:	1f 92       	push	r1
    3ac6:	8f 93       	push	r24
    3ac8:	8e ea       	ldi	r24, 0xAE	; 174
    3aca:	92 e2       	ldi	r25, 0x22	; 34
    3acc:	9f 93       	push	r25
    3ace:	8f 93       	push	r24
    3ad0:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    3ad4:	0f 2e       	mov	r0, r31
    3ad6:	fb ec       	ldi	r31, 0xCB	; 203
    3ad8:	ef 2e       	mov	r14, r31
    3ada:	f4 e2       	ldi	r31, 0x24	; 36
    3adc:	ff 2e       	mov	r15, r31
    3ade:	f0 2d       	mov	r31, r0
    3ae0:	0f 2e       	mov	r0, r31
    3ae2:	f2 ee       	ldi	r31, 0xE2	; 226
    3ae4:	af 2e       	mov	r10, r31
    3ae6:	f6 e2       	ldi	r31, 0x26	; 38
    3ae8:	bf 2e       	mov	r11, r31
    3aea:	f0 2d       	mov	r31, r0
    3aec:	0f 2e       	mov	r0, r31
    3aee:	f8 e1       	ldi	r31, 0x18	; 24
    3af0:	cf 2e       	mov	r12, r31
    3af2:	f7 e2       	ldi	r31, 0x27	; 39
    3af4:	df 2e       	mov	r13, r31
    3af6:	f0 2d       	mov	r31, r0
    3af8:	0f 2e       	mov	r0, r31
    3afa:	f4 e2       	ldi	r31, 0x24	; 36
    3afc:	8f 2e       	mov	r8, r31
    3afe:	f7 e2       	ldi	r31, 0x27	; 39
    3b00:	9f 2e       	mov	r9, r31
    3b02:	f0 2d       	mov	r31, r0
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
			for(int gx = 0 ; gx < AxisNumber ; gx++)
    3b0c:	19 82       	std	Y+1, r1	; 0x01
    3b0e:	1a 82       	std	Y+2, r1	; 0x02
			{
				SetAxisDir(gx,Axes[gx].RefrenceDir);
				Ma[gx] = 1000;
    3b10:	08 ee       	ldi	r16, 0xE8	; 232
    3b12:	13 e0       	ldi	r17, 0x03	; 3
				DistanceToGo[gx] = 0x7FFFFFFF;
    3b14:	0f 2e       	mov	r0, r31
    3b16:	44 24       	eor	r4, r4
    3b18:	4a 94       	dec	r4
    3b1a:	54 2c       	mov	r5, r4
    3b1c:	64 2c       	mov	r6, r4
    3b1e:	ff e7       	ldi	r31, 0x7F	; 127
    3b20:	7f 2e       	mov	r7, r31
    3b22:	f0 2d       	mov	r31, r0
		{
			while (IsAnyAxisMoving() == 1);
			printf("RefDir : %u\r\n",Axes[ax].RefrenceDir);
			for(int gx = 0 ; gx < AxisNumber ; gx++)
			{
				SetAxisDir(gx,Axes[gx].RefrenceDir);
    3b24:	d7 01       	movw	r26, r14
    3b26:	5c 96       	adiw	r26, 0x1c	; 28
    3b28:	6c 91       	ld	r22, X
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2e:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				Ma[gx] = 1000;
    3b32:	f5 01       	movw	r30, r10
    3b34:	01 93       	st	Z+, r16
    3b36:	11 93       	st	Z+, r17
    3b38:	5f 01       	movw	r10, r30
				DistanceToGo[gx] = 0x7FFFFFFF;
    3b3a:	d6 01       	movw	r26, r12
    3b3c:	4d 92       	st	X+, r4
    3b3e:	5d 92       	st	X+, r5
    3b40:	6d 92       	st	X+, r6
    3b42:	7d 92       	st	X+, r7
    3b44:	6d 01       	movw	r12, r26
				AxisPosition[gx] = 0;
    3b46:	f4 01       	movw	r30, r8
    3b48:	11 92       	st	Z+, r1
    3b4a:	11 92       	st	Z+, r1
    3b4c:	11 92       	st	Z+, r1
    3b4e:	11 92       	st	Z+, r1
    3b50:	4f 01       	movw	r8, r30
	{//Go To Refrence
		if (!ProgramRun)
		{
			while (IsAnyAxisMoving() == 1);
			printf("RefDir : %u\r\n",Axes[ax].RefrenceDir);
			for(int gx = 0 ; gx < AxisNumber ; gx++)
    3b52:	29 81       	ldd	r18, Y+1	; 0x01
    3b54:	3a 81       	ldd	r19, Y+2	; 0x02
    3b56:	2f 5f       	subi	r18, 0xFF	; 255
    3b58:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5a:	29 83       	std	Y+1, r18	; 0x01
    3b5c:	3a 83       	std	Y+2, r19	; 0x02
    3b5e:	3b e2       	ldi	r19, 0x2B	; 43
    3b60:	e3 0e       	add	r14, r19
    3b62:	f1 1c       	adc	r15, r1
    3b64:	49 81       	ldd	r20, Y+1	; 0x01
    3b66:	5a 81       	ldd	r21, Y+2	; 0x02
    3b68:	43 30       	cpi	r20, 0x03	; 3
    3b6a:	51 05       	cpc	r21, r1
    3b6c:	d9 f6       	brne	.-74     	; 0x3b24 <_Z6cmdExev+0x111c>
				SetAxisDir(gx,Axes[gx].RefrenceDir);
				Ma[gx] = 1000;
				DistanceToGo[gx] = 0x7FFFFFFF;
				AxisPosition[gx] = 0;
			}
			MaxSpeed=8000;
    3b6e:	80 e4       	ldi	r24, 0x40	; 64
    3b70:	9f e1       	ldi	r25, 0x1F	; 31
    3b72:	a0 e0       	ldi	r26, 0x00	; 0
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    3b7a:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    3b7e:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    3b82:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			
			CurSpeedFrq = MaxSpeed;
    3b86:	80 93 77 24 	sts	0x2477, r24	; 0x802477 <CurSpeedFrq>
    3b8a:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <CurSpeedFrq+0x1>
    3b8e:	a0 93 79 24 	sts	0x2479, r26	; 0x802479 <CurSpeedFrq+0x2>
    3b92:	b0 93 7a 24 	sts	0x247A, r27	; 0x80247a <CurSpeedFrq+0x3>
			ACC = 0;
    3b96:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
			DEC = 0;
    3b9a:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
			TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	a0 e0       	ldi	r26, 0x00	; 0
    3ba4:	b0 e4       	ldi	r27, 0x40	; 64
    3ba6:	80 93 c6 24 	sts	0x24C6, r24	; 0x8024c6 <TimerMainPeriod>
    3baa:	90 93 c7 24 	sts	0x24C7, r25	; 0x8024c7 <TimerMainPeriod+0x1>
    3bae:	a0 93 c8 24 	sts	0x24C8, r26	; 0x8024c8 <TimerMainPeriod+0x2>
    3bb2:	b0 93 c9 24 	sts	0x24C9, r27	; 0x8024c9 <TimerMainPeriod+0x3>
			RefCmd=1;
    3bb6:	51 e0       	ldi	r21, 0x01	; 1
    3bb8:	50 93 68 24 	sts	0x2468, r21	; 0x802468 <RefCmd>
			
			tcc0_init();
    3bbc:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			
			TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	4a e7       	ldi	r20, 0x7A	; 122
    3bc6:	54 e4       	ldi	r21, 0x44	; 68
    3bc8:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    3bcc:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    3bd0:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    3bd4:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    3bd8:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    3bdc:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    3be0:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3be4:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			sprintf(BufferSend,"!1800\r\n");
    3be8:	88 e0       	ldi	r24, 0x08	; 8
    3bea:	ec eb       	ldi	r30, 0xBC	; 188
    3bec:	f2 e2       	ldi	r31, 0x22	; 34
    3bee:	a9 e6       	ldi	r26, 0x69	; 105
    3bf0:	b6 e2       	ldi	r27, 0x26	; 38
    3bf2:	01 90       	ld	r0, Z+
    3bf4:	0d 92       	st	X+, r0
    3bf6:	8a 95       	dec	r24
    3bf8:	e1 f7       	brne	.-8      	; 0x3bf2 <_Z6cmdExev+0x11ea>
			Responsing=1;
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3c00:	e0 ea       	ldi	r30, 0xA0	; 160
    3c02:	f6 e0       	ldi	r31, 0x06	; 6
    3c04:	84 81       	ldd	r24, Z+4	; 0x04
    3c06:	81 60       	ori	r24, 0x01	; 1
    3c08:	84 83       	std	Z+4, r24	; 0x04
    3c0a:	24 c4       	rjmp	.+2120   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#19",3)==0)
    3c0c:	43 e0       	ldi	r20, 0x03	; 3
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	64 ec       	ldi	r22, 0xC4	; 196
    3c12:	72 e2       	ldi	r23, 0x22	; 34
    3c14:	8d ea       	ldi	r24, 0xAD	; 173
    3c16:	94 e2       	ldi	r25, 0x24	; 36
    3c18:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3c1c:	89 2b       	or	r24, r25
    3c1e:	21 f5       	brne	.+72     	; 0x3c68 <_Z6cmdExev+0x1260>
	{
		if(cmdTemp[3]=='0') //Reset Reference Direction
    3c20:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3c24:	80 33       	cpi	r24, 0x30	; 48
    3c26:	09 f0       	breq	.+2      	; 0x3c2a <_Z6cmdExev+0x1222>
    3c28:	15 c4       	rjmp	.+2090   	; 0x4454 <__stack+0x455>
		{
			RefDIR[ax] = 0;
    3c2a:	f1 01       	movw	r30, r2
    3c2c:	ef 50       	subi	r30, 0x0F	; 15
    3c2e:	f9 4d       	sbci	r31, 0xD9	; 217
    3c30:	10 82       	st	Z, r1
			sprintf(BufferSend,"!190%d\r\n",ax);
    3c32:	3f 92       	push	r3
    3c34:	2f 92       	push	r2
    3c36:	88 ec       	ldi	r24, 0xC8	; 200
    3c38:	92 e2       	ldi	r25, 0x22	; 34
    3c3a:	9f 93       	push	r25
    3c3c:	8f 93       	push	r24
    3c3e:	89 e6       	ldi	r24, 0x69	; 105
    3c40:	96 e2       	ldi	r25, 0x26	; 38
    3c42:	9f 93       	push	r25
    3c44:	8f 93       	push	r24
    3c46:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
			Responsing=1;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3c50:	e0 ea       	ldi	r30, 0xA0	; 160
    3c52:	f6 e0       	ldi	r31, 0x06	; 6
    3c54:	84 81       	ldd	r24, Z+4	; 0x04
    3c56:	81 60       	ori	r24, 0x01	; 1
    3c58:	84 83       	std	Z+4, r24	; 0x04
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	f6 c3       	rjmp	.+2028   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#20",3)==0)
    3c68:	43 e0       	ldi	r20, 0x03	; 3
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	61 ed       	ldi	r22, 0xD1	; 209
    3c6e:	72 e2       	ldi	r23, 0x22	; 34
    3c70:	8d ea       	ldi	r24, 0xAD	; 173
    3c72:	94 e2       	ldi	r25, 0x24	; 36
    3c74:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3c78:	89 2b       	or	r24, r25
    3c7a:	21 f5       	brne	.+72     	; 0x3cc4 <_Z6cmdExev+0x12bc>
	{
		if(cmdTemp[3]=='0') //Set Reference Direction
    3c7c:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3c80:	80 33       	cpi	r24, 0x30	; 48
    3c82:	09 f0       	breq	.+2      	; 0x3c86 <_Z6cmdExev+0x127e>
    3c84:	e7 c3       	rjmp	.+1998   	; 0x4454 <__stack+0x455>
		{
			RefDIR[ax] = 1;
    3c86:	f1 01       	movw	r30, r2
    3c88:	ef 50       	subi	r30, 0x0F	; 15
    3c8a:	f9 4d       	sbci	r31, 0xD9	; 217
    3c8c:	11 e0       	ldi	r17, 0x01	; 1
    3c8e:	10 83       	st	Z, r17
			sprintf(BufferSend,"!200%d\r\n",ax);
    3c90:	3f 92       	push	r3
    3c92:	2f 92       	push	r2
    3c94:	85 ed       	ldi	r24, 0xD5	; 213
    3c96:	92 e2       	ldi	r25, 0x22	; 34
    3c98:	9f 93       	push	r25
    3c9a:	8f 93       	push	r24
    3c9c:	89 e6       	ldi	r24, 0x69	; 105
    3c9e:	96 e2       	ldi	r25, 0x26	; 38
    3ca0:	9f 93       	push	r25
    3ca2:	8f 93       	push	r24
    3ca4:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
			Responsing=1;
    3ca8:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
			SetDataReady;
    3cac:	e0 ea       	ldi	r30, 0xA0	; 160
    3cae:	f6 e0       	ldi	r31, 0x06	; 6
    3cb0:	84 81       	ldd	r24, Z+4	; 0x04
    3cb2:	81 60       	ori	r24, 0x01	; 1
    3cb4:	84 83       	std	Z+4, r24	; 0x04
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	c8 c3       	rjmp	.+1936   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#21",3)==0)
    3cc4:	43 e0       	ldi	r20, 0x03	; 3
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	6e ed       	ldi	r22, 0xDE	; 222
    3cca:	72 e2       	ldi	r23, 0x22	; 34
    3ccc:	8d ea       	ldi	r24, 0xAD	; 173
    3cce:	94 e2       	ldi	r25, 0x24	; 36
    3cd0:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3cd4:	89 2b       	or	r24, r25
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <_Z6cmdExev+0x12d2>
    3cd8:	45 c0       	rjmp	.+138    	; 0x3d64 <_Z6cmdExev+0x135c>
	{
		if (cmdTemp[3] == 0)//Disable Hardware Positive Limit
    3cda:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3cde:	81 11       	cpse	r24, r1
    3ce0:	1f c0       	rjmp	.+62     	; 0x3d20 <_Z6cmdExev+0x1318>
		{
			PLimitIsActiveA[ax]=0;
    3ce2:	f1 01       	movw	r30, r2
    3ce4:	e0 53       	subi	r30, 0x30	; 48
    3ce6:	f9 4d       	sbci	r31, 0xD9	; 217
    3ce8:	10 82       	st	Z, r1
			sprintf(BufferSend,"!210%d\r\n",ax);
    3cea:	3f 92       	push	r3
    3cec:	2f 92       	push	r2
    3cee:	82 ee       	ldi	r24, 0xE2	; 226
    3cf0:	92 e2       	ldi	r25, 0x22	; 34
    3cf2:	9f 93       	push	r25
    3cf4:	8f 93       	push	r24
    3cf6:	89 e6       	ldi	r24, 0x69	; 105
    3cf8:	96 e2       	ldi	r25, 0x26	; 38
    3cfa:	9f 93       	push	r25
    3cfc:	8f 93       	push	r24
    3cfe:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
			Responsing=1;
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3d08:	e0 ea       	ldi	r30, 0xA0	; 160
    3d0a:	f6 e0       	ldi	r31, 0x06	; 6
    3d0c:	84 81       	ldd	r24, Z+4	; 0x04
    3d0e:	81 60       	ori	r24, 0x01	; 1
    3d10:	84 83       	std	Z+4, r24	; 0x04
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	9a c3       	rjmp	.+1844   	; 0x4454 <__stack+0x455>
		}
		else if (cmdTemp[3] == 1)//Enable Hardware Positive Limit
    3d20:	81 30       	cpi	r24, 0x01	; 1
    3d22:	09 f0       	breq	.+2      	; 0x3d26 <_Z6cmdExev+0x131e>
    3d24:	97 c3       	rjmp	.+1838   	; 0x4454 <__stack+0x455>
		{
			PLimitIsActiveA[ax] = 1;
    3d26:	f1 01       	movw	r30, r2
    3d28:	e0 53       	subi	r30, 0x30	; 48
    3d2a:	f9 4d       	sbci	r31, 0xD9	; 217
    3d2c:	11 e0       	ldi	r17, 0x01	; 1
    3d2e:	10 83       	st	Z, r17
			sprintf(BufferSend,"!211%d\r\n",ax);
    3d30:	3f 92       	push	r3
    3d32:	2f 92       	push	r2
    3d34:	8b ee       	ldi	r24, 0xEB	; 235
    3d36:	92 e2       	ldi	r25, 0x22	; 34
    3d38:	9f 93       	push	r25
    3d3a:	8f 93       	push	r24
    3d3c:	89 e6       	ldi	r24, 0x69	; 105
    3d3e:	96 e2       	ldi	r25, 0x26	; 38
    3d40:	9f 93       	push	r25
    3d42:	8f 93       	push	r24
    3d44:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
			Responsing=1;
    3d48:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
			SetDataReady;
    3d4c:	e0 ea       	ldi	r30, 0xA0	; 160
    3d4e:	f6 e0       	ldi	r31, 0x06	; 6
    3d50:	84 81       	ldd	r24, Z+4	; 0x04
    3d52:	81 60       	ori	r24, 0x01	; 1
    3d54:	84 83       	std	Z+4, r24	; 0x04
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	78 c3       	rjmp	.+1776   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#22",5)==0)
    3d64:	45 e0       	ldi	r20, 0x05	; 5
    3d66:	50 e0       	ldi	r21, 0x00	; 0
    3d68:	64 ef       	ldi	r22, 0xF4	; 244
    3d6a:	72 e2       	ldi	r23, 0x22	; 34
    3d6c:	8d ea       	ldi	r24, 0xAD	; 173
    3d6e:	94 e2       	ldi	r25, 0x24	; 36
    3d70:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3d74:	89 2b       	or	r24, r25
    3d76:	09 f0       	breq	.+2      	; 0x3d7a <_Z6cmdExev+0x1372>
    3d78:	45 c0       	rjmp	.+138    	; 0x3e04 <_Z6cmdExev+0x13fc>
	{
		if (cmdTemp[3] == 0) //Disable Hardware Negative Limit
    3d7a:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3d7e:	81 11       	cpse	r24, r1
    3d80:	1f c0       	rjmp	.+62     	; 0x3dc0 <_Z6cmdExev+0x13b8>
		{
			NLimitIsActiveA[ax] = 0;
    3d82:	f1 01       	movw	r30, r2
    3d84:	e3 53       	subi	r30, 0x33	; 51
    3d86:	f9 4d       	sbci	r31, 0xD9	; 217
    3d88:	10 82       	st	Z, r1
			sprintf(BufferSend,"!220%d\r\n",ax);
    3d8a:	3f 92       	push	r3
    3d8c:	2f 92       	push	r2
    3d8e:	88 ef       	ldi	r24, 0xF8	; 248
    3d90:	92 e2       	ldi	r25, 0x22	; 34
    3d92:	9f 93       	push	r25
    3d94:	8f 93       	push	r24
    3d96:	89 e6       	ldi	r24, 0x69	; 105
    3d98:	96 e2       	ldi	r25, 0x26	; 38
    3d9a:	9f 93       	push	r25
    3d9c:	8f 93       	push	r24
    3d9e:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
			Responsing=1;
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3da8:	e0 ea       	ldi	r30, 0xA0	; 160
    3daa:	f6 e0       	ldi	r31, 0x06	; 6
    3dac:	84 81       	ldd	r24, Z+4	; 0x04
    3dae:	81 60       	ori	r24, 0x01	; 1
    3db0:	84 83       	std	Z+4, r24	; 0x04
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	4a c3       	rjmp	.+1684   	; 0x4454 <__stack+0x455>
		}
		else if (cmdTemp[3] == 1)//Enable Hardware Negative Limit
    3dc0:	81 30       	cpi	r24, 0x01	; 1
    3dc2:	09 f0       	breq	.+2      	; 0x3dc6 <_Z6cmdExev+0x13be>
    3dc4:	47 c3       	rjmp	.+1678   	; 0x4454 <__stack+0x455>
		{
			NLimitIsActiveA[ax] = 1;
    3dc6:	f1 01       	movw	r30, r2
    3dc8:	e3 53       	subi	r30, 0x33	; 51
    3dca:	f9 4d       	sbci	r31, 0xD9	; 217
    3dcc:	11 e0       	ldi	r17, 0x01	; 1
    3dce:	10 83       	st	Z, r17
			sprintf(BufferSend,"!221%d\r\n",ax);
    3dd0:	3f 92       	push	r3
    3dd2:	2f 92       	push	r2
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	93 e2       	ldi	r25, 0x23	; 35
    3dd8:	9f 93       	push	r25
    3dda:	8f 93       	push	r24
    3ddc:	89 e6       	ldi	r24, 0x69	; 105
    3dde:	96 e2       	ldi	r25, 0x26	; 38
    3de0:	9f 93       	push	r25
    3de2:	8f 93       	push	r24
    3de4:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
			Responsing=1;
    3de8:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
			SetDataReady;
    3dec:	e0 ea       	ldi	r30, 0xA0	; 160
    3dee:	f6 e0       	ldi	r31, 0x06	; 6
    3df0:	84 81       	ldd	r24, Z+4	; 0x04
    3df2:	81 60       	ori	r24, 0x01	; 1
    3df4:	84 83       	std	Z+4, r24	; 0x04
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	28 c3       	rjmp	.+1616   	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#2800",5)==0)
    3e04:	45 e0       	ldi	r20, 0x05	; 5
    3e06:	50 e0       	ldi	r21, 0x00	; 0
    3e08:	6a e0       	ldi	r22, 0x0A	; 10
    3e0a:	73 e2       	ldi	r23, 0x23	; 35
    3e0c:	8d ea       	ldi	r24, 0xAD	; 173
    3e0e:	94 e2       	ldi	r25, 0x24	; 36
    3e10:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3e14:	89 2b       	or	r24, r25
    3e16:	61 f4       	brne	.+24     	; 0x3e30 <_Z6cmdExev+0x1428>
	{
		EchoON=1;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	80 93 97 24 	sts	0x2497, r24	; 0x802497 <EchoON>
		if(EchoON) printf("!2800\n\r");
    3e1e:	80 e1       	ldi	r24, 0x10	; 16
    3e20:	93 e2       	ldi	r25, 0x23	; 35
    3e22:	9f 93       	push	r25
    3e24:	8f 93       	push	r24
    3e26:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	12 c3       	rjmp	.+1572   	; 0x4454 <__stack+0x455>
	}
	else if(strncmp(cmdTemp,"#2900",5)==0)
    3e30:	45 e0       	ldi	r20, 0x05	; 5
    3e32:	50 e0       	ldi	r21, 0x00	; 0
    3e34:	68 e1       	ldi	r22, 0x18	; 24
    3e36:	73 e2       	ldi	r23, 0x23	; 35
    3e38:	8d ea       	ldi	r24, 0xAD	; 173
    3e3a:	94 e2       	ldi	r25, 0x24	; 36
    3e3c:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3e40:	89 2b       	or	r24, r25
    3e42:	19 f4       	brne	.+6      	; 0x3e4a <_Z6cmdExev+0x1442>
	{
		EchoON=0;
    3e44:	10 92 97 24 	sts	0x2497, r1	; 0x802497 <EchoON>
    3e48:	05 c3       	rjmp	.+1546   	; 0x4454 <__stack+0x455>
		if(EchoON) printf("!2900\n\r");
	}
	else if(strncmp(cmdTemp,"#3000",5)==0)
    3e4a:	45 e0       	ldi	r20, 0x05	; 5
    3e4c:	50 e0       	ldi	r21, 0x00	; 0
    3e4e:	6e e1       	ldi	r22, 0x1E	; 30
    3e50:	73 e2       	ldi	r23, 0x23	; 35
    3e52:	8d ea       	ldi	r24, 0xAD	; 173
    3e54:	94 e2       	ldi	r25, 0x24	; 36
    3e56:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    3e5a:	89 2b       	or	r24, r25
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <_Z6cmdExev+0x1458>
    3e5e:	0d c2       	rjmp	.+1050   	; 0x427a <__stack+0x27b>
	{//Run 4Axis Interpolation
		if (!ProgramRun)
    3e60:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    3e64:	81 11       	cpse	r24, r1
    3e66:	f6 c2       	rjmp	.+1516   	; 0x4454 <__stack+0x455>
		{
			while (IsAnyAxisMoving() == 1);
    3e68:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    3e6c:	81 30       	cpi	r24, 0x01	; 1
    3e6e:	f1 f3       	breq	.-4      	; 0x3e6c <_Z6cmdExev+0x1464>
    3e70:	0f 2e       	mov	r0, r31
    3e72:	f4 e2       	ldi	r31, 0x24	; 36
    3e74:	af 2e       	mov	r10, r31
    3e76:	f7 e2       	ldi	r31, 0x27	; 39
    3e78:	bf 2e       	mov	r11, r31
    3e7a:	f0 2d       	mov	r31, r0
    3e7c:	0f 2e       	mov	r0, r31
    3e7e:	f0 e3       	ldi	r31, 0x30	; 48
    3e80:	ef 2e       	mov	r14, r31
    3e82:	f7 e2       	ldi	r31, 0x27	; 39
    3e84:	ff 2e       	mov	r15, r31
    3e86:	f0 2d       	mov	r31, r0
    3e88:	0f 2e       	mov	r0, r31
    3e8a:	f8 e1       	ldi	r31, 0x18	; 24
    3e8c:	8f 2e       	mov	r8, r31
    3e8e:	f7 e2       	ldi	r31, 0x27	; 39
    3e90:	9f 2e       	mov	r9, r31
    3e92:	f0 2d       	mov	r31, r0
    3e94:	0f 2e       	mov	r0, r31
    3e96:	fc e0       	ldi	r31, 0x0C	; 12
    3e98:	cf 2e       	mov	r12, r31
    3e9a:	f7 e2       	ldi	r31, 0x27	; 39
    3e9c:	df 2e       	mov	r13, r31
    3e9e:	f0 2d       	mov	r31, r0
    3ea0:	36 01       	movw	r6, r12
    3ea2:	1d 82       	std	Y+5, r1	; 0x05
    3ea4:	1e 82       	std	Y+6, r1	; 0x06
    3ea6:	00 e0       	ldi	r16, 0x00	; 0
    3ea8:	10 e0       	ldi	r17, 0x00	; 0
    3eaa:	41 2c       	mov	r4, r1
    3eac:	51 2c       	mov	r5, r1
    3eae:	17 01       	movw	r2, r14
    3eb0:	a9 82       	std	Y+1, r10	; 0x01
    3eb2:	ba 82       	std	Y+2, r11	; 0x02
			unsigned int TempS = 0;
			int tempa = 0;
			for (int gx = 0 ; gx < AxisNumber ; gx++)
			{
				if (SetJog[gx] < AxisPosition[gx])
    3eb4:	d7 01       	movw	r26, r14
    3eb6:	4d 91       	ld	r20, X+
    3eb8:	5d 91       	ld	r21, X+
    3eba:	6d 91       	ld	r22, X+
    3ebc:	7c 91       	ld	r23, X
    3ebe:	f5 01       	movw	r30, r10
    3ec0:	80 81       	ld	r24, Z
    3ec2:	91 81       	ldd	r25, Z+1	; 0x01
    3ec4:	a2 81       	ldd	r26, Z+2	; 0x02
    3ec6:	b3 81       	ldd	r27, Z+3	; 0x03
    3ec8:	48 17       	cp	r20, r24
    3eca:	59 07       	cpc	r21, r25
    3ecc:	6a 07       	cpc	r22, r26
    3ece:	7b 07       	cpc	r23, r27
    3ed0:	34 f4       	brge	.+12     	; 0x3ede <_Z6cmdExev+0x14d6>
				SetAxisDir(gx,0);
    3ed2:	60 e0       	ldi	r22, 0x00	; 0
    3ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed8:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
    3edc:	05 c0       	rjmp	.+10     	; 0x3ee8 <_Z6cmdExev+0x14e0>
				else
				SetAxisDir(gx,1);
    3ede:	61 e0       	ldi	r22, 0x01	; 1
    3ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee4:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				if (TempS < SetSpeed[gx])
    3ee8:	f3 01       	movw	r30, r6
    3eea:	81 91       	ld	r24, Z+
    3eec:	91 91       	ld	r25, Z+
    3eee:	a1 91       	ld	r26, Z+
    3ef0:	b1 91       	ld	r27, Z+
    3ef2:	3f 01       	movw	r6, r30
    3ef4:	a2 01       	movw	r20, r4
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	70 e0       	ldi	r23, 0x00	; 0
    3efa:	48 17       	cp	r20, r24
    3efc:	59 07       	cpc	r21, r25
    3efe:	6a 07       	cpc	r22, r26
    3f00:	7b 07       	cpc	r23, r27
    3f02:	1c f4       	brge	.+6      	; 0x3f0a <_Z6cmdExev+0x1502>
				{
					TempS = SetSpeed[gx];
    3f04:	2c 01       	movw	r4, r24
    3f06:	0d 81       	ldd	r16, Y+5	; 0x05
    3f08:	1e 81       	ldd	r17, Y+6	; 0x06
    3f0a:	f4 e0       	ldi	r31, 0x04	; 4
    3f0c:	af 0e       	add	r10, r31
    3f0e:	b1 1c       	adc	r11, r1
    3f10:	24 e0       	ldi	r18, 0x04	; 4
    3f12:	e2 0e       	add	r14, r18
    3f14:	f1 1c       	adc	r15, r1
					tempa = gx;
				}
				DistanceToGo[gx] = labs(AxisPosition[gx]-SetJog[gx]);
    3f16:	e9 81       	ldd	r30, Y+1	; 0x01
    3f18:	fa 81       	ldd	r31, Y+2	; 0x02
    3f1a:	80 81       	ld	r24, Z
    3f1c:	91 81       	ldd	r25, Z+1	; 0x01
    3f1e:	a2 81       	ldd	r26, Z+2	; 0x02
    3f20:	b3 81       	ldd	r27, Z+3	; 0x03
    3f22:	f1 01       	movw	r30, r2
    3f24:	40 81       	ld	r20, Z
    3f26:	51 81       	ldd	r21, Z+1	; 0x01
    3f28:	62 81       	ldd	r22, Z+2	; 0x02
    3f2a:	73 81       	ldd	r23, Z+3	; 0x03
    3f2c:	84 1b       	sub	r24, r20
    3f2e:	95 0b       	sbc	r25, r21
    3f30:	a6 0b       	sbc	r26, r22
    3f32:	b7 0b       	sbc	r27, r23
    3f34:	ac 01       	movw	r20, r24
    3f36:	bd 01       	movw	r22, r26
    3f38:	3a f4       	brpl	.+14     	; 0x3f48 <_Z6cmdExev+0x1540>
    3f3a:	44 27       	eor	r20, r20
    3f3c:	55 27       	eor	r21, r21
    3f3e:	ba 01       	movw	r22, r20
    3f40:	48 1b       	sub	r20, r24
    3f42:	59 0b       	sbc	r21, r25
    3f44:	6a 0b       	sbc	r22, r26
    3f46:	7b 0b       	sbc	r23, r27
    3f48:	d4 01       	movw	r26, r8
    3f4a:	4d 93       	st	X+, r20
    3f4c:	5d 93       	st	X+, r21
    3f4e:	6d 93       	st	X+, r22
    3f50:	7d 93       	st	X+, r23
    3f52:	4d 01       	movw	r8, r26
		if (!ProgramRun)
		{
			while (IsAnyAxisMoving() == 1);
			unsigned int TempS = 0;
			int tempa = 0;
			for (int gx = 0 ; gx < AxisNumber ; gx++)
    3f54:	ed 81       	ldd	r30, Y+5	; 0x05
    3f56:	fe 81       	ldd	r31, Y+6	; 0x06
    3f58:	31 96       	adiw	r30, 0x01	; 1
    3f5a:	ed 83       	std	Y+5, r30	; 0x05
    3f5c:	fe 83       	std	Y+6, r31	; 0x06
    3f5e:	33 97       	sbiw	r30, 0x03	; 3
    3f60:	09 f0       	breq	.+2      	; 0x3f64 <_Z6cmdExev+0x155c>
    3f62:	a5 cf       	rjmp	.-182    	; 0x3eae <_Z6cmdExev+0x14a6>
					TempS = SetSpeed[gx];
					tempa = gx;
				}
				DistanceToGo[gx] = labs(AxisPosition[gx]-SetJog[gx]);
			}
			MaxSpeed = TempS;
    3f64:	61 2c       	mov	r6, r1
    3f66:	71 2c       	mov	r7, r1
    3f68:	40 92 87 24 	sts	0x2487, r4	; 0x802487 <MaxSpeed>
    3f6c:	50 92 88 24 	sts	0x2488, r5	; 0x802488 <MaxSpeed+0x1>
    3f70:	60 92 89 24 	sts	0x2489, r6	; 0x802489 <MaxSpeed+0x2>
    3f74:	70 92 8a 24 	sts	0x248A, r7	; 0x80248a <MaxSpeed+0x3>
    3f78:	22 ee       	ldi	r18, 0xE2	; 226
    3f7a:	36 e2       	ldi	r19, 0x26	; 38
    3f7c:	29 83       	std	Y+1, r18	; 0x01
    3f7e:	3a 83       	std	Y+2, r19	; 0x02
    3f80:	0f 2e       	mov	r0, r31
    3f82:	f8 e1       	ldi	r31, 0x18	; 24
    3f84:	ef 2e       	mov	r14, r31
    3f86:	f7 e2       	ldi	r31, 0x27	; 39
    3f88:	ff 2e       	mov	r15, r31
    3f8a:	f0 2d       	mov	r31, r0
			for (int gx = 0 ; gx < AxisNumber ; gx++)
			{
				Ma[gx]=(unsigned int)((float)(SetSpeed[gx]/MaxSpeed)*1000);
    3f8c:	d6 01       	movw	r26, r12
    3f8e:	6d 91       	ld	r22, X+
    3f90:	7d 91       	ld	r23, X+
    3f92:	8d 91       	ld	r24, X+
    3f94:	9d 91       	ld	r25, X+
    3f96:	6d 01       	movw	r12, r26
    3f98:	a3 01       	movw	r20, r6
    3f9a:	92 01       	movw	r18, r4
    3f9c:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    3fa0:	ca 01       	movw	r24, r20
    3fa2:	b9 01       	movw	r22, r18
    3fa4:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	4a e7       	ldi	r20, 0x7A	; 122
    3fae:	54 e4       	ldi	r21, 0x44	; 68
    3fb0:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    3fb4:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    3fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    3fba:	fa 81       	ldd	r31, Y+2	; 0x02
    3fbc:	61 93       	st	Z+, r22
    3fbe:	71 93       	st	Z+, r23
    3fc0:	e9 83       	std	Y+1, r30	; 0x01
    3fc2:	fa 83       	std	Y+2, r31	; 0x02
					tempa = gx;
				}
				DistanceToGo[gx] = labs(AxisPosition[gx]-SetJog[gx]);
			}
			MaxSpeed = TempS;
			for (int gx = 0 ; gx < AxisNumber ; gx++)
    3fc4:	ce 14       	cp	r12, r14
    3fc6:	df 04       	cpc	r13, r15
    3fc8:	09 f7       	brne	.-62     	; 0x3f8c <_Z6cmdExev+0x1584>
			{
				Ma[gx]=(unsigned int)((float)(SetSpeed[gx]/MaxSpeed)*1000);
			}
			IACC=AxACC[tempa];
    3fca:	c8 01       	movw	r24, r16
    3fcc:	88 0f       	add	r24, r24
    3fce:	99 1f       	adc	r25, r25
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	e0 50       	subi	r30, 0x00	; 0
    3fd8:	f9 4d       	sbci	r31, 0xD9	; 217
    3fda:	80 80       	ld	r8, Z
    3fdc:	91 80       	ldd	r9, Z+1	; 0x01
    3fde:	a2 80       	ldd	r10, Z+2	; 0x02
    3fe0:	b3 80       	ldd	r11, Z+3	; 0x03
    3fe2:	80 92 83 24 	sts	0x2483, r8	; 0x802483 <IACC>
    3fe6:	90 92 84 24 	sts	0x2484, r9	; 0x802484 <IACC+0x1>
    3fea:	a0 92 85 24 	sts	0x2485, r10	; 0x802485 <IACC+0x2>
    3fee:	b0 92 86 24 	sts	0x2486, r11	; 0x802486 <IACC+0x3>
			IDEC=AxDEC[tempa];
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	ec 50       	subi	r30, 0x0C	; 12
    3ff6:	f9 4d       	sbci	r31, 0xD9	; 217
    3ff8:	c0 80       	ld	r12, Z
    3ffa:	d1 80       	ldd	r13, Z+1	; 0x01
    3ffc:	e2 80       	ldd	r14, Z+2	; 0x02
    3ffe:	f3 80       	ldd	r15, Z+3	; 0x03
    4000:	c0 92 7f 24 	sts	0x247F, r12	; 0x80247f <IDEC>
    4004:	d0 92 80 24 	sts	0x2480, r13	; 0x802480 <IDEC+0x1>
    4008:	e0 92 81 24 	sts	0x2481, r14	; 0x802481 <IDEC+0x2>
    400c:	f0 92 82 24 	sts	0x2482, r15	; 0x802482 <IDEC+0x3>
			MaxDistanceToGo=labs(AxisPosition[tempa]-SetJog[tempa]);
    4010:	fc 01       	movw	r30, r24
    4012:	ec 5d       	subi	r30, 0xDC	; 220
    4014:	f8 4d       	sbci	r31, 0xD8	; 216
    4016:	dc 01       	movw	r26, r24
    4018:	a0 5d       	subi	r26, 0xD0	; 208
    401a:	b8 4d       	sbci	r27, 0xD8	; 216
    401c:	40 81       	ld	r20, Z
    401e:	51 81       	ldd	r21, Z+1	; 0x01
    4020:	62 81       	ldd	r22, Z+2	; 0x02
    4022:	73 81       	ldd	r23, Z+3	; 0x03
    4024:	8d 91       	ld	r24, X+
    4026:	9d 91       	ld	r25, X+
    4028:	0d 90       	ld	r0, X+
    402a:	bc 91       	ld	r27, X
    402c:	a0 2d       	mov	r26, r0
    402e:	48 1b       	sub	r20, r24
    4030:	59 0b       	sbc	r21, r25
    4032:	6a 0b       	sbc	r22, r26
    4034:	7b 0b       	sbc	r23, r27
    4036:	db 01       	movw	r26, r22
    4038:	ca 01       	movw	r24, r20
    403a:	3a f4       	brpl	.+14     	; 0x404a <__stack+0x4b>
    403c:	88 27       	eor	r24, r24
    403e:	99 27       	eor	r25, r25
    4040:	dc 01       	movw	r26, r24
    4042:	84 1b       	sub	r24, r20
    4044:	95 0b       	sbc	r25, r21
    4046:	a6 0b       	sbc	r26, r22
    4048:	b7 0b       	sbc	r27, r23
    404a:	28 2e       	mov	r2, r24
    404c:	39 2e       	mov	r3, r25
    404e:	ab 87       	std	Y+11, r26	; 0x0b
    4050:	b9 87       	std	Y+9, r27	; 0x09
    4052:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    4056:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    405a:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    405e:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
			Ma[tempa]=1000;
    4062:	f8 01       	movw	r30, r16
    4064:	ee 0f       	add	r30, r30
    4066:	ff 1f       	adc	r31, r31
    4068:	ee 51       	subi	r30, 0x1E	; 30
    406a:	f9 4d       	sbci	r31, 0xD9	; 217
    406c:	88 ee       	ldi	r24, 0xE8	; 232
    406e:	93 e0       	ldi	r25, 0x03	; 3
    4070:	80 83       	st	Z, r24
    4072:	91 83       	std	Z+1, r25	; 0x01
			CurSpeedFrq=0;
    4074:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    4078:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    407c:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    4080:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    4084:	e0 e0       	ldi	r30, 0x00	; 0
    4086:	f8 e0       	ldi	r31, 0x08	; 8
    4088:	8f ef       	ldi	r24, 0xFF	; 255
    408a:	9f ef       	ldi	r25, 0xFF	; 255
    408c:	80 a7       	std	Z+40, r24	; 0x28
    408e:	91 a7       	std	Z+41, r25	; 0x29
			
			CurSpeedFrq=0;
			TCC0.CCA=0xFFFF;
    4090:	80 a7       	std	Z+40, r24	; 0x28
    4092:	91 a7       	std	Z+41, r25	; 0x29
			if(IACC>0)
    4094:	18 14       	cp	r1, r8
    4096:	19 04       	cpc	r1, r9
    4098:	1a 04       	cpc	r1, r10
    409a:	1b 04       	cpc	r1, r11
    409c:	54 f5       	brge	.+84     	; 0x40f2 <__stack+0xf3>
			{
				ACCSpeedINT = (long int) (100 * (float)((float)MaxSpeed / (float)IACC));// t = V/a
				ACCSpeedINT = (long int)(MaxSpeed / ACCSpeedINT);
    409e:	c3 01       	movw	r24, r6
    40a0:	b2 01       	movw	r22, r4
    40a2:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    40a6:	69 83       	std	Y+1, r22	; 0x01
    40a8:	7a 83       	std	Y+2, r23	; 0x02
    40aa:	8b 83       	std	Y+3, r24	; 0x03
    40ac:	9c 83       	std	Y+4, r25	; 0x04
    40ae:	c5 01       	movw	r24, r10
    40b0:	b4 01       	movw	r22, r8
    40b2:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    40b6:	9b 01       	movw	r18, r22
    40b8:	ac 01       	movw	r20, r24
    40ba:	69 81       	ldd	r22, Y+1	; 0x01
    40bc:	7a 81       	ldd	r23, Y+2	; 0x02
    40be:	8b 81       	ldd	r24, Y+3	; 0x03
    40c0:	9c 81       	ldd	r25, Y+4	; 0x04
    40c2:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	48 ec       	ldi	r20, 0xC8	; 200
    40cc:	52 e4       	ldi	r21, 0x42	; 66
    40ce:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    40d2:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    40d6:	9b 01       	movw	r18, r22
    40d8:	ac 01       	movw	r20, r24
    40da:	c3 01       	movw	r24, r6
    40dc:	b2 01       	movw	r22, r4
    40de:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    40e2:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    40e6:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    40ea:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    40ee:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
			}
			if(IDEC>0)
    40f2:	1c 14       	cp	r1, r12
    40f4:	1d 04       	cpc	r1, r13
    40f6:	1e 04       	cpc	r1, r14
    40f8:	1f 04       	cpc	r1, r15
    40fa:	54 f5       	brge	.+84     	; 0x4150 <__stack+0x151>
			{
				DECSpeedINT = (long int)(100 * (float)((float)MaxSpeed / (float)IDEC));// t = V/a
				DECSpeedINT = (long int)(MaxSpeed / DECSpeedINT);
    40fc:	c3 01       	movw	r24, r6
    40fe:	b2 01       	movw	r22, r4
    4100:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4104:	69 83       	std	Y+1, r22	; 0x01
    4106:	7a 83       	std	Y+2, r23	; 0x02
    4108:	8b 83       	std	Y+3, r24	; 0x03
    410a:	9c 83       	std	Y+4, r25	; 0x04
    410c:	c7 01       	movw	r24, r14
    410e:	b6 01       	movw	r22, r12
    4110:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4114:	9b 01       	movw	r18, r22
    4116:	ac 01       	movw	r20, r24
    4118:	69 81       	ldd	r22, Y+1	; 0x01
    411a:	7a 81       	ldd	r23, Y+2	; 0x02
    411c:	8b 81       	ldd	r24, Y+3	; 0x03
    411e:	9c 81       	ldd	r25, Y+4	; 0x04
    4120:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	48 ec       	ldi	r20, 0xC8	; 200
    412a:	52 e4       	ldi	r21, 0x42	; 66
    412c:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    4130:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    4134:	9b 01       	movw	r18, r22
    4136:	ac 01       	movw	r20, r24
    4138:	c3 01       	movw	r24, r6
    413a:	b2 01       	movw	r22, r4
    413c:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    4140:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    4144:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    4148:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    414c:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
			}
			
			DecDTG = pow(MaxSpeed,2)/(IDEC);
    4150:	c3 01       	movw	r24, r6
    4152:	b2 01       	movw	r22, r4
    4154:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4158:	9b 01       	movw	r18, r22
    415a:	ac 01       	movw	r20, r24
    415c:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    4160:	69 83       	std	Y+1, r22	; 0x01
    4162:	7a 83       	std	Y+2, r23	; 0x02
    4164:	8b 83       	std	Y+3, r24	; 0x03
    4166:	9c 83       	std	Y+4, r25	; 0x04
    4168:	c7 01       	movw	r24, r14
    416a:	b6 01       	movw	r22, r12
    416c:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4170:	9b 01       	movw	r18, r22
    4172:	ac 01       	movw	r20, r24
    4174:	69 81       	ldd	r22, Y+1	; 0x01
    4176:	7a 81       	ldd	r23, Y+2	; 0x02
    4178:	8b 81       	ldd	r24, Y+3	; 0x03
    417a:	9c 81       	ldd	r25, Y+4	; 0x04
    417c:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    4180:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    4184:	60 93 8f 24 	sts	0x248F, r22	; 0x80248f <DecDTG>
    4188:	70 93 90 24 	sts	0x2490, r23	; 0x802490 <DecDTG+0x1>
    418c:	80 93 91 24 	sts	0x2491, r24	; 0x802491 <DecDTG+0x2>
    4190:	90 93 92 24 	sts	0x2492, r25	; 0x802492 <DecDTG+0x3>
			AccDTG = MaxDistanceToGo - pow(MaxSpeed,2)/(IACC);
    4194:	62 2d       	mov	r22, r2
    4196:	73 2d       	mov	r23, r3
    4198:	8b 85       	ldd	r24, Y+11	; 0x0b
    419a:	99 85       	ldd	r25, Y+9	; 0x09
    419c:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    41a0:	6d 83       	std	Y+5, r22	; 0x05
    41a2:	7e 83       	std	Y+6, r23	; 0x06
    41a4:	8f 83       	std	Y+7, r24	; 0x07
    41a6:	98 87       	std	Y+8, r25	; 0x08
    41a8:	c5 01       	movw	r24, r10
    41aa:	b4 01       	movw	r22, r8
    41ac:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    41b0:	9b 01       	movw	r18, r22
    41b2:	ac 01       	movw	r20, r24
    41b4:	69 81       	ldd	r22, Y+1	; 0x01
    41b6:	7a 81       	ldd	r23, Y+2	; 0x02
    41b8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ba:	9c 81       	ldd	r25, Y+4	; 0x04
    41bc:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    41c0:	9b 01       	movw	r18, r22
    41c2:	ac 01       	movw	r20, r24
    41c4:	6d 81       	ldd	r22, Y+5	; 0x05
    41c6:	7e 81       	ldd	r23, Y+6	; 0x06
    41c8:	8f 81       	ldd	r24, Y+7	; 0x07
    41ca:	98 85       	ldd	r25, Y+8	; 0x08
    41cc:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    41d0:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    41d4:	60 93 93 24 	sts	0x2493, r22	; 0x802493 <AccDTG>
    41d8:	70 93 94 24 	sts	0x2494, r23	; 0x802494 <AccDTG+0x1>
    41dc:	80 93 95 24 	sts	0x2495, r24	; 0x802495 <AccDTG+0x2>
    41e0:	90 93 96 24 	sts	0x2496, r25	; 0x802496 <AccDTG+0x3>
			
			ACC=1;
    41e4:	11 e0       	ldi	r17, 0x01	; 1
    41e6:	10 93 6e 24 	sts	0x246E, r17	; 0x80246e <ACC>
			sprintf(BufferSend,"!30\tMaxS:%ld\tIACC:%ld\tIDEC:%ld\n\rMa1:%u\tMa2:%u\tBACC:%ld\tBDEC:%ld\tMAXDTG:%ld\n\r",MaxSpeed,IACC,IDEC,Ma[0],Ma[1],ACCSpeedINT,DECSpeedINT,MaxDistanceToGo);
    41ea:	09 85       	ldd	r16, Y+9	; 0x09
    41ec:	0f 93       	push	r16
    41ee:	0b 85       	ldd	r16, Y+11	; 0x0b
    41f0:	0f 93       	push	r16
    41f2:	3f 92       	push	r3
    41f4:	2f 92       	push	r2
    41f6:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <DECSpeedINT+0x3>
    41fa:	8f 93       	push	r24
    41fc:	80 91 71 24 	lds	r24, 0x2471	; 0x802471 <DECSpeedINT+0x2>
    4200:	8f 93       	push	r24
    4202:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <DECSpeedINT+0x1>
    4206:	8f 93       	push	r24
    4208:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <DECSpeedINT>
    420c:	8f 93       	push	r24
    420e:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <ACCSpeedINT+0x3>
    4212:	8f 93       	push	r24
    4214:	80 91 75 24 	lds	r24, 0x2475	; 0x802475 <ACCSpeedINT+0x2>
    4218:	8f 93       	push	r24
    421a:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <ACCSpeedINT+0x1>
    421e:	8f 93       	push	r24
    4220:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <ACCSpeedINT>
    4224:	8f 93       	push	r24
    4226:	e2 ee       	ldi	r30, 0xE2	; 226
    4228:	f6 e2       	ldi	r31, 0x26	; 38
    422a:	83 81       	ldd	r24, Z+3	; 0x03
    422c:	8f 93       	push	r24
    422e:	82 81       	ldd	r24, Z+2	; 0x02
    4230:	8f 93       	push	r24
    4232:	81 81       	ldd	r24, Z+1	; 0x01
    4234:	8f 93       	push	r24
    4236:	80 81       	ld	r24, Z
    4238:	8f 93       	push	r24
    423a:	ff 92       	push	r15
    423c:	ef 92       	push	r14
    423e:	df 92       	push	r13
    4240:	cf 92       	push	r12
    4242:	bf 92       	push	r11
    4244:	af 92       	push	r10
    4246:	9f 92       	push	r9
    4248:	8f 92       	push	r8
    424a:	7f 92       	push	r7
    424c:	6f 92       	push	r6
    424e:	5f 92       	push	r5
    4250:	4f 92       	push	r4
    4252:	84 e2       	ldi	r24, 0x24	; 36
    4254:	93 e2       	ldi	r25, 0x23	; 35
    4256:	9f 93       	push	r25
    4258:	8f 93       	push	r24
    425a:	89 e6       	ldi	r24, 0x69	; 105
    425c:	96 e2       	ldi	r25, 0x26	; 38
    425e:	9f 93       	push	r25
    4260:	8f 93       	push	r24
    4262:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
			Responsing=1;
    4266:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
			SetDataReady;
    426a:	e0 ea       	ldi	r30, 0xA0	; 160
    426c:	f6 e0       	ldi	r31, 0x06	; 6
    426e:	84 81       	ldd	r24, Z+4	; 0x04
    4270:	81 60       	ori	r24, 0x01	; 1
    4272:	84 83       	std	Z+4, r24	; 0x04
    4274:	cd bf       	out	0x3d, r28	; 61
    4276:	de bf       	out	0x3e, r29	; 62
    4278:	ed c0       	rjmp	.+474    	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#4000",5)==0) //Stop Running Interpolation program , Stop All axis
    427a:	45 e0       	ldi	r20, 0x05	; 5
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	61 e7       	ldi	r22, 0x71	; 113
    4280:	73 e2       	ldi	r23, 0x23	; 35
    4282:	8d ea       	ldi	r24, 0xAD	; 173
    4284:	94 e2       	ldi	r25, 0x24	; 36
    4286:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    428a:	89 2b       	or	r24, r25
    428c:	11 f5       	brne	.+68     	; 0x42d2 <__stack+0x2d3>
	{
		ProgramRun=0;
    428e:	10 92 ca 24 	sts	0x24CA, r1	; 0x8024ca <ProgramRun>
		for (int gx = 0 ; gx < AxisNumber ; gx++)
		{
			DistanceToGo[gx] =0;
    4292:	e8 e1       	ldi	r30, 0x18	; 24
    4294:	f7 e2       	ldi	r31, 0x27	; 39
    4296:	10 82       	st	Z, r1
    4298:	11 82       	std	Z+1, r1	; 0x01
    429a:	12 82       	std	Z+2, r1	; 0x02
    429c:	13 82       	std	Z+3, r1	; 0x03
    429e:	14 82       	std	Z+4, r1	; 0x04
    42a0:	15 82       	std	Z+5, r1	; 0x05
    42a2:	16 82       	std	Z+6, r1	; 0x06
    42a4:	17 82       	std	Z+7, r1	; 0x07
    42a6:	10 86       	std	Z+8, r1	; 0x08
    42a8:	11 86       	std	Z+9, r1	; 0x09
    42aa:	12 86       	std	Z+10, r1	; 0x0a
    42ac:	13 86       	std	Z+11, r1	; 0x0b
		}
		DO1_CLR; //Pen UP
    42ae:	e0 e0       	ldi	r30, 0x00	; 0
    42b0:	f7 e0       	ldi	r31, 0x07	; 7
    42b2:	84 81       	ldd	r24, Z+4	; 0x04
    42b4:	8b 7f       	andi	r24, 0xFB	; 251
    42b6:	84 83       	std	Z+4, r24	; 0x04
		sprintf(BufferSend,"!4000\r\n");
    42b8:	88 e0       	ldi	r24, 0x08	; 8
    42ba:	e7 e7       	ldi	r30, 0x77	; 119
    42bc:	f3 e2       	ldi	r31, 0x23	; 35
    42be:	a9 e6       	ldi	r26, 0x69	; 105
    42c0:	b6 e2       	ldi	r27, 0x26	; 38
    42c2:	01 90       	ld	r0, Z+
    42c4:	0d 92       	st	X+, r0
    42c6:	8a 95       	dec	r24
    42c8:	e1 f7       	brne	.-8      	; 0x42c2 <__stack+0x2c3>
		Responsing=1;
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
    42d0:	c1 c0       	rjmp	.+386    	; 0x4454 <__stack+0x455>
		//}
	}
	else if(strncmp(cmdTemp,"#4100",5)==0) //pause the axis in moving interplation
    42d2:	45 e0       	ldi	r20, 0x05	; 5
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	6f e7       	ldi	r22, 0x7F	; 127
    42d8:	73 e2       	ldi	r23, 0x23	; 35
    42da:	8d ea       	ldi	r24, 0xAD	; 173
    42dc:	94 e2       	ldi	r25, 0x24	; 36
    42de:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    42e2:	89 2b       	or	r24, r25
    42e4:	11 f5       	brne	.+68     	; 0x432a <__stack+0x32b>
	{
		if(ProgramRun)
    42e6:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    42ea:	88 23       	and	r24, r24
    42ec:	09 f4       	brne	.+2      	; 0x42f0 <__stack+0x2f1>
    42ee:	b2 c0       	rjmp	.+356    	; 0x4454 <__stack+0x455>
		{
			IsPause=1;
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	80 93 52 24 	sts	0x2452, r24	; 0x802452 <IsPause>
			for (int gx = 0 ; gx < AxisNumber ; gx++)
			{
				DistanceToGo[gx] =0;
    42f6:	e8 e1       	ldi	r30, 0x18	; 24
    42f8:	f7 e2       	ldi	r31, 0x27	; 39
    42fa:	10 82       	st	Z, r1
    42fc:	11 82       	std	Z+1, r1	; 0x01
    42fe:	12 82       	std	Z+2, r1	; 0x02
    4300:	13 82       	std	Z+3, r1	; 0x03
    4302:	14 82       	std	Z+4, r1	; 0x04
    4304:	15 82       	std	Z+5, r1	; 0x05
    4306:	16 82       	std	Z+6, r1	; 0x06
    4308:	17 82       	std	Z+7, r1	; 0x07
    430a:	10 86       	std	Z+8, r1	; 0x08
    430c:	11 86       	std	Z+9, r1	; 0x09
    430e:	12 86       	std	Z+10, r1	; 0x0a
    4310:	13 86       	std	Z+11, r1	; 0x0b
				//TODO : it should be implemented
			}
			sprintf(BufferSend,"!4100\r\n");
    4312:	98 e0       	ldi	r25, 0x08	; 8
    4314:	e5 e8       	ldi	r30, 0x85	; 133
    4316:	f3 e2       	ldi	r31, 0x23	; 35
    4318:	a9 e6       	ldi	r26, 0x69	; 105
    431a:	b6 e2       	ldi	r27, 0x26	; 38
    431c:	01 90       	ld	r0, Z+
    431e:	0d 92       	st	X+, r0
    4320:	9a 95       	dec	r25
    4322:	e1 f7       	brne	.-8      	; 0x431c <__stack+0x31d>
			Responsing=1;
    4324:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
    4328:	95 c0       	rjmp	.+298    	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#9800",5)==0)
    432a:	45 e0       	ldi	r20, 0x05	; 5
    432c:	50 e0       	ldi	r21, 0x00	; 0
    432e:	6d e8       	ldi	r22, 0x8D	; 141
    4330:	73 e2       	ldi	r23, 0x23	; 35
    4332:	8d ea       	ldi	r24, 0xAD	; 173
    4334:	94 e2       	ldi	r25, 0x24	; 36
    4336:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    433a:	89 2b       	or	r24, r25
    433c:	a9 f5       	brne	.+106    	; 0x43a8 <__stack+0x3a9>
	{
		if (!ProgramRun)//wait until all axis stopped
    433e:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    4342:	81 11       	cpse	r24, r1
    4344:	27 c0       	rjmp	.+78     	; 0x4394 <__stack+0x395>
		{
			printf("Get Run Command\r\n");
    4346:	83 e9       	ldi	r24, 0x93	; 147
    4348:	93 e2       	ldi	r25, 0x23	; 35
    434a:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
			while (IsAnyAxisMoving() == 1);
    434e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    4352:	81 30       	cpi	r24, 0x01	; 1
    4354:	f1 f3       	breq	.-4      	; 0x4352 <__stack+0x353>
	    	ContinuousRead = 0;
    4356:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
			PRGEXEindex = 0;
    435a:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <PRGEXEindex>
    435e:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <PRGEXEindex+0x1>
			ProgramRun = 1;
    4362:	31 e0       	ldi	r19, 0x01	; 1
    4364:	30 93 ca 24 	sts	0x24CA, r19	; 0x8024ca <ProgramRun>
			printf("Program is running\r\n");
    4368:	84 ea       	ldi	r24, 0xA4	; 164
    436a:	93 e2       	ldi	r25, 0x23	; 35
    436c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
			sprintf(BufferSend,"!9800\r\n");
    4370:	88 e0       	ldi	r24, 0x08	; 8
    4372:	e8 eb       	ldi	r30, 0xB8	; 184
    4374:	f3 e2       	ldi	r31, 0x23	; 35
    4376:	a9 e6       	ldi	r26, 0x69	; 105
    4378:	b6 e2       	ldi	r27, 0x26	; 38
    437a:	01 90       	ld	r0, Z+
    437c:	0d 92       	st	X+, r0
    437e:	8a 95       	dec	r24
    4380:	e1 f7       	brne	.-8      	; 0x437a <__stack+0x37b>
			Responsing=1;
    4382:	41 e0       	ldi	r20, 0x01	; 1
    4384:	40 93 9c 25 	sts	0x259C, r20	; 0x80259c <Responsing>
			SetDataReady;
    4388:	e0 ea       	ldi	r30, 0xA0	; 160
    438a:	f6 e0       	ldi	r31, 0x06	; 6
    438c:	84 81       	ldd	r24, Z+4	; 0x04
    438e:	81 60       	ori	r24, 0x01	; 1
    4390:	84 83       	std	Z+4, r24	; 0x04
    4392:	60 c0       	rjmp	.+192    	; 0x4454 <__stack+0x455>
		}
		else if(IsPause==1)
    4394:	80 91 52 24 	lds	r24, 0x2452	; 0x802452 <IsPause>
    4398:	81 30       	cpi	r24, 0x01	; 1
    439a:	09 f0       	breq	.+2      	; 0x439e <__stack+0x39f>
    439c:	5b c0       	rjmp	.+182    	; 0x4454 <__stack+0x455>
		{
			PRGExe();
    439e:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z6PRGExev>
			IsPause=0;
    43a2:	10 92 52 24 	sts	0x2452, r1	; 0x802452 <IsPause>
    43a6:	56 c0       	rjmp	.+172    	; 0x4454 <__stack+0x455>
		}
	}
	else if(strncmp(cmdTemp,"#9900",5)==0) //
    43a8:	45 e0       	ldi	r20, 0x05	; 5
    43aa:	50 e0       	ldi	r21, 0x00	; 0
    43ac:	60 ec       	ldi	r22, 0xC0	; 192
    43ae:	73 e2       	ldi	r23, 0x23	; 35
    43b0:	8d ea       	ldi	r24, 0xAD	; 173
    43b2:	94 e2       	ldi	r25, 0x24	; 36
    43b4:	0e 94 6d 2b 	call	0x56da	; 0x56da <strncmp>
    43b8:	89 2b       	or	r24, r25
    43ba:	09 f0       	breq	.+2      	; 0x43be <__stack+0x3bf>
    43bc:	46 c0       	rjmp	.+140    	; 0x444a <__stack+0x44b>
	{
		ContinuousRead=0;
    43be:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
		readRam();
    43c2:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
		readRam();
    43c6:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
		readRam();
    43ca:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
		sprintf(BufferSend,"!9800\r\nPL:%u\tMD:%u\tMv1:%ld\tMaxDTG:%ld\tMaxSpeed:%ld\tACCDTG:%ld\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode,CMDPRGlist.Move[0],CMDPRGlist.MaxDistanceToGo,CMDPRGlist.MaxSpeed,CMDPRGlist.ACCDTG);
    43ce:	ec e4       	ldi	r30, 0x4C	; 76
    43d0:	f5 e2       	ldi	r31, 0x25	; 37
    43d2:	83 a9       	ldd	r24, Z+51	; 0x33
    43d4:	8f 93       	push	r24
    43d6:	82 a9       	ldd	r24, Z+50	; 0x32
    43d8:	8f 93       	push	r24
    43da:	81 a9       	ldd	r24, Z+49	; 0x31
    43dc:	8f 93       	push	r24
    43de:	80 a9       	ldd	r24, Z+48	; 0x30
    43e0:	8f 93       	push	r24
    43e2:	83 a1       	ldd	r24, Z+35	; 0x23
    43e4:	8f 93       	push	r24
    43e6:	82 a1       	ldd	r24, Z+34	; 0x22
    43e8:	8f 93       	push	r24
    43ea:	81 a1       	ldd	r24, Z+33	; 0x21
    43ec:	8f 93       	push	r24
    43ee:	80 a1       	ldd	r24, Z+32	; 0x20
    43f0:	8f 93       	push	r24
    43f2:	87 a1       	ldd	r24, Z+39	; 0x27
    43f4:	8f 93       	push	r24
    43f6:	86 a1       	ldd	r24, Z+38	; 0x26
    43f8:	8f 93       	push	r24
    43fa:	85 a1       	ldd	r24, Z+37	; 0x25
    43fc:	8f 93       	push	r24
    43fe:	84 a1       	ldd	r24, Z+36	; 0x24
    4400:	8f 93       	push	r24
    4402:	80 85       	ldd	r24, Z+8	; 0x08
    4404:	8f 93       	push	r24
    4406:	87 81       	ldd	r24, Z+7	; 0x07
    4408:	8f 93       	push	r24
    440a:	86 81       	ldd	r24, Z+6	; 0x06
    440c:	8f 93       	push	r24
    440e:	85 81       	ldd	r24, Z+5	; 0x05
    4410:	8f 93       	push	r24
    4412:	83 81       	ldd	r24, Z+3	; 0x03
    4414:	1f 92       	push	r1
    4416:	8f 93       	push	r24
    4418:	81 81       	ldd	r24, Z+1	; 0x01
    441a:	8f 93       	push	r24
    441c:	80 81       	ld	r24, Z
    441e:	8f 93       	push	r24
    4420:	86 ec       	ldi	r24, 0xC6	; 198
    4422:	93 e2       	ldi	r25, 0x23	; 35
    4424:	9f 93       	push	r25
    4426:	8f 93       	push	r24
    4428:	89 e6       	ldi	r24, 0x69	; 105
    442a:	96 e2       	ldi	r25, 0x26	; 38
    442c:	9f 93       	push	r25
    442e:	8f 93       	push	r24
    4430:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
		Responsing=1;
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
		SetDataReady;
    443a:	e0 ea       	ldi	r30, 0xA0	; 160
    443c:	f6 e0       	ldi	r31, 0x06	; 6
    443e:	84 81       	ldd	r24, Z+4	; 0x04
    4440:	81 60       	ori	r24, 0x01	; 1
    4442:	84 83       	std	Z+4, r24	; 0x04
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	05 c0       	rjmp	.+10     	; 0x4454 <__stack+0x455>
	}
	else
	{
		ClrDataReady;
    444a:	e0 ea       	ldi	r30, 0xA0	; 160
    444c:	f6 e0       	ldi	r31, 0x06	; 6
    444e:	84 81       	ldd	r24, Z+4	; 0x04
    4450:	8e 7f       	andi	r24, 0xFE	; 254
    4452:	84 83       	std	Z+4, r24	; 0x04
	}
}
    4454:	2b 96       	adiw	r28, 0x0b	; 11
    4456:	cd bf       	out	0x3d, r28	; 61
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	df 91       	pop	r29
    445c:	cf 91       	pop	r28
    445e:	1f 91       	pop	r17
    4460:	0f 91       	pop	r16
    4462:	ff 90       	pop	r15
    4464:	ef 90       	pop	r14
    4466:	df 90       	pop	r13
    4468:	cf 90       	pop	r12
    446a:	bf 90       	pop	r11
    446c:	af 90       	pop	r10
    446e:	9f 90       	pop	r9
    4470:	8f 90       	pop	r8
    4472:	7f 90       	pop	r7
    4474:	6f 90       	pop	r6
    4476:	5f 90       	pop	r5
    4478:	4f 90       	pop	r4
    447a:	3f 90       	pop	r3
    447c:	2f 90       	pop	r2
    447e:	08 95       	ret

00004480 <_Z18system_clocks_initv>:


void system_clocks_init(void) // System Clocks initialization
{
	unsigned char n,s;
	s = SREG;
    4480:	9f b7       	in	r25, 0x3f	; 63
	asm("cli");
    4482:	f8 94       	cli
	OSC.CTRL|=OSC_RC32KEN_bm;
    4484:	e0 e5       	ldi	r30, 0x50	; 80
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	80 81       	ld	r24, Z
    448a:	84 60       	ori	r24, 0x04	; 4
    448c:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
    448e:	81 81       	ldd	r24, Z+1	; 0x01
    4490:	82 ff       	sbrs	r24, 2
    4492:	fd cf       	rjmp	.-6      	; 0x448e <_Z18system_clocks_initv+0xe>
	OSC.CTRL|=OSC_RC32MEN_bm;
    4494:	e0 e5       	ldi	r30, 0x50	; 80
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	82 60       	ori	r24, 0x02	; 2
    449c:	80 83       	st	Z, r24
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    449e:	a0 e4       	ldi	r26, 0x40	; 64
    44a0:	b0 e0       	ldi	r27, 0x00	; 0
    44a2:	11 96       	adiw	r26, 0x01	; 1
    44a4:	8c 91       	ld	r24, X
    44a6:	11 97       	sbiw	r26, 0x01	; 1
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
    44a8:	80 78       	andi	r24, 0x80	; 128
	CCP=CCP_IOREG_gc;
    44aa:	28 ed       	ldi	r18, 0xD8	; 216
    44ac:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
    44ae:	11 96       	adiw	r26, 0x01	; 1
    44b0:	8c 93       	st	X, r24
	OSC.DFLLCTRL&= ~(OSC_RC32MCREF_bm | OSC_RC2MCREF_bm);
    44b2:	86 81       	ldd	r24, Z+6	; 0x06
    44b4:	8c 7f       	andi	r24, 0xFC	; 252
    44b6:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
    44b8:	e0 e6       	ldi	r30, 0x60	; 96
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 81       	ld	r24, Z
    44be:	81 60       	ori	r24, 0x01	; 1
    44c0:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
    44c2:	e0 e5       	ldi	r30, 0x50	; 80
    44c4:	f0 e0       	ldi	r31, 0x00	; 0
    44c6:	81 81       	ldd	r24, Z+1	; 0x01
    44c8:	81 ff       	sbrs	r24, 1
    44ca:	fd cf       	rjmp	.-6      	; 0x44c6 <_Z18system_clocks_initv+0x46>
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
    44cc:	e0 e4       	ldi	r30, 0x40	; 64
    44ce:	f0 e0       	ldi	r31, 0x00	; 0
    44d0:	80 81       	ld	r24, Z
    44d2:	88 7f       	andi	r24, 0xF8	; 248
    44d4:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
    44d6:	28 ed       	ldi	r18, 0xD8	; 216
    44d8:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
    44da:	80 83       	st	Z, r24
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    44dc:	e0 e5       	ldi	r30, 0x50	; 80
    44de:	f0 e0       	ldi	r31, 0x00	; 0
    44e0:	80 81       	ld	r24, Z
    44e2:	86 7e       	andi	r24, 0xE6	; 230
    44e4:	80 83       	st	Z, r24
	PORTCFG.CLKEVOUT&= ~PORTCFG_CLKOUT_gm;
    44e6:	e0 eb       	ldi	r30, 0xB0	; 176
    44e8:	f0 e0       	ldi	r31, 0x00	; 0
    44ea:	84 81       	ldd	r24, Z+4	; 0x04
    44ec:	8c 7f       	andi	r24, 0xFC	; 252
    44ee:	84 83       	std	Z+4, r24	; 0x04
	SREG = s;
    44f0:	9f bf       	out	0x3f, r25	; 63
    44f2:	08 95       	ret

000044f4 <__vector_96>:
}

// PORTH interrupt 0 service routine
// JOG Interrupt routine for positive direction
ISR (PORTH_INT0_vect)
{
    44f4:	1f 92       	push	r1
    44f6:	0f 92       	push	r0
    44f8:	0f b6       	in	r0, 0x3f	; 63
    44fa:	0f 92       	push	r0
    44fc:	11 24       	eor	r1, r1
    44fe:	08 b6       	in	r0, 0x38	; 56
    4500:	0f 92       	push	r0
    4502:	18 be       	out	0x38, r1	; 56
    4504:	09 b6       	in	r0, 0x39	; 57
    4506:	0f 92       	push	r0
    4508:	19 be       	out	0x39, r1	; 57
    450a:	0a b6       	in	r0, 0x3a	; 58
    450c:	0f 92       	push	r0
    450e:	1a be       	out	0x3a, r1	; 58
    4510:	0b b6       	in	r0, 0x3b	; 59
    4512:	0f 92       	push	r0
    4514:	1b be       	out	0x3b, r1	; 59
    4516:	4f 92       	push	r4
    4518:	5f 92       	push	r5
    451a:	6f 92       	push	r6
    451c:	7f 92       	push	r7
    451e:	8f 92       	push	r8
    4520:	9f 92       	push	r9
    4522:	af 92       	push	r10
    4524:	bf 92       	push	r11
    4526:	cf 92       	push	r12
    4528:	df 92       	push	r13
    452a:	ef 92       	push	r14
    452c:	ff 92       	push	r15
    452e:	2f 93       	push	r18
    4530:	3f 93       	push	r19
    4532:	4f 93       	push	r20
    4534:	5f 93       	push	r21
    4536:	6f 93       	push	r22
    4538:	7f 93       	push	r23
    453a:	8f 93       	push	r24
    453c:	9f 93       	push	r25
    453e:	af 93       	push	r26
    4540:	bf 93       	push	r27
    4542:	ef 93       	push	r30
    4544:	ff 93       	push	r31
    4546:	cf 93       	push	r28
    4548:	df 93       	push	r29
    454a:	00 d0       	rcall	.+0      	; 0x454c <__vector_96+0x58>
    454c:	00 d0       	rcall	.+0      	; 0x454e <__vector_96+0x5a>
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
	if(JogPosInput)
    4552:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4556:	81 ff       	sbrs	r24, 1
    4558:	fe c0       	rjmp	.+508    	; 0x4756 <__vector_96+0x262>
	{
		printf("Jog+\r\n");
    455a:	86 e0       	ldi	r24, 0x06	; 6
    455c:	94 e2       	ldi	r25, 0x24	; 36
    455e:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
		if(!JogNegInput)
    4562:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4566:	83 fd       	sbrc	r24, 3
    4568:	2b c1       	rjmp	.+598    	; 0x47c0 <__vector_96+0x2cc>
		{
			MaxSpeed=10000;
    456a:	80 e1       	ldi	r24, 0x10	; 16
    456c:	97 e2       	ldi	r25, 0x27	; 39
    456e:	a0 e0       	ldi	r26, 0x00	; 0
    4570:	b0 e0       	ldi	r27, 0x00	; 0
    4572:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    4576:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    457a:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    457e:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			IACC=5000;
    4582:	88 e8       	ldi	r24, 0x88	; 136
    4584:	93 e1       	ldi	r25, 0x13	; 19
    4586:	a0 e0       	ldi	r26, 0x00	; 0
    4588:	b0 e0       	ldi	r27, 0x00	; 0
    458a:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <IACC>
    458e:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <IACC+0x1>
    4592:	a0 93 85 24 	sts	0x2485, r26	; 0x802485 <IACC+0x2>
    4596:	b0 93 86 24 	sts	0x2486, r27	; 0x802486 <IACC+0x3>
			IDEC=5000;
    459a:	80 93 7f 24 	sts	0x247F, r24	; 0x80247f <IDEC>
    459e:	90 93 80 24 	sts	0x2480, r25	; 0x802480 <IDEC+0x1>
    45a2:	a0 93 81 24 	sts	0x2481, r26	; 0x802481 <IDEC+0x2>
    45a6:	b0 93 82 24 	sts	0x2482, r27	; 0x802482 <IDEC+0x3>
			CurSpeedFrq=0;
    45aa:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    45ae:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    45b2:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    45b6:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    45ba:	8f ef       	ldi	r24, 0xFF	; 255
    45bc:	9f ef       	ldi	r25, 0xFF	; 255
    45be:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    45c2:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    45c6:	82 e3       	ldi	r24, 0x32	; 50
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	a0 e0       	ldi	r26, 0x00	; 0
    45cc:	b0 e0       	ldi	r27, 0x00	; 0
    45ce:	80 93 73 24 	sts	0x2473, r24	; 0x802473 <ACCSpeedINT>
    45d2:	90 93 74 24 	sts	0x2474, r25	; 0x802474 <ACCSpeedINT+0x1>
    45d6:	a0 93 75 24 	sts	0x2475, r26	; 0x802475 <ACCSpeedINT+0x2>
    45da:	b0 93 76 24 	sts	0x2476, r27	; 0x802476 <ACCSpeedINT+0x3>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    45de:	80 93 6f 24 	sts	0x246F, r24	; 0x80246f <DECSpeedINT>
    45e2:	90 93 70 24 	sts	0x2470, r25	; 0x802470 <DECSpeedINT+0x1>
    45e6:	a0 93 71 24 	sts	0x2471, r26	; 0x802471 <DECSpeedINT+0x2>
    45ea:	b0 93 72 24 	sts	0x2472, r27	; 0x802472 <DECSpeedINT+0x3>

			if(!LIM_POS1 && Axes[SelectedAxis].HardwareLimitPosIsActive)
    45ee:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    45f2:	83 fd       	sbrc	r24, 3
    45f4:	0f c0       	rjmp	.+30     	; 0x4614 <__vector_96+0x120>
    45f6:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <SelectedAxis>
    45fa:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <SelectedAxis+0x1>
    45fe:	2b e2       	ldi	r18, 0x2B	; 43
    4600:	28 9f       	mul	r18, r24
    4602:	f0 01       	movw	r30, r0
    4604:	29 9f       	mul	r18, r25
    4606:	f0 0d       	add	r31, r0
    4608:	11 24       	eor	r1, r1
    460a:	e5 53       	subi	r30, 0x35	; 53
    460c:	fb 4d       	sbci	r31, 0xDB	; 219
    460e:	21 a5       	ldd	r18, Z+41	; 0x29
    4610:	21 11       	cpse	r18, r1
    4612:	c1 c0       	rjmp	.+386    	; 0x4796 <__vector_96+0x2a2>
			MaxSpeed=Axes[SelectedAxis].MaxSpeed;
			IACC=Axes[SelectedAxis].ACC;
    4614:	20 91 66 24 	lds	r18, 0x2466	; 0x802466 <SelectedAxis>
    4618:	30 91 67 24 	lds	r19, 0x2467	; 0x802467 <SelectedAxis+0x1>
    461c:	2d 83       	std	Y+5, r18	; 0x05
    461e:	3e 83       	std	Y+6, r19	; 0x06
    4620:	8b e2       	ldi	r24, 0x2B	; 43
    4622:	82 9f       	mul	r24, r18
    4624:	f0 01       	movw	r30, r0
    4626:	83 9f       	mul	r24, r19
    4628:	f0 0d       	add	r31, r0
    462a:	11 24       	eor	r1, r1
    462c:	e5 53       	subi	r30, 0x35	; 53
    462e:	fb 4d       	sbci	r31, 0xDB	; 219
    4630:	41 84       	ldd	r4, Z+9	; 0x09
    4632:	52 84       	ldd	r5, Z+10	; 0x0a
    4634:	63 84       	ldd	r6, Z+11	; 0x0b
    4636:	74 84       	ldd	r7, Z+12	; 0x0c
    4638:	40 92 83 24 	sts	0x2483, r4	; 0x802483 <IACC>
    463c:	50 92 84 24 	sts	0x2484, r5	; 0x802484 <IACC+0x1>
    4640:	60 92 85 24 	sts	0x2485, r6	; 0x802485 <IACC+0x2>
    4644:	70 92 86 24 	sts	0x2486, r7	; 0x802486 <IACC+0x3>
			IDEC=Axes[SelectedAxis].DEC;
    4648:	85 84       	ldd	r8, Z+13	; 0x0d
    464a:	96 84       	ldd	r9, Z+14	; 0x0e
    464c:	a7 84       	ldd	r10, Z+15	; 0x0f
    464e:	b0 88       	ldd	r11, Z+16	; 0x10
    4650:	80 92 7f 24 	sts	0x247F, r8	; 0x80247f <IDEC>
    4654:	90 92 80 24 	sts	0x2480, r9	; 0x802480 <IDEC+0x1>
    4658:	a0 92 81 24 	sts	0x2481, r10	; 0x802481 <IDEC+0x2>
    465c:	b0 92 82 24 	sts	0x2482, r11	; 0x802482 <IDEC+0x3>
					
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    4660:	c0 90 87 24 	lds	r12, 0x2487	; 0x802487 <MaxSpeed>
    4664:	d0 90 88 24 	lds	r13, 0x2488	; 0x802488 <MaxSpeed+0x1>
    4668:	e0 90 89 24 	lds	r14, 0x2489	; 0x802489 <MaxSpeed+0x2>
    466c:	f0 90 8a 24 	lds	r15, 0x248A	; 0x80248a <MaxSpeed+0x3>
    4670:	c7 01       	movw	r24, r14
    4672:	b6 01       	movw	r22, r12
    4674:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	48 ec       	ldi	r20, 0xC8	; 200
    467e:	52 e4       	ldi	r21, 0x42	; 66
    4680:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    4684:	69 83       	std	Y+1, r22	; 0x01
    4686:	7a 83       	std	Y+2, r23	; 0x02
    4688:	8b 83       	std	Y+3, r24	; 0x03
    468a:	9c 83       	std	Y+4, r25	; 0x04
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    468c:	c3 01       	movw	r24, r6
    468e:	b2 01       	movw	r22, r4
    4690:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4694:	9b 01       	movw	r18, r22
    4696:	ac 01       	movw	r20, r24
    4698:	69 81       	ldd	r22, Y+1	; 0x01
    469a:	7a 81       	ldd	r23, Y+2	; 0x02
    469c:	8b 81       	ldd	r24, Y+3	; 0x03
    469e:	9c 81       	ldd	r25, Y+4	; 0x04
    46a0:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    46a4:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    46a8:	9b 01       	movw	r18, r22
    46aa:	ac 01       	movw	r20, r24
    46ac:	c7 01       	movw	r24, r14
    46ae:	b6 01       	movw	r22, r12
    46b0:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    46b4:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    46b8:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    46bc:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    46c0:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
					
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    46c4:	c5 01       	movw	r24, r10
    46c6:	b4 01       	movw	r22, r8
    46c8:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    46cc:	9b 01       	movw	r18, r22
    46ce:	ac 01       	movw	r20, r24
    46d0:	69 81       	ldd	r22, Y+1	; 0x01
    46d2:	7a 81       	ldd	r23, Y+2	; 0x02
    46d4:	8b 81       	ldd	r24, Y+3	; 0x03
    46d6:	9c 81       	ldd	r25, Y+4	; 0x04
    46d8:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    46dc:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    46e0:	9b 01       	movw	r18, r22
    46e2:	ac 01       	movw	r20, r24
    46e4:	c7 01       	movw	r24, r14
    46e6:	b6 01       	movw	r22, r12
    46e8:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    46ec:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    46f0:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    46f4:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    46f8:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
					
			SET_DIR1;
    46fc:	e0 e2       	ldi	r30, 0x20	; 32
    46fe:	f7 e0       	ldi	r31, 0x07	; 7
    4700:	84 81       	ldd	r24, Z+4	; 0x04
    4702:	80 61       	ori	r24, 0x10	; 16
    4704:	84 83       	std	Z+4, r24	; 0x04
			FreeJog=1;
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <FreeJog>
    470e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <FreeJog+0x1>
			Ma[SelectedAxis] = 1000;
    4712:	ed 81       	ldd	r30, Y+5	; 0x05
    4714:	fe 81       	ldd	r31, Y+6	; 0x06
    4716:	ee 0f       	add	r30, r30
    4718:	ff 1f       	adc	r31, r31
    471a:	ee 51       	subi	r30, 0x1E	; 30
    471c:	f9 4d       	sbci	r31, 0xD9	; 217
    471e:	88 ee       	ldi	r24, 0xE8	; 232
    4720:	93 e0       	ldi	r25, 0x03	; 3
    4722:	80 83       	st	Z, r24
    4724:	91 83       	std	Z+1, r25	; 0x01
			DistanceToGo[SelectedAxis] = 0x7FFFFFFF;
    4726:	8d 81       	ldd	r24, Y+5	; 0x05
    4728:	9e 81       	ldd	r25, Y+6	; 0x06
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	88 0f       	add	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	88 5e       	subi	r24, 0xE8	; 232
    4734:	98 4d       	sbci	r25, 0xD8	; 216
    4736:	89 83       	std	Y+1, r24	; 0x01
    4738:	9a 83       	std	Y+2, r25	; 0x02
    473a:	8f ef       	ldi	r24, 0xFF	; 255
    473c:	9f ef       	ldi	r25, 0xFF	; 255
    473e:	af ef       	ldi	r26, 0xFF	; 255
    4740:	bf e7       	ldi	r27, 0x7F	; 127
    4742:	e9 81       	ldd	r30, Y+1	; 0x01
    4744:	fa 81       	ldd	r31, Y+2	; 0x02
    4746:	80 83       	st	Z, r24
    4748:	91 83       	std	Z+1, r25	; 0x01
    474a:	a2 83       	std	Z+2, r26	; 0x02
    474c:	b3 83       	std	Z+3, r27	; 0x03
			
			ACC=1;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <ACC>
    4754:	35 c0       	rjmp	.+106    	; 0x47c0 <__vector_96+0x2cc>
		}
	}
	else if((FreeJog == 1 && DIR1)||(FreeJog == 2 && DIR2)||(FreeJog == 3 && DIR3))
    4756:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <FreeJog>
    475a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <FreeJog+0x1>
    475e:	81 30       	cpi	r24, 0x01	; 1
    4760:	91 05       	cpc	r25, r1
    4762:	29 f4       	brne	.+10     	; 0x476e <__vector_96+0x27a>
    4764:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4768:	84 fd       	sbrc	r24, 4
    476a:	0f c0       	rjmp	.+30     	; 0x478a <__vector_96+0x296>
    476c:	29 c0       	rjmp	.+82     	; 0x47c0 <__vector_96+0x2cc>
    476e:	82 30       	cpi	r24, 0x02	; 2
    4770:	91 05       	cpc	r25, r1
    4772:	29 f4       	brne	.+10     	; 0x477e <__vector_96+0x28a>
    4774:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4778:	82 fd       	sbrc	r24, 2
    477a:	07 c0       	rjmp	.+14     	; 0x478a <__vector_96+0x296>
    477c:	21 c0       	rjmp	.+66     	; 0x47c0 <__vector_96+0x2cc>
    477e:	03 97       	sbiw	r24, 0x03	; 3
    4780:	f9 f4       	brne	.+62     	; 0x47c0 <__vector_96+0x2cc>
    4782:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4786:	80 ff       	sbrs	r24, 0
    4788:	1b c0       	rjmp	.+54     	; 0x47c0 <__vector_96+0x2cc>
	{
		ACC=0;
    478a:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
		DEC=1;
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	80 93 6d 24 	sts	0x246D, r24	; 0x80246d <DEC>
	}
}
    4794:	15 c0       	rjmp	.+42     	; 0x47c0 <__vector_96+0x2cc>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;

			if(!LIM_POS1 && Axes[SelectedAxis].HardwareLimitPosIsActive)
			MaxSpeed=Axes[SelectedAxis].MaxSpeed;
    4796:	2b e2       	ldi	r18, 0x2B	; 43
    4798:	28 9f       	mul	r18, r24
    479a:	f0 01       	movw	r30, r0
    479c:	29 9f       	mul	r18, r25
    479e:	f0 0d       	add	r31, r0
    47a0:	11 24       	eor	r1, r1
    47a2:	e5 53       	subi	r30, 0x35	; 53
    47a4:	fb 4d       	sbci	r31, 0xDB	; 219
    47a6:	85 81       	ldd	r24, Z+5	; 0x05
    47a8:	96 81       	ldd	r25, Z+6	; 0x06
    47aa:	a7 81       	ldd	r26, Z+7	; 0x07
    47ac:	b0 85       	ldd	r27, Z+8	; 0x08
    47ae:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    47b2:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    47b6:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    47ba:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
    47be:	2a cf       	rjmp	.-428    	; 0x4614 <__vector_96+0x120>
	else if((FreeJog == 1 && DIR1)||(FreeJog == 2 && DIR2)||(FreeJog == 3 && DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    47c0:	26 96       	adiw	r28, 0x06	; 6
    47c2:	cd bf       	out	0x3d, r28	; 61
    47c4:	de bf       	out	0x3e, r29	; 62
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	ff 91       	pop	r31
    47cc:	ef 91       	pop	r30
    47ce:	bf 91       	pop	r27
    47d0:	af 91       	pop	r26
    47d2:	9f 91       	pop	r25
    47d4:	8f 91       	pop	r24
    47d6:	7f 91       	pop	r23
    47d8:	6f 91       	pop	r22
    47da:	5f 91       	pop	r21
    47dc:	4f 91       	pop	r20
    47de:	3f 91       	pop	r19
    47e0:	2f 91       	pop	r18
    47e2:	ff 90       	pop	r15
    47e4:	ef 90       	pop	r14
    47e6:	df 90       	pop	r13
    47e8:	cf 90       	pop	r12
    47ea:	bf 90       	pop	r11
    47ec:	af 90       	pop	r10
    47ee:	9f 90       	pop	r9
    47f0:	8f 90       	pop	r8
    47f2:	7f 90       	pop	r7
    47f4:	6f 90       	pop	r6
    47f6:	5f 90       	pop	r5
    47f8:	4f 90       	pop	r4
    47fa:	0f 90       	pop	r0
    47fc:	0b be       	out	0x3b, r0	; 59
    47fe:	0f 90       	pop	r0
    4800:	0a be       	out	0x3a, r0	; 58
    4802:	0f 90       	pop	r0
    4804:	09 be       	out	0x39, r0	; 57
    4806:	0f 90       	pop	r0
    4808:	08 be       	out	0x38, r0	; 56
    480a:	0f 90       	pop	r0
    480c:	0f be       	out	0x3f, r0	; 63
    480e:	0f 90       	pop	r0
    4810:	1f 90       	pop	r1
    4812:	18 95       	reti

00004814 <__vector_64>:

// PORTH interrupt 0 service routine
// Interrupt for Negative jog key
ISR (PORTD_INT0_vect)
{
    4814:	1f 92       	push	r1
    4816:	0f 92       	push	r0
    4818:	0f b6       	in	r0, 0x3f	; 63
    481a:	0f 92       	push	r0
    481c:	11 24       	eor	r1, r1
    481e:	08 b6       	in	r0, 0x38	; 56
    4820:	0f 92       	push	r0
    4822:	18 be       	out	0x38, r1	; 56
    4824:	09 b6       	in	r0, 0x39	; 57
    4826:	0f 92       	push	r0
    4828:	19 be       	out	0x39, r1	; 57
    482a:	0a b6       	in	r0, 0x3a	; 58
    482c:	0f 92       	push	r0
    482e:	1a be       	out	0x3a, r1	; 58
    4830:	0b b6       	in	r0, 0x3b	; 59
    4832:	0f 92       	push	r0
    4834:	1b be       	out	0x3b, r1	; 59
    4836:	4f 92       	push	r4
    4838:	5f 92       	push	r5
    483a:	6f 92       	push	r6
    483c:	7f 92       	push	r7
    483e:	8f 92       	push	r8
    4840:	9f 92       	push	r9
    4842:	af 92       	push	r10
    4844:	bf 92       	push	r11
    4846:	cf 92       	push	r12
    4848:	df 92       	push	r13
    484a:	ef 92       	push	r14
    484c:	ff 92       	push	r15
    484e:	2f 93       	push	r18
    4850:	3f 93       	push	r19
    4852:	4f 93       	push	r20
    4854:	5f 93       	push	r21
    4856:	6f 93       	push	r22
    4858:	7f 93       	push	r23
    485a:	8f 93       	push	r24
    485c:	9f 93       	push	r25
    485e:	af 93       	push	r26
    4860:	bf 93       	push	r27
    4862:	ef 93       	push	r30
    4864:	ff 93       	push	r31
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	00 d0       	rcall	.+0      	; 0x486c <__vector_64+0x58>
    486c:	00 d0       	rcall	.+0      	; 0x486e <__vector_64+0x5a>
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62
	if(JogNegInput)
    4872:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4876:	83 ff       	sbrs	r24, 3
    4878:	1a c1       	rjmp	.+564    	; 0x4aae <__vector_64+0x29a>
	{
		if(!JogPosInput)
    487a:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    487e:	81 fd       	sbrc	r24, 1
    4880:	4b c1       	rjmp	.+662    	; 0x4b18 <__vector_64+0x304>
		{
			CurSpeedFrq=0;
    4882:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    4886:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    488a:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    488e:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    4892:	8f ef       	ldi	r24, 0xFF	; 255
    4894:	9f ef       	ldi	r25, 0xFF	; 255
    4896:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    489a:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    489e:	c0 90 87 24 	lds	r12, 0x2487	; 0x802487 <MaxSpeed>
    48a2:	d0 90 88 24 	lds	r13, 0x2488	; 0x802488 <MaxSpeed+0x1>
    48a6:	e0 90 89 24 	lds	r14, 0x2489	; 0x802489 <MaxSpeed+0x2>
    48aa:	f0 90 8a 24 	lds	r15, 0x248A	; 0x80248a <MaxSpeed+0x3>
    48ae:	c7 01       	movw	r24, r14
    48b0:	b6 01       	movw	r22, r12
    48b2:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	48 ec       	ldi	r20, 0xC8	; 200
    48bc:	52 e4       	ldi	r21, 0x42	; 66
    48be:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    48c2:	4b 01       	movw	r8, r22
    48c4:	5c 01       	movw	r10, r24
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    48c6:	60 91 83 24 	lds	r22, 0x2483	; 0x802483 <IACC>
    48ca:	70 91 84 24 	lds	r23, 0x2484	; 0x802484 <IACC+0x1>
    48ce:	80 91 85 24 	lds	r24, 0x2485	; 0x802485 <IACC+0x2>
    48d2:	90 91 86 24 	lds	r25, 0x2486	; 0x802486 <IACC+0x3>
    48d6:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    48da:	9b 01       	movw	r18, r22
    48dc:	ac 01       	movw	r20, r24
    48de:	c5 01       	movw	r24, r10
    48e0:	b4 01       	movw	r22, r8
    48e2:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    48e6:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    48ea:	9b 01       	movw	r18, r22
    48ec:	ac 01       	movw	r20, r24
    48ee:	c7 01       	movw	r24, r14
    48f0:	b6 01       	movw	r22, r12
    48f2:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    48f6:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    48fa:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    48fe:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    4902:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    4906:	60 91 7f 24 	lds	r22, 0x247F	; 0x80247f <IDEC>
    490a:	70 91 80 24 	lds	r23, 0x2480	; 0x802480 <IDEC+0x1>
    490e:	80 91 81 24 	lds	r24, 0x2481	; 0x802481 <IDEC+0x2>
    4912:	90 91 82 24 	lds	r25, 0x2482	; 0x802482 <IDEC+0x3>
    4916:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    491a:	9b 01       	movw	r18, r22
    491c:	ac 01       	movw	r20, r24
    491e:	c5 01       	movw	r24, r10
    4920:	b4 01       	movw	r22, r8
    4922:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    4926:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    492a:	9b 01       	movw	r18, r22
    492c:	ac 01       	movw	r20, r24
    492e:	c7 01       	movw	r24, r14
    4930:	b6 01       	movw	r22, r12
    4932:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    4936:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    493a:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    493e:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    4942:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>

			if(!LIM_NEG1 && Axes[SelectedAxis].HardwareLimitNegIsActive)
    4946:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    494a:	84 fd       	sbrc	r24, 4
    494c:	0f c0       	rjmp	.+30     	; 0x496c <__vector_64+0x158>
    494e:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <SelectedAxis>
    4952:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <SelectedAxis+0x1>
    4956:	2b e2       	ldi	r18, 0x2B	; 43
    4958:	28 9f       	mul	r18, r24
    495a:	f0 01       	movw	r30, r0
    495c:	29 9f       	mul	r18, r25
    495e:	f0 0d       	add	r31, r0
    4960:	11 24       	eor	r1, r1
    4962:	e5 53       	subi	r30, 0x35	; 53
    4964:	fb 4d       	sbci	r31, 0xDB	; 219
    4966:	22 a5       	ldd	r18, Z+42	; 0x2a
    4968:	21 11       	cpse	r18, r1
    496a:	c1 c0       	rjmp	.+386    	; 0x4aee <__vector_64+0x2da>
			MaxSpeed=Axes[SelectedAxis].MaxSpeed;
			IACC=Axes[SelectedAxis].ACC;
    496c:	20 91 66 24 	lds	r18, 0x2466	; 0x802466 <SelectedAxis>
    4970:	30 91 67 24 	lds	r19, 0x2467	; 0x802467 <SelectedAxis+0x1>
    4974:	2d 83       	std	Y+5, r18	; 0x05
    4976:	3e 83       	std	Y+6, r19	; 0x06
    4978:	8b e2       	ldi	r24, 0x2B	; 43
    497a:	82 9f       	mul	r24, r18
    497c:	f0 01       	movw	r30, r0
    497e:	83 9f       	mul	r24, r19
    4980:	f0 0d       	add	r31, r0
    4982:	11 24       	eor	r1, r1
    4984:	e5 53       	subi	r30, 0x35	; 53
    4986:	fb 4d       	sbci	r31, 0xDB	; 219
    4988:	41 84       	ldd	r4, Z+9	; 0x09
    498a:	52 84       	ldd	r5, Z+10	; 0x0a
    498c:	63 84       	ldd	r6, Z+11	; 0x0b
    498e:	74 84       	ldd	r7, Z+12	; 0x0c
    4990:	40 92 83 24 	sts	0x2483, r4	; 0x802483 <IACC>
    4994:	50 92 84 24 	sts	0x2484, r5	; 0x802484 <IACC+0x1>
    4998:	60 92 85 24 	sts	0x2485, r6	; 0x802485 <IACC+0x2>
    499c:	70 92 86 24 	sts	0x2486, r7	; 0x802486 <IACC+0x3>
			IDEC=Axes[SelectedAxis].DEC;
    49a0:	85 84       	ldd	r8, Z+13	; 0x0d
    49a2:	96 84       	ldd	r9, Z+14	; 0x0e
    49a4:	a7 84       	ldd	r10, Z+15	; 0x0f
    49a6:	b0 88       	ldd	r11, Z+16	; 0x10
    49a8:	80 92 7f 24 	sts	0x247F, r8	; 0x80247f <IDEC>
    49ac:	90 92 80 24 	sts	0x2480, r9	; 0x802480 <IDEC+0x1>
    49b0:	a0 92 81 24 	sts	0x2481, r10	; 0x802481 <IDEC+0x2>
    49b4:	b0 92 82 24 	sts	0x2482, r11	; 0x802482 <IDEC+0x3>
					
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    49b8:	c0 90 87 24 	lds	r12, 0x2487	; 0x802487 <MaxSpeed>
    49bc:	d0 90 88 24 	lds	r13, 0x2488	; 0x802488 <MaxSpeed+0x1>
    49c0:	e0 90 89 24 	lds	r14, 0x2489	; 0x802489 <MaxSpeed+0x2>
    49c4:	f0 90 8a 24 	lds	r15, 0x248A	; 0x80248a <MaxSpeed+0x3>
    49c8:	c7 01       	movw	r24, r14
    49ca:	b6 01       	movw	r22, r12
    49cc:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    49d0:	20 e0       	ldi	r18, 0x00	; 0
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	48 ec       	ldi	r20, 0xC8	; 200
    49d6:	52 e4       	ldi	r21, 0x42	; 66
    49d8:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    49dc:	69 83       	std	Y+1, r22	; 0x01
    49de:	7a 83       	std	Y+2, r23	; 0x02
    49e0:	8b 83       	std	Y+3, r24	; 0x03
    49e2:	9c 83       	std	Y+4, r25	; 0x04
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    49e4:	c3 01       	movw	r24, r6
    49e6:	b2 01       	movw	r22, r4
    49e8:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    49ec:	9b 01       	movw	r18, r22
    49ee:	ac 01       	movw	r20, r24
    49f0:	69 81       	ldd	r22, Y+1	; 0x01
    49f2:	7a 81       	ldd	r23, Y+2	; 0x02
    49f4:	8b 81       	ldd	r24, Y+3	; 0x03
    49f6:	9c 81       	ldd	r25, Y+4	; 0x04
    49f8:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    49fc:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    4a00:	9b 01       	movw	r18, r22
    4a02:	ac 01       	movw	r20, r24
    4a04:	c7 01       	movw	r24, r14
    4a06:	b6 01       	movw	r22, r12
    4a08:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    4a0c:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    4a10:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    4a14:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    4a18:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
					
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    4a1c:	c5 01       	movw	r24, r10
    4a1e:	b4 01       	movw	r22, r8
    4a20:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4a24:	9b 01       	movw	r18, r22
    4a26:	ac 01       	movw	r20, r24
    4a28:	69 81       	ldd	r22, Y+1	; 0x01
    4a2a:	7a 81       	ldd	r23, Y+2	; 0x02
    4a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a30:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    4a34:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixsfsi>
    4a38:	9b 01       	movw	r18, r22
    4a3a:	ac 01       	movw	r20, r24
    4a3c:	c7 01       	movw	r24, r14
    4a3e:	b6 01       	movw	r22, r12
    4a40:	0e 94 09 2b 	call	0x5612	; 0x5612 <__divmodsi4>
    4a44:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    4a48:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    4a4c:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    4a50:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
					
			CLR_DIR1;
    4a54:	e0 e2       	ldi	r30, 0x20	; 32
    4a56:	f7 e0       	ldi	r31, 0x07	; 7
    4a58:	84 81       	ldd	r24, Z+4	; 0x04
    4a5a:	8f 7e       	andi	r24, 0xEF	; 239
    4a5c:	84 83       	std	Z+4, r24	; 0x04
			FreeJog=1;
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <FreeJog>
    4a66:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <FreeJog+0x1>
			Ma[SelectedAxis] = 1000;
    4a6a:	ed 81       	ldd	r30, Y+5	; 0x05
    4a6c:	fe 81       	ldd	r31, Y+6	; 0x06
    4a6e:	ee 0f       	add	r30, r30
    4a70:	ff 1f       	adc	r31, r31
    4a72:	ee 51       	subi	r30, 0x1E	; 30
    4a74:	f9 4d       	sbci	r31, 0xD9	; 217
    4a76:	88 ee       	ldi	r24, 0xE8	; 232
    4a78:	93 e0       	ldi	r25, 0x03	; 3
    4a7a:	80 83       	st	Z, r24
    4a7c:	91 83       	std	Z+1, r25	; 0x01
			DistanceToGo [SelectedAxis] = 0x7FFFFFFF;
    4a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a80:	9e 81       	ldd	r25, Y+6	; 0x06
    4a82:	88 0f       	add	r24, r24
    4a84:	99 1f       	adc	r25, r25
    4a86:	88 0f       	add	r24, r24
    4a88:	99 1f       	adc	r25, r25
    4a8a:	88 5e       	subi	r24, 0xE8	; 232
    4a8c:	98 4d       	sbci	r25, 0xD8	; 216
    4a8e:	89 83       	std	Y+1, r24	; 0x01
    4a90:	9a 83       	std	Y+2, r25	; 0x02
    4a92:	8f ef       	ldi	r24, 0xFF	; 255
    4a94:	9f ef       	ldi	r25, 0xFF	; 255
    4a96:	af ef       	ldi	r26, 0xFF	; 255
    4a98:	bf e7       	ldi	r27, 0x7F	; 127
    4a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    4a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    4a9e:	80 83       	st	Z, r24
    4aa0:	91 83       	std	Z+1, r25	; 0x01
    4aa2:	a2 83       	std	Z+2, r26	; 0x02
    4aa4:	b3 83       	std	Z+3, r27	; 0x03

			ACC=1;
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <ACC>
    4aac:	35 c0       	rjmp	.+106    	; 0x4b18 <__vector_64+0x304>
		}
	}
	else if((FreeJog==1 && !DIR1)||(FreeJog==2 && !DIR2)||(FreeJog==3 && !DIR3))
    4aae:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <FreeJog>
    4ab2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <FreeJog+0x1>
    4ab6:	81 30       	cpi	r24, 0x01	; 1
    4ab8:	91 05       	cpc	r25, r1
    4aba:	29 f4       	brne	.+10     	; 0x4ac6 <__vector_64+0x2b2>
    4abc:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4ac0:	84 ff       	sbrs	r24, 4
    4ac2:	0f c0       	rjmp	.+30     	; 0x4ae2 <__vector_64+0x2ce>
    4ac4:	29 c0       	rjmp	.+82     	; 0x4b18 <__vector_64+0x304>
    4ac6:	82 30       	cpi	r24, 0x02	; 2
    4ac8:	91 05       	cpc	r25, r1
    4aca:	29 f4       	brne	.+10     	; 0x4ad6 <__vector_64+0x2c2>
    4acc:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4ad0:	82 ff       	sbrs	r24, 2
    4ad2:	07 c0       	rjmp	.+14     	; 0x4ae2 <__vector_64+0x2ce>
    4ad4:	21 c0       	rjmp	.+66     	; 0x4b18 <__vector_64+0x304>
    4ad6:	03 97       	sbiw	r24, 0x03	; 3
    4ad8:	f9 f4       	brne	.+62     	; 0x4b18 <__vector_64+0x304>
    4ada:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4ade:	80 fd       	sbrc	r24, 0
    4ae0:	1b c0       	rjmp	.+54     	; 0x4b18 <__vector_64+0x304>
	{
		ACC=0;
    4ae2:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
		DEC=1;
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	80 93 6d 24 	sts	0x246D, r24	; 0x80246d <DEC>
	}
}
    4aec:	15 c0       	rjmp	.+42     	; 0x4b18 <__vector_64+0x304>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;

			if(!LIM_NEG1 && Axes[SelectedAxis].HardwareLimitNegIsActive)
			MaxSpeed=Axes[SelectedAxis].MaxSpeed;
    4aee:	2b e2       	ldi	r18, 0x2B	; 43
    4af0:	28 9f       	mul	r18, r24
    4af2:	f0 01       	movw	r30, r0
    4af4:	29 9f       	mul	r18, r25
    4af6:	f0 0d       	add	r31, r0
    4af8:	11 24       	eor	r1, r1
    4afa:	e5 53       	subi	r30, 0x35	; 53
    4afc:	fb 4d       	sbci	r31, 0xDB	; 219
    4afe:	85 81       	ldd	r24, Z+5	; 0x05
    4b00:	96 81       	ldd	r25, Z+6	; 0x06
    4b02:	a7 81       	ldd	r26, Z+7	; 0x07
    4b04:	b0 85       	ldd	r27, Z+8	; 0x08
    4b06:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    4b0a:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    4b0e:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    4b12:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
    4b16:	2a cf       	rjmp	.-428    	; 0x496c <__vector_64+0x158>
	else if((FreeJog==1 && !DIR1)||(FreeJog==2 && !DIR2)||(FreeJog==3 && !DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    4b18:	26 96       	adiw	r28, 0x06	; 6
    4b1a:	cd bf       	out	0x3d, r28	; 61
    4b1c:	de bf       	out	0x3e, r29	; 62
    4b1e:	df 91       	pop	r29
    4b20:	cf 91       	pop	r28
    4b22:	ff 91       	pop	r31
    4b24:	ef 91       	pop	r30
    4b26:	bf 91       	pop	r27
    4b28:	af 91       	pop	r26
    4b2a:	9f 91       	pop	r25
    4b2c:	8f 91       	pop	r24
    4b2e:	7f 91       	pop	r23
    4b30:	6f 91       	pop	r22
    4b32:	5f 91       	pop	r21
    4b34:	4f 91       	pop	r20
    4b36:	3f 91       	pop	r19
    4b38:	2f 91       	pop	r18
    4b3a:	ff 90       	pop	r15
    4b3c:	ef 90       	pop	r14
    4b3e:	df 90       	pop	r13
    4b40:	cf 90       	pop	r12
    4b42:	bf 90       	pop	r11
    4b44:	af 90       	pop	r10
    4b46:	9f 90       	pop	r9
    4b48:	8f 90       	pop	r8
    4b4a:	7f 90       	pop	r7
    4b4c:	6f 90       	pop	r6
    4b4e:	5f 90       	pop	r5
    4b50:	4f 90       	pop	r4
    4b52:	0f 90       	pop	r0
    4b54:	0b be       	out	0x3b, r0	; 59
    4b56:	0f 90       	pop	r0
    4b58:	0a be       	out	0x3a, r0	; 58
    4b5a:	0f 90       	pop	r0
    4b5c:	09 be       	out	0x39, r0	; 57
    4b5e:	0f 90       	pop	r0
    4b60:	08 be       	out	0x38, r0	; 56
    4b62:	0f 90       	pop	r0
    4b64:	0f be       	out	0x3f, r0	; 63
    4b66:	0f 90       	pop	r0
    4b68:	1f 90       	pop	r1
    4b6a:	18 95       	reti

00004b6c <__vector_65>:

//Port D interrupt
//Start Stop Key Interrupt
ISR (PORTD_INT1_vect)
{
    4b6c:	1f 92       	push	r1
    4b6e:	0f 92       	push	r0
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	0f 92       	push	r0
    4b74:	11 24       	eor	r1, r1
    4b76:	08 b6       	in	r0, 0x38	; 56
    4b78:	0f 92       	push	r0
    4b7a:	18 be       	out	0x38, r1	; 56
    4b7c:	09 b6       	in	r0, 0x39	; 57
    4b7e:	0f 92       	push	r0
    4b80:	19 be       	out	0x39, r1	; 57
    4b82:	0a b6       	in	r0, 0x3a	; 58
    4b84:	0f 92       	push	r0
    4b86:	1a be       	out	0x3a, r1	; 58
    4b88:	0b b6       	in	r0, 0x3b	; 59
    4b8a:	0f 92       	push	r0
    4b8c:	1b be       	out	0x3b, r1	; 59
    4b8e:	2f 92       	push	r2
    4b90:	3f 92       	push	r3
    4b92:	4f 92       	push	r4
    4b94:	5f 92       	push	r5
    4b96:	6f 92       	push	r6
    4b98:	7f 92       	push	r7
    4b9a:	8f 92       	push	r8
    4b9c:	9f 92       	push	r9
    4b9e:	af 92       	push	r10
    4ba0:	bf 92       	push	r11
    4ba2:	cf 92       	push	r12
    4ba4:	df 92       	push	r13
    4ba6:	ef 92       	push	r14
    4ba8:	ff 92       	push	r15
    4baa:	0f 93       	push	r16
    4bac:	1f 93       	push	r17
    4bae:	2f 93       	push	r18
    4bb0:	3f 93       	push	r19
    4bb2:	4f 93       	push	r20
    4bb4:	5f 93       	push	r21
    4bb6:	6f 93       	push	r22
    4bb8:	7f 93       	push	r23
    4bba:	8f 93       	push	r24
    4bbc:	9f 93       	push	r25
    4bbe:	af 93       	push	r26
    4bc0:	bf 93       	push	r27
    4bc2:	ef 93       	push	r30
    4bc4:	ff 93       	push	r31
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	00 d0       	rcall	.+0      	; 0x4bcc <__vector_65+0x60>
    4bcc:	00 d0       	rcall	.+0      	; 0x4bce <__vector_65+0x62>
    4bce:	cd b7       	in	r28, 0x3d	; 61
    4bd0:	de b7       	in	r29, 0x3e	; 62
	//printf("PortD INT1\r\n");
	if(RunProgramInput) //If Run Program Input pin is pressed
    4bd2:	e0 e6       	ldi	r30, 0x60	; 96
    4bd4:	f6 e0       	ldi	r31, 0x06	; 6
    4bd6:	80 85       	ldd	r24, Z+8	; 0x08
		//     {
		//         PRGExe();
		//         IsPause=0;
		//     }
	}
	if(StopProgramInput) //Stop Program Input pin
    4bd8:	80 85       	ldd	r24, Z+8	; 0x08
    4bda:	82 ff       	sbrs	r24, 2
    4bdc:	79 c1       	rjmp	.+754    	; 0x4ed0 <__vector_65+0x364>
	{
		if(ProgramRun) //if the program is in running mode
    4bde:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    4be2:	88 23       	and	r24, r24
    4be4:	e1 f0       	breq	.+56     	; 0x4c1e <__vector_65+0xb2>
		{
			IsPause=1;
    4be6:	81 e0       	ldi	r24, 0x01	; 1
    4be8:	80 93 52 24 	sts	0x2452, r24	; 0x802452 <IsPause>
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				DistanceToGo[ax] =0;
    4bec:	e8 e1       	ldi	r30, 0x18	; 24
    4bee:	f7 e2       	ldi	r31, 0x27	; 39
    4bf0:	10 82       	st	Z, r1
    4bf2:	11 82       	std	Z+1, r1	; 0x01
    4bf4:	12 82       	std	Z+2, r1	; 0x02
    4bf6:	13 82       	std	Z+3, r1	; 0x03
    4bf8:	14 82       	std	Z+4, r1	; 0x04
    4bfa:	15 82       	std	Z+5, r1	; 0x05
    4bfc:	16 82       	std	Z+6, r1	; 0x06
    4bfe:	17 82       	std	Z+7, r1	; 0x07
    4c00:	10 86       	std	Z+8, r1	; 0x08
    4c02:	11 86       	std	Z+9, r1	; 0x09
    4c04:	12 86       	std	Z+10, r1	; 0x0a
    4c06:	13 86       	std	Z+11, r1	; 0x0b
			}
			sprintf(BufferSend,"!4100\r\n");
    4c08:	98 e0       	ldi	r25, 0x08	; 8
    4c0a:	e5 e8       	ldi	r30, 0x85	; 133
    4c0c:	f3 e2       	ldi	r31, 0x23	; 35
    4c0e:	a9 e6       	ldi	r26, 0x69	; 105
    4c10:	b6 e2       	ldi	r27, 0x26	; 38
    4c12:	01 90       	ld	r0, Z+
    4c14:	0d 92       	st	X+, r0
    4c16:	9a 95       	dec	r25
    4c18:	e1 f7       	brne	.-8      	; 0x4c12 <__vector_65+0xa6>
			Responsing=1;
    4c1a:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
		}
		
		StopTime=0;
    4c1e:	10 92 51 24 	sts	0x2451, r1	; 0x802451 <StopTime>
		while(StopProgramInput)
    4c22:	0f 2e       	mov	r0, r31
    4c24:	f0 e6       	ldi	r31, 0x60	; 96
    4c26:	2f 2e       	mov	r2, r31
    4c28:	f6 e0       	ldi	r31, 0x06	; 6
    4c2a:	3f 2e       	mov	r3, r31
    4c2c:	f0 2d       	mov	r31, r0
    4c2e:	f1 01       	movw	r30, r2
    4c30:	80 85       	ldd	r24, Z+8	; 0x08
    4c32:	82 ff       	sbrs	r24, 2
    4c34:	4d c1       	rjmp	.+666    	; 0x4ed0 <__vector_65+0x364>
    4c36:	ff ef       	ldi	r31, 0xFF	; 255
    4c38:	23 ec       	ldi	r18, 0xC3	; 195
    4c3a:	89 e0       	ldi	r24, 0x09	; 9
    4c3c:	f1 50       	subi	r31, 0x01	; 1
    4c3e:	20 40       	sbci	r18, 0x00	; 0
    4c40:	80 40       	sbci	r24, 0x00	; 0
    4c42:	e1 f7       	brne	.-8      	; 0x4c3c <__vector_65+0xd0>
    4c44:	00 c0       	rjmp	.+0      	; 0x4c46 <__vector_65+0xda>
    4c46:	00 00       	nop
		{
			_delay_ms(100);
			StopTime++;
    4c48:	80 91 51 24 	lds	r24, 0x2451	; 0x802451 <StopTime>
    4c4c:	8f 5f       	subi	r24, 0xFF	; 255
    4c4e:	80 93 51 24 	sts	0x2451, r24	; 0x802451 <StopTime>
			if(StopTime>30)
    4c52:	8f 31       	cpi	r24, 0x1F	; 31
    4c54:	60 f3       	brcs	.-40     	; 0x4c2e <__vector_65+0xc2>
			{
				DO1_CLR; //Pen UP
    4c56:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>
    4c5a:	8b 7f       	andi	r24, 0xFB	; 251
    4c5c:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>

				while (IsAnyAxisMoving() == 1);
    4c60:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    4c64:	81 30       	cpi	r24, 0x01	; 1
    4c66:	f1 f3       	breq	.-4      	; 0x4c64 <__vector_65+0xf8>
    4c68:	04 e2       	ldi	r16, 0x24	; 36
    4c6a:	17 e2       	ldi	r17, 0x27	; 39
    4c6c:	e3 ed       	ldi	r30, 0xD3	; 211
    4c6e:	f6 e2       	ldi	r31, 0x26	; 38
    4c70:	0f 2e       	mov	r0, r31
    4c72:	f8 e1       	ldi	r31, 0x18	; 24
    4c74:	8f 2e       	mov	r8, r31
    4c76:	f7 e2       	ldi	r31, 0x27	; 39
    4c78:	9f 2e       	mov	r9, r31
    4c7a:	f0 2d       	mov	r31, r0
    4c7c:	34 01       	movw	r6, r8
    4c7e:	e1 2c       	mov	r14, r1
    4c80:	f1 2c       	mov	r15, r1
    4c82:	41 2c       	mov	r4, r1
    4c84:	51 2c       	mov	r5, r1
    4c86:	a1 2c       	mov	r10, r1
    4c88:	b1 2c       	mov	r11, r1
    4c8a:	65 01       	movw	r12, r10
    4c8c:	ed 83       	std	Y+5, r30	; 0x05
    4c8e:	fe 83       	std	Y+6, r31	; 0x06
    4c90:	8d 81       	ldd	r24, Y+5	; 0x05
    4c92:	9e 81       	ldd	r25, Y+6	; 0x06
    4c94:	89 83       	std	Y+1, r24	; 0x01
    4c96:	9a 83       	std	Y+2, r25	; 0x02
    4c98:	0b 83       	std	Y+3, r16	; 0x03
    4c9a:	1c 83       	std	Y+4, r17	; 0x04
				long int Tempd = 0;
				int Tempa = 0;
				for (int ax = 0 ; ax < AxisNumber ; ax++)
				{
					if (SoftRefrence[ax] < AxisPosition[ax]) SetAxisDir(ax,0);
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	80 81       	ld	r24, Z
    4ca0:	91 81       	ldd	r25, Z+1	; 0x01
    4ca2:	a0 e0       	ldi	r26, 0x00	; 0
    4ca4:	b0 e0       	ldi	r27, 0x00	; 0
    4ca6:	f8 01       	movw	r30, r16
    4ca8:	40 81       	ld	r20, Z
    4caa:	51 81       	ldd	r21, Z+1	; 0x01
    4cac:	62 81       	ldd	r22, Z+2	; 0x02
    4cae:	73 81       	ldd	r23, Z+3	; 0x03
    4cb0:	84 17       	cp	r24, r20
    4cb2:	95 07       	cpc	r25, r21
    4cb4:	a6 07       	cpc	r26, r22
    4cb6:	b7 07       	cpc	r27, r23
    4cb8:	a4 f4       	brge	.+40     	; 0x4ce2 <__vector_65+0x176>
    4cba:	60 e0       	ldi	r22, 0x00	; 0
    4cbc:	c7 01       	movw	r24, r14
    4cbe:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
					if (SoftRefrence[ax] >= AxisPosition[ax]) SetAxisDir(ax,1);
    4cc2:	ed 81       	ldd	r30, Y+5	; 0x05
    4cc4:	fe 81       	ldd	r31, Y+6	; 0x06
    4cc6:	80 81       	ld	r24, Z
    4cc8:	91 81       	ldd	r25, Z+1	; 0x01
    4cca:	a0 e0       	ldi	r26, 0x00	; 0
    4ccc:	b0 e0       	ldi	r27, 0x00	; 0
    4cce:	f8 01       	movw	r30, r16
    4cd0:	40 81       	ld	r20, Z
    4cd2:	51 81       	ldd	r21, Z+1	; 0x01
    4cd4:	62 81       	ldd	r22, Z+2	; 0x02
    4cd6:	73 81       	ldd	r23, Z+3	; 0x03
    4cd8:	84 17       	cp	r24, r20
    4cda:	95 07       	cpc	r25, r21
    4cdc:	a6 07       	cpc	r26, r22
    4cde:	b7 07       	cpc	r27, r23
    4ce0:	24 f0       	brlt	.+8      	; 0x4cea <__vector_65+0x17e>
    4ce2:	61 e0       	ldi	r22, 0x01	; 1
    4ce4:	c7 01       	movw	r24, r14
    4ce6:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
    4cea:	0c 5f       	subi	r16, 0xFC	; 252
    4cec:	1f 4f       	sbci	r17, 0xFF	; 255
    4cee:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf2:	02 96       	adiw	r24, 0x02	; 2
    4cf4:	8d 83       	std	Y+5, r24	; 0x05
    4cf6:	9e 83       	std	Y+6, r25	; 0x06
					DistanceToGo[ax] = labs(AxisPosition[ax]-SoftRefrence[ax]);
    4cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    4cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    4cfc:	80 81       	ld	r24, Z
    4cfe:	91 81       	ldd	r25, Z+1	; 0x01
    4d00:	eb 81       	ldd	r30, Y+3	; 0x03
    4d02:	fc 81       	ldd	r31, Y+4	; 0x04
    4d04:	40 81       	ld	r20, Z
    4d06:	51 81       	ldd	r21, Z+1	; 0x01
    4d08:	62 81       	ldd	r22, Z+2	; 0x02
    4d0a:	73 81       	ldd	r23, Z+3	; 0x03
    4d0c:	48 1b       	sub	r20, r24
    4d0e:	59 0b       	sbc	r21, r25
    4d10:	61 09       	sbc	r22, r1
    4d12:	71 09       	sbc	r23, r1
    4d14:	db 01       	movw	r26, r22
    4d16:	ca 01       	movw	r24, r20
    4d18:	3a f4       	brpl	.+14     	; 0x4d28 <__vector_65+0x1bc>
    4d1a:	88 27       	eor	r24, r24
    4d1c:	99 27       	eor	r25, r25
    4d1e:	dc 01       	movw	r26, r24
    4d20:	84 1b       	sub	r24, r20
    4d22:	95 0b       	sbc	r25, r21
    4d24:	a6 0b       	sbc	r26, r22
    4d26:	b7 0b       	sbc	r27, r23
    4d28:	f3 01       	movw	r30, r6
    4d2a:	81 93       	st	Z+, r24
    4d2c:	91 93       	st	Z+, r25
    4d2e:	a1 93       	st	Z+, r26
    4d30:	b1 93       	st	Z+, r27
    4d32:	3f 01       	movw	r6, r30
					if (Tempd < DistanceToGo[ax])
    4d34:	a8 16       	cp	r10, r24
    4d36:	b9 06       	cpc	r11, r25
    4d38:	ca 06       	cpc	r12, r26
    4d3a:	db 06       	cpc	r13, r27
    4d3c:	1c f4       	brge	.+6      	; 0x4d44 <__vector_65+0x1d8>
    4d3e:	27 01       	movw	r4, r14
					{
						Tempd = DistanceToGo[ax];
    4d40:	5c 01       	movw	r10, r24
    4d42:	6d 01       	movw	r12, r26
				DO1_CLR; //Pen UP

				while (IsAnyAxisMoving() == 1);
				long int Tempd = 0;
				int Tempa = 0;
				for (int ax = 0 ; ax < AxisNumber ; ax++)
    4d44:	ff ef       	ldi	r31, 0xFF	; 255
    4d46:	ef 1a       	sub	r14, r31
    4d48:	ff 0a       	sbc	r15, r31
    4d4a:	23 e0       	ldi	r18, 0x03	; 3
    4d4c:	e2 16       	cp	r14, r18
    4d4e:	f1 04       	cpc	r15, r1
    4d50:	09 f0       	breq	.+2      	; 0x4d54 <__vector_65+0x1e8>
    4d52:	9e cf       	rjmp	.-196    	; 0x4c90 <__vector_65+0x124>
					{
						Tempd = DistanceToGo[ax];
						Tempa = ax;
					}
				}
				MaxSpeed = Axes[Tempa].MaxSpeed;
    4d54:	8b e2       	ldi	r24, 0x2B	; 43
    4d56:	84 9d       	mul	r24, r4
    4d58:	f0 01       	movw	r30, r0
    4d5a:	85 9d       	mul	r24, r5
    4d5c:	f0 0d       	add	r31, r0
    4d5e:	11 24       	eor	r1, r1
    4d60:	e5 53       	subi	r30, 0x35	; 53
    4d62:	fb 4d       	sbci	r31, 0xDB	; 219
    4d64:	c5 80       	ldd	r12, Z+5	; 0x05
    4d66:	d6 80       	ldd	r13, Z+6	; 0x06
    4d68:	e7 80       	ldd	r14, Z+7	; 0x07
    4d6a:	f0 84       	ldd	r15, Z+8	; 0x08
    4d6c:	c0 92 87 24 	sts	0x2487, r12	; 0x802487 <MaxSpeed>
    4d70:	d0 92 88 24 	sts	0x2488, r13	; 0x802488 <MaxSpeed+0x1>
    4d74:	e0 92 89 24 	sts	0x2489, r14	; 0x802489 <MaxSpeed+0x2>
    4d78:	f0 92 8a 24 	sts	0x248A, r15	; 0x80248a <MaxSpeed+0x3>
				IACC=Axes[Tempa].ACC;
    4d7c:	81 85       	ldd	r24, Z+9	; 0x09
    4d7e:	92 85       	ldd	r25, Z+10	; 0x0a
    4d80:	a3 85       	ldd	r26, Z+11	; 0x0b
    4d82:	b4 85       	ldd	r27, Z+12	; 0x0c
    4d84:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <IACC>
    4d88:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <IACC+0x1>
    4d8c:	a0 93 85 24 	sts	0x2485, r26	; 0x802485 <IACC+0x2>
    4d90:	b0 93 86 24 	sts	0x2486, r27	; 0x802486 <IACC+0x3>
				IDEC=Axes[Tempa].DEC;
    4d94:	85 85       	ldd	r24, Z+13	; 0x0d
    4d96:	96 85       	ldd	r25, Z+14	; 0x0e
    4d98:	a7 85       	ldd	r26, Z+15	; 0x0f
    4d9a:	b0 89       	ldd	r27, Z+16	; 0x10
    4d9c:	80 93 7f 24 	sts	0x247F, r24	; 0x80247f <IDEC>
    4da0:	90 93 80 24 	sts	0x2480, r25	; 0x802480 <IDEC+0x1>
    4da4:	a0 93 81 24 	sts	0x2481, r26	; 0x802481 <IDEC+0x2>
    4da8:	b0 93 82 24 	sts	0x2482, r27	; 0x802482 <IDEC+0x3>
				MaxDistanceToGo=labs(AxisPosition[Tempa]-SoftRefrence[Tempa]);
    4dac:	d2 01       	movw	r26, r4
    4dae:	aa 0f       	add	r26, r26
    4db0:	bb 1f       	adc	r27, r27
    4db2:	aa 0f       	add	r26, r26
    4db4:	bb 1f       	adc	r27, r27
    4db6:	ac 5d       	subi	r26, 0xDC	; 220
    4db8:	b8 4d       	sbci	r27, 0xD8	; 216
    4dba:	f2 01       	movw	r30, r4
    4dbc:	ee 0f       	add	r30, r30
    4dbe:	ff 1f       	adc	r31, r31
    4dc0:	ed 52       	subi	r30, 0x2D	; 45
    4dc2:	f9 4d       	sbci	r31, 0xD9	; 217
    4dc4:	80 81       	ld	r24, Z
    4dc6:	91 81       	ldd	r25, Z+1	; 0x01
    4dc8:	4d 91       	ld	r20, X+
    4dca:	5d 91       	ld	r21, X+
    4dcc:	6d 91       	ld	r22, X+
    4dce:	7c 91       	ld	r23, X
    4dd0:	48 1b       	sub	r20, r24
    4dd2:	59 0b       	sbc	r21, r25
    4dd4:	61 09       	sbc	r22, r1
    4dd6:	71 09       	sbc	r23, r1
    4dd8:	db 01       	movw	r26, r22
    4dda:	ca 01       	movw	r24, r20
    4ddc:	3a f4       	brpl	.+14     	; 0x4dec <__vector_65+0x280>
    4dde:	88 27       	eor	r24, r24
    4de0:	99 27       	eor	r25, r25
    4de2:	dc 01       	movw	r26, r24
    4de4:	84 1b       	sub	r24, r20
    4de6:	95 0b       	sbc	r25, r21
    4de8:	a6 0b       	sbc	r26, r22
    4dea:	b7 0b       	sbc	r27, r23
    4dec:	a8 2e       	mov	r10, r24
    4dee:	b9 2e       	mov	r11, r25
    4df0:	0a 2f       	mov	r16, r26
    4df2:	1b 2f       	mov	r17, r27
    4df4:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    4df8:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    4dfc:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    4e00:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
    4e04:	e2 ee       	ldi	r30, 0xE2	; 226
    4e06:	f6 e2       	ldi	r31, 0x26	; 38
    4e08:	e9 83       	std	Y+1, r30	; 0x01
    4e0a:	fa 83       	std	Y+2, r31	; 0x02
				//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
				for (int ax = 0 ; ax < AxisNumber ; ax++)
				{
					Ma[ax] = (unsigned int)((float)((float)DistanceToGo[ax]/(float)MaxDistanceToGo)*1000);
    4e0c:	f4 01       	movw	r30, r8
    4e0e:	61 91       	ld	r22, Z+
    4e10:	71 91       	ld	r23, Z+
    4e12:	81 91       	ld	r24, Z+
    4e14:	91 91       	ld	r25, Z+
    4e16:	4f 01       	movw	r8, r30
    4e18:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4e1c:	2b 01       	movw	r4, r22
    4e1e:	3c 01       	movw	r6, r24
    4e20:	6a 2d       	mov	r22, r10
    4e22:	7b 2d       	mov	r23, r11
    4e24:	80 2f       	mov	r24, r16
    4e26:	91 2f       	mov	r25, r17
    4e28:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4e2c:	9b 01       	movw	r18, r22
    4e2e:	ac 01       	movw	r20, r24
    4e30:	c3 01       	movw	r24, r6
    4e32:	b2 01       	movw	r22, r4
    4e34:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    4e38:	20 e0       	ldi	r18, 0x00	; 0
    4e3a:	30 e0       	ldi	r19, 0x00	; 0
    4e3c:	4a e7       	ldi	r20, 0x7A	; 122
    4e3e:	54 e4       	ldi	r21, 0x44	; 68
    4e40:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    4e44:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    4e48:	e9 81       	ldd	r30, Y+1	; 0x01
    4e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    4e4c:	61 93       	st	Z+, r22
    4e4e:	71 93       	st	Z+, r23
    4e50:	e9 83       	std	Y+1, r30	; 0x01
    4e52:	fa 83       	std	Y+2, r31	; 0x02
				MaxSpeed = Axes[Tempa].MaxSpeed;
				IACC=Axes[Tempa].ACC;
				IDEC=Axes[Tempa].DEC;
				MaxDistanceToGo=labs(AxisPosition[Tempa]-SoftRefrence[Tempa]);
				//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
				for (int ax = 0 ; ax < AxisNumber ; ax++)
    4e54:	84 e2       	ldi	r24, 0x24	; 36
    4e56:	97 e2       	ldi	r25, 0x27	; 39
    4e58:	88 15       	cp	r24, r8
    4e5a:	99 05       	cpc	r25, r9
    4e5c:	b9 f6       	brne	.-82     	; 0x4e0c <__vector_65+0x2a0>
				{
					Ma[ax] = (unsigned int)((float)((float)DistanceToGo[ax]/(float)MaxDistanceToGo)*1000);
				}
				CurSpeedFrq=MaxSpeed;
    4e5e:	c0 92 77 24 	sts	0x2477, r12	; 0x802477 <CurSpeedFrq>
    4e62:	d0 92 78 24 	sts	0x2478, r13	; 0x802478 <CurSpeedFrq+0x1>
    4e66:	e0 92 79 24 	sts	0x2479, r14	; 0x802479 <CurSpeedFrq+0x2>
    4e6a:	f0 92 7a 24 	sts	0x247A, r15	; 0x80247a <CurSpeedFrq+0x3>
				ACC = 0;
    4e6e:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
				DEC = 0;
    4e72:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
				TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    4e76:	c7 01       	movw	r24, r14
    4e78:	b6 01       	movw	r22, r12
    4e7a:	0e 94 de 29 	call	0x53bc	; 0x53bc <__floatsisf>
    4e7e:	9b 01       	movw	r18, r22
    4e80:	ac 01       	movw	r20, r24
    4e82:	60 e0       	ldi	r22, 0x00	; 0
    4e84:	70 e0       	ldi	r23, 0x00	; 0
    4e86:	8a e7       	ldi	r24, 0x7A	; 122
    4e88:	96 e4       	ldi	r25, 0x46	; 70
    4e8a:	0e 94 34 29 	call	0x5268	; 0x5268 <__divsf3>
    4e8e:	60 93 c6 24 	sts	0x24C6, r22	; 0x8024c6 <TimerMainPeriod>
    4e92:	70 93 c7 24 	sts	0x24C7, r23	; 0x8024c7 <TimerMainPeriod+0x1>
    4e96:	80 93 c8 24 	sts	0x24C8, r24	; 0x8024c8 <TimerMainPeriod+0x2>
    4e9a:	90 93 c9 24 	sts	0x24C9, r25	; 0x8024c9 <TimerMainPeriod+0x3>
				tcc0_init();
    4e9e:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
				TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	4a e7       	ldi	r20, 0x7A	; 122
    4ea8:	54 e4       	ldi	r21, 0x44	; 68
    4eaa:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    4eae:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    4eb2:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    4eb6:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    4eba:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    4ebe:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    4ec2:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4ec6:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				ProgramRun=0;
    4eca:	10 92 ca 24 	sts	0x24CA, r1	; 0x8024ca <ProgramRun>
    4ece:	af ce       	rjmp	.-674    	; 0x4c2e <__vector_65+0xc2>
			}
		}
	}
}
    4ed0:	26 96       	adiw	r28, 0x06	; 6
    4ed2:	cd bf       	out	0x3d, r28	; 61
    4ed4:	de bf       	out	0x3e, r29	; 62
    4ed6:	df 91       	pop	r29
    4ed8:	cf 91       	pop	r28
    4eda:	ff 91       	pop	r31
    4edc:	ef 91       	pop	r30
    4ede:	bf 91       	pop	r27
    4ee0:	af 91       	pop	r26
    4ee2:	9f 91       	pop	r25
    4ee4:	8f 91       	pop	r24
    4ee6:	7f 91       	pop	r23
    4ee8:	6f 91       	pop	r22
    4eea:	5f 91       	pop	r21
    4eec:	4f 91       	pop	r20
    4eee:	3f 91       	pop	r19
    4ef0:	2f 91       	pop	r18
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	ff 90       	pop	r15
    4ef8:	ef 90       	pop	r14
    4efa:	df 90       	pop	r13
    4efc:	cf 90       	pop	r12
    4efe:	bf 90       	pop	r11
    4f00:	af 90       	pop	r10
    4f02:	9f 90       	pop	r9
    4f04:	8f 90       	pop	r8
    4f06:	7f 90       	pop	r7
    4f08:	6f 90       	pop	r6
    4f0a:	5f 90       	pop	r5
    4f0c:	4f 90       	pop	r4
    4f0e:	3f 90       	pop	r3
    4f10:	2f 90       	pop	r2
    4f12:	0f 90       	pop	r0
    4f14:	0b be       	out	0x3b, r0	; 59
    4f16:	0f 90       	pop	r0
    4f18:	0a be       	out	0x3a, r0	; 58
    4f1a:	0f 90       	pop	r0
    4f1c:	09 be       	out	0x39, r0	; 57
    4f1e:	0f 90       	pop	r0
    4f20:	08 be       	out	0x38, r0	; 56
    4f22:	0f 90       	pop	r0
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	0f 90       	pop	r0
    4f28:	1f 90       	pop	r1
    4f2a:	18 95       	reti

00004f2c <_Z12usartc0_initv>:
{
	// Note: The correct PORTC direction for the RxD, TxD and XCK signals
	// is configured in the ports_init function.
	// Transmitter is enabled
	// Set TxD=1
	PORTC.OUTSET=0x08;
    4f2c:	88 e0       	ldi	r24, 0x08	; 8
    4f2e:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	// Communication mode: Asynchronous USART
	// Data bits: 8
	// Stop bits: 1
	// Parity: Disabled
	USARTC0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    4f32:	e0 ea       	ldi	r30, 0xA0	; 160
    4f34:	f8 e0       	ldi	r31, 0x08	; 8
    4f36:	83 e0       	ldi	r24, 0x03	; 3
    4f38:	85 83       	std	Z+5, r24	; 0x05

	// Receive complete interrupt: Medium Level
	// Transmit complete interrupt: Disabled
	// Data register empty interrupt: Disabled
	USARTC0.CTRLA=(USARTC0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
    4f3a:	83 81       	ldd	r24, Z+3	; 0x03
	USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    4f3c:	80 7c       	andi	r24, 0xC0	; 192
    4f3e:	80 62       	ori	r24, 0x20	; 32
    4f40:	83 83       	std	Z+3, r24	; 0x03

	// Required Baud rate: 115200
	// Real Baud Rate: 115211.5 (x1 Mode), Error: 0.0 %
	USARTC0.BAUDCTRLA=0x2E;
    4f42:	8e e2       	ldi	r24, 0x2E	; 46
    4f44:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x08;
    4f46:	88 e9       	ldi	r24, 0x98	; 152
    4f48:	87 83       	std	Z+7, r24	; 0x07

	// Receiver: On
	// Transmitter: On
	// Double transmission speed mode: Off
	// Multi-processor communication mode: Off
	USARTC0.CTRLB=(USARTC0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
    4f4a:	84 81       	ldd	r24, Z+4	; 0x04
	USART_RXEN_bm | USART_TXEN_bm;
    4f4c:	80 7e       	andi	r24, 0xE0	; 224
    4f4e:	88 61       	ori	r24, 0x18	; 24
    4f50:	84 83       	std	Z+4, r24	; 0x04
    4f52:	08 95       	ret

00004f54 <__vector_25>:
bool rx_buffer_overflow_usartc0=0;

// USARTC0 Receiver interrupt service routine
// Debug port receive interrupt
ISR (USARTC0_RXC_vect)
{
    4f54:	1f 92       	push	r1
    4f56:	0f 92       	push	r0
    4f58:	0f b6       	in	r0, 0x3f	; 63
    4f5a:	0f 92       	push	r0
    4f5c:	11 24       	eor	r1, r1
    4f5e:	08 b6       	in	r0, 0x38	; 56
    4f60:	0f 92       	push	r0
    4f62:	18 be       	out	0x38, r1	; 56
    4f64:	0b b6       	in	r0, 0x3b	; 59
    4f66:	0f 92       	push	r0
    4f68:	1b be       	out	0x3b, r1	; 59
    4f6a:	8f 93       	push	r24
    4f6c:	9f 93       	push	r25
    4f6e:	ef 93       	push	r30
    4f70:	ff 93       	push	r31
	unsigned char status;
	char data;

	status=USARTC0.STATUS;
    4f72:	e0 ea       	ldi	r30, 0xA0	; 160
    4f74:	f8 e0       	ldi	r31, 0x08	; 8
    4f76:	81 81       	ldd	r24, Z+1	; 0x01
	data=USARTC0.DATA;
    4f78:	90 81       	ld	r25, Z
	if ((status & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
    4f7a:	8c 71       	andi	r24, 0x1C	; 28
    4f7c:	d9 f4       	brne	.+54     	; 0x4fb4 <__vector_25+0x60>
	{
		rx_buffer_usartc0[rx_wr_index_usartc0++]=data;
    4f7e:	e0 91 48 24 	lds	r30, 0x2448	; 0x802448 <rx_wr_index_usartc0>
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	8e 0f       	add	r24, r30
    4f86:	80 93 48 24 	sts	0x2448, r24	; 0x802448 <rx_wr_index_usartc0>
    4f8a:	f0 e0       	ldi	r31, 0x00	; 0
    4f8c:	e7 5b       	subi	r30, 0xB7	; 183
    4f8e:	fb 4d       	sbci	r31, 0xDB	; 219
    4f90:	90 83       	st	Z, r25
		#if RX_BUFFER_SIZE_USARTC0 == 256
		// special case for receiver buffer size=256
		if (++rx_counter_usartc0 == 0) rx_buffer_overflow_usartc0=1;
		#else
		if (rx_wr_index_usartc0 == RX_BUFFER_SIZE_USARTC0) rx_wr_index_usartc0=0;
    4f92:	88 30       	cpi	r24, 0x08	; 8
    4f94:	11 f4       	brne	.+4      	; 0x4f9a <__vector_25+0x46>
    4f96:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <rx_wr_index_usartc0>
		if (++rx_counter_usartc0 == RX_BUFFER_SIZE_USARTC0)
    4f9a:	80 91 47 24 	lds	r24, 0x2447	; 0x802447 <rx_counter_usartc0>
    4f9e:	8f 5f       	subi	r24, 0xFF	; 255
    4fa0:	88 30       	cpi	r24, 0x08	; 8
    4fa2:	19 f0       	breq	.+6      	; 0x4faa <__vector_25+0x56>
    4fa4:	80 93 47 24 	sts	0x2447, r24	; 0x802447 <rx_counter_usartc0>
    4fa8:	05 c0       	rjmp	.+10     	; 0x4fb4 <__vector_25+0x60>
		{
			rx_counter_usartc0=0;
    4faa:	10 92 47 24 	sts	0x2447, r1	; 0x802447 <rx_counter_usartc0>
			rx_buffer_overflow_usartc0=1;
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	80 93 46 24 	sts	0x2446, r24	; 0x802446 <__data_end>
		}
		#endif
	}
}
    4fb4:	ff 91       	pop	r31
    4fb6:	ef 91       	pop	r30
    4fb8:	9f 91       	pop	r25
    4fba:	8f 91       	pop	r24
    4fbc:	0f 90       	pop	r0
    4fbe:	0b be       	out	0x3b, r0	; 59
    4fc0:	0f 90       	pop	r0
    4fc2:	08 be       	out	0x38, r0	; 56
    4fc4:	0f 90       	pop	r0
    4fc6:	0f be       	out	0x3f, r0	; 63
    4fc8:	0f 90       	pop	r0
    4fca:	1f 90       	pop	r1
    4fcc:	18 95       	reti

00004fce <main>:

	// Interrupt system initialization
	// Optimize for speed
	//#pragma optsize-
	// Make sure the interrupts are disabled
	asm("cli");
    4fce:	f8 94       	cli
	// Low level interrupt: On
	// Round-robin scheduling for low level interrupt: Off
	// Medium level interrupt: On
	// High level interrupt: On
	// The interrupt vectors will be placed at the start of the Application FLASH section
	n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
    4fd0:	e0 ea       	ldi	r30, 0xA0	; 160
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	82 81       	ldd	r24, Z+2	; 0x02
	PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    4fd6:	88 73       	andi	r24, 0x38	; 56
    4fd8:	87 60       	ori	r24, 0x07	; 7
	CCP=CCP_IOREG_gc;
    4fda:	98 ed       	ldi	r25, 0xD8	; 216
    4fdc:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL=n;
    4fde:	82 83       	std	Z+2, r24	; 0x02
	// Set the default priority for round-robin scheduling
	PMIC.INTPRI=0x00;
    4fe0:	11 82       	std	Z+1, r1	; 0x01
	
	// Restore optimization for size if needed
	//#pragma optsize_default

	// System clocks initialization
	system_clocks_init();
    4fe2:	0e 94 40 22 	call	0x4480	; 0x4480 <_Z18system_clocks_initv>

	// Ports initialization
	ports_init();
    4fe6:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z10ports_initv>

	// Virtual Ports initialization
	//vports_init();
	spif_init();
    4fea:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z9spif_initv>


	// Globally enable interrupts
	asm("sei");
    4fee:	78 94       	sei

	tcc0_init();  // Axis interpolation counter for level 0
    4ff0:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
	tcc1_init();  // Axis interpolation counter for level 1
    4ff4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9tcc1_initv>
	tcd1_init();  // PLC interpolation timer
    4ff8:	0e 94 89 0c 	call	0x1912	; 0x1912 <_Z9tcd1_initv>
	spie_init();  // SPI Flash initialization
    4ffc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_Z9spie_initv>
	SG17_SET;     // says to 7 segment board and says that Xmega is loaded
    5000:	e0 e0       	ldi	r30, 0x00	; 0
    5002:	f7 e0       	ldi	r31, 0x07	; 7
    5004:	84 81       	ldd	r24, Z+4	; 0x04
    5006:	82 60       	ori	r24, 0x02	; 2
    5008:	84 83       	std	Z+4, r24	; 0x04
	usartc0_init();
    500a:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <_Z12usartc0_initv>
	SETSFRST; //set Serial Flash Reset means Xmega is able to read from SPI Flash
    500e:	e0 e8       	ldi	r30, 0x80	; 128
    5010:	f6 e0       	ldi	r31, 0x06	; 6
    5012:	84 81       	ldd	r24, Z+4	; 0x04
    5014:	84 60       	ori	r24, 0x04	; 4
    5016:	84 83       	std	Z+4, r24	; 0x04
	SETSFWP;  //set Serial Flash Write protect to allow raspberry to write on it
    5018:	84 81       	ldd	r24, Z+4	; 0x04
    501a:	82 60       	ori	r24, 0x02	; 2
    501c:	84 83       	std	Z+4, r24	; 0x04
    501e:	2f ef       	ldi	r18, 0xFF	; 255
    5020:	89 e6       	ldi	r24, 0x69	; 105
    5022:	98 e1       	ldi	r25, 0x18	; 24
    5024:	21 50       	subi	r18, 0x01	; 1
    5026:	80 40       	sbci	r24, 0x00	; 0
    5028:	90 40       	sbci	r25, 0x00	; 0
    502a:	e1 f7       	brne	.-8      	; 0x5024 <main+0x56>
    502c:	00 c0       	rjmp	.+0      	; 0x502e <main+0x60>
    502e:	00 00       	nop
	_delay_ms(250);
	printf("Reading Config...\r\n");
    5030:	8c e0       	ldi	r24, 0x0C	; 12
    5032:	94 e2       	ldi	r25, 0x24	; 36
    5034:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
	ReadConfig();  // read configuration from Serail Flash
    5038:	0e 94 41 04 	call	0x882	; 0x882 <_Z10ReadConfigv>

	while (1)
	{
		// if jog is pushed the LED on the board turns on
		if(JogNegInput == 1) SETBIT(PORTR.OUT,0);
    503c:	0f 2e       	mov	r0, r31
    503e:	f0 e6       	ldi	r31, 0x60	; 96
    5040:	ef 2e       	mov	r14, r31
    5042:	f6 e0       	ldi	r31, 0x06	; 6
    5044:	ff 2e       	mov	r15, r31
    5046:	f0 2d       	mov	r31, r0
    5048:	c0 ee       	ldi	r28, 0xE0	; 224
    504a:	d7 e0       	ldi	r29, 0x07	; 7
		if(JogNegInput == 0) CLRBIT(PORTR.OUT,0);
		if(JogPosInput == 1) SETBIT(PORTR.OUT,1);
    504c:	00 ee       	ldi	r16, 0xE0	; 224
    504e:	16 e0       	ldi	r17, 0x06	; 6
				else
				{
					printf("Read Main Program.\r\n");
					readRam();
				}
				printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    5050:	0f 2e       	mov	r0, r31
    5052:	fc e4       	ldi	r31, 0x4C	; 76
    5054:	cf 2e       	mov	r12, r31
    5056:	f5 e2       	ldi	r31, 0x25	; 37
    5058:	df 2e       	mov	r13, r31
    505a:	f0 2d       	mov	r31, r0
    505c:	0f 2e       	mov	r0, r31
    505e:	fa ef       	ldi	r31, 0xFA	; 250
    5060:	af 2e       	mov	r10, r31
    5062:	f0 e2       	ldi	r31, 0x20	; 32
    5064:	bf 2e       	mov	r11, r31
    5066:	f0 2d       	mov	r31, r0
				
				PORTR.OUTTGL=0x01; //program running will flash the LED
    5068:	55 24       	eor	r5, r5
    506a:	53 94       	inc	r5
    506c:	0f 2e       	mov	r0, r31
    506e:	f5 e1       	ldi	r31, 0x15	; 21
    5070:	6f 2e       	mov	r6, r31
    5072:	71 2c       	mov	r7, r1
    5074:	f0 2d       	mov	r31, r0
	ReadConfig();  // read configuration from Serail Flash

	while (1)
	{
		// if jog is pushed the LED on the board turns on
		if(JogNegInput == 1) SETBIT(PORTR.OUT,0);
    5076:	f7 01       	movw	r30, r14
    5078:	80 85       	ldd	r24, Z+8	; 0x08
    507a:	83 ff       	sbrs	r24, 3
    507c:	03 c0       	rjmp	.+6      	; 0x5084 <main+0xb6>
    507e:	8c 81       	ldd	r24, Y+4	; 0x04
    5080:	81 60       	ori	r24, 0x01	; 1
    5082:	8c 83       	std	Y+4, r24	; 0x04
		if(JogNegInput == 0) CLRBIT(PORTR.OUT,0);
    5084:	f7 01       	movw	r30, r14
    5086:	80 85       	ldd	r24, Z+8	; 0x08
    5088:	83 fd       	sbrc	r24, 3
    508a:	03 c0       	rjmp	.+6      	; 0x5092 <main+0xc4>
    508c:	8c 81       	ldd	r24, Y+4	; 0x04
    508e:	8e 7f       	andi	r24, 0xFE	; 254
    5090:	8c 83       	std	Y+4, r24	; 0x04
		if(JogPosInput == 1) SETBIT(PORTR.OUT,1);
    5092:	f8 01       	movw	r30, r16
    5094:	80 85       	ldd	r24, Z+8	; 0x08
    5096:	81 ff       	sbrs	r24, 1
    5098:	03 c0       	rjmp	.+6      	; 0x50a0 <main+0xd2>
    509a:	8c 81       	ldd	r24, Y+4	; 0x04
    509c:	82 60       	ori	r24, 0x02	; 2
    509e:	8c 83       	std	Y+4, r24	; 0x04
		if(JogPosInput == 0) CLRBIT(PORTR.OUT,1);
    50a0:	f8 01       	movw	r30, r16
    50a2:	80 85       	ldd	r24, Z+8	; 0x08
    50a4:	81 fd       	sbrc	r24, 1
    50a6:	03 c0       	rjmp	.+6      	; 0x50ae <main+0xe0>
    50a8:	8c 81       	ldd	r24, Y+4	; 0x04
    50aa:	8d 7f       	andi	r24, 0xFD	; 253
    50ac:	8c 83       	std	Y+4, r24	; 0x04
		
		if(ProgramRun && !IsAnyAxisMoving())
    50ae:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    50b2:	88 23       	and	r24, r24
    50b4:	09 f4       	brne	.+2      	; 0x50b8 <main+0xea>
    50b6:	40 c0       	rjmp	.+128    	; 0x5138 <main+0x16a>
    50b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    50bc:	81 11       	cpse	r24, r1
    50be:	3c c0       	rjmp	.+120    	; 0x5138 <main+0x16a>
		{
			if(IsPause==0)
    50c0:	80 91 52 24 	lds	r24, 0x2452	; 0x802452 <IsPause>
    50c4:	81 11       	cpse	r24, r1
    50c6:	38 c0       	rjmp	.+112    	; 0x5138 <main+0x16a>
			{
				if(RunSubProgram)
    50c8:	80 91 53 24 	lds	r24, 0x2453	; 0x802453 <RunSubProgram>
    50cc:	88 23       	and	r24, r24
    50ce:	49 f0       	breq	.+18     	; 0x50e2 <main+0x114>
				{
					printf("Read Sub Program.\r\n");
    50d0:	8f e1       	ldi	r24, 0x1F	; 31
    50d2:	94 e2       	ldi	r25, 0x24	; 36
    50d4:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
					ReadSubProgram(0);
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_Z14ReadSubProgramj>
    50e0:	06 c0       	rjmp	.+12     	; 0x50ee <main+0x120>
				}
				else
				{
					printf("Read Main Program.\r\n");
    50e2:	82 e3       	ldi	r24, 0x32	; 50
    50e4:	94 e2       	ldi	r25, 0x24	; 36
    50e6:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
					readRam();
    50ea:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
				}
				printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    50ee:	f6 01       	movw	r30, r12
    50f0:	83 81       	ldd	r24, Z+3	; 0x03
    50f2:	1f 92       	push	r1
    50f4:	8f 93       	push	r24
    50f6:	81 81       	ldd	r24, Z+1	; 0x01
    50f8:	8f 93       	push	r24
    50fa:	80 81       	ld	r24, Z
    50fc:	8f 93       	push	r24
    50fe:	bf 92       	push	r11
    5100:	af 92       	push	r10
    5102:	0e 94 c1 2b 	call	0x5782	; 0x5782 <printf>
				
				PORTR.OUTTGL=0x01; //program running will flash the LED
    5106:	5f 82       	std	Y+7, r5	; 0x07
				PRGExe();
    5108:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z6PRGExev>
				if(PRGEXEindex < PRGSize) PRGEXEindex++;
    510c:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <PRGEXEindex>
    5110:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <PRGEXEindex+0x1>
    5114:	0f 90       	pop	r0
    5116:	0f 90       	pop	r0
    5118:	0f 90       	pop	r0
    511a:	0f 90       	pop	r0
    511c:	0f 90       	pop	r0
    511e:	0f 90       	pop	r0
    5120:	20 91 69 24 	lds	r18, 0x2469	; 0x802469 <PRGSize>
    5124:	30 91 6a 24 	lds	r19, 0x246A	; 0x80246a <PRGSize+0x1>
    5128:	82 17       	cp	r24, r18
    512a:	93 07       	cpc	r25, r19
    512c:	2c f4       	brge	.+10     	; 0x5138 <main+0x16a>
    512e:	01 96       	adiw	r24, 0x01	; 1
    5130:	80 93 6b 24 	sts	0x246B, r24	; 0x80246b <PRGEXEindex>
    5134:	90 93 6c 24 	sts	0x246C, r25	; 0x80246c <PRGEXEindex+0x1>
			}
		}
		/**********************************************/
		if(cmdIsReady==0) continue;
    5138:	80 91 9b 25 	lds	r24, 0x259B	; 0x80259b <cmdIsReady>
    513c:	88 23       	and	r24, r24
    513e:	09 f4       	brne	.+2      	; 0x5142 <main+0x174>
    5140:	9a cf       	rjmp	.-204    	; 0x5076 <main+0xa8>
    5142:	0f 2e       	mov	r0, r31
    5144:	fd ea       	ldi	r31, 0xAD	; 173
    5146:	8f 2e       	mov	r8, r31
    5148:	f4 e2       	ldi	r31, 0x24	; 36
    514a:	9f 2e       	mov	r9, r31
    514c:	f0 2d       	mov	r31, r0
    514e:	ef e9       	ldi	r30, 0x9F	; 159
    5150:	f5 e2       	ldi	r31, 0x25	; 37
    5152:	24 eb       	ldi	r18, 0xB4	; 180
    5154:	35 e2       	ldi	r19, 0x25	; 37
    5156:	d4 01       	movw	r26, r8
		for (j = 0 ; j < 21 ; j++)
		{
			cmdTemp[j] = EXECMD[j];
    5158:	80 81       	ld	r24, Z
    515a:	8d 93       	st	X+, r24
			EXECMD[j] = 0;
    515c:	11 92       	st	Z+, r1
				if(PRGEXEindex < PRGSize) PRGEXEindex++;
			}
		}
		/**********************************************/
		if(cmdIsReady==0) continue;
		for (j = 0 ; j < 21 ; j++)
    515e:	2e 17       	cp	r18, r30
    5160:	3f 07       	cpc	r19, r31
    5162:	d1 f7       	brne	.-12     	; 0x5158 <main+0x18a>
    5164:	60 92 c4 24 	sts	0x24C4, r6	; 0x8024c4 <j>
    5168:	70 92 c5 24 	sts	0x24C5, r7	; 0x8024c5 <j+0x1>
		{
			cmdTemp[j] = EXECMD[j];
			EXECMD[j] = 0;
		}
		cmdExe();
    516c:	0e 94 04 15 	call	0x2a08	; 0x2a08 <_Z6cmdExev>
    5170:	82 ec       	ldi	r24, 0xC2	; 194
    5172:	94 e2       	ldi	r25, 0x24	; 36
		for (j=0;j<21;j++) cmdTemp[j] = 0;
    5174:	f4 01       	movw	r30, r8
    5176:	11 92       	st	Z+, r1
    5178:	4f 01       	movw	r8, r30
    517a:	e8 17       	cp	r30, r24
    517c:	f9 07       	cpc	r31, r25
    517e:	d1 f7       	brne	.-12     	; 0x5174 <main+0x1a6>
    5180:	60 92 c4 24 	sts	0x24C4, r6	; 0x8024c4 <j>
    5184:	70 92 c5 24 	sts	0x24C5, r7	; 0x8024c5 <j+0x1>
		cmdIsReady=0;
    5188:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <cmdIsReady>
    518c:	74 cf       	rjmp	.-280    	; 0x5076 <main+0xa8>

0000518e <__subsf3>:
    518e:	50 58       	subi	r21, 0x80	; 128

00005190 <__addsf3>:
    5190:	bb 27       	eor	r27, r27
    5192:	aa 27       	eor	r26, r26
    5194:	0e 94 df 28 	call	0x51be	; 0x51be <__addsf3x>
    5198:	0c 94 30 2a 	jmp	0x5460	; 0x5460 <__fp_round>
    519c:	0e 94 22 2a 	call	0x5444	; 0x5444 <__fp_pscA>
    51a0:	38 f0       	brcs	.+14     	; 0x51b0 <__addsf3+0x20>
    51a2:	0e 94 29 2a 	call	0x5452	; 0x5452 <__fp_pscB>
    51a6:	20 f0       	brcs	.+8      	; 0x51b0 <__addsf3+0x20>
    51a8:	39 f4       	brne	.+14     	; 0x51b8 <__addsf3+0x28>
    51aa:	9f 3f       	cpi	r25, 0xFF	; 255
    51ac:	19 f4       	brne	.+6      	; 0x51b4 <__addsf3+0x24>
    51ae:	26 f4       	brtc	.+8      	; 0x51b8 <__addsf3+0x28>
    51b0:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__fp_nan>
    51b4:	0e f4       	brtc	.+2      	; 0x51b8 <__addsf3+0x28>
    51b6:	e0 95       	com	r30
    51b8:	e7 fb       	bst	r30, 7
    51ba:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>

000051be <__addsf3x>:
    51be:	e9 2f       	mov	r30, r25
    51c0:	0e 94 41 2a 	call	0x5482	; 0x5482 <__fp_split3>
    51c4:	58 f3       	brcs	.-42     	; 0x519c <__addsf3+0xc>
    51c6:	ba 17       	cp	r27, r26
    51c8:	62 07       	cpc	r22, r18
    51ca:	73 07       	cpc	r23, r19
    51cc:	84 07       	cpc	r24, r20
    51ce:	95 07       	cpc	r25, r21
    51d0:	20 f0       	brcs	.+8      	; 0x51da <__addsf3x+0x1c>
    51d2:	79 f4       	brne	.+30     	; 0x51f2 <__addsf3x+0x34>
    51d4:	a6 f5       	brtc	.+104    	; 0x523e <__addsf3x+0x80>
    51d6:	0c 94 63 2a 	jmp	0x54c6	; 0x54c6 <__fp_zero>
    51da:	0e f4       	brtc	.+2      	; 0x51de <__addsf3x+0x20>
    51dc:	e0 95       	com	r30
    51de:	0b 2e       	mov	r0, r27
    51e0:	ba 2f       	mov	r27, r26
    51e2:	a0 2d       	mov	r26, r0
    51e4:	0b 01       	movw	r0, r22
    51e6:	b9 01       	movw	r22, r18
    51e8:	90 01       	movw	r18, r0
    51ea:	0c 01       	movw	r0, r24
    51ec:	ca 01       	movw	r24, r20
    51ee:	a0 01       	movw	r20, r0
    51f0:	11 24       	eor	r1, r1
    51f2:	ff 27       	eor	r31, r31
    51f4:	59 1b       	sub	r21, r25
    51f6:	99 f0       	breq	.+38     	; 0x521e <__addsf3x+0x60>
    51f8:	59 3f       	cpi	r21, 0xF9	; 249
    51fa:	50 f4       	brcc	.+20     	; 0x5210 <__addsf3x+0x52>
    51fc:	50 3e       	cpi	r21, 0xE0	; 224
    51fe:	68 f1       	brcs	.+90     	; 0x525a <__addsf3x+0x9c>
    5200:	1a 16       	cp	r1, r26
    5202:	f0 40       	sbci	r31, 0x00	; 0
    5204:	a2 2f       	mov	r26, r18
    5206:	23 2f       	mov	r18, r19
    5208:	34 2f       	mov	r19, r20
    520a:	44 27       	eor	r20, r20
    520c:	58 5f       	subi	r21, 0xF8	; 248
    520e:	f3 cf       	rjmp	.-26     	; 0x51f6 <__addsf3x+0x38>
    5210:	46 95       	lsr	r20
    5212:	37 95       	ror	r19
    5214:	27 95       	ror	r18
    5216:	a7 95       	ror	r26
    5218:	f0 40       	sbci	r31, 0x00	; 0
    521a:	53 95       	inc	r21
    521c:	c9 f7       	brne	.-14     	; 0x5210 <__addsf3x+0x52>
    521e:	7e f4       	brtc	.+30     	; 0x523e <__addsf3x+0x80>
    5220:	1f 16       	cp	r1, r31
    5222:	ba 0b       	sbc	r27, r26
    5224:	62 0b       	sbc	r22, r18
    5226:	73 0b       	sbc	r23, r19
    5228:	84 0b       	sbc	r24, r20
    522a:	ba f0       	brmi	.+46     	; 0x525a <__addsf3x+0x9c>
    522c:	91 50       	subi	r25, 0x01	; 1
    522e:	a1 f0       	breq	.+40     	; 0x5258 <__addsf3x+0x9a>
    5230:	ff 0f       	add	r31, r31
    5232:	bb 1f       	adc	r27, r27
    5234:	66 1f       	adc	r22, r22
    5236:	77 1f       	adc	r23, r23
    5238:	88 1f       	adc	r24, r24
    523a:	c2 f7       	brpl	.-16     	; 0x522c <__addsf3x+0x6e>
    523c:	0e c0       	rjmp	.+28     	; 0x525a <__addsf3x+0x9c>
    523e:	ba 0f       	add	r27, r26
    5240:	62 1f       	adc	r22, r18
    5242:	73 1f       	adc	r23, r19
    5244:	84 1f       	adc	r24, r20
    5246:	48 f4       	brcc	.+18     	; 0x525a <__addsf3x+0x9c>
    5248:	87 95       	ror	r24
    524a:	77 95       	ror	r23
    524c:	67 95       	ror	r22
    524e:	b7 95       	ror	r27
    5250:	f7 95       	ror	r31
    5252:	9e 3f       	cpi	r25, 0xFE	; 254
    5254:	08 f0       	brcs	.+2      	; 0x5258 <__addsf3x+0x9a>
    5256:	b0 cf       	rjmp	.-160    	; 0x51b8 <__addsf3+0x28>
    5258:	93 95       	inc	r25
    525a:	88 0f       	add	r24, r24
    525c:	08 f0       	brcs	.+2      	; 0x5260 <__addsf3x+0xa2>
    525e:	99 27       	eor	r25, r25
    5260:	ee 0f       	add	r30, r30
    5262:	97 95       	ror	r25
    5264:	87 95       	ror	r24
    5266:	08 95       	ret

00005268 <__divsf3>:
    5268:	0e 94 48 29 	call	0x5290	; 0x5290 <__divsf3x>
    526c:	0c 94 30 2a 	jmp	0x5460	; 0x5460 <__fp_round>
    5270:	0e 94 29 2a 	call	0x5452	; 0x5452 <__fp_pscB>
    5274:	58 f0       	brcs	.+22     	; 0x528c <__divsf3+0x24>
    5276:	0e 94 22 2a 	call	0x5444	; 0x5444 <__fp_pscA>
    527a:	40 f0       	brcs	.+16     	; 0x528c <__divsf3+0x24>
    527c:	29 f4       	brne	.+10     	; 0x5288 <__divsf3+0x20>
    527e:	5f 3f       	cpi	r21, 0xFF	; 255
    5280:	29 f0       	breq	.+10     	; 0x528c <__divsf3+0x24>
    5282:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>
    5286:	51 11       	cpse	r21, r1
    5288:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__fp_szero>
    528c:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__fp_nan>

00005290 <__divsf3x>:
    5290:	0e 94 41 2a 	call	0x5482	; 0x5482 <__fp_split3>
    5294:	68 f3       	brcs	.-38     	; 0x5270 <__divsf3+0x8>

00005296 <__divsf3_pse>:
    5296:	99 23       	and	r25, r25
    5298:	b1 f3       	breq	.-20     	; 0x5286 <__divsf3+0x1e>
    529a:	55 23       	and	r21, r21
    529c:	91 f3       	breq	.-28     	; 0x5282 <__divsf3+0x1a>
    529e:	95 1b       	sub	r25, r21
    52a0:	55 0b       	sbc	r21, r21
    52a2:	bb 27       	eor	r27, r27
    52a4:	aa 27       	eor	r26, r26
    52a6:	62 17       	cp	r22, r18
    52a8:	73 07       	cpc	r23, r19
    52aa:	84 07       	cpc	r24, r20
    52ac:	38 f0       	brcs	.+14     	; 0x52bc <__divsf3_pse+0x26>
    52ae:	9f 5f       	subi	r25, 0xFF	; 255
    52b0:	5f 4f       	sbci	r21, 0xFF	; 255
    52b2:	22 0f       	add	r18, r18
    52b4:	33 1f       	adc	r19, r19
    52b6:	44 1f       	adc	r20, r20
    52b8:	aa 1f       	adc	r26, r26
    52ba:	a9 f3       	breq	.-22     	; 0x52a6 <__divsf3_pse+0x10>
    52bc:	35 d0       	rcall	.+106    	; 0x5328 <__divsf3_pse+0x92>
    52be:	0e 2e       	mov	r0, r30
    52c0:	3a f0       	brmi	.+14     	; 0x52d0 <__divsf3_pse+0x3a>
    52c2:	e0 e8       	ldi	r30, 0x80	; 128
    52c4:	32 d0       	rcall	.+100    	; 0x532a <__divsf3_pse+0x94>
    52c6:	91 50       	subi	r25, 0x01	; 1
    52c8:	50 40       	sbci	r21, 0x00	; 0
    52ca:	e6 95       	lsr	r30
    52cc:	00 1c       	adc	r0, r0
    52ce:	ca f7       	brpl	.-14     	; 0x52c2 <__divsf3_pse+0x2c>
    52d0:	2b d0       	rcall	.+86     	; 0x5328 <__divsf3_pse+0x92>
    52d2:	fe 2f       	mov	r31, r30
    52d4:	29 d0       	rcall	.+82     	; 0x5328 <__divsf3_pse+0x92>
    52d6:	66 0f       	add	r22, r22
    52d8:	77 1f       	adc	r23, r23
    52da:	88 1f       	adc	r24, r24
    52dc:	bb 1f       	adc	r27, r27
    52de:	26 17       	cp	r18, r22
    52e0:	37 07       	cpc	r19, r23
    52e2:	48 07       	cpc	r20, r24
    52e4:	ab 07       	cpc	r26, r27
    52e6:	b0 e8       	ldi	r27, 0x80	; 128
    52e8:	09 f0       	breq	.+2      	; 0x52ec <__divsf3_pse+0x56>
    52ea:	bb 0b       	sbc	r27, r27
    52ec:	80 2d       	mov	r24, r0
    52ee:	bf 01       	movw	r22, r30
    52f0:	ff 27       	eor	r31, r31
    52f2:	93 58       	subi	r25, 0x83	; 131
    52f4:	5f 4f       	sbci	r21, 0xFF	; 255
    52f6:	3a f0       	brmi	.+14     	; 0x5306 <__divsf3_pse+0x70>
    52f8:	9e 3f       	cpi	r25, 0xFE	; 254
    52fa:	51 05       	cpc	r21, r1
    52fc:	78 f0       	brcs	.+30     	; 0x531c <__divsf3_pse+0x86>
    52fe:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>
    5302:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__fp_szero>
    5306:	5f 3f       	cpi	r21, 0xFF	; 255
    5308:	e4 f3       	brlt	.-8      	; 0x5302 <__divsf3_pse+0x6c>
    530a:	98 3e       	cpi	r25, 0xE8	; 232
    530c:	d4 f3       	brlt	.-12     	; 0x5302 <__divsf3_pse+0x6c>
    530e:	86 95       	lsr	r24
    5310:	77 95       	ror	r23
    5312:	67 95       	ror	r22
    5314:	b7 95       	ror	r27
    5316:	f7 95       	ror	r31
    5318:	9f 5f       	subi	r25, 0xFF	; 255
    531a:	c9 f7       	brne	.-14     	; 0x530e <__divsf3_pse+0x78>
    531c:	88 0f       	add	r24, r24
    531e:	91 1d       	adc	r25, r1
    5320:	96 95       	lsr	r25
    5322:	87 95       	ror	r24
    5324:	97 f9       	bld	r25, 7
    5326:	08 95       	ret
    5328:	e1 e0       	ldi	r30, 0x01	; 1
    532a:	66 0f       	add	r22, r22
    532c:	77 1f       	adc	r23, r23
    532e:	88 1f       	adc	r24, r24
    5330:	bb 1f       	adc	r27, r27
    5332:	62 17       	cp	r22, r18
    5334:	73 07       	cpc	r23, r19
    5336:	84 07       	cpc	r24, r20
    5338:	ba 07       	cpc	r27, r26
    533a:	20 f0       	brcs	.+8      	; 0x5344 <__divsf3_pse+0xae>
    533c:	62 1b       	sub	r22, r18
    533e:	73 0b       	sbc	r23, r19
    5340:	84 0b       	sbc	r24, r20
    5342:	ba 0b       	sbc	r27, r26
    5344:	ee 1f       	adc	r30, r30
    5346:	88 f7       	brcc	.-30     	; 0x532a <__divsf3_pse+0x94>
    5348:	e0 95       	com	r30
    534a:	08 95       	ret

0000534c <__fixsfsi>:
    534c:	0e 94 ad 29 	call	0x535a	; 0x535a <__fixunssfsi>
    5350:	68 94       	set
    5352:	b1 11       	cpse	r27, r1
    5354:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__fp_szero>
    5358:	08 95       	ret

0000535a <__fixunssfsi>:
    535a:	0e 94 49 2a 	call	0x5492	; 0x5492 <__fp_splitA>
    535e:	88 f0       	brcs	.+34     	; 0x5382 <__fixunssfsi+0x28>
    5360:	9f 57       	subi	r25, 0x7F	; 127
    5362:	98 f0       	brcs	.+38     	; 0x538a <__fixunssfsi+0x30>
    5364:	b9 2f       	mov	r27, r25
    5366:	99 27       	eor	r25, r25
    5368:	b7 51       	subi	r27, 0x17	; 23
    536a:	b0 f0       	brcs	.+44     	; 0x5398 <__fixunssfsi+0x3e>
    536c:	e1 f0       	breq	.+56     	; 0x53a6 <__fixunssfsi+0x4c>
    536e:	66 0f       	add	r22, r22
    5370:	77 1f       	adc	r23, r23
    5372:	88 1f       	adc	r24, r24
    5374:	99 1f       	adc	r25, r25
    5376:	1a f0       	brmi	.+6      	; 0x537e <__fixunssfsi+0x24>
    5378:	ba 95       	dec	r27
    537a:	c9 f7       	brne	.-14     	; 0x536e <__fixunssfsi+0x14>
    537c:	14 c0       	rjmp	.+40     	; 0x53a6 <__fixunssfsi+0x4c>
    537e:	b1 30       	cpi	r27, 0x01	; 1
    5380:	91 f0       	breq	.+36     	; 0x53a6 <__fixunssfsi+0x4c>
    5382:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <__fp_zero>
    5386:	b1 e0       	ldi	r27, 0x01	; 1
    5388:	08 95       	ret
    538a:	0c 94 63 2a 	jmp	0x54c6	; 0x54c6 <__fp_zero>
    538e:	67 2f       	mov	r22, r23
    5390:	78 2f       	mov	r23, r24
    5392:	88 27       	eor	r24, r24
    5394:	b8 5f       	subi	r27, 0xF8	; 248
    5396:	39 f0       	breq	.+14     	; 0x53a6 <__fixunssfsi+0x4c>
    5398:	b9 3f       	cpi	r27, 0xF9	; 249
    539a:	cc f3       	brlt	.-14     	; 0x538e <__fixunssfsi+0x34>
    539c:	86 95       	lsr	r24
    539e:	77 95       	ror	r23
    53a0:	67 95       	ror	r22
    53a2:	b3 95       	inc	r27
    53a4:	d9 f7       	brne	.-10     	; 0x539c <__fixunssfsi+0x42>
    53a6:	3e f4       	brtc	.+14     	; 0x53b6 <__fixunssfsi+0x5c>
    53a8:	90 95       	com	r25
    53aa:	80 95       	com	r24
    53ac:	70 95       	com	r23
    53ae:	61 95       	neg	r22
    53b0:	7f 4f       	sbci	r23, 0xFF	; 255
    53b2:	8f 4f       	sbci	r24, 0xFF	; 255
    53b4:	9f 4f       	sbci	r25, 0xFF	; 255
    53b6:	08 95       	ret

000053b8 <__floatunsisf>:
    53b8:	e8 94       	clt
    53ba:	09 c0       	rjmp	.+18     	; 0x53ce <__floatsisf+0x12>

000053bc <__floatsisf>:
    53bc:	97 fb       	bst	r25, 7
    53be:	3e f4       	brtc	.+14     	; 0x53ce <__floatsisf+0x12>
    53c0:	90 95       	com	r25
    53c2:	80 95       	com	r24
    53c4:	70 95       	com	r23
    53c6:	61 95       	neg	r22
    53c8:	7f 4f       	sbci	r23, 0xFF	; 255
    53ca:	8f 4f       	sbci	r24, 0xFF	; 255
    53cc:	9f 4f       	sbci	r25, 0xFF	; 255
    53ce:	99 23       	and	r25, r25
    53d0:	a9 f0       	breq	.+42     	; 0x53fc <__floatsisf+0x40>
    53d2:	f9 2f       	mov	r31, r25
    53d4:	96 e9       	ldi	r25, 0x96	; 150
    53d6:	bb 27       	eor	r27, r27
    53d8:	93 95       	inc	r25
    53da:	f6 95       	lsr	r31
    53dc:	87 95       	ror	r24
    53de:	77 95       	ror	r23
    53e0:	67 95       	ror	r22
    53e2:	b7 95       	ror	r27
    53e4:	f1 11       	cpse	r31, r1
    53e6:	f8 cf       	rjmp	.-16     	; 0x53d8 <__floatsisf+0x1c>
    53e8:	fa f4       	brpl	.+62     	; 0x5428 <__floatsisf+0x6c>
    53ea:	bb 0f       	add	r27, r27
    53ec:	11 f4       	brne	.+4      	; 0x53f2 <__floatsisf+0x36>
    53ee:	60 ff       	sbrs	r22, 0
    53f0:	1b c0       	rjmp	.+54     	; 0x5428 <__floatsisf+0x6c>
    53f2:	6f 5f       	subi	r22, 0xFF	; 255
    53f4:	7f 4f       	sbci	r23, 0xFF	; 255
    53f6:	8f 4f       	sbci	r24, 0xFF	; 255
    53f8:	9f 4f       	sbci	r25, 0xFF	; 255
    53fa:	16 c0       	rjmp	.+44     	; 0x5428 <__floatsisf+0x6c>
    53fc:	88 23       	and	r24, r24
    53fe:	11 f0       	breq	.+4      	; 0x5404 <__floatsisf+0x48>
    5400:	96 e9       	ldi	r25, 0x96	; 150
    5402:	11 c0       	rjmp	.+34     	; 0x5426 <__floatsisf+0x6a>
    5404:	77 23       	and	r23, r23
    5406:	21 f0       	breq	.+8      	; 0x5410 <__floatsisf+0x54>
    5408:	9e e8       	ldi	r25, 0x8E	; 142
    540a:	87 2f       	mov	r24, r23
    540c:	76 2f       	mov	r23, r22
    540e:	05 c0       	rjmp	.+10     	; 0x541a <__floatsisf+0x5e>
    5410:	66 23       	and	r22, r22
    5412:	71 f0       	breq	.+28     	; 0x5430 <__floatsisf+0x74>
    5414:	96 e8       	ldi	r25, 0x86	; 134
    5416:	86 2f       	mov	r24, r22
    5418:	70 e0       	ldi	r23, 0x00	; 0
    541a:	60 e0       	ldi	r22, 0x00	; 0
    541c:	2a f0       	brmi	.+10     	; 0x5428 <__floatsisf+0x6c>
    541e:	9a 95       	dec	r25
    5420:	66 0f       	add	r22, r22
    5422:	77 1f       	adc	r23, r23
    5424:	88 1f       	adc	r24, r24
    5426:	da f7       	brpl	.-10     	; 0x541e <__floatsisf+0x62>
    5428:	88 0f       	add	r24, r24
    542a:	96 95       	lsr	r25
    542c:	87 95       	ror	r24
    542e:	97 f9       	bld	r25, 7
    5430:	08 95       	ret

00005432 <__fp_inf>:
    5432:	97 f9       	bld	r25, 7
    5434:	9f 67       	ori	r25, 0x7F	; 127
    5436:	80 e8       	ldi	r24, 0x80	; 128
    5438:	70 e0       	ldi	r23, 0x00	; 0
    543a:	60 e0       	ldi	r22, 0x00	; 0
    543c:	08 95       	ret

0000543e <__fp_nan>:
    543e:	9f ef       	ldi	r25, 0xFF	; 255
    5440:	80 ec       	ldi	r24, 0xC0	; 192
    5442:	08 95       	ret

00005444 <__fp_pscA>:
    5444:	00 24       	eor	r0, r0
    5446:	0a 94       	dec	r0
    5448:	16 16       	cp	r1, r22
    544a:	17 06       	cpc	r1, r23
    544c:	18 06       	cpc	r1, r24
    544e:	09 06       	cpc	r0, r25
    5450:	08 95       	ret

00005452 <__fp_pscB>:
    5452:	00 24       	eor	r0, r0
    5454:	0a 94       	dec	r0
    5456:	12 16       	cp	r1, r18
    5458:	13 06       	cpc	r1, r19
    545a:	14 06       	cpc	r1, r20
    545c:	05 06       	cpc	r0, r21
    545e:	08 95       	ret

00005460 <__fp_round>:
    5460:	09 2e       	mov	r0, r25
    5462:	03 94       	inc	r0
    5464:	00 0c       	add	r0, r0
    5466:	11 f4       	brne	.+4      	; 0x546c <__fp_round+0xc>
    5468:	88 23       	and	r24, r24
    546a:	52 f0       	brmi	.+20     	; 0x5480 <__fp_round+0x20>
    546c:	bb 0f       	add	r27, r27
    546e:	40 f4       	brcc	.+16     	; 0x5480 <__fp_round+0x20>
    5470:	bf 2b       	or	r27, r31
    5472:	11 f4       	brne	.+4      	; 0x5478 <__fp_round+0x18>
    5474:	60 ff       	sbrs	r22, 0
    5476:	04 c0       	rjmp	.+8      	; 0x5480 <__fp_round+0x20>
    5478:	6f 5f       	subi	r22, 0xFF	; 255
    547a:	7f 4f       	sbci	r23, 0xFF	; 255
    547c:	8f 4f       	sbci	r24, 0xFF	; 255
    547e:	9f 4f       	sbci	r25, 0xFF	; 255
    5480:	08 95       	ret

00005482 <__fp_split3>:
    5482:	57 fd       	sbrc	r21, 7
    5484:	90 58       	subi	r25, 0x80	; 128
    5486:	44 0f       	add	r20, r20
    5488:	55 1f       	adc	r21, r21
    548a:	59 f0       	breq	.+22     	; 0x54a2 <__fp_splitA+0x10>
    548c:	5f 3f       	cpi	r21, 0xFF	; 255
    548e:	71 f0       	breq	.+28     	; 0x54ac <__fp_splitA+0x1a>
    5490:	47 95       	ror	r20

00005492 <__fp_splitA>:
    5492:	88 0f       	add	r24, r24
    5494:	97 fb       	bst	r25, 7
    5496:	99 1f       	adc	r25, r25
    5498:	61 f0       	breq	.+24     	; 0x54b2 <__fp_splitA+0x20>
    549a:	9f 3f       	cpi	r25, 0xFF	; 255
    549c:	79 f0       	breq	.+30     	; 0x54bc <__fp_splitA+0x2a>
    549e:	87 95       	ror	r24
    54a0:	08 95       	ret
    54a2:	12 16       	cp	r1, r18
    54a4:	13 06       	cpc	r1, r19
    54a6:	14 06       	cpc	r1, r20
    54a8:	55 1f       	adc	r21, r21
    54aa:	f2 cf       	rjmp	.-28     	; 0x5490 <__fp_split3+0xe>
    54ac:	46 95       	lsr	r20
    54ae:	f1 df       	rcall	.-30     	; 0x5492 <__fp_splitA>
    54b0:	08 c0       	rjmp	.+16     	; 0x54c2 <__fp_splitA+0x30>
    54b2:	16 16       	cp	r1, r22
    54b4:	17 06       	cpc	r1, r23
    54b6:	18 06       	cpc	r1, r24
    54b8:	99 1f       	adc	r25, r25
    54ba:	f1 cf       	rjmp	.-30     	; 0x549e <__fp_splitA+0xc>
    54bc:	86 95       	lsr	r24
    54be:	71 05       	cpc	r23, r1
    54c0:	61 05       	cpc	r22, r1
    54c2:	08 94       	sec
    54c4:	08 95       	ret

000054c6 <__fp_zero>:
    54c6:	e8 94       	clt

000054c8 <__fp_szero>:
    54c8:	bb 27       	eor	r27, r27
    54ca:	66 27       	eor	r22, r22
    54cc:	77 27       	eor	r23, r23
    54ce:	cb 01       	movw	r24, r22
    54d0:	97 f9       	bld	r25, 7
    54d2:	08 95       	ret

000054d4 <__mulsf3>:
    54d4:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <__mulsf3x>
    54d8:	0c 94 30 2a 	jmp	0x5460	; 0x5460 <__fp_round>
    54dc:	0e 94 22 2a 	call	0x5444	; 0x5444 <__fp_pscA>
    54e0:	38 f0       	brcs	.+14     	; 0x54f0 <__mulsf3+0x1c>
    54e2:	0e 94 29 2a 	call	0x5452	; 0x5452 <__fp_pscB>
    54e6:	20 f0       	brcs	.+8      	; 0x54f0 <__mulsf3+0x1c>
    54e8:	95 23       	and	r25, r21
    54ea:	11 f0       	breq	.+4      	; 0x54f0 <__mulsf3+0x1c>
    54ec:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>
    54f0:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__fp_nan>
    54f4:	11 24       	eor	r1, r1
    54f6:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__fp_szero>

000054fa <__mulsf3x>:
    54fa:	0e 94 41 2a 	call	0x5482	; 0x5482 <__fp_split3>
    54fe:	70 f3       	brcs	.-36     	; 0x54dc <__mulsf3+0x8>

00005500 <__mulsf3_pse>:
    5500:	95 9f       	mul	r25, r21
    5502:	c1 f3       	breq	.-16     	; 0x54f4 <__mulsf3+0x20>
    5504:	95 0f       	add	r25, r21
    5506:	50 e0       	ldi	r21, 0x00	; 0
    5508:	55 1f       	adc	r21, r21
    550a:	62 9f       	mul	r22, r18
    550c:	f0 01       	movw	r30, r0
    550e:	72 9f       	mul	r23, r18
    5510:	bb 27       	eor	r27, r27
    5512:	f0 0d       	add	r31, r0
    5514:	b1 1d       	adc	r27, r1
    5516:	63 9f       	mul	r22, r19
    5518:	aa 27       	eor	r26, r26
    551a:	f0 0d       	add	r31, r0
    551c:	b1 1d       	adc	r27, r1
    551e:	aa 1f       	adc	r26, r26
    5520:	64 9f       	mul	r22, r20
    5522:	66 27       	eor	r22, r22
    5524:	b0 0d       	add	r27, r0
    5526:	a1 1d       	adc	r26, r1
    5528:	66 1f       	adc	r22, r22
    552a:	82 9f       	mul	r24, r18
    552c:	22 27       	eor	r18, r18
    552e:	b0 0d       	add	r27, r0
    5530:	a1 1d       	adc	r26, r1
    5532:	62 1f       	adc	r22, r18
    5534:	73 9f       	mul	r23, r19
    5536:	b0 0d       	add	r27, r0
    5538:	a1 1d       	adc	r26, r1
    553a:	62 1f       	adc	r22, r18
    553c:	83 9f       	mul	r24, r19
    553e:	a0 0d       	add	r26, r0
    5540:	61 1d       	adc	r22, r1
    5542:	22 1f       	adc	r18, r18
    5544:	74 9f       	mul	r23, r20
    5546:	33 27       	eor	r19, r19
    5548:	a0 0d       	add	r26, r0
    554a:	61 1d       	adc	r22, r1
    554c:	23 1f       	adc	r18, r19
    554e:	84 9f       	mul	r24, r20
    5550:	60 0d       	add	r22, r0
    5552:	21 1d       	adc	r18, r1
    5554:	82 2f       	mov	r24, r18
    5556:	76 2f       	mov	r23, r22
    5558:	6a 2f       	mov	r22, r26
    555a:	11 24       	eor	r1, r1
    555c:	9f 57       	subi	r25, 0x7F	; 127
    555e:	50 40       	sbci	r21, 0x00	; 0
    5560:	9a f0       	brmi	.+38     	; 0x5588 <__mulsf3_pse+0x88>
    5562:	f1 f0       	breq	.+60     	; 0x55a0 <__mulsf3_pse+0xa0>
    5564:	88 23       	and	r24, r24
    5566:	4a f0       	brmi	.+18     	; 0x557a <__mulsf3_pse+0x7a>
    5568:	ee 0f       	add	r30, r30
    556a:	ff 1f       	adc	r31, r31
    556c:	bb 1f       	adc	r27, r27
    556e:	66 1f       	adc	r22, r22
    5570:	77 1f       	adc	r23, r23
    5572:	88 1f       	adc	r24, r24
    5574:	91 50       	subi	r25, 0x01	; 1
    5576:	50 40       	sbci	r21, 0x00	; 0
    5578:	a9 f7       	brne	.-22     	; 0x5564 <__mulsf3_pse+0x64>
    557a:	9e 3f       	cpi	r25, 0xFE	; 254
    557c:	51 05       	cpc	r21, r1
    557e:	80 f0       	brcs	.+32     	; 0x55a0 <__mulsf3_pse+0xa0>
    5580:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>
    5584:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__fp_szero>
    5588:	5f 3f       	cpi	r21, 0xFF	; 255
    558a:	e4 f3       	brlt	.-8      	; 0x5584 <__mulsf3_pse+0x84>
    558c:	98 3e       	cpi	r25, 0xE8	; 232
    558e:	d4 f3       	brlt	.-12     	; 0x5584 <__mulsf3_pse+0x84>
    5590:	86 95       	lsr	r24
    5592:	77 95       	ror	r23
    5594:	67 95       	ror	r22
    5596:	b7 95       	ror	r27
    5598:	f7 95       	ror	r31
    559a:	e7 95       	ror	r30
    559c:	9f 5f       	subi	r25, 0xFF	; 255
    559e:	c1 f7       	brne	.-16     	; 0x5590 <__mulsf3_pse+0x90>
    55a0:	fe 2b       	or	r31, r30
    55a2:	88 0f       	add	r24, r24
    55a4:	91 1d       	adc	r25, r1
    55a6:	96 95       	lsr	r25
    55a8:	87 95       	ror	r24
    55aa:	97 f9       	bld	r25, 7
    55ac:	08 95       	ret

000055ae <__mulsi3>:
    55ae:	db 01       	movw	r26, r22
    55b0:	8f 93       	push	r24
    55b2:	9f 93       	push	r25
    55b4:	0e 94 28 2b 	call	0x5650	; 0x5650 <__muluhisi3>
    55b8:	bf 91       	pop	r27
    55ba:	af 91       	pop	r26
    55bc:	a2 9f       	mul	r26, r18
    55be:	80 0d       	add	r24, r0
    55c0:	91 1d       	adc	r25, r1
    55c2:	a3 9f       	mul	r26, r19
    55c4:	90 0d       	add	r25, r0
    55c6:	b2 9f       	mul	r27, r18
    55c8:	90 0d       	add	r25, r0
    55ca:	11 24       	eor	r1, r1
    55cc:	08 95       	ret

000055ce <__udivmodsi4>:
    55ce:	a1 e2       	ldi	r26, 0x21	; 33
    55d0:	1a 2e       	mov	r1, r26
    55d2:	aa 1b       	sub	r26, r26
    55d4:	bb 1b       	sub	r27, r27
    55d6:	fd 01       	movw	r30, r26
    55d8:	0d c0       	rjmp	.+26     	; 0x55f4 <__udivmodsi4_ep>

000055da <__udivmodsi4_loop>:
    55da:	aa 1f       	adc	r26, r26
    55dc:	bb 1f       	adc	r27, r27
    55de:	ee 1f       	adc	r30, r30
    55e0:	ff 1f       	adc	r31, r31
    55e2:	a2 17       	cp	r26, r18
    55e4:	b3 07       	cpc	r27, r19
    55e6:	e4 07       	cpc	r30, r20
    55e8:	f5 07       	cpc	r31, r21
    55ea:	20 f0       	brcs	.+8      	; 0x55f4 <__udivmodsi4_ep>
    55ec:	a2 1b       	sub	r26, r18
    55ee:	b3 0b       	sbc	r27, r19
    55f0:	e4 0b       	sbc	r30, r20
    55f2:	f5 0b       	sbc	r31, r21

000055f4 <__udivmodsi4_ep>:
    55f4:	66 1f       	adc	r22, r22
    55f6:	77 1f       	adc	r23, r23
    55f8:	88 1f       	adc	r24, r24
    55fa:	99 1f       	adc	r25, r25
    55fc:	1a 94       	dec	r1
    55fe:	69 f7       	brne	.-38     	; 0x55da <__udivmodsi4_loop>
    5600:	60 95       	com	r22
    5602:	70 95       	com	r23
    5604:	80 95       	com	r24
    5606:	90 95       	com	r25
    5608:	9b 01       	movw	r18, r22
    560a:	ac 01       	movw	r20, r24
    560c:	bd 01       	movw	r22, r26
    560e:	cf 01       	movw	r24, r30
    5610:	08 95       	ret

00005612 <__divmodsi4>:
    5612:	05 2e       	mov	r0, r21
    5614:	97 fb       	bst	r25, 7
    5616:	1e f4       	brtc	.+6      	; 0x561e <__divmodsi4+0xc>
    5618:	00 94       	com	r0
    561a:	0e 94 20 2b 	call	0x5640	; 0x5640 <__negsi2>
    561e:	57 fd       	sbrc	r21, 7
    5620:	07 d0       	rcall	.+14     	; 0x5630 <__divmodsi4_neg2>
    5622:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <__udivmodsi4>
    5626:	07 fc       	sbrc	r0, 7
    5628:	03 d0       	rcall	.+6      	; 0x5630 <__divmodsi4_neg2>
    562a:	4e f4       	brtc	.+18     	; 0x563e <__divmodsi4_exit>
    562c:	0c 94 20 2b 	jmp	0x5640	; 0x5640 <__negsi2>

00005630 <__divmodsi4_neg2>:
    5630:	50 95       	com	r21
    5632:	40 95       	com	r20
    5634:	30 95       	com	r19
    5636:	21 95       	neg	r18
    5638:	3f 4f       	sbci	r19, 0xFF	; 255
    563a:	4f 4f       	sbci	r20, 0xFF	; 255
    563c:	5f 4f       	sbci	r21, 0xFF	; 255

0000563e <__divmodsi4_exit>:
    563e:	08 95       	ret

00005640 <__negsi2>:
    5640:	90 95       	com	r25
    5642:	80 95       	com	r24
    5644:	70 95       	com	r23
    5646:	61 95       	neg	r22
    5648:	7f 4f       	sbci	r23, 0xFF	; 255
    564a:	8f 4f       	sbci	r24, 0xFF	; 255
    564c:	9f 4f       	sbci	r25, 0xFF	; 255
    564e:	08 95       	ret

00005650 <__muluhisi3>:
    5650:	0e 94 33 2b 	call	0x5666	; 0x5666 <__umulhisi3>
    5654:	a5 9f       	mul	r26, r21
    5656:	90 0d       	add	r25, r0
    5658:	b4 9f       	mul	r27, r20
    565a:	90 0d       	add	r25, r0
    565c:	a4 9f       	mul	r26, r20
    565e:	80 0d       	add	r24, r0
    5660:	91 1d       	adc	r25, r1
    5662:	11 24       	eor	r1, r1
    5664:	08 95       	ret

00005666 <__umulhisi3>:
    5666:	a2 9f       	mul	r26, r18
    5668:	b0 01       	movw	r22, r0
    566a:	b3 9f       	mul	r27, r19
    566c:	c0 01       	movw	r24, r0
    566e:	a3 9f       	mul	r26, r19
    5670:	70 0d       	add	r23, r0
    5672:	81 1d       	adc	r24, r1
    5674:	11 24       	eor	r1, r1
    5676:	91 1d       	adc	r25, r1
    5678:	b2 9f       	mul	r27, r18
    567a:	70 0d       	add	r23, r0
    567c:	81 1d       	adc	r24, r1
    567e:	11 24       	eor	r1, r1
    5680:	91 1d       	adc	r25, r1
    5682:	08 95       	ret

00005684 <atof>:
    5684:	66 27       	eor	r22, r22
    5686:	77 27       	eor	r23, r23
    5688:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <strtod>

0000568c <atol>:
    568c:	1f 93       	push	r17
    568e:	fc 01       	movw	r30, r24
    5690:	99 27       	eor	r25, r25
    5692:	88 27       	eor	r24, r24
    5694:	bc 01       	movw	r22, r24
    5696:	e8 94       	clt
    5698:	11 91       	ld	r17, Z+
    569a:	10 32       	cpi	r17, 0x20	; 32
    569c:	e9 f3       	breq	.-6      	; 0x5698 <atol+0xc>
    569e:	19 30       	cpi	r17, 0x09	; 9
    56a0:	10 f0       	brcs	.+4      	; 0x56a6 <atol+0x1a>
    56a2:	1e 30       	cpi	r17, 0x0E	; 14
    56a4:	c8 f3       	brcs	.-14     	; 0x5698 <atol+0xc>
    56a6:	1b 32       	cpi	r17, 0x2B	; 43
    56a8:	51 f0       	breq	.+20     	; 0x56be <atol+0x32>
    56aa:	1d 32       	cpi	r17, 0x2D	; 45
    56ac:	49 f4       	brne	.+18     	; 0x56c0 <atol+0x34>
    56ae:	68 94       	set
    56b0:	06 c0       	rjmp	.+12     	; 0x56be <atol+0x32>
    56b2:	0e 94 8a 2b 	call	0x5714	; 0x5714 <__mulsi_const_10>
    56b6:	61 0f       	add	r22, r17
    56b8:	71 1d       	adc	r23, r1
    56ba:	81 1d       	adc	r24, r1
    56bc:	91 1d       	adc	r25, r1
    56be:	11 91       	ld	r17, Z+
    56c0:	10 53       	subi	r17, 0x30	; 48
    56c2:	1a 30       	cpi	r17, 0x0A	; 10
    56c4:	b0 f3       	brcs	.-20     	; 0x56b2 <atol+0x26>
    56c6:	3e f4       	brtc	.+14     	; 0x56d6 <atol+0x4a>
    56c8:	90 95       	com	r25
    56ca:	80 95       	com	r24
    56cc:	70 95       	com	r23
    56ce:	61 95       	neg	r22
    56d0:	7f 4f       	sbci	r23, 0xFF	; 255
    56d2:	8f 4f       	sbci	r24, 0xFF	; 255
    56d4:	9f 4f       	sbci	r25, 0xFF	; 255
    56d6:	1f 91       	pop	r17
    56d8:	08 95       	ret

000056da <strncmp>:
    56da:	fb 01       	movw	r30, r22
    56dc:	dc 01       	movw	r26, r24
    56de:	41 50       	subi	r20, 0x01	; 1
    56e0:	50 40       	sbci	r21, 0x00	; 0
    56e2:	30 f0       	brcs	.+12     	; 0x56f0 <strncmp+0x16>
    56e4:	8d 91       	ld	r24, X+
    56e6:	01 90       	ld	r0, Z+
    56e8:	80 19       	sub	r24, r0
    56ea:	19 f4       	brne	.+6      	; 0x56f2 <strncmp+0x18>
    56ec:	00 20       	and	r0, r0
    56ee:	b9 f7       	brne	.-18     	; 0x56de <strncmp+0x4>
    56f0:	88 1b       	sub	r24, r24
    56f2:	99 0b       	sbc	r25, r25
    56f4:	08 95       	ret

000056f6 <__ltoa_ncheck>:
    56f6:	bb 27       	eor	r27, r27
    56f8:	2a 30       	cpi	r18, 0x0A	; 10
    56fa:	51 f4       	brne	.+20     	; 0x5710 <__ltoa_ncheck+0x1a>
    56fc:	99 23       	and	r25, r25
    56fe:	42 f4       	brpl	.+16     	; 0x5710 <__ltoa_ncheck+0x1a>
    5700:	bd e2       	ldi	r27, 0x2D	; 45
    5702:	90 95       	com	r25
    5704:	80 95       	com	r24
    5706:	70 95       	com	r23
    5708:	61 95       	neg	r22
    570a:	7f 4f       	sbci	r23, 0xFF	; 255
    570c:	8f 4f       	sbci	r24, 0xFF	; 255
    570e:	9f 4f       	sbci	r25, 0xFF	; 255
    5710:	0c 94 a0 2b 	jmp	0x5740	; 0x5740 <__ultoa_common>

00005714 <__mulsi_const_10>:
    5714:	59 2f       	mov	r21, r25
    5716:	48 2f       	mov	r20, r24
    5718:	37 2f       	mov	r19, r23
    571a:	26 2f       	mov	r18, r22
    571c:	66 0f       	add	r22, r22
    571e:	77 1f       	adc	r23, r23
    5720:	88 1f       	adc	r24, r24
    5722:	99 1f       	adc	r25, r25
    5724:	66 0f       	add	r22, r22
    5726:	77 1f       	adc	r23, r23
    5728:	88 1f       	adc	r24, r24
    572a:	99 1f       	adc	r25, r25
    572c:	62 0f       	add	r22, r18
    572e:	73 1f       	adc	r23, r19
    5730:	84 1f       	adc	r24, r20
    5732:	95 1f       	adc	r25, r21
    5734:	66 0f       	add	r22, r22
    5736:	77 1f       	adc	r23, r23
    5738:	88 1f       	adc	r24, r24
    573a:	99 1f       	adc	r25, r25
    573c:	08 95       	ret

0000573e <__ultoa_ncheck>:
    573e:	bb 27       	eor	r27, r27

00005740 <__ultoa_common>:
    5740:	fa 01       	movw	r30, r20
    5742:	a6 2f       	mov	r26, r22
    5744:	62 17       	cp	r22, r18
    5746:	71 05       	cpc	r23, r1
    5748:	81 05       	cpc	r24, r1
    574a:	91 05       	cpc	r25, r1
    574c:	33 0b       	sbc	r19, r19
    574e:	30 fb       	bst	r19, 0
    5750:	66 f0       	brts	.+24     	; 0x576a <__ultoa_common+0x2a>
    5752:	aa 27       	eor	r26, r26
    5754:	66 0f       	add	r22, r22
    5756:	77 1f       	adc	r23, r23
    5758:	88 1f       	adc	r24, r24
    575a:	99 1f       	adc	r25, r25
    575c:	aa 1f       	adc	r26, r26
    575e:	a2 17       	cp	r26, r18
    5760:	10 f0       	brcs	.+4      	; 0x5766 <__ultoa_common+0x26>
    5762:	a2 1b       	sub	r26, r18
    5764:	63 95       	inc	r22
    5766:	38 50       	subi	r19, 0x08	; 8
    5768:	a9 f7       	brne	.-22     	; 0x5754 <__ultoa_common+0x14>
    576a:	a0 5d       	subi	r26, 0xD0	; 208
    576c:	aa 33       	cpi	r26, 0x3A	; 58
    576e:	08 f0       	brcs	.+2      	; 0x5772 <__ultoa_common+0x32>
    5770:	a9 5d       	subi	r26, 0xD9	; 217
    5772:	a1 93       	st	Z+, r26
    5774:	36 f7       	brtc	.-52     	; 0x5742 <__ultoa_common+0x2>
    5776:	b1 11       	cpse	r27, r1
    5778:	b1 93       	st	Z+, r27
    577a:	10 82       	st	Z, r1
    577c:	ca 01       	movw	r24, r20
    577e:	0c 94 c5 2f 	jmp	0x5f8a	; 0x5f8a <strrev>

00005782 <printf>:
    5782:	cf 93       	push	r28
    5784:	df 93       	push	r29
    5786:	cd b7       	in	r28, 0x3d	; 61
    5788:	de b7       	in	r29, 0x3e	; 62
    578a:	ae 01       	movw	r20, r28
    578c:	4a 5f       	subi	r20, 0xFA	; 250
    578e:	5f 4f       	sbci	r21, 0xFF	; 255
    5790:	fa 01       	movw	r30, r20
    5792:	61 91       	ld	r22, Z+
    5794:	71 91       	ld	r23, Z+
    5796:	af 01       	movw	r20, r30
    5798:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <__iob+0x2>
    579c:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <__iob+0x3>
    57a0:	0e 94 2e 2c 	call	0x585c	; 0x585c <vfprintf>
    57a4:	df 91       	pop	r29
    57a6:	cf 91       	pop	r28
    57a8:	08 95       	ret

000057aa <puts>:
    57aa:	0f 93       	push	r16
    57ac:	1f 93       	push	r17
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	e0 91 3e 27 	lds	r30, 0x273E	; 0x80273e <__iob+0x2>
    57b6:	f0 91 3f 27 	lds	r31, 0x273F	; 0x80273f <__iob+0x3>
    57ba:	23 81       	ldd	r18, Z+3	; 0x03
    57bc:	21 ff       	sbrs	r18, 1
    57be:	1b c0       	rjmp	.+54     	; 0x57f6 <puts+0x4c>
    57c0:	8c 01       	movw	r16, r24
    57c2:	d0 e0       	ldi	r29, 0x00	; 0
    57c4:	c0 e0       	ldi	r28, 0x00	; 0
    57c6:	f8 01       	movw	r30, r16
    57c8:	81 91       	ld	r24, Z+
    57ca:	8f 01       	movw	r16, r30
    57cc:	60 91 3e 27 	lds	r22, 0x273E	; 0x80273e <__iob+0x2>
    57d0:	70 91 3f 27 	lds	r23, 0x273F	; 0x80273f <__iob+0x3>
    57d4:	db 01       	movw	r26, r22
    57d6:	18 96       	adiw	r26, 0x08	; 8
    57d8:	ed 91       	ld	r30, X+
    57da:	fc 91       	ld	r31, X
    57dc:	19 97       	sbiw	r26, 0x09	; 9
    57de:	88 23       	and	r24, r24
    57e0:	31 f0       	breq	.+12     	; 0x57ee <puts+0x44>
    57e2:	19 95       	eicall
    57e4:	89 2b       	or	r24, r25
    57e6:	79 f3       	breq	.-34     	; 0x57c6 <puts+0x1c>
    57e8:	df ef       	ldi	r29, 0xFF	; 255
    57ea:	cf ef       	ldi	r28, 0xFF	; 255
    57ec:	ec cf       	rjmp	.-40     	; 0x57c6 <puts+0x1c>
    57ee:	8a e0       	ldi	r24, 0x0A	; 10
    57f0:	19 95       	eicall
    57f2:	89 2b       	or	r24, r25
    57f4:	19 f0       	breq	.+6      	; 0x57fc <puts+0x52>
    57f6:	8f ef       	ldi	r24, 0xFF	; 255
    57f8:	9f ef       	ldi	r25, 0xFF	; 255
    57fa:	02 c0       	rjmp	.+4      	; 0x5800 <puts+0x56>
    57fc:	8d 2f       	mov	r24, r29
    57fe:	9c 2f       	mov	r25, r28
    5800:	df 91       	pop	r29
    5802:	cf 91       	pop	r28
    5804:	1f 91       	pop	r17
    5806:	0f 91       	pop	r16
    5808:	08 95       	ret

0000580a <sprintf>:
    580a:	0f 93       	push	r16
    580c:	1f 93       	push	r17
    580e:	cf 93       	push	r28
    5810:	df 93       	push	r29
    5812:	cd b7       	in	r28, 0x3d	; 61
    5814:	de b7       	in	r29, 0x3e	; 62
    5816:	2e 97       	sbiw	r28, 0x0e	; 14
    5818:	cd bf       	out	0x3d, r28	; 61
    581a:	de bf       	out	0x3e, r29	; 62
    581c:	0e 89       	ldd	r16, Y+22	; 0x16
    581e:	1f 89       	ldd	r17, Y+23	; 0x17
    5820:	86 e0       	ldi	r24, 0x06	; 6
    5822:	8c 83       	std	Y+4, r24	; 0x04
    5824:	09 83       	std	Y+1, r16	; 0x01
    5826:	1a 83       	std	Y+2, r17	; 0x02
    5828:	8f ef       	ldi	r24, 0xFF	; 255
    582a:	9f e7       	ldi	r25, 0x7F	; 127
    582c:	8d 83       	std	Y+5, r24	; 0x05
    582e:	9e 83       	std	Y+6, r25	; 0x06
    5830:	ae 01       	movw	r20, r28
    5832:	46 5e       	subi	r20, 0xE6	; 230
    5834:	5f 4f       	sbci	r21, 0xFF	; 255
    5836:	68 8d       	ldd	r22, Y+24	; 0x18
    5838:	79 8d       	ldd	r23, Y+25	; 0x19
    583a:	ce 01       	movw	r24, r28
    583c:	01 96       	adiw	r24, 0x01	; 1
    583e:	0e 94 2e 2c 	call	0x585c	; 0x585c <vfprintf>
    5842:	ef 81       	ldd	r30, Y+7	; 0x07
    5844:	f8 85       	ldd	r31, Y+8	; 0x08
    5846:	e0 0f       	add	r30, r16
    5848:	f1 1f       	adc	r31, r17
    584a:	10 82       	st	Z, r1
    584c:	2e 96       	adiw	r28, 0x0e	; 14
    584e:	cd bf       	out	0x3d, r28	; 61
    5850:	de bf       	out	0x3e, r29	; 62
    5852:	df 91       	pop	r29
    5854:	cf 91       	pop	r28
    5856:	1f 91       	pop	r17
    5858:	0f 91       	pop	r16
    585a:	08 95       	ret

0000585c <vfprintf>:
    585c:	2f 92       	push	r2
    585e:	3f 92       	push	r3
    5860:	4f 92       	push	r4
    5862:	5f 92       	push	r5
    5864:	6f 92       	push	r6
    5866:	7f 92       	push	r7
    5868:	8f 92       	push	r8
    586a:	9f 92       	push	r9
    586c:	af 92       	push	r10
    586e:	bf 92       	push	r11
    5870:	cf 92       	push	r12
    5872:	df 92       	push	r13
    5874:	ef 92       	push	r14
    5876:	ff 92       	push	r15
    5878:	0f 93       	push	r16
    587a:	1f 93       	push	r17
    587c:	cf 93       	push	r28
    587e:	df 93       	push	r29
    5880:	cd b7       	in	r28, 0x3d	; 61
    5882:	de b7       	in	r29, 0x3e	; 62
    5884:	2b 97       	sbiw	r28, 0x0b	; 11
    5886:	cd bf       	out	0x3d, r28	; 61
    5888:	de bf       	out	0x3e, r29	; 62
    588a:	6c 01       	movw	r12, r24
    588c:	7b 01       	movw	r14, r22
    588e:	8a 01       	movw	r16, r20
    5890:	fc 01       	movw	r30, r24
    5892:	16 82       	std	Z+6, r1	; 0x06
    5894:	17 82       	std	Z+7, r1	; 0x07
    5896:	83 81       	ldd	r24, Z+3	; 0x03
    5898:	81 ff       	sbrs	r24, 1
    589a:	cc c1       	rjmp	.+920    	; 0x5c34 <vfprintf+0x3d8>
    589c:	ce 01       	movw	r24, r28
    589e:	01 96       	adiw	r24, 0x01	; 1
    58a0:	3c 01       	movw	r6, r24
    58a2:	f6 01       	movw	r30, r12
    58a4:	93 81       	ldd	r25, Z+3	; 0x03
    58a6:	f7 01       	movw	r30, r14
    58a8:	93 fd       	sbrc	r25, 3
    58aa:	85 91       	lpm	r24, Z+
    58ac:	93 ff       	sbrs	r25, 3
    58ae:	81 91       	ld	r24, Z+
    58b0:	7f 01       	movw	r14, r30
    58b2:	88 23       	and	r24, r24
    58b4:	09 f4       	brne	.+2      	; 0x58b8 <vfprintf+0x5c>
    58b6:	ba c1       	rjmp	.+884    	; 0x5c2c <vfprintf+0x3d0>
    58b8:	85 32       	cpi	r24, 0x25	; 37
    58ba:	39 f4       	brne	.+14     	; 0x58ca <vfprintf+0x6e>
    58bc:	93 fd       	sbrc	r25, 3
    58be:	85 91       	lpm	r24, Z+
    58c0:	93 ff       	sbrs	r25, 3
    58c2:	81 91       	ld	r24, Z+
    58c4:	7f 01       	movw	r14, r30
    58c6:	85 32       	cpi	r24, 0x25	; 37
    58c8:	29 f4       	brne	.+10     	; 0x58d4 <vfprintf+0x78>
    58ca:	b6 01       	movw	r22, r12
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    58d2:	e7 cf       	rjmp	.-50     	; 0x58a2 <vfprintf+0x46>
    58d4:	91 2c       	mov	r9, r1
    58d6:	21 2c       	mov	r2, r1
    58d8:	31 2c       	mov	r3, r1
    58da:	ff e1       	ldi	r31, 0x1F	; 31
    58dc:	f3 15       	cp	r31, r3
    58de:	d8 f0       	brcs	.+54     	; 0x5916 <vfprintf+0xba>
    58e0:	8b 32       	cpi	r24, 0x2B	; 43
    58e2:	79 f0       	breq	.+30     	; 0x5902 <vfprintf+0xa6>
    58e4:	38 f4       	brcc	.+14     	; 0x58f4 <vfprintf+0x98>
    58e6:	80 32       	cpi	r24, 0x20	; 32
    58e8:	79 f0       	breq	.+30     	; 0x5908 <vfprintf+0xac>
    58ea:	83 32       	cpi	r24, 0x23	; 35
    58ec:	a1 f4       	brne	.+40     	; 0x5916 <vfprintf+0xba>
    58ee:	23 2d       	mov	r18, r3
    58f0:	20 61       	ori	r18, 0x10	; 16
    58f2:	1d c0       	rjmp	.+58     	; 0x592e <vfprintf+0xd2>
    58f4:	8d 32       	cpi	r24, 0x2D	; 45
    58f6:	61 f0       	breq	.+24     	; 0x5910 <vfprintf+0xb4>
    58f8:	80 33       	cpi	r24, 0x30	; 48
    58fa:	69 f4       	brne	.+26     	; 0x5916 <vfprintf+0xba>
    58fc:	23 2d       	mov	r18, r3
    58fe:	21 60       	ori	r18, 0x01	; 1
    5900:	16 c0       	rjmp	.+44     	; 0x592e <vfprintf+0xd2>
    5902:	83 2d       	mov	r24, r3
    5904:	82 60       	ori	r24, 0x02	; 2
    5906:	38 2e       	mov	r3, r24
    5908:	e3 2d       	mov	r30, r3
    590a:	e4 60       	ori	r30, 0x04	; 4
    590c:	3e 2e       	mov	r3, r30
    590e:	2a c0       	rjmp	.+84     	; 0x5964 <vfprintf+0x108>
    5910:	f3 2d       	mov	r31, r3
    5912:	f8 60       	ori	r31, 0x08	; 8
    5914:	1d c0       	rjmp	.+58     	; 0x5950 <vfprintf+0xf4>
    5916:	37 fc       	sbrc	r3, 7
    5918:	2d c0       	rjmp	.+90     	; 0x5974 <vfprintf+0x118>
    591a:	20 ed       	ldi	r18, 0xD0	; 208
    591c:	28 0f       	add	r18, r24
    591e:	2a 30       	cpi	r18, 0x0A	; 10
    5920:	40 f0       	brcs	.+16     	; 0x5932 <vfprintf+0xd6>
    5922:	8e 32       	cpi	r24, 0x2E	; 46
    5924:	b9 f4       	brne	.+46     	; 0x5954 <vfprintf+0xf8>
    5926:	36 fc       	sbrc	r3, 6
    5928:	81 c1       	rjmp	.+770    	; 0x5c2c <vfprintf+0x3d0>
    592a:	23 2d       	mov	r18, r3
    592c:	20 64       	ori	r18, 0x40	; 64
    592e:	32 2e       	mov	r3, r18
    5930:	19 c0       	rjmp	.+50     	; 0x5964 <vfprintf+0x108>
    5932:	36 fe       	sbrs	r3, 6
    5934:	06 c0       	rjmp	.+12     	; 0x5942 <vfprintf+0xe6>
    5936:	8a e0       	ldi	r24, 0x0A	; 10
    5938:	98 9e       	mul	r9, r24
    593a:	20 0d       	add	r18, r0
    593c:	11 24       	eor	r1, r1
    593e:	92 2e       	mov	r9, r18
    5940:	11 c0       	rjmp	.+34     	; 0x5964 <vfprintf+0x108>
    5942:	ea e0       	ldi	r30, 0x0A	; 10
    5944:	2e 9e       	mul	r2, r30
    5946:	20 0d       	add	r18, r0
    5948:	11 24       	eor	r1, r1
    594a:	22 2e       	mov	r2, r18
    594c:	f3 2d       	mov	r31, r3
    594e:	f0 62       	ori	r31, 0x20	; 32
    5950:	3f 2e       	mov	r3, r31
    5952:	08 c0       	rjmp	.+16     	; 0x5964 <vfprintf+0x108>
    5954:	8c 36       	cpi	r24, 0x6C	; 108
    5956:	21 f4       	brne	.+8      	; 0x5960 <vfprintf+0x104>
    5958:	83 2d       	mov	r24, r3
    595a:	80 68       	ori	r24, 0x80	; 128
    595c:	38 2e       	mov	r3, r24
    595e:	02 c0       	rjmp	.+4      	; 0x5964 <vfprintf+0x108>
    5960:	88 36       	cpi	r24, 0x68	; 104
    5962:	41 f4       	brne	.+16     	; 0x5974 <vfprintf+0x118>
    5964:	f7 01       	movw	r30, r14
    5966:	93 fd       	sbrc	r25, 3
    5968:	85 91       	lpm	r24, Z+
    596a:	93 ff       	sbrs	r25, 3
    596c:	81 91       	ld	r24, Z+
    596e:	7f 01       	movw	r14, r30
    5970:	81 11       	cpse	r24, r1
    5972:	b3 cf       	rjmp	.-154    	; 0x58da <vfprintf+0x7e>
    5974:	98 2f       	mov	r25, r24
    5976:	9f 7d       	andi	r25, 0xDF	; 223
    5978:	95 54       	subi	r25, 0x45	; 69
    597a:	93 30       	cpi	r25, 0x03	; 3
    597c:	28 f4       	brcc	.+10     	; 0x5988 <vfprintf+0x12c>
    597e:	0c 5f       	subi	r16, 0xFC	; 252
    5980:	1f 4f       	sbci	r17, 0xFF	; 255
    5982:	9f e3       	ldi	r25, 0x3F	; 63
    5984:	99 83       	std	Y+1, r25	; 0x01
    5986:	0d c0       	rjmp	.+26     	; 0x59a2 <vfprintf+0x146>
    5988:	83 36       	cpi	r24, 0x63	; 99
    598a:	31 f0       	breq	.+12     	; 0x5998 <vfprintf+0x13c>
    598c:	83 37       	cpi	r24, 0x73	; 115
    598e:	71 f0       	breq	.+28     	; 0x59ac <vfprintf+0x150>
    5990:	83 35       	cpi	r24, 0x53	; 83
    5992:	09 f0       	breq	.+2      	; 0x5996 <vfprintf+0x13a>
    5994:	59 c0       	rjmp	.+178    	; 0x5a48 <vfprintf+0x1ec>
    5996:	21 c0       	rjmp	.+66     	; 0x59da <vfprintf+0x17e>
    5998:	f8 01       	movw	r30, r16
    599a:	80 81       	ld	r24, Z
    599c:	89 83       	std	Y+1, r24	; 0x01
    599e:	0e 5f       	subi	r16, 0xFE	; 254
    59a0:	1f 4f       	sbci	r17, 0xFF	; 255
    59a2:	88 24       	eor	r8, r8
    59a4:	83 94       	inc	r8
    59a6:	91 2c       	mov	r9, r1
    59a8:	53 01       	movw	r10, r6
    59aa:	13 c0       	rjmp	.+38     	; 0x59d2 <vfprintf+0x176>
    59ac:	28 01       	movw	r4, r16
    59ae:	f2 e0       	ldi	r31, 0x02	; 2
    59b0:	4f 0e       	add	r4, r31
    59b2:	51 1c       	adc	r5, r1
    59b4:	f8 01       	movw	r30, r16
    59b6:	a0 80       	ld	r10, Z
    59b8:	b1 80       	ldd	r11, Z+1	; 0x01
    59ba:	36 fe       	sbrs	r3, 6
    59bc:	03 c0       	rjmp	.+6      	; 0x59c4 <vfprintf+0x168>
    59be:	69 2d       	mov	r22, r9
    59c0:	70 e0       	ldi	r23, 0x00	; 0
    59c2:	02 c0       	rjmp	.+4      	; 0x59c8 <vfprintf+0x16c>
    59c4:	6f ef       	ldi	r22, 0xFF	; 255
    59c6:	7f ef       	ldi	r23, 0xFF	; 255
    59c8:	c5 01       	movw	r24, r10
    59ca:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <strnlen>
    59ce:	4c 01       	movw	r8, r24
    59d0:	82 01       	movw	r16, r4
    59d2:	f3 2d       	mov	r31, r3
    59d4:	ff 77       	andi	r31, 0x7F	; 127
    59d6:	3f 2e       	mov	r3, r31
    59d8:	16 c0       	rjmp	.+44     	; 0x5a06 <vfprintf+0x1aa>
    59da:	28 01       	movw	r4, r16
    59dc:	22 e0       	ldi	r18, 0x02	; 2
    59de:	42 0e       	add	r4, r18
    59e0:	51 1c       	adc	r5, r1
    59e2:	f8 01       	movw	r30, r16
    59e4:	a0 80       	ld	r10, Z
    59e6:	b1 80       	ldd	r11, Z+1	; 0x01
    59e8:	36 fe       	sbrs	r3, 6
    59ea:	03 c0       	rjmp	.+6      	; 0x59f2 <vfprintf+0x196>
    59ec:	69 2d       	mov	r22, r9
    59ee:	70 e0       	ldi	r23, 0x00	; 0
    59f0:	02 c0       	rjmp	.+4      	; 0x59f6 <vfprintf+0x19a>
    59f2:	6f ef       	ldi	r22, 0xFF	; 255
    59f4:	7f ef       	ldi	r23, 0xFF	; 255
    59f6:	c5 01       	movw	r24, r10
    59f8:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <strnlen_P>
    59fc:	4c 01       	movw	r8, r24
    59fe:	f3 2d       	mov	r31, r3
    5a00:	f0 68       	ori	r31, 0x80	; 128
    5a02:	3f 2e       	mov	r3, r31
    5a04:	82 01       	movw	r16, r4
    5a06:	33 fc       	sbrc	r3, 3
    5a08:	1b c0       	rjmp	.+54     	; 0x5a40 <vfprintf+0x1e4>
    5a0a:	82 2d       	mov	r24, r2
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	88 16       	cp	r8, r24
    5a10:	99 06       	cpc	r9, r25
    5a12:	b0 f4       	brcc	.+44     	; 0x5a40 <vfprintf+0x1e4>
    5a14:	b6 01       	movw	r22, r12
    5a16:	80 e2       	ldi	r24, 0x20	; 32
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    5a1e:	2a 94       	dec	r2
    5a20:	f4 cf       	rjmp	.-24     	; 0x5a0a <vfprintf+0x1ae>
    5a22:	f5 01       	movw	r30, r10
    5a24:	37 fc       	sbrc	r3, 7
    5a26:	85 91       	lpm	r24, Z+
    5a28:	37 fe       	sbrs	r3, 7
    5a2a:	81 91       	ld	r24, Z+
    5a2c:	5f 01       	movw	r10, r30
    5a2e:	b6 01       	movw	r22, r12
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    5a36:	21 10       	cpse	r2, r1
    5a38:	2a 94       	dec	r2
    5a3a:	21 e0       	ldi	r18, 0x01	; 1
    5a3c:	82 1a       	sub	r8, r18
    5a3e:	91 08       	sbc	r9, r1
    5a40:	81 14       	cp	r8, r1
    5a42:	91 04       	cpc	r9, r1
    5a44:	71 f7       	brne	.-36     	; 0x5a22 <vfprintf+0x1c6>
    5a46:	e8 c0       	rjmp	.+464    	; 0x5c18 <vfprintf+0x3bc>
    5a48:	84 36       	cpi	r24, 0x64	; 100
    5a4a:	11 f0       	breq	.+4      	; 0x5a50 <vfprintf+0x1f4>
    5a4c:	89 36       	cpi	r24, 0x69	; 105
    5a4e:	41 f5       	brne	.+80     	; 0x5aa0 <vfprintf+0x244>
    5a50:	f8 01       	movw	r30, r16
    5a52:	37 fe       	sbrs	r3, 7
    5a54:	07 c0       	rjmp	.+14     	; 0x5a64 <vfprintf+0x208>
    5a56:	60 81       	ld	r22, Z
    5a58:	71 81       	ldd	r23, Z+1	; 0x01
    5a5a:	82 81       	ldd	r24, Z+2	; 0x02
    5a5c:	93 81       	ldd	r25, Z+3	; 0x03
    5a5e:	0c 5f       	subi	r16, 0xFC	; 252
    5a60:	1f 4f       	sbci	r17, 0xFF	; 255
    5a62:	08 c0       	rjmp	.+16     	; 0x5a74 <vfprintf+0x218>
    5a64:	60 81       	ld	r22, Z
    5a66:	71 81       	ldd	r23, Z+1	; 0x01
    5a68:	07 2e       	mov	r0, r23
    5a6a:	00 0c       	add	r0, r0
    5a6c:	88 0b       	sbc	r24, r24
    5a6e:	99 0b       	sbc	r25, r25
    5a70:	0e 5f       	subi	r16, 0xFE	; 254
    5a72:	1f 4f       	sbci	r17, 0xFF	; 255
    5a74:	f3 2d       	mov	r31, r3
    5a76:	ff 76       	andi	r31, 0x6F	; 111
    5a78:	3f 2e       	mov	r3, r31
    5a7a:	97 ff       	sbrs	r25, 7
    5a7c:	09 c0       	rjmp	.+18     	; 0x5a90 <vfprintf+0x234>
    5a7e:	90 95       	com	r25
    5a80:	80 95       	com	r24
    5a82:	70 95       	com	r23
    5a84:	61 95       	neg	r22
    5a86:	7f 4f       	sbci	r23, 0xFF	; 255
    5a88:	8f 4f       	sbci	r24, 0xFF	; 255
    5a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a8c:	f0 68       	ori	r31, 0x80	; 128
    5a8e:	3f 2e       	mov	r3, r31
    5a90:	2a e0       	ldi	r18, 0x0A	; 10
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	a3 01       	movw	r20, r6
    5a96:	0e 94 11 30 	call	0x6022	; 0x6022 <__ultoa_invert>
    5a9a:	88 2e       	mov	r8, r24
    5a9c:	86 18       	sub	r8, r6
    5a9e:	45 c0       	rjmp	.+138    	; 0x5b2a <vfprintf+0x2ce>
    5aa0:	85 37       	cpi	r24, 0x75	; 117
    5aa2:	31 f4       	brne	.+12     	; 0x5ab0 <vfprintf+0x254>
    5aa4:	23 2d       	mov	r18, r3
    5aa6:	2f 7e       	andi	r18, 0xEF	; 239
    5aa8:	b2 2e       	mov	r11, r18
    5aaa:	2a e0       	ldi	r18, 0x0A	; 10
    5aac:	30 e0       	ldi	r19, 0x00	; 0
    5aae:	25 c0       	rjmp	.+74     	; 0x5afa <vfprintf+0x29e>
    5ab0:	93 2d       	mov	r25, r3
    5ab2:	99 7f       	andi	r25, 0xF9	; 249
    5ab4:	b9 2e       	mov	r11, r25
    5ab6:	8f 36       	cpi	r24, 0x6F	; 111
    5ab8:	c1 f0       	breq	.+48     	; 0x5aea <vfprintf+0x28e>
    5aba:	18 f4       	brcc	.+6      	; 0x5ac2 <vfprintf+0x266>
    5abc:	88 35       	cpi	r24, 0x58	; 88
    5abe:	79 f0       	breq	.+30     	; 0x5ade <vfprintf+0x282>
    5ac0:	b5 c0       	rjmp	.+362    	; 0x5c2c <vfprintf+0x3d0>
    5ac2:	80 37       	cpi	r24, 0x70	; 112
    5ac4:	19 f0       	breq	.+6      	; 0x5acc <vfprintf+0x270>
    5ac6:	88 37       	cpi	r24, 0x78	; 120
    5ac8:	21 f0       	breq	.+8      	; 0x5ad2 <vfprintf+0x276>
    5aca:	b0 c0       	rjmp	.+352    	; 0x5c2c <vfprintf+0x3d0>
    5acc:	e9 2f       	mov	r30, r25
    5ace:	e0 61       	ori	r30, 0x10	; 16
    5ad0:	be 2e       	mov	r11, r30
    5ad2:	b4 fe       	sbrs	r11, 4
    5ad4:	0d c0       	rjmp	.+26     	; 0x5af0 <vfprintf+0x294>
    5ad6:	fb 2d       	mov	r31, r11
    5ad8:	f4 60       	ori	r31, 0x04	; 4
    5ada:	bf 2e       	mov	r11, r31
    5adc:	09 c0       	rjmp	.+18     	; 0x5af0 <vfprintf+0x294>
    5ade:	34 fe       	sbrs	r3, 4
    5ae0:	0a c0       	rjmp	.+20     	; 0x5af6 <vfprintf+0x29a>
    5ae2:	29 2f       	mov	r18, r25
    5ae4:	26 60       	ori	r18, 0x06	; 6
    5ae6:	b2 2e       	mov	r11, r18
    5ae8:	06 c0       	rjmp	.+12     	; 0x5af6 <vfprintf+0x29a>
    5aea:	28 e0       	ldi	r18, 0x08	; 8
    5aec:	30 e0       	ldi	r19, 0x00	; 0
    5aee:	05 c0       	rjmp	.+10     	; 0x5afa <vfprintf+0x29e>
    5af0:	20 e1       	ldi	r18, 0x10	; 16
    5af2:	30 e0       	ldi	r19, 0x00	; 0
    5af4:	02 c0       	rjmp	.+4      	; 0x5afa <vfprintf+0x29e>
    5af6:	20 e1       	ldi	r18, 0x10	; 16
    5af8:	32 e0       	ldi	r19, 0x02	; 2
    5afa:	f8 01       	movw	r30, r16
    5afc:	b7 fe       	sbrs	r11, 7
    5afe:	07 c0       	rjmp	.+14     	; 0x5b0e <vfprintf+0x2b2>
    5b00:	60 81       	ld	r22, Z
    5b02:	71 81       	ldd	r23, Z+1	; 0x01
    5b04:	82 81       	ldd	r24, Z+2	; 0x02
    5b06:	93 81       	ldd	r25, Z+3	; 0x03
    5b08:	0c 5f       	subi	r16, 0xFC	; 252
    5b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b0c:	06 c0       	rjmp	.+12     	; 0x5b1a <vfprintf+0x2be>
    5b0e:	60 81       	ld	r22, Z
    5b10:	71 81       	ldd	r23, Z+1	; 0x01
    5b12:	80 e0       	ldi	r24, 0x00	; 0
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	0e 5f       	subi	r16, 0xFE	; 254
    5b18:	1f 4f       	sbci	r17, 0xFF	; 255
    5b1a:	a3 01       	movw	r20, r6
    5b1c:	0e 94 11 30 	call	0x6022	; 0x6022 <__ultoa_invert>
    5b20:	88 2e       	mov	r8, r24
    5b22:	86 18       	sub	r8, r6
    5b24:	fb 2d       	mov	r31, r11
    5b26:	ff 77       	andi	r31, 0x7F	; 127
    5b28:	3f 2e       	mov	r3, r31
    5b2a:	36 fe       	sbrs	r3, 6
    5b2c:	0d c0       	rjmp	.+26     	; 0x5b48 <vfprintf+0x2ec>
    5b2e:	23 2d       	mov	r18, r3
    5b30:	2e 7f       	andi	r18, 0xFE	; 254
    5b32:	a2 2e       	mov	r10, r18
    5b34:	89 14       	cp	r8, r9
    5b36:	58 f4       	brcc	.+22     	; 0x5b4e <vfprintf+0x2f2>
    5b38:	34 fe       	sbrs	r3, 4
    5b3a:	0b c0       	rjmp	.+22     	; 0x5b52 <vfprintf+0x2f6>
    5b3c:	32 fc       	sbrc	r3, 2
    5b3e:	09 c0       	rjmp	.+18     	; 0x5b52 <vfprintf+0x2f6>
    5b40:	83 2d       	mov	r24, r3
    5b42:	8e 7e       	andi	r24, 0xEE	; 238
    5b44:	a8 2e       	mov	r10, r24
    5b46:	05 c0       	rjmp	.+10     	; 0x5b52 <vfprintf+0x2f6>
    5b48:	b8 2c       	mov	r11, r8
    5b4a:	a3 2c       	mov	r10, r3
    5b4c:	03 c0       	rjmp	.+6      	; 0x5b54 <vfprintf+0x2f8>
    5b4e:	b8 2c       	mov	r11, r8
    5b50:	01 c0       	rjmp	.+2      	; 0x5b54 <vfprintf+0x2f8>
    5b52:	b9 2c       	mov	r11, r9
    5b54:	a4 fe       	sbrs	r10, 4
    5b56:	0f c0       	rjmp	.+30     	; 0x5b76 <vfprintf+0x31a>
    5b58:	fe 01       	movw	r30, r28
    5b5a:	e8 0d       	add	r30, r8
    5b5c:	f1 1d       	adc	r31, r1
    5b5e:	80 81       	ld	r24, Z
    5b60:	80 33       	cpi	r24, 0x30	; 48
    5b62:	21 f4       	brne	.+8      	; 0x5b6c <vfprintf+0x310>
    5b64:	9a 2d       	mov	r25, r10
    5b66:	99 7e       	andi	r25, 0xE9	; 233
    5b68:	a9 2e       	mov	r10, r25
    5b6a:	09 c0       	rjmp	.+18     	; 0x5b7e <vfprintf+0x322>
    5b6c:	a2 fe       	sbrs	r10, 2
    5b6e:	06 c0       	rjmp	.+12     	; 0x5b7c <vfprintf+0x320>
    5b70:	b3 94       	inc	r11
    5b72:	b3 94       	inc	r11
    5b74:	04 c0       	rjmp	.+8      	; 0x5b7e <vfprintf+0x322>
    5b76:	8a 2d       	mov	r24, r10
    5b78:	86 78       	andi	r24, 0x86	; 134
    5b7a:	09 f0       	breq	.+2      	; 0x5b7e <vfprintf+0x322>
    5b7c:	b3 94       	inc	r11
    5b7e:	a3 fc       	sbrc	r10, 3
    5b80:	11 c0       	rjmp	.+34     	; 0x5ba4 <vfprintf+0x348>
    5b82:	a0 fe       	sbrs	r10, 0
    5b84:	06 c0       	rjmp	.+12     	; 0x5b92 <vfprintf+0x336>
    5b86:	b2 14       	cp	r11, r2
    5b88:	88 f4       	brcc	.+34     	; 0x5bac <vfprintf+0x350>
    5b8a:	28 0c       	add	r2, r8
    5b8c:	92 2c       	mov	r9, r2
    5b8e:	9b 18       	sub	r9, r11
    5b90:	0e c0       	rjmp	.+28     	; 0x5bae <vfprintf+0x352>
    5b92:	b2 14       	cp	r11, r2
    5b94:	60 f4       	brcc	.+24     	; 0x5bae <vfprintf+0x352>
    5b96:	b6 01       	movw	r22, r12
    5b98:	80 e2       	ldi	r24, 0x20	; 32
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    5ba0:	b3 94       	inc	r11
    5ba2:	f7 cf       	rjmp	.-18     	; 0x5b92 <vfprintf+0x336>
    5ba4:	b2 14       	cp	r11, r2
    5ba6:	18 f4       	brcc	.+6      	; 0x5bae <vfprintf+0x352>
    5ba8:	2b 18       	sub	r2, r11
    5baa:	02 c0       	rjmp	.+4      	; 0x5bb0 <vfprintf+0x354>
    5bac:	98 2c       	mov	r9, r8
    5bae:	21 2c       	mov	r2, r1
    5bb0:	a4 fe       	sbrs	r10, 4
    5bb2:	10 c0       	rjmp	.+32     	; 0x5bd4 <vfprintf+0x378>
    5bb4:	b6 01       	movw	r22, r12
    5bb6:	80 e3       	ldi	r24, 0x30	; 48
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    5bbe:	a2 fe       	sbrs	r10, 2
    5bc0:	17 c0       	rjmp	.+46     	; 0x5bf0 <vfprintf+0x394>
    5bc2:	a1 fc       	sbrc	r10, 1
    5bc4:	03 c0       	rjmp	.+6      	; 0x5bcc <vfprintf+0x370>
    5bc6:	88 e7       	ldi	r24, 0x78	; 120
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	02 c0       	rjmp	.+4      	; 0x5bd0 <vfprintf+0x374>
    5bcc:	88 e5       	ldi	r24, 0x58	; 88
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	b6 01       	movw	r22, r12
    5bd2:	0c c0       	rjmp	.+24     	; 0x5bec <vfprintf+0x390>
    5bd4:	8a 2d       	mov	r24, r10
    5bd6:	86 78       	andi	r24, 0x86	; 134
    5bd8:	59 f0       	breq	.+22     	; 0x5bf0 <vfprintf+0x394>
    5bda:	a1 fe       	sbrs	r10, 1
    5bdc:	02 c0       	rjmp	.+4      	; 0x5be2 <vfprintf+0x386>
    5bde:	8b e2       	ldi	r24, 0x2B	; 43
    5be0:	01 c0       	rjmp	.+2      	; 0x5be4 <vfprintf+0x388>
    5be2:	80 e2       	ldi	r24, 0x20	; 32
    5be4:	a7 fc       	sbrc	r10, 7
    5be6:	8d e2       	ldi	r24, 0x2D	; 45
    5be8:	b6 01       	movw	r22, r12
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    5bf0:	89 14       	cp	r8, r9
    5bf2:	38 f4       	brcc	.+14     	; 0x5c02 <vfprintf+0x3a6>
    5bf4:	b6 01       	movw	r22, r12
    5bf6:	80 e3       	ldi	r24, 0x30	; 48
    5bf8:	90 e0       	ldi	r25, 0x00	; 0
    5bfa:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    5bfe:	9a 94       	dec	r9
    5c00:	f7 cf       	rjmp	.-18     	; 0x5bf0 <vfprintf+0x394>
    5c02:	8a 94       	dec	r8
    5c04:	f3 01       	movw	r30, r6
    5c06:	e8 0d       	add	r30, r8
    5c08:	f1 1d       	adc	r31, r1
    5c0a:	80 81       	ld	r24, Z
    5c0c:	b6 01       	movw	r22, r12
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    5c14:	81 10       	cpse	r8, r1
    5c16:	f5 cf       	rjmp	.-22     	; 0x5c02 <vfprintf+0x3a6>
    5c18:	22 20       	and	r2, r2
    5c1a:	09 f4       	brne	.+2      	; 0x5c1e <vfprintf+0x3c2>
    5c1c:	42 ce       	rjmp	.-892    	; 0x58a2 <vfprintf+0x46>
    5c1e:	b6 01       	movw	r22, r12
    5c20:	80 e2       	ldi	r24, 0x20	; 32
    5c22:	90 e0       	ldi	r25, 0x00	; 0
    5c24:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <fputc>
    5c28:	2a 94       	dec	r2
    5c2a:	f6 cf       	rjmp	.-20     	; 0x5c18 <vfprintf+0x3bc>
    5c2c:	f6 01       	movw	r30, r12
    5c2e:	86 81       	ldd	r24, Z+6	; 0x06
    5c30:	97 81       	ldd	r25, Z+7	; 0x07
    5c32:	02 c0       	rjmp	.+4      	; 0x5c38 <vfprintf+0x3dc>
    5c34:	8f ef       	ldi	r24, 0xFF	; 255
    5c36:	9f ef       	ldi	r25, 0xFF	; 255
    5c38:	2b 96       	adiw	r28, 0x0b	; 11
    5c3a:	cd bf       	out	0x3d, r28	; 61
    5c3c:	de bf       	out	0x3e, r29	; 62
    5c3e:	df 91       	pop	r29
    5c40:	cf 91       	pop	r28
    5c42:	1f 91       	pop	r17
    5c44:	0f 91       	pop	r16
    5c46:	ff 90       	pop	r15
    5c48:	ef 90       	pop	r14
    5c4a:	df 90       	pop	r13
    5c4c:	cf 90       	pop	r12
    5c4e:	bf 90       	pop	r11
    5c50:	af 90       	pop	r10
    5c52:	9f 90       	pop	r9
    5c54:	8f 90       	pop	r8
    5c56:	7f 90       	pop	r7
    5c58:	6f 90       	pop	r6
    5c5a:	5f 90       	pop	r5
    5c5c:	4f 90       	pop	r4
    5c5e:	3f 90       	pop	r3
    5c60:	2f 90       	pop	r2
    5c62:	08 95       	ret

00005c64 <strtod>:
    5c64:	8f 92       	push	r8
    5c66:	9f 92       	push	r9
    5c68:	af 92       	push	r10
    5c6a:	bf 92       	push	r11
    5c6c:	cf 92       	push	r12
    5c6e:	df 92       	push	r13
    5c70:	ef 92       	push	r14
    5c72:	ff 92       	push	r15
    5c74:	0f 93       	push	r16
    5c76:	1f 93       	push	r17
    5c78:	cf 93       	push	r28
    5c7a:	df 93       	push	r29
    5c7c:	ec 01       	movw	r28, r24
    5c7e:	6b 01       	movw	r12, r22
    5c80:	61 15       	cp	r22, r1
    5c82:	71 05       	cpc	r23, r1
    5c84:	19 f0       	breq	.+6      	; 0x5c8c <strtod+0x28>
    5c86:	fb 01       	movw	r30, r22
    5c88:	80 83       	st	Z, r24
    5c8a:	91 83       	std	Z+1, r25	; 0x01
    5c8c:	7e 01       	movw	r14, r28
    5c8e:	ff ef       	ldi	r31, 0xFF	; 255
    5c90:	ef 1a       	sub	r14, r31
    5c92:	ff 0a       	sbc	r15, r31
    5c94:	08 81       	ld	r16, Y
    5c96:	80 2f       	mov	r24, r16
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <isspace>
    5c9e:	89 2b       	or	r24, r25
    5ca0:	11 f0       	breq	.+4      	; 0x5ca6 <strtod+0x42>
    5ca2:	e7 01       	movw	r28, r14
    5ca4:	f3 cf       	rjmp	.-26     	; 0x5c8c <strtod+0x28>
    5ca6:	0d 32       	cpi	r16, 0x2D	; 45
    5ca8:	39 f4       	brne	.+14     	; 0x5cb8 <strtod+0x54>
    5caa:	7e 01       	movw	r14, r28
    5cac:	82 e0       	ldi	r24, 0x02	; 2
    5cae:	e8 0e       	add	r14, r24
    5cb0:	f1 1c       	adc	r15, r1
    5cb2:	09 81       	ldd	r16, Y+1	; 0x01
    5cb4:	11 e0       	ldi	r17, 0x01	; 1
    5cb6:	08 c0       	rjmp	.+16     	; 0x5cc8 <strtod+0x64>
    5cb8:	0b 32       	cpi	r16, 0x2B	; 43
    5cba:	29 f4       	brne	.+10     	; 0x5cc6 <strtod+0x62>
    5cbc:	7e 01       	movw	r14, r28
    5cbe:	92 e0       	ldi	r25, 0x02	; 2
    5cc0:	e9 0e       	add	r14, r25
    5cc2:	f1 1c       	adc	r15, r1
    5cc4:	09 81       	ldd	r16, Y+1	; 0x01
    5cc6:	10 e0       	ldi	r17, 0x00	; 0
    5cc8:	e7 01       	movw	r28, r14
    5cca:	21 97       	sbiw	r28, 0x01	; 1
    5ccc:	43 e0       	ldi	r20, 0x03	; 3
    5cce:	50 e0       	ldi	r21, 0x00	; 0
    5cd0:	6c ef       	ldi	r22, 0xFC	; 252
    5cd2:	71 e0       	ldi	r23, 0x01	; 1
    5cd4:	ce 01       	movw	r24, r28
    5cd6:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <strncasecmp_P>
    5cda:	89 2b       	or	r24, r25
    5cdc:	c1 f4       	brne	.+48     	; 0x5d0e <strtod+0xaa>
    5cde:	23 96       	adiw	r28, 0x03	; 3
    5ce0:	45 e0       	ldi	r20, 0x05	; 5
    5ce2:	50 e0       	ldi	r21, 0x00	; 0
    5ce4:	67 ef       	ldi	r22, 0xF7	; 247
    5ce6:	71 e0       	ldi	r23, 0x01	; 1
    5ce8:	ce 01       	movw	r24, r28
    5cea:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <strncasecmp_P>
    5cee:	89 2b       	or	r24, r25
    5cf0:	09 f4       	brne	.+2      	; 0x5cf4 <strtod+0x90>
    5cf2:	25 96       	adiw	r28, 0x05	; 5
    5cf4:	c1 14       	cp	r12, r1
    5cf6:	d1 04       	cpc	r13, r1
    5cf8:	19 f0       	breq	.+6      	; 0x5d00 <strtod+0x9c>
    5cfa:	f6 01       	movw	r30, r12
    5cfc:	c0 83       	st	Z, r28
    5cfe:	d1 83       	std	Z+1, r29	; 0x01
    5d00:	11 11       	cpse	r17, r1
    5d02:	f6 c0       	rjmp	.+492    	; 0x5ef0 <strtod+0x28c>
    5d04:	60 e0       	ldi	r22, 0x00	; 0
    5d06:	70 e0       	ldi	r23, 0x00	; 0
    5d08:	80 e8       	ldi	r24, 0x80	; 128
    5d0a:	9f e7       	ldi	r25, 0x7F	; 127
    5d0c:	fa c0       	rjmp	.+500    	; 0x5f02 <strtod+0x29e>
    5d0e:	43 e0       	ldi	r20, 0x03	; 3
    5d10:	50 e0       	ldi	r21, 0x00	; 0
    5d12:	64 ef       	ldi	r22, 0xF4	; 244
    5d14:	71 e0       	ldi	r23, 0x01	; 1
    5d16:	ce 01       	movw	r24, r28
    5d18:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <strncasecmp_P>
    5d1c:	89 2b       	or	r24, r25
    5d1e:	59 f4       	brne	.+22     	; 0x5d36 <strtod+0xd2>
    5d20:	c1 14       	cp	r12, r1
    5d22:	d1 04       	cpc	r13, r1
    5d24:	09 f4       	brne	.+2      	; 0x5d28 <strtod+0xc4>
    5d26:	e9 c0       	rjmp	.+466    	; 0x5efa <strtod+0x296>
    5d28:	f2 e0       	ldi	r31, 0x02	; 2
    5d2a:	ef 0e       	add	r14, r31
    5d2c:	f1 1c       	adc	r15, r1
    5d2e:	f6 01       	movw	r30, r12
    5d30:	e0 82       	st	Z, r14
    5d32:	f1 82       	std	Z+1, r15	; 0x01
    5d34:	e2 c0       	rjmp	.+452    	; 0x5efa <strtod+0x296>
    5d36:	20 e0       	ldi	r18, 0x00	; 0
    5d38:	30 e0       	ldi	r19, 0x00	; 0
    5d3a:	a9 01       	movw	r20, r18
    5d3c:	c0 e0       	ldi	r28, 0x00	; 0
    5d3e:	d0 e0       	ldi	r29, 0x00	; 0
    5d40:	f7 01       	movw	r30, r14
    5d42:	60 ed       	ldi	r22, 0xD0	; 208
    5d44:	a6 2e       	mov	r10, r22
    5d46:	a0 0e       	add	r10, r16
    5d48:	89 e0       	ldi	r24, 0x09	; 9
    5d4a:	8a 15       	cp	r24, r10
    5d4c:	30 f1       	brcs	.+76     	; 0x5d9a <strtod+0x136>
    5d4e:	91 2f       	mov	r25, r17
    5d50:	92 60       	ori	r25, 0x02	; 2
    5d52:	b9 2e       	mov	r11, r25
    5d54:	81 2f       	mov	r24, r17
    5d56:	88 70       	andi	r24, 0x08	; 8
    5d58:	12 ff       	sbrs	r17, 2
    5d5a:	04 c0       	rjmp	.+8      	; 0x5d64 <strtod+0x100>
    5d5c:	81 11       	cpse	r24, r1
    5d5e:	24 c0       	rjmp	.+72     	; 0x5da8 <strtod+0x144>
    5d60:	21 96       	adiw	r28, 0x01	; 1
    5d62:	22 c0       	rjmp	.+68     	; 0x5da8 <strtod+0x144>
    5d64:	81 11       	cpse	r24, r1
    5d66:	21 97       	sbiw	r28, 0x01	; 1
    5d68:	a5 e0       	ldi	r26, 0x05	; 5
    5d6a:	b0 e0       	ldi	r27, 0x00	; 0
    5d6c:	0e 94 28 2b 	call	0x5650	; 0x5650 <__muluhisi3>
    5d70:	dc 01       	movw	r26, r24
    5d72:	cb 01       	movw	r24, r22
    5d74:	88 0f       	add	r24, r24
    5d76:	99 1f       	adc	r25, r25
    5d78:	aa 1f       	adc	r26, r26
    5d7a:	bb 1f       	adc	r27, r27
    5d7c:	9c 01       	movw	r18, r24
    5d7e:	ad 01       	movw	r20, r26
    5d80:	2a 0d       	add	r18, r10
    5d82:	31 1d       	adc	r19, r1
    5d84:	41 1d       	adc	r20, r1
    5d86:	51 1d       	adc	r21, r1
    5d88:	28 39       	cpi	r18, 0x98	; 152
    5d8a:	89 e9       	ldi	r24, 0x99	; 153
    5d8c:	38 07       	cpc	r19, r24
    5d8e:	48 07       	cpc	r20, r24
    5d90:	89 e1       	ldi	r24, 0x19	; 25
    5d92:	58 07       	cpc	r21, r24
    5d94:	48 f0       	brcs	.+18     	; 0x5da8 <strtod+0x144>
    5d96:	16 60       	ori	r17, 0x06	; 6
    5d98:	06 c0       	rjmp	.+12     	; 0x5da6 <strtod+0x142>
    5d9a:	9e ef       	ldi	r25, 0xFE	; 254
    5d9c:	a9 12       	cpse	r10, r25
    5d9e:	0a c0       	rjmp	.+20     	; 0x5db4 <strtod+0x150>
    5da0:	13 fd       	sbrc	r17, 3
    5da2:	40 c0       	rjmp	.+128    	; 0x5e24 <strtod+0x1c0>
    5da4:	18 60       	ori	r17, 0x08	; 8
    5da6:	b1 2e       	mov	r11, r17
    5da8:	8f ef       	ldi	r24, 0xFF	; 255
    5daa:	e8 1a       	sub	r14, r24
    5dac:	f8 0a       	sbc	r15, r24
    5dae:	00 81       	ld	r16, Z
    5db0:	1b 2d       	mov	r17, r11
    5db2:	c6 cf       	rjmp	.-116    	; 0x5d40 <strtod+0xdc>
    5db4:	80 2f       	mov	r24, r16
    5db6:	8f 7d       	andi	r24, 0xDF	; 223
    5db8:	85 34       	cpi	r24, 0x45	; 69
    5dba:	a1 f5       	brne	.+104    	; 0x5e24 <strtod+0x1c0>
    5dbc:	80 81       	ld	r24, Z
    5dbe:	8d 32       	cpi	r24, 0x2D	; 45
    5dc0:	11 f4       	brne	.+4      	; 0x5dc6 <strtod+0x162>
    5dc2:	10 61       	ori	r17, 0x10	; 16
    5dc4:	06 c0       	rjmp	.+12     	; 0x5dd2 <strtod+0x16e>
    5dc6:	8b 32       	cpi	r24, 0x2B	; 43
    5dc8:	21 f0       	breq	.+8      	; 0x5dd2 <strtod+0x16e>
    5dca:	31 96       	adiw	r30, 0x01	; 1
    5dcc:	61 e0       	ldi	r22, 0x01	; 1
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	04 c0       	rjmp	.+8      	; 0x5dda <strtod+0x176>
    5dd2:	81 81       	ldd	r24, Z+1	; 0x01
    5dd4:	32 96       	adiw	r30, 0x02	; 2
    5dd6:	62 e0       	ldi	r22, 0x02	; 2
    5dd8:	70 e0       	ldi	r23, 0x00	; 0
    5dda:	80 53       	subi	r24, 0x30	; 48
    5ddc:	8a 30       	cpi	r24, 0x0A	; 10
    5dde:	18 f0       	brcs	.+6      	; 0x5de6 <strtod+0x182>
    5de0:	e6 1b       	sub	r30, r22
    5de2:	f7 0b       	sbc	r31, r23
    5de4:	1f c0       	rjmp	.+62     	; 0x5e24 <strtod+0x1c0>
    5de6:	60 e0       	ldi	r22, 0x00	; 0
    5de8:	70 e0       	ldi	r23, 0x00	; 0
    5dea:	60 38       	cpi	r22, 0x80	; 128
    5dec:	9c e0       	ldi	r25, 0x0C	; 12
    5dee:	79 07       	cpc	r23, r25
    5df0:	5c f4       	brge	.+22     	; 0x5e08 <strtod+0x1a4>
    5df2:	db 01       	movw	r26, r22
    5df4:	aa 0f       	add	r26, r26
    5df6:	bb 1f       	adc	r27, r27
    5df8:	aa 0f       	add	r26, r26
    5dfa:	bb 1f       	adc	r27, r27
    5dfc:	6a 0f       	add	r22, r26
    5dfe:	7b 1f       	adc	r23, r27
    5e00:	66 0f       	add	r22, r22
    5e02:	77 1f       	adc	r23, r23
    5e04:	68 0f       	add	r22, r24
    5e06:	71 1d       	adc	r23, r1
    5e08:	31 96       	adiw	r30, 0x01	; 1
    5e0a:	df 01       	movw	r26, r30
    5e0c:	11 97       	sbiw	r26, 0x01	; 1
    5e0e:	8c 91       	ld	r24, X
    5e10:	80 53       	subi	r24, 0x30	; 48
    5e12:	8a 30       	cpi	r24, 0x0A	; 10
    5e14:	50 f3       	brcs	.-44     	; 0x5dea <strtod+0x186>
    5e16:	14 ff       	sbrs	r17, 4
    5e18:	03 c0       	rjmp	.+6      	; 0x5e20 <strtod+0x1bc>
    5e1a:	71 95       	neg	r23
    5e1c:	61 95       	neg	r22
    5e1e:	71 09       	sbc	r23, r1
    5e20:	c6 0f       	add	r28, r22
    5e22:	d7 1f       	adc	r29, r23
    5e24:	11 ff       	sbrs	r17, 1
    5e26:	08 c0       	rjmp	.+16     	; 0x5e38 <strtod+0x1d4>
    5e28:	c1 14       	cp	r12, r1
    5e2a:	d1 04       	cpc	r13, r1
    5e2c:	29 f0       	breq	.+10     	; 0x5e38 <strtod+0x1d4>
    5e2e:	cf 01       	movw	r24, r30
    5e30:	01 97       	sbiw	r24, 0x01	; 1
    5e32:	f6 01       	movw	r30, r12
    5e34:	80 83       	st	Z, r24
    5e36:	91 83       	std	Z+1, r25	; 0x01
    5e38:	ca 01       	movw	r24, r20
    5e3a:	b9 01       	movw	r22, r18
    5e3c:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <__floatunsisf>
    5e40:	21 2f       	mov	r18, r17
    5e42:	23 70       	andi	r18, 0x03	; 3
    5e44:	23 30       	cpi	r18, 0x03	; 3
    5e46:	19 f0       	breq	.+6      	; 0x5e4e <strtod+0x1ea>
    5e48:	4b 01       	movw	r8, r22
    5e4a:	5c 01       	movw	r10, r24
    5e4c:	06 c0       	rjmp	.+12     	; 0x5e5a <strtod+0x1f6>
    5e4e:	4b 01       	movw	r8, r22
    5e50:	5c 01       	movw	r10, r24
    5e52:	b7 fa       	bst	r11, 7
    5e54:	b0 94       	com	r11
    5e56:	b7 f8       	bld	r11, 7
    5e58:	b0 94       	com	r11
    5e5a:	20 e0       	ldi	r18, 0x00	; 0
    5e5c:	30 e0       	ldi	r19, 0x00	; 0
    5e5e:	a9 01       	movw	r20, r18
    5e60:	c5 01       	movw	r24, r10
    5e62:	b4 01       	movw	r22, r8
    5e64:	0e 94 6f 30 	call	0x60de	; 0x60de <__cmpsf2>
    5e68:	88 23       	and	r24, r24
    5e6a:	09 f4       	brne	.+2      	; 0x5e6e <strtod+0x20a>
    5e6c:	3e c0       	rjmp	.+124    	; 0x5eea <strtod+0x286>
    5e6e:	d7 ff       	sbrs	r29, 7
    5e70:	06 c0       	rjmp	.+12     	; 0x5e7e <strtod+0x21a>
    5e72:	d1 95       	neg	r29
    5e74:	c1 95       	neg	r28
    5e76:	d1 09       	sbc	r29, r1
    5e78:	03 e1       	ldi	r16, 0x13	; 19
    5e7a:	12 e0       	ldi	r17, 0x02	; 2
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <strtod+0x21e>
    5e7e:	0b e2       	ldi	r16, 0x2B	; 43
    5e80:	12 e0       	ldi	r17, 0x02	; 2
    5e82:	68 01       	movw	r12, r16
    5e84:	f8 e1       	ldi	r31, 0x18	; 24
    5e86:	cf 1a       	sub	r12, r31
    5e88:	d1 08       	sbc	r13, r1
    5e8a:	90 e2       	ldi	r25, 0x20	; 32
    5e8c:	e9 2e       	mov	r14, r25
    5e8e:	f1 2c       	mov	r15, r1
    5e90:	ce 15       	cp	r28, r14
    5e92:	df 05       	cpc	r29, r15
    5e94:	74 f0       	brlt	.+28     	; 0x5eb2 <strtod+0x24e>
    5e96:	f8 01       	movw	r30, r16
    5e98:	25 91       	lpm	r18, Z+
    5e9a:	35 91       	lpm	r19, Z+
    5e9c:	45 91       	lpm	r20, Z+
    5e9e:	54 91       	lpm	r21, Z
    5ea0:	c5 01       	movw	r24, r10
    5ea2:	b4 01       	movw	r22, r8
    5ea4:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsf3>
    5ea8:	4b 01       	movw	r8, r22
    5eaa:	5c 01       	movw	r10, r24
    5eac:	ce 19       	sub	r28, r14
    5eae:	df 09       	sbc	r29, r15
    5eb0:	ef cf       	rjmp	.-34     	; 0x5e90 <strtod+0x22c>
    5eb2:	04 50       	subi	r16, 0x04	; 4
    5eb4:	11 09       	sbc	r17, r1
    5eb6:	f5 94       	asr	r15
    5eb8:	e7 94       	ror	r14
    5eba:	0c 15       	cp	r16, r12
    5ebc:	1d 05       	cpc	r17, r13
    5ebe:	41 f7       	brne	.-48     	; 0x5e90 <strtod+0x22c>
    5ec0:	8a 2d       	mov	r24, r10
    5ec2:	88 0f       	add	r24, r24
    5ec4:	8b 2d       	mov	r24, r11
    5ec6:	88 1f       	adc	r24, r24
    5ec8:	8f 3f       	cpi	r24, 0xFF	; 255
    5eca:	49 f0       	breq	.+18     	; 0x5ede <strtod+0x27a>
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	30 e0       	ldi	r19, 0x00	; 0
    5ed0:	a9 01       	movw	r20, r18
    5ed2:	c5 01       	movw	r24, r10
    5ed4:	b4 01       	movw	r22, r8
    5ed6:	0e 94 6f 30 	call	0x60de	; 0x60de <__cmpsf2>
    5eda:	81 11       	cpse	r24, r1
    5edc:	06 c0       	rjmp	.+12     	; 0x5eea <strtod+0x286>
    5ede:	82 e2       	ldi	r24, 0x22	; 34
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <errno>
    5ee6:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <errno+0x1>
    5eea:	c5 01       	movw	r24, r10
    5eec:	b4 01       	movw	r22, r8
    5eee:	09 c0       	rjmp	.+18     	; 0x5f02 <strtod+0x29e>
    5ef0:	60 e0       	ldi	r22, 0x00	; 0
    5ef2:	70 e0       	ldi	r23, 0x00	; 0
    5ef4:	80 e8       	ldi	r24, 0x80	; 128
    5ef6:	9f ef       	ldi	r25, 0xFF	; 255
    5ef8:	04 c0       	rjmp	.+8      	; 0x5f02 <strtod+0x29e>
    5efa:	60 e0       	ldi	r22, 0x00	; 0
    5efc:	70 e0       	ldi	r23, 0x00	; 0
    5efe:	80 ec       	ldi	r24, 0xC0	; 192
    5f00:	9f e7       	ldi	r25, 0x7F	; 127
    5f02:	df 91       	pop	r29
    5f04:	cf 91       	pop	r28
    5f06:	1f 91       	pop	r17
    5f08:	0f 91       	pop	r16
    5f0a:	ff 90       	pop	r15
    5f0c:	ef 90       	pop	r14
    5f0e:	df 90       	pop	r13
    5f10:	cf 90       	pop	r12
    5f12:	bf 90       	pop	r11
    5f14:	af 90       	pop	r10
    5f16:	9f 90       	pop	r9
    5f18:	8f 90       	pop	r8
    5f1a:	08 95       	ret

00005f1c <isspace>:
    5f1c:	91 11       	cpse	r25, r1
    5f1e:	0c 94 98 30 	jmp	0x6130	; 0x6130 <__ctype_isfalse>
    5f22:	80 32       	cpi	r24, 0x20	; 32
    5f24:	19 f0       	breq	.+6      	; 0x5f2c <isspace+0x10>
    5f26:	89 50       	subi	r24, 0x09	; 9
    5f28:	85 50       	subi	r24, 0x05	; 5
    5f2a:	c8 f7       	brcc	.-14     	; 0x5f1e <isspace+0x2>
    5f2c:	08 95       	ret

00005f2e <strncasecmp_P>:
    5f2e:	fb 01       	movw	r30, r22
    5f30:	dc 01       	movw	r26, r24
    5f32:	41 50       	subi	r20, 0x01	; 1
    5f34:	50 40       	sbci	r21, 0x00	; 0
    5f36:	88 f0       	brcs	.+34     	; 0x5f5a <strncasecmp_P+0x2c>
    5f38:	8d 91       	ld	r24, X+
    5f3a:	81 34       	cpi	r24, 0x41	; 65
    5f3c:	1c f0       	brlt	.+6      	; 0x5f44 <strncasecmp_P+0x16>
    5f3e:	8b 35       	cpi	r24, 0x5B	; 91
    5f40:	0c f4       	brge	.+2      	; 0x5f44 <strncasecmp_P+0x16>
    5f42:	80 5e       	subi	r24, 0xE0	; 224
    5f44:	65 91       	lpm	r22, Z+
    5f46:	61 34       	cpi	r22, 0x41	; 65
    5f48:	1c f0       	brlt	.+6      	; 0x5f50 <strncasecmp_P+0x22>
    5f4a:	6b 35       	cpi	r22, 0x5B	; 91
    5f4c:	0c f4       	brge	.+2      	; 0x5f50 <strncasecmp_P+0x22>
    5f4e:	60 5e       	subi	r22, 0xE0	; 224
    5f50:	86 1b       	sub	r24, r22
    5f52:	61 11       	cpse	r22, r1
    5f54:	71 f3       	breq	.-36     	; 0x5f32 <strncasecmp_P+0x4>
    5f56:	99 0b       	sbc	r25, r25
    5f58:	08 95       	ret
    5f5a:	88 1b       	sub	r24, r24
    5f5c:	fc cf       	rjmp	.-8      	; 0x5f56 <strncasecmp_P+0x28>

00005f5e <strnlen_P>:
    5f5e:	fc 01       	movw	r30, r24
    5f60:	05 90       	lpm	r0, Z+
    5f62:	61 50       	subi	r22, 0x01	; 1
    5f64:	70 40       	sbci	r23, 0x00	; 0
    5f66:	01 10       	cpse	r0, r1
    5f68:	d8 f7       	brcc	.-10     	; 0x5f60 <strnlen_P+0x2>
    5f6a:	80 95       	com	r24
    5f6c:	90 95       	com	r25
    5f6e:	8e 0f       	add	r24, r30
    5f70:	9f 1f       	adc	r25, r31
    5f72:	08 95       	ret

00005f74 <strnlen>:
    5f74:	fc 01       	movw	r30, r24
    5f76:	61 50       	subi	r22, 0x01	; 1
    5f78:	70 40       	sbci	r23, 0x00	; 0
    5f7a:	01 90       	ld	r0, Z+
    5f7c:	01 10       	cpse	r0, r1
    5f7e:	d8 f7       	brcc	.-10     	; 0x5f76 <strnlen+0x2>
    5f80:	80 95       	com	r24
    5f82:	90 95       	com	r25
    5f84:	8e 0f       	add	r24, r30
    5f86:	9f 1f       	adc	r25, r31
    5f88:	08 95       	ret

00005f8a <strrev>:
    5f8a:	dc 01       	movw	r26, r24
    5f8c:	fc 01       	movw	r30, r24
    5f8e:	67 2f       	mov	r22, r23
    5f90:	71 91       	ld	r23, Z+
    5f92:	77 23       	and	r23, r23
    5f94:	e1 f7       	brne	.-8      	; 0x5f8e <strrev+0x4>
    5f96:	32 97       	sbiw	r30, 0x02	; 2
    5f98:	04 c0       	rjmp	.+8      	; 0x5fa2 <strrev+0x18>
    5f9a:	7c 91       	ld	r23, X
    5f9c:	6d 93       	st	X+, r22
    5f9e:	70 83       	st	Z, r23
    5fa0:	62 91       	ld	r22, -Z
    5fa2:	ae 17       	cp	r26, r30
    5fa4:	bf 07       	cpc	r27, r31
    5fa6:	c8 f3       	brcs	.-14     	; 0x5f9a <strrev+0x10>
    5fa8:	08 95       	ret

00005faa <fputc>:
    5faa:	0f 93       	push	r16
    5fac:	1f 93       	push	r17
    5fae:	cf 93       	push	r28
    5fb0:	df 93       	push	r29
    5fb2:	fb 01       	movw	r30, r22
    5fb4:	23 81       	ldd	r18, Z+3	; 0x03
    5fb6:	21 fd       	sbrc	r18, 1
    5fb8:	03 c0       	rjmp	.+6      	; 0x5fc0 <fputc+0x16>
    5fba:	8f ef       	ldi	r24, 0xFF	; 255
    5fbc:	9f ef       	ldi	r25, 0xFF	; 255
    5fbe:	2c c0       	rjmp	.+88     	; 0x6018 <fputc+0x6e>
    5fc0:	22 ff       	sbrs	r18, 2
    5fc2:	16 c0       	rjmp	.+44     	; 0x5ff0 <fputc+0x46>
    5fc4:	46 81       	ldd	r20, Z+6	; 0x06
    5fc6:	57 81       	ldd	r21, Z+7	; 0x07
    5fc8:	24 81       	ldd	r18, Z+4	; 0x04
    5fca:	35 81       	ldd	r19, Z+5	; 0x05
    5fcc:	42 17       	cp	r20, r18
    5fce:	53 07       	cpc	r21, r19
    5fd0:	44 f4       	brge	.+16     	; 0x5fe2 <fputc+0x38>
    5fd2:	a0 81       	ld	r26, Z
    5fd4:	b1 81       	ldd	r27, Z+1	; 0x01
    5fd6:	9d 01       	movw	r18, r26
    5fd8:	2f 5f       	subi	r18, 0xFF	; 255
    5fda:	3f 4f       	sbci	r19, 0xFF	; 255
    5fdc:	20 83       	st	Z, r18
    5fde:	31 83       	std	Z+1, r19	; 0x01
    5fe0:	8c 93       	st	X, r24
    5fe2:	26 81       	ldd	r18, Z+6	; 0x06
    5fe4:	37 81       	ldd	r19, Z+7	; 0x07
    5fe6:	2f 5f       	subi	r18, 0xFF	; 255
    5fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    5fea:	26 83       	std	Z+6, r18	; 0x06
    5fec:	37 83       	std	Z+7, r19	; 0x07
    5fee:	14 c0       	rjmp	.+40     	; 0x6018 <fputc+0x6e>
    5ff0:	8b 01       	movw	r16, r22
    5ff2:	ec 01       	movw	r28, r24
    5ff4:	fb 01       	movw	r30, r22
    5ff6:	00 84       	ldd	r0, Z+8	; 0x08
    5ff8:	f1 85       	ldd	r31, Z+9	; 0x09
    5ffa:	e0 2d       	mov	r30, r0
    5ffc:	19 95       	eicall
    5ffe:	89 2b       	or	r24, r25
    6000:	e1 f6       	brne	.-72     	; 0x5fba <fputc+0x10>
    6002:	d8 01       	movw	r26, r16
    6004:	16 96       	adiw	r26, 0x06	; 6
    6006:	8d 91       	ld	r24, X+
    6008:	9c 91       	ld	r25, X
    600a:	17 97       	sbiw	r26, 0x07	; 7
    600c:	01 96       	adiw	r24, 0x01	; 1
    600e:	16 96       	adiw	r26, 0x06	; 6
    6010:	8d 93       	st	X+, r24
    6012:	9c 93       	st	X, r25
    6014:	17 97       	sbiw	r26, 0x07	; 7
    6016:	ce 01       	movw	r24, r28
    6018:	df 91       	pop	r29
    601a:	cf 91       	pop	r28
    601c:	1f 91       	pop	r17
    601e:	0f 91       	pop	r16
    6020:	08 95       	ret

00006022 <__ultoa_invert>:
    6022:	fa 01       	movw	r30, r20
    6024:	aa 27       	eor	r26, r26
    6026:	28 30       	cpi	r18, 0x08	; 8
    6028:	51 f1       	breq	.+84     	; 0x607e <__ultoa_invert+0x5c>
    602a:	20 31       	cpi	r18, 0x10	; 16
    602c:	81 f1       	breq	.+96     	; 0x608e <__ultoa_invert+0x6c>
    602e:	e8 94       	clt
    6030:	6f 93       	push	r22
    6032:	6e 7f       	andi	r22, 0xFE	; 254
    6034:	6e 5f       	subi	r22, 0xFE	; 254
    6036:	7f 4f       	sbci	r23, 0xFF	; 255
    6038:	8f 4f       	sbci	r24, 0xFF	; 255
    603a:	9f 4f       	sbci	r25, 0xFF	; 255
    603c:	af 4f       	sbci	r26, 0xFF	; 255
    603e:	b1 e0       	ldi	r27, 0x01	; 1
    6040:	3e d0       	rcall	.+124    	; 0x60be <__ultoa_invert+0x9c>
    6042:	b4 e0       	ldi	r27, 0x04	; 4
    6044:	3c d0       	rcall	.+120    	; 0x60be <__ultoa_invert+0x9c>
    6046:	67 0f       	add	r22, r23
    6048:	78 1f       	adc	r23, r24
    604a:	89 1f       	adc	r24, r25
    604c:	9a 1f       	adc	r25, r26
    604e:	a1 1d       	adc	r26, r1
    6050:	68 0f       	add	r22, r24
    6052:	79 1f       	adc	r23, r25
    6054:	8a 1f       	adc	r24, r26
    6056:	91 1d       	adc	r25, r1
    6058:	a1 1d       	adc	r26, r1
    605a:	6a 0f       	add	r22, r26
    605c:	71 1d       	adc	r23, r1
    605e:	81 1d       	adc	r24, r1
    6060:	91 1d       	adc	r25, r1
    6062:	a1 1d       	adc	r26, r1
    6064:	20 d0       	rcall	.+64     	; 0x60a6 <__ultoa_invert+0x84>
    6066:	09 f4       	brne	.+2      	; 0x606a <__ultoa_invert+0x48>
    6068:	68 94       	set
    606a:	3f 91       	pop	r19
    606c:	2a e0       	ldi	r18, 0x0A	; 10
    606e:	26 9f       	mul	r18, r22
    6070:	11 24       	eor	r1, r1
    6072:	30 19       	sub	r19, r0
    6074:	30 5d       	subi	r19, 0xD0	; 208
    6076:	31 93       	st	Z+, r19
    6078:	de f6       	brtc	.-74     	; 0x6030 <__ultoa_invert+0xe>
    607a:	cf 01       	movw	r24, r30
    607c:	08 95       	ret
    607e:	46 2f       	mov	r20, r22
    6080:	47 70       	andi	r20, 0x07	; 7
    6082:	40 5d       	subi	r20, 0xD0	; 208
    6084:	41 93       	st	Z+, r20
    6086:	b3 e0       	ldi	r27, 0x03	; 3
    6088:	0f d0       	rcall	.+30     	; 0x60a8 <__ultoa_invert+0x86>
    608a:	c9 f7       	brne	.-14     	; 0x607e <__ultoa_invert+0x5c>
    608c:	f6 cf       	rjmp	.-20     	; 0x607a <__ultoa_invert+0x58>
    608e:	46 2f       	mov	r20, r22
    6090:	4f 70       	andi	r20, 0x0F	; 15
    6092:	40 5d       	subi	r20, 0xD0	; 208
    6094:	4a 33       	cpi	r20, 0x3A	; 58
    6096:	18 f0       	brcs	.+6      	; 0x609e <__ultoa_invert+0x7c>
    6098:	49 5d       	subi	r20, 0xD9	; 217
    609a:	31 fd       	sbrc	r19, 1
    609c:	40 52       	subi	r20, 0x20	; 32
    609e:	41 93       	st	Z+, r20
    60a0:	02 d0       	rcall	.+4      	; 0x60a6 <__ultoa_invert+0x84>
    60a2:	a9 f7       	brne	.-22     	; 0x608e <__ultoa_invert+0x6c>
    60a4:	ea cf       	rjmp	.-44     	; 0x607a <__ultoa_invert+0x58>
    60a6:	b4 e0       	ldi	r27, 0x04	; 4
    60a8:	a6 95       	lsr	r26
    60aa:	97 95       	ror	r25
    60ac:	87 95       	ror	r24
    60ae:	77 95       	ror	r23
    60b0:	67 95       	ror	r22
    60b2:	ba 95       	dec	r27
    60b4:	c9 f7       	brne	.-14     	; 0x60a8 <__ultoa_invert+0x86>
    60b6:	00 97       	sbiw	r24, 0x00	; 0
    60b8:	61 05       	cpc	r22, r1
    60ba:	71 05       	cpc	r23, r1
    60bc:	08 95       	ret
    60be:	9b 01       	movw	r18, r22
    60c0:	ac 01       	movw	r20, r24
    60c2:	0a 2e       	mov	r0, r26
    60c4:	06 94       	lsr	r0
    60c6:	57 95       	ror	r21
    60c8:	47 95       	ror	r20
    60ca:	37 95       	ror	r19
    60cc:	27 95       	ror	r18
    60ce:	ba 95       	dec	r27
    60d0:	c9 f7       	brne	.-14     	; 0x60c4 <__ultoa_invert+0xa2>
    60d2:	62 0f       	add	r22, r18
    60d4:	73 1f       	adc	r23, r19
    60d6:	84 1f       	adc	r24, r20
    60d8:	95 1f       	adc	r25, r21
    60da:	a0 1d       	adc	r26, r0
    60dc:	08 95       	ret

000060de <__cmpsf2>:
    60de:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__fp_cmp>
    60e2:	08 f4       	brcc	.+2      	; 0x60e6 <__cmpsf2+0x8>
    60e4:	81 e0       	ldi	r24, 0x01	; 1
    60e6:	08 95       	ret

000060e8 <__fp_cmp>:
    60e8:	99 0f       	add	r25, r25
    60ea:	00 08       	sbc	r0, r0
    60ec:	55 0f       	add	r21, r21
    60ee:	aa 0b       	sbc	r26, r26
    60f0:	e0 e8       	ldi	r30, 0x80	; 128
    60f2:	fe ef       	ldi	r31, 0xFE	; 254
    60f4:	16 16       	cp	r1, r22
    60f6:	17 06       	cpc	r1, r23
    60f8:	e8 07       	cpc	r30, r24
    60fa:	f9 07       	cpc	r31, r25
    60fc:	c0 f0       	brcs	.+48     	; 0x612e <__fp_cmp+0x46>
    60fe:	12 16       	cp	r1, r18
    6100:	13 06       	cpc	r1, r19
    6102:	e4 07       	cpc	r30, r20
    6104:	f5 07       	cpc	r31, r21
    6106:	98 f0       	brcs	.+38     	; 0x612e <__fp_cmp+0x46>
    6108:	62 1b       	sub	r22, r18
    610a:	73 0b       	sbc	r23, r19
    610c:	84 0b       	sbc	r24, r20
    610e:	95 0b       	sbc	r25, r21
    6110:	39 f4       	brne	.+14     	; 0x6120 <__fp_cmp+0x38>
    6112:	0a 26       	eor	r0, r26
    6114:	61 f0       	breq	.+24     	; 0x612e <__fp_cmp+0x46>
    6116:	23 2b       	or	r18, r19
    6118:	24 2b       	or	r18, r20
    611a:	25 2b       	or	r18, r21
    611c:	21 f4       	brne	.+8      	; 0x6126 <__fp_cmp+0x3e>
    611e:	08 95       	ret
    6120:	0a 26       	eor	r0, r26
    6122:	09 f4       	brne	.+2      	; 0x6126 <__fp_cmp+0x3e>
    6124:	a1 40       	sbci	r26, 0x01	; 1
    6126:	a6 95       	lsr	r26
    6128:	8f ef       	ldi	r24, 0xFF	; 255
    612a:	81 1d       	adc	r24, r1
    612c:	81 1d       	adc	r24, r1
    612e:	08 95       	ret

00006130 <__ctype_isfalse>:
    6130:	99 27       	eor	r25, r25
    6132:	88 27       	eor	r24, r24

00006134 <__ctype_istrue>:
    6134:	08 95       	ret

00006136 <_exit>:
    6136:	f8 94       	cli

00006138 <__stop_program>:
    6138:	ff cf       	rjmp	.-2      	; 0x6138 <__stop_program>
