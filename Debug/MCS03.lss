
MCS03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006e0  00802000  00008b18  00008bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fb  008026e0  008026e0  0000928c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000928c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000092e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008117  00000000  00000000  00009448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037c4  00000000  00000000  0001155f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f43  00000000  00000000  00014d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  00018c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000406f  00000000  00000000  00019340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019c0  00000000  00000000  0001d3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0001ed6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__ctors_end>
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_16>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      50:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_20>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 7d 3c 	jmp	0x78fa	; 0x78fa <__vector_25>
      68:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      6c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      70:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      7c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      80:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      84:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      8c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      90:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      94:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      98:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      fc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     100:	0c 94 d1 36 	jmp	0x6da2	; 0x6da2 <__vector_64>
     104:	0c 94 77 39 	jmp	0x72ee	; 0x72ee <__vector_65>
     108:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     10c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     110:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     114:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     118:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     11c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     120:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     124:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     128:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     12c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     130:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     134:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     138:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     13c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     140:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     144:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     148:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     14c:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__vector_83>
     150:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     154:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     158:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     15c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     160:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     164:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     168:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     16c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     170:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     174:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     178:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     17c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     180:	0c 94 47 34 	jmp	0x688e	; 0x688e <__vector_96>
     184:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     188:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     18c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     190:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     194:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     198:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     19c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_118>
     1dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

000001f4 <__trampolines_end>:
     1f4:	4e 41       	sbci	r20, 0x1E	; 30
     1f6:	4e 49       	Address 0x000001f6 is out of bounds.
.word	0xffff	; ????

000001f7 <pstr_inity>:
     1f7:	49 4e 49 54 59                                      INITY

000001fc <pstr_inf>:
     1fc:	49 4e 46                                            INF

000001ff <pwr_m10>:
     1ff:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     20f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000217 <pwr_p10>:
     217:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     227:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000230 <__ctors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df e3       	ldi	r29, 0x3F	; 63
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60
     240:	18 be       	out	0x38, r1	; 56
     242:	19 be       	out	0x39, r1	; 57
     244:	1a be       	out	0x3a, r1	; 58
     246:	1b be       	out	0x3b, r1	; 59

00000248 <__do_copy_data>:
     248:	16 e2       	ldi	r17, 0x26	; 38
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	e8 e1       	ldi	r30, 0x18	; 24
     250:	fb e8       	ldi	r31, 0x8B	; 139
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a0 3e       	cpi	r26, 0xE0	; 224
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>
     262:	1b be       	out	0x3b, r1	; 59

00000264 <__do_clear_bss>:
     264:	29 e2       	ldi	r18, 0x29	; 41
     266:	a0 ee       	ldi	r26, 0xE0	; 224
     268:	b6 e2       	ldi	r27, 0x26	; 38
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	ab 3d       	cpi	r26, 0xDB	; 219
     270:	b2 07       	cpc	r27, r18
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>
     274:	0e 94 ba 3c 	call	0x7974	; 0x7974 <main>
     278:	0c 94 8a 45 	jmp	0x8b14	; 0x8b14 <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <_Z10ports_initv>:
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
     280:	e0 e0       	ldi	r30, 0x00	; 0
     282:	f6 e0       	ldi	r31, 0x06	; 6
     284:	14 82       	std	Z+4, r1	; 0x04
     286:	80 ec       	ldi	r24, 0xC0	; 192
     288:	80 83       	st	Z, r24
     28a:	10 8a       	std	Z+16, r1	; 0x10
     28c:	11 8a       	std	Z+17, r1	; 0x11
     28e:	12 8a       	std	Z+18, r1	; 0x12
     290:	13 8a       	std	Z+19, r1	; 0x13
     292:	14 8a       	std	Z+20, r1	; 0x14
     294:	15 8a       	std	Z+21, r1	; 0x15
     296:	16 8a       	std	Z+22, r1	; 0x16
     298:	17 8a       	std	Z+23, r1	; 0x17
     29a:	81 85       	ldd	r24, Z+9	; 0x09
     29c:	80 7f       	andi	r24, 0xF0	; 240
     29e:	81 87       	std	Z+9, r24	; 0x09
     2a0:	12 86       	std	Z+10, r1	; 0x0a
     2a2:	13 86       	std	Z+11, r1	; 0x0b
     2a4:	e0 e2       	ldi	r30, 0x20	; 32
     2a6:	f6 e0       	ldi	r31, 0x06	; 6
     2a8:	14 82       	std	Z+4, r1	; 0x04
     2aa:	80 e9       	ldi	r24, 0x90	; 144
     2ac:	80 83       	st	Z, r24
     2ae:	10 8a       	std	Z+16, r1	; 0x10
     2b0:	11 8a       	std	Z+17, r1	; 0x11
     2b2:	12 8a       	std	Z+18, r1	; 0x12
     2b4:	13 8a       	std	Z+19, r1	; 0x13
     2b6:	14 8a       	std	Z+20, r1	; 0x14
     2b8:	15 8a       	std	Z+21, r1	; 0x15
     2ba:	16 8a       	std	Z+22, r1	; 0x16
     2bc:	17 8a       	std	Z+23, r1	; 0x17
     2be:	81 85       	ldd	r24, Z+9	; 0x09
     2c0:	80 7f       	andi	r24, 0xF0	; 240
     2c2:	81 87       	std	Z+9, r24	; 0x09
     2c4:	12 86       	std	Z+10, r1	; 0x0a
     2c6:	13 86       	std	Z+11, r1	; 0x0b
     2c8:	e0 e4       	ldi	r30, 0x40	; 64
     2ca:	f6 e0       	ldi	r31, 0x06	; 6
     2cc:	88 e8       	ldi	r24, 0x88	; 136
     2ce:	84 83       	std	Z+4, r24	; 0x04
     2d0:	98 e0       	ldi	r25, 0x08	; 8
     2d2:	90 83       	st	Z, r25
     2d4:	10 8a       	std	Z+16, r1	; 0x10
     2d6:	11 8a       	std	Z+17, r1	; 0x11
     2d8:	12 8a       	std	Z+18, r1	; 0x12
     2da:	13 8a       	std	Z+19, r1	; 0x13
     2dc:	14 8a       	std	Z+20, r1	; 0x14
     2de:	15 8a       	std	Z+21, r1	; 0x15
     2e0:	16 8a       	std	Z+22, r1	; 0x16
     2e2:	17 8a       	std	Z+23, r1	; 0x17
     2e4:	81 85       	ldd	r24, Z+9	; 0x09
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	81 87       	std	Z+9, r24	; 0x09
     2ea:	12 86       	std	Z+10, r1	; 0x0a
     2ec:	13 86       	std	Z+11, r1	; 0x0b
     2ee:	e0 e6       	ldi	r30, 0x60	; 96
     2f0:	f6 e0       	ldi	r31, 0x06	; 6
     2f2:	14 82       	std	Z+4, r1	; 0x04
     2f4:	10 82       	st	Z, r1
     2f6:	10 8a       	std	Z+16, r1	; 0x10
     2f8:	11 8a       	std	Z+17, r1	; 0x11
     2fa:	12 8a       	std	Z+18, r1	; 0x12
     2fc:	13 8a       	std	Z+19, r1	; 0x13
     2fe:	14 8a       	std	Z+20, r1	; 0x14
     300:	15 8a       	std	Z+21, r1	; 0x15
     302:	16 8a       	std	Z+22, r1	; 0x16
     304:	17 8a       	std	Z+23, r1	; 0x17
     306:	81 85       	ldd	r24, Z+9	; 0x09
     308:	80 7f       	andi	r24, 0xF0	; 240
     30a:	85 60       	ori	r24, 0x05	; 5
     30c:	81 87       	std	Z+9, r24	; 0x09
     30e:	92 87       	std	Z+10, r25	; 0x0a
     310:	86 e0       	ldi	r24, 0x06	; 6
     312:	83 87       	std	Z+11, r24	; 0x0b
     314:	e0 e8       	ldi	r30, 0x80	; 128
     316:	f6 e0       	ldi	r31, 0x06	; 6
     318:	14 82       	std	Z+4, r1	; 0x04
     31a:	86 eb       	ldi	r24, 0xB6	; 182
     31c:	80 83       	st	Z, r24
     31e:	10 8a       	std	Z+16, r1	; 0x10
     320:	11 8a       	std	Z+17, r1	; 0x11
     322:	12 8a       	std	Z+18, r1	; 0x12
     324:	13 8a       	std	Z+19, r1	; 0x13
     326:	14 8a       	std	Z+20, r1	; 0x14
     328:	15 8a       	std	Z+21, r1	; 0x15
     32a:	16 8a       	std	Z+22, r1	; 0x16
     32c:	17 8a       	std	Z+23, r1	; 0x17
     32e:	81 85       	ldd	r24, Z+9	; 0x09
     330:	80 7f       	andi	r24, 0xF0	; 240
     332:	81 87       	std	Z+9, r24	; 0x09
     334:	12 86       	std	Z+10, r1	; 0x0a
     336:	13 86       	std	Z+11, r1	; 0x0b
     338:	e0 ea       	ldi	r30, 0xA0	; 160
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	14 82       	std	Z+4, r1	; 0x04
     33e:	81 e4       	ldi	r24, 0x41	; 65
     340:	80 83       	st	Z, r24
     342:	10 8a       	std	Z+16, r1	; 0x10
     344:	11 8a       	std	Z+17, r1	; 0x11
     346:	12 8a       	std	Z+18, r1	; 0x12
     348:	13 8a       	std	Z+19, r1	; 0x13
     34a:	14 8a       	std	Z+20, r1	; 0x14
     34c:	15 8a       	std	Z+21, r1	; 0x15
     34e:	16 8a       	std	Z+22, r1	; 0x16
     350:	17 8a       	std	Z+23, r1	; 0x17
     352:	81 85       	ldd	r24, Z+9	; 0x09
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	81 87       	std	Z+9, r24	; 0x09
     358:	12 86       	std	Z+10, r1	; 0x0a
     35a:	13 86       	std	Z+11, r1	; 0x0b
     35c:	e0 ee       	ldi	r30, 0xE0	; 224
     35e:	f6 e0       	ldi	r31, 0x06	; 6
     360:	14 82       	std	Z+4, r1	; 0x04
     362:	8c ef       	ldi	r24, 0xFC	; 252
     364:	80 83       	st	Z, r24
     366:	10 8a       	std	Z+16, r1	; 0x10
     368:	11 8a       	std	Z+17, r1	; 0x11
     36a:	12 8a       	std	Z+18, r1	; 0x12
     36c:	13 8a       	std	Z+19, r1	; 0x13
     36e:	14 8a       	std	Z+20, r1	; 0x14
     370:	15 8a       	std	Z+21, r1	; 0x15
     372:	16 8a       	std	Z+22, r1	; 0x16
     374:	17 8a       	std	Z+23, r1	; 0x17
     376:	81 85       	ldd	r24, Z+9	; 0x09
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	81 60       	ori	r24, 0x01	; 1
     37c:	81 87       	std	Z+9, r24	; 0x09
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	82 87       	std	Z+10, r24	; 0x0a
     382:	13 86       	std	Z+11, r1	; 0x0b
     384:	e0 e0       	ldi	r30, 0x00	; 0
     386:	f7 e0       	ldi	r31, 0x07	; 7
     388:	14 82       	std	Z+4, r1	; 0x04
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	80 83       	st	Z, r24
     38e:	10 8a       	std	Z+16, r1	; 0x10
     390:	11 8a       	std	Z+17, r1	; 0x11
     392:	12 8a       	std	Z+18, r1	; 0x12
     394:	13 8a       	std	Z+19, r1	; 0x13
     396:	14 8a       	std	Z+20, r1	; 0x14
     398:	15 8a       	std	Z+21, r1	; 0x15
     39a:	16 8a       	std	Z+22, r1	; 0x16
     39c:	17 8a       	std	Z+23, r1	; 0x17
     39e:	81 85       	ldd	r24, Z+9	; 0x09
     3a0:	80 7f       	andi	r24, 0xF0	; 240
     3a2:	81 87       	std	Z+9, r24	; 0x09
     3a4:	12 86       	std	Z+10, r1	; 0x0a
     3a6:	13 86       	std	Z+11, r1	; 0x0b
     3a8:	e0 e2       	ldi	r30, 0x20	; 32
     3aa:	f7 e0       	ldi	r31, 0x07	; 7
     3ac:	14 82       	std	Z+4, r1	; 0x04
     3ae:	8f e3       	ldi	r24, 0x3F	; 63
     3b0:	80 83       	st	Z, r24
     3b2:	10 8a       	std	Z+16, r1	; 0x10
     3b4:	11 8a       	std	Z+17, r1	; 0x11
     3b6:	12 8a       	std	Z+18, r1	; 0x12
     3b8:	13 8a       	std	Z+19, r1	; 0x13
     3ba:	14 8a       	std	Z+20, r1	; 0x14
     3bc:	15 8a       	std	Z+21, r1	; 0x15
     3be:	16 8a       	std	Z+22, r1	; 0x16
     3c0:	17 8a       	std	Z+23, r1	; 0x17
     3c2:	81 85       	ldd	r24, Z+9	; 0x09
     3c4:	80 7f       	andi	r24, 0xF0	; 240
     3c6:	81 87       	std	Z+9, r24	; 0x09
     3c8:	12 86       	std	Z+10, r1	; 0x0a
     3ca:	13 86       	std	Z+11, r1	; 0x0b
     3cc:	e0 ec       	ldi	r30, 0xC0	; 192
     3ce:	f7 e0       	ldi	r31, 0x07	; 7
     3d0:	14 82       	std	Z+4, r1	; 0x04
     3d2:	10 82       	st	Z, r1
     3d4:	10 8a       	std	Z+16, r1	; 0x10
     3d6:	11 8a       	std	Z+17, r1	; 0x11
     3d8:	12 8a       	std	Z+18, r1	; 0x12
     3da:	13 8a       	std	Z+19, r1	; 0x13
     3dc:	81 85       	ldd	r24, Z+9	; 0x09
     3de:	80 7f       	andi	r24, 0xF0	; 240
     3e0:	81 87       	std	Z+9, r24	; 0x09
     3e2:	12 86       	std	Z+10, r1	; 0x0a
     3e4:	13 86       	std	Z+11, r1	; 0x0b
     3e6:	e0 ee       	ldi	r30, 0xE0	; 224
     3e8:	f7 e0       	ldi	r31, 0x07	; 7
     3ea:	14 82       	std	Z+4, r1	; 0x04
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	80 83       	st	Z, r24
     3f0:	10 8a       	std	Z+16, r1	; 0x10
     3f2:	11 8a       	std	Z+17, r1	; 0x11
     3f4:	81 85       	ldd	r24, Z+9	; 0x09
     3f6:	80 7f       	andi	r24, 0xF0	; 240
     3f8:	81 87       	std	Z+9, r24	; 0x09
     3fa:	12 86       	std	Z+10, r1	; 0x0a
     3fc:	13 86       	std	Z+11, r1	; 0x0b
     3fe:	08 95       	ret

00000400 <_Z9spif_initv>:
     400:	e0 ec       	ldi	r30, 0xC0	; 192
     402:	fb e0       	ldi	r31, 0x0B	; 11
     404:	80 e4       	ldi	r24, 0x40	; 64
     406:	80 83       	st	Z, r24
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	81 83       	std	Z+1, r24	; 0x01
     40c:	08 95       	ret

0000040e <__vector_118>:
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	0f 92       	push	r0
     416:	11 24       	eor	r1, r1
     418:	08 b6       	in	r0, 0x38	; 56
     41a:	0f 92       	push	r0
     41c:	18 be       	out	0x38, r1	; 56
     41e:	09 b6       	in	r0, 0x39	; 57
     420:	0f 92       	push	r0
     422:	19 be       	out	0x39, r1	; 57
     424:	0a b6       	in	r0, 0x3a	; 58
     426:	0f 92       	push	r0
     428:	1a be       	out	0x3a, r1	; 58
     42a:	0b b6       	in	r0, 0x3b	; 59
     42c:	0f 92       	push	r0
     42e:	1b be       	out	0x3b, r1	; 59
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	8f 93       	push	r24
     436:	9f 93       	push	r25
     438:	af 93       	push	r26
     43a:	bf 93       	push	r27
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
     444:	e0 ec       	ldi	r30, 0xC0	; 192
     446:	fb e0       	ldi	r31, 0x0B	; 11
     448:	82 81       	ldd	r24, Z+2	; 0x02
     44a:	93 81       	ldd	r25, Z+3	; 0x03
     44c:	80 91 a2 28 	lds	r24, 0x28A2	; 0x8028a2 <Responsing>
     450:	81 11       	cpse	r24, r1
     452:	39 c0       	rjmp	.+114    	; 0x4c6 <__vector_118+0xb8>
     454:	9d 30       	cpi	r25, 0x0D	; 13
     456:	b9 f0       	breq	.+46     	; 0x486 <__vector_118+0x78>
     458:	99 23       	and	r25, r25
     45a:	09 f4       	brne	.+2      	; 0x45e <__vector_118+0x50>
     45c:	55 c0       	rjmp	.+170    	; 0x508 <__vector_118+0xfa>
     45e:	20 91 a3 28 	lds	r18, 0x28A3	; 0x8028a3 <indexBR>
     462:	30 91 a4 28 	lds	r19, 0x28A4	; 0x8028a4 <indexBR+0x1>
     466:	24 36       	cpi	r18, 0x64	; 100
     468:	31 05       	cpc	r19, r1
     46a:	0c f0       	brlt	.+2      	; 0x46e <__vector_118+0x60>
     46c:	4f c0       	rjmp	.+158    	; 0x50c <__vector_118+0xfe>
     46e:	f9 01       	movw	r30, r18
     470:	e7 5f       	subi	r30, 0xF7	; 247
     472:	f6 4d       	sbci	r31, 0xD6	; 214
     474:	90 83       	st	Z, r25
     476:	2f 5f       	subi	r18, 0xFF	; 255
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	20 93 a3 28 	sts	0x28A3, r18	; 0x8028a3 <indexBR>
     47e:	30 93 a4 28 	sts	0x28A4, r19	; 0x8028a4 <indexBR+0x1>
     482:	20 e2       	ldi	r18, 0x20	; 32
     484:	44 c0       	rjmp	.+136    	; 0x50e <__vector_118+0x100>
     486:	c5 ea       	ldi	r28, 0xA5	; 165
     488:	d8 e2       	ldi	r29, 0x28	; 40
     48a:	a9 e0       	ldi	r26, 0x09	; 9
     48c:	b9 e2       	ldi	r27, 0x29	; 41
     48e:	8d e6       	ldi	r24, 0x6D	; 109
     490:	99 e2       	ldi	r25, 0x29	; 41
     492:	fd 01       	movw	r30, r26
     494:	20 81       	ld	r18, Z
     496:	29 93       	st	Y+, r18
     498:	11 92       	st	Z+, r1
     49a:	e8 17       	cp	r30, r24
     49c:	f9 07       	cpc	r31, r25
     49e:	d1 f7       	brne	.-12     	; 0x494 <__vector_118+0x86>
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	20 93 a1 28 	sts	0x28A1, r18	; 0x8028a1 <cmdIsReady>
     4a6:	1d 92       	st	X+, r1
     4a8:	a8 17       	cp	r26, r24
     4aa:	b9 07       	cpc	r27, r25
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <__vector_118+0x98>
     4ae:	84 e6       	ldi	r24, 0x64	; 100
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	80 93 9f 28 	sts	0x289F, r24	; 0x80289f <h>
     4b6:	90 93 a0 28 	sts	0x28A0, r25	; 0x8028a0 <h+0x1>
     4ba:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <indexBR>
     4be:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <indexBR+0x1>
     4c2:	20 e2       	ldi	r18, 0x20	; 32
     4c4:	24 c0       	rjmp	.+72     	; 0x50e <__vector_118+0x100>
     4c6:	80 91 6d 29 	lds	r24, 0x296D	; 0x80296d <indexBS>
     4ca:	90 91 6e 29 	lds	r25, 0x296E	; 0x80296e <indexBS+0x1>
     4ce:	84 36       	cpi	r24, 0x64	; 100
     4d0:	91 05       	cpc	r25, r1
     4d2:	2c f4       	brge	.+10     	; 0x4de <__vector_118+0xd0>
     4d4:	fc 01       	movw	r30, r24
     4d6:	e1 59       	subi	r30, 0x91	; 145
     4d8:	f6 4d       	sbci	r31, 0xD6	; 214
     4da:	20 81       	ld	r18, Z
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <__vector_118+0xd2>
     4de:	20 e2       	ldi	r18, 0x20	; 32
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	80 93 6d 29 	sts	0x296D, r24	; 0x80296d <indexBS>
     4e6:	90 93 6e 29 	sts	0x296E, r25	; 0x80296e <indexBS+0x1>
     4ea:	85 36       	cpi	r24, 0x65	; 101
     4ec:	91 05       	cpc	r25, r1
     4ee:	79 f4       	brne	.+30     	; 0x50e <__vector_118+0x100>
     4f0:	e0 ea       	ldi	r30, 0xA0	; 160
     4f2:	f6 e0       	ldi	r31, 0x06	; 6
     4f4:	84 81       	ldd	r24, Z+4	; 0x04
     4f6:	8e 7f       	andi	r24, 0xFE	; 254
     4f8:	84 83       	std	Z+4, r24	; 0x04
     4fa:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <Responsing>
     4fe:	10 92 6d 29 	sts	0x296D, r1	; 0x80296d <indexBS>
     502:	10 92 6e 29 	sts	0x296E, r1	; 0x80296e <indexBS+0x1>
     506:	03 c0       	rjmp	.+6      	; 0x50e <__vector_118+0x100>
     508:	20 e2       	ldi	r18, 0x20	; 32
     50a:	01 c0       	rjmp	.+2      	; 0x50e <__vector_118+0x100>
     50c:	20 e2       	ldi	r18, 0x20	; 32
     50e:	20 93 c3 0b 	sts	0x0BC3, r18	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
     512:	ff 91       	pop	r31
     514:	ef 91       	pop	r30
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	bf 91       	pop	r27
     51c:	af 91       	pop	r26
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0b be       	out	0x3b, r0	; 59
     52a:	0f 90       	pop	r0
     52c:	0a be       	out	0x3a, r0	; 58
     52e:	0f 90       	pop	r0
     530:	09 be       	out	0x39, r0	; 57
     532:	0f 90       	pop	r0
     534:	08 be       	out	0x38, r0	; 56
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <_Z9spie_initv>:
     540:	e0 ec       	ldi	r30, 0xC0	; 192
     542:	fa e0       	ldi	r31, 0x0A	; 10
     544:	83 e5       	ldi	r24, 0x53	; 83
     546:	80 83       	st	Z, r24
     548:	11 82       	std	Z+1, r1	; 0x01
     54a:	08 95       	ret

0000054c <_Z17spie_master_tx_rxh>:
     54c:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     550:	e0 ec       	ldi	r30, 0xC0	; 192
     552:	fa e0       	ldi	r31, 0x0A	; 10
     554:	82 81       	ldd	r24, Z+2	; 0x02
     556:	88 23       	and	r24, r24
     558:	ec f7       	brge	.-6      	; 0x554 <_Z17spie_master_tx_rxh+0x8>
     55a:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     55e:	08 95       	ret

00000560 <_Z4ltoblPc>:
     560:	fa 01       	movw	r30, r20
     562:	60 83       	st	Z, r22
     564:	71 83       	std	Z+1, r23	; 0x01
     566:	82 83       	std	Z+2, r24	; 0x02
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	08 95       	ret

0000056c <_Z4btolPc>:
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	fc 01       	movw	r30, r24
     572:	03 81       	ldd	r16, Z+3	; 0x03
     574:	10 e0       	ldi	r17, 0x00	; 0
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	30 2f       	mov	r19, r16
     57c:	22 27       	eor	r18, r18
     57e:	11 27       	eor	r17, r17
     580:	00 27       	eor	r16, r16
     582:	42 81       	ldd	r20, Z+2	; 0x02
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	ba 01       	movw	r22, r20
     58c:	55 27       	eor	r21, r21
     58e:	44 27       	eor	r20, r20
     590:	04 0f       	add	r16, r20
     592:	15 1f       	adc	r17, r21
     594:	26 1f       	adc	r18, r22
     596:	37 1f       	adc	r19, r23
     598:	41 81       	ldd	r20, Z+1	; 0x01
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	76 2f       	mov	r23, r22
     5a2:	65 2f       	mov	r22, r21
     5a4:	54 2f       	mov	r21, r20
     5a6:	44 27       	eor	r20, r20
     5a8:	d9 01       	movw	r26, r18
     5aa:	c8 01       	movw	r24, r16
     5ac:	84 0f       	add	r24, r20
     5ae:	95 1f       	adc	r25, r21
     5b0:	a6 1f       	adc	r26, r22
     5b2:	b7 1f       	adc	r27, r23
     5b4:	20 81       	ld	r18, Z
     5b6:	bc 01       	movw	r22, r24
     5b8:	cd 01       	movw	r24, r26
     5ba:	62 0f       	add	r22, r18
     5bc:	71 1d       	adc	r23, r1
     5be:	81 1d       	adc	r24, r1
     5c0:	91 1d       	adc	r25, r1
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	08 95       	ret

000005c8 <_Z10ReadConfigv>:
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	00 d0       	rcall	.+0      	; 0x5de <_Z10ReadConfigv+0x16>
     5de:	1f 92       	push	r1
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	10 92 9a 28 	sts	0x289A, r1	; 0x80289a <fk>
     5e8:	10 92 9b 28 	sts	0x289B, r1	; 0x80289b <fk+0x1>
     5ec:	10 92 9c 28 	sts	0x289C, r1	; 0x80289c <fk+0x2>
     5f0:	10 92 9d 28 	sts	0x289D, r1	; 0x80289d <fk+0x3>
     5f4:	10 92 98 28 	sts	0x2898, r1	; 0x802898 <ft>
     5f8:	10 92 99 28 	sts	0x2899, r1	; 0x802899 <ft+0x1>
     5fc:	10 92 97 28 	sts	0x2897, r1	; 0x802897 <fadd1>
     600:	10 92 96 28 	sts	0x2896, r1	; 0x802896 <fadd2>
     604:	e0 e8       	ldi	r30, 0x80	; 128
     606:	f6 e0       	ldi	r31, 0x06	; 6
     608:	84 81       	ldd	r24, Z+4	; 0x04
     60a:	80 61       	ori	r24, 0x10	; 16
     60c:	84 83       	std	Z+4, r24	; 0x04
     60e:	84 81       	ldd	r24, Z+4	; 0x04
     610:	8f 7e       	andi	r24, 0xEF	; 239
     612:	84 83       	std	Z+4, r24	; 0x04
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     61a:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <fadd2>
     61e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     622:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <fadd1>
     626:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     630:	01 ed       	ldi	r16, 0xD1	; 209
     632:	17 e2       	ldi	r17, 0x27	; 39
     634:	e1 2c       	mov	r14, r1
     636:	f1 2c       	mov	r15, r1
     638:	0f 2e       	mov	r0, r31
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	af 2e       	mov	r10, r31
     63e:	f0 e2       	ldi	r31, 0x20	; 32
     640:	bf 2e       	mov	r11, r31
     642:	f0 2d       	mov	r31, r0
     644:	0f 2e       	mov	r0, r31
     646:	f2 e2       	ldi	r31, 0x22	; 34
     648:	cf 2e       	mov	r12, r31
     64a:	f0 e2       	ldi	r31, 0x20	; 32
     64c:	df 2e       	mov	r13, r31
     64e:	f0 2d       	mov	r31, r0
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     656:	8a 83       	std	Y+2, r24	; 0x02
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	2a 81       	ldd	r18, Y+2	; 0x02
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	32 2f       	mov	r19, r18
     666:	22 27       	eor	r18, r18
     668:	a9 01       	movw	r20, r18
     66a:	48 0f       	add	r20, r24
     66c:	51 1d       	adc	r21, r1
     66e:	f8 01       	movw	r30, r16
     670:	40 83       	st	Z, r20
     672:	51 83       	std	Z+1, r21	; 0x01
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     67a:	f8 01       	movw	r30, r16
     67c:	82 83       	std	Z+2, r24	; 0x02
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     684:	f8 01       	movw	r30, r16
     686:	83 83       	std	Z+3, r24	; 0x03
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     68e:	f8 01       	movw	r30, r16
     690:	84 83       	std	Z+4, r24	; 0x04
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     698:	8c 83       	std	Y+4, r24	; 0x04
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     6a8:	8a 83       	std	Y+2, r24	; 0x02
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     6ba:	f8 01       	movw	r30, r16
     6bc:	65 83       	std	Z+5, r22	; 0x05
     6be:	76 83       	std	Z+6, r23	; 0x06
     6c0:	87 83       	std	Z+7, r24	; 0x07
     6c2:	90 87       	std	Z+8, r25	; 0x08
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     6ca:	8c 83       	std	Y+4, r24	; 0x04
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     6d2:	8b 83       	std	Y+3, r24	; 0x03
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     6da:	8a 83       	std	Y+2, r24	; 0x02
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     6e2:	89 83       	std	Y+1, r24	; 0x01
     6e4:	ce 01       	movw	r24, r28
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     6ec:	f8 01       	movw	r30, r16
     6ee:	61 87       	std	Z+9, r22	; 0x09
     6f0:	72 87       	std	Z+10, r23	; 0x0a
     6f2:	83 87       	std	Z+11, r24	; 0x0b
     6f4:	94 87       	std	Z+12, r25	; 0x0c
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     6fc:	8c 83       	std	Y+4, r24	; 0x04
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     704:	8b 83       	std	Y+3, r24	; 0x03
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     70c:	8a 83       	std	Y+2, r24	; 0x02
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	ce 01       	movw	r24, r28
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     71e:	f8 01       	movw	r30, r16
     720:	65 87       	std	Z+13, r22	; 0x0d
     722:	76 87       	std	Z+14, r23	; 0x0e
     724:	87 87       	std	Z+15, r24	; 0x0f
     726:	90 8b       	std	Z+16, r25	; 0x10
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     72e:	8c 83       	std	Y+4, r24	; 0x04
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     736:	8b 83       	std	Y+3, r24	; 0x03
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     73e:	8a 83       	std	Y+2, r24	; 0x02
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	ce 01       	movw	r24, r28
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     750:	f8 01       	movw	r30, r16
     752:	61 8b       	std	Z+17, r22	; 0x11
     754:	72 8b       	std	Z+18, r23	; 0x12
     756:	83 8b       	std	Z+19, r24	; 0x13
     758:	94 8b       	std	Z+20, r25	; 0x14
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     760:	8c 83       	std	Y+4, r24	; 0x04
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     768:	8b 83       	std	Y+3, r24	; 0x03
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     782:	f8 01       	movw	r30, r16
     784:	65 8b       	std	Z+21, r22	; 0x15
     786:	76 8b       	std	Z+22, r23	; 0x16
     788:	87 8b       	std	Z+23, r24	; 0x17
     78a:	90 8f       	std	Z+24, r25	; 0x18
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     792:	8a 83       	std	Y+2, r24	; 0x02
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	2a 81       	ldd	r18, Y+2	; 0x02
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	32 2f       	mov	r19, r18
     7a2:	22 27       	eor	r18, r18
     7a4:	a9 01       	movw	r20, r18
     7a6:	48 0f       	add	r20, r24
     7a8:	51 1d       	adc	r21, r1
     7aa:	f8 01       	movw	r30, r16
     7ac:	41 8f       	std	Z+25, r20	; 0x19
     7ae:	52 8f       	std	Z+26, r21	; 0x1a
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     7b6:	f8 01       	movw	r30, r16
     7b8:	83 8f       	std	Z+27, r24	; 0x1b
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     7c0:	f8 01       	movw	r30, r16
     7c2:	84 8f       	std	Z+28, r24	; 0x1c
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     7ca:	8c 83       	std	Y+4, r24	; 0x04
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     7ec:	f8 01       	movw	r30, r16
     7ee:	65 8f       	std	Z+29, r22	; 0x1d
     7f0:	76 8f       	std	Z+30, r23	; 0x1e
     7f2:	87 8f       	std	Z+31, r24	; 0x1f
     7f4:	90 a3       	std	Z+32, r25	; 0x20
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     7fc:	8c 83       	std	Y+4, r24	; 0x04
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     804:	8b 83       	std	Y+3, r24	; 0x03
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     80c:	8a 83       	std	Y+2, r24	; 0x02
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	ce 01       	movw	r24, r28
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     81e:	f8 01       	movw	r30, r16
     820:	61 a3       	std	Z+33, r22	; 0x21
     822:	72 a3       	std	Z+34, r23	; 0x22
     824:	83 a3       	std	Z+35, r24	; 0x23
     826:	94 a3       	std	Z+36, r25	; 0x24
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     82e:	f8 01       	movw	r30, r16
     830:	85 a3       	std	Z+37, r24	; 0x25
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     838:	f8 01       	movw	r30, r16
     83a:	86 a3       	std	Z+38, r24	; 0x26
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     842:	f8 01       	movw	r30, r16
     844:	87 a3       	std	Z+39, r24	; 0x27
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     84c:	f8 01       	movw	r30, r16
     84e:	80 a7       	std	Z+40, r24	; 0x28
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     856:	f8 01       	movw	r30, r16
     858:	81 a7       	std	Z+41, r24	; 0x29
     85a:	1f 92       	push	r1
     85c:	8f 93       	push	r24
     85e:	ff 92       	push	r15
     860:	ef 92       	push	r14
     862:	bf 92       	push	r11
     864:	af 92       	push	r10
     866:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     870:	f8 01       	movw	r30, r16
     872:	82 a7       	std	Z+42, r24	; 0x2a
     874:	1f 92       	push	r1
     876:	8f 93       	push	r24
     878:	ff 92       	push	r15
     87a:	ef 92       	push	r14
     87c:	df 92       	push	r13
     87e:	cf 92       	push	r12
     880:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
     884:	ff ef       	ldi	r31, 0xFF	; 255
     886:	ef 1a       	sub	r14, r31
     888:	ff 0a       	sbc	r15, r31
     88a:	05 5d       	subi	r16, 0xD5	; 213
     88c:	1f 4f       	sbci	r17, 0xFF	; 255
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	de bf       	out	0x3e, r29	; 62
     892:	53 e0       	ldi	r21, 0x03	; 3
     894:	e5 16       	cp	r14, r21
     896:	f1 04       	cpc	r15, r1
     898:	09 f0       	breq	.+2      	; 0x89c <_Z10ReadConfigv+0x2d4>
     89a:	da ce       	rjmp	.-588    	; 0x650 <_Z10ReadConfigv+0x88>
     89c:	24 96       	adiw	r28, 0x04	; 4
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	08 95       	ret

000008b8 <_Z7readRamv>:
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <_Z7readRamv+0x12>
     8ca:	1f 92       	push	r1
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	83 e4       	ldi	r24, 0x43	; 67
     8d2:	90 e2       	ldi	r25, 0x20	; 32
     8d4:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
     8d8:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <ContinuousRead>
     8dc:	81 11       	cpse	r24, r1
     8de:	4f c0       	rjmp	.+158    	; 0x97e <_Z7readRamv+0xc6>
     8e0:	82 e5       	ldi	r24, 0x52	; 82
     8e2:	90 e2       	ldi	r25, 0x20	; 32
     8e4:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
     8e8:	88 ee       	ldi	r24, 0xE8	; 232
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	a0 e0       	ldi	r26, 0x00	; 0
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <fk>
     8f4:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <fk+0x1>
     8f8:	a0 93 9c 28 	sts	0x289C, r26	; 0x80289c <fk+0x2>
     8fc:	b0 93 9d 28 	sts	0x289D, r27	; 0x80289d <fk+0x3>
     900:	1f 92       	push	r1
     902:	1f 92       	push	r1
     904:	83 e0       	ldi	r24, 0x03	; 3
     906:	8f 93       	push	r24
     908:	88 ee       	ldi	r24, 0xE8	; 232
     90a:	8f 93       	push	r24
     90c:	87 e6       	ldi	r24, 0x67	; 103
     90e:	90 e2       	ldi	r25, 0x20	; 32
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
     918:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <fk>
     91c:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <fk+0x1>
     920:	a0 91 9c 28 	lds	r26, 0x289C	; 0x80289c <fk+0x2>
     924:	b0 91 9d 28 	lds	r27, 0x289D	; 0x80289d <fk+0x3>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	aa 1f       	adc	r26, r26
     92e:	bb 1f       	adc	r27, r27
     930:	80 93 98 28 	sts	0x2898, r24	; 0x802898 <ft>
     934:	90 93 99 28 	sts	0x2899, r25	; 0x802899 <ft+0x1>
     938:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <fadd1>
     93c:	90 93 96 28 	sts	0x2896, r25	; 0x802896 <fadd2>
     940:	e0 e8       	ldi	r30, 0x80	; 128
     942:	f6 e0       	ldi	r31, 0x06	; 6
     944:	84 81       	ldd	r24, Z+4	; 0x04
     946:	80 61       	ori	r24, 0x10	; 16
     948:	84 83       	std	Z+4, r24	; 0x04
     94a:	84 81       	ldd	r24, Z+4	; 0x04
     94c:	8f 7e       	andi	r24, 0xEF	; 239
     94e:	84 83       	std	Z+4, r24	; 0x04
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     956:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <fadd2>
     95a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     95e:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <fadd1>
     962:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 9e 28 	sts	0x289E, r24	; 0x80289e <ContinuousRead>
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     984:	8a 83       	std	Y+2, r24	; 0x02
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	02 e5       	ldi	r16, 0x52	; 82
     990:	18 e2       	ldi	r17, 0x28	; 40
     992:	2a 81       	ldd	r18, Y+2	; 0x02
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	32 2f       	mov	r19, r18
     998:	22 27       	eor	r18, r18
     99a:	a9 01       	movw	r20, r18
     99c:	48 0f       	add	r20, r24
     99e:	51 1d       	adc	r21, r1
     9a0:	f8 01       	movw	r30, r16
     9a2:	40 83       	st	Z, r20
     9a4:	51 83       	std	Z+1, r21	; 0x01
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     9ac:	f8 01       	movw	r30, r16
     9ae:	82 83       	std	Z+2, r24	; 0x02
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     9b6:	f8 01       	movw	r30, r16
     9b8:	83 83       	std	Z+3, r24	; 0x03
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <_Z7readRamv+0x108>
     9be:	5c c1       	rjmp	.+696    	; 0xc78 <_Z7readRamv+0x3c0>
     9c0:	20 f0       	brcs	.+8      	; 0x9ca <_Z7readRamv+0x112>
     9c2:	8a 35       	cpi	r24, 0x5A	; 90
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <_Z7readRamv+0x110>
     9c6:	42 c2       	rjmp	.+1156   	; 0xe4c <_Z7readRamv+0x594>
     9c8:	be c2       	rjmp	.+1404   	; 0xf46 <_Z7readRamv+0x68e>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     9d0:	80 93 56 28 	sts	0x2856, r24	; 0x802856 <CMDPRGlist+0x4>
     9d4:	88 23       	and	r24, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <_Z7readRamv+0x122>
     9d8:	aa c2       	rjmp	.+1364   	; 0xf2e <_Z7readRamv+0x676>
     9da:	8e 01       	movw	r16, r28
     9dc:	0b 5f       	subi	r16, 0xFB	; 251
     9de:	1f 4f       	sbci	r17, 0xFF	; 255
     9e0:	ae 01       	movw	r20, r28
     9e2:	4f 5f       	subi	r20, 0xFF	; 255
     9e4:	5f 4f       	sbci	r21, 0xFF	; 255
     9e6:	6a 01       	movw	r12, r20
     9e8:	78 01       	movw	r14, r16
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     9f0:	f7 01       	movw	r30, r14
     9f2:	82 93       	st	-Z, r24
     9f4:	7f 01       	movw	r14, r30
     9f6:	ec 15       	cp	r30, r12
     9f8:	fd 05       	cpc	r31, r13
     9fa:	b9 f7       	brne	.-18     	; 0x9ea <_Z7readRamv+0x132>
     9fc:	ce 01       	movw	r24, r28
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     a04:	e2 e5       	ldi	r30, 0x52	; 82
     a06:	f8 e2       	ldi	r31, 0x28	; 40
     a08:	65 83       	std	Z+5, r22	; 0x05
     a0a:	76 83       	std	Z+6, r23	; 0x06
     a0c:	87 83       	std	Z+7, r24	; 0x07
     a0e:	90 87       	std	Z+8, r25	; 0x08
     a10:	84 81       	ldd	r24, Z+4	; 0x04
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	08 f4       	brcc	.+2      	; 0xa18 <_Z7readRamv+0x160>
     a16:	64 c2       	rjmp	.+1224   	; 0xee0 <_Z7readRamv+0x628>
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     a1e:	f8 01       	movw	r30, r16
     a20:	82 93       	st	-Z, r24
     a22:	8f 01       	movw	r16, r30
     a24:	ec 15       	cp	r30, r12
     a26:	fd 05       	cpc	r31, r13
     a28:	b9 f7       	brne	.-18     	; 0xa18 <_Z7readRamv+0x160>
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     a32:	e2 e5       	ldi	r30, 0x52	; 82
     a34:	f8 e2       	ldi	r31, 0x28	; 40
     a36:	61 87       	std	Z+9, r22	; 0x09
     a38:	72 87       	std	Z+10, r23	; 0x0a
     a3a:	83 87       	std	Z+11, r24	; 0x0b
     a3c:	94 87       	std	Z+12, r25	; 0x0c
     a3e:	84 81       	ldd	r24, Z+4	; 0x04
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	08 f4       	brcc	.+2      	; 0xa46 <_Z7readRamv+0x18e>
     a44:	51 c2       	rjmp	.+1186   	; 0xee8 <_Z7readRamv+0x630>
     a46:	8e 01       	movw	r16, r28
     a48:	0b 5f       	subi	r16, 0xFB	; 251
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
     a4c:	ae 01       	movw	r20, r28
     a4e:	4f 5f       	subi	r20, 0xFF	; 255
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	7a 01       	movw	r14, r20
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     a5a:	f8 01       	movw	r30, r16
     a5c:	82 93       	st	-Z, r24
     a5e:	8f 01       	movw	r16, r30
     a60:	ee 15       	cp	r30, r14
     a62:	ff 05       	cpc	r31, r15
     a64:	b9 f7       	brne	.-18     	; 0xa54 <_Z7readRamv+0x19c>
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     a6e:	60 93 5f 28 	sts	0x285F, r22	; 0x80285f <CMDPRGlist+0xd>
     a72:	70 93 60 28 	sts	0x2860, r23	; 0x802860 <CMDPRGlist+0xe>
     a76:	80 93 61 28 	sts	0x2861, r24	; 0x802861 <CMDPRGlist+0xf>
     a7a:	90 93 62 28 	sts	0x2862, r25	; 0x802862 <CMDPRGlist+0x10>
     a7e:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     a82:	88 23       	and	r24, r24
     a84:	09 f4       	brne	.+2      	; 0xa88 <_Z7readRamv+0x1d0>
     a86:	57 c0       	rjmp	.+174    	; 0xb36 <_Z7readRamv+0x27e>
     a88:	8e 01       	movw	r16, r28
     a8a:	0b 5f       	subi	r16, 0xFB	; 251
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	ae 01       	movw	r20, r28
     a90:	4f 5f       	subi	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	7a 01       	movw	r14, r20
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     a9c:	f8 01       	movw	r30, r16
     a9e:	82 93       	st	-Z, r24
     aa0:	8f 01       	movw	r16, r30
     aa2:	ee 16       	cp	r14, r30
     aa4:	ff 06       	cpc	r15, r31
     aa6:	b9 f7       	brne	.-18     	; 0xa96 <_Z7readRamv+0x1de>
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     ab0:	e2 e5       	ldi	r30, 0x52	; 82
     ab2:	f8 e2       	ldi	r31, 0x28	; 40
     ab4:	64 8b       	std	Z+20, r22	; 0x14
     ab6:	75 8b       	std	Z+21, r23	; 0x15
     ab8:	86 8b       	std	Z+22, r24	; 0x16
     aba:	97 8b       	std	Z+23, r25	; 0x17
     abc:	84 81       	ldd	r24, Z+4	; 0x04
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	08 f4       	brcc	.+2      	; 0xac4 <_Z7readRamv+0x20c>
     ac2:	15 c2       	rjmp	.+1066   	; 0xeee <_Z7readRamv+0x636>
     ac4:	8e 01       	movw	r16, r28
     ac6:	0b 5f       	subi	r16, 0xFB	; 251
     ac8:	1f 4f       	sbci	r17, 0xFF	; 255
     aca:	ae 01       	movw	r20, r28
     acc:	4f 5f       	subi	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	7a 01       	movw	r14, r20
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     ad8:	f8 01       	movw	r30, r16
     ada:	82 93       	st	-Z, r24
     adc:	8f 01       	movw	r16, r30
     ade:	ee 16       	cp	r14, r30
     ae0:	ff 06       	cpc	r15, r31
     ae2:	b9 f7       	brne	.-18     	; 0xad2 <_Z7readRamv+0x21a>
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     aec:	e2 e5       	ldi	r30, 0x52	; 82
     aee:	f8 e2       	ldi	r31, 0x28	; 40
     af0:	60 8f       	std	Z+24, r22	; 0x18
     af2:	71 8f       	std	Z+25, r23	; 0x19
     af4:	82 8f       	std	Z+26, r24	; 0x1a
     af6:	93 8f       	std	Z+27, r25	; 0x1b
     af8:	84 81       	ldd	r24, Z+4	; 0x04
     afa:	83 30       	cpi	r24, 0x03	; 3
     afc:	e0 f0       	brcs	.+56     	; 0xb36 <_Z7readRamv+0x27e>
     afe:	8e 01       	movw	r16, r28
     b00:	0b 5f       	subi	r16, 0xFB	; 251
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	ae 01       	movw	r20, r28
     b06:	4f 5f       	subi	r20, 0xFF	; 255
     b08:	5f 4f       	sbci	r21, 0xFF	; 255
     b0a:	7a 01       	movw	r14, r20
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     b12:	f8 01       	movw	r30, r16
     b14:	82 93       	st	-Z, r24
     b16:	8f 01       	movw	r16, r30
     b18:	ee 15       	cp	r30, r14
     b1a:	ff 05       	cpc	r31, r15
     b1c:	b9 f7       	brne	.-18     	; 0xb0c <_Z7readRamv+0x254>
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     b26:	60 93 6e 28 	sts	0x286E, r22	; 0x80286e <CMDPRGlist+0x1c>
     b2a:	70 93 6f 28 	sts	0x286F, r23	; 0x80286f <CMDPRGlist+0x1d>
     b2e:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <CMDPRGlist+0x1e>
     b32:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <CMDPRGlist+0x1f>
     b36:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     b3a:	88 23       	and	r24, r24
     b3c:	09 f4       	brne	.+2      	; 0xb40 <_Z7readRamv+0x288>
     b3e:	db c1       	rjmp	.+950    	; 0xef6 <_Z7readRamv+0x63e>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     b46:	e2 e5       	ldi	r30, 0x52	; 82
     b48:	f8 e2       	ldi	r31, 0x28	; 40
     b4a:	81 8b       	std	Z+17, r24	; 0x11
     b4c:	84 81       	ldd	r24, Z+4	; 0x04
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	28 f0       	brcs	.+10     	; 0xb5c <_Z7readRamv+0x2a4>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     b58:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <CMDPRGlist+0x12>
     b5c:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     b60:	83 30       	cpi	r24, 0x03	; 3
     b62:	08 f4       	brcc	.+2      	; 0xb66 <_Z7readRamv+0x2ae>
     b64:	c8 c1       	rjmp	.+912    	; 0xef6 <_Z7readRamv+0x63e>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     b6c:	80 93 65 28 	sts	0x2865, r24	; 0x802865 <CMDPRGlist+0x13>
     b70:	c2 c1       	rjmp	.+900    	; 0xef6 <_Z7readRamv+0x63e>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     b78:	f6 01       	movw	r30, r12
     b7a:	82 93       	st	-Z, r24
     b7c:	6f 01       	movw	r12, r30
     b7e:	0e 17       	cp	r16, r30
     b80:	1f 07       	cpc	r17, r31
     b82:	b9 f7       	brne	.-18     	; 0xb72 <_Z7readRamv+0x2ba>
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     b8c:	60 93 72 28 	sts	0x2872, r22	; 0x802872 <CMDPRGlist+0x20>
     b90:	70 93 73 28 	sts	0x2873, r23	; 0x802873 <CMDPRGlist+0x21>
     b94:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <CMDPRGlist+0x22>
     b98:	90 93 75 28 	sts	0x2875, r25	; 0x802875 <CMDPRGlist+0x23>
     b9c:	67 01       	movw	r12, r14
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     ba4:	f6 01       	movw	r30, r12
     ba6:	82 93       	st	-Z, r24
     ba8:	6f 01       	movw	r12, r30
     baa:	0e 17       	cp	r16, r30
     bac:	1f 07       	cpc	r17, r31
     bae:	b9 f7       	brne	.-18     	; 0xb9e <_Z7readRamv+0x2e6>
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     bb8:	60 93 76 28 	sts	0x2876, r22	; 0x802876 <CMDPRGlist+0x24>
     bbc:	70 93 77 28 	sts	0x2877, r23	; 0x802877 <CMDPRGlist+0x25>
     bc0:	80 93 78 28 	sts	0x2878, r24	; 0x802878 <CMDPRGlist+0x26>
     bc4:	90 93 79 28 	sts	0x2879, r25	; 0x802879 <CMDPRGlist+0x27>
     bc8:	67 01       	movw	r12, r14
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     bd0:	f6 01       	movw	r30, r12
     bd2:	82 93       	st	-Z, r24
     bd4:	6f 01       	movw	r12, r30
     bd6:	0e 17       	cp	r16, r30
     bd8:	1f 07       	cpc	r17, r31
     bda:	b9 f7       	brne	.-18     	; 0xbca <_Z7readRamv+0x312>
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     be4:	60 93 7a 28 	sts	0x287A, r22	; 0x80287a <CMDPRGlist+0x28>
     be8:	70 93 7b 28 	sts	0x287B, r23	; 0x80287b <CMDPRGlist+0x29>
     bec:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <CMDPRGlist+0x2a>
     bf0:	90 93 7d 28 	sts	0x287D, r25	; 0x80287d <CMDPRGlist+0x2b>
     bf4:	67 01       	movw	r12, r14
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     bfc:	f6 01       	movw	r30, r12
     bfe:	82 93       	st	-Z, r24
     c00:	6f 01       	movw	r12, r30
     c02:	0e 17       	cp	r16, r30
     c04:	1f 07       	cpc	r17, r31
     c06:	b9 f7       	brne	.-18     	; 0xbf6 <_Z7readRamv+0x33e>
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     c10:	60 93 7e 28 	sts	0x287E, r22	; 0x80287e <CMDPRGlist+0x2c>
     c14:	70 93 7f 28 	sts	0x287F, r23	; 0x80287f <CMDPRGlist+0x2d>
     c18:	80 93 80 28 	sts	0x2880, r24	; 0x802880 <CMDPRGlist+0x2e>
     c1c:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <CMDPRGlist+0x2f>
     c20:	67 01       	movw	r12, r14
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     c28:	f6 01       	movw	r30, r12
     c2a:	82 93       	st	-Z, r24
     c2c:	6f 01       	movw	r12, r30
     c2e:	e0 17       	cp	r30, r16
     c30:	f1 07       	cpc	r31, r17
     c32:	b9 f7       	brne	.-18     	; 0xc22 <_Z7readRamv+0x36a>
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     c3c:	60 93 82 28 	sts	0x2882, r22	; 0x802882 <CMDPRGlist+0x30>
     c40:	70 93 83 28 	sts	0x2883, r23	; 0x802883 <CMDPRGlist+0x31>
     c44:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <CMDPRGlist+0x32>
     c48:	90 93 85 28 	sts	0x2885, r25	; 0x802885 <CMDPRGlist+0x33>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     c52:	f7 01       	movw	r30, r14
     c54:	82 93       	st	-Z, r24
     c56:	7f 01       	movw	r14, r30
     c58:	0e 17       	cp	r16, r30
     c5a:	1f 07       	cpc	r17, r31
     c5c:	b9 f7       	brne	.-18     	; 0xc4c <_Z7readRamv+0x394>
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     c66:	60 93 86 28 	sts	0x2886, r22	; 0x802886 <CMDPRGlist+0x34>
     c6a:	70 93 87 28 	sts	0x2887, r23	; 0x802887 <CMDPRGlist+0x35>
     c6e:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <CMDPRGlist+0x36>
     c72:	90 93 89 28 	sts	0x2889, r25	; 0x802889 <CMDPRGlist+0x37>
     c76:	67 c1       	rjmp	.+718    	; 0xf46 <_Z7readRamv+0x68e>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     c7e:	80 93 56 28 	sts	0x2856, r24	; 0x802856 <CMDPRGlist+0x4>
     c82:	88 23       	and	r24, r24
     c84:	09 f4       	brne	.+2      	; 0xc88 <_Z7readRamv+0x3d0>
     c86:	59 c1       	rjmp	.+690    	; 0xf3a <_Z7readRamv+0x682>
     c88:	8e 01       	movw	r16, r28
     c8a:	0b 5f       	subi	r16, 0xFB	; 251
     c8c:	1f 4f       	sbci	r17, 0xFF	; 255
     c8e:	ae 01       	movw	r20, r28
     c90:	4f 5f       	subi	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	6a 01       	movw	r12, r20
     c96:	78 01       	movw	r14, r16
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     c9e:	f7 01       	movw	r30, r14
     ca0:	82 93       	st	-Z, r24
     ca2:	7f 01       	movw	r14, r30
     ca4:	ec 15       	cp	r30, r12
     ca6:	fd 05       	cpc	r31, r13
     ca8:	b9 f7       	brne	.-18     	; 0xc98 <_Z7readRamv+0x3e0>
     caa:	ce 01       	movw	r24, r28
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     cb2:	e2 e5       	ldi	r30, 0x52	; 82
     cb4:	f8 e2       	ldi	r31, 0x28	; 40
     cb6:	65 83       	std	Z+5, r22	; 0x05
     cb8:	76 83       	std	Z+6, r23	; 0x06
     cba:	87 83       	std	Z+7, r24	; 0x07
     cbc:	90 87       	std	Z+8, r25	; 0x08
     cbe:	84 81       	ldd	r24, Z+4	; 0x04
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <_Z7readRamv+0x40e>
     cc4:	21 c1       	rjmp	.+578    	; 0xf08 <_Z7readRamv+0x650>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     ccc:	f8 01       	movw	r30, r16
     cce:	82 93       	st	-Z, r24
     cd0:	8f 01       	movw	r16, r30
     cd2:	ec 15       	cp	r30, r12
     cd4:	fd 05       	cpc	r31, r13
     cd6:	b9 f7       	brne	.-18     	; 0xcc6 <_Z7readRamv+0x40e>
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     ce0:	e2 e5       	ldi	r30, 0x52	; 82
     ce2:	f8 e2       	ldi	r31, 0x28	; 40
     ce4:	61 87       	std	Z+9, r22	; 0x09
     ce6:	72 87       	std	Z+10, r23	; 0x0a
     ce8:	83 87       	std	Z+11, r24	; 0x0b
     cea:	94 87       	std	Z+12, r25	; 0x0c
     cec:	84 81       	ldd	r24, Z+4	; 0x04
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <_Z7readRamv+0x43c>
     cf2:	0e c1       	rjmp	.+540    	; 0xf10 <_Z7readRamv+0x658>
     cf4:	8e 01       	movw	r16, r28
     cf6:	0b 5f       	subi	r16, 0xFB	; 251
     cf8:	1f 4f       	sbci	r17, 0xFF	; 255
     cfa:	ae 01       	movw	r20, r28
     cfc:	4f 5f       	subi	r20, 0xFF	; 255
     cfe:	5f 4f       	sbci	r21, 0xFF	; 255
     d00:	7a 01       	movw	r14, r20
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     d08:	f8 01       	movw	r30, r16
     d0a:	82 93       	st	-Z, r24
     d0c:	8f 01       	movw	r16, r30
     d0e:	ee 16       	cp	r14, r30
     d10:	ff 06       	cpc	r15, r31
     d12:	b9 f7       	brne	.-18     	; 0xd02 <_Z7readRamv+0x44a>
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     d1c:	60 93 5f 28 	sts	0x285F, r22	; 0x80285f <CMDPRGlist+0xd>
     d20:	70 93 60 28 	sts	0x2860, r23	; 0x802860 <CMDPRGlist+0xe>
     d24:	80 93 61 28 	sts	0x2861, r24	; 0x802861 <CMDPRGlist+0xf>
     d28:	90 93 62 28 	sts	0x2862, r25	; 0x802862 <CMDPRGlist+0x10>
     d2c:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     d30:	88 23       	and	r24, r24
     d32:	09 f4       	brne	.+2      	; 0xd36 <_Z7readRamv+0x47e>
     d34:	57 c0       	rjmp	.+174    	; 0xde4 <_Z7readRamv+0x52c>
     d36:	8e 01       	movw	r16, r28
     d38:	0b 5f       	subi	r16, 0xFB	; 251
     d3a:	1f 4f       	sbci	r17, 0xFF	; 255
     d3c:	ae 01       	movw	r20, r28
     d3e:	4f 5f       	subi	r20, 0xFF	; 255
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	7a 01       	movw	r14, r20
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     d4a:	f8 01       	movw	r30, r16
     d4c:	82 93       	st	-Z, r24
     d4e:	8f 01       	movw	r16, r30
     d50:	ee 16       	cp	r14, r30
     d52:	ff 06       	cpc	r15, r31
     d54:	b9 f7       	brne	.-18     	; 0xd44 <_Z7readRamv+0x48c>
     d56:	ce 01       	movw	r24, r28
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     d5e:	e2 e5       	ldi	r30, 0x52	; 82
     d60:	f8 e2       	ldi	r31, 0x28	; 40
     d62:	64 8b       	std	Z+20, r22	; 0x14
     d64:	75 8b       	std	Z+21, r23	; 0x15
     d66:	86 8b       	std	Z+22, r24	; 0x16
     d68:	97 8b       	std	Z+23, r25	; 0x17
     d6a:	84 81       	ldd	r24, Z+4	; 0x04
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <_Z7readRamv+0x4ba>
     d70:	d2 c0       	rjmp	.+420    	; 0xf16 <_Z7readRamv+0x65e>
     d72:	8e 01       	movw	r16, r28
     d74:	0b 5f       	subi	r16, 0xFB	; 251
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	ae 01       	movw	r20, r28
     d7a:	4f 5f       	subi	r20, 0xFF	; 255
     d7c:	5f 4f       	sbci	r21, 0xFF	; 255
     d7e:	7a 01       	movw	r14, r20
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     d86:	f8 01       	movw	r30, r16
     d88:	82 93       	st	-Z, r24
     d8a:	8f 01       	movw	r16, r30
     d8c:	ee 15       	cp	r30, r14
     d8e:	ff 05       	cpc	r31, r15
     d90:	b9 f7       	brne	.-18     	; 0xd80 <_Z7readRamv+0x4c8>
     d92:	ce 01       	movw	r24, r28
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     d9a:	e2 e5       	ldi	r30, 0x52	; 82
     d9c:	f8 e2       	ldi	r31, 0x28	; 40
     d9e:	60 8f       	std	Z+24, r22	; 0x18
     da0:	71 8f       	std	Z+25, r23	; 0x19
     da2:	82 8f       	std	Z+26, r24	; 0x1a
     da4:	93 8f       	std	Z+27, r25	; 0x1b
     da6:	84 81       	ldd	r24, Z+4	; 0x04
     da8:	83 30       	cpi	r24, 0x03	; 3
     daa:	e0 f0       	brcs	.+56     	; 0xde4 <_Z7readRamv+0x52c>
     dac:	8e 01       	movw	r16, r28
     dae:	0b 5f       	subi	r16, 0xFB	; 251
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	ae 01       	movw	r20, r28
     db4:	4f 5f       	subi	r20, 0xFF	; 255
     db6:	5f 4f       	sbci	r21, 0xFF	; 255
     db8:	7a 01       	movw	r14, r20
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     dc0:	f8 01       	movw	r30, r16
     dc2:	82 93       	st	-Z, r24
     dc4:	8f 01       	movw	r16, r30
     dc6:	ee 15       	cp	r30, r14
     dc8:	ff 05       	cpc	r31, r15
     dca:	b9 f7       	brne	.-18     	; 0xdba <_Z7readRamv+0x502>
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     dd4:	60 93 6e 28 	sts	0x286E, r22	; 0x80286e <CMDPRGlist+0x1c>
     dd8:	70 93 6f 28 	sts	0x286F, r23	; 0x80286f <CMDPRGlist+0x1d>
     ddc:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <CMDPRGlist+0x1e>
     de0:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <CMDPRGlist+0x1f>
     de4:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     de8:	88 23       	and	r24, r24
     dea:	09 f4       	brne	.+2      	; 0xdee <_Z7readRamv+0x536>
     dec:	98 c0       	rjmp	.+304    	; 0xf1e <_Z7readRamv+0x666>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     df4:	e2 e5       	ldi	r30, 0x52	; 82
     df6:	f8 e2       	ldi	r31, 0x28	; 40
     df8:	81 8b       	std	Z+17, r24	; 0x11
     dfa:	84 81       	ldd	r24, Z+4	; 0x04
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	28 f0       	brcs	.+10     	; 0xe0a <_Z7readRamv+0x552>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e06:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <CMDPRGlist+0x12>
     e0a:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     e0e:	83 30       	cpi	r24, 0x03	; 3
     e10:	08 f4       	brcc	.+2      	; 0xe14 <_Z7readRamv+0x55c>
     e12:	85 c0       	rjmp	.+266    	; 0xf1e <_Z7readRamv+0x666>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e1a:	80 93 65 28 	sts	0x2865, r24	; 0x802865 <CMDPRGlist+0x13>
     e1e:	7f c0       	rjmp	.+254    	; 0xf1e <_Z7readRamv+0x666>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e26:	f8 01       	movw	r30, r16
     e28:	82 93       	st	-Z, r24
     e2a:	8f 01       	movw	r16, r30
     e2c:	ee 16       	cp	r14, r30
     e2e:	ff 06       	cpc	r15, r31
     e30:	b9 f7       	brne	.-18     	; 0xe20 <_Z7readRamv+0x568>
     e32:	ce 01       	movw	r24, r28
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     e3a:	60 93 72 28 	sts	0x2872, r22	; 0x802872 <CMDPRGlist+0x20>
     e3e:	70 93 73 28 	sts	0x2873, r23	; 0x802873 <CMDPRGlist+0x21>
     e42:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <CMDPRGlist+0x22>
     e46:	90 93 75 28 	sts	0x2875, r25	; 0x802875 <CMDPRGlist+0x23>
     e4a:	7d c0       	rjmp	.+250    	; 0xf46 <_Z7readRamv+0x68e>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e52:	02 e5       	ldi	r16, 0x52	; 82
     e54:	18 e2       	ldi	r17, 0x28	; 40
     e56:	f8 01       	movw	r30, r16
     e58:	80 af       	std	Z+56, r24	; 0x38
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e60:	8c 83       	std	Y+4, r24	; 0x04
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e68:	8b 83       	std	Y+3, r24	; 0x03
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e70:	8a 83       	std	Y+2, r24	; 0x02
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	ce 01       	movw	r24, r28
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     e82:	f8 01       	movw	r30, r16
     e84:	61 af       	std	Z+57, r22	; 0x39
     e86:	72 af       	std	Z+58, r23	; 0x3a
     e88:	83 af       	std	Z+59, r24	; 0x3b
     e8a:	94 af       	std	Z+60, r25	; 0x3c
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e92:	8c 83       	std	Y+4, r24	; 0x04
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     ea2:	8a 83       	std	Y+2, r24	; 0x02
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
     eb4:	60 93 8f 28 	sts	0x288F, r22	; 0x80288f <CMDPRGlist+0x3d>
     eb8:	70 93 90 28 	sts	0x2890, r23	; 0x802890 <CMDPRGlist+0x3e>
     ebc:	80 93 91 28 	sts	0x2891, r24	; 0x802891 <CMDPRGlist+0x3f>
     ec0:	90 93 92 28 	sts	0x2892, r25	; 0x802892 <CMDPRGlist+0x40>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     eca:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <CMDPRGlist+0x41>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <CMDPRGlist+0x42>
     eda:	90 93 95 28 	sts	0x2895, r25	; 0x802895 <CMDPRGlist+0x43>
     ede:	33 c0       	rjmp	.+102    	; 0xf46 <_Z7readRamv+0x68e>
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <_Z7readRamv+0x62e>
     ee4:	b0 cd       	rjmp	.-1184   	; 0xa46 <_Z7readRamv+0x18e>
     ee6:	cb cd       	rjmp	.-1130   	; 0xa7e <_Z7readRamv+0x1c6>
     ee8:	81 11       	cpse	r24, r1
     eea:	ce cd       	rjmp	.-1124   	; 0xa88 <_Z7readRamv+0x1d0>
     eec:	23 c0       	rjmp	.+70     	; 0xf34 <_Z7readRamv+0x67c>
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	08 f4       	brcc	.+2      	; 0xef4 <_Z7readRamv+0x63c>
     ef2:	21 ce       	rjmp	.-958    	; 0xb36 <_Z7readRamv+0x27e>
     ef4:	04 ce       	rjmp	.-1016   	; 0xafe <_Z7readRamv+0x246>
     ef6:	7e 01       	movw	r14, r28
     ef8:	f5 e0       	ldi	r31, 0x05	; 5
     efa:	ef 0e       	add	r14, r31
     efc:	f1 1c       	adc	r15, r1
     efe:	8e 01       	movw	r16, r28
     f00:	0f 5f       	subi	r16, 0xFF	; 255
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	67 01       	movw	r12, r14
     f06:	35 ce       	rjmp	.-918    	; 0xb72 <_Z7readRamv+0x2ba>
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <_Z7readRamv+0x656>
     f0c:	f3 ce       	rjmp	.-538    	; 0xcf4 <_Z7readRamv+0x43c>
     f0e:	0e cf       	rjmp	.-484    	; 0xd2c <_Z7readRamv+0x474>
     f10:	81 11       	cpse	r24, r1
     f12:	11 cf       	rjmp	.-478    	; 0xd36 <_Z7readRamv+0x47e>
     f14:	15 c0       	rjmp	.+42     	; 0xf40 <_Z7readRamv+0x688>
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	08 f4       	brcc	.+2      	; 0xf1c <_Z7readRamv+0x664>
     f1a:	64 cf       	rjmp	.-312    	; 0xde4 <_Z7readRamv+0x52c>
     f1c:	47 cf       	rjmp	.-370    	; 0xdac <_Z7readRamv+0x4f4>
     f1e:	8e 01       	movw	r16, r28
     f20:	0b 5f       	subi	r16, 0xFB	; 251
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	ae 01       	movw	r20, r28
     f26:	4f 5f       	subi	r20, 0xFF	; 255
     f28:	5f 4f       	sbci	r21, 0xFF	; 255
     f2a:	7a 01       	movw	r14, r20
     f2c:	79 cf       	rjmp	.-270    	; 0xe20 <_Z7readRamv+0x568>
     f2e:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     f32:	da cf       	rjmp	.-76     	; 0xee8 <_Z7readRamv+0x630>
     f34:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     f38:	da cf       	rjmp	.-76     	; 0xeee <_Z7readRamv+0x636>
     f3a:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     f3e:	e8 cf       	rjmp	.-48     	; 0xf10 <_Z7readRamv+0x658>
     f40:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
     f44:	e8 cf       	rjmp	.-48     	; 0xf16 <_Z7readRamv+0x65e>
     f46:	24 96       	adiw	r28, 0x04	; 4
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	08 95       	ret

00000f5e <_Z10ReadSerialv>:
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	00 d0       	rcall	.+0      	; 0xf64 <_Z10ReadSerialv+0x6>
     f64:	1f 92       	push	r1
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	81 e8       	ldi	r24, 0x81	; 129
     f6c:	90 e2       	ldi	r25, 0x20	; 32
     f6e:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
     f72:	87 ee       	ldi	r24, 0xE7	; 231
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <fk>
     f7e:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <fk+0x1>
     f82:	a0 93 9c 28 	sts	0x289C, r26	; 0x80289c <fk+0x2>
     f86:	b0 93 9d 28 	sts	0x289D, r27	; 0x80289d <fk+0x3>
     f8a:	8e ec       	ldi	r24, 0xCE	; 206
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	80 93 98 28 	sts	0x2898, r24	; 0x802898 <ft>
     f92:	90 93 99 28 	sts	0x2899, r25	; 0x802899 <ft+0x1>
     f96:	8e ec       	ldi	r24, 0xCE	; 206
     f98:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <fadd1>
     f9c:	87 e0       	ldi	r24, 0x07	; 7
     f9e:	80 93 96 28 	sts	0x2896, r24	; 0x802896 <fadd2>
     fa2:	e0 e8       	ldi	r30, 0x80	; 128
     fa4:	f6 e0       	ldi	r31, 0x06	; 6
     fa6:	84 81       	ldd	r24, Z+4	; 0x04
     fa8:	80 61       	ori	r24, 0x10	; 16
     faa:	84 83       	std	Z+4, r24	; 0x04
     fac:	84 81       	ldd	r24, Z+4	; 0x04
     fae:	8f 7e       	andi	r24, 0xEF	; 239
     fb0:	84 83       	std	Z+4, r24	; 0x04
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     fb8:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <fadd2>
     fbc:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     fc0:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <fadd1>
     fc4:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     fd4:	8c 83       	std	Y+4, r24	; 0x04
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     fe4:	8a 83       	std	Y+2, r24	; 0x02
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	1f 92       	push	r1
     ff2:	9f 93       	push	r25
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	1f 92       	push	r1
     ff8:	9f 93       	push	r25
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	1f 92       	push	r1
     ffe:	9f 93       	push	r25
    1000:	1f 92       	push	r1
    1002:	8f 93       	push	r24
    1004:	84 e9       	ldi	r24, 0x94	; 148
    1006:	90 e2       	ldi	r25, 0x20	; 32
    1008:	9f 93       	push	r25
    100a:	8f 93       	push	r24
    100c:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    1010:	ce 01       	movw	r24, r28
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	24 96       	adiw	r28, 0x04	; 4
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <_Z14ReadSubProgramj>:
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	00 d0       	rcall	.+0      	; 0x103a <_Z14ReadSubProgramj+0x12>
    103a:	1f 92       	push	r1
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	20 91 9e 28 	lds	r18, 0x289E	; 0x80289e <ContinuousRead>
    1044:	21 11       	cpse	r18, r1
    1046:	2f c0       	rjmp	.+94     	; 0x10a6 <_Z14ReadSubProgramj+0x7e>
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <fk>
    1050:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <fk+0x1>
    1054:	a0 93 9c 28 	sts	0x289C, r26	; 0x80289c <fk+0x2>
    1058:	b0 93 9d 28 	sts	0x289D, r27	; 0x80289d <fk+0x3>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	aa 1f       	adc	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	80 93 98 28 	sts	0x2898, r24	; 0x802898 <ft>
    1068:	90 93 99 28 	sts	0x2899, r25	; 0x802899 <ft+0x1>
    106c:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <fadd1>
    1070:	90 93 96 28 	sts	0x2896, r25	; 0x802896 <fadd2>
    1074:	e0 e8       	ldi	r30, 0x80	; 128
    1076:	f6 e0       	ldi	r31, 0x06	; 6
    1078:	84 81       	ldd	r24, Z+4	; 0x04
    107a:	80 61       	ori	r24, 0x10	; 16
    107c:	84 83       	std	Z+4, r24	; 0x04
    107e:	84 81       	ldd	r24, Z+4	; 0x04
    1080:	8f 7e       	andi	r24, 0xEF	; 239
    1082:	84 83       	std	Z+4, r24	; 0x04
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    108a:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <fadd2>
    108e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1092:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <fadd1>
    1096:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 9e 28 	sts	0x289E, r24	; 0x80289e <ContinuousRead>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    10ac:	8a 83       	std	Y+2, r24	; 0x02
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	02 e5       	ldi	r16, 0x52	; 82
    10b8:	18 e2       	ldi	r17, 0x28	; 40
    10ba:	2a 81       	ldd	r18, Y+2	; 0x02
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	32 2f       	mov	r19, r18
    10c0:	22 27       	eor	r18, r18
    10c2:	a9 01       	movw	r20, r18
    10c4:	48 0f       	add	r20, r24
    10c6:	51 1d       	adc	r21, r1
    10c8:	f8 01       	movw	r30, r16
    10ca:	40 83       	st	Z, r20
    10cc:	51 83       	std	Z+1, r21	; 0x01
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    10d4:	f8 01       	movw	r30, r16
    10d6:	82 83       	std	Z+2, r24	; 0x02
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    10de:	f8 01       	movw	r30, r16
    10e0:	83 83       	std	Z+3, r24	; 0x03
    10e2:	88 23       	and	r24, r24
    10e4:	21 f0       	breq	.+8      	; 0x10ee <_Z14ReadSubProgramj+0xc6>
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <_Z14ReadSubProgramj+0xc4>
    10ea:	58 c1       	rjmp	.+688    	; 0x139c <_Z14ReadSubProgramj+0x374>
    10ec:	73 c2       	rjmp	.+1254   	; 0x15d4 <_Z14ReadSubProgramj+0x5ac>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    10f4:	80 93 56 28 	sts	0x2856, r24	; 0x802856 <CMDPRGlist+0x4>
    10f8:	88 23       	and	r24, r24
    10fa:	09 f4       	brne	.+2      	; 0x10fe <_Z14ReadSubProgramj+0xd6>
    10fc:	5f c2       	rjmp	.+1214   	; 0x15bc <_Z14ReadSubProgramj+0x594>
    10fe:	8e 01       	movw	r16, r28
    1100:	0b 5f       	subi	r16, 0xFB	; 251
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	ae 01       	movw	r20, r28
    1106:	4f 5f       	subi	r20, 0xFF	; 255
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	6a 01       	movw	r12, r20
    110c:	78 01       	movw	r14, r16
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1114:	f7 01       	movw	r30, r14
    1116:	82 93       	st	-Z, r24
    1118:	7f 01       	movw	r14, r30
    111a:	ec 15       	cp	r30, r12
    111c:	fd 05       	cpc	r31, r13
    111e:	b9 f7       	brne	.-18     	; 0x110e <_Z14ReadSubProgramj+0xe6>
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1128:	e2 e5       	ldi	r30, 0x52	; 82
    112a:	f8 e2       	ldi	r31, 0x28	; 40
    112c:	65 83       	std	Z+5, r22	; 0x05
    112e:	76 83       	std	Z+6, r23	; 0x06
    1130:	87 83       	std	Z+7, r24	; 0x07
    1132:	90 87       	std	Z+8, r25	; 0x08
    1134:	84 81       	ldd	r24, Z+4	; 0x04
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	08 f4       	brcc	.+2      	; 0x113c <_Z14ReadSubProgramj+0x114>
    113a:	19 c2       	rjmp	.+1074   	; 0x156e <_Z14ReadSubProgramj+0x546>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1142:	f8 01       	movw	r30, r16
    1144:	82 93       	st	-Z, r24
    1146:	8f 01       	movw	r16, r30
    1148:	ec 15       	cp	r30, r12
    114a:	fd 05       	cpc	r31, r13
    114c:	b9 f7       	brne	.-18     	; 0x113c <_Z14ReadSubProgramj+0x114>
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1156:	e2 e5       	ldi	r30, 0x52	; 82
    1158:	f8 e2       	ldi	r31, 0x28	; 40
    115a:	61 87       	std	Z+9, r22	; 0x09
    115c:	72 87       	std	Z+10, r23	; 0x0a
    115e:	83 87       	std	Z+11, r24	; 0x0b
    1160:	94 87       	std	Z+12, r25	; 0x0c
    1162:	84 81       	ldd	r24, Z+4	; 0x04
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	08 f4       	brcc	.+2      	; 0x116a <_Z14ReadSubProgramj+0x142>
    1168:	06 c2       	rjmp	.+1036   	; 0x1576 <_Z14ReadSubProgramj+0x54e>
    116a:	8e 01       	movw	r16, r28
    116c:	0b 5f       	subi	r16, 0xFB	; 251
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	ae 01       	movw	r20, r28
    1172:	4f 5f       	subi	r20, 0xFF	; 255
    1174:	5f 4f       	sbci	r21, 0xFF	; 255
    1176:	7a 01       	movw	r14, r20
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    117e:	f8 01       	movw	r30, r16
    1180:	82 93       	st	-Z, r24
    1182:	8f 01       	movw	r16, r30
    1184:	ee 15       	cp	r30, r14
    1186:	ff 05       	cpc	r31, r15
    1188:	b9 f7       	brne	.-18     	; 0x1178 <_Z14ReadSubProgramj+0x150>
    118a:	ce 01       	movw	r24, r28
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1192:	60 93 5f 28 	sts	0x285F, r22	; 0x80285f <CMDPRGlist+0xd>
    1196:	70 93 60 28 	sts	0x2860, r23	; 0x802860 <CMDPRGlist+0xe>
    119a:	80 93 61 28 	sts	0x2861, r24	; 0x802861 <CMDPRGlist+0xf>
    119e:	90 93 62 28 	sts	0x2862, r25	; 0x802862 <CMDPRGlist+0x10>
    11a2:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    11a6:	88 23       	and	r24, r24
    11a8:	09 f4       	brne	.+2      	; 0x11ac <_Z14ReadSubProgramj+0x184>
    11aa:	57 c0       	rjmp	.+174    	; 0x125a <_Z14ReadSubProgramj+0x232>
    11ac:	8e 01       	movw	r16, r28
    11ae:	0b 5f       	subi	r16, 0xFB	; 251
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	ae 01       	movw	r20, r28
    11b4:	4f 5f       	subi	r20, 0xFF	; 255
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	7a 01       	movw	r14, r20
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    11c0:	f8 01       	movw	r30, r16
    11c2:	82 93       	st	-Z, r24
    11c4:	8f 01       	movw	r16, r30
    11c6:	ee 16       	cp	r14, r30
    11c8:	ff 06       	cpc	r15, r31
    11ca:	b9 f7       	brne	.-18     	; 0x11ba <_Z14ReadSubProgramj+0x192>
    11cc:	ce 01       	movw	r24, r28
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    11d4:	e2 e5       	ldi	r30, 0x52	; 82
    11d6:	f8 e2       	ldi	r31, 0x28	; 40
    11d8:	64 8b       	std	Z+20, r22	; 0x14
    11da:	75 8b       	std	Z+21, r23	; 0x15
    11dc:	86 8b       	std	Z+22, r24	; 0x16
    11de:	97 8b       	std	Z+23, r25	; 0x17
    11e0:	84 81       	ldd	r24, Z+4	; 0x04
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <_Z14ReadSubProgramj+0x1c0>
    11e6:	ca c1       	rjmp	.+916    	; 0x157c <_Z14ReadSubProgramj+0x554>
    11e8:	8e 01       	movw	r16, r28
    11ea:	0b 5f       	subi	r16, 0xFB	; 251
    11ec:	1f 4f       	sbci	r17, 0xFF	; 255
    11ee:	ae 01       	movw	r20, r28
    11f0:	4f 5f       	subi	r20, 0xFF	; 255
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	7a 01       	movw	r14, r20
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    11fc:	f8 01       	movw	r30, r16
    11fe:	82 93       	st	-Z, r24
    1200:	8f 01       	movw	r16, r30
    1202:	ee 16       	cp	r14, r30
    1204:	ff 06       	cpc	r15, r31
    1206:	b9 f7       	brne	.-18     	; 0x11f6 <_Z14ReadSubProgramj+0x1ce>
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1210:	e2 e5       	ldi	r30, 0x52	; 82
    1212:	f8 e2       	ldi	r31, 0x28	; 40
    1214:	60 8f       	std	Z+24, r22	; 0x18
    1216:	71 8f       	std	Z+25, r23	; 0x19
    1218:	82 8f       	std	Z+26, r24	; 0x1a
    121a:	93 8f       	std	Z+27, r25	; 0x1b
    121c:	84 81       	ldd	r24, Z+4	; 0x04
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	e0 f0       	brcs	.+56     	; 0x125a <_Z14ReadSubProgramj+0x232>
    1222:	8e 01       	movw	r16, r28
    1224:	0b 5f       	subi	r16, 0xFB	; 251
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	ae 01       	movw	r20, r28
    122a:	4f 5f       	subi	r20, 0xFF	; 255
    122c:	5f 4f       	sbci	r21, 0xFF	; 255
    122e:	7a 01       	movw	r14, r20
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1236:	f8 01       	movw	r30, r16
    1238:	82 93       	st	-Z, r24
    123a:	8f 01       	movw	r16, r30
    123c:	ee 15       	cp	r30, r14
    123e:	ff 05       	cpc	r31, r15
    1240:	b9 f7       	brne	.-18     	; 0x1230 <_Z14ReadSubProgramj+0x208>
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    124a:	60 93 6e 28 	sts	0x286E, r22	; 0x80286e <CMDPRGlist+0x1c>
    124e:	70 93 6f 28 	sts	0x286F, r23	; 0x80286f <CMDPRGlist+0x1d>
    1252:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <CMDPRGlist+0x1e>
    1256:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <CMDPRGlist+0x1f>
    125a:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <_Z14ReadSubProgramj+0x23c>
    1262:	90 c1       	rjmp	.+800    	; 0x1584 <_Z14ReadSubProgramj+0x55c>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    126a:	e2 e5       	ldi	r30, 0x52	; 82
    126c:	f8 e2       	ldi	r31, 0x28	; 40
    126e:	81 8b       	std	Z+17, r24	; 0x11
    1270:	84 81       	ldd	r24, Z+4	; 0x04
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	28 f0       	brcs	.+10     	; 0x1280 <_Z14ReadSubProgramj+0x258>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    127c:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <CMDPRGlist+0x12>
    1280:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	08 f4       	brcc	.+2      	; 0x128a <_Z14ReadSubProgramj+0x262>
    1288:	7d c1       	rjmp	.+762    	; 0x1584 <_Z14ReadSubProgramj+0x55c>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1290:	80 93 65 28 	sts	0x2865, r24	; 0x802865 <CMDPRGlist+0x13>
    1294:	77 c1       	rjmp	.+750    	; 0x1584 <_Z14ReadSubProgramj+0x55c>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    129c:	f6 01       	movw	r30, r12
    129e:	82 93       	st	-Z, r24
    12a0:	6f 01       	movw	r12, r30
    12a2:	0e 17       	cp	r16, r30
    12a4:	1f 07       	cpc	r17, r31
    12a6:	b9 f7       	brne	.-18     	; 0x1296 <_Z14ReadSubProgramj+0x26e>
    12a8:	ce 01       	movw	r24, r28
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    12b0:	60 93 72 28 	sts	0x2872, r22	; 0x802872 <CMDPRGlist+0x20>
    12b4:	70 93 73 28 	sts	0x2873, r23	; 0x802873 <CMDPRGlist+0x21>
    12b8:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <CMDPRGlist+0x22>
    12bc:	90 93 75 28 	sts	0x2875, r25	; 0x802875 <CMDPRGlist+0x23>
    12c0:	67 01       	movw	r12, r14
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    12c8:	f6 01       	movw	r30, r12
    12ca:	82 93       	st	-Z, r24
    12cc:	6f 01       	movw	r12, r30
    12ce:	0e 17       	cp	r16, r30
    12d0:	1f 07       	cpc	r17, r31
    12d2:	b9 f7       	brne	.-18     	; 0x12c2 <_Z14ReadSubProgramj+0x29a>
    12d4:	ce 01       	movw	r24, r28
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    12dc:	60 93 76 28 	sts	0x2876, r22	; 0x802876 <CMDPRGlist+0x24>
    12e0:	70 93 77 28 	sts	0x2877, r23	; 0x802877 <CMDPRGlist+0x25>
    12e4:	80 93 78 28 	sts	0x2878, r24	; 0x802878 <CMDPRGlist+0x26>
    12e8:	90 93 79 28 	sts	0x2879, r25	; 0x802879 <CMDPRGlist+0x27>
    12ec:	67 01       	movw	r12, r14
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    12f4:	f6 01       	movw	r30, r12
    12f6:	82 93       	st	-Z, r24
    12f8:	6f 01       	movw	r12, r30
    12fa:	0e 17       	cp	r16, r30
    12fc:	1f 07       	cpc	r17, r31
    12fe:	b9 f7       	brne	.-18     	; 0x12ee <_Z14ReadSubProgramj+0x2c6>
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1308:	60 93 7a 28 	sts	0x287A, r22	; 0x80287a <CMDPRGlist+0x28>
    130c:	70 93 7b 28 	sts	0x287B, r23	; 0x80287b <CMDPRGlist+0x29>
    1310:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <CMDPRGlist+0x2a>
    1314:	90 93 7d 28 	sts	0x287D, r25	; 0x80287d <CMDPRGlist+0x2b>
    1318:	67 01       	movw	r12, r14
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1320:	f6 01       	movw	r30, r12
    1322:	82 93       	st	-Z, r24
    1324:	6f 01       	movw	r12, r30
    1326:	0e 17       	cp	r16, r30
    1328:	1f 07       	cpc	r17, r31
    132a:	b9 f7       	brne	.-18     	; 0x131a <_Z14ReadSubProgramj+0x2f2>
    132c:	ce 01       	movw	r24, r28
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1334:	60 93 7e 28 	sts	0x287E, r22	; 0x80287e <CMDPRGlist+0x2c>
    1338:	70 93 7f 28 	sts	0x287F, r23	; 0x80287f <CMDPRGlist+0x2d>
    133c:	80 93 80 28 	sts	0x2880, r24	; 0x802880 <CMDPRGlist+0x2e>
    1340:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <CMDPRGlist+0x2f>
    1344:	67 01       	movw	r12, r14
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    134c:	f6 01       	movw	r30, r12
    134e:	82 93       	st	-Z, r24
    1350:	6f 01       	movw	r12, r30
    1352:	e0 17       	cp	r30, r16
    1354:	f1 07       	cpc	r31, r17
    1356:	b9 f7       	brne	.-18     	; 0x1346 <_Z14ReadSubProgramj+0x31e>
    1358:	ce 01       	movw	r24, r28
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1360:	60 93 82 28 	sts	0x2882, r22	; 0x802882 <CMDPRGlist+0x30>
    1364:	70 93 83 28 	sts	0x2883, r23	; 0x802883 <CMDPRGlist+0x31>
    1368:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <CMDPRGlist+0x32>
    136c:	90 93 85 28 	sts	0x2885, r25	; 0x802885 <CMDPRGlist+0x33>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1376:	f7 01       	movw	r30, r14
    1378:	82 93       	st	-Z, r24
    137a:	7f 01       	movw	r14, r30
    137c:	0e 17       	cp	r16, r30
    137e:	1f 07       	cpc	r17, r31
    1380:	b9 f7       	brne	.-18     	; 0x1370 <_Z14ReadSubProgramj+0x348>
    1382:	ce 01       	movw	r24, r28
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    138a:	60 93 86 28 	sts	0x2886, r22	; 0x802886 <CMDPRGlist+0x34>
    138e:	70 93 87 28 	sts	0x2887, r23	; 0x802887 <CMDPRGlist+0x35>
    1392:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <CMDPRGlist+0x36>
    1396:	90 93 89 28 	sts	0x2889, r25	; 0x802889 <CMDPRGlist+0x37>
    139a:	1c c1       	rjmp	.+568    	; 0x15d4 <_Z14ReadSubProgramj+0x5ac>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    13a2:	80 93 56 28 	sts	0x2856, r24	; 0x802856 <CMDPRGlist+0x4>
    13a6:	88 23       	and	r24, r24
    13a8:	09 f4       	brne	.+2      	; 0x13ac <_Z14ReadSubProgramj+0x384>
    13aa:	0e c1       	rjmp	.+540    	; 0x15c8 <_Z14ReadSubProgramj+0x5a0>
    13ac:	8e 01       	movw	r16, r28
    13ae:	0b 5f       	subi	r16, 0xFB	; 251
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	ae 01       	movw	r20, r28
    13b4:	4f 5f       	subi	r20, 0xFF	; 255
    13b6:	5f 4f       	sbci	r21, 0xFF	; 255
    13b8:	6a 01       	movw	r12, r20
    13ba:	78 01       	movw	r14, r16
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    13c2:	f7 01       	movw	r30, r14
    13c4:	82 93       	st	-Z, r24
    13c6:	7f 01       	movw	r14, r30
    13c8:	ec 15       	cp	r30, r12
    13ca:	fd 05       	cpc	r31, r13
    13cc:	b9 f7       	brne	.-18     	; 0x13bc <_Z14ReadSubProgramj+0x394>
    13ce:	ce 01       	movw	r24, r28
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    13d6:	e2 e5       	ldi	r30, 0x52	; 82
    13d8:	f8 e2       	ldi	r31, 0x28	; 40
    13da:	65 83       	std	Z+5, r22	; 0x05
    13dc:	76 83       	std	Z+6, r23	; 0x06
    13de:	87 83       	std	Z+7, r24	; 0x07
    13e0:	90 87       	std	Z+8, r25	; 0x08
    13e2:	84 81       	ldd	r24, Z+4	; 0x04
    13e4:	82 30       	cpi	r24, 0x02	; 2
    13e6:	08 f4       	brcc	.+2      	; 0x13ea <_Z14ReadSubProgramj+0x3c2>
    13e8:	d6 c0       	rjmp	.+428    	; 0x1596 <_Z14ReadSubProgramj+0x56e>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    13f0:	f8 01       	movw	r30, r16
    13f2:	82 93       	st	-Z, r24
    13f4:	8f 01       	movw	r16, r30
    13f6:	ec 15       	cp	r30, r12
    13f8:	fd 05       	cpc	r31, r13
    13fa:	b9 f7       	brne	.-18     	; 0x13ea <_Z14ReadSubProgramj+0x3c2>
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1404:	e2 e5       	ldi	r30, 0x52	; 82
    1406:	f8 e2       	ldi	r31, 0x28	; 40
    1408:	61 87       	std	Z+9, r22	; 0x09
    140a:	72 87       	std	Z+10, r23	; 0x0a
    140c:	83 87       	std	Z+11, r24	; 0x0b
    140e:	94 87       	std	Z+12, r25	; 0x0c
    1410:	84 81       	ldd	r24, Z+4	; 0x04
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	08 f4       	brcc	.+2      	; 0x1418 <_Z14ReadSubProgramj+0x3f0>
    1416:	c3 c0       	rjmp	.+390    	; 0x159e <_Z14ReadSubProgramj+0x576>
    1418:	8e 01       	movw	r16, r28
    141a:	0b 5f       	subi	r16, 0xFB	; 251
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	ae 01       	movw	r20, r28
    1420:	4f 5f       	subi	r20, 0xFF	; 255
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	7a 01       	movw	r14, r20
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    142c:	f8 01       	movw	r30, r16
    142e:	82 93       	st	-Z, r24
    1430:	8f 01       	movw	r16, r30
    1432:	ee 16       	cp	r14, r30
    1434:	ff 06       	cpc	r15, r31
    1436:	b9 f7       	brne	.-18     	; 0x1426 <_Z14ReadSubProgramj+0x3fe>
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1440:	60 93 5f 28 	sts	0x285F, r22	; 0x80285f <CMDPRGlist+0xd>
    1444:	70 93 60 28 	sts	0x2860, r23	; 0x802860 <CMDPRGlist+0xe>
    1448:	80 93 61 28 	sts	0x2861, r24	; 0x802861 <CMDPRGlist+0xf>
    144c:	90 93 62 28 	sts	0x2862, r25	; 0x802862 <CMDPRGlist+0x10>
    1450:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    1454:	88 23       	and	r24, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <_Z14ReadSubProgramj+0x432>
    1458:	57 c0       	rjmp	.+174    	; 0x1508 <_Z14ReadSubProgramj+0x4e0>
    145a:	8e 01       	movw	r16, r28
    145c:	0b 5f       	subi	r16, 0xFB	; 251
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	ae 01       	movw	r20, r28
    1462:	4f 5f       	subi	r20, 0xFF	; 255
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	7a 01       	movw	r14, r20
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    146e:	f8 01       	movw	r30, r16
    1470:	82 93       	st	-Z, r24
    1472:	8f 01       	movw	r16, r30
    1474:	ee 16       	cp	r14, r30
    1476:	ff 06       	cpc	r15, r31
    1478:	b9 f7       	brne	.-18     	; 0x1468 <_Z14ReadSubProgramj+0x440>
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    1482:	e2 e5       	ldi	r30, 0x52	; 82
    1484:	f8 e2       	ldi	r31, 0x28	; 40
    1486:	64 8b       	std	Z+20, r22	; 0x14
    1488:	75 8b       	std	Z+21, r23	; 0x15
    148a:	86 8b       	std	Z+22, r24	; 0x16
    148c:	97 8b       	std	Z+23, r25	; 0x17
    148e:	84 81       	ldd	r24, Z+4	; 0x04
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	08 f4       	brcc	.+2      	; 0x1496 <_Z14ReadSubProgramj+0x46e>
    1494:	87 c0       	rjmp	.+270    	; 0x15a4 <_Z14ReadSubProgramj+0x57c>
    1496:	8e 01       	movw	r16, r28
    1498:	0b 5f       	subi	r16, 0xFB	; 251
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	ae 01       	movw	r20, r28
    149e:	4f 5f       	subi	r20, 0xFF	; 255
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	7a 01       	movw	r14, r20
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    14aa:	f8 01       	movw	r30, r16
    14ac:	82 93       	st	-Z, r24
    14ae:	8f 01       	movw	r16, r30
    14b0:	ee 15       	cp	r30, r14
    14b2:	ff 05       	cpc	r31, r15
    14b4:	b9 f7       	brne	.-18     	; 0x14a4 <_Z14ReadSubProgramj+0x47c>
    14b6:	ce 01       	movw	r24, r28
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    14be:	e2 e5       	ldi	r30, 0x52	; 82
    14c0:	f8 e2       	ldi	r31, 0x28	; 40
    14c2:	60 8f       	std	Z+24, r22	; 0x18
    14c4:	71 8f       	std	Z+25, r23	; 0x19
    14c6:	82 8f       	std	Z+26, r24	; 0x1a
    14c8:	93 8f       	std	Z+27, r25	; 0x1b
    14ca:	84 81       	ldd	r24, Z+4	; 0x04
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	e0 f0       	brcs	.+56     	; 0x1508 <_Z14ReadSubProgramj+0x4e0>
    14d0:	8e 01       	movw	r16, r28
    14d2:	0b 5f       	subi	r16, 0xFB	; 251
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	ae 01       	movw	r20, r28
    14d8:	4f 5f       	subi	r20, 0xFF	; 255
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    14dc:	7a 01       	movw	r14, r20
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    14e4:	f8 01       	movw	r30, r16
    14e6:	82 93       	st	-Z, r24
    14e8:	8f 01       	movw	r16, r30
    14ea:	ee 15       	cp	r30, r14
    14ec:	ff 05       	cpc	r31, r15
    14ee:	b9 f7       	brne	.-18     	; 0x14de <_Z14ReadSubProgramj+0x4b6>
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    14f8:	60 93 6e 28 	sts	0x286E, r22	; 0x80286e <CMDPRGlist+0x1c>
    14fc:	70 93 6f 28 	sts	0x286F, r23	; 0x80286f <CMDPRGlist+0x1d>
    1500:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <CMDPRGlist+0x1e>
    1504:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <CMDPRGlist+0x1f>
    1508:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    150c:	88 23       	and	r24, r24
    150e:	09 f4       	brne	.+2      	; 0x1512 <_Z14ReadSubProgramj+0x4ea>
    1510:	4d c0       	rjmp	.+154    	; 0x15ac <_Z14ReadSubProgramj+0x584>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1518:	e2 e5       	ldi	r30, 0x52	; 82
    151a:	f8 e2       	ldi	r31, 0x28	; 40
    151c:	81 8b       	std	Z+17, r24	; 0x11
    151e:	84 81       	ldd	r24, Z+4	; 0x04
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	28 f0       	brcs	.+10     	; 0x152e <_Z14ReadSubProgramj+0x506>
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    152a:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <CMDPRGlist+0x12>
    152e:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	d8 f1       	brcs	.+118    	; 0x15ac <_Z14ReadSubProgramj+0x584>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    153c:	80 93 65 28 	sts	0x2865, r24	; 0x802865 <CMDPRGlist+0x13>
    1540:	35 c0       	rjmp	.+106    	; 0x15ac <_Z14ReadSubProgramj+0x584>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1548:	f8 01       	movw	r30, r16
    154a:	82 93       	st	-Z, r24
    154c:	8f 01       	movw	r16, r30
    154e:	ee 16       	cp	r14, r30
    1550:	ff 06       	cpc	r15, r31
    1552:	b9 f7       	brne	.-18     	; 0x1542 <_Z14ReadSubProgramj+0x51a>
    1554:	ce 01       	movw	r24, r28
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z4btolPc>
    155c:	60 93 72 28 	sts	0x2872, r22	; 0x802872 <CMDPRGlist+0x20>
    1560:	70 93 73 28 	sts	0x2873, r23	; 0x802873 <CMDPRGlist+0x21>
    1564:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <CMDPRGlist+0x22>
    1568:	90 93 75 28 	sts	0x2875, r25	; 0x802875 <CMDPRGlist+0x23>
    156c:	33 c0       	rjmp	.+102    	; 0x15d4 <_Z14ReadSubProgramj+0x5ac>
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	08 f0       	brcs	.+2      	; 0x1574 <_Z14ReadSubProgramj+0x54c>
    1572:	fb cd       	rjmp	.-1034   	; 0x116a <_Z14ReadSubProgramj+0x142>
    1574:	16 ce       	rjmp	.-980    	; 0x11a2 <_Z14ReadSubProgramj+0x17a>
    1576:	81 11       	cpse	r24, r1
    1578:	19 ce       	rjmp	.-974    	; 0x11ac <_Z14ReadSubProgramj+0x184>
    157a:	23 c0       	rjmp	.+70     	; 0x15c2 <_Z14ReadSubProgramj+0x59a>
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	08 f4       	brcc	.+2      	; 0x1582 <_Z14ReadSubProgramj+0x55a>
    1580:	6c ce       	rjmp	.-808    	; 0x125a <_Z14ReadSubProgramj+0x232>
    1582:	4f ce       	rjmp	.-866    	; 0x1222 <_Z14ReadSubProgramj+0x1fa>
    1584:	7e 01       	movw	r14, r28
    1586:	f5 e0       	ldi	r31, 0x05	; 5
    1588:	ef 0e       	add	r14, r31
    158a:	f1 1c       	adc	r15, r1
    158c:	8e 01       	movw	r16, r28
    158e:	0f 5f       	subi	r16, 0xFF	; 255
    1590:	1f 4f       	sbci	r17, 0xFF	; 255
    1592:	67 01       	movw	r12, r14
    1594:	80 ce       	rjmp	.-768    	; 0x1296 <_Z14ReadSubProgramj+0x26e>
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	08 f0       	brcs	.+2      	; 0x159c <_Z14ReadSubProgramj+0x574>
    159a:	3e cf       	rjmp	.-388    	; 0x1418 <_Z14ReadSubProgramj+0x3f0>
    159c:	59 cf       	rjmp	.-334    	; 0x1450 <_Z14ReadSubProgramj+0x428>
    159e:	81 11       	cpse	r24, r1
    15a0:	5c cf       	rjmp	.-328    	; 0x145a <_Z14ReadSubProgramj+0x432>
    15a2:	15 c0       	rjmp	.+42     	; 0x15ce <_Z14ReadSubProgramj+0x5a6>
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <_Z14ReadSubProgramj+0x582>
    15a8:	af cf       	rjmp	.-162    	; 0x1508 <_Z14ReadSubProgramj+0x4e0>
    15aa:	92 cf       	rjmp	.-220    	; 0x14d0 <_Z14ReadSubProgramj+0x4a8>
    15ac:	8e 01       	movw	r16, r28
    15ae:	0b 5f       	subi	r16, 0xFB	; 251
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	ae 01       	movw	r20, r28
    15b4:	4f 5f       	subi	r20, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	7a 01       	movw	r14, r20
    15ba:	c3 cf       	rjmp	.-122    	; 0x1542 <_Z14ReadSubProgramj+0x51a>
    15bc:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    15c0:	da cf       	rjmp	.-76     	; 0x1576 <_Z14ReadSubProgramj+0x54e>
    15c2:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    15c6:	da cf       	rjmp	.-76     	; 0x157c <_Z14ReadSubProgramj+0x554>
    15c8:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    15cc:	e8 cf       	rjmp	.-48     	; 0x159e <_Z14ReadSubProgramj+0x576>
    15ce:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <CMDPRGlist+0x4>
    15d2:	e8 cf       	rjmp	.-48     	; 0x15a4 <_Z14ReadSubProgramj+0x57c>
    15d4:	24 96       	adiw	r28, 0x04	; 4
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	08 95       	ret

000015ec <_Z11WriteSeriall>:
    15ec:	7f 92       	push	r7
    15ee:	8f 92       	push	r8
    15f0:	9f 92       	push	r9
    15f2:	af 92       	push	r10
    15f4:	bf 92       	push	r11
    15f6:	cf 92       	push	r12
    15f8:	df 92       	push	r13
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	00 d0       	rcall	.+0      	; 0x1608 <_Z11WriteSeriall+0x1c>
    1608:	1f 92       	push	r1
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	4b 01       	movw	r8, r22
    1610:	5c 01       	movw	r10, r24
    1612:	87 ee       	ldi	r24, 0xE7	; 231
    1614:	93 e0       	ldi	r25, 0x03	; 3
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <fk>
    161e:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <fk+0x1>
    1622:	a0 93 9c 28 	sts	0x289C, r26	; 0x80289c <fk+0x2>
    1626:	b0 93 9d 28 	sts	0x289D, r27	; 0x80289d <fk+0x3>
    162a:	8e ec       	ldi	r24, 0xCE	; 206
    162c:	97 e0       	ldi	r25, 0x07	; 7
    162e:	80 93 98 28 	sts	0x2898, r24	; 0x802898 <ft>
    1632:	90 93 99 28 	sts	0x2899, r25	; 0x802899 <ft+0x1>
    1636:	8e ec       	ldi	r24, 0xCE	; 206
    1638:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <fadd1>
    163c:	87 e0       	ldi	r24, 0x07	; 7
    163e:	80 93 96 28 	sts	0x2896, r24	; 0x802896 <fadd2>
    1642:	00 e8       	ldi	r16, 0x80	; 128
    1644:	16 e0       	ldi	r17, 0x06	; 6
    1646:	f8 01       	movw	r30, r16
    1648:	84 81       	ldd	r24, Z+4	; 0x04
    164a:	80 61       	ori	r24, 0x10	; 16
    164c:	84 83       	std	Z+4, r24	; 0x04
    164e:	84 81       	ldd	r24, Z+4	; 0x04
    1650:	8f 7e       	andi	r24, 0xEF	; 239
    1652:	84 83       	std	Z+4, r24	; 0x04
    1654:	81 e8       	ldi	r24, 0x81	; 129
    1656:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    165a:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <fadd2>
    165e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1662:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <fadd1>
    1666:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1670:	f8 01       	movw	r30, r16
    1672:	84 81       	ldd	r24, Z+4	; 0x04
    1674:	80 61       	ori	r24, 0x10	; 16
    1676:	84 83       	std	Z+4, r24	; 0x04
    1678:	0f 2e       	mov	r0, r31
    167a:	f0 ee       	ldi	r31, 0xE0	; 224
    167c:	ef 2e       	mov	r14, r31
    167e:	f7 e0       	ldi	r31, 0x07	; 7
    1680:	ff 2e       	mov	r15, r31
    1682:	f0 2d       	mov	r31, r0
    1684:	0f 2e       	mov	r0, r31
    1686:	f2 eb       	ldi	r31, 0xB2	; 178
    1688:	cf 2e       	mov	r12, r31
    168a:	f0 e2       	ldi	r31, 0x20	; 32
    168c:	df 2e       	mov	r13, r31
    168e:	f0 2d       	mov	r31, r0
    1690:	f8 01       	movw	r30, r16
    1692:	84 81       	ldd	r24, Z+4	; 0x04
    1694:	8f 7e       	andi	r24, 0xEF	; 239
    1696:	84 83       	std	Z+4, r24	; 0x04
    1698:	f7 01       	movw	r30, r14
    169a:	84 81       	ldd	r24, Z+4	; 0x04
    169c:	80 ff       	sbrs	r24, 0
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <_Z11WriteSeriall+0xba>
    16a0:	84 81       	ldd	r24, Z+4	; 0x04
    16a2:	84 83       	std	Z+4, r24	; 0x04
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <_Z11WriteSeriall+0xc2>
    16a6:	f7 01       	movw	r30, r14
    16a8:	84 81       	ldd	r24, Z+4	; 0x04
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	84 83       	std	Z+4, r24	; 0x04
    16ae:	87 ed       	ldi	r24, 0xD7	; 215
    16b0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    16ba:	78 2e       	mov	r7, r24
    16bc:	1f 92       	push	r1
    16be:	8f 93       	push	r24
    16c0:	df 92       	push	r13
    16c2:	cf 92       	push	r12
    16c4:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    16c8:	f8 01       	movw	r30, r16
    16ca:	84 81       	ldd	r24, Z+4	; 0x04
    16cc:	80 61       	ori	r24, 0x10	; 16
    16ce:	84 83       	std	Z+4, r24	; 0x04
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	77 20       	and	r7, r7
    16da:	d4 f6       	brge	.-76     	; 0x1690 <_Z11WriteSeriall+0xa4>
    16dc:	e0 e8       	ldi	r30, 0x80	; 128
    16de:	f6 e0       	ldi	r31, 0x06	; 6
    16e0:	84 81       	ldd	r24, Z+4	; 0x04
    16e2:	8f 7e       	andi	r24, 0xEF	; 239
    16e4:	84 83       	std	Z+4, r24	; 0x04
    16e6:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7007e4>
    16ea:	81 ff       	sbrs	r24, 1
    16ec:	06 c0       	rjmp	.+12     	; 0x16fa <_Z11WriteSeriall+0x10e>
    16ee:	e0 ee       	ldi	r30, 0xE0	; 224
    16f0:	f7 e0       	ldi	r31, 0x07	; 7
    16f2:	84 81       	ldd	r24, Z+4	; 0x04
    16f4:	8e 7f       	andi	r24, 0xFE	; 254
    16f6:	84 83       	std	Z+4, r24	; 0x04
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <_Z11WriteSeriall+0x118>
    16fa:	e0 ee       	ldi	r30, 0xE0	; 224
    16fc:	f7 e0       	ldi	r31, 0x07	; 7
    16fe:	84 81       	ldd	r24, Z+4	; 0x04
    1700:	82 60       	ori	r24, 0x02	; 2
    1702:	84 83       	std	Z+4, r24	; 0x04
    1704:	84 e8       	ldi	r24, 0x84	; 132
    1706:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    170a:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <fadd2>
    170e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1712:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <fadd1>
    1716:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1720:	ae 01       	movw	r20, r28
    1722:	4f 5f       	subi	r20, 0xFF	; 255
    1724:	5f 4f       	sbci	r21, 0xFF	; 255
    1726:	c5 01       	movw	r24, r10
    1728:	b4 01       	movw	r22, r8
    172a:	0e 94 b0 02 	call	0x560	; 0x560 <_Z4ltoblPc>
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	1f 92       	push	r1
    1732:	8f 93       	push	r24
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	1f 92       	push	r1
    1738:	8f 93       	push	r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	1f 92       	push	r1
    173e:	8f 93       	push	r24
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	1f 92       	push	r1
    1744:	8f 93       	push	r24
    1746:	8f eb       	ldi	r24, 0xBF	; 191
    1748:	90 e2       	ldi	r25, 0x20	; 32
    174a:	9f 93       	push	r25
    174c:	8f 93       	push	r24
    174e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    176a:	00 e8       	ldi	r16, 0x80	; 128
    176c:	16 e0       	ldi	r17, 0x06	; 6
    176e:	f8 01       	movw	r30, r16
    1770:	84 81       	ldd	r24, Z+4	; 0x04
    1772:	80 61       	ori	r24, 0x10	; 16
    1774:	84 83       	std	Z+4, r24	; 0x04
    1776:	84 81       	ldd	r24, Z+4	; 0x04
    1778:	8f 7e       	andi	r24, 0xEF	; 239
    177a:	84 83       	std	Z+4, r24	; 0x04
    177c:	83 e8       	ldi	r24, 0x83	; 131
    177e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1782:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <fadd2>
    1786:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    178a:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <fadd1>
    178e:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z17spie_master_tx_rxh>
    1798:	f8 01       	movw	r30, r16
    179a:	84 81       	ldd	r24, Z+4	; 0x04
    179c:	80 61       	ori	r24, 0x10	; 16
    179e:	84 83       	std	Z+4, r24	; 0x04
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	24 96       	adiw	r28, 0x04	; 4
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	9f 90       	pop	r9
    17c0:	8f 90       	pop	r8
    17c2:	7f 90       	pop	r7
    17c4:	08 95       	ret

000017c6 <_Z9tcc0_initv>:
    17c6:	2f b7       	in	r18, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	e0 e0       	ldi	r30, 0x00	; 0
    17cc:	f8 e0       	ldi	r31, 0x08	; 8
    17ce:	10 82       	st	Z, r1
    17d0:	8c e0       	ldi	r24, 0x0C	; 12
    17d2:	81 87       	std	Z+9, r24	; 0x09
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	80 83       	st	Z, r24
    17d8:	81 83       	std	Z+1, r24	; 0x01
    17da:	13 82       	std	Z+3, r1	; 0x03
    17dc:	14 82       	std	Z+4, r1	; 0x04
    17de:	16 82       	std	Z+6, r1	; 0x06
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	87 83       	std	Z+7, r24	; 0x07
    17e4:	a0 e9       	ldi	r26, 0x90	; 144
    17e6:	b8 e0       	ldi	r27, 0x08	; 8
    17e8:	8c 91       	ld	r24, X
    17ea:	8e 7f       	andi	r24, 0xFE	; 254
    17ec:	8c 93       	st	X, r24
    17ee:	a0 e9       	ldi	r26, 0x90	; 144
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	19 96       	adiw	r26, 0x09	; 9
    17f4:	8c 91       	ld	r24, X
    17f6:	19 97       	sbiw	r26, 0x09	; 9
    17f8:	8e 7f       	andi	r24, 0xFE	; 254
    17fa:	98 ed       	ldi	r25, 0xD8	; 216
    17fc:	94 bf       	out	0x34, r25	; 52
    17fe:	19 96       	adiw	r26, 0x09	; 9
    1800:	8c 93       	st	X, r24
    1802:	a0 e8       	ldi	r26, 0x80	; 128
    1804:	b8 e0       	ldi	r27, 0x08	; 8
    1806:	1c 92       	st	X, r1
    1808:	18 96       	adiw	r26, 0x08	; 8
    180a:	1c 92       	st	X, r1
    180c:	18 97       	sbiw	r26, 0x08	; 8
    180e:	19 96       	adiw	r26, 0x09	; 9
    1810:	1c 92       	st	X, r1
    1812:	19 97       	sbiw	r26, 0x09	; 9
    1814:	1c 96       	adiw	r26, 0x0c	; 12
    1816:	1c 92       	st	X, r1
    1818:	1c 97       	sbiw	r26, 0x0c	; 12
    181a:	13 96       	adiw	r26, 0x03	; 3
    181c:	8c 91       	ld	r24, X
    181e:	13 97       	sbiw	r26, 0x03	; 3
    1820:	88 7e       	andi	r24, 0xE8	; 232
    1822:	13 96       	adiw	r26, 0x03	; 3
    1824:	8c 93       	st	X, r24
    1826:	13 97       	sbiw	r26, 0x03	; 3
    1828:	12 96       	adiw	r26, 0x02	; 2
    182a:	1c 92       	st	X, r1
    182c:	12 97       	sbiw	r26, 0x02	; 2
    182e:	14 96       	adiw	r26, 0x04	; 4
    1830:	8c 91       	ld	r24, X
    1832:	14 97       	sbiw	r26, 0x04	; 4
    1834:	14 96       	adiw	r26, 0x04	; 4
    1836:	9c 91       	ld	r25, X
    1838:	14 97       	sbiw	r26, 0x04	; 4
    183a:	84 70       	andi	r24, 0x04	; 4
    183c:	89 2b       	or	r24, r25
    183e:	14 96       	adiw	r26, 0x04	; 4
    1840:	8c 93       	st	X, r24
    1842:	84 85       	ldd	r24, Z+12	; 0x0c
    1844:	84 87       	std	Z+12, r24	; 0x0c
    1846:	10 a2       	std	Z+32, r1	; 0x20
    1848:	11 a2       	std	Z+33, r1	; 0x21
    184a:	16 a2       	std	Z+38, r1	; 0x26
    184c:	17 a2       	std	Z+39, r1	; 0x27
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	9f ef       	ldi	r25, 0xFF	; 255
    1852:	80 a7       	std	Z+40, r24	; 0x28
    1854:	91 a7       	std	Z+41, r25	; 0x29
    1856:	12 a6       	std	Z+42, r1	; 0x2a
    1858:	13 a6       	std	Z+43, r1	; 0x2b
    185a:	14 a6       	std	Z+44, r1	; 0x2c
    185c:	15 a6       	std	Z+45, r1	; 0x2d
    185e:	16 a6       	std	Z+46, r1	; 0x2e
    1860:	17 a6       	std	Z+47, r1	; 0x2f
    1862:	2f bf       	out	0x3f, r18	; 63
    1864:	08 95       	ret

00001866 <_Z9tcc1_initv>:

// Note: The correct PORTC direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    1866:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    1868:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    186a:	e0 e4       	ldi	r30, 0x40	; 64
    186c:	f8 e0       	ldi	r31, 0x08	; 8
    186e:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    1870:	8c e0       	ldi	r24, 0x0C	; 12
    1872:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCC1);
// Clock source: ClkPer/8
TCC1.CTRLA=TC_CLKSEL_DIV8_gc;
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCC1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    1878:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCC1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    187a:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCC1.CTRLE=(0<<TC1_BYTEM_bp);
    187c:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Medium Level
// Error interrupt: Disabled
TCC1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCC1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1882:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESC.CTRLA&= ~HIRES_HREN1_bm;
    1884:	a0 e9       	ldi	r26, 0x90	; 144
    1886:	b8 e0       	ldi	r27, 0x08	; 8
    1888:	8c 91       	ld	r24, X
    188a:	8d 7f       	andi	r24, 0xFD	; 253
    188c:	8c 93       	st	X, r24

// Clear the interrupt flags
TCC1.INTFLAGS=TCC1.INTFLAGS;
    188e:	84 85       	ldd	r24, Z+12	; 0x0c
    1890:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCC1.CNT=0x0000;
    1892:	10 a2       	std	Z+32, r1	; 0x20
    1894:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCC1.PER=0x9C3F;
    1896:	2f e3       	ldi	r18, 0x3F	; 63
    1898:	3c e9       	ldi	r19, 0x9C	; 156
    189a:	26 a3       	std	Z+38, r18	; 0x26
    189c:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCC1.CCA=0x0000;
    189e:	10 a6       	std	Z+40, r1	; 0x28
    18a0:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCC1.CCB=0x0000;
    18a2:	12 a6       	std	Z+42, r1	; 0x2a
    18a4:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    18a6:	9f bf       	out	0x3f, r25	; 63
    18a8:	08 95       	ret

000018aa <_Z9tcd1_initv>:

// Note: The correct PORTD direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    18aa:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    18ac:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    18ae:	e0 e4       	ldi	r30, 0x40	; 64
    18b0:	f9 e0       	ldi	r31, 0x09	; 9
    18b2:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    18b4:	8c e0       	ldi	r24, 0x0C	; 12
    18b6:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCD1);
// Clock source: ClkPer/64
TCD1.CTRLA=TC_CLKSEL_DIV64_gc;
    18b8:	85 e0       	ldi	r24, 0x05	; 5
    18ba:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCD1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    18bc:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCD1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    18be:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCD1.CTRLE=(0<<TC1_BYTEM_bp);
    18c0:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Low Level
// Error interrupt: Disabled
TCD1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_LO_gc;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCD1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    18c6:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESD.CTRLA&= ~HIRES_HREN1_bm;
    18c8:	a0 e9       	ldi	r26, 0x90	; 144
    18ca:	b9 e0       	ldi	r27, 0x09	; 9
    18cc:	8c 91       	ld	r24, X
    18ce:	8d 7f       	andi	r24, 0xFD	; 253
    18d0:	8c 93       	st	X, r24

// Clear the interrupt flags
TCD1.INTFLAGS=TCD1.INTFLAGS;
    18d2:	84 85       	ldd	r24, Z+12	; 0x0c
    18d4:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCD1.CNT=0x0000;
    18d6:	10 a2       	std	Z+32, r1	; 0x20
    18d8:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCD1.PER=0xC34F;
    18da:	2f e4       	ldi	r18, 0x4F	; 79
    18dc:	33 ec       	ldi	r19, 0xC3	; 195
    18de:	26 a3       	std	Z+38, r18	; 0x26
    18e0:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCD1.CCA=0x0000;
    18e2:	10 a6       	std	Z+40, r1	; 0x28
    18e4:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCD1.CCB=0x0000;
    18e6:	12 a6       	std	Z+42, r1	; 0x2a
    18e8:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    18ea:	9f bf       	out	0x3f, r25	; 63
    18ec:	08 95       	ret

000018ee <__vector_16>:

// Timer/Counter TCC0 Compare/Capture A interrupt service routine
// timer to make pulses level 0

ISR (TCC0_CCA_vect) 
{          
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	08 b6       	in	r0, 0x38	; 56
    18fa:	0f 92       	push	r0
    18fc:	18 be       	out	0x38, r1	; 56
    18fe:	09 b6       	in	r0, 0x39	; 57
    1900:	0f 92       	push	r0
    1902:	19 be       	out	0x39, r1	; 57
    1904:	0b b6       	in	r0, 0x3b	; 59
    1906:	0f 92       	push	r0
    1908:	1b be       	out	0x3b, r1	; 59
    190a:	2f 93       	push	r18
    190c:	3f 93       	push	r19
    190e:	4f 93       	push	r20
    1910:	5f 93       	push	r21
    1912:	6f 93       	push	r22
    1914:	7f 93       	push	r23
    1916:	8f 93       	push	r24
    1918:	9f 93       	push	r25
    191a:	af 93       	push	r26
    191c:	bf 93       	push	r27
    191e:	ef 93       	push	r30
    1920:	ff 93       	push	r31
    if (TCC0.INTFLAGS & TC0_CCAIF_bm) TCC0.INTFLAGS|=TC0_CCAIF_bm;   
    1922:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    1926:	84 ff       	sbrs	r24, 4
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <__vector_16+0x46>
    192a:	e0 e0       	ldi	r30, 0x00	; 0
    192c:	f8 e0       	ldi	r31, 0x08	; 8
    192e:	84 85       	ldd	r24, Z+12	; 0x0c
    1930:	80 61       	ori	r24, 0x10	; 16
    1932:	84 87       	std	Z+12, r24	; 0x0c
     
    if(MaxDistanceToGo>0) MaxDistanceToGo--;
    1934:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <MaxDistanceToGo>
    1938:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <MaxDistanceToGo+0x1>
    193c:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <MaxDistanceToGo+0x2>
    1940:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <MaxDistanceToGo+0x3>
    1944:	18 16       	cp	r1, r24
    1946:	19 06       	cpc	r1, r25
    1948:	1a 06       	cpc	r1, r26
    194a:	1b 06       	cpc	r1, r27
    194c:	5c f4       	brge	.+22     	; 0x1964 <__vector_16+0x76>
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	a1 09       	sbc	r26, r1
    1952:	b1 09       	sbc	r27, r1
    1954:	80 93 a8 27 	sts	0x27A8, r24	; 0x8027a8 <MaxDistanceToGo>
    1958:	90 93 a9 27 	sts	0x27A9, r25	; 0x8027a9 <MaxDistanceToGo+0x1>
    195c:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <MaxDistanceToGo+0x2>
    1960:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <MaxDistanceToGo+0x3>
     
    if(DistanceToGo1>0)
    1964:	40 91 a4 27 	lds	r20, 0x27A4	; 0x8027a4 <DistanceToGo1>
    1968:	50 91 a5 27 	lds	r21, 0x27A5	; 0x8027a5 <DistanceToGo1+0x1>
    196c:	60 91 a6 27 	lds	r22, 0x27A6	; 0x8027a6 <DistanceToGo1+0x2>
    1970:	70 91 a7 27 	lds	r23, 0x27A7	; 0x8027a7 <DistanceToGo1+0x3>
    1974:	14 16       	cp	r1, r20
    1976:	15 06       	cpc	r1, r21
    1978:	16 06       	cpc	r1, r22
    197a:	17 06       	cpc	r1, r23
    197c:	0c f0       	brlt	.+2      	; 0x1980 <__vector_16+0x92>
    197e:	57 c0       	rjmp	.+174    	; 0x1a2e <__vector_16+0x140>
    {              
      Pi1+=Ma1; 
    1980:	20 91 4a 27 	lds	r18, 0x274A	; 0x80274a <Pi1>
    1984:	30 91 4b 27 	lds	r19, 0x274B	; 0x80274b <Pi1+0x1>
    1988:	80 91 44 27 	lds	r24, 0x2744	; 0x802744 <Ma1>
    198c:	90 91 45 27 	lds	r25, 0x2745	; 0x802745 <Ma1+0x1>
    1990:	82 0f       	add	r24, r18
    1992:	93 1f       	adc	r25, r19
    1994:	80 93 4a 27 	sts	0x274A, r24	; 0x80274a <Pi1>
    1998:	90 93 4b 27 	sts	0x274B, r25	; 0x80274b <Pi1+0x1>
      if(Pi1>=1000)
    199c:	88 3e       	cpi	r24, 0xE8	; 232
    199e:	23 e0       	ldi	r18, 0x03	; 3
    19a0:	92 07       	cpc	r25, r18
    19a2:	08 f4       	brcc	.+2      	; 0x19a6 <__vector_16+0xb8>
    19a4:	40 c0       	rjmp	.+128    	; 0x1a26 <__vector_16+0x138>
      {                   
        PULSE1;
    19a6:	e0 e2       	ldi	r30, 0x20	; 32
    19a8:	f7 e0       	ldi	r31, 0x07	; 7
    19aa:	20 e2       	ldi	r18, 0x20	; 32
    19ac:	27 83       	std	Z+7, r18	; 0x07
        Pi1-=1000;
    19ae:	88 5e       	subi	r24, 0xE8	; 232
    19b0:	93 40       	sbci	r25, 0x03	; 3
    19b2:	80 93 4a 27 	sts	0x274A, r24	; 0x80274a <Pi1>
    19b6:	90 93 4b 27 	sts	0x274B, r25	; 0x80274b <Pi1+0x1>
        DistanceToGo1--;   
    19ba:	41 50       	subi	r20, 0x01	; 1
    19bc:	51 09       	sbc	r21, r1
    19be:	61 09       	sbc	r22, r1
    19c0:	71 09       	sbc	r23, r1
    19c2:	40 93 a4 27 	sts	0x27A4, r20	; 0x8027a4 <DistanceToGo1>
    19c6:	50 93 a5 27 	sts	0x27A5, r21	; 0x8027a5 <DistanceToGo1+0x1>
    19ca:	60 93 a6 27 	sts	0x27A6, r22	; 0x8027a6 <DistanceToGo1+0x2>
    19ce:	70 93 a7 27 	sts	0x27A7, r23	; 0x8027a7 <DistanceToGo1+0x3>
        if(DIR1==0) AxisPosition1--;  
    19d2:	84 81       	ldd	r24, Z+4	; 0x04
    19d4:	84 fd       	sbrc	r24, 4
    19d6:	14 c0       	rjmp	.+40     	; 0x1a00 <__vector_16+0x112>
    19d8:	80 91 c0 27 	lds	r24, 0x27C0	; 0x8027c0 <AxisPosition1>
    19dc:	90 91 c1 27 	lds	r25, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    19e0:	a0 91 c2 27 	lds	r26, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    19e4:	b0 91 c3 27 	lds	r27, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	a1 09       	sbc	r26, r1
    19ec:	b1 09       	sbc	r27, r1
    19ee:	80 93 c0 27 	sts	0x27C0, r24	; 0x8027c0 <AxisPosition1>
    19f2:	90 93 c1 27 	sts	0x27C1, r25	; 0x8027c1 <AxisPosition1+0x1>
    19f6:	a0 93 c2 27 	sts	0x27C2, r26	; 0x8027c2 <AxisPosition1+0x2>
    19fa:	b0 93 c3 27 	sts	0x27C3, r27	; 0x8027c3 <AxisPosition1+0x3>
    19fe:	13 c0       	rjmp	.+38     	; 0x1a26 <__vector_16+0x138>
        else AxisPosition1++; 
    1a00:	80 91 c0 27 	lds	r24, 0x27C0	; 0x8027c0 <AxisPosition1>
    1a04:	90 91 c1 27 	lds	r25, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    1a08:	a0 91 c2 27 	lds	r26, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    1a0c:	b0 91 c3 27 	lds	r27, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	a1 1d       	adc	r26, r1
    1a14:	b1 1d       	adc	r27, r1
    1a16:	80 93 c0 27 	sts	0x27C0, r24	; 0x8027c0 <AxisPosition1>
    1a1a:	90 93 c1 27 	sts	0x27C1, r25	; 0x8027c1 <AxisPosition1+0x1>
    1a1e:	a0 93 c2 27 	sts	0x27C2, r26	; 0x8027c2 <AxisPosition1+0x2>
    1a22:	b0 93 c3 27 	sts	0x27C3, r27	; 0x8027c3 <AxisPosition1+0x3>
      } 
      AxisIsMoving1=1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 5c 27 	sts	0x275C, r24	; 0x80275c <AxisIsMoving1>
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <__vector_16+0x144>
    } 
    else
    {
      AxisIsMoving1=0;
    1a2e:	10 92 5c 27 	sts	0x275C, r1	; 0x80275c <AxisIsMoving1>
    }   
                            
    if(DistanceToGo2>0)
    1a32:	40 91 a0 27 	lds	r20, 0x27A0	; 0x8027a0 <DistanceToGo2>
    1a36:	50 91 a1 27 	lds	r21, 0x27A1	; 0x8027a1 <DistanceToGo2+0x1>
    1a3a:	60 91 a2 27 	lds	r22, 0x27A2	; 0x8027a2 <DistanceToGo2+0x2>
    1a3e:	70 91 a3 27 	lds	r23, 0x27A3	; 0x8027a3 <DistanceToGo2+0x3>
    1a42:	14 16       	cp	r1, r20
    1a44:	15 06       	cpc	r1, r21
    1a46:	16 06       	cpc	r1, r22
    1a48:	17 06       	cpc	r1, r23
    1a4a:	0c f0       	brlt	.+2      	; 0x1a4e <__vector_16+0x160>
    1a4c:	57 c0       	rjmp	.+174    	; 0x1afc <__vector_16+0x20e>
    {
      Pi2+=Ma2; 
    1a4e:	20 91 48 27 	lds	r18, 0x2748	; 0x802748 <Pi2>
    1a52:	30 91 49 27 	lds	r19, 0x2749	; 0x802749 <Pi2+0x1>
    1a56:	80 91 42 27 	lds	r24, 0x2742	; 0x802742 <Ma2>
    1a5a:	90 91 43 27 	lds	r25, 0x2743	; 0x802743 <Ma2+0x1>
    1a5e:	82 0f       	add	r24, r18
    1a60:	93 1f       	adc	r25, r19
    1a62:	80 93 48 27 	sts	0x2748, r24	; 0x802748 <Pi2>
    1a66:	90 93 49 27 	sts	0x2749, r25	; 0x802749 <Pi2+0x1>
      if(Pi2>=1000)
    1a6a:	88 3e       	cpi	r24, 0xE8	; 232
    1a6c:	23 e0       	ldi	r18, 0x03	; 3
    1a6e:	92 07       	cpc	r25, r18
    1a70:	08 f4       	brcc	.+2      	; 0x1a74 <__vector_16+0x186>
    1a72:	40 c0       	rjmp	.+128    	; 0x1af4 <__vector_16+0x206>
      {                   
        PULSE2;
    1a74:	e0 e2       	ldi	r30, 0x20	; 32
    1a76:	f7 e0       	ldi	r31, 0x07	; 7
    1a78:	28 e0       	ldi	r18, 0x08	; 8
    1a7a:	27 83       	std	Z+7, r18	; 0x07
        Pi2-=1000;
    1a7c:	88 5e       	subi	r24, 0xE8	; 232
    1a7e:	93 40       	sbci	r25, 0x03	; 3
    1a80:	80 93 48 27 	sts	0x2748, r24	; 0x802748 <Pi2>
    1a84:	90 93 49 27 	sts	0x2749, r25	; 0x802749 <Pi2+0x1>
        DistanceToGo2--;   
    1a88:	41 50       	subi	r20, 0x01	; 1
    1a8a:	51 09       	sbc	r21, r1
    1a8c:	61 09       	sbc	r22, r1
    1a8e:	71 09       	sbc	r23, r1
    1a90:	40 93 a0 27 	sts	0x27A0, r20	; 0x8027a0 <DistanceToGo2>
    1a94:	50 93 a1 27 	sts	0x27A1, r21	; 0x8027a1 <DistanceToGo2+0x1>
    1a98:	60 93 a2 27 	sts	0x27A2, r22	; 0x8027a2 <DistanceToGo2+0x2>
    1a9c:	70 93 a3 27 	sts	0x27A3, r23	; 0x8027a3 <DistanceToGo2+0x3>
        if(DIR2==0) AxisPosition2--;  
    1aa0:	84 81       	ldd	r24, Z+4	; 0x04
    1aa2:	82 fd       	sbrc	r24, 2
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <__vector_16+0x1e0>
    1aa6:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <AxisPosition2>
    1aaa:	90 91 bd 27 	lds	r25, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    1aae:	a0 91 be 27 	lds	r26, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    1ab2:	b0 91 bf 27 	lds	r27, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	a1 09       	sbc	r26, r1
    1aba:	b1 09       	sbc	r27, r1
    1abc:	80 93 bc 27 	sts	0x27BC, r24	; 0x8027bc <AxisPosition2>
    1ac0:	90 93 bd 27 	sts	0x27BD, r25	; 0x8027bd <AxisPosition2+0x1>
    1ac4:	a0 93 be 27 	sts	0x27BE, r26	; 0x8027be <AxisPosition2+0x2>
    1ac8:	b0 93 bf 27 	sts	0x27BF, r27	; 0x8027bf <AxisPosition2+0x3>
    1acc:	13 c0       	rjmp	.+38     	; 0x1af4 <__vector_16+0x206>
        else AxisPosition2++; 
    1ace:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <AxisPosition2>
    1ad2:	90 91 bd 27 	lds	r25, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    1ad6:	a0 91 be 27 	lds	r26, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    1ada:	b0 91 bf 27 	lds	r27, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	a1 1d       	adc	r26, r1
    1ae2:	b1 1d       	adc	r27, r1
    1ae4:	80 93 bc 27 	sts	0x27BC, r24	; 0x8027bc <AxisPosition2>
    1ae8:	90 93 bd 27 	sts	0x27BD, r25	; 0x8027bd <AxisPosition2+0x1>
    1aec:	a0 93 be 27 	sts	0x27BE, r26	; 0x8027be <AxisPosition2+0x2>
    1af0:	b0 93 bf 27 	sts	0x27BF, r27	; 0x8027bf <AxisPosition2+0x3>
      }
     AxisIsMoving2=1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	80 93 5b 27 	sts	0x275B, r24	; 0x80275b <AxisIsMoving2>
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <__vector_16+0x212>
    } 
    else
    {
      AxisIsMoving2=0;
    1afc:	10 92 5b 27 	sts	0x275B, r1	; 0x80275b <AxisIsMoving2>
    }
        
    if(DistanceToGo3>0)
    1b00:	40 91 9c 27 	lds	r20, 0x279C	; 0x80279c <DistanceToGo3>
    1b04:	50 91 9d 27 	lds	r21, 0x279D	; 0x80279d <DistanceToGo3+0x1>
    1b08:	60 91 9e 27 	lds	r22, 0x279E	; 0x80279e <DistanceToGo3+0x2>
    1b0c:	70 91 9f 27 	lds	r23, 0x279F	; 0x80279f <DistanceToGo3+0x3>
    1b10:	14 16       	cp	r1, r20
    1b12:	15 06       	cpc	r1, r21
    1b14:	16 06       	cpc	r1, r22
    1b16:	17 06       	cpc	r1, r23
    1b18:	0c f0       	brlt	.+2      	; 0x1b1c <__vector_16+0x22e>
    1b1a:	57 c0       	rjmp	.+174    	; 0x1bca <__vector_16+0x2dc>
    {
      Pi3+=Ma3; 
    1b1c:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <Pi3>
    1b20:	30 91 47 27 	lds	r19, 0x2747	; 0x802747 <Pi3+0x1>
    1b24:	80 91 40 27 	lds	r24, 0x2740	; 0x802740 <Ma3>
    1b28:	90 91 41 27 	lds	r25, 0x2741	; 0x802741 <Ma3+0x1>
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	80 93 46 27 	sts	0x2746, r24	; 0x802746 <Pi3>
    1b34:	90 93 47 27 	sts	0x2747, r25	; 0x802747 <Pi3+0x1>
      if(Pi3>=1000)
    1b38:	88 3e       	cpi	r24, 0xE8	; 232
    1b3a:	23 e0       	ldi	r18, 0x03	; 3
    1b3c:	92 07       	cpc	r25, r18
    1b3e:	08 f4       	brcc	.+2      	; 0x1b42 <__vector_16+0x254>
    1b40:	40 c0       	rjmp	.+128    	; 0x1bc2 <__vector_16+0x2d4>
      {                   
        PULSE3;
    1b42:	e0 e2       	ldi	r30, 0x20	; 32
    1b44:	f7 e0       	ldi	r31, 0x07	; 7
    1b46:	22 e0       	ldi	r18, 0x02	; 2
    1b48:	27 83       	std	Z+7, r18	; 0x07
        Pi3-=1000;
    1b4a:	88 5e       	subi	r24, 0xE8	; 232
    1b4c:	93 40       	sbci	r25, 0x03	; 3
    1b4e:	80 93 46 27 	sts	0x2746, r24	; 0x802746 <Pi3>
    1b52:	90 93 47 27 	sts	0x2747, r25	; 0x802747 <Pi3+0x1>
        DistanceToGo3--;   
    1b56:	41 50       	subi	r20, 0x01	; 1
    1b58:	51 09       	sbc	r21, r1
    1b5a:	61 09       	sbc	r22, r1
    1b5c:	71 09       	sbc	r23, r1
    1b5e:	40 93 9c 27 	sts	0x279C, r20	; 0x80279c <DistanceToGo3>
    1b62:	50 93 9d 27 	sts	0x279D, r21	; 0x80279d <DistanceToGo3+0x1>
    1b66:	60 93 9e 27 	sts	0x279E, r22	; 0x80279e <DistanceToGo3+0x2>
    1b6a:	70 93 9f 27 	sts	0x279F, r23	; 0x80279f <DistanceToGo3+0x3>
        if(DIR3==0) AxisPosition3--;  
    1b6e:	84 81       	ldd	r24, Z+4	; 0x04
    1b70:	80 fd       	sbrc	r24, 0
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <__vector_16+0x2ae>
    1b74:	80 91 b8 27 	lds	r24, 0x27B8	; 0x8027b8 <AxisPosition3>
    1b78:	90 91 b9 27 	lds	r25, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    1b7c:	a0 91 ba 27 	lds	r26, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    1b80:	b0 91 bb 27 	lds	r27, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	a1 09       	sbc	r26, r1
    1b88:	b1 09       	sbc	r27, r1
    1b8a:	80 93 b8 27 	sts	0x27B8, r24	; 0x8027b8 <AxisPosition3>
    1b8e:	90 93 b9 27 	sts	0x27B9, r25	; 0x8027b9 <AxisPosition3+0x1>
    1b92:	a0 93 ba 27 	sts	0x27BA, r26	; 0x8027ba <AxisPosition3+0x2>
    1b96:	b0 93 bb 27 	sts	0x27BB, r27	; 0x8027bb <AxisPosition3+0x3>
    1b9a:	13 c0       	rjmp	.+38     	; 0x1bc2 <__vector_16+0x2d4>
        else AxisPosition3++; 
    1b9c:	80 91 b8 27 	lds	r24, 0x27B8	; 0x8027b8 <AxisPosition3>
    1ba0:	90 91 b9 27 	lds	r25, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    1ba4:	a0 91 ba 27 	lds	r26, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    1ba8:	b0 91 bb 27 	lds	r27, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	a1 1d       	adc	r26, r1
    1bb0:	b1 1d       	adc	r27, r1
    1bb2:	80 93 b8 27 	sts	0x27B8, r24	; 0x8027b8 <AxisPosition3>
    1bb6:	90 93 b9 27 	sts	0x27B9, r25	; 0x8027b9 <AxisPosition3+0x1>
    1bba:	a0 93 ba 27 	sts	0x27BA, r26	; 0x8027ba <AxisPosition3+0x2>
    1bbe:	b0 93 bb 27 	sts	0x27BB, r27	; 0x8027bb <AxisPosition3+0x3>
      }
     AxisIsMoving3=1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 5a 27 	sts	0x275A, r24	; 0x80275a <AxisIsMoving3>
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <__vector_16+0x2e0>
    } 
    else
    {
      AxisIsMoving3=0;
    1bca:	10 92 5a 27 	sts	0x275A, r1	; 0x80275a <AxisIsMoving3>
    }
}
    1bce:	ff 91       	pop	r31
    1bd0:	ef 91       	pop	r30
    1bd2:	bf 91       	pop	r27
    1bd4:	af 91       	pop	r26
    1bd6:	9f 91       	pop	r25
    1bd8:	8f 91       	pop	r24
    1bda:	7f 91       	pop	r23
    1bdc:	6f 91       	pop	r22
    1bde:	5f 91       	pop	r21
    1be0:	4f 91       	pop	r20
    1be2:	3f 91       	pop	r19
    1be4:	2f 91       	pop	r18
    1be6:	0f 90       	pop	r0
    1be8:	0b be       	out	0x3b, r0	; 59
    1bea:	0f 90       	pop	r0
    1bec:	09 be       	out	0x39, r0	; 57
    1bee:	0f 90       	pop	r0
    1bf0:	08 be       	out	0x38, r0	; 56
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <__vector_20>:

// Timer/Counter TCC1 Overflow/Underflow interrupt service routine
// Timer to set speed according to acceleration and deceleration Level 1
ISR (TCC1_OVF_vect)
{
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	08 b6       	in	r0, 0x38	; 56
    1c08:	0f 92       	push	r0
    1c0a:	18 be       	out	0x38, r1	; 56
    1c0c:	09 b6       	in	r0, 0x39	; 57
    1c0e:	0f 92       	push	r0
    1c10:	19 be       	out	0x39, r1	; 57
    1c12:	0b b6       	in	r0, 0x3b	; 59
    1c14:	0f 92       	push	r0
    1c16:	1b be       	out	0x3b, r1	; 59
    1c18:	cf 92       	push	r12
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
  float PER;
  j++;   
    1c3c:	80 91 3a 27 	lds	r24, 0x273A	; 0x80273a <j>
    1c40:	90 91 3b 27 	lds	r25, 0x273B	; 0x80273b <j+0x1>
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	80 93 3a 27 	sts	0x273A, r24	; 0x80273a <j>
    1c4a:	90 93 3b 27 	sts	0x273B, r25	; 0x80273b <j+0x1>
  if(MaxDistanceToGo>0)
    1c4e:	c0 90 a8 27 	lds	r12, 0x27A8	; 0x8027a8 <MaxDistanceToGo>
    1c52:	d0 90 a9 27 	lds	r13, 0x27A9	; 0x8027a9 <MaxDistanceToGo+0x1>
    1c56:	e0 90 aa 27 	lds	r14, 0x27AA	; 0x8027aa <MaxDistanceToGo+0x2>
    1c5a:	f0 90 ab 27 	lds	r15, 0x27AB	; 0x8027ab <MaxDistanceToGo+0x3>
    1c5e:	1c 14       	cp	r1, r12
    1c60:	1d 04       	cpc	r1, r13
    1c62:	1e 04       	cpc	r1, r14
    1c64:	1f 04       	cpc	r1, r15
    1c66:	0c f0       	brlt	.+2      	; 0x1c6a <__vector_20+0x6e>
    1c68:	86 c0       	rjmp	.+268    	; 0x1d76 <__vector_20+0x17a>
  {
    if(MaxDistanceToGo >= AccDTG)
    1c6a:	80 91 98 27 	lds	r24, 0x2798	; 0x802798 <AccDTG>
    1c6e:	90 91 99 27 	lds	r25, 0x2799	; 0x802799 <AccDTG+0x1>
    1c72:	a0 91 9a 27 	lds	r26, 0x279A	; 0x80279a <AccDTG+0x2>
    1c76:	b0 91 9b 27 	lds	r27, 0x279B	; 0x80279b <AccDTG+0x3>
    1c7a:	c8 16       	cp	r12, r24
    1c7c:	d9 06       	cpc	r13, r25
    1c7e:	ea 06       	cpc	r14, r26
    1c80:	fb 06       	cpc	r15, r27
    1c82:	b4 f1       	brlt	.+108    	; 0x1cf0 <__vector_20+0xf4>
    {
    CurSpeedFrq+= ACCSpeedINT; 
    1c84:	40 91 56 27 	lds	r20, 0x2756	; 0x802756 <CurSpeedFrq>
    1c88:	50 91 57 27 	lds	r21, 0x2757	; 0x802757 <CurSpeedFrq+0x1>
    1c8c:	60 91 58 27 	lds	r22, 0x2758	; 0x802758 <CurSpeedFrq+0x2>
    1c90:	70 91 59 27 	lds	r23, 0x2759	; 0x802759 <CurSpeedFrq+0x3>
    1c94:	80 91 52 27 	lds	r24, 0x2752	; 0x802752 <ACCSpeedINT>
    1c98:	90 91 53 27 	lds	r25, 0x2753	; 0x802753 <ACCSpeedINT+0x1>
    1c9c:	a0 91 54 27 	lds	r26, 0x2754	; 0x802754 <ACCSpeedINT+0x2>
    1ca0:	b0 91 55 27 	lds	r27, 0x2755	; 0x802755 <ACCSpeedINT+0x3>
    1ca4:	8a 01       	movw	r16, r20
    1ca6:	9b 01       	movw	r18, r22
    1ca8:	08 0f       	add	r16, r24
    1caa:	19 1f       	adc	r17, r25
    1cac:	2a 1f       	adc	r18, r26
    1cae:	3b 1f       	adc	r19, r27
    1cb0:	c9 01       	movw	r24, r18
    1cb2:	b8 01       	movw	r22, r16
    1cb4:	00 93 56 27 	sts	0x2756, r16	; 0x802756 <CurSpeedFrq>
    1cb8:	10 93 57 27 	sts	0x2757, r17	; 0x802757 <CurSpeedFrq+0x1>
    1cbc:	20 93 58 27 	sts	0x2758, r18	; 0x802758 <CurSpeedFrq+0x2>
    1cc0:	30 93 59 27 	sts	0x2759, r19	; 0x802759 <CurSpeedFrq+0x3>
    PER=(float)(16000.0/CurSpeedFrq);        
    TCC0.CCA=(unsigned int)(PER*1000);
    1cc4:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    1cc8:	9b 01       	movw	r18, r22
    1cca:	ac 01       	movw	r20, r24
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	8a e7       	ldi	r24, 0x7A	; 122
    1cd2:	96 e4       	ldi	r25, 0x46	; 70
    1cd4:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a e7       	ldi	r20, 0x7A	; 122
    1cde:	54 e4       	ldi	r21, 0x44	; 68
    1ce0:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    1ce4:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    1ce8:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1cec:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    }
    if(MaxDistanceToGo <= DecDTG)
    1cf0:	80 91 94 27 	lds	r24, 0x2794	; 0x802794 <DecDTG>
    1cf4:	90 91 95 27 	lds	r25, 0x2795	; 0x802795 <DecDTG+0x1>
    1cf8:	a0 91 96 27 	lds	r26, 0x2796	; 0x802796 <DecDTG+0x2>
    1cfc:	b0 91 97 27 	lds	r27, 0x2797	; 0x802797 <DecDTG+0x3>
    1d00:	8c 15       	cp	r24, r12
    1d02:	9d 05       	cpc	r25, r13
    1d04:	ae 05       	cpc	r26, r14
    1d06:	bf 05       	cpc	r27, r15
    1d08:	0c f4       	brge	.+2      	; 0x1d0c <__vector_20+0x110>
    1d0a:	04 c1       	rjmp	.+520    	; 0x1f14 <__vector_20+0x318>
    {
    CurSpeedFrq-= ACCSpeedINT; 
    1d0c:	80 91 56 27 	lds	r24, 0x2756	; 0x802756 <CurSpeedFrq>
    1d10:	90 91 57 27 	lds	r25, 0x2757	; 0x802757 <CurSpeedFrq+0x1>
    1d14:	a0 91 58 27 	lds	r26, 0x2758	; 0x802758 <CurSpeedFrq+0x2>
    1d18:	b0 91 59 27 	lds	r27, 0x2759	; 0x802759 <CurSpeedFrq+0x3>
    1d1c:	c0 90 52 27 	lds	r12, 0x2752	; 0x802752 <ACCSpeedINT>
    1d20:	d0 90 53 27 	lds	r13, 0x2753	; 0x802753 <ACCSpeedINT+0x1>
    1d24:	e0 90 54 27 	lds	r14, 0x2754	; 0x802754 <ACCSpeedINT+0x2>
    1d28:	f0 90 55 27 	lds	r15, 0x2755	; 0x802755 <ACCSpeedINT+0x3>
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	6c 19       	sub	r22, r12
    1d32:	7d 09       	sbc	r23, r13
    1d34:	8e 09       	sbc	r24, r14
    1d36:	9f 09       	sbc	r25, r15
    1d38:	60 93 56 27 	sts	0x2756, r22	; 0x802756 <CurSpeedFrq>
    1d3c:	70 93 57 27 	sts	0x2757, r23	; 0x802757 <CurSpeedFrq+0x1>
    1d40:	80 93 58 27 	sts	0x2758, r24	; 0x802758 <CurSpeedFrq+0x2>
    1d44:	90 93 59 27 	sts	0x2759, r25	; 0x802759 <CurSpeedFrq+0x3>
    PER=(float)(16000.0/CurSpeedFrq);        
    TCC0.CCA=(unsigned int)(PER*1000);
    1d48:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    1d4c:	9b 01       	movw	r18, r22
    1d4e:	ac 01       	movw	r20, r24
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	8a e7       	ldi	r24, 0x7A	; 122
    1d56:	96 e4       	ldi	r25, 0x46	; 70
    1d58:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    1d68:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    1d6c:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1d70:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1d74:	cf c0       	rjmp	.+414    	; 0x1f14 <__vector_20+0x318>
    }  
  }
  else
  {          
      if(ACC==1)
    1d76:	80 91 4d 27 	lds	r24, 0x274D	; 0x80274d <ACC>
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <__vector_20+0x184>
    1d7e:	51 c0       	rjmp	.+162    	; 0x1e22 <__vector_20+0x226>
      {
         CurSpeedFrq+= ACCSpeedINT;
    1d80:	40 91 56 27 	lds	r20, 0x2756	; 0x802756 <CurSpeedFrq>
    1d84:	50 91 57 27 	lds	r21, 0x2757	; 0x802757 <CurSpeedFrq+0x1>
    1d88:	60 91 58 27 	lds	r22, 0x2758	; 0x802758 <CurSpeedFrq+0x2>
    1d8c:	70 91 59 27 	lds	r23, 0x2759	; 0x802759 <CurSpeedFrq+0x3>
    1d90:	80 91 52 27 	lds	r24, 0x2752	; 0x802752 <ACCSpeedINT>
    1d94:	90 91 53 27 	lds	r25, 0x2753	; 0x802753 <ACCSpeedINT+0x1>
    1d98:	a0 91 54 27 	lds	r26, 0x2754	; 0x802754 <ACCSpeedINT+0x2>
    1d9c:	b0 91 55 27 	lds	r27, 0x2755	; 0x802755 <ACCSpeedINT+0x3>
    1da0:	84 0f       	add	r24, r20
    1da2:	95 1f       	adc	r25, r21
    1da4:	a6 1f       	adc	r26, r22
    1da6:	b7 1f       	adc	r27, r23
    1da8:	80 93 56 27 	sts	0x2756, r24	; 0x802756 <CurSpeedFrq>
    1dac:	90 93 57 27 	sts	0x2757, r25	; 0x802757 <CurSpeedFrq+0x1>
    1db0:	a0 93 58 27 	sts	0x2758, r26	; 0x802758 <CurSpeedFrq+0x2>
    1db4:	b0 93 59 27 	sts	0x2759, r27	; 0x802759 <CurSpeedFrq+0x3>
         if(CurSpeedFrq>=MaxSpeed)
    1db8:	40 91 81 27 	lds	r20, 0x2781	; 0x802781 <MaxSpeed>
    1dbc:	50 91 82 27 	lds	r21, 0x2782	; 0x802782 <MaxSpeed+0x1>
    1dc0:	60 91 83 27 	lds	r22, 0x2783	; 0x802783 <MaxSpeed+0x2>
    1dc4:	70 91 84 27 	lds	r23, 0x2784	; 0x802784 <MaxSpeed+0x3>
    1dc8:	84 17       	cp	r24, r20
    1dca:	95 07       	cpc	r25, r21
    1dcc:	a6 07       	cpc	r26, r22
    1dce:	b7 07       	cpc	r27, r23
    1dd0:	54 f0       	brlt	.+20     	; 0x1de6 <__vector_20+0x1ea>
         {
           CurSpeedFrq=MaxSpeed;   
    1dd2:	40 93 56 27 	sts	0x2756, r20	; 0x802756 <CurSpeedFrq>
    1dd6:	50 93 57 27 	sts	0x2757, r21	; 0x802757 <CurSpeedFrq+0x1>
    1dda:	60 93 58 27 	sts	0x2758, r22	; 0x802758 <CurSpeedFrq+0x2>
    1dde:	70 93 59 27 	sts	0x2759, r23	; 0x802759 <CurSpeedFrq+0x3>
           ACC=0;
    1de2:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <ACC>
         } 
         PER=(float)(16000.0/CurSpeedFrq);   
            
        TCC0.CCA=(unsigned int)(PER*1000); 
    1de6:	60 91 56 27 	lds	r22, 0x2756	; 0x802756 <CurSpeedFrq>
    1dea:	70 91 57 27 	lds	r23, 0x2757	; 0x802757 <CurSpeedFrq+0x1>
    1dee:	80 91 58 27 	lds	r24, 0x2758	; 0x802758 <CurSpeedFrq+0x2>
    1df2:	90 91 59 27 	lds	r25, 0x2759	; 0x802759 <CurSpeedFrq+0x3>
    1df6:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	8a e7       	ldi	r24, 0x7A	; 122
    1e04:	96 e4       	ldi	r25, 0x46	; 70
    1e06:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    1e16:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    1e1a:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1e1e:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      } 
      if(DEC==1)
    1e22:	80 91 4c 27 	lds	r24, 0x274C	; 0x80274c <DEC>
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <__vector_20+0x230>
    1e2a:	74 c0       	rjmp	.+232    	; 0x1f14 <__vector_20+0x318>
      { 
         CurSpeedFrq-= DECSpeedINT;
    1e2c:	40 91 4e 27 	lds	r20, 0x274E	; 0x80274e <DECSpeedINT>
    1e30:	50 91 4f 27 	lds	r21, 0x274F	; 0x80274f <DECSpeedINT+0x1>
    1e34:	60 91 50 27 	lds	r22, 0x2750	; 0x802750 <DECSpeedINT+0x2>
    1e38:	70 91 51 27 	lds	r23, 0x2751	; 0x802751 <DECSpeedINT+0x3>
    1e3c:	80 91 56 27 	lds	r24, 0x2756	; 0x802756 <CurSpeedFrq>
    1e40:	90 91 57 27 	lds	r25, 0x2757	; 0x802757 <CurSpeedFrq+0x1>
    1e44:	a0 91 58 27 	lds	r26, 0x2758	; 0x802758 <CurSpeedFrq+0x2>
    1e48:	b0 91 59 27 	lds	r27, 0x2759	; 0x802759 <CurSpeedFrq+0x3>
    1e4c:	84 1b       	sub	r24, r20
    1e4e:	95 0b       	sbc	r25, r21
    1e50:	a6 0b       	sbc	r26, r22
    1e52:	b7 0b       	sbc	r27, r23
         if(CurSpeedFrq<=DECSpeedINT)
    1e54:	48 17       	cp	r20, r24
    1e56:	59 07       	cpc	r21, r25
    1e58:	6a 07       	cpc	r22, r26
    1e5a:	7b 07       	cpc	r23, r27
    1e5c:	4c f4       	brge	.+18     	; 0x1e70 <__vector_20+0x274>
            
        TCC0.CCA=(unsigned int)(PER*1000); 
      } 
      if(DEC==1)
      { 
         CurSpeedFrq-= DECSpeedINT;
    1e5e:	80 93 56 27 	sts	0x2756, r24	; 0x802756 <CurSpeedFrq>
    1e62:	90 93 57 27 	sts	0x2757, r25	; 0x802757 <CurSpeedFrq+0x1>
    1e66:	a0 93 58 27 	sts	0x2758, r26	; 0x802758 <CurSpeedFrq+0x2>
    1e6a:	b0 93 59 27 	sts	0x2759, r27	; 0x802759 <CurSpeedFrq+0x3>
    1e6e:	34 c0       	rjmp	.+104    	; 0x1ed8 <__vector_20+0x2dc>
         if(CurSpeedFrq<=DECSpeedINT)
         {
           CurSpeedFrq=DECSpeedINT;   
    1e70:	40 93 56 27 	sts	0x2756, r20	; 0x802756 <CurSpeedFrq>
    1e74:	50 93 57 27 	sts	0x2757, r21	; 0x802757 <CurSpeedFrq+0x1>
    1e78:	60 93 58 27 	sts	0x2758, r22	; 0x802758 <CurSpeedFrq+0x2>
    1e7c:	70 93 59 27 	sts	0x2759, r23	; 0x802759 <CurSpeedFrq+0x3>
           DEC=0;  
    1e80:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <DEC>
           if(FreeJog==1)
    1e84:	80 91 00 27 	lds	r24, 0x2700	; 0x802700 <FreeJog>
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	59 f4       	brne	.+22     	; 0x1ea2 <__vector_20+0x2a6>
           {
            FreeJog=0;  
    1e8c:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            DistanceToGo1=0;
    1e90:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    1e94:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    1e98:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    1e9c:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
    1ea0:	1b c0       	rjmp	.+54     	; 0x1ed8 <__vector_20+0x2dc>
           }
           if(FreeJog==2)
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	59 f4       	brne	.+22     	; 0x1ebc <__vector_20+0x2c0>
           {
            FreeJog=0;  
    1ea6:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            DistanceToGo2=0;
    1eaa:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    1eae:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    1eb2:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    1eb6:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
    1eba:	0e c0       	rjmp	.+28     	; 0x1ed8 <__vector_20+0x2dc>
           }
           if(FreeJog==3)
    1ebc:	80 91 00 27 	lds	r24, 0x2700	; 0x802700 <FreeJog>
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	51 f4       	brne	.+20     	; 0x1ed8 <__vector_20+0x2dc>
           {
            FreeJog=0;  
    1ec4:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            DistanceToGo3=0;
    1ec8:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    1ecc:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    1ed0:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    1ed4:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
           }
         }
         PER=(float)(16000.0/CurSpeedFrq); 
            
        TCC0.CCA=(unsigned int)(PER*1000);  
    1ed8:	60 91 56 27 	lds	r22, 0x2756	; 0x802756 <CurSpeedFrq>
    1edc:	70 91 57 27 	lds	r23, 0x2757	; 0x802757 <CurSpeedFrq+0x1>
    1ee0:	80 91 58 27 	lds	r24, 0x2758	; 0x802758 <CurSpeedFrq+0x2>
    1ee4:	90 91 59 27 	lds	r25, 0x2759	; 0x802759 <CurSpeedFrq+0x3>
    1ee8:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    1eec:	9b 01       	movw	r18, r22
    1eee:	ac 01       	movw	r20, r24
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	8a e7       	ldi	r24, 0x7A	; 122
    1ef6:	96 e4       	ldi	r25, 0x46	; 70
    1ef8:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a e7       	ldi	r20, 0x7A	; 122
    1f02:	54 e4       	ldi	r21, 0x44	; 68
    1f04:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    1f08:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    1f0c:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1f10:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      } 
  } 
  //printf("%u\r\n",TCC0.CCA);        
}
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	df 90       	pop	r13
    1f36:	cf 90       	pop	r12
    1f38:	0f 90       	pop	r0
    1f3a:	0b be       	out	0x3b, r0	; 59
    1f3c:	0f 90       	pop	r0
    1f3e:	09 be       	out	0x39, r0	; 57
    1f40:	0f 90       	pop	r0
    1f42:	08 be       	out	0x38, r0	; 56
    1f44:	0f 90       	pop	r0
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	0f 90       	pop	r0
    1f4a:	1f 90       	pop	r1
    1f4c:	18 95       	reti

00001f4e <__vector_83>:

// Timer/Counter TCD1 Overflow/Underflow interrupt service routine
// PLC INterpolation in this time level 4
ISR (TCD1_OVF_vect)
{ 
    1f4e:	1f 92       	push	r1
    1f50:	0f 92       	push	r0
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	0f 92       	push	r0
    1f56:	11 24       	eor	r1, r1
    1f58:	08 b6       	in	r0, 0x38	; 56
    1f5a:	0f 92       	push	r0
    1f5c:	18 be       	out	0x38, r1	; 56
    1f5e:	8f 93       	push	r24
   if(Axes[0].HardwareLimitNegIsActive)
    1f60:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <Axes+0x2a>
    1f64:	88 23       	and	r24, r24
    1f66:	79 f1       	breq	.+94     	; 0x1fc6 <__vector_83+0x78>
   {  
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routine)\r\n");  
       //printf("LIM POS X: %u\r\n",LIM_NEG1);            
       if(!DIR1 && !LIM_NEG1)       
    1f68:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1f6c:	84 fd       	sbrc	r24, 4
    1f6e:	2b c0       	rjmp	.+86     	; 0x1fc6 <__vector_83+0x78>
    1f70:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1f74:	84 ff       	sbrs	r24, 4
    1f76:	28 c1       	rjmp	.+592    	; 0x21c8 <__vector_83+0x27a>
    1f78:	26 c0       	rjmp	.+76     	; 0x1fc6 <__vector_83+0x78>
       {
         if(AxisIsMoving1) 
         {
          DistanceToGo1=0;      
    1f7a:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    1f7e:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    1f82:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    1f86:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
          if(!RefCmd)
    1f8a:	80 91 07 27 	lds	r24, 0x2707	; 0x802707 <RefCmd>
    1f8e:	81 11       	cpse	r24, r1
    1f90:	1a c0       	rjmp	.+52     	; 0x1fc6 <__vector_83+0x78>
          {
            FreeJog=0;
    1f92:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            MaxDistanceToGo=0;        
    1f96:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <MaxDistanceToGo>
    1f9a:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <MaxDistanceToGo+0x1>
    1f9e:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <MaxDistanceToGo+0x2>
    1fa2:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    1fa6:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    1faa:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    1fae:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    1fb2:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
            DistanceToGo3=0;  
    1fb6:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    1fba:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    1fbe:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    1fc2:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
          } 
         }
       }  
   }
     
   if(Axes[0].HardwareLimitPosIsActive)
    1fc6:	80 91 fa 27 	lds	r24, 0x27FA	; 0x8027fa <Axes+0x29>
    1fca:	88 23       	and	r24, r24
    1fcc:	79 f1       	breq	.+94     	; 0x202c <__vector_83+0xde>
   { 
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routin)\r\n");    
       //printf("LIM POS X: %u\r\n",LIM_NEG1);
       if(DIR1 && !LIM_POS1)       
    1fce:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1fd2:	84 ff       	sbrs	r24, 4
    1fd4:	2b c0       	rjmp	.+86     	; 0x202c <__vector_83+0xde>
    1fd6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1fda:	83 ff       	sbrs	r24, 3
    1fdc:	fa c0       	rjmp	.+500    	; 0x21d2 <__vector_83+0x284>
    1fde:	26 c0       	rjmp	.+76     	; 0x202c <__vector_83+0xde>
       {
         //printf("Axis X PLimit is Active.\r\n");
         if(AxisIsMoving1) 
         {
          DistanceToGo1=0;      
    1fe0:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    1fe4:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    1fe8:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    1fec:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
          if(!RefCmd)
    1ff0:	80 91 07 27 	lds	r24, 0x2707	; 0x802707 <RefCmd>
    1ff4:	81 11       	cpse	r24, r1
    1ff6:	1a c0       	rjmp	.+52     	; 0x202c <__vector_83+0xde>
          {
            FreeJog=0;
    1ff8:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            MaxDistanceToGo=0;        
    1ffc:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <MaxDistanceToGo>
    2000:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <MaxDistanceToGo+0x1>
    2004:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <MaxDistanceToGo+0x2>
    2008:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    200c:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    2010:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    2014:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    2018:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
            DistanceToGo3=0;  
    201c:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    2020:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    2024:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    2028:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
          } 
         }
       } 
   }
  //------------------------------------------- 
   if(Axes[1].HardwareLimitNegIsActive)  
    202c:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <Axes+0x55>
    2030:	88 23       	and	r24, r24
    2032:	79 f1       	breq	.+94     	; 0x2092 <__vector_83+0x144>
   {
       if(!DIR2 && !LIM_NEG2)       
    2034:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2038:	82 fd       	sbrc	r24, 2
    203a:	2b c0       	rjmp	.+86     	; 0x2092 <__vector_83+0x144>
    203c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    2040:	86 ff       	sbrs	r24, 6
    2042:	cc c0       	rjmp	.+408    	; 0x21dc <__vector_83+0x28e>
    2044:	26 c0       	rjmp	.+76     	; 0x2092 <__vector_83+0x144>
       { 
         if(AxisIsMoving2)
         {
          DistanceToGo2=0;      
    2046:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    204a:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    204e:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    2052:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
          if(!RefCmd)
    2056:	80 91 07 27 	lds	r24, 0x2707	; 0x802707 <RefCmd>
    205a:	81 11       	cpse	r24, r1
    205c:	1a c0       	rjmp	.+52     	; 0x2092 <__vector_83+0x144>
          {
            FreeJog=0;
    205e:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            MaxDistanceToGo=0;        
    2062:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <MaxDistanceToGo>
    2066:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <MaxDistanceToGo+0x1>
    206a:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <MaxDistanceToGo+0x2>
    206e:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <MaxDistanceToGo+0x3>
            DistanceToGo1=0;
    2072:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    2076:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    207a:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    207e:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
            DistanceToGo3=0;  
    2082:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    2086:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    208a:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    208e:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
          }
         }
       }    
   }
   
   if(Axes[1].HardwareLimitPosIsActive)
    2092:	80 91 25 28 	lds	r24, 0x2825	; 0x802825 <Axes+0x54>
    2096:	88 23       	and	r24, r24
    2098:	79 f1       	breq	.+94     	; 0x20f8 <__vector_83+0x1aa>
   {
       if(DIR2 && !LIM_POS2)       
    209a:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    209e:	82 ff       	sbrs	r24, 2
    20a0:	2b c0       	rjmp	.+86     	; 0x20f8 <__vector_83+0x1aa>
    20a2:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    20a6:	80 ff       	sbrs	r24, 0
    20a8:	9e c0       	rjmp	.+316    	; 0x21e6 <__vector_83+0x298>
    20aa:	26 c0       	rjmp	.+76     	; 0x20f8 <__vector_83+0x1aa>
       { 
         if(AxisIsMoving2)
         {
          DistanceToGo2=0;      
    20ac:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    20b0:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    20b4:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    20b8:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
          if(!RefCmd)
    20bc:	80 91 07 27 	lds	r24, 0x2707	; 0x802707 <RefCmd>
    20c0:	81 11       	cpse	r24, r1
    20c2:	1a c0       	rjmp	.+52     	; 0x20f8 <__vector_83+0x1aa>
          {
            FreeJog=0;
    20c4:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            MaxDistanceToGo=0;        
    20c8:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <MaxDistanceToGo>
    20cc:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <MaxDistanceToGo+0x1>
    20d0:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <MaxDistanceToGo+0x2>
    20d4:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <MaxDistanceToGo+0x3>
            DistanceToGo1=0;
    20d8:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    20dc:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    20e0:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    20e4:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
            DistanceToGo3=0;  
    20e8:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    20ec:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    20f0:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    20f4:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
          }
         }
       } 
   }  
   //----------------------------------------------- 
   if(Axes[2].HardwareLimitNegIsActive)
    20f8:	80 91 51 28 	lds	r24, 0x2851	; 0x802851 <Axes+0x80>
    20fc:	88 23       	and	r24, r24
    20fe:	79 f1       	breq	.+94     	; 0x215e <__vector_83+0x210>
   {
       if(!DIR3 && !LIM_NEG3)       
    2100:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2104:	80 fd       	sbrc	r24, 0
    2106:	2b c0       	rjmp	.+86     	; 0x215e <__vector_83+0x210>
    2108:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    210c:	84 ff       	sbrs	r24, 4
    210e:	70 c0       	rjmp	.+224    	; 0x21f0 <__vector_83+0x2a2>
    2110:	26 c0       	rjmp	.+76     	; 0x215e <__vector_83+0x210>
       {
         if(AxisIsMoving3)
         {
          DistanceToGo3=0;      
    2112:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    2116:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    211a:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    211e:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
          if(!RefCmd)
    2122:	80 91 07 27 	lds	r24, 0x2707	; 0x802707 <RefCmd>
    2126:	81 11       	cpse	r24, r1
    2128:	1a c0       	rjmp	.+52     	; 0x215e <__vector_83+0x210>
          {
            FreeJog=0;
    212a:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            MaxDistanceToGo=0;        
    212e:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <MaxDistanceToGo>
    2132:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <MaxDistanceToGo+0x1>
    2136:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <MaxDistanceToGo+0x2>
    213a:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    213e:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    2142:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    2146:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    214a:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
            DistanceToGo1=0;  
    214e:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    2152:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    2156:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    215a:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
          }
         }
       }
   }
   
   if(Axes[2].HardwareLimitPosIsActive)
    215e:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <Axes+0x7f>
    2162:	88 23       	and	r24, r24
    2164:	09 f4       	brne	.+2      	; 0x2168 <__vector_83+0x21a>
    2166:	4d c0       	rjmp	.+154    	; 0x2202 <__vector_83+0x2b4>
   {
       if(DIR3 && !LIM_POS3)       
    2168:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    216c:	80 ff       	sbrs	r24, 0
    216e:	49 c0       	rjmp	.+146    	; 0x2202 <__vector_83+0x2b4>
    2170:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    2174:	85 ff       	sbrs	r24, 5
    2176:	41 c0       	rjmp	.+130    	; 0x21fa <__vector_83+0x2ac>
    2178:	44 c0       	rjmp	.+136    	; 0x2202 <__vector_83+0x2b4>
       {
         if(AxisIsMoving3)
         {
          DistanceToGo3=0;      
    217a:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    217e:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    2182:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    2186:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
          if(!RefCmd)
    218a:	80 91 07 27 	lds	r24, 0x2707	; 0x802707 <RefCmd>
    218e:	81 11       	cpse	r24, r1
    2190:	38 c0       	rjmp	.+112    	; 0x2202 <__vector_83+0x2b4>
          {
            FreeJog=0;
    2192:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <FreeJog>
            MaxDistanceToGo=0;        
    2196:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <MaxDistanceToGo>
    219a:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <MaxDistanceToGo+0x1>
    219e:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <MaxDistanceToGo+0x2>
    21a2:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    21a6:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    21aa:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    21ae:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    21b2:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
            DistanceToGo1=0;  
    21b6:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    21ba:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    21be:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    21c2:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
          }
         }
       }
   } 
}
    21c6:	1d c0       	rjmp	.+58     	; 0x2202 <__vector_83+0x2b4>
   {  
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routine)\r\n");  
       //printf("LIM POS X: %u\r\n",LIM_NEG1);            
       if(!DIR1 && !LIM_NEG1)       
       {
         if(AxisIsMoving1) 
    21c8:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    21cc:	81 11       	cpse	r24, r1
    21ce:	d5 ce       	rjmp	.-598    	; 0x1f7a <__vector_83+0x2c>
    21d0:	fa ce       	rjmp	.-524    	; 0x1fc6 <__vector_83+0x78>
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routin)\r\n");    
       //printf("LIM POS X: %u\r\n",LIM_NEG1);
       if(DIR1 && !LIM_POS1)       
       {
         //printf("Axis X PLimit is Active.\r\n");
         if(AxisIsMoving1) 
    21d2:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    21d6:	81 11       	cpse	r24, r1
    21d8:	03 cf       	rjmp	.-506    	; 0x1fe0 <__vector_83+0x92>
    21da:	28 cf       	rjmp	.-432    	; 0x202c <__vector_83+0xde>
  //------------------------------------------- 
   if(Axes[1].HardwareLimitNegIsActive)  
   {
       if(!DIR2 && !LIM_NEG2)       
       { 
         if(AxisIsMoving2)
    21dc:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    21e0:	81 11       	cpse	r24, r1
    21e2:	31 cf       	rjmp	.-414    	; 0x2046 <__vector_83+0xf8>
    21e4:	56 cf       	rjmp	.-340    	; 0x2092 <__vector_83+0x144>
   
   if(Axes[1].HardwareLimitPosIsActive)
   {
       if(DIR2 && !LIM_POS2)       
       { 
         if(AxisIsMoving2)
    21e6:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    21ea:	81 11       	cpse	r24, r1
    21ec:	5f cf       	rjmp	.-322    	; 0x20ac <__vector_83+0x15e>
    21ee:	84 cf       	rjmp	.-248    	; 0x20f8 <__vector_83+0x1aa>
   //----------------------------------------------- 
   if(Axes[2].HardwareLimitNegIsActive)
   {
       if(!DIR3 && !LIM_NEG3)       
       {
         if(AxisIsMoving3)
    21f0:	80 91 5a 27 	lds	r24, 0x275A	; 0x80275a <AxisIsMoving3>
    21f4:	81 11       	cpse	r24, r1
    21f6:	8d cf       	rjmp	.-230    	; 0x2112 <__vector_83+0x1c4>
    21f8:	b2 cf       	rjmp	.-156    	; 0x215e <__vector_83+0x210>
   
   if(Axes[2].HardwareLimitPosIsActive)
   {
       if(DIR3 && !LIM_POS3)       
       {
         if(AxisIsMoving3)
    21fa:	80 91 5a 27 	lds	r24, 0x275A	; 0x80275a <AxisIsMoving3>
    21fe:	81 11       	cpse	r24, r1
    2200:	bc cf       	rjmp	.-136    	; 0x217a <__vector_83+0x22c>
            DistanceToGo1=0;  
          }
         }
       }
   } 
}
    2202:	8f 91       	pop	r24
    2204:	0f 90       	pop	r0
    2206:	08 be       	out	0x38, r0	; 56
    2208:	0f 90       	pop	r0
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	0f 90       	pop	r0
    220e:	1f 90       	pop	r1
    2210:	18 95       	reti

00002212 <_Z6PRGExev>:


// run a single block the command will be in the CMDPRGList structure
// the structure will load in Main program
void PRGExe()
{
    2212:	4f 92       	push	r4
    2214:	5f 92       	push	r5
    2216:	6f 92       	push	r6
    2218:	7f 92       	push	r7
    221a:	8f 92       	push	r8
    221c:	9f 92       	push	r9
    221e:	af 92       	push	r10
    2220:	bf 92       	push	r11
    2222:	cf 92       	push	r12
    2224:	df 92       	push	r13
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	28 97       	sbiw	r28, 0x08	; 8
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	de bf       	out	0x3e, r29	; 62
 switch (CMDPRGlist.Mode) 
    223c:	80 91 55 28 	lds	r24, 0x2855	; 0x802855 <CMDPRGlist+0x3>
    2240:	8e 30       	cpi	r24, 0x0E	; 14
    2242:	09 f4       	brne	.+2      	; 0x2246 <_Z6PRGExev+0x34>
    2244:	9f c2       	rjmp	.+1342   	; 0x2784 <_Z6PRGExev+0x572>
    2246:	58 f4       	brcc	.+22     	; 0x225e <_Z6PRGExev+0x4c>
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	09 f4       	brne	.+2      	; 0x224e <_Z6PRGExev+0x3c>
    224c:	de c0       	rjmp	.+444    	; 0x240a <_Z6PRGExev+0x1f8>
    224e:	c8 f0       	brcs	.+50     	; 0x2282 <_Z6PRGExev+0x70>
    2250:	8c 30       	cpi	r24, 0x0C	; 12
    2252:	09 f4       	brne	.+2      	; 0x2256 <_Z6PRGExev+0x44>
    2254:	96 c1       	rjmp	.+812    	; 0x2582 <_Z6PRGExev+0x370>
    2256:	8d 30       	cpi	r24, 0x0D	; 13
    2258:	09 f4       	brne	.+2      	; 0x225c <_Z6PRGExev+0x4a>
    225a:	63 c2       	rjmp	.+1222   	; 0x2722 <_Z6PRGExev+0x510>
    225c:	8d c6       	rjmp	.+3354   	; 0x2f78 <_Z6PRGExev+0xd66>
    225e:	8a 35       	cpi	r24, 0x5A	; 90
    2260:	09 f4       	brne	.+2      	; 0x2264 <_Z6PRGExev+0x52>
    2262:	cd c4       	rjmp	.+2458   	; 0x2bfe <_Z6PRGExev+0x9ec>
    2264:	38 f4       	brcc	.+14     	; 0x2274 <_Z6PRGExev+0x62>
    2266:	81 35       	cpi	r24, 0x51	; 81
    2268:	09 f4       	brne	.+2      	; 0x226c <_Z6PRGExev+0x5a>
    226a:	bd c4       	rjmp	.+2426   	; 0x2be6 <_Z6PRGExev+0x9d4>
    226c:	82 35       	cpi	r24, 0x52	; 82
    226e:	09 f4       	brne	.+2      	; 0x2272 <_Z6PRGExev+0x60>
    2270:	c0 c4       	rjmp	.+2432   	; 0x2bf2 <_Z6PRGExev+0x9e0>
    2272:	82 c6       	rjmp	.+3332   	; 0x2f78 <_Z6PRGExev+0xd66>
    2274:	84 36       	cpi	r24, 0x64	; 100
    2276:	09 f4       	brne	.+2      	; 0x227a <_Z6PRGExev+0x68>
    2278:	2f c6       	rjmp	.+3166   	; 0x2ed8 <_Z6PRGExev+0xcc6>
    227a:	85 36       	cpi	r24, 0x65	; 101
    227c:	09 f4       	brne	.+2      	; 0x2280 <_Z6PRGExev+0x6e>
    227e:	35 c6       	rjmp	.+3178   	; 0x2eea <_Z6PRGExev+0xcd8>
    2280:	7b c6       	rjmp	.+3318   	; 0x2f78 <_Z6PRGExev+0xd66>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    2282:	e0 e0       	ldi	r30, 0x00	; 0
    2284:	f8 e0       	ldi	r31, 0x08	; 8
    2286:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    2288:	8c e0       	ldi	r24, 0x0C	; 12
    228a:	81 87       	std	Z+9, r24	; 0x09
 {   
    case 0 :  //Acceleration Mode
    {
        tc0_disable(&TCC0); 
            
        Ma1 = CMDPRGlist.Speed1Ma1;                
    228c:	e2 e5       	ldi	r30, 0x52	; 82
    228e:	f8 e2       	ldi	r31, 0x28	; 40
    2290:	84 89       	ldd	r24, Z+20	; 0x14
    2292:	95 89       	ldd	r25, Z+21	; 0x15
    2294:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <Ma1>
    2298:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <Ma1+0x1>
        Ma2 = CMDPRGlist.Speed2Ma2;   
    229c:	80 8d       	ldd	r24, Z+24	; 0x18
    229e:	91 8d       	ldd	r25, Z+25	; 0x19
    22a0:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <Ma2>
    22a4:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <Ma2+0x1>
        Ma3 = CMDPRGlist.Speed3Ma3;
    22a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    22aa:	95 8d       	ldd	r25, Z+29	; 0x1d
    22ac:	80 93 40 27 	sts	0x2740, r24	; 0x802740 <Ma3>
    22b0:	90 93 41 27 	sts	0x2741, r25	; 0x802741 <Ma3+0x1>
                    
                    
        MaxSpeed = CMDPRGlist.MaxSpeed;
    22b4:	80 a1       	ldd	r24, Z+32	; 0x20
    22b6:	91 a1       	ldd	r25, Z+33	; 0x21
    22b8:	a2 a1       	ldd	r26, Z+34	; 0x22
    22ba:	b3 a1       	ldd	r27, Z+35	; 0x23
    22bc:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    22c0:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    22c4:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    22c8:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
        ACCSpeedINT = CMDPRGlist.ACCSpeedINT;
    22cc:	80 a5       	ldd	r24, Z+40	; 0x28
    22ce:	91 a5       	ldd	r25, Z+41	; 0x29
    22d0:	a2 a5       	ldd	r26, Z+42	; 0x2a
    22d2:	b3 a5       	ldd	r27, Z+43	; 0x2b
    22d4:	80 93 52 27 	sts	0x2752, r24	; 0x802752 <ACCSpeedINT>
    22d8:	90 93 53 27 	sts	0x2753, r25	; 0x802753 <ACCSpeedINT+0x1>
    22dc:	a0 93 54 27 	sts	0x2754, r26	; 0x802754 <ACCSpeedINT+0x2>
    22e0:	b0 93 55 27 	sts	0x2755, r27	; 0x802755 <ACCSpeedINT+0x3>
        DECSpeedINT = CMDPRGlist.DECSpeedINT;
    22e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    22e6:	95 a5       	ldd	r25, Z+45	; 0x2d
    22e8:	a6 a5       	ldd	r26, Z+46	; 0x2e
    22ea:	b7 a5       	ldd	r27, Z+47	; 0x2f
    22ec:	80 93 4e 27 	sts	0x274E, r24	; 0x80274e <DECSpeedINT>
    22f0:	90 93 4f 27 	sts	0x274F, r25	; 0x80274f <DECSpeedINT+0x1>
    22f4:	a0 93 50 27 	sts	0x2750, r26	; 0x802750 <DECSpeedINT+0x2>
    22f8:	b0 93 51 27 	sts	0x2751, r27	; 0x802751 <DECSpeedINT+0x3>
                    
          if(CMDPRGlist.Direction1==1)
    22fc:	81 89       	ldd	r24, Z+17	; 0x11
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	31 f4       	brne	.+12     	; 0x230e <_Z6PRGExev+0xfc>
          { 
            SET_DIR1;
    2302:	e0 e2       	ldi	r30, 0x20	; 32
    2304:	f7 e0       	ldi	r31, 0x07	; 7
    2306:	84 81       	ldd	r24, Z+4	; 0x04
    2308:	80 61       	ori	r24, 0x10	; 16
    230a:	84 83       	std	Z+4, r24	; 0x04
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <_Z6PRGExev+0x106>
          }
          else
          {
            CLR_DIR1;
    230e:	e0 e2       	ldi	r30, 0x20	; 32
    2310:	f7 e0       	ldi	r31, 0x07	; 7
    2312:	84 81       	ldd	r24, Z+4	; 0x04
    2314:	8f 7e       	andi	r24, 0xEF	; 239
    2316:	84 83       	std	Z+4, r24	; 0x04
          } 
          
          if(CMDPRGlist.Direction2==1)
    2318:	80 91 64 28 	lds	r24, 0x2864	; 0x802864 <CMDPRGlist+0x12>
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	31 f4       	brne	.+12     	; 0x232c <_Z6PRGExev+0x11a>
          { 
            SET_DIR2;
    2320:	e0 e2       	ldi	r30, 0x20	; 32
    2322:	f7 e0       	ldi	r31, 0x07	; 7
    2324:	84 81       	ldd	r24, Z+4	; 0x04
    2326:	84 60       	ori	r24, 0x04	; 4
    2328:	84 83       	std	Z+4, r24	; 0x04
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <_Z6PRGExev+0x124>
          }
          else
          {
            CLR_DIR2;
    232c:	e0 e2       	ldi	r30, 0x20	; 32
    232e:	f7 e0       	ldi	r31, 0x07	; 7
    2330:	84 81       	ldd	r24, Z+4	; 0x04
    2332:	8b 7f       	andi	r24, 0xFB	; 251
    2334:	84 83       	std	Z+4, r24	; 0x04
          } 
          
          if(CMDPRGlist.Direction3==1)
    2336:	80 91 65 28 	lds	r24, 0x2865	; 0x802865 <CMDPRGlist+0x13>
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	31 f4       	brne	.+12     	; 0x234a <_Z6PRGExev+0x138>
          { 
            SET_DIR3;
    233e:	e0 e2       	ldi	r30, 0x20	; 32
    2340:	f7 e0       	ldi	r31, 0x07	; 7
    2342:	84 81       	ldd	r24, Z+4	; 0x04
    2344:	81 60       	ori	r24, 0x01	; 1
    2346:	84 83       	std	Z+4, r24	; 0x04
    2348:	05 c0       	rjmp	.+10     	; 0x2354 <_Z6PRGExev+0x142>
          }
          else
          {
            CLR_DIR3;
    234a:	e0 e2       	ldi	r30, 0x20	; 32
    234c:	f7 e0       	ldi	r31, 0x07	; 7
    234e:	84 81       	ldd	r24, Z+4	; 0x04
    2350:	8e 7f       	andi	r24, 0xFE	; 254
    2352:	84 83       	std	Z+4, r24	; 0x04
          }
                            
//         if(CMDPRGlist.Speed1Ma1==1000) MaxDistanceToGo=CMDPRGlist.Move1;
//         if(CMDPRGlist.Speed2Ma2==1000) MaxDistanceToGo=CMDPRGlist.Move2;
//         if(CMDPRGlist.Speed3Ma3==1000) MaxDistanceToGo=CMDPRGlist.Move3;
         MaxDistanceToGo=CMDPRGlist.MaxDistanceToGo;
    2354:	e2 e5       	ldi	r30, 0x52	; 82
    2356:	f8 e2       	ldi	r31, 0x28	; 40
    2358:	84 a1       	ldd	r24, Z+36	; 0x24
    235a:	95 a1       	ldd	r25, Z+37	; 0x25
    235c:	a6 a1       	ldd	r26, Z+38	; 0x26
    235e:	b7 a1       	ldd	r27, Z+39	; 0x27
    2360:	80 93 a8 27 	sts	0x27A8, r24	; 0x8027a8 <MaxDistanceToGo>
    2364:	90 93 a9 27 	sts	0x27A9, r25	; 0x8027a9 <MaxDistanceToGo+0x1>
    2368:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <MaxDistanceToGo+0x2>
    236c:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <MaxDistanceToGo+0x3>
//         else
//         {
//              AccDTG = MaxDistanceToGo - AccDTG;
//         }
            
        AccDTG=CMDPRGlist.ACCDTG;
    2370:	80 a9       	ldd	r24, Z+48	; 0x30
    2372:	91 a9       	ldd	r25, Z+49	; 0x31
    2374:	a2 a9       	ldd	r26, Z+50	; 0x32
    2376:	b3 a9       	ldd	r27, Z+51	; 0x33
    2378:	80 93 98 27 	sts	0x2798, r24	; 0x802798 <AccDTG>
    237c:	90 93 99 27 	sts	0x2799, r25	; 0x802799 <AccDTG+0x1>
    2380:	a0 93 9a 27 	sts	0x279A, r26	; 0x80279a <AccDTG+0x2>
    2384:	b0 93 9b 27 	sts	0x279B, r27	; 0x80279b <AccDTG+0x3>
        DecDTG=CMDPRGlist.DECDTG;
    2388:	84 a9       	ldd	r24, Z+52	; 0x34
    238a:	95 a9       	ldd	r25, Z+53	; 0x35
    238c:	a6 a9       	ldd	r26, Z+54	; 0x36
    238e:	b7 a9       	ldd	r27, Z+55	; 0x37
    2390:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <DecDTG>
    2394:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <DecDTG+0x1>
    2398:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <DecDTG+0x2>
    239c:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <DecDTG+0x3>
                    
        DistanceToGo1 = CMDPRGlist.Move1;
    23a0:	85 81       	ldd	r24, Z+5	; 0x05
    23a2:	96 81       	ldd	r25, Z+6	; 0x06
    23a4:	a7 81       	ldd	r26, Z+7	; 0x07
    23a6:	b0 85       	ldd	r27, Z+8	; 0x08
    23a8:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <DistanceToGo1>
    23ac:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <DistanceToGo1+0x1>
    23b0:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <DistanceToGo1+0x2>
    23b4:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <DistanceToGo1+0x3>
        DistanceToGo2 = CMDPRGlist.Move2;
    23b8:	81 85       	ldd	r24, Z+9	; 0x09
    23ba:	92 85       	ldd	r25, Z+10	; 0x0a
    23bc:	a3 85       	ldd	r26, Z+11	; 0x0b
    23be:	b4 85       	ldd	r27, Z+12	; 0x0c
    23c0:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <DistanceToGo2>
    23c4:	90 93 a1 27 	sts	0x27A1, r25	; 0x8027a1 <DistanceToGo2+0x1>
    23c8:	a0 93 a2 27 	sts	0x27A2, r26	; 0x8027a2 <DistanceToGo2+0x2>
    23cc:	b0 93 a3 27 	sts	0x27A3, r27	; 0x8027a3 <DistanceToGo2+0x3>
        DistanceToGo3 = CMDPRGlist.Move3;
    23d0:	85 85       	ldd	r24, Z+13	; 0x0d
    23d2:	96 85       	ldd	r25, Z+14	; 0x0e
    23d4:	a7 85       	ldd	r26, Z+15	; 0x0f
    23d6:	b0 89       	ldd	r27, Z+16	; 0x10
    23d8:	80 93 9c 27 	sts	0x279C, r24	; 0x80279c <DistanceToGo3>
    23dc:	90 93 9d 27 	sts	0x279D, r25	; 0x80279d <DistanceToGo3+0x1>
    23e0:	a0 93 9e 27 	sts	0x279E, r26	; 0x80279e <DistanceToGo3+0x2>
    23e4:	b0 93 9f 27 	sts	0x279F, r27	; 0x80279f <DistanceToGo3+0x3>
                    
        CurSpeedFrq = 0;                
    23e8:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    23ec:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    23f0:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    23f4:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
        tcc0_init(); 
    23f8:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z9tcc0_initv>
        TCC0.CCA = 0XFFFF;
    23fc:	8f ef       	ldi	r24, 0xFF	; 255
    23fe:	9f ef       	ldi	r25, 0xFF	; 255
    2400:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2404:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
//        ACC = 1;      
        
        break;                
    2408:	b7 c5       	rjmp	.+2926   	; 0x2f78 <_Z6PRGExev+0xd66>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    240a:	e0 e0       	ldi	r30, 0x00	; 0
    240c:	f8 e0       	ldi	r31, 0x08	; 8
    240e:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    2410:	8c e0       	ldi	r24, 0x0C	; 12
    2412:	81 87       	std	Z+9, r24	; 0x09
    }
    case 1 : // With out ACC Mode
    {        
        tc0_disable(&TCC0);
        Ma1 = CMDPRGlist.Speed1Ma1;
    2414:	e2 e5       	ldi	r30, 0x52	; 82
    2416:	f8 e2       	ldi	r31, 0x28	; 40
    2418:	84 89       	ldd	r24, Z+20	; 0x14
    241a:	95 89       	ldd	r25, Z+21	; 0x15
    241c:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <Ma1>
    2420:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <Ma1+0x1>
        Ma2 = CMDPRGlist.Speed2Ma2;
    2424:	80 8d       	ldd	r24, Z+24	; 0x18
    2426:	91 8d       	ldd	r25, Z+25	; 0x19
    2428:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <Ma2>
    242c:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <Ma2+0x1>
        Ma3 = CMDPRGlist.Speed3Ma3;
    2430:	84 8d       	ldd	r24, Z+28	; 0x1c
    2432:	95 8d       	ldd	r25, Z+29	; 0x1d
    2434:	80 93 40 27 	sts	0x2740, r24	; 0x802740 <Ma3>
    2438:	90 93 41 27 	sts	0x2741, r25	; 0x802741 <Ma3+0x1>
          
        MaxSpeed = CMDPRGlist.MaxSpeed;
    243c:	60 a1       	ldd	r22, Z+32	; 0x20
    243e:	71 a1       	ldd	r23, Z+33	; 0x21
    2440:	82 a1       	ldd	r24, Z+34	; 0x22
    2442:	93 a1       	ldd	r25, Z+35	; 0x23
    2444:	60 93 81 27 	sts	0x2781, r22	; 0x802781 <MaxSpeed>
    2448:	70 93 82 27 	sts	0x2782, r23	; 0x802782 <MaxSpeed+0x1>
    244c:	80 93 83 27 	sts	0x2783, r24	; 0x802783 <MaxSpeed+0x2>
    2450:	90 93 84 27 	sts	0x2784, r25	; 0x802784 <MaxSpeed+0x3>
                    
        if(CMDPRGlist.Direction1==1)
    2454:	21 89       	ldd	r18, Z+17	; 0x11
    2456:	21 30       	cpi	r18, 0x01	; 1
    2458:	31 f4       	brne	.+12     	; 0x2466 <_Z6PRGExev+0x254>
        { 
         SET_DIR1;
    245a:	e0 e2       	ldi	r30, 0x20	; 32
    245c:	f7 e0       	ldi	r31, 0x07	; 7
    245e:	24 81       	ldd	r18, Z+4	; 0x04
    2460:	20 61       	ori	r18, 0x10	; 16
    2462:	24 83       	std	Z+4, r18	; 0x04
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <_Z6PRGExev+0x25e>
        }
        else
        {
         CLR_DIR1;
    2466:	e0 e2       	ldi	r30, 0x20	; 32
    2468:	f7 e0       	ldi	r31, 0x07	; 7
    246a:	24 81       	ldd	r18, Z+4	; 0x04
    246c:	2f 7e       	andi	r18, 0xEF	; 239
    246e:	24 83       	std	Z+4, r18	; 0x04
        } 
              
        if(CMDPRGlist.Direction2==1)
    2470:	20 91 64 28 	lds	r18, 0x2864	; 0x802864 <CMDPRGlist+0x12>
    2474:	21 30       	cpi	r18, 0x01	; 1
    2476:	31 f4       	brne	.+12     	; 0x2484 <_Z6PRGExev+0x272>
        { 
         SET_DIR2;
    2478:	e0 e2       	ldi	r30, 0x20	; 32
    247a:	f7 e0       	ldi	r31, 0x07	; 7
    247c:	24 81       	ldd	r18, Z+4	; 0x04
    247e:	24 60       	ori	r18, 0x04	; 4
    2480:	24 83       	std	Z+4, r18	; 0x04
    2482:	05 c0       	rjmp	.+10     	; 0x248e <_Z6PRGExev+0x27c>
        }
        else
        {
          CLR_DIR2;
    2484:	e0 e2       	ldi	r30, 0x20	; 32
    2486:	f7 e0       	ldi	r31, 0x07	; 7
    2488:	24 81       	ldd	r18, Z+4	; 0x04
    248a:	2b 7f       	andi	r18, 0xFB	; 251
    248c:	24 83       	std	Z+4, r18	; 0x04
        }  
              
        if(CMDPRGlist.Direction3==1)
    248e:	20 91 65 28 	lds	r18, 0x2865	; 0x802865 <CMDPRGlist+0x13>
    2492:	21 30       	cpi	r18, 0x01	; 1
    2494:	31 f4       	brne	.+12     	; 0x24a2 <_Z6PRGExev+0x290>
        { 
         SET_DIR3;
    2496:	e0 e2       	ldi	r30, 0x20	; 32
    2498:	f7 e0       	ldi	r31, 0x07	; 7
    249a:	24 81       	ldd	r18, Z+4	; 0x04
    249c:	21 60       	ori	r18, 0x01	; 1
    249e:	24 83       	std	Z+4, r18	; 0x04
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <_Z6PRGExev+0x29a>
        }
        else
        {
         CLR_DIR3;
    24a2:	e0 e2       	ldi	r30, 0x20	; 32
    24a4:	f7 e0       	ldi	r31, 0x07	; 7
    24a6:	24 81       	ldd	r18, Z+4	; 0x04
    24a8:	2e 7f       	andi	r18, 0xFE	; 254
    24aa:	24 83       	std	Z+4, r18	; 0x04
        }                     
    				
        AccDTG = 0;
    24ac:	10 92 98 27 	sts	0x2798, r1	; 0x802798 <AccDTG>
    24b0:	10 92 99 27 	sts	0x2799, r1	; 0x802799 <AccDTG+0x1>
    24b4:	10 92 9a 27 	sts	0x279A, r1	; 0x80279a <AccDTG+0x2>
    24b8:	10 92 9b 27 	sts	0x279B, r1	; 0x80279b <AccDTG+0x3>
        DecDTG = 0;
    24bc:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <DecDTG>
    24c0:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <DecDTG+0x1>
    24c4:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <DecDTG+0x2>
    24c8:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <DecDTG+0x3>
                    
        DistanceToGo1 = CMDPRGlist.Move1;
    24cc:	e2 e5       	ldi	r30, 0x52	; 82
    24ce:	f8 e2       	ldi	r31, 0x28	; 40
    24d0:	05 81       	ldd	r16, Z+5	; 0x05
    24d2:	16 81       	ldd	r17, Z+6	; 0x06
    24d4:	27 81       	ldd	r18, Z+7	; 0x07
    24d6:	30 85       	ldd	r19, Z+8	; 0x08
    24d8:	00 93 a4 27 	sts	0x27A4, r16	; 0x8027a4 <DistanceToGo1>
    24dc:	10 93 a5 27 	sts	0x27A5, r17	; 0x8027a5 <DistanceToGo1+0x1>
    24e0:	20 93 a6 27 	sts	0x27A6, r18	; 0x8027a6 <DistanceToGo1+0x2>
    24e4:	30 93 a7 27 	sts	0x27A7, r19	; 0x8027a7 <DistanceToGo1+0x3>
        DistanceToGo2 = CMDPRGlist.Move2;
    24e8:	01 85       	ldd	r16, Z+9	; 0x09
    24ea:	12 85       	ldd	r17, Z+10	; 0x0a
    24ec:	23 85       	ldd	r18, Z+11	; 0x0b
    24ee:	34 85       	ldd	r19, Z+12	; 0x0c
    24f0:	00 93 a0 27 	sts	0x27A0, r16	; 0x8027a0 <DistanceToGo2>
    24f4:	10 93 a1 27 	sts	0x27A1, r17	; 0x8027a1 <DistanceToGo2+0x1>
    24f8:	20 93 a2 27 	sts	0x27A2, r18	; 0x8027a2 <DistanceToGo2+0x2>
    24fc:	30 93 a3 27 	sts	0x27A3, r19	; 0x8027a3 <DistanceToGo2+0x3>
        DistanceToGo3 = CMDPRGlist.Move3;
    2500:	05 85       	ldd	r16, Z+13	; 0x0d
    2502:	16 85       	ldd	r17, Z+14	; 0x0e
    2504:	27 85       	ldd	r18, Z+15	; 0x0f
    2506:	30 89       	ldd	r19, Z+16	; 0x10
    2508:	00 93 9c 27 	sts	0x279C, r16	; 0x80279c <DistanceToGo3>
    250c:	10 93 9d 27 	sts	0x279D, r17	; 0x80279d <DistanceToGo3+0x1>
    2510:	20 93 9e 27 	sts	0x279E, r18	; 0x80279e <DistanceToGo3+0x2>
    2514:	30 93 9f 27 	sts	0x279F, r19	; 0x80279f <DistanceToGo3+0x3>
                    
        CurSpeedFrq = MaxSpeed;
    2518:	60 93 56 27 	sts	0x2756, r22	; 0x802756 <CurSpeedFrq>
    251c:	70 93 57 27 	sts	0x2757, r23	; 0x802757 <CurSpeedFrq+0x1>
    2520:	80 93 58 27 	sts	0x2758, r24	; 0x802758 <CurSpeedFrq+0x2>
    2524:	90 93 59 27 	sts	0x2759, r25	; 0x802759 <CurSpeedFrq+0x3>
        ACC = 0;
    2528:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <ACC>
        DEC = 0;
    252c:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <DEC>
        TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);   
    2530:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    2534:	9b 01       	movw	r18, r22
    2536:	ac 01       	movw	r20, r24
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	8a e7       	ldi	r24, 0x7A	; 122
    253e:	96 e4       	ldi	r25, 0x46	; 70
    2540:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    2544:	60 93 3c 27 	sts	0x273C, r22	; 0x80273c <TimerMainPeriod>
    2548:	70 93 3d 27 	sts	0x273D, r23	; 0x80273d <TimerMainPeriod+0x1>
    254c:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <TimerMainPeriod+0x2>
    2550:	90 93 3f 27 	sts	0x273F, r25	; 0x80273f <TimerMainPeriod+0x3>
        tcc0_init();   
    2554:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z9tcc0_initv>
        TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	54 e4       	ldi	r21, 0x44	; 68
    2560:	60 91 3c 27 	lds	r22, 0x273C	; 0x80273c <TimerMainPeriod>
    2564:	70 91 3d 27 	lds	r23, 0x273D	; 0x80273d <TimerMainPeriod+0x1>
    2568:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <TimerMainPeriod+0x2>
    256c:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <TimerMainPeriod+0x3>
    2570:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    2574:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    2578:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    257c:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
        break;				
    2580:	fb c4       	rjmp	.+2550   	; 0x2f78 <_Z6PRGExev+0xd66>
    }			
    case 12: //Go to Refrence
    { 
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
    2582:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    2586:	81 11       	cpse	r24, r1
    2588:	0e c0       	rjmp	.+28     	; 0x25a6 <_Z6PRGExev+0x394>
    258a:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <AxisIsMoving2>
    258e:	91 11       	cpse	r25, r1
    2590:	0a c0       	rjmp	.+20     	; 0x25a6 <_Z6PRGExev+0x394>
    2592:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    2596:	21 e0       	ldi	r18, 0x01	; 1
    2598:	91 11       	cpse	r25, r1
    259a:	01 c0       	rjmp	.+2      	; 0x259e <_Z6PRGExev+0x38c>
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
        while (AxisMoving == 1) 
    25a2:	99 23       	and	r25, r25
    25a4:	99 f0       	breq	.+38     	; 0x25cc <_Z6PRGExev+0x3ba>
    25a6:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <AxisIsMoving2>
    25aa:	91 11       	cpse	r25, r1
    25ac:	07 c0       	rjmp	.+14     	; 0x25bc <_Z6PRGExev+0x3aa>
    25ae:	21 e0       	ldi	r18, 0x01	; 1
    25b0:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    25b4:	91 11       	cpse	r25, r1
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <_Z6PRGExev+0x3ac>
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <_Z6PRGExev+0x3ac>
    25bc:	21 e0       	ldi	r18, 0x01	; 1
    25be:	92 2f       	mov	r25, r18
        {
         AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    25c0:	81 11       	cpse	r24, r1
    25c2:	fe cf       	rjmp	.-4      	; 0x25c0 <_Z6PRGExev+0x3ae>
        break;				
    }			
    case 12: //Go to Refrence
    { 
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
        while (AxisMoving == 1) 
    25c4:	91 11       	cpse	r25, r1
    25c6:	fc cf       	rjmp	.-8      	; 0x25c0 <_Z6PRGExev+0x3ae>
    25c8:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
        {
         AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
        }   
      
        if(RefDir1==0)
    25cc:	80 91 93 27 	lds	r24, 0x2793	; 0x802793 <RefDir1>
    25d0:	81 11       	cpse	r24, r1
    25d2:	06 c0       	rjmp	.+12     	; 0x25e0 <_Z6PRGExev+0x3ce>
        {
          CLR_DIR1;
    25d4:	e0 e2       	ldi	r30, 0x20	; 32
    25d6:	f7 e0       	ldi	r31, 0x07	; 7
    25d8:	84 81       	ldd	r24, Z+4	; 0x04
    25da:	8f 7e       	andi	r24, 0xEF	; 239
    25dc:	84 83       	std	Z+4, r24	; 0x04
    25de:	07 c0       	rjmp	.+14     	; 0x25ee <_Z6PRGExev+0x3dc>
        }
        else if(RefDir1==1)
    25e0:	81 30       	cpi	r24, 0x01	; 1
    25e2:	29 f4       	brne	.+10     	; 0x25ee <_Z6PRGExev+0x3dc>
        {
          SET_DIR1;
    25e4:	e0 e2       	ldi	r30, 0x20	; 32
    25e6:	f7 e0       	ldi	r31, 0x07	; 7
    25e8:	84 81       	ldd	r24, Z+4	; 0x04
    25ea:	80 61       	ori	r24, 0x10	; 16
    25ec:	84 83       	std	Z+4, r24	; 0x04
        } 
      
        if(RefDir2==0)
    25ee:	80 91 92 27 	lds	r24, 0x2792	; 0x802792 <RefDir2>
    25f2:	81 11       	cpse	r24, r1
    25f4:	06 c0       	rjmp	.+12     	; 0x2602 <_Z6PRGExev+0x3f0>
        {
          CLR_DIR2;
    25f6:	e0 e2       	ldi	r30, 0x20	; 32
    25f8:	f7 e0       	ldi	r31, 0x07	; 7
    25fa:	84 81       	ldd	r24, Z+4	; 0x04
    25fc:	8b 7f       	andi	r24, 0xFB	; 251
    25fe:	84 83       	std	Z+4, r24	; 0x04
    2600:	07 c0       	rjmp	.+14     	; 0x2610 <_Z6PRGExev+0x3fe>
        }
        else if(RefDir2==1)
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	29 f4       	brne	.+10     	; 0x2610 <_Z6PRGExev+0x3fe>
        {
          SET_DIR2;
    2606:	e0 e2       	ldi	r30, 0x20	; 32
    2608:	f7 e0       	ldi	r31, 0x07	; 7
    260a:	84 81       	ldd	r24, Z+4	; 0x04
    260c:	84 60       	ori	r24, 0x04	; 4
    260e:	84 83       	std	Z+4, r24	; 0x04
        }
      
        if(RefDir3==0)
    2610:	80 91 91 27 	lds	r24, 0x2791	; 0x802791 <RefDir3>
    2614:	81 11       	cpse	r24, r1
    2616:	06 c0       	rjmp	.+12     	; 0x2624 <_Z6PRGExev+0x412>
        {
          CLR_DIR3;
    2618:	e0 e2       	ldi	r30, 0x20	; 32
    261a:	f7 e0       	ldi	r31, 0x07	; 7
    261c:	84 81       	ldd	r24, Z+4	; 0x04
    261e:	8e 7f       	andi	r24, 0xFE	; 254
    2620:	84 83       	std	Z+4, r24	; 0x04
    2622:	07 c0       	rjmp	.+14     	; 0x2632 <_Z6PRGExev+0x420>
        }
        else if(RefDir3==1)
    2624:	81 30       	cpi	r24, 0x01	; 1
    2626:	29 f4       	brne	.+10     	; 0x2632 <_Z6PRGExev+0x420>
        {
          SET_DIR3;
    2628:	e0 e2       	ldi	r30, 0x20	; 32
    262a:	f7 e0       	ldi	r31, 0x07	; 7
    262c:	84 81       	ldd	r24, Z+4	; 0x04
    262e:	81 60       	ori	r24, 0x01	; 1
    2630:	84 83       	std	Z+4, r24	; 0x04
        }       
                             
        MaxSpeed=8000;                           
    2632:	80 e4       	ldi	r24, 0x40	; 64
    2634:	9f e1       	ldi	r25, 0x1F	; 31
    2636:	a0 e0       	ldi	r26, 0x00	; 0
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    263e:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    2642:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    2646:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
        
        CurSpeedFrq = MaxSpeed;
    264a:	80 93 56 27 	sts	0x2756, r24	; 0x802756 <CurSpeedFrq>
    264e:	90 93 57 27 	sts	0x2757, r25	; 0x802757 <CurSpeedFrq+0x1>
    2652:	a0 93 58 27 	sts	0x2758, r26	; 0x802758 <CurSpeedFrq+0x2>
    2656:	b0 93 59 27 	sts	0x2759, r27	; 0x802759 <CurSpeedFrq+0x3>
        ACC = 0;
    265a:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <ACC>
        DEC = 0;
    265e:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <DEC>
        TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);          
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a0 e0       	ldi	r26, 0x00	; 0
    2668:	b0 e4       	ldi	r27, 0x40	; 64
    266a:	80 93 3c 27 	sts	0x273C, r24	; 0x80273c <TimerMainPeriod>
    266e:	90 93 3d 27 	sts	0x273D, r25	; 0x80273d <TimerMainPeriod+0x1>
    2672:	a0 93 3e 27 	sts	0x273E, r26	; 0x80273e <TimerMainPeriod+0x2>
    2676:	b0 93 3f 27 	sts	0x273F, r27	; 0x80273f <TimerMainPeriod+0x3>
        RefCmd=1;
    267a:	21 e0       	ldi	r18, 0x01	; 1
    267c:	20 93 07 27 	sts	0x2707, r18	; 0x802707 <RefCmd>
        Ma1=1000; 
    2680:	88 ee       	ldi	r24, 0xE8	; 232
    2682:	93 e0       	ldi	r25, 0x03	; 3
    2684:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <Ma1>
    2688:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <Ma1+0x1>
        Ma2=1000;
    268c:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <Ma2>
    2690:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <Ma2+0x1>
        Ma3=1000;
    2694:	80 93 40 27 	sts	0x2740, r24	; 0x802740 <Ma3>
    2698:	90 93 41 27 	sts	0x2741, r25	; 0x802741 <Ma3+0x1>
        DistanceToGo1=0x7FFFFFFF;
    269c:	8f ef       	ldi	r24, 0xFF	; 255
    269e:	9f ef       	ldi	r25, 0xFF	; 255
    26a0:	af ef       	ldi	r26, 0xFF	; 255
    26a2:	bf e7       	ldi	r27, 0x7F	; 127
    26a4:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <DistanceToGo1>
    26a8:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <DistanceToGo1+0x1>
    26ac:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <DistanceToGo1+0x2>
    26b0:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <DistanceToGo1+0x3>
        DistanceToGo2=0x7FFFFFFF;
    26b4:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <DistanceToGo2>
    26b8:	90 93 a1 27 	sts	0x27A1, r25	; 0x8027a1 <DistanceToGo2+0x1>
    26bc:	a0 93 a2 27 	sts	0x27A2, r26	; 0x8027a2 <DistanceToGo2+0x2>
    26c0:	b0 93 a3 27 	sts	0x27A3, r27	; 0x8027a3 <DistanceToGo2+0x3>
        DistanceToGo3=0x7FFFFFFF;   
    26c4:	80 93 9c 27 	sts	0x279C, r24	; 0x80279c <DistanceToGo3>
    26c8:	90 93 9d 27 	sts	0x279D, r25	; 0x80279d <DistanceToGo3+0x1>
    26cc:	a0 93 9e 27 	sts	0x279E, r26	; 0x80279e <DistanceToGo3+0x2>
    26d0:	b0 93 9f 27 	sts	0x279F, r27	; 0x80279f <DistanceToGo3+0x3>
         
        tcc0_init();     
    26d4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z9tcc0_initv>
      
        TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);                    
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a e7       	ldi	r20, 0x7A	; 122
    26de:	54 e4       	ldi	r21, 0x44	; 68
    26e0:	60 91 3c 27 	lds	r22, 0x273C	; 0x80273c <TimerMainPeriod>
    26e4:	70 91 3d 27 	lds	r23, 0x273D	; 0x80273d <TimerMainPeriod+0x1>
    26e8:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <TimerMainPeriod+0x2>
    26ec:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <TimerMainPeriod+0x3>
    26f0:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    26f4:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    26f8:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    26fc:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                
        sprintf(BufferSend,"!1800\r\n"); 
    2700:	88 e0       	ldi	r24, 0x08	; 8
    2702:	e9 ed       	ldi	r30, 0xD9	; 217
    2704:	f0 e2       	ldi	r31, 0x20	; 32
    2706:	af e6       	ldi	r26, 0x6F	; 111
    2708:	b9 e2       	ldi	r27, 0x29	; 41
    270a:	01 90       	ld	r0, Z+
    270c:	0d 92       	st	X+, r0
    270e:	8a 95       	dec	r24
    2710:	e1 f7       	brne	.-8      	; 0x270a <_Z6PRGExev+0x4f8>
        Responsing=1; 
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;  
    2718:	e0 ea       	ldi	r30, 0xA0	; 160
    271a:	f6 e0       	ldi	r31, 0x06	; 6
    271c:	84 81       	ldd	r24, Z+4	; 0x04
    271e:	81 60       	ori	r24, 0x01	; 1
    2720:	84 83       	std	Z+4, r24	; 0x04
    }
    case 13:
    {
      SoftRef1=AxisPosition1; 
    2722:	80 91 c0 27 	lds	r24, 0x27C0	; 0x8027c0 <AxisPosition1>
    2726:	90 91 c1 27 	lds	r25, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    272a:	a0 91 c2 27 	lds	r26, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    272e:	b0 91 c3 27 	lds	r27, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    2732:	80 93 b4 27 	sts	0x27B4, r24	; 0x8027b4 <SoftRef1>
    2736:	90 93 b5 27 	sts	0x27B5, r25	; 0x8027b5 <SoftRef1+0x1>
    273a:	a0 93 b6 27 	sts	0x27B6, r26	; 0x8027b6 <SoftRef1+0x2>
    273e:	b0 93 b7 27 	sts	0x27B7, r27	; 0x8027b7 <SoftRef1+0x3>
      SoftRef2=AxisPosition2;
    2742:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <AxisPosition2>
    2746:	90 91 bd 27 	lds	r25, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    274a:	a0 91 be 27 	lds	r26, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    274e:	b0 91 bf 27 	lds	r27, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    2752:	80 93 b0 27 	sts	0x27B0, r24	; 0x8027b0 <SoftRef2>
    2756:	90 93 b1 27 	sts	0x27B1, r25	; 0x8027b1 <SoftRef2+0x1>
    275a:	a0 93 b2 27 	sts	0x27B2, r26	; 0x8027b2 <SoftRef2+0x2>
    275e:	b0 93 b3 27 	sts	0x27B3, r27	; 0x8027b3 <SoftRef2+0x3>
      SoftRef3=AxisPosition3;
    2762:	80 91 b8 27 	lds	r24, 0x27B8	; 0x8027b8 <AxisPosition3>
    2766:	90 91 b9 27 	lds	r25, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    276a:	a0 91 ba 27 	lds	r26, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    276e:	b0 91 bb 27 	lds	r27, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    2772:	80 93 ac 27 	sts	0x27AC, r24	; 0x8027ac <SoftRef3>
    2776:	90 93 ad 27 	sts	0x27AD, r25	; 0x8027ad <SoftRef3+0x1>
    277a:	a0 93 ae 27 	sts	0x27AE, r26	; 0x8027ae <SoftRef3+0x2>
    277e:	b0 93 af 27 	sts	0x27AF, r27	; 0x8027af <SoftRef3+0x3>
      break;
    2782:	fa c3       	rjmp	.+2036   	; 0x2f78 <_Z6PRGExev+0xd66>
    }       
    case 14:
    {
      //printf("Back to Software refrence.\r\n");
      AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    2784:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    2788:	81 11       	cpse	r24, r1
    278a:	0e c0       	rjmp	.+28     	; 0x27a8 <_Z6PRGExev+0x596>
    278c:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <AxisIsMoving2>
    2790:	91 11       	cpse	r25, r1
    2792:	0a c0       	rjmp	.+20     	; 0x27a8 <_Z6PRGExev+0x596>
    2794:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    2798:	21 e0       	ldi	r18, 0x01	; 1
    279a:	91 11       	cpse	r25, r1
    279c:	01 c0       	rjmp	.+2      	; 0x27a0 <_Z6PRGExev+0x58e>
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
      while (AxisMoving == 1) 
    27a4:	99 23       	and	r25, r25
    27a6:	99 f0       	breq	.+38     	; 0x27ce <_Z6PRGExev+0x5bc>
    27a8:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <AxisIsMoving2>
    27ac:	91 11       	cpse	r25, r1
    27ae:	07 c0       	rjmp	.+14     	; 0x27be <_Z6PRGExev+0x5ac>
    27b0:	21 e0       	ldi	r18, 0x01	; 1
    27b2:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    27b6:	91 11       	cpse	r25, r1
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <_Z6PRGExev+0x5ae>
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <_Z6PRGExev+0x5ae>
    27be:	21 e0       	ldi	r18, 0x01	; 1
    27c0:	92 2f       	mov	r25, r18
      {
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    27c2:	81 11       	cpse	r24, r1
    27c4:	fe cf       	rjmp	.-4      	; 0x27c2 <_Z6PRGExev+0x5b0>
    }       
    case 14:
    {
      //printf("Back to Software refrence.\r\n");
      AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      while (AxisMoving == 1) 
    27c6:	91 11       	cpse	r25, r1
    27c8:	fc cf       	rjmp	.-8      	; 0x27c2 <_Z6PRGExev+0x5b0>
    27ca:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
      {
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }      
      if(SoftRef1<AxisPosition1) CLR_DIR1;
    27ce:	00 91 b4 27 	lds	r16, 0x27B4	; 0x8027b4 <SoftRef1>
    27d2:	10 91 b5 27 	lds	r17, 0x27B5	; 0x8027b5 <SoftRef1+0x1>
    27d6:	20 91 b6 27 	lds	r18, 0x27B6	; 0x8027b6 <SoftRef1+0x2>
    27da:	30 91 b7 27 	lds	r19, 0x27B7	; 0x8027b7 <SoftRef1+0x3>
    27de:	c0 90 c0 27 	lds	r12, 0x27C0	; 0x8027c0 <AxisPosition1>
    27e2:	d0 90 c1 27 	lds	r13, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    27e6:	e0 90 c2 27 	lds	r14, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    27ea:	f0 90 c3 27 	lds	r15, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    27ee:	0c 15       	cp	r16, r12
    27f0:	1d 05       	cpc	r17, r13
    27f2:	2e 05       	cpc	r18, r14
    27f4:	3f 05       	cpc	r19, r15
    27f6:	2c f4       	brge	.+10     	; 0x2802 <_Z6PRGExev+0x5f0>
    27f8:	e0 e2       	ldi	r30, 0x20	; 32
    27fa:	f7 e0       	ldi	r31, 0x07	; 7
    27fc:	84 81       	ldd	r24, Z+4	; 0x04
    27fe:	8f 7e       	andi	r24, 0xEF	; 239
    2800:	84 83       	std	Z+4, r24	; 0x04
      if(SoftRef1>AxisPosition1) SET_DIR1; 
    2802:	c0 16       	cp	r12, r16
    2804:	d1 06       	cpc	r13, r17
    2806:	e2 06       	cpc	r14, r18
    2808:	f3 06       	cpc	r15, r19
    280a:	2c f4       	brge	.+10     	; 0x2816 <_Z6PRGExev+0x604>
    280c:	e0 e2       	ldi	r30, 0x20	; 32
    280e:	f7 e0       	ldi	r31, 0x07	; 7
    2810:	84 81       	ldd	r24, Z+4	; 0x04
    2812:	80 61       	ori	r24, 0x10	; 16
    2814:	84 83       	std	Z+4, r24	; 0x04
                
      if(SoftRef2<AxisPosition2) CLR_DIR2;
    2816:	40 90 b0 27 	lds	r4, 0x27B0	; 0x8027b0 <SoftRef2>
    281a:	50 90 b1 27 	lds	r5, 0x27B1	; 0x8027b1 <SoftRef2+0x1>
    281e:	60 90 b2 27 	lds	r6, 0x27B2	; 0x8027b2 <SoftRef2+0x2>
    2822:	70 90 b3 27 	lds	r7, 0x27B3	; 0x8027b3 <SoftRef2+0x3>
    2826:	40 91 bc 27 	lds	r20, 0x27BC	; 0x8027bc <AxisPosition2>
    282a:	50 91 bd 27 	lds	r21, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    282e:	60 91 be 27 	lds	r22, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    2832:	70 91 bf 27 	lds	r23, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    2836:	44 16       	cp	r4, r20
    2838:	55 06       	cpc	r5, r21
    283a:	66 06       	cpc	r6, r22
    283c:	77 06       	cpc	r7, r23
    283e:	2c f4       	brge	.+10     	; 0x284a <_Z6PRGExev+0x638>
    2840:	e0 e2       	ldi	r30, 0x20	; 32
    2842:	f7 e0       	ldi	r31, 0x07	; 7
    2844:	84 81       	ldd	r24, Z+4	; 0x04
    2846:	8b 7f       	andi	r24, 0xFB	; 251
    2848:	84 83       	std	Z+4, r24	; 0x04
      if(SoftRef2>AxisPosition2) SET_DIR2;  
    284a:	44 15       	cp	r20, r4
    284c:	55 05       	cpc	r21, r5
    284e:	66 05       	cpc	r22, r6
    2850:	77 05       	cpc	r23, r7
    2852:	2c f4       	brge	.+10     	; 0x285e <_Z6PRGExev+0x64c>
    2854:	e0 e2       	ldi	r30, 0x20	; 32
    2856:	f7 e0       	ldi	r31, 0x07	; 7
    2858:	84 81       	ldd	r24, Z+4	; 0x04
    285a:	84 60       	ori	r24, 0x04	; 4
    285c:	84 83       	std	Z+4, r24	; 0x04
            
      if(SoftRef3<AxisPosition3) CLR_DIR3;
    285e:	80 90 ac 27 	lds	r8, 0x27AC	; 0x8027ac <SoftRef3>
    2862:	90 90 ad 27 	lds	r9, 0x27AD	; 0x8027ad <SoftRef3+0x1>
    2866:	a0 90 ae 27 	lds	r10, 0x27AE	; 0x8027ae <SoftRef3+0x2>
    286a:	b0 90 af 27 	lds	r11, 0x27AF	; 0x8027af <SoftRef3+0x3>
    286e:	80 91 b8 27 	lds	r24, 0x27B8	; 0x8027b8 <AxisPosition3>
    2872:	90 91 b9 27 	lds	r25, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    2876:	a0 91 ba 27 	lds	r26, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    287a:	b0 91 bb 27 	lds	r27, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    287e:	88 16       	cp	r8, r24
    2880:	99 06       	cpc	r9, r25
    2882:	aa 06       	cpc	r10, r26
    2884:	bb 06       	cpc	r11, r27
    2886:	2c f4       	brge	.+10     	; 0x2892 <_Z6PRGExev+0x680>
    2888:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    288c:	ee 7f       	andi	r30, 0xFE	; 254
    288e:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
      if(SoftRef3>AxisPosition3) SET_DIR3;   
    2892:	88 15       	cp	r24, r8
    2894:	99 05       	cpc	r25, r9
    2896:	aa 05       	cpc	r26, r10
    2898:	bb 05       	cpc	r27, r11
    289a:	2c f4       	brge	.+10     	; 0x28a6 <_Z6PRGExev+0x694>
    289c:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    28a0:	e1 60       	ori	r30, 0x01	; 1
    28a2:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
      
      //printf("SoftRef1: %d\tSoftRef2: %d\tSoftRef3: %d\r\n",SoftRef1,SoftRef2,SoftRef3);
      DistanceToGo1=labs(AxisPosition1-SoftRef1);  
    28a6:	c0 1a       	sub	r12, r16
    28a8:	d1 0a       	sbc	r13, r17
    28aa:	e2 0a       	sbc	r14, r18
    28ac:	f3 0a       	sbc	r15, r19
    28ae:	97 01       	movw	r18, r14
    28b0:	86 01       	movw	r16, r12
    28b2:	3a f4       	brpl	.+14     	; 0x28c2 <_Z6PRGExev+0x6b0>
    28b4:	00 27       	eor	r16, r16
    28b6:	11 27       	eor	r17, r17
    28b8:	98 01       	movw	r18, r16
    28ba:	0c 19       	sub	r16, r12
    28bc:	1d 09       	sbc	r17, r13
    28be:	2e 09       	sbc	r18, r14
    28c0:	3f 09       	sbc	r19, r15
    28c2:	68 01       	movw	r12, r16
    28c4:	79 01       	movw	r14, r18
    28c6:	00 93 a4 27 	sts	0x27A4, r16	; 0x8027a4 <DistanceToGo1>
    28ca:	10 93 a5 27 	sts	0x27A5, r17	; 0x8027a5 <DistanceToGo1+0x1>
    28ce:	20 93 a6 27 	sts	0x27A6, r18	; 0x8027a6 <DistanceToGo1+0x2>
    28d2:	30 93 a7 27 	sts	0x27A7, r19	; 0x8027a7 <DistanceToGo1+0x3>
      DistanceToGo2=labs(AxisPosition2-SoftRef2); 
    28d6:	44 19       	sub	r20, r4
    28d8:	55 09       	sbc	r21, r5
    28da:	66 09       	sbc	r22, r6
    28dc:	77 09       	sbc	r23, r7
    28de:	8a 01       	movw	r16, r20
    28e0:	9b 01       	movw	r18, r22
    28e2:	3a f4       	brpl	.+14     	; 0x28f2 <_Z6PRGExev+0x6e0>
    28e4:	00 27       	eor	r16, r16
    28e6:	11 27       	eor	r17, r17
    28e8:	98 01       	movw	r18, r16
    28ea:	04 1b       	sub	r16, r20
    28ec:	15 0b       	sbc	r17, r21
    28ee:	26 0b       	sbc	r18, r22
    28f0:	37 0b       	sbc	r19, r23
    28f2:	28 01       	movw	r4, r16
    28f4:	39 01       	movw	r6, r18
    28f6:	00 93 a0 27 	sts	0x27A0, r16	; 0x8027a0 <DistanceToGo2>
    28fa:	10 93 a1 27 	sts	0x27A1, r17	; 0x8027a1 <DistanceToGo2+0x1>
    28fe:	20 93 a2 27 	sts	0x27A2, r18	; 0x8027a2 <DistanceToGo2+0x2>
    2902:	30 93 a3 27 	sts	0x27A3, r19	; 0x8027a3 <DistanceToGo2+0x3>
      DistanceToGo3=labs(AxisPosition3-SoftRef3); 
    2906:	88 19       	sub	r24, r8
    2908:	99 09       	sbc	r25, r9
    290a:	aa 09       	sbc	r26, r10
    290c:	bb 09       	sbc	r27, r11
    290e:	ac 01       	movw	r20, r24
    2910:	bd 01       	movw	r22, r26
    2912:	3a f4       	brpl	.+14     	; 0x2922 <_Z6PRGExev+0x710>
    2914:	44 27       	eor	r20, r20
    2916:	55 27       	eor	r21, r21
    2918:	ba 01       	movw	r22, r20
    291a:	48 1b       	sub	r20, r24
    291c:	59 0b       	sbc	r21, r25
    291e:	6a 0b       	sbc	r22, r26
    2920:	7b 0b       	sbc	r23, r27
    2922:	49 83       	std	Y+1, r20	; 0x01
    2924:	5a 83       	std	Y+2, r21	; 0x02
    2926:	6b 83       	std	Y+3, r22	; 0x03
    2928:	7c 83       	std	Y+4, r23	; 0x04
    292a:	40 93 9c 27 	sts	0x279C, r20	; 0x80279c <DistanceToGo3>
    292e:	50 93 9d 27 	sts	0x279D, r21	; 0x80279d <DistanceToGo3+0x1>
    2932:	60 93 9e 27 	sts	0x279E, r22	; 0x80279e <DistanceToGo3+0x2>
    2936:	70 93 9f 27 	sts	0x279F, r23	; 0x80279f <DistanceToGo3+0x3>
      //printf("DistanceToGo1: %d\tDistanceToGo2: %d\tDistanceToGo3: %d\r\n",DistanceToGo1,DistanceToGo2,DistanceToGo3);        
      if(DistanceToGo1 > DistanceToGo2 && DistanceToGo1 > DistanceToGo3) 
    293a:	4c 14       	cp	r4, r12
    293c:	5d 04       	cpc	r5, r13
    293e:	6e 04       	cpc	r6, r14
    2940:	7f 04       	cpc	r7, r15
    2942:	9c f5       	brge	.+102    	; 0x29aa <_Z6PRGExev+0x798>
    2944:	4c 15       	cp	r20, r12
    2946:	5d 05       	cpc	r21, r13
    2948:	6e 05       	cpc	r22, r14
    294a:	7f 05       	cpc	r23, r15
    294c:	74 f5       	brge	.+92     	; 0x29aa <_Z6PRGExev+0x798>
      {
        MaxSpeed = Axes[0].MaxSpeed; 
    294e:	e1 ed       	ldi	r30, 0xD1	; 209
    2950:	f7 e2       	ldi	r31, 0x27	; 39
    2952:	85 81       	ldd	r24, Z+5	; 0x05
    2954:	96 81       	ldd	r25, Z+6	; 0x06
    2956:	a7 81       	ldd	r26, Z+7	; 0x07
    2958:	b0 85       	ldd	r27, Z+8	; 0x08
    295a:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    295e:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    2962:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    2966:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
        IACC=Axes[0].ACC; 
    296a:	81 85       	ldd	r24, Z+9	; 0x09
    296c:	92 85       	ldd	r25, Z+10	; 0x0a
    296e:	a3 85       	ldd	r26, Z+11	; 0x0b
    2970:	b4 85       	ldd	r27, Z+12	; 0x0c
    2972:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <IACC>
    2976:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <IACC+0x1>
    297a:	a0 93 67 27 	sts	0x2767, r26	; 0x802767 <IACC+0x2>
    297e:	b0 93 68 27 	sts	0x2768, r27	; 0x802768 <IACC+0x3>
        IDEC=Axes[0].DEC; 
    2982:	85 85       	ldd	r24, Z+13	; 0x0d
    2984:	96 85       	ldd	r25, Z+14	; 0x0e
    2986:	a7 85       	ldd	r26, Z+15	; 0x0f
    2988:	b0 89       	ldd	r27, Z+16	; 0x10
    298a:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <IDEC>
    298e:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <IDEC+0x1>
    2992:	a0 93 63 27 	sts	0x2763, r26	; 0x802763 <IDEC+0x2>
    2996:	b0 93 64 27 	sts	0x2764, r27	; 0x802764 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition1-SoftRef1);
    299a:	c0 92 a8 27 	sts	0x27A8, r12	; 0x8027a8 <MaxDistanceToGo>
    299e:	d0 92 a9 27 	sts	0x27A9, r13	; 0x8027a9 <MaxDistanceToGo+0x1>
    29a2:	e0 92 aa 27 	sts	0x27AA, r14	; 0x8027aa <MaxDistanceToGo+0x2>
    29a6:	f0 92 ab 27 	sts	0x27AB, r15	; 0x8027ab <MaxDistanceToGo+0x3>
      } 
      if(DistanceToGo2 > DistanceToGo1 && DistanceToGo2 > DistanceToGo3)  
    29aa:	c4 14       	cp	r12, r4
    29ac:	d5 04       	cpc	r13, r5
    29ae:	e6 04       	cpc	r14, r6
    29b0:	f7 04       	cpc	r15, r7
    29b2:	bc f5       	brge	.+110    	; 0x2a22 <_Z6PRGExev+0x810>
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	ab 81       	ldd	r26, Y+3	; 0x03
    29ba:	bc 81       	ldd	r27, Y+4	; 0x04
    29bc:	84 15       	cp	r24, r4
    29be:	95 05       	cpc	r25, r5
    29c0:	a6 05       	cpc	r26, r6
    29c2:	b7 05       	cpc	r27, r7
    29c4:	74 f5       	brge	.+92     	; 0x2a22 <_Z6PRGExev+0x810>
      {
        MaxSpeed = Axes[1].MaxSpeed; 
    29c6:	e1 ed       	ldi	r30, 0xD1	; 209
    29c8:	f7 e2       	ldi	r31, 0x27	; 39
    29ca:	80 a9       	ldd	r24, Z+48	; 0x30
    29cc:	91 a9       	ldd	r25, Z+49	; 0x31
    29ce:	a2 a9       	ldd	r26, Z+50	; 0x32
    29d0:	b3 a9       	ldd	r27, Z+51	; 0x33
    29d2:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    29d6:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    29da:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    29de:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
        IACC=Axes[1].ACC; 
    29e2:	84 a9       	ldd	r24, Z+52	; 0x34
    29e4:	95 a9       	ldd	r25, Z+53	; 0x35
    29e6:	a6 a9       	ldd	r26, Z+54	; 0x36
    29e8:	b7 a9       	ldd	r27, Z+55	; 0x37
    29ea:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <IACC>
    29ee:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <IACC+0x1>
    29f2:	a0 93 67 27 	sts	0x2767, r26	; 0x802767 <IACC+0x2>
    29f6:	b0 93 68 27 	sts	0x2768, r27	; 0x802768 <IACC+0x3>
        IDEC=Axes[1].DEC; 
    29fa:	80 ad       	ldd	r24, Z+56	; 0x38
    29fc:	91 ad       	ldd	r25, Z+57	; 0x39
    29fe:	a2 ad       	ldd	r26, Z+58	; 0x3a
    2a00:	b3 ad       	ldd	r27, Z+59	; 0x3b
    2a02:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <IDEC>
    2a06:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <IDEC+0x1>
    2a0a:	a0 93 63 27 	sts	0x2763, r26	; 0x802763 <IDEC+0x2>
    2a0e:	b0 93 64 27 	sts	0x2764, r27	; 0x802764 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition2-SoftRef2);
    2a12:	40 92 a8 27 	sts	0x27A8, r4	; 0x8027a8 <MaxDistanceToGo>
    2a16:	50 92 a9 27 	sts	0x27A9, r5	; 0x8027a9 <MaxDistanceToGo+0x1>
    2a1a:	60 92 aa 27 	sts	0x27AA, r6	; 0x8027aa <MaxDistanceToGo+0x2>
    2a1e:	70 92 ab 27 	sts	0x27AB, r7	; 0x8027ab <MaxDistanceToGo+0x3>
      }
      if(DistanceToGo3 > DistanceToGo1 && DistanceToGo3 > DistanceToGo2)  
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	ab 81       	ldd	r26, Y+3	; 0x03
    2a28:	bc 81       	ldd	r27, Y+4	; 0x04
    2a2a:	c8 16       	cp	r12, r24
    2a2c:	d9 06       	cpc	r13, r25
    2a2e:	ea 06       	cpc	r14, r26
    2a30:	fb 06       	cpc	r15, r27
    2a32:	0c f0       	brlt	.+2      	; 0x2a36 <_Z6PRGExev+0x824>
    2a34:	41 c0       	rjmp	.+130    	; 0x2ab8 <_Z6PRGExev+0x8a6>
    2a36:	48 16       	cp	r4, r24
    2a38:	59 06       	cpc	r5, r25
    2a3a:	6a 06       	cpc	r6, r26
    2a3c:	7b 06       	cpc	r7, r27
    2a3e:	e4 f5       	brge	.+120    	; 0x2ab8 <_Z6PRGExev+0x8a6>
      {
        MaxSpeed = Axes[2].MaxSpeed; 
    2a40:	80 91 2c 28 	lds	r24, 0x282C	; 0x80282c <Axes+0x5b>
    2a44:	90 91 2d 28 	lds	r25, 0x282D	; 0x80282d <Axes+0x5c>
    2a48:	a0 91 2e 28 	lds	r26, 0x282E	; 0x80282e <Axes+0x5d>
    2a4c:	b0 91 2f 28 	lds	r27, 0x282F	; 0x80282f <Axes+0x5e>
    2a50:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    2a54:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    2a58:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    2a5c:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
        IACC=Axes[2].ACC; 
    2a60:	80 91 30 28 	lds	r24, 0x2830	; 0x802830 <Axes+0x5f>
    2a64:	90 91 31 28 	lds	r25, 0x2831	; 0x802831 <Axes+0x60>
    2a68:	a0 91 32 28 	lds	r26, 0x2832	; 0x802832 <Axes+0x61>
    2a6c:	b0 91 33 28 	lds	r27, 0x2833	; 0x802833 <Axes+0x62>
    2a70:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <IACC>
    2a74:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <IACC+0x1>
    2a78:	a0 93 67 27 	sts	0x2767, r26	; 0x802767 <IACC+0x2>
    2a7c:	b0 93 68 27 	sts	0x2768, r27	; 0x802768 <IACC+0x3>
        IDEC=Axes[2].DEC; 
    2a80:	80 91 34 28 	lds	r24, 0x2834	; 0x802834 <Axes+0x63>
    2a84:	90 91 35 28 	lds	r25, 0x2835	; 0x802835 <Axes+0x64>
    2a88:	a0 91 36 28 	lds	r26, 0x2836	; 0x802836 <Axes+0x65>
    2a8c:	b0 91 37 28 	lds	r27, 0x2837	; 0x802837 <Axes+0x66>
    2a90:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <IDEC>
    2a94:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <IDEC+0x1>
    2a98:	a0 93 63 27 	sts	0x2763, r26	; 0x802763 <IDEC+0x2>
    2a9c:	b0 93 64 27 	sts	0x2764, r27	; 0x802764 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition3-SoftRef3);
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa4:	ab 81       	ldd	r26, Y+3	; 0x03
    2aa6:	bc 81       	ldd	r27, Y+4	; 0x04
    2aa8:	80 93 a8 27 	sts	0x27A8, r24	; 0x8027a8 <MaxDistanceToGo>
    2aac:	90 93 a9 27 	sts	0x27A9, r25	; 0x8027a9 <MaxDistanceToGo+0x1>
    2ab0:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <MaxDistanceToGo+0x2>
    2ab4:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <MaxDistanceToGo+0x3>
      }   
      //printf("MaxDTG: %d\r\n",MaxDistanceToGo);
      if(MaxSpeed>0)
    2ab8:	80 90 81 27 	lds	r8, 0x2781	; 0x802781 <MaxSpeed>
    2abc:	90 90 82 27 	lds	r9, 0x2782	; 0x802782 <MaxSpeed+0x1>
    2ac0:	a0 90 83 27 	lds	r10, 0x2783	; 0x802783 <MaxSpeed+0x2>
    2ac4:	b0 90 84 27 	lds	r11, 0x2784	; 0x802784 <MaxSpeed+0x3>
    2ac8:	18 14       	cp	r1, r8
    2aca:	19 04       	cpc	r1, r9
    2acc:	1a 04       	cpc	r1, r10
    2ace:	1b 04       	cpc	r1, r11
    2ad0:	0c f0       	brlt	.+2      	; 0x2ad4 <_Z6PRGExev+0x8c2>
    2ad2:	52 c0       	rjmp	.+164    	; 0x2b78 <_Z6PRGExev+0x966>
      {
        Ma1=(unsigned int)((float)((float)DistanceToGo1/(float)MaxDistanceToGo)*1000);
    2ad4:	60 91 a8 27 	lds	r22, 0x27A8	; 0x8027a8 <MaxDistanceToGo>
    2ad8:	70 91 a9 27 	lds	r23, 0x27A9	; 0x8027a9 <MaxDistanceToGo+0x1>
    2adc:	80 91 aa 27 	lds	r24, 0x27AA	; 0x8027aa <MaxDistanceToGo+0x2>
    2ae0:	90 91 ab 27 	lds	r25, 0x27AB	; 0x8027ab <MaxDistanceToGo+0x3>
    2ae4:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    2ae8:	6d 83       	std	Y+5, r22	; 0x05
    2aea:	7e 83       	std	Y+6, r23	; 0x06
    2aec:	8f 83       	std	Y+7, r24	; 0x07
    2aee:	98 87       	std	Y+8, r25	; 0x08
    2af0:	c7 01       	movw	r24, r14
    2af2:	b6 01       	movw	r22, r12
    2af4:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    2af8:	2d 81       	ldd	r18, Y+5	; 0x05
    2afa:	3e 81       	ldd	r19, Y+6	; 0x06
    2afc:	4f 81       	ldd	r20, Y+7	; 0x07
    2afe:	58 85       	ldd	r21, Y+8	; 0x08
    2b00:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a e7       	ldi	r20, 0x7A	; 122
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    2b10:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    2b14:	60 93 44 27 	sts	0x2744, r22	; 0x802744 <Ma1>
    2b18:	70 93 45 27 	sts	0x2745, r23	; 0x802745 <Ma1+0x1>
        Ma2=(unsigned int)((float)((float)DistanceToGo2/(float)MaxDistanceToGo)*1000);  
    2b1c:	c3 01       	movw	r24, r6
    2b1e:	b2 01       	movw	r22, r4
    2b20:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    2b24:	2d 81       	ldd	r18, Y+5	; 0x05
    2b26:	3e 81       	ldd	r19, Y+6	; 0x06
    2b28:	4f 81       	ldd	r20, Y+7	; 0x07
    2b2a:	58 85       	ldd	r21, Y+8	; 0x08
    2b2c:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a e7       	ldi	r20, 0x7A	; 122
    2b36:	54 e4       	ldi	r21, 0x44	; 68
    2b38:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    2b3c:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    2b40:	60 93 42 27 	sts	0x2742, r22	; 0x802742 <Ma2>
    2b44:	70 93 43 27 	sts	0x2743, r23	; 0x802743 <Ma2+0x1>
        Ma3=(unsigned int)((float)((float)DistanceToGo3/(float)MaxDistanceToGo)*1000); 
    2b48:	69 81       	ldd	r22, Y+1	; 0x01
    2b4a:	7a 81       	ldd	r23, Y+2	; 0x02
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b50:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    2b54:	2d 81       	ldd	r18, Y+5	; 0x05
    2b56:	3e 81       	ldd	r19, Y+6	; 0x06
    2b58:	4f 81       	ldd	r20, Y+7	; 0x07
    2b5a:	58 85       	ldd	r21, Y+8	; 0x08
    2b5c:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a e7       	ldi	r20, 0x7A	; 122
    2b66:	54 e4       	ldi	r21, 0x44	; 68
    2b68:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    2b6c:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    2b70:	60 93 40 27 	sts	0x2740, r22	; 0x802740 <Ma3>
    2b74:	70 93 41 27 	sts	0x2741, r23	; 0x802741 <Ma3+0x1>
        //printf("MaxSpeed: %d\tMa1: %d\tMa2: %d\tMa3: %d\r\n",MaxSpeed,Ma1,Ma2,Ma3);         		  
      }
      CurSpeedFrq=MaxSpeed;
    2b78:	80 92 56 27 	sts	0x2756, r8	; 0x802756 <CurSpeedFrq>
    2b7c:	90 92 57 27 	sts	0x2757, r9	; 0x802757 <CurSpeedFrq+0x1>
    2b80:	a0 92 58 27 	sts	0x2758, r10	; 0x802758 <CurSpeedFrq+0x2>
    2b84:	b0 92 59 27 	sts	0x2759, r11	; 0x802759 <CurSpeedFrq+0x3>
      ACC = 0;
    2b88:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <ACC>
      DEC = 0;
    2b8c:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <DEC>
      TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);   
    2b90:	c5 01       	movw	r24, r10
    2b92:	b4 01       	movw	r22, r8
    2b94:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    2b98:	9b 01       	movw	r18, r22
    2b9a:	ac 01       	movw	r20, r24
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	8a e7       	ldi	r24, 0x7A	; 122
    2ba2:	96 e4       	ldi	r25, 0x46	; 70
    2ba4:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    2ba8:	60 93 3c 27 	sts	0x273C, r22	; 0x80273c <TimerMainPeriod>
    2bac:	70 93 3d 27 	sts	0x273D, r23	; 0x80273d <TimerMainPeriod+0x1>
    2bb0:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <TimerMainPeriod+0x2>
    2bb4:	90 93 3f 27 	sts	0x273F, r25	; 0x80273f <TimerMainPeriod+0x3>
      tcc0_init();   
    2bb8:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z9tcc0_initv>
      TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	4a e7       	ldi	r20, 0x7A	; 122
    2bc2:	54 e4       	ldi	r21, 0x44	; 68
    2bc4:	60 91 3c 27 	lds	r22, 0x273C	; 0x80273c <TimerMainPeriod>
    2bc8:	70 91 3d 27 	lds	r23, 0x273D	; 0x80273d <TimerMainPeriod+0x1>
    2bcc:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <TimerMainPeriod+0x2>
    2bd0:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <TimerMainPeriod+0x3>
    2bd4:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    2bd8:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    2bdc:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2be0:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      break;
    2be4:	c9 c1       	rjmp	.+914    	; 0x2f78 <_Z6PRGExev+0xd66>
    {
      break;
    }
    case 81 :
    {
        DO1_SET;
    2be6:	e0 e0       	ldi	r30, 0x00	; 0
    2be8:	f7 e0       	ldi	r31, 0x07	; 7
    2bea:	84 81       	ldd	r24, Z+4	; 0x04
    2bec:	84 60       	ori	r24, 0x04	; 4
    2bee:	84 83       	std	Z+4, r24	; 0x04
        
        break;
    2bf0:	c3 c1       	rjmp	.+902    	; 0x2f78 <_Z6PRGExev+0xd66>
    } 
    case 82 :
    {
        DO1_CLR;        
    2bf2:	e0 e0       	ldi	r30, 0x00	; 0
    2bf4:	f7 e0       	ldi	r31, 0x07	; 7
    2bf6:	84 81       	ldd	r24, Z+4	; 0x04
    2bf8:	8b 7f       	andi	r24, 0xFB	; 251
    2bfa:	84 83       	std	Z+4, r24	; 0x04
        break;
    2bfc:	bd c1       	rjmp	.+890    	; 0x2f78 <_Z6PRGExev+0xd66>
    }  
    case 90: //Serial number mode
    {
      char digit;
      int di=0;
      LastPLine = CMDPRGlist.PRGLine;
    2bfe:	80 91 52 28 	lds	r24, 0x2852	; 0x802852 <CMDPRGlist>
    2c02:	90 91 53 28 	lds	r25, 0x2853	; 0x802853 <CMDPRGlist+0x1>
    2c06:	80 93 fe 26 	sts	0x26FE, r24	; 0x8026fe <LastPLine>
    2c0a:	90 93 ff 26 	sts	0x26FF, r25	; 0x8026ff <LastPLine+0x1>
        
      CurrentSerial=ReadSerial(); 
    2c0e:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10ReadSerialv>
    2c12:	60 93 fa 26 	sts	0x26FA, r22	; 0x8026fa <CurrentSerial>
    2c16:	70 93 fb 26 	sts	0x26FB, r23	; 0x8026fb <CurrentSerial+0x1>
    2c1a:	80 93 fc 26 	sts	0x26FC, r24	; 0x8026fc <CurrentSerial+0x2>
    2c1e:	90 93 fd 26 	sts	0x26FD, r25	; 0x8026fd <CurrentSerial+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c22:	9f ef       	ldi	r25, 0xFF	; 255
    2c24:	a3 ec       	ldi	r26, 0xC3	; 195
    2c26:	b9 e0       	ldi	r27, 0x09	; 9
    2c28:	91 50       	subi	r25, 0x01	; 1
    2c2a:	a0 40       	sbci	r26, 0x00	; 0
    2c2c:	b0 40       	sbci	r27, 0x00	; 0
    2c2e:	e1 f7       	brne	.-8      	; 0x2c28 <_Z6PRGExev+0xa16>
    2c30:	00 c0       	rjmp	.+0      	; 0x2c32 <_Z6PRGExev+0xa20>
    2c32:	00 00       	nop
      _delay_ms(100);      
      if(((CurrentSerial <= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 0)) || ((CurrentSerial >= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 1)))
    2c34:	00 91 8f 28 	lds	r16, 0x288F	; 0x80288f <CMDPRGlist+0x3d>
    2c38:	10 91 90 28 	lds	r17, 0x2890	; 0x802890 <CMDPRGlist+0x3e>
    2c3c:	20 91 91 28 	lds	r18, 0x2891	; 0x802891 <CMDPRGlist+0x3f>
    2c40:	30 91 92 28 	lds	r19, 0x2892	; 0x802892 <CMDPRGlist+0x40>
    2c44:	60 91 fa 26 	lds	r22, 0x26FA	; 0x8026fa <CurrentSerial>
    2c48:	70 91 fb 26 	lds	r23, 0x26FB	; 0x8026fb <CurrentSerial+0x1>
    2c4c:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <CurrentSerial+0x2>
    2c50:	90 91 fd 26 	lds	r25, 0x26FD	; 0x8026fd <CurrentSerial+0x3>
    2c54:	06 17       	cp	r16, r22
    2c56:	17 07       	cpc	r17, r23
    2c58:	28 07       	cpc	r18, r24
    2c5a:	39 07       	cpc	r19, r25
    2c5c:	50 f0       	brcs	.+20     	; 0x2c72 <_Z6PRGExev+0xa60>
    2c5e:	40 91 8a 28 	lds	r20, 0x288A	; 0x80288a <CMDPRGlist+0x38>
    2c62:	44 23       	and	r20, r20
    2c64:	59 f0       	breq	.+22     	; 0x2c7c <_Z6PRGExev+0xa6a>
    2c66:	60 17       	cp	r22, r16
    2c68:	71 07       	cpc	r23, r17
    2c6a:	82 07       	cpc	r24, r18
    2c6c:	93 07       	cpc	r25, r19
    2c6e:	08 f4       	brcc	.+2      	; 0x2c72 <_Z6PRGExev+0xa60>
    2c70:	13 c1       	rjmp	.+550    	; 0x2e98 <_Z6PRGExev+0xc86>
    2c72:	20 91 8a 28 	lds	r18, 0x288A	; 0x80288a <CMDPRGlist+0x38>
    2c76:	21 30       	cpi	r18, 0x01	; 1
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <_Z6PRGExev+0xa6a>
    2c7a:	0e c1       	rjmp	.+540    	; 0x2e98 <_Z6PRGExev+0xc86>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    2c7c:	2a e0       	ldi	r18, 0x0A	; 10
    2c7e:	40 ef       	ldi	r20, 0xF0	; 240
    2c80:	56 e2       	ldi	r21, 0x26	; 38
    2c82:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__ltoa_ncheck>
      {               
        ltoa(CurrentSerial,SerialCh,10);       
        if(CMDPRGlist.FillWithZero)
    2c86:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <CMDPRGlist+0x41>
    2c8a:	88 23       	and	r24, r24
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <_Z6PRGExev+0xa7e>
    2c8e:	3f c0       	rjmp	.+126    	; 0x2d0e <_Z6PRGExev+0xafc>
        {
          digit = CurrentSerial / 10;  
    2c90:	60 91 fa 26 	lds	r22, 0x26FA	; 0x8026fa <CurrentSerial>
    2c94:	70 91 fb 26 	lds	r23, 0x26FB	; 0x8026fb <CurrentSerial+0x1>
    2c98:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <CurrentSerial+0x2>
    2c9c:	90 91 fd 26 	lds	r25, 0x26FD	; 0x8026fd <CurrentSerial+0x3>
    2ca0:	2a e0       	ldi	r18, 0x0A	; 10
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <__udivmodsi4>
          digit++;
    2cac:	2f 5f       	subi	r18, 0xFF	; 255
          if(CMDPRGlist.DigitNumber>digit)
    2cae:	40 91 94 28 	lds	r20, 0x2894	; 0x802894 <CMDPRGlist+0x42>
    2cb2:	50 91 95 28 	lds	r21, 0x2895	; 0x802895 <CMDPRGlist+0x43>
    2cb6:	62 2f       	mov	r22, r18
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	64 17       	cp	r22, r20
    2cbc:	75 07       	cpc	r23, r21
    2cbe:	3c f5       	brge	.+78     	; 0x2d0e <_Z6PRGExev+0xafc>
          {
            for(di=digit-1;di>=0;di--)
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	3a f4       	brpl	.+14     	; 0x2cd4 <_Z6PRGExev+0xac2>
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    2cc6:	ca 01       	movw	r24, r20
    2cc8:	86 1b       	sub	r24, r22
    2cca:	97 0b       	sbc	r25, r23
    2ccc:	18 16       	cp	r1, r24
    2cce:	19 06       	cpc	r1, r25
    2cd0:	84 f0       	brlt	.+32     	; 0x2cf2 <_Z6PRGExev+0xae0>
    2cd2:	18 c0       	rjmp	.+48     	; 0x2d04 <_Z6PRGExev+0xaf2>
    2cd4:	e2 2f       	mov	r30, r18
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	e0 51       	subi	r30, 0x10	; 16
    2cda:	f9 4d       	sbci	r31, 0xD9	; 217
    2cdc:	da 01       	movw	r26, r20
    2cde:	a0 51       	subi	r26, 0x10	; 16
    2ce0:	b9 4d       	sbci	r27, 0xD9	; 217
    2ce2:	20 ef       	ldi	r18, 0xF0	; 240
    2ce4:	36 e2       	ldi	r19, 0x26	; 38
          digit++;
          if(CMDPRGlist.DigitNumber>digit)
          {
            for(di=digit-1;di>=0;di--)
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
    2ce6:	82 91       	ld	r24, -Z
    2ce8:	8e 93       	st	-X, r24
        {
          digit = CurrentSerial / 10;  
          digit++;
          if(CMDPRGlist.DigitNumber>digit)
          {
            for(di=digit-1;di>=0;di--)
    2cea:	e2 17       	cp	r30, r18
    2cec:	f3 07       	cpc	r31, r19
    2cee:	d9 f7       	brne	.-10     	; 0x2ce6 <_Z6PRGExev+0xad4>
    2cf0:	ea cf       	rjmp	.-44     	; 0x2cc6 <_Z6PRGExev+0xab4>
    2cf2:	e0 ef       	ldi	r30, 0xF0	; 240
    2cf4:	f6 e2       	ldi	r31, 0x26	; 38
    2cf6:	80 51       	subi	r24, 0x10	; 16
    2cf8:	99 4d       	sbci	r25, 0xD9	; 217
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
            {
              SerialCh[di] = '0';
    2cfa:	20 e3       	ldi	r18, 0x30	; 48
    2cfc:	21 93       	st	Z+, r18
          {
            for(di=digit-1;di>=0;di--)
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    2cfe:	8e 17       	cp	r24, r30
    2d00:	9f 07       	cpc	r25, r31
    2d02:	e1 f7       	brne	.-8      	; 0x2cfc <_Z6PRGExev+0xaea>
            {
              SerialCh[di] = '0';
            } 
            SerialCh[CMDPRGlist.DigitNumber] = '0';
    2d04:	fa 01       	movw	r30, r20
    2d06:	e0 51       	subi	r30, 0x10	; 16
    2d08:	f9 4d       	sbci	r31, 0xD9	; 217
    2d0a:	80 e3       	ldi	r24, 0x30	; 48
    2d0c:	80 83       	st	Z, r24
          }
        }
        if(CMDPRGlist.SerialCountType == 0)
    2d0e:	80 91 8a 28 	lds	r24, 0x288A	; 0x80288a <CMDPRGlist+0x38>
    2d12:	81 11       	cpse	r24, r1
    2d14:	14 c0       	rjmp	.+40     	; 0x2d3e <_Z6PRGExev+0xb2c>
        {
          CurrentSerial++;
    2d16:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <CurrentSerial>
    2d1a:	90 91 fb 26 	lds	r25, 0x26FB	; 0x8026fb <CurrentSerial+0x1>
    2d1e:	a0 91 fc 26 	lds	r26, 0x26FC	; 0x8026fc <CurrentSerial+0x2>
    2d22:	b0 91 fd 26 	lds	r27, 0x26FD	; 0x8026fd <CurrentSerial+0x3>
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	a1 1d       	adc	r26, r1
    2d2a:	b1 1d       	adc	r27, r1
    2d2c:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <CurrentSerial>
    2d30:	90 93 fb 26 	sts	0x26FB, r25	; 0x8026fb <CurrentSerial+0x1>
    2d34:	a0 93 fc 26 	sts	0x26FC, r26	; 0x8026fc <CurrentSerial+0x2>
    2d38:	b0 93 fd 26 	sts	0x26FD, r27	; 0x8026fd <CurrentSerial+0x3>
    2d3c:	13 c0       	rjmp	.+38     	; 0x2d64 <_Z6PRGExev+0xb52>
        }
        else
        {
          CurrentSerial--;
    2d3e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <CurrentSerial>
    2d42:	90 91 fb 26 	lds	r25, 0x26FB	; 0x8026fb <CurrentSerial+0x1>
    2d46:	a0 91 fc 26 	lds	r26, 0x26FC	; 0x8026fc <CurrentSerial+0x2>
    2d4a:	b0 91 fd 26 	lds	r27, 0x26FD	; 0x8026fd <CurrentSerial+0x3>
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	a1 09       	sbc	r26, r1
    2d52:	b1 09       	sbc	r27, r1
    2d54:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <CurrentSerial>
    2d58:	90 93 fb 26 	sts	0x26FB, r25	; 0x8026fb <CurrentSerial+0x1>
    2d5c:	a0 93 fc 26 	sts	0x26FC, r26	; 0x8026fc <CurrentSerial+0x2>
    2d60:	b0 93 fd 26 	sts	0x26FD, r27	; 0x8026fd <CurrentSerial+0x3>
        }      
        
        SerChIndex=0; 
    2d64:	10 92 ee 26 	sts	0x26EE, r1	; 0x8026ee <SerChIndex>
    2d68:	10 92 ef 26 	sts	0x26EF, r1	; 0x8026ef <SerChIndex+0x1>
        ContinuousRead=0;       
    2d6c:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <ContinuousRead>
        WriteSerial(CurrentSerial); 
    2d70:	60 91 fa 26 	lds	r22, 0x26FA	; 0x8026fa <CurrentSerial>
    2d74:	70 91 fb 26 	lds	r23, 0x26FB	; 0x8026fb <CurrentSerial+0x1>
    2d78:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <CurrentSerial+0x2>
    2d7c:	90 91 fd 26 	lds	r25, 0x26FD	; 0x8026fd <CurrentSerial+0x3>
    2d80:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_Z11WriteSeriall>
    2d84:	ef ef       	ldi	r30, 0xFF	; 255
    2d86:	f3 ed       	ldi	r31, 0xD3	; 211
    2d88:	20 e3       	ldi	r18, 0x30	; 48
    2d8a:	e1 50       	subi	r30, 0x01	; 1
    2d8c:	f0 40       	sbci	r31, 0x00	; 0
    2d8e:	20 40       	sbci	r18, 0x00	; 0
    2d90:	e1 f7       	brne	.-8      	; 0x2d8a <_Z6PRGExev+0xb78>
    2d92:	00 c0       	rjmp	.+0      	; 0x2d94 <_Z6PRGExev+0xb82>
    2d94:	00 00       	nop
        _delay_ms(500);
        CurrentSerial=ReadSerial(); 
    2d96:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10ReadSerialv>
    2d9a:	60 93 fa 26 	sts	0x26FA, r22	; 0x8026fa <CurrentSerial>
    2d9e:	70 93 fb 26 	sts	0x26FB, r23	; 0x8026fb <CurrentSerial+0x1>
    2da2:	80 93 fc 26 	sts	0x26FC, r24	; 0x8026fc <CurrentSerial+0x2>
    2da6:	90 93 fd 26 	sts	0x26FD, r25	; 0x8026fd <CurrentSerial+0x3>
    2daa:	8f ef       	ldi	r24, 0xFF	; 255
    2dac:	93 ec       	ldi	r25, 0xC3	; 195
    2dae:	a9 e0       	ldi	r26, 0x09	; 9
    2db0:	81 50       	subi	r24, 0x01	; 1
    2db2:	90 40       	sbci	r25, 0x00	; 0
    2db4:	a0 40       	sbci	r26, 0x00	; 0
    2db6:	e1 f7       	brne	.-8      	; 0x2db0 <_Z6PRGExev+0xb9e>
    2db8:	00 c0       	rjmp	.+0      	; 0x2dba <_Z6PRGExev+0xba8>
    2dba:	00 00       	nop
        _delay_ms(100);                     
        printf("Current Serial is %lu\r\n",CurrentSerial);
    2dbc:	80 91 fd 26 	lds	r24, 0x26FD	; 0x8026fd <CurrentSerial+0x3>
    2dc0:	8f 93       	push	r24
    2dc2:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <CurrentSerial+0x2>
    2dc6:	8f 93       	push	r24
    2dc8:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <CurrentSerial+0x1>
    2dcc:	8f 93       	push	r24
    2dce:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <CurrentSerial>
    2dd2:	8f 93       	push	r24
    2dd4:	81 ee       	ldi	r24, 0xE1	; 225
    2dd6:	90 e2       	ldi	r25, 0x20	; 32
    2dd8:	9f 93       	push	r25
    2dda:	8f 93       	push	r24
    2ddc:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
        ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100); 
    2de0:	e0 91 ee 26 	lds	r30, 0x26EE	; 0x8026ee <SerChIndex>
    2de4:	f0 91 ef 26 	lds	r31, 0x26EF	; 0x8026ef <SerChIndex+0x1>
    2de8:	e0 51       	subi	r30, 0x10	; 16
    2dea:	f9 4d       	sbci	r31, 0xD9	; 217
    2dec:	20 81       	ld	r18, Z
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	20 53       	subi	r18, 0x30	; 48
    2df2:	31 09       	sbc	r19, r1
    2df4:	c9 01       	movw	r24, r18
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	22 0f       	add	r18, r18
    2dfc:	33 1f       	adc	r19, r19
    2dfe:	22 0f       	add	r18, r18
    2e00:	33 1f       	adc	r19, r19
    2e02:	22 0f       	add	r18, r18
    2e04:	33 1f       	adc	r19, r19
    2e06:	82 0f       	add	r24, r18
    2e08:	93 1f       	adc	r25, r19
    2e0a:	8c 59       	subi	r24, 0x9C	; 156
    2e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0e:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z14ReadSubProgramj>
        printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode); 
    2e12:	80 91 55 28 	lds	r24, 0x2855	; 0x802855 <CMDPRGlist+0x3>
    2e16:	1f 92       	push	r1
    2e18:	8f 93       	push	r24
    2e1a:	80 91 53 28 	lds	r24, 0x2853	; 0x802853 <CMDPRGlist+0x1>
    2e1e:	8f 93       	push	r24
    2e20:	e2 e5       	ldi	r30, 0x52	; 82
    2e22:	f8 e2       	ldi	r31, 0x28	; 40
    2e24:	80 81       	ld	r24, Z
    2e26:	8f 93       	push	r24
    2e28:	89 ef       	ldi	r24, 0xF9	; 249
    2e2a:	90 e2       	ldi	r25, 0x20	; 32
    2e2c:	9f 93       	push	r25
    2e2e:	8f 93       	push	r24
    2e30:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
        printf("Move1:%lu\tMove2:%lu\tMove3:%lu\r\n",CMDPRGlist.Move1,CMDPRGlist.Move2,CMDPRGlist.Move3);
    2e34:	80 91 62 28 	lds	r24, 0x2862	; 0x802862 <CMDPRGlist+0x10>
    2e38:	8f 93       	push	r24
    2e3a:	80 91 61 28 	lds	r24, 0x2861	; 0x802861 <CMDPRGlist+0xf>
    2e3e:	8f 93       	push	r24
    2e40:	80 91 60 28 	lds	r24, 0x2860	; 0x802860 <CMDPRGlist+0xe>
    2e44:	8f 93       	push	r24
    2e46:	80 91 5f 28 	lds	r24, 0x285F	; 0x80285f <CMDPRGlist+0xd>
    2e4a:	8f 93       	push	r24
    2e4c:	80 91 5e 28 	lds	r24, 0x285E	; 0x80285e <CMDPRGlist+0xc>
    2e50:	8f 93       	push	r24
    2e52:	80 91 5d 28 	lds	r24, 0x285D	; 0x80285d <CMDPRGlist+0xb>
    2e56:	8f 93       	push	r24
    2e58:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <CMDPRGlist+0xa>
    2e5c:	8f 93       	push	r24
    2e5e:	80 91 5b 28 	lds	r24, 0x285B	; 0x80285b <CMDPRGlist+0x9>
    2e62:	8f 93       	push	r24
    2e64:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <CMDPRGlist+0x8>
    2e68:	8f 93       	push	r24
    2e6a:	80 91 59 28 	lds	r24, 0x2859	; 0x802859 <CMDPRGlist+0x7>
    2e6e:	8f 93       	push	r24
    2e70:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <CMDPRGlist+0x6>
    2e74:	8f 93       	push	r24
    2e76:	80 91 57 28 	lds	r24, 0x2857	; 0x802857 <CMDPRGlist+0x5>
    2e7a:	8f 93       	push	r24
    2e7c:	86 e1       	ldi	r24, 0x16	; 22
    2e7e:	91 e2       	ldi	r25, 0x21	; 33
    2e80:	9f 93       	push	r25
    2e82:	8f 93       	push	r24
    2e84:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
        PRGExe(); 
    2e88:	0e 94 09 11 	call	0x2212	; 0x2212 <_Z6PRGExev>
        RunSubProgram=1;  
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <RunSubProgram>
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	70 c0       	rjmp	.+224    	; 0x2f78 <_Z6PRGExev+0xd66>
      } 
      else
      {
        RunSubProgram=0;
    2e98:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <RunSubProgram>
        ContinuousRead=0; 
    2e9c:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <ContinuousRead>
        readRam();
    2ea0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z7readRamv>
        while(CMDPRGlist.PRGLine != LastPLine)
    2ea4:	20 91 52 28 	lds	r18, 0x2852	; 0x802852 <CMDPRGlist>
    2ea8:	30 91 53 28 	lds	r19, 0x2853	; 0x802853 <CMDPRGlist+0x1>
    2eac:	80 91 fe 26 	lds	r24, 0x26FE	; 0x8026fe <LastPLine>
    2eb0:	90 91 ff 26 	lds	r25, 0x26FF	; 0x8026ff <LastPLine+0x1>
    2eb4:	28 17       	cp	r18, r24
    2eb6:	39 07       	cpc	r19, r25
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <_Z6PRGExev+0xcaa>
    2eba:	5e c0       	rjmp	.+188    	; 0x2f78 <_Z6PRGExev+0xd66>
        {
          readRam();
    2ebc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z7readRamv>
      else
      {
        RunSubProgram=0;
        ContinuousRead=0; 
        readRam();
        while(CMDPRGlist.PRGLine != LastPLine)
    2ec0:	a2 e5       	ldi	r26, 0x52	; 82
    2ec2:	b8 e2       	ldi	r27, 0x28	; 40
    2ec4:	2d 91       	ld	r18, X+
    2ec6:	3c 91       	ld	r19, X
    2ec8:	80 91 fe 26 	lds	r24, 0x26FE	; 0x8026fe <LastPLine>
    2ecc:	90 91 ff 26 	lds	r25, 0x26FF	; 0x8026ff <LastPLine+0x1>
    2ed0:	28 17       	cp	r18, r24
    2ed2:	39 07       	cpc	r19, r25
    2ed4:	99 f7       	brne	.-26     	; 0x2ebc <_Z6PRGExev+0xcaa>
    2ed6:	50 c0       	rjmp	.+160    	; 0x2f78 <_Z6PRGExev+0xd66>
      }
      break;    
    }
    case 100 :
    {
        printf("End Of Program.\r\n");                       
    2ed8:	86 e3       	ldi	r24, 0x36	; 54
    2eda:	91 e2       	ldi	r25, 0x21	; 33
    2edc:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
        ProgramRun = 0;  
    2ee0:	10 92 d0 27 	sts	0x27D0, r1	; 0x8027d0 <ProgramRun>
        ContinuousRead = 0;      
    2ee4:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <ContinuousRead>
        break;
    2ee8:	47 c0       	rjmp	.+142    	; 0x2f78 <_Z6PRGExev+0xd66>
    }  
    case 101:
    {
      SerChIndex++; 
    2eea:	80 91 ee 26 	lds	r24, 0x26EE	; 0x8026ee <SerChIndex>
    2eee:	90 91 ef 26 	lds	r25, 0x26EF	; 0x8026ef <SerChIndex+0x1>
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	80 93 ee 26 	sts	0x26EE, r24	; 0x8026ee <SerChIndex>
    2ef8:	90 93 ef 26 	sts	0x26EF, r25	; 0x8026ef <SerChIndex+0x1>
      
      if(SerialCh[SerChIndex]!=0)
    2efc:	fc 01       	movw	r30, r24
    2efe:	e0 51       	subi	r30, 0x10	; 16
    2f00:	f9 4d       	sbci	r31, 0xD9	; 217
    2f02:	20 81       	ld	r18, Z
    2f04:	22 23       	and	r18, r18
    2f06:	d1 f0       	breq	.+52     	; 0x2f3c <_Z6PRGExev+0xd2a>
      {
        RunSubProgram=1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <RunSubProgram>
        ContinuousRead=0;
    2f0e:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <ContinuousRead>
        ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100);  
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	20 53       	subi	r18, 0x30	; 48
    2f16:	31 09       	sbc	r19, r1
    2f18:	c9 01       	movw	r24, r18
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	22 0f       	add	r18, r18
    2f20:	33 1f       	adc	r19, r19
    2f22:	22 0f       	add	r18, r18
    2f24:	33 1f       	adc	r19, r19
    2f26:	22 0f       	add	r18, r18
    2f28:	33 1f       	adc	r19, r19
    2f2a:	82 0f       	add	r24, r18
    2f2c:	93 1f       	adc	r25, r19
    2f2e:	8c 59       	subi	r24, 0x9C	; 156
    2f30:	9f 4f       	sbci	r25, 0xFF	; 255
    2f32:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z14ReadSubProgramj>
        PRGExe();
    2f36:	0e 94 09 11 	call	0x2212	; 0x2212 <_Z6PRGExev>
    2f3a:	1e c0       	rjmp	.+60     	; 0x2f78 <_Z6PRGExev+0xd66>
      }
      else
      {
        RunSubProgram=0;
    2f3c:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <RunSubProgram>
        ContinuousRead=0; 
    2f40:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <ContinuousRead>
        readRam();
    2f44:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z7readRamv>
        while(CMDPRGlist.PRGLine != LastPLine)
    2f48:	20 91 fe 26 	lds	r18, 0x26FE	; 0x8026fe <LastPLine>
    2f4c:	30 91 ff 26 	lds	r19, 0x26FF	; 0x8026ff <LastPLine+0x1>
    2f50:	80 91 52 28 	lds	r24, 0x2852	; 0x802852 <CMDPRGlist>
    2f54:	90 91 53 28 	lds	r25, 0x2853	; 0x802853 <CMDPRGlist+0x1>
    2f58:	28 17       	cp	r18, r24
    2f5a:	39 07       	cpc	r19, r25
    2f5c:	69 f0       	breq	.+26     	; 0x2f78 <_Z6PRGExev+0xd66>
        {
          readRam();
    2f5e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z7readRamv>
      else
      {
        RunSubProgram=0;
        ContinuousRead=0; 
        readRam();
        while(CMDPRGlist.PRGLine != LastPLine)
    2f62:	e2 e5       	ldi	r30, 0x52	; 82
    2f64:	f8 e2       	ldi	r31, 0x28	; 40
    2f66:	20 81       	ld	r18, Z
    2f68:	31 81       	ldd	r19, Z+1	; 0x01
    2f6a:	80 91 fe 26 	lds	r24, 0x26FE	; 0x8026fe <LastPLine>
    2f6e:	90 91 ff 26 	lds	r25, 0x26FF	; 0x8026ff <LastPLine+0x1>
    2f72:	28 17       	cp	r18, r24
    2f74:	39 07       	cpc	r19, r25
    2f76:	99 f7       	brne	.-26     	; 0x2f5e <_Z6PRGExev+0xd4c>
        }
      }
      break;
    }
 }
}
    2f78:	28 96       	adiw	r28, 0x08	; 8
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	ff 90       	pop	r15
    2f88:	ef 90       	pop	r14
    2f8a:	df 90       	pop	r13
    2f8c:	cf 90       	pop	r12
    2f8e:	bf 90       	pop	r11
    2f90:	af 90       	pop	r10
    2f92:	9f 90       	pop	r9
    2f94:	8f 90       	pop	r8
    2f96:	7f 90       	pop	r7
    2f98:	6f 90       	pop	r6
    2f9a:	5f 90       	pop	r5
    2f9c:	4f 90       	pop	r4
    2f9e:	08 95       	ret

00002fa0 <_Z6cmdExev>:

// run command that comes from raspberry the command will be in cmdtemp
void cmdExe()
{
    2fa0:	2f 92       	push	r2
    2fa2:	3f 92       	push	r3
    2fa4:	4f 92       	push	r4
    2fa6:	5f 92       	push	r5
    2fa8:	6f 92       	push	r6
    2faa:	7f 92       	push	r7
    2fac:	8f 92       	push	r8
    2fae:	9f 92       	push	r9
    2fb0:	af 92       	push	r10
    2fb2:	bf 92       	push	r11
    2fb4:	cf 92       	push	r12
    2fb6:	df 92       	push	r13
    2fb8:	ef 92       	push	r14
    2fba:	ff 92       	push	r15
    2fbc:	0f 93       	push	r16
    2fbe:	1f 93       	push	r17
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	6e 97       	sbiw	r28, 0x1e	; 30
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	de bf       	out	0x3e, r29	; 62
    if(strncmp(cmdTemp,"?0000",3)==0)         
    2fce:	43 e0       	ldi	r20, 0x03	; 3
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	67 e4       	ldi	r22, 0x47	; 71
    2fd4:	71 e2       	ldi	r23, 0x21	; 33
    2fd6:	83 e2       	ldi	r24, 0x23	; 35
    2fd8:	97 e2       	ldi	r25, 0x27	; 39
    2fda:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    2fde:	89 2b       	or	r24, r25
    2fe0:	89 f4       	brne	.+34     	; 0x3004 <_Z6cmdExev+0x64>
    {
      sprintf(BufferSend,"!0000\n\r");       
    2fe2:	88 e0       	ldi	r24, 0x08	; 8
    2fe4:	ed e4       	ldi	r30, 0x4D	; 77
    2fe6:	f1 e2       	ldi	r31, 0x21	; 33
    2fe8:	af e6       	ldi	r26, 0x6F	; 111
    2fea:	b9 e2       	ldi	r27, 0x29	; 41
    2fec:	01 90       	ld	r0, Z+
    2fee:	0d 92       	st	X+, r0
    2ff0:	8a 95       	dec	r24
    2ff2:	e1 f7       	brne	.-8      	; 0x2fec <_Z6cmdExev+0x4c>
      Responsing=1; 
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
      SetDataReady;
    2ffa:	e0 ea       	ldi	r30, 0xA0	; 160
    2ffc:	f6 e0       	ldi	r31, 0x06	; 6
    2ffe:	84 81       	ldd	r24, Z+4	; 0x04
    3000:	81 60       	ori	r24, 0x01	; 1
    3002:	84 83       	std	Z+4, r24	; 0x04
    }  
    if(strncmp(cmdTemp,"?01",3)==0)
    3004:	43 e0       	ldi	r20, 0x03	; 3
    3006:	50 e0       	ldi	r21, 0x00	; 0
    3008:	65 e5       	ldi	r22, 0x55	; 85
    300a:	71 e2       	ldi	r23, 0x21	; 33
    300c:	83 e2       	ldi	r24, 0x23	; 35
    300e:	97 e2       	ldi	r25, 0x27	; 39
    3010:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    3014:	89 2b       	or	r24, r25
    3016:	09 f0       	breq	.+2      	; 0x301a <_Z6cmdExev+0x7a>
    3018:	bb c1       	rjmp	.+886    	; 0x3390 <_Z6cmdExev+0x3f0>
    {//Read Axis Inputs
      if(cmdTemp[3]=='0')
    301a:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    301e:	80 33       	cpi	r24, 0x30	; 48
    3020:	11 f0       	breq	.+4      	; 0x3026 <_Z6cmdExev+0x86>
    3022:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
       switch(cmdTemp[4])
    3026:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    302a:	82 33       	cpi	r24, 0x32	; 50
    302c:	09 f4       	brne	.+2      	; 0x3030 <_Z6cmdExev+0x90>
    302e:	96 c0       	rjmp	.+300    	; 0x315c <_Z6cmdExev+0x1bc>
    3030:	83 33       	cpi	r24, 0x33	; 51
    3032:	09 f4       	brne	.+2      	; 0x3036 <_Z6cmdExev+0x96>
    3034:	21 c1       	rjmp	.+578    	; 0x3278 <_Z6cmdExev+0x2d8>
    3036:	81 33       	cpi	r24, 0x31	; 49
    3038:	11 f0       	breq	.+4      	; 0x303e <_Z6cmdExev+0x9e>
    303a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    303e:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    3042:	82 33       	cpi	r24, 0x32	; 50
    3044:	09 f4       	brne	.+2      	; 0x3048 <_Z6cmdExev+0xa8>
    3046:	40 c0       	rjmp	.+128    	; 0x30c8 <_Z6cmdExev+0x128>
    3048:	30 f4       	brcc	.+12     	; 0x3056 <_Z6cmdExev+0xb6>
    304a:	80 33       	cpi	r24, 0x30	; 48
    304c:	61 f0       	breq	.+24     	; 0x3066 <_Z6cmdExev+0xc6>
    304e:	81 33       	cpi	r24, 0x31	; 49
    3050:	19 f1       	breq	.+70     	; 0x3098 <_Z6cmdExev+0xf8>
    3052:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3056:	83 33       	cpi	r24, 0x33	; 51
    3058:	09 f4       	brne	.+2      	; 0x305c <_Z6cmdExev+0xbc>
    305a:	4f c0       	rjmp	.+158    	; 0x30fa <_Z6cmdExev+0x15a>
    305c:	84 33       	cpi	r24, 0x34	; 52
    305e:	09 f4       	brne	.+2      	; 0x3062 <_Z6cmdExev+0xc2>
    3060:	65 c0       	rjmp	.+202    	; 0x312c <_Z6cmdExev+0x18c>
    3062:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01010\t%u\n\r",ALARM1);
    3066:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    306a:	88 23       	and	r24, r24
    306c:	11 f4       	brne	.+4      	; 0x3072 <_Z6cmdExev+0xd2>
    306e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3072:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    3076:	82 fb       	bst	r24, 2
    3078:	88 27       	eor	r24, r24
    307a:	80 f9       	bld	r24, 0
    307c:	1f 92       	push	r1
    307e:	8f 93       	push	r24
    3080:	89 e5       	ldi	r24, 0x59	; 89
    3082:	91 e2       	ldi	r25, 0x21	; 33
    3084:	9f 93       	push	r25
    3086:	8f 93       	push	r24
    3088:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01011\t%u\n\r",INPOS1);
    3098:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    309c:	88 23       	and	r24, r24
    309e:	11 f4       	brne	.+4      	; 0x30a4 <_Z6cmdExev+0x104>
    30a0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    30a4:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    30a8:	86 95       	lsr	r24
    30aa:	81 70       	andi	r24, 0x01	; 1
    30ac:	1f 92       	push	r1
    30ae:	8f 93       	push	r24
    30b0:	85 e6       	ldi	r24, 0x65	; 101
    30b2:	91 e2       	ldi	r25, 0x21	; 33
    30b4:	9f 93       	push	r25
    30b6:	8f 93       	push	r24
    30b8:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01012\t%u\n\r",REF1);
    30c8:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    30cc:	88 23       	and	r24, r24
    30ce:	11 f4       	brne	.+4      	; 0x30d4 <_Z6cmdExev+0x134>
    30d0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    30d4:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    30d8:	85 fb       	bst	r24, 5
    30da:	88 27       	eor	r24, r24
    30dc:	80 f9       	bld	r24, 0
    30de:	1f 92       	push	r1
    30e0:	8f 93       	push	r24
    30e2:	81 e7       	ldi	r24, 0x71	; 113
    30e4:	91 e2       	ldi	r25, 0x21	; 33
    30e6:	9f 93       	push	r25
    30e8:	8f 93       	push	r24
    30ea:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01013\t%u\n\r",LIM_POS1);
    30fa:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    30fe:	88 23       	and	r24, r24
    3100:	11 f4       	brne	.+4      	; 0x3106 <_Z6cmdExev+0x166>
    3102:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3106:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    310a:	83 fb       	bst	r24, 3
    310c:	88 27       	eor	r24, r24
    310e:	80 f9       	bld	r24, 0
    3110:	1f 92       	push	r1
    3112:	8f 93       	push	r24
    3114:	8d e7       	ldi	r24, 0x7D	; 125
    3116:	91 e2       	ldi	r25, 0x21	; 33
    3118:	9f 93       	push	r25
    311a:	8f 93       	push	r24
    311c:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01014\t%u\n\r",LIM_NEG1);
    312c:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3130:	88 23       	and	r24, r24
    3132:	11 f4       	brne	.+4      	; 0x3138 <_Z6cmdExev+0x198>
    3134:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3138:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    313c:	82 95       	swap	r24
    313e:	81 70       	andi	r24, 0x01	; 1
    3140:	1f 92       	push	r1
    3142:	8f 93       	push	r24
    3144:	89 e8       	ldi	r24, 0x89	; 137
    3146:	91 e2       	ldi	r25, 0x21	; 33
    3148:	9f 93       	push	r25
    314a:	8f 93       	push	r24
    314c:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    315c:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    3160:	82 33       	cpi	r24, 0x32	; 50
    3162:	09 f4       	brne	.+2      	; 0x3166 <_Z6cmdExev+0x1c6>
    3164:	40 c0       	rjmp	.+128    	; 0x31e6 <_Z6cmdExev+0x246>
    3166:	30 f4       	brcc	.+12     	; 0x3174 <_Z6cmdExev+0x1d4>
    3168:	80 33       	cpi	r24, 0x30	; 48
    316a:	61 f0       	breq	.+24     	; 0x3184 <_Z6cmdExev+0x1e4>
    316c:	81 33       	cpi	r24, 0x31	; 49
    316e:	11 f1       	breq	.+68     	; 0x31b4 <_Z6cmdExev+0x214>
    3170:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3174:	83 33       	cpi	r24, 0x33	; 51
    3176:	09 f4       	brne	.+2      	; 0x317a <_Z6cmdExev+0x1da>
    3178:	4f c0       	rjmp	.+158    	; 0x3218 <_Z6cmdExev+0x278>
    317a:	84 33       	cpi	r24, 0x34	; 52
    317c:	09 f4       	brne	.+2      	; 0x3180 <_Z6cmdExev+0x1e0>
    317e:	63 c0       	rjmp	.+198    	; 0x3246 <_Z6cmdExev+0x2a6>
    3180:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01020\t%u\n\r",ALARM2);
    3184:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3188:	88 23       	and	r24, r24
    318a:	11 f4       	brne	.+4      	; 0x3190 <_Z6cmdExev+0x1f0>
    318c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3190:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3194:	86 95       	lsr	r24
    3196:	81 70       	andi	r24, 0x01	; 1
    3198:	1f 92       	push	r1
    319a:	8f 93       	push	r24
    319c:	85 e9       	ldi	r24, 0x95	; 149
    319e:	91 e2       	ldi	r25, 0x21	; 33
    31a0:	9f 93       	push	r25
    31a2:	8f 93       	push	r24
    31a4:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01021\t%u\n\r",INPOS2);
    31b4:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    31b8:	88 23       	and	r24, r24
    31ba:	11 f4       	brne	.+4      	; 0x31c0 <_Z6cmdExev+0x220>
    31bc:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    31c0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    31c4:	82 fb       	bst	r24, 2
    31c6:	88 27       	eor	r24, r24
    31c8:	80 f9       	bld	r24, 0
    31ca:	1f 92       	push	r1
    31cc:	8f 93       	push	r24
    31ce:	81 ea       	ldi	r24, 0xA1	; 161
    31d0:	91 e2       	ldi	r25, 0x21	; 33
    31d2:	9f 93       	push	r25
    31d4:	8f 93       	push	r24
    31d6:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01032\t%u\n\r",REF2);
    31e6:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    31ea:	88 23       	and	r24, r24
    31ec:	11 f4       	brne	.+4      	; 0x31f2 <_Z6cmdExev+0x252>
    31ee:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    31f2:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    31f6:	85 fb       	bst	r24, 5
    31f8:	88 27       	eor	r24, r24
    31fa:	80 f9       	bld	r24, 0
    31fc:	1f 92       	push	r1
    31fe:	8f 93       	push	r24
    3200:	8d ea       	ldi	r24, 0xAD	; 173
    3202:	91 e2       	ldi	r25, 0x21	; 33
    3204:	9f 93       	push	r25
    3206:	8f 93       	push	r24
    3208:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01023\t%u\n\r",LIM_POS2);
    3218:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    321c:	88 23       	and	r24, r24
    321e:	11 f4       	brne	.+4      	; 0x3224 <_Z6cmdExev+0x284>
    3220:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3224:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3228:	81 70       	andi	r24, 0x01	; 1
    322a:	1f 92       	push	r1
    322c:	8f 93       	push	r24
    322e:	89 eb       	ldi	r24, 0xB9	; 185
    3230:	91 e2       	ldi	r25, 0x21	; 33
    3232:	9f 93       	push	r25
    3234:	8f 93       	push	r24
    3236:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01024\t%u\n\r",LIM_NEG2);
    3246:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    324a:	88 23       	and	r24, r24
    324c:	11 f4       	brne	.+4      	; 0x3252 <_Z6cmdExev+0x2b2>
    324e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3252:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3256:	86 fb       	bst	r24, 6
    3258:	88 27       	eor	r24, r24
    325a:	80 f9       	bld	r24, 0
    325c:	1f 92       	push	r1
    325e:	8f 93       	push	r24
    3260:	85 ec       	ldi	r24, 0xC5	; 197
    3262:	91 e2       	ldi	r25, 0x21	; 33
    3264:	9f 93       	push	r25
    3266:	8f 93       	push	r24
    3268:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    3278:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    327c:	82 33       	cpi	r24, 0x32	; 50
    327e:	f1 f1       	breq	.+124    	; 0x32fc <_Z6cmdExev+0x35c>
    3280:	30 f4       	brcc	.+12     	; 0x328e <_Z6cmdExev+0x2ee>
    3282:	80 33       	cpi	r24, 0x30	; 48
    3284:	61 f0       	breq	.+24     	; 0x329e <_Z6cmdExev+0x2fe>
    3286:	81 33       	cpi	r24, 0x31	; 49
    3288:	09 f1       	breq	.+66     	; 0x32cc <_Z6cmdExev+0x32c>
    328a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    328e:	83 33       	cpi	r24, 0x33	; 51
    3290:	09 f4       	brne	.+2      	; 0x3294 <_Z6cmdExev+0x2f4>
    3292:	4d c0       	rjmp	.+154    	; 0x332e <_Z6cmdExev+0x38e>
    3294:	84 33       	cpi	r24, 0x34	; 52
    3296:	09 f4       	brne	.+2      	; 0x329a <_Z6cmdExev+0x2fa>
    3298:	63 c0       	rjmp	.+198    	; 0x3360 <_Z6cmdExev+0x3c0>
    329a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01030\t%u\n\r",ALARM3);
    329e:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    32a2:	88 23       	and	r24, r24
    32a4:	11 f4       	brne	.+4      	; 0x32aa <_Z6cmdExev+0x30a>
    32a6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    32aa:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    32ae:	81 70       	andi	r24, 0x01	; 1
    32b0:	1f 92       	push	r1
    32b2:	8f 93       	push	r24
    32b4:	81 ed       	ldi	r24, 0xD1	; 209
    32b6:	91 e2       	ldi	r25, 0x21	; 33
    32b8:	9f 93       	push	r25
    32ba:	8f 93       	push	r24
    32bc:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01031\t%u\n\r",INPOS3);
    32cc:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    32d0:	88 23       	and	r24, r24
    32d2:	11 f4       	brne	.+4      	; 0x32d8 <_Z6cmdExev+0x338>
    32d4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    32d8:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    32dc:	86 95       	lsr	r24
    32de:	81 70       	andi	r24, 0x01	; 1
    32e0:	1f 92       	push	r1
    32e2:	8f 93       	push	r24
    32e4:	8d ed       	ldi	r24, 0xDD	; 221
    32e6:	91 e2       	ldi	r25, 0x21	; 33
    32e8:	9f 93       	push	r25
    32ea:	8f 93       	push	r24
    32ec:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01032\t%u\n\r",REF3);
    32fc:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3300:	88 23       	and	r24, r24
    3302:	11 f4       	brne	.+4      	; 0x3308 <_Z6cmdExev+0x368>
    3304:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3308:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    330c:	86 fb       	bst	r24, 6
    330e:	88 27       	eor	r24, r24
    3310:	80 f9       	bld	r24, 0
    3312:	1f 92       	push	r1
    3314:	8f 93       	push	r24
    3316:	8d ea       	ldi	r24, 0xAD	; 173
    3318:	91 e2       	ldi	r25, 0x21	; 33
    331a:	9f 93       	push	r25
    331c:	8f 93       	push	r24
    331e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01033\t%u\n\r",LIM_POS3);
    332e:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3332:	88 23       	and	r24, r24
    3334:	11 f4       	brne	.+4      	; 0x333a <_Z6cmdExev+0x39a>
    3336:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    333a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    333e:	85 fb       	bst	r24, 5
    3340:	88 27       	eor	r24, r24
    3342:	80 f9       	bld	r24, 0
    3344:	1f 92       	push	r1
    3346:	8f 93       	push	r24
    3348:	89 ee       	ldi	r24, 0xE9	; 233
    334a:	91 e2       	ldi	r25, 0x21	; 33
    334c:	9f 93       	push	r25
    334e:	8f 93       	push	r24
    3350:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01034\t%u\n\r",LIM_NEG3);
    3360:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3364:	88 23       	and	r24, r24
    3366:	11 f4       	brne	.+4      	; 0x336c <_Z6cmdExev+0x3cc>
    3368:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    336c:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    3370:	82 95       	swap	r24
    3372:	81 70       	andi	r24, 0x01	; 1
    3374:	1f 92       	push	r1
    3376:	8f 93       	push	r24
    3378:	85 ef       	ldi	r24, 0xF5	; 245
    337a:	91 e2       	ldi	r25, 0x21	; 33
    337c:	9f 93       	push	r25
    337e:	8f 93       	push	r24
    3380:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           break;
         }
       }
      }
    }      
    else if(strncmp(cmdTemp,"#02",3)==0)
    3390:	43 e0       	ldi	r20, 0x03	; 3
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	61 e0       	ldi	r22, 0x01	; 1
    3396:	72 e2       	ldi	r23, 0x22	; 34
    3398:	83 e2       	ldi	r24, 0x23	; 35
    339a:	97 e2       	ldi	r25, 0x27	; 39
    339c:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    33a0:	89 2b       	or	r24, r25
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <_Z6cmdExev+0x406>
    33a4:	42 c1       	rjmp	.+644    	; 0x362a <_Z6cmdExev+0x68a>
    {//Write Axis Outputs
      if(cmdTemp[3]=='0')
    33a6:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    33aa:	80 33       	cpi	r24, 0x30	; 48
    33ac:	11 f0       	breq	.+4      	; 0x33b2 <_Z6cmdExev+0x412>
    33ae:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
       switch(cmdTemp[4])
    33b2:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    33b6:	82 33       	cpi	r24, 0x32	; 50
    33b8:	09 f4       	brne	.+2      	; 0x33bc <_Z6cmdExev+0x41c>
    33ba:	6f c0       	rjmp	.+222    	; 0x349a <_Z6cmdExev+0x4fa>
    33bc:	83 33       	cpi	r24, 0x33	; 51
    33be:	09 f4       	brne	.+2      	; 0x33c2 <_Z6cmdExev+0x422>
    33c0:	d4 c0       	rjmp	.+424    	; 0x356a <_Z6cmdExev+0x5ca>
    33c2:	81 33       	cpi	r24, 0x31	; 49
    33c4:	11 f0       	breq	.+4      	; 0x33ca <_Z6cmdExev+0x42a>
    33c6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    33ca:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    33ce:	80 33       	cpi	r24, 0x30	; 48
    33d0:	21 f0       	breq	.+8      	; 0x33da <_Z6cmdExev+0x43a>
    33d2:	81 33       	cpi	r24, 0x31	; 49
    33d4:	91 f1       	breq	.+100    	; 0x343a <_Z6cmdExev+0x49a>
    33d6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    33da:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    33de:	80 33       	cpi	r24, 0x30	; 48
    33e0:	89 f4       	brne	.+34     	; 0x3404 <_Z6cmdExev+0x464>
               {
                 CLR_ENABLE1;
    33e2:	e0 e0       	ldi	r30, 0x00	; 0
    33e4:	f6 e0       	ldi	r31, 0x06	; 6
    33e6:	84 81       	ldd	r24, Z+4	; 0x04
    33e8:	8f 77       	andi	r24, 0x7F	; 127
    33ea:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020100\n\r");  
    33ec:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    33f0:	88 23       	and	r24, r24
    33f2:	41 f0       	breq	.+16     	; 0x3404 <_Z6cmdExev+0x464>
    33f4:	85 e0       	ldi	r24, 0x05	; 5
    33f6:	92 e2       	ldi	r25, 0x22	; 34
    33f8:	9f 93       	push	r25
    33fa:	8f 93       	push	r24
    33fc:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    3404:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    3408:	81 33       	cpi	r24, 0x31	; 49
    340a:	11 f0       	breq	.+4      	; 0x3410 <_Z6cmdExev+0x470>
    340c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               {
                 SET_ENABLE1;  
    3410:	e0 e0       	ldi	r30, 0x00	; 0
    3412:	f6 e0       	ldi	r31, 0x06	; 6
    3414:	84 81       	ldd	r24, Z+4	; 0x04
    3416:	80 68       	ori	r24, 0x80	; 128
    3418:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020101\n\r");
    341a:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    341e:	88 23       	and	r24, r24
    3420:	11 f4       	brne	.+4      	; 0x3426 <_Z6cmdExev+0x486>
    3422:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3426:	8f e0       	ldi	r24, 0x0F	; 15
    3428:	92 e2       	ldi	r25, 0x22	; 34
    342a:	9f 93       	push	r25
    342c:	8f 93       	push	r24
    342e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    343a:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    343e:	80 33       	cpi	r24, 0x30	; 48
    3440:	89 f4       	brne	.+34     	; 0x3464 <_Z6cmdExev+0x4c4>
               {
                 CLR_EMG1;
    3442:	e0 e0       	ldi	r30, 0x00	; 0
    3444:	f6 e0       	ldi	r31, 0x06	; 6
    3446:	84 81       	ldd	r24, Z+4	; 0x04
    3448:	8f 7b       	andi	r24, 0xBF	; 191
    344a:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020110\n\r");  
    344c:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3450:	88 23       	and	r24, r24
    3452:	41 f0       	breq	.+16     	; 0x3464 <_Z6cmdExev+0x4c4>
    3454:	89 e1       	ldi	r24, 0x19	; 25
    3456:	92 e2       	ldi	r25, 0x22	; 34
    3458:	9f 93       	push	r25
    345a:	8f 93       	push	r24
    345c:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    3464:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    3468:	81 33       	cpi	r24, 0x31	; 49
    346a:	11 f0       	breq	.+4      	; 0x3470 <_Z6cmdExev+0x4d0>
    346c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               {
                 SET_EMG1;  
    3470:	e0 e0       	ldi	r30, 0x00	; 0
    3472:	f6 e0       	ldi	r31, 0x06	; 6
    3474:	84 81       	ldd	r24, Z+4	; 0x04
    3476:	80 64       	ori	r24, 0x40	; 64
    3478:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020111\n\r");
    347a:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    347e:	88 23       	and	r24, r24
    3480:	11 f4       	brne	.+4      	; 0x3486 <_Z6cmdExev+0x4e6>
    3482:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3486:	83 e2       	ldi	r24, 0x23	; 35
    3488:	92 e2       	ldi	r25, 0x22	; 34
    348a:	9f 93       	push	r25
    348c:	8f 93       	push	r24
    348e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    349a:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    349e:	80 33       	cpi	r24, 0x30	; 48
    34a0:	21 f0       	breq	.+8      	; 0x34aa <_Z6cmdExev+0x50a>
    34a2:	81 33       	cpi	r24, 0x31	; 49
    34a4:	91 f1       	breq	.+100    	; 0x350a <_Z6cmdExev+0x56a>
    34a6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    34aa:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    34ae:	80 33       	cpi	r24, 0x30	; 48
    34b0:	89 f4       	brne	.+34     	; 0x34d4 <_Z6cmdExev+0x534>
               {
                 CLR_ENABLE2;
    34b2:	e0 e2       	ldi	r30, 0x20	; 32
    34b4:	f6 e0       	ldi	r31, 0x06	; 6
    34b6:	84 81       	ldd	r24, Z+4	; 0x04
    34b8:	8f 77       	andi	r24, 0x7F	; 127
    34ba:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020200\n\r");  
    34bc:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    34c0:	88 23       	and	r24, r24
    34c2:	41 f0       	breq	.+16     	; 0x34d4 <_Z6cmdExev+0x534>
    34c4:	8d e2       	ldi	r24, 0x2D	; 45
    34c6:	92 e2       	ldi	r25, 0x22	; 34
    34c8:	9f 93       	push	r25
    34ca:	8f 93       	push	r24
    34cc:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    34d4:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    34d8:	81 33       	cpi	r24, 0x31	; 49
    34da:	11 f0       	breq	.+4      	; 0x34e0 <_Z6cmdExev+0x540>
    34dc:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               {
                 SET_ENABLE2;  
    34e0:	e0 e2       	ldi	r30, 0x20	; 32
    34e2:	f6 e0       	ldi	r31, 0x06	; 6
    34e4:	84 81       	ldd	r24, Z+4	; 0x04
    34e6:	80 68       	ori	r24, 0x80	; 128
    34e8:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020201\n\r");
    34ea:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    34ee:	88 23       	and	r24, r24
    34f0:	11 f4       	brne	.+4      	; 0x34f6 <_Z6cmdExev+0x556>
    34f2:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    34f6:	87 e3       	ldi	r24, 0x37	; 55
    34f8:	92 e2       	ldi	r25, 0x22	; 34
    34fa:	9f 93       	push	r25
    34fc:	8f 93       	push	r24
    34fe:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    350a:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    350e:	80 33       	cpi	r24, 0x30	; 48
    3510:	89 f4       	brne	.+34     	; 0x3534 <_Z6cmdExev+0x594>
               {
                 CLR_EMG2;
    3512:	e0 e2       	ldi	r30, 0x20	; 32
    3514:	f6 e0       	ldi	r31, 0x06	; 6
    3516:	84 81       	ldd	r24, Z+4	; 0x04
    3518:	8f 7e       	andi	r24, 0xEF	; 239
    351a:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020210\n\r");  
    351c:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3520:	88 23       	and	r24, r24
    3522:	41 f0       	breq	.+16     	; 0x3534 <_Z6cmdExev+0x594>
    3524:	81 e4       	ldi	r24, 0x41	; 65
    3526:	92 e2       	ldi	r25, 0x22	; 34
    3528:	9f 93       	push	r25
    352a:	8f 93       	push	r24
    352c:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    3534:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    3538:	81 33       	cpi	r24, 0x31	; 49
    353a:	11 f0       	breq	.+4      	; 0x3540 <_Z6cmdExev+0x5a0>
    353c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               {
                 SET_EMG2;  
    3540:	e0 e2       	ldi	r30, 0x20	; 32
    3542:	f6 e0       	ldi	r31, 0x06	; 6
    3544:	84 81       	ldd	r24, Z+4	; 0x04
    3546:	80 61       	ori	r24, 0x10	; 16
    3548:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020211\n\r");
    354a:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    354e:	88 23       	and	r24, r24
    3550:	11 f4       	brne	.+4      	; 0x3556 <_Z6cmdExev+0x5b6>
    3552:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3556:	8b e4       	ldi	r24, 0x4B	; 75
    3558:	92 e2       	ldi	r25, 0x22	; 34
    355a:	9f 93       	push	r25
    355c:	8f 93       	push	r24
    355e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    356a:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    356e:	80 33       	cpi	r24, 0x30	; 48
    3570:	21 f0       	breq	.+8      	; 0x357a <_Z6cmdExev+0x5da>
    3572:	81 33       	cpi	r24, 0x31	; 49
    3574:	91 f1       	breq	.+100    	; 0x35da <_Z6cmdExev+0x63a>
    3576:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    357a:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    357e:	80 33       	cpi	r24, 0x30	; 48
    3580:	89 f4       	brne	.+34     	; 0x35a4 <_Z6cmdExev+0x604>
               {
                 CLR_ENABLE3;
    3582:	e0 e4       	ldi	r30, 0x40	; 64
    3584:	f6 e0       	ldi	r31, 0x06	; 6
    3586:	84 81       	ldd	r24, Z+4	; 0x04
    3588:	8f 77       	andi	r24, 0x7F	; 127
    358a:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020300\n\r");  
    358c:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3590:	88 23       	and	r24, r24
    3592:	41 f0       	breq	.+16     	; 0x35a4 <_Z6cmdExev+0x604>
    3594:	85 e5       	ldi	r24, 0x55	; 85
    3596:	92 e2       	ldi	r25, 0x22	; 34
    3598:	9f 93       	push	r25
    359a:	8f 93       	push	r24
    359c:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    35a4:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    35a8:	81 33       	cpi	r24, 0x31	; 49
    35aa:	11 f0       	breq	.+4      	; 0x35b0 <_Z6cmdExev+0x610>
    35ac:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               {
                 SET_ENABLE3;  
    35b0:	e0 e4       	ldi	r30, 0x40	; 64
    35b2:	f6 e0       	ldi	r31, 0x06	; 6
    35b4:	84 81       	ldd	r24, Z+4	; 0x04
    35b6:	80 68       	ori	r24, 0x80	; 128
    35b8:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020301\n\r");
    35ba:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    35be:	88 23       	and	r24, r24
    35c0:	11 f4       	brne	.+4      	; 0x35c6 <_Z6cmdExev+0x626>
    35c2:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    35c6:	8f e5       	ldi	r24, 0x5F	; 95
    35c8:	92 e2       	ldi	r25, 0x22	; 34
    35ca:	9f 93       	push	r25
    35cc:	8f 93       	push	r24
    35ce:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    35da:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    35de:	80 33       	cpi	r24, 0x30	; 48
    35e0:	71 f4       	brne	.+28     	; 0x35fe <_Z6cmdExev+0x65e>
               {
                 //CLR_EMG3;
                 if(EchoON) printf("!020310\n\r");  
    35e2:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    35e6:	88 23       	and	r24, r24
    35e8:	11 f4       	brne	.+4      	; 0x35ee <_Z6cmdExev+0x64e>
    35ea:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    35ee:	89 e6       	ldi	r24, 0x69	; 105
    35f0:	92 e2       	ldi	r25, 0x22	; 34
    35f2:	9f 93       	push	r25
    35f4:	8f 93       	push	r24
    35f6:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    35fe:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <cmdTemp+0x6>
    3602:	81 33       	cpi	r24, 0x31	; 49
    3604:	11 f0       	breq	.+4      	; 0x360a <_Z6cmdExev+0x66a>
    3606:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               {
                 //SET_EMG3;  
                 if(EchoON) printf("!020311\n\r");
    360a:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    360e:	88 23       	and	r24, r24
    3610:	11 f4       	brne	.+4      	; 0x3616 <_Z6cmdExev+0x676>
    3612:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3616:	83 e7       	ldi	r24, 0x73	; 115
    3618:	92 e2       	ldi	r25, 0x22	; 34
    361a:	9f 93       	push	r25
    361c:	8f 93       	push	r24
    361e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         }         
       }
                                  
      }
    }
    else if(strncmp(cmdTemp,"?03",3)==0)
    362a:	43 e0       	ldi	r20, 0x03	; 3
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	6d e7       	ldi	r22, 0x7D	; 125
    3630:	72 e2       	ldi	r23, 0x22	; 34
    3632:	83 e2       	ldi	r24, 0x23	; 35
    3634:	97 e2       	ldi	r25, 0x27	; 39
    3636:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    363a:	89 2b       	or	r24, r25
    363c:	09 f0       	breq	.+2      	; 0x3640 <_Z6cmdExev+0x6a0>
    363e:	a4 c0       	rjmp	.+328    	; 0x3788 <_Z6cmdExev+0x7e8>
    {//Read Axis Output
      if(cmdTemp[3]=='0')
    3640:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    3644:	80 33       	cpi	r24, 0x30	; 48
    3646:	11 f0       	breq	.+4      	; 0x364c <_Z6cmdExev+0x6ac>
    3648:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
       switch(cmdTemp[4])
    364c:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    3650:	82 33       	cpi	r24, 0x32	; 50
    3652:	09 f4       	brne	.+2      	; 0x3656 <_Z6cmdExev+0x6b6>
    3654:	41 c0       	rjmp	.+130    	; 0x36d8 <_Z6cmdExev+0x738>
    3656:	83 33       	cpi	r24, 0x33	; 51
    3658:	09 f4       	brne	.+2      	; 0x365c <_Z6cmdExev+0x6bc>
    365a:	77 c0       	rjmp	.+238    	; 0x374a <_Z6cmdExev+0x7aa>
    365c:	81 33       	cpi	r24, 0x31	; 49
    365e:	11 f0       	breq	.+4      	; 0x3664 <_Z6cmdExev+0x6c4>
    3660:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    3664:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    3668:	80 33       	cpi	r24, 0x30	; 48
    366a:	21 f0       	breq	.+8      	; 0x3674 <_Z6cmdExev+0x6d4>
    366c:	81 33       	cpi	r24, 0x31	; 49
    366e:	d9 f0       	breq	.+54     	; 0x36a6 <_Z6cmdExev+0x706>
    3670:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03010\t%u\n\r",ENABLE1);                                      
    3674:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3678:	88 23       	and	r24, r24
    367a:	11 f4       	brne	.+4      	; 0x3680 <_Z6cmdExev+0x6e0>
    367c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3680:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    3684:	88 1f       	adc	r24, r24
    3686:	88 27       	eor	r24, r24
    3688:	88 1f       	adc	r24, r24
    368a:	1f 92       	push	r1
    368c:	8f 93       	push	r24
    368e:	81 e8       	ldi	r24, 0x81	; 129
    3690:	92 e2       	ldi	r25, 0x22	; 34
    3692:	9f 93       	push	r25
    3694:	8f 93       	push	r24
    3696:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '1': //EMG
             {
               if(EchoON) printf("!03011\t%u\n\r",EMG1);                                      
    36a6:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    36aa:	88 23       	and	r24, r24
    36ac:	11 f4       	brne	.+4      	; 0x36b2 <_Z6cmdExev+0x712>
    36ae:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    36b2:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    36b6:	86 fb       	bst	r24, 6
    36b8:	88 27       	eor	r24, r24
    36ba:	80 f9       	bld	r24, 0
    36bc:	1f 92       	push	r1
    36be:	8f 93       	push	r24
    36c0:	8d e8       	ldi	r24, 0x8D	; 141
    36c2:	92 e2       	ldi	r25, 0x22	; 34
    36c4:	9f 93       	push	r25
    36c6:	8f 93       	push	r24
    36c8:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    36d8:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    36dc:	80 33       	cpi	r24, 0x30	; 48
    36de:	21 f0       	breq	.+8      	; 0x36e8 <_Z6cmdExev+0x748>
    36e0:	81 33       	cpi	r24, 0x31	; 49
    36e2:	d9 f0       	breq	.+54     	; 0x371a <_Z6cmdExev+0x77a>
    36e4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03020\t%u\n\r",ENABLE2);                                      
    36e8:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    36ec:	88 23       	and	r24, r24
    36ee:	11 f4       	brne	.+4      	; 0x36f4 <_Z6cmdExev+0x754>
    36f0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    36f4:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    36f8:	88 1f       	adc	r24, r24
    36fa:	88 27       	eor	r24, r24
    36fc:	88 1f       	adc	r24, r24
    36fe:	1f 92       	push	r1
    3700:	8f 93       	push	r24
    3702:	89 e9       	ldi	r24, 0x99	; 153
    3704:	92 e2       	ldi	r25, 0x22	; 34
    3706:	9f 93       	push	r25
    3708:	8f 93       	push	r24
    370a:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
               break;
             }
             case '1': //EMG
             {
               if(EchoON) printf("!03021\t%u\n\r",EMG2);                                      
    371a:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    371e:	88 23       	and	r24, r24
    3720:	11 f4       	brne	.+4      	; 0x3726 <_Z6cmdExev+0x786>
    3722:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3726:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    372a:	82 95       	swap	r24
    372c:	81 70       	andi	r24, 0x01	; 1
    372e:	1f 92       	push	r1
    3730:	8f 93       	push	r24
    3732:	85 ea       	ldi	r24, 0xA5	; 165
    3734:	92 e2       	ldi	r25, 0x22	; 34
    3736:	9f 93       	push	r25
    3738:	8f 93       	push	r24
    373a:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    374a:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <cmdTemp+0x5>
    374e:	80 33       	cpi	r24, 0x30	; 48
    3750:	11 f0       	breq	.+4      	; 0x3756 <_Z6cmdExev+0x7b6>
    3752:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03030\t%u\n\r",ENABLE3);                                      
    3756:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    375a:	88 23       	and	r24, r24
    375c:	11 f4       	brne	.+4      	; 0x3762 <_Z6cmdExev+0x7c2>
    375e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3762:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
    3766:	88 1f       	adc	r24, r24
    3768:	88 27       	eor	r24, r24
    376a:	88 1f       	adc	r24, r24
    376c:	1f 92       	push	r1
    376e:	8f 93       	push	r24
    3770:	81 eb       	ldi	r24, 0xB1	; 177
    3772:	92 e2       	ldi	r25, 0x22	; 34
    3774:	9f 93       	push	r25
    3776:	8f 93       	push	r24
    3778:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         }         
       }
                                  
      }
    }
    else if(strncmp(cmdTemp,"#04",3)==0)
    3788:	43 e0       	ldi	r20, 0x03	; 3
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	6d eb       	ldi	r22, 0xBD	; 189
    378e:	72 e2       	ldi	r23, 0x22	; 34
    3790:	83 e2       	ldi	r24, 0x23	; 35
    3792:	97 e2       	ldi	r25, 0x27	; 39
    3794:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    3798:	89 2b       	or	r24, r25
    379a:	09 f0       	breq	.+2      	; 0x379e <_Z6cmdExev+0x7fe>
    379c:	d6 c0       	rjmp	.+428    	; 0x394a <_Z6cmdExev+0x9aa>
    {//SET JOG FOR AXIS  
      if (!ProgramRun)
    379e:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    37a2:	81 11       	cpse	r24, r1
    37a4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
        if(cmdTemp[3]=='0')
    37a8:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    37ac:	80 33       	cpi	r24, 0x30	; 48
    37ae:	11 f0       	breq	.+4      	; 0x37b4 <_Z6cmdExev+0x814>
    37b0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         {
           switch(cmdTemp[4])
    37b4:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    37b8:	82 33       	cpi	r24, 0x32	; 50
    37ba:	09 f4       	brne	.+2      	; 0x37be <_Z6cmdExev+0x81e>
    37bc:	48 c0       	rjmp	.+144    	; 0x384e <_Z6cmdExev+0x8ae>
    37be:	83 33       	cpi	r24, 0x33	; 51
    37c0:	09 f4       	brne	.+2      	; 0x37c4 <_Z6cmdExev+0x824>
    37c2:	86 c0       	rjmp	.+268    	; 0x38d0 <_Z6cmdExev+0x930>
    37c4:	81 33       	cpi	r24, 0x31	; 49
    37c6:	11 f0       	breq	.+4      	; 0x37cc <_Z6cmdExev+0x82c>
    37c8:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    37cc:	e8 e2       	ldi	r30, 0x28	; 40
    37ce:	f7 e2       	ldi	r31, 0x27	; 39
    37d0:	ae e0       	ldi	r26, 0x0E	; 14
    37d2:	b7 e2       	ldi	r27, 0x27	; 39
    37d4:	26 e3       	ldi	r18, 0x36	; 54
    37d6:	37 e2       	ldi	r19, 0x27	; 39
           {
             case '1': //Axis 1
             {
                for(k=0;k<14;k++)
                {
                  temp[k]=cmdTemp[k+5];
    37d8:	81 91       	ld	r24, Z+
    37da:	8d 93       	st	X+, r24
         {
           switch(cmdTemp[4])
           {
             case '1': //Axis 1
             {
                for(k=0;k<14;k++)
    37dc:	e2 17       	cp	r30, r18
    37de:	f3 07       	cpc	r31, r19
    37e0:	d9 f7       	brne	.-10     	; 0x37d8 <_Z6cmdExev+0x838>
    37e2:	8e e0       	ldi	r24, 0x0E	; 14
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    37ea:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[20]=0;
    37ee:	10 92 22 27 	sts	0x2722, r1	; 0x802722 <temp+0x14>
                SetJog1=atol(temp);
    37f2:	8e e0       	ldi	r24, 0x0E	; 14
    37f4:	97 e2       	ldi	r25, 0x27	; 39
    37f6:	0e 94 2a 40 	call	0x8054	; 0x8054 <atol>
    37fa:	60 93 cc 27 	sts	0x27CC, r22	; 0x8027cc <SetJog1>
    37fe:	70 93 cd 27 	sts	0x27CD, r23	; 0x8027cd <SetJog1+0x1>
    3802:	80 93 ce 27 	sts	0x27CE, r24	; 0x8027ce <SetJog1+0x2>
    3806:	90 93 cf 27 	sts	0x27CF, r25	; 0x8027cf <SetJog1+0x3>
                sprintf(BufferSend,"!0401\t%s\n\r",temp); 
    380a:	0f 2e       	mov	r0, r31
    380c:	fe e0       	ldi	r31, 0x0E	; 14
    380e:	8f 2e       	mov	r8, r31
    3810:	f7 e2       	ldi	r31, 0x27	; 39
    3812:	9f 2e       	mov	r9, r31
    3814:	f0 2d       	mov	r31, r0
    3816:	9f 92       	push	r9
    3818:	8f 92       	push	r8
    381a:	81 ec       	ldi	r24, 0xC1	; 193
    381c:	92 e2       	ldi	r25, 0x22	; 34
    381e:	9f 93       	push	r25
    3820:	8f 93       	push	r24
    3822:	8f e6       	ldi	r24, 0x6F	; 111
    3824:	99 e2       	ldi	r25, 0x29	; 41
    3826:	9f 93       	push	r25
    3828:	8f 93       	push	r24
    382a:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
                Responsing=1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
                SetDataReady;   
    3834:	e0 ea       	ldi	r30, 0xA0	; 160
    3836:	f6 e0       	ldi	r31, 0x06	; 6
    3838:	84 81       	ldd	r24, Z+4	; 0x04
    383a:	81 60       	ori	r24, 0x01	; 1
    383c:	84 83       	std	Z+4, r24	; 0x04
                break;
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    384e:	e8 e2       	ldi	r30, 0x28	; 40
    3850:	f7 e2       	ldi	r31, 0x27	; 39
    3852:	ae e0       	ldi	r26, 0x0E	; 14
    3854:	b7 e2       	ldi	r27, 0x27	; 39
    3856:	22 e3       	ldi	r18, 0x32	; 50
    3858:	37 e2       	ldi	r19, 0x27	; 39
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=cmdTemp[k+5];
    385a:	81 91       	ld	r24, Z+
    385c:	8d 93       	st	X+, r24
                SetDataReady;   
                break;
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
    385e:	2e 17       	cp	r18, r30
    3860:	3f 07       	cpc	r19, r31
    3862:	d9 f7       	brne	.-10     	; 0x385a <_Z6cmdExev+0x8ba>
    3864:	8a e0       	ldi	r24, 0x0A	; 10
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    386c:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[10]=0;
    3870:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
                SetJog2=atol(temp);
    3874:	8e e0       	ldi	r24, 0x0E	; 14
    3876:	97 e2       	ldi	r25, 0x27	; 39
    3878:	0e 94 2a 40 	call	0x8054	; 0x8054 <atol>
    387c:	60 93 c8 27 	sts	0x27C8, r22	; 0x8027c8 <SetJog2>
    3880:	70 93 c9 27 	sts	0x27C9, r23	; 0x8027c9 <SetJog2+0x1>
    3884:	80 93 ca 27 	sts	0x27CA, r24	; 0x8027ca <SetJog2+0x2>
    3888:	90 93 cb 27 	sts	0x27CB, r25	; 0x8027cb <SetJog2+0x3>
                sprintf(BufferSend,"!0402\t%s\n\r",temp); 
    388c:	0f 2e       	mov	r0, r31
    388e:	fe e0       	ldi	r31, 0x0E	; 14
    3890:	cf 2e       	mov	r12, r31
    3892:	f7 e2       	ldi	r31, 0x27	; 39
    3894:	df 2e       	mov	r13, r31
    3896:	f0 2d       	mov	r31, r0
    3898:	df 92       	push	r13
    389a:	cf 92       	push	r12
    389c:	8c ec       	ldi	r24, 0xCC	; 204
    389e:	92 e2       	ldi	r25, 0x22	; 34
    38a0:	9f 93       	push	r25
    38a2:	8f 93       	push	r24
    38a4:	8f e6       	ldi	r24, 0x6F	; 111
    38a6:	99 e2       	ldi	r25, 0x29	; 41
    38a8:	9f 93       	push	r25
    38aa:	8f 93       	push	r24
    38ac:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
                Responsing=1; 
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
                SetDataReady; 
    38b6:	e0 ea       	ldi	r30, 0xA0	; 160
    38b8:	f6 e0       	ldi	r31, 0x06	; 6
    38ba:	84 81       	ldd	r24, Z+4	; 0x04
    38bc:	81 60       	ori	r24, 0x01	; 1
    38be:	84 83       	std	Z+4, r24	; 0x04
                break;
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    38d0:	e8 e2       	ldi	r30, 0x28	; 40
    38d2:	f7 e2       	ldi	r31, 0x27	; 39
    38d4:	ae e0       	ldi	r26, 0x0E	; 14
    38d6:	b7 e2       	ldi	r27, 0x27	; 39
    38d8:	22 e3       	ldi	r18, 0x32	; 50
    38da:	37 e2       	ldi	r19, 0x27	; 39
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=cmdTemp[k+5];
    38dc:	81 91       	ld	r24, Z+
    38de:	8d 93       	st	X+, r24
                SetDataReady; 
                break;
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
    38e0:	2e 17       	cp	r18, r30
    38e2:	3f 07       	cpc	r19, r31
    38e4:	d9 f7       	brne	.-10     	; 0x38dc <_Z6cmdExev+0x93c>
    38e6:	8a e0       	ldi	r24, 0x0A	; 10
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    38ee:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[10]=0;
    38f2:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
                SetJog3=atol(temp);
    38f6:	8e e0       	ldi	r24, 0x0E	; 14
    38f8:	97 e2       	ldi	r25, 0x27	; 39
    38fa:	0e 94 2a 40 	call	0x8054	; 0x8054 <atol>
    38fe:	60 93 c4 27 	sts	0x27C4, r22	; 0x8027c4 <SetJog3>
    3902:	70 93 c5 27 	sts	0x27C5, r23	; 0x8027c5 <SetJog3+0x1>
    3906:	80 93 c6 27 	sts	0x27C6, r24	; 0x8027c6 <SetJog3+0x2>
    390a:	90 93 c7 27 	sts	0x27C7, r25	; 0x8027c7 <SetJog3+0x3>
                sprintf(BufferSend,"!0403\t%s\n\r",temp); 
    390e:	0e e0       	ldi	r16, 0x0E	; 14
    3910:	17 e2       	ldi	r17, 0x27	; 39
    3912:	1f 93       	push	r17
    3914:	0f 93       	push	r16
    3916:	87 ed       	ldi	r24, 0xD7	; 215
    3918:	92 e2       	ldi	r25, 0x22	; 34
    391a:	9f 93       	push	r25
    391c:	8f 93       	push	r24
    391e:	8f e6       	ldi	r24, 0x6F	; 111
    3920:	99 e2       	ldi	r25, 0x29	; 41
    3922:	9f 93       	push	r25
    3924:	8f 93       	push	r24
    3926:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
                Responsing=1; 
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
                SetDataReady; 
    3930:	e0 ea       	ldi	r30, 0xA0	; 160
    3932:	f6 e0       	ldi	r31, 0x06	; 6
    3934:	84 81       	ldd	r24, Z+4	; 0x04
    3936:	81 60       	ori	r24, 0x01	; 1
    3938:	84 83       	std	Z+4, r24	; 0x04
                break;
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
             }              
           }
         }
      }          
    }
    else if(strncmp(cmdTemp,"?05",3)==0)
    394a:	43 e0       	ldi	r20, 0x03	; 3
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	62 ee       	ldi	r22, 0xE2	; 226
    3950:	72 e2       	ldi	r23, 0x22	; 34
    3952:	83 e2       	ldi	r24, 0x23	; 35
    3954:	97 e2       	ldi	r25, 0x27	; 39
    3956:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    395a:	89 2b       	or	r24, r25
    395c:	09 f0       	breq	.+2      	; 0x3960 <_Z6cmdExev+0x9c0>
    395e:	aa c0       	rjmp	.+340    	; 0x3ab4 <_Z6cmdExev+0xb14>
    {//READ JOG FOR AXIS  
      if(cmdTemp[3]=='0')
    3960:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    3964:	80 33       	cpi	r24, 0x30	; 48
    3966:	11 f0       	breq	.+4      	; 0x396c <_Z6cmdExev+0x9cc>
    3968:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
           switch(cmdTemp[4])
    396c:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    3970:	82 33       	cpi	r24, 0x32	; 50
    3972:	d1 f1       	breq	.+116    	; 0x39e8 <_Z6cmdExev+0xa48>
    3974:	83 33       	cpi	r24, 0x33	; 51
    3976:	09 f4       	brne	.+2      	; 0x397a <_Z6cmdExev+0x9da>
    3978:	6a c0       	rjmp	.+212    	; 0x3a4e <_Z6cmdExev+0xaae>
    397a:	81 33       	cpi	r24, 0x31	; 49
    397c:	11 f0       	breq	.+4      	; 0x3982 <_Z6cmdExev+0x9e2>
    397e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3982:	ee e0       	ldi	r30, 0x0E	; 14
    3984:	f7 e2       	ldi	r31, 0x27	; 39
    3986:	88 e1       	ldi	r24, 0x18	; 24
    3988:	97 e2       	ldi	r25, 0x27	; 39
           {
             case '1': //Axis 1
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    398a:	11 92       	st	Z+, r1
      {
           switch(cmdTemp[4])
           {
             case '1': //Axis 1
             {
                for(k=0;k<10;k++)
    398c:	8e 17       	cp	r24, r30
    398e:	9f 07       	cpc	r25, r31
    3990:	e1 f7       	brne	.-8      	; 0x398a <_Z6cmdExev+0x9ea>
    3992:	8a e0       	ldi	r24, 0x0A	; 10
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    399a:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    399e:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
    39a2:	60 91 cc 27 	lds	r22, 0x27CC	; 0x8027cc <SetJog1>
    39a6:	70 91 cd 27 	lds	r23, 0x27CD	; 0x8027cd <SetJog1+0x1>
    39aa:	80 91 ce 27 	lds	r24, 0x27CE	; 0x8027ce <SetJog1+0x2>
    39ae:	90 91 cf 27 	lds	r25, 0x27CF	; 0x8027cf <SetJog1+0x3>
    39b2:	2a e0       	ldi	r18, 0x0A	; 10
    39b4:	4e e0       	ldi	r20, 0x0E	; 14
    39b6:	57 e2       	ldi	r21, 0x27	; 39
    39b8:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__ltoa_ncheck>
                ltoa(SetJog1,temp,10);
                if(EchoON) printf("!0501\t%s\n\r",temp);  
    39bc:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    39c0:	88 23       	and	r24, r24
    39c2:	11 f4       	brne	.+4      	; 0x39c8 <_Z6cmdExev+0xa28>
    39c4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    39c8:	8e e0       	ldi	r24, 0x0E	; 14
    39ca:	97 e2       	ldi	r25, 0x27	; 39
    39cc:	9f 93       	push	r25
    39ce:	8f 93       	push	r24
    39d0:	86 ee       	ldi	r24, 0xE6	; 230
    39d2:	92 e2       	ldi	r25, 0x22	; 34
    39d4:	9f 93       	push	r25
    39d6:	8f 93       	push	r24
    39d8:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    39e8:	ee e0       	ldi	r30, 0x0E	; 14
    39ea:	f7 e2       	ldi	r31, 0x27	; 39
    39ec:	88 e1       	ldi	r24, 0x18	; 24
    39ee:	97 e2       	ldi	r25, 0x27	; 39
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    39f0:	11 92       	st	Z+, r1
                if(EchoON) printf("!0501\t%s\n\r",temp);  
                break;
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
    39f2:	8e 17       	cp	r24, r30
    39f4:	9f 07       	cpc	r25, r31
    39f6:	e1 f7       	brne	.-8      	; 0x39f0 <_Z6cmdExev+0xa50>
    39f8:	8a e0       	ldi	r24, 0x0A	; 10
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    3a00:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    3a04:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
    3a08:	60 91 c8 27 	lds	r22, 0x27C8	; 0x8027c8 <SetJog2>
    3a0c:	70 91 c9 27 	lds	r23, 0x27C9	; 0x8027c9 <SetJog2+0x1>
    3a10:	80 91 ca 27 	lds	r24, 0x27CA	; 0x8027ca <SetJog2+0x2>
    3a14:	90 91 cb 27 	lds	r25, 0x27CB	; 0x8027cb <SetJog2+0x3>
    3a18:	2a e0       	ldi	r18, 0x0A	; 10
    3a1a:	4e e0       	ldi	r20, 0x0E	; 14
    3a1c:	57 e2       	ldi	r21, 0x27	; 39
    3a1e:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__ltoa_ncheck>
                ltoa(SetJog2,temp,10);
                if(EchoON) printf("!0502\t%s\n\r",temp);  
    3a22:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3a26:	88 23       	and	r24, r24
    3a28:	11 f4       	brne	.+4      	; 0x3a2e <_Z6cmdExev+0xa8e>
    3a2a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3a2e:	8e e0       	ldi	r24, 0x0E	; 14
    3a30:	97 e2       	ldi	r25, 0x27	; 39
    3a32:	9f 93       	push	r25
    3a34:	8f 93       	push	r24
    3a36:	81 ef       	ldi	r24, 0xF1	; 241
    3a38:	92 e2       	ldi	r25, 0x22	; 34
    3a3a:	9f 93       	push	r25
    3a3c:	8f 93       	push	r24
    3a3e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	0f 90       	pop	r0
    3a48:	0f 90       	pop	r0
    3a4a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3a4e:	ee e0       	ldi	r30, 0x0E	; 14
    3a50:	f7 e2       	ldi	r31, 0x27	; 39
    3a52:	88 e1       	ldi	r24, 0x18	; 24
    3a54:	97 e2       	ldi	r25, 0x27	; 39
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    3a56:	11 92       	st	Z+, r1
                if(EchoON) printf("!0502\t%s\n\r",temp);  
                break;
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
    3a58:	e8 17       	cp	r30, r24
    3a5a:	f9 07       	cpc	r31, r25
    3a5c:	e1 f7       	brne	.-8      	; 0x3a56 <_Z6cmdExev+0xab6>
    3a5e:	8a e0       	ldi	r24, 0x0A	; 10
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    3a66:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    3a6a:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
    3a6e:	60 91 c4 27 	lds	r22, 0x27C4	; 0x8027c4 <SetJog3>
    3a72:	70 91 c5 27 	lds	r23, 0x27C5	; 0x8027c5 <SetJog3+0x1>
    3a76:	80 91 c6 27 	lds	r24, 0x27C6	; 0x8027c6 <SetJog3+0x2>
    3a7a:	90 91 c7 27 	lds	r25, 0x27C7	; 0x8027c7 <SetJog3+0x3>
    3a7e:	2a e0       	ldi	r18, 0x0A	; 10
    3a80:	4e e0       	ldi	r20, 0x0E	; 14
    3a82:	57 e2       	ldi	r21, 0x27	; 39
    3a84:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__ltoa_ncheck>
                ltoa(SetJog3,temp,10);
                if(EchoON) printf("!0503\t%s\n\r",temp);  
    3a88:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    3a8c:	88 23       	and	r24, r24
    3a8e:	11 f4       	brne	.+4      	; 0x3a94 <_Z6cmdExev+0xaf4>
    3a90:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    3a94:	8e e0       	ldi	r24, 0x0E	; 14
    3a96:	97 e2       	ldi	r25, 0x27	; 39
    3a98:	9f 93       	push	r25
    3a9a:	8f 93       	push	r24
    3a9c:	8c ef       	ldi	r24, 0xFC	; 252
    3a9e:	92 e2       	ldi	r25, 0x22	; 34
    3aa0:	9f 93       	push	r25
    3aa2:	8f 93       	push	r24
    3aa4:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
                break;
             }              
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    3ab4:	43 e0       	ldi	r20, 0x03	; 3
    3ab6:	50 e0       	ldi	r21, 0x00	; 0
    3ab8:	67 e0       	ldi	r22, 0x07	; 7
    3aba:	73 e2       	ldi	r23, 0x23	; 35
    3abc:	83 e2       	ldi	r24, 0x23	; 35
    3abe:	97 e2       	ldi	r25, 0x27	; 39
    3ac0:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    3ac4:	89 2b       	or	r24, r25
    3ac6:	09 f0       	breq	.+2      	; 0x3aca <_Z6cmdExev+0xb2a>
    3ac8:	4c c7       	rjmp	.+3736   	; 0x4962 <__stack+0x963>
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    3aca:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    3ace:	81 11       	cpse	r24, r1
    3ad0:	0c 94 b0 33 	jmp	0x6760	; 0x6760 <__stack+0x2761>
    3ad4:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <AxisIsMoving2>
    3ad8:	91 11       	cpse	r25, r1
    3ada:	0c 94 da 33 	jmp	0x67b4	; 0x67b4 <__stack+0x27b5>
    3ade:	20 91 5a 27 	lds	r18, 0x275A	; 0x80275a <AxisIsMoving3>
    3ae2:	91 e0       	ldi	r25, 0x01	; 1
    3ae4:	21 11       	cpse	r18, r1
    3ae6:	01 c0       	rjmp	.+2      	; 0x3aea <_Z6cmdExev+0xb4a>
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	90 93 0c 27 	sts	0x270C, r25	; 0x80270c <AxisMoving>
         
     if (!ProgramRun)
    3aee:	90 91 d0 27 	lds	r25, 0x27D0	; 0x8027d0 <ProgramRun>
    3af2:	91 11       	cpse	r25, r1
    3af4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
     {
      while (AxisMoving == 1) 
    3af8:	22 23       	and	r18, r18
    3afa:	99 f0       	breq	.+38     	; 0x3b22 <_Z6cmdExev+0xb82>
    3afc:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <AxisIsMoving2>
    3b00:	91 11       	cpse	r25, r1
    3b02:	07 c0       	rjmp	.+14     	; 0x3b12 <_Z6cmdExev+0xb72>
    3b04:	21 e0       	ldi	r18, 0x01	; 1
    3b06:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    3b0a:	91 11       	cpse	r25, r1
    3b0c:	03 c0       	rjmp	.+6      	; 0x3b14 <_Z6cmdExev+0xb74>
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	01 c0       	rjmp	.+2      	; 0x3b14 <_Z6cmdExev+0xb74>
    3b12:	21 e0       	ldi	r18, 0x01	; 1
    3b14:	92 2f       	mov	r25, r18
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    3b16:	81 11       	cpse	r24, r1
    3b18:	fe cf       	rjmp	.-4      	; 0x3b16 <_Z6cmdExev+0xb76>
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    3b1a:	91 11       	cpse	r25, r1
    3b1c:	fc cf       	rjmp	.-8      	; 0x3b16 <_Z6cmdExev+0xb76>
    3b1e:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
      if(cmdTemp[3]=='0')
    3b22:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    3b26:	80 33       	cpi	r24, 0x30	; 48
    3b28:	09 f0       	breq	.+2      	; 0x3b2c <_Z6cmdExev+0xb8c>
    3b2a:	8f c4       	rjmp	.+2334   	; 0x444a <__stack+0x44b>
      {
           switch(cmdTemp[4])
    3b2c:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    3b30:	82 33       	cpi	r24, 0x32	; 50
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <_Z6cmdExev+0xb96>
    3b34:	88 c1       	rjmp	.+784    	; 0x3e46 <_Z6cmdExev+0xea6>
    3b36:	83 33       	cpi	r24, 0x33	; 51
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <_Z6cmdExev+0xb9c>
    3b3a:	06 c3       	rjmp	.+1548   	; 0x4148 <__stack+0x149>
    3b3c:	81 33       	cpi	r24, 0x31	; 49
    3b3e:	11 f0       	breq	.+4      	; 0x3b44 <_Z6cmdExev+0xba4>
    3b40:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '1': //Axis 1
             {
                if(SetJog1<AxisPosition1) CLR_DIR1;
    3b44:	40 91 cc 27 	lds	r20, 0x27CC	; 0x8027cc <SetJog1>
    3b48:	50 91 cd 27 	lds	r21, 0x27CD	; 0x8027cd <SetJog1+0x1>
    3b4c:	60 91 ce 27 	lds	r22, 0x27CE	; 0x8027ce <SetJog1+0x2>
    3b50:	70 91 cf 27 	lds	r23, 0x27CF	; 0x8027cf <SetJog1+0x3>
    3b54:	80 91 c0 27 	lds	r24, 0x27C0	; 0x8027c0 <AxisPosition1>
    3b58:	90 91 c1 27 	lds	r25, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    3b5c:	a0 91 c2 27 	lds	r26, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    3b60:	b0 91 c3 27 	lds	r27, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    3b64:	48 17       	cp	r20, r24
    3b66:	59 07       	cpc	r21, r25
    3b68:	6a 07       	cpc	r22, r26
    3b6a:	7b 07       	cpc	r23, r27
    3b6c:	2c f4       	brge	.+10     	; 0x3b78 <_Z6cmdExev+0xbd8>
    3b6e:	e0 e2       	ldi	r30, 0x20	; 32
    3b70:	f7 e0       	ldi	r31, 0x07	; 7
    3b72:	24 81       	ldd	r18, Z+4	; 0x04
    3b74:	2f 7e       	andi	r18, 0xEF	; 239
    3b76:	24 83       	std	Z+4, r18	; 0x04
                if(SetJog1>AxisPosition1) SET_DIR1;
    3b78:	84 17       	cp	r24, r20
    3b7a:	95 07       	cpc	r25, r21
    3b7c:	a6 07       	cpc	r26, r22
    3b7e:	b7 07       	cpc	r27, r23
    3b80:	2c f4       	brge	.+10     	; 0x3b8c <_Z6cmdExev+0xbec>
    3b82:	e0 e2       	ldi	r30, 0x20	; 32
    3b84:	f7 e0       	ldi	r31, 0x07	; 7
    3b86:	24 81       	ldd	r18, Z+4	; 0x04
    3b88:	20 61       	ori	r18, 0x10	; 16
    3b8a:	24 83       	std	Z+4, r18	; 0x04
                        
                MaxSpeed=SetSpeed1; 
    3b8c:	c0 90 8d 27 	lds	r12, 0x278D	; 0x80278d <SetSpeed1>
    3b90:	d0 90 8e 27 	lds	r13, 0x278E	; 0x80278e <SetSpeed1+0x1>
    3b94:	e0 90 8f 27 	lds	r14, 0x278F	; 0x80278f <SetSpeed1+0x2>
    3b98:	f0 90 90 27 	lds	r15, 0x2790	; 0x802790 <SetSpeed1+0x3>
    3b9c:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    3ba0:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    3ba4:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    3ba8:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
                IACC=ACC1; 
    3bac:	80 90 7d 27 	lds	r8, 0x277D	; 0x80277d <ACC1>
    3bb0:	90 90 7e 27 	lds	r9, 0x277E	; 0x80277e <ACC1+0x1>
    3bb4:	a0 90 7f 27 	lds	r10, 0x277F	; 0x80277f <ACC1+0x2>
    3bb8:	b0 90 80 27 	lds	r11, 0x2780	; 0x802780 <ACC1+0x3>
    3bbc:	89 82       	std	Y+1, r8	; 0x01
    3bbe:	9a 82       	std	Y+2, r9	; 0x02
    3bc0:	ab 82       	std	Y+3, r10	; 0x03
    3bc2:	bc 82       	std	Y+4, r11	; 0x04
    3bc4:	80 92 65 27 	sts	0x2765, r8	; 0x802765 <IACC>
    3bc8:	90 92 66 27 	sts	0x2766, r9	; 0x802766 <IACC+0x1>
    3bcc:	a0 92 67 27 	sts	0x2767, r10	; 0x802767 <IACC+0x2>
    3bd0:	b0 92 68 27 	sts	0x2768, r11	; 0x802768 <IACC+0x3>
                IDEC=DEC1; 
    3bd4:	80 90 71 27 	lds	r8, 0x2771	; 0x802771 <DEC1>
    3bd8:	90 90 72 27 	lds	r9, 0x2772	; 0x802772 <DEC1+0x1>
    3bdc:	a0 90 73 27 	lds	r10, 0x2773	; 0x802773 <DEC1+0x2>
    3be0:	b0 90 74 27 	lds	r11, 0x2774	; 0x802774 <DEC1+0x3>
    3be4:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    3be8:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    3bec:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    3bf0:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
                MaxDistanceToGo=labs(AxisPosition1-SetJog1);               
    3bf4:	84 1b       	sub	r24, r20
    3bf6:	95 0b       	sbc	r25, r21
    3bf8:	a6 0b       	sbc	r26, r22
    3bfa:	b7 0b       	sbc	r27, r23
    3bfc:	2c 01       	movw	r4, r24
    3bfe:	3d 01       	movw	r6, r26
    3c00:	3a f4       	brpl	.+14     	; 0x3c10 <_Z6cmdExev+0xc70>
    3c02:	44 24       	eor	r4, r4
    3c04:	55 24       	eor	r5, r5
    3c06:	32 01       	movw	r6, r4
    3c08:	48 1a       	sub	r4, r24
    3c0a:	59 0a       	sbc	r5, r25
    3c0c:	6a 0a       	sbc	r6, r26
    3c0e:	7b 0a       	sbc	r7, r27
    3c10:	40 92 a8 27 	sts	0x27A8, r4	; 0x8027a8 <MaxDistanceToGo>
    3c14:	50 92 a9 27 	sts	0x27A9, r5	; 0x8027a9 <MaxDistanceToGo+0x1>
    3c18:	60 92 aa 27 	sts	0x27AA, r6	; 0x8027aa <MaxDistanceToGo+0x2>
    3c1c:	70 92 ab 27 	sts	0x27AB, r7	; 0x8027ab <MaxDistanceToGo+0x3>
                Ma1=1000;          
    3c20:	88 ee       	ldi	r24, 0xE8	; 232
    3c22:	93 e0       	ldi	r25, 0x03	; 3
    3c24:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <Ma1>
    3c28:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <Ma1+0x1>
                CurSpeedFrq=0;
    3c2c:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    3c30:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    3c34:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    3c38:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
                TCC0.CCA=0xFFFF;                                                   
    3c3c:	8f ef       	ldi	r24, 0xFF	; 255
    3c3e:	9f ef       	ldi	r25, 0xFF	; 255
    3c40:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3c44:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
                ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    3c48:	c7 01       	movw	r24, r14
    3c4a:	b6 01       	movw	r22, r12
    3c4c:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	48 ec       	ldi	r20, 0xC8	; 200
    3c56:	52 e4       	ldi	r21, 0x42	; 66
    3c58:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    3c5c:	6d 83       	std	Y+5, r22	; 0x05
    3c5e:	7e 83       	std	Y+6, r23	; 0x06
    3c60:	8f 83       	std	Y+7, r24	; 0x07
    3c62:	98 87       	std	Y+8, r25	; 0x08
                ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    3c64:	69 81       	ldd	r22, Y+1	; 0x01
    3c66:	7a 81       	ldd	r23, Y+2	; 0x02
    3c68:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6c:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3c70:	9b 01       	movw	r18, r22
    3c72:	ac 01       	movw	r20, r24
    3c74:	6d 81       	ldd	r22, Y+5	; 0x05
    3c76:	7e 81       	ldd	r23, Y+6	; 0x06
    3c78:	8f 81       	ldd	r24, Y+7	; 0x07
    3c7a:	98 85       	ldd	r25, Y+8	; 0x08
    3c7c:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    3c80:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    3c84:	9b 01       	movw	r18, r22
    3c86:	ac 01       	movw	r20, r24
    3c88:	c7 01       	movw	r24, r14
    3c8a:	b6 01       	movw	r22, r12
    3c8c:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    3c90:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    3c94:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    3c98:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    3c9c:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
                        
                DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
                DECSpeedINT= MaxSpeed / DECSpeedINT;                                                     
    3ca0:	c5 01       	movw	r24, r10
    3ca2:	b4 01       	movw	r22, r8
    3ca4:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3ca8:	9b 01       	movw	r18, r22
    3caa:	ac 01       	movw	r20, r24
    3cac:	6d 81       	ldd	r22, Y+5	; 0x05
    3cae:	7e 81       	ldd	r23, Y+6	; 0x06
    3cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb2:	98 85       	ldd	r25, Y+8	; 0x08
    3cb4:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    3cb8:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    3cbc:	9b 01       	movw	r18, r22
    3cbe:	ac 01       	movw	r20, r24
    3cc0:	c7 01       	movw	r24, r14
    3cc2:	b6 01       	movw	r22, r12
    3cc4:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    3cc8:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    3ccc:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    3cd0:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    3cd4:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    3cd8:	a7 01       	movw	r20, r14
    3cda:	96 01       	movw	r18, r12
    3cdc:	c7 01       	movw	r24, r14
    3cde:	b6 01       	movw	r22, r12
    3ce0:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <__mulsi3>
    3ce4:	6d 83       	std	Y+5, r22	; 0x05
    3ce6:	7e 83       	std	Y+6, r23	; 0x06
    3ce8:	8f 83       	std	Y+7, r24	; 0x07
    3cea:	98 87       	std	Y+8, r25	; 0x08
    3cec:	a5 01       	movw	r20, r10
    3cee:	94 01       	movw	r18, r8
    3cf0:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    3cf4:	69 01       	movw	r12, r18
    3cf6:	7a 01       	movw	r14, r20
    3cf8:	20 93 94 27 	sts	0x2794, r18	; 0x802794 <DecDTG>
    3cfc:	30 93 95 27 	sts	0x2795, r19	; 0x802795 <DecDTG+0x1>
    3d00:	40 93 96 27 	sts	0x2796, r20	; 0x802796 <DecDTG+0x2>
    3d04:	50 93 97 27 	sts	0x2797, r21	; 0x802797 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    3d08:	6d 81       	ldd	r22, Y+5	; 0x05
    3d0a:	7e 81       	ldd	r23, Y+6	; 0x06
    3d0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d0e:	98 85       	ldd	r25, Y+8	; 0x08
    3d10:	29 81       	ldd	r18, Y+1	; 0x01
    3d12:	3a 81       	ldd	r19, Y+2	; 0x02
    3d14:	4b 81       	ldd	r20, Y+3	; 0x03
    3d16:	5c 81       	ldd	r21, Y+4	; 0x04
    3d18:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    3d1c:	46 01       	movw	r8, r12
    3d1e:	57 01       	movw	r10, r14
    3d20:	82 0e       	add	r8, r18
    3d22:	93 1e       	adc	r9, r19
    3d24:	a4 1e       	adc	r10, r20
    3d26:	b5 1e       	adc	r11, r21
    3d28:	80 92 5d 27 	sts	0x275D, r8	; 0x80275d <SumAccDecDTG>
    3d2c:	90 92 5e 27 	sts	0x275E, r9	; 0x80275e <SumAccDecDTG+0x1>
    3d30:	a0 92 5f 27 	sts	0x275F, r10	; 0x80275f <SumAccDecDTG+0x2>
    3d34:	b0 92 60 27 	sts	0x2760, r11	; 0x802760 <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    3d38:	84 14       	cp	r8, r4
    3d3a:	95 04       	cpc	r9, r5
    3d3c:	a6 04       	cpc	r10, r6
    3d3e:	b7 04       	cpc	r11, r7
    3d40:	cc f1       	brlt	.+114    	; 0x3db4 <_Z6cmdExev+0xe14>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    3d42:	c3 01       	movw	r24, r6
    3d44:	b2 01       	movw	r22, r4
    3d46:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3d4a:	69 83       	std	Y+1, r22	; 0x01
    3d4c:	7a 83       	std	Y+2, r23	; 0x02
    3d4e:	8b 83       	std	Y+3, r24	; 0x03
    3d50:	9c 83       	std	Y+4, r25	; 0x04
    3d52:	c5 01       	movw	r24, r10
    3d54:	b4 01       	movw	r22, r8
    3d56:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3d5a:	9b 01       	movw	r18, r22
    3d5c:	ac 01       	movw	r20, r24
    3d5e:	69 81       	ldd	r22, Y+1	; 0x01
    3d60:	7a 81       	ldd	r23, Y+2	; 0x02
    3d62:	8b 81       	ldd	r24, Y+3	; 0x03
    3d64:	9c 81       	ldd	r25, Y+4	; 0x04
    3d66:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    3d6a:	4b 01       	movw	r8, r22
    3d6c:	5c 01       	movw	r10, r24
    3d6e:	c7 01       	movw	r24, r14
    3d70:	b6 01       	movw	r22, r12
    3d72:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3d76:	9b 01       	movw	r18, r22
    3d78:	ac 01       	movw	r20, r24
    3d7a:	c5 01       	movw	r24, r10
    3d7c:	b4 01       	movw	r22, r8
    3d7e:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    3d82:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    3d86:	60 93 94 27 	sts	0x2794, r22	; 0x802794 <DecDTG>
    3d8a:	70 93 95 27 	sts	0x2795, r23	; 0x802795 <DecDTG+0x1>
    3d8e:	80 93 96 27 	sts	0x2796, r24	; 0x802796 <DecDTG+0x2>
    3d92:	90 93 97 27 	sts	0x2797, r25	; 0x802797 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    3d96:	63 01       	movw	r12, r6
    3d98:	52 01       	movw	r10, r4
    3d9a:	a6 1a       	sub	r10, r22
    3d9c:	b7 0a       	sbc	r11, r23
    3d9e:	c8 0a       	sbc	r12, r24
    3da0:	d9 0a       	sbc	r13, r25
    3da2:	a0 92 98 27 	sts	0x2798, r10	; 0x802798 <AccDTG>
    3da6:	b0 92 99 27 	sts	0x2799, r11	; 0x802799 <AccDTG+0x1>
    3daa:	c0 92 9a 27 	sts	0x279A, r12	; 0x80279a <AccDTG+0x2>
    3dae:	d0 92 9b 27 	sts	0x279B, r13	; 0x80279b <AccDTG+0x3>
    3db2:	0e c0       	rjmp	.+28     	; 0x3dd0 <_Z6cmdExev+0xe30>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    3db4:	d3 01       	movw	r26, r6
    3db6:	c2 01       	movw	r24, r4
    3db8:	82 1b       	sub	r24, r18
    3dba:	93 0b       	sbc	r25, r19
    3dbc:	a4 0b       	sbc	r26, r20
    3dbe:	b5 0b       	sbc	r27, r21
    3dc0:	80 93 98 27 	sts	0x2798, r24	; 0x802798 <AccDTG>
    3dc4:	90 93 99 27 	sts	0x2799, r25	; 0x802799 <AccDTG+0x1>
    3dc8:	a0 93 9a 27 	sts	0x279A, r26	; 0x80279a <AccDTG+0x2>
    3dcc:	b0 93 9b 27 	sts	0x279B, r27	; 0x80279b <AccDTG+0x3>
                    }
                            
                DistanceToGo1=labs(AxisPosition1-SetJog1);  
    3dd0:	80 91 c0 27 	lds	r24, 0x27C0	; 0x8027c0 <AxisPosition1>
    3dd4:	90 91 c1 27 	lds	r25, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    3dd8:	a0 91 c2 27 	lds	r26, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    3ddc:	b0 91 c3 27 	lds	r27, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    3de0:	40 91 cc 27 	lds	r20, 0x27CC	; 0x8027cc <SetJog1>
    3de4:	50 91 cd 27 	lds	r21, 0x27CD	; 0x8027cd <SetJog1+0x1>
    3de8:	60 91 ce 27 	lds	r22, 0x27CE	; 0x8027ce <SetJog1+0x2>
    3dec:	70 91 cf 27 	lds	r23, 0x27CF	; 0x8027cf <SetJog1+0x3>
    3df0:	84 1b       	sub	r24, r20
    3df2:	95 0b       	sbc	r25, r21
    3df4:	a6 0b       	sbc	r26, r22
    3df6:	b7 0b       	sbc	r27, r23
    3df8:	ac 01       	movw	r20, r24
    3dfa:	bd 01       	movw	r22, r26
    3dfc:	3a f4       	brpl	.+14     	; 0x3e0c <_Z6cmdExev+0xe6c>
    3dfe:	44 27       	eor	r20, r20
    3e00:	55 27       	eor	r21, r21
    3e02:	ba 01       	movw	r22, r20
    3e04:	48 1b       	sub	r20, r24
    3e06:	59 0b       	sbc	r21, r25
    3e08:	6a 0b       	sbc	r22, r26
    3e0a:	7b 0b       	sbc	r23, r27
    3e0c:	40 93 a4 27 	sts	0x27A4, r20	; 0x8027a4 <DistanceToGo1>
    3e10:	50 93 a5 27 	sts	0x27A5, r21	; 0x8027a5 <DistanceToGo1+0x1>
    3e14:	60 93 a6 27 	sts	0x27A6, r22	; 0x8027a6 <DistanceToGo1+0x2>
    3e18:	70 93 a7 27 	sts	0x27A7, r23	; 0x8027a7 <DistanceToGo1+0x3>
                ACC=1;    
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <ACC>
                sprintf(BufferSend,"!0601\r\n"); 
    3e22:	98 e0       	ldi	r25, 0x08	; 8
    3e24:	eb e0       	ldi	r30, 0x0B	; 11
    3e26:	f3 e2       	ldi	r31, 0x23	; 35
    3e28:	af e6       	ldi	r26, 0x6F	; 111
    3e2a:	b9 e2       	ldi	r27, 0x29	; 41
    3e2c:	01 90       	ld	r0, Z+
    3e2e:	0d 92       	st	X+, r0
    3e30:	9a 95       	dec	r25
    3e32:	e1 f7       	brne	.-8      	; 0x3e2c <_Z6cmdExev+0xe8c>
                Responsing=1; 
    3e34:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
                SetDataReady; 
    3e38:	e0 ea       	ldi	r30, 0xA0	; 160
    3e3a:	f6 e0       	ldi	r31, 0x06	; 6
    3e3c:	84 81       	ldd	r24, Z+4	; 0x04
    3e3e:	81 60       	ori	r24, 0x01	; 1
    3e40:	84 83       	std	Z+4, r24	; 0x04
                break;
    3e42:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
             }
             case '2': //Axis 2
             {
                if(SetJog2<AxisPosition2) CLR_DIR2;
    3e46:	40 91 c8 27 	lds	r20, 0x27C8	; 0x8027c8 <SetJog2>
    3e4a:	50 91 c9 27 	lds	r21, 0x27C9	; 0x8027c9 <SetJog2+0x1>
    3e4e:	60 91 ca 27 	lds	r22, 0x27CA	; 0x8027ca <SetJog2+0x2>
    3e52:	70 91 cb 27 	lds	r23, 0x27CB	; 0x8027cb <SetJog2+0x3>
    3e56:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <AxisPosition2>
    3e5a:	90 91 bd 27 	lds	r25, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    3e5e:	a0 91 be 27 	lds	r26, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    3e62:	b0 91 bf 27 	lds	r27, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    3e66:	48 17       	cp	r20, r24
    3e68:	59 07       	cpc	r21, r25
    3e6a:	6a 07       	cpc	r22, r26
    3e6c:	7b 07       	cpc	r23, r27
    3e6e:	2c f4       	brge	.+10     	; 0x3e7a <_Z6cmdExev+0xeda>
    3e70:	e0 e2       	ldi	r30, 0x20	; 32
    3e72:	f7 e0       	ldi	r31, 0x07	; 7
    3e74:	24 81       	ldd	r18, Z+4	; 0x04
    3e76:	2b 7f       	andi	r18, 0xFB	; 251
    3e78:	24 83       	std	Z+4, r18	; 0x04
                if(SetJog2>AxisPosition2) SET_DIR2;
    3e7a:	84 17       	cp	r24, r20
    3e7c:	95 07       	cpc	r25, r21
    3e7e:	a6 07       	cpc	r26, r22
    3e80:	b7 07       	cpc	r27, r23
    3e82:	2c f4       	brge	.+10     	; 0x3e8e <_Z6cmdExev+0xeee>
    3e84:	e0 e2       	ldi	r30, 0x20	; 32
    3e86:	f7 e0       	ldi	r31, 0x07	; 7
    3e88:	24 81       	ldd	r18, Z+4	; 0x04
    3e8a:	24 60       	ori	r18, 0x04	; 4
    3e8c:	24 83       	std	Z+4, r18	; 0x04
                        
                MaxSpeed=SetSpeed2;
    3e8e:	c0 90 89 27 	lds	r12, 0x2789	; 0x802789 <SetSpeed2>
    3e92:	d0 90 8a 27 	lds	r13, 0x278A	; 0x80278a <SetSpeed2+0x1>
    3e96:	e0 90 8b 27 	lds	r14, 0x278B	; 0x80278b <SetSpeed2+0x2>
    3e9a:	f0 90 8c 27 	lds	r15, 0x278C	; 0x80278c <SetSpeed2+0x3>
    3e9e:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    3ea2:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    3ea6:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    3eaa:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
                IACC=ACC2;
    3eae:	80 90 79 27 	lds	r8, 0x2779	; 0x802779 <ACC2>
    3eb2:	90 90 7a 27 	lds	r9, 0x277A	; 0x80277a <ACC2+0x1>
    3eb6:	a0 90 7b 27 	lds	r10, 0x277B	; 0x80277b <ACC2+0x2>
    3eba:	b0 90 7c 27 	lds	r11, 0x277C	; 0x80277c <ACC2+0x3>
    3ebe:	89 82       	std	Y+1, r8	; 0x01
    3ec0:	9a 82       	std	Y+2, r9	; 0x02
    3ec2:	ab 82       	std	Y+3, r10	; 0x03
    3ec4:	bc 82       	std	Y+4, r11	; 0x04
    3ec6:	80 92 65 27 	sts	0x2765, r8	; 0x802765 <IACC>
    3eca:	90 92 66 27 	sts	0x2766, r9	; 0x802766 <IACC+0x1>
    3ece:	a0 92 67 27 	sts	0x2767, r10	; 0x802767 <IACC+0x2>
    3ed2:	b0 92 68 27 	sts	0x2768, r11	; 0x802768 <IACC+0x3>
                IDEC=DEC2;
    3ed6:	80 90 6d 27 	lds	r8, 0x276D	; 0x80276d <DEC2>
    3eda:	90 90 6e 27 	lds	r9, 0x276E	; 0x80276e <DEC2+0x1>
    3ede:	a0 90 6f 27 	lds	r10, 0x276F	; 0x80276f <DEC2+0x2>
    3ee2:	b0 90 70 27 	lds	r11, 0x2770	; 0x802770 <DEC2+0x3>
    3ee6:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    3eea:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    3eee:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    3ef2:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
                MaxDistanceToGo=labs(AxisPosition2-SetJog2); 
    3ef6:	84 1b       	sub	r24, r20
    3ef8:	95 0b       	sbc	r25, r21
    3efa:	a6 0b       	sbc	r26, r22
    3efc:	b7 0b       	sbc	r27, r23
    3efe:	2c 01       	movw	r4, r24
    3f00:	3d 01       	movw	r6, r26
    3f02:	3a f4       	brpl	.+14     	; 0x3f12 <_Z6cmdExev+0xf72>
    3f04:	44 24       	eor	r4, r4
    3f06:	55 24       	eor	r5, r5
    3f08:	32 01       	movw	r6, r4
    3f0a:	48 1a       	sub	r4, r24
    3f0c:	59 0a       	sbc	r5, r25
    3f0e:	6a 0a       	sbc	r6, r26
    3f10:	7b 0a       	sbc	r7, r27
    3f12:	40 92 a8 27 	sts	0x27A8, r4	; 0x8027a8 <MaxDistanceToGo>
    3f16:	50 92 a9 27 	sts	0x27A9, r5	; 0x8027a9 <MaxDistanceToGo+0x1>
    3f1a:	60 92 aa 27 	sts	0x27AA, r6	; 0x8027aa <MaxDistanceToGo+0x2>
    3f1e:	70 92 ab 27 	sts	0x27AB, r7	; 0x8027ab <MaxDistanceToGo+0x3>
                              
                Ma2=1000;           
    3f22:	88 ee       	ldi	r24, 0xE8	; 232
    3f24:	93 e0       	ldi	r25, 0x03	; 3
    3f26:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <Ma2>
    3f2a:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <Ma2+0x1>
                CurSpeedFrq=0;
    3f2e:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    3f32:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    3f36:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    3f3a:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
                TCC0.CCA=0xFFFF;                                                   
    3f3e:	8f ef       	ldi	r24, 0xFF	; 255
    3f40:	9f ef       	ldi	r25, 0xFF	; 255
    3f42:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3f46:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
                ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    3f4a:	c7 01       	movw	r24, r14
    3f4c:	b6 01       	movw	r22, r12
    3f4e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	48 ec       	ldi	r20, 0xC8	; 200
    3f58:	52 e4       	ldi	r21, 0x42	; 66
    3f5a:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    3f5e:	6d 83       	std	Y+5, r22	; 0x05
    3f60:	7e 83       	std	Y+6, r23	; 0x06
    3f62:	8f 83       	std	Y+7, r24	; 0x07
    3f64:	98 87       	std	Y+8, r25	; 0x08
                ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    3f66:	69 81       	ldd	r22, Y+1	; 0x01
    3f68:	7a 81       	ldd	r23, Y+2	; 0x02
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3f72:	9b 01       	movw	r18, r22
    3f74:	ac 01       	movw	r20, r24
    3f76:	6d 81       	ldd	r22, Y+5	; 0x05
    3f78:	7e 81       	ldd	r23, Y+6	; 0x06
    3f7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f7c:	98 85       	ldd	r25, Y+8	; 0x08
    3f7e:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    3f82:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    3f86:	9b 01       	movw	r18, r22
    3f88:	ac 01       	movw	r20, r24
    3f8a:	c7 01       	movw	r24, r14
    3f8c:	b6 01       	movw	r22, r12
    3f8e:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    3f92:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    3f96:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    3f9a:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    3f9e:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
                        
                DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
                DECSpeedINT= MaxSpeed / DECSpeedINT;                                                       
    3fa2:	c5 01       	movw	r24, r10
    3fa4:	b4 01       	movw	r22, r8
    3fa6:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    3faa:	9b 01       	movw	r18, r22
    3fac:	ac 01       	movw	r20, r24
    3fae:	6d 81       	ldd	r22, Y+5	; 0x05
    3fb0:	7e 81       	ldd	r23, Y+6	; 0x06
    3fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fb4:	98 85       	ldd	r25, Y+8	; 0x08
    3fb6:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    3fba:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    3fbe:	9b 01       	movw	r18, r22
    3fc0:	ac 01       	movw	r20, r24
    3fc2:	c7 01       	movw	r24, r14
    3fc4:	b6 01       	movw	r22, r12
    3fc6:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    3fca:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    3fce:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    3fd2:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    3fd6:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    3fda:	a7 01       	movw	r20, r14
    3fdc:	96 01       	movw	r18, r12
    3fde:	c7 01       	movw	r24, r14
    3fe0:	b6 01       	movw	r22, r12
    3fe2:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <__mulsi3>
    3fe6:	6d 83       	std	Y+5, r22	; 0x05
    3fe8:	7e 83       	std	Y+6, r23	; 0x06
    3fea:	8f 83       	std	Y+7, r24	; 0x07
    3fec:	98 87       	std	Y+8, r25	; 0x08
    3fee:	a5 01       	movw	r20, r10
    3ff0:	94 01       	movw	r18, r8
    3ff2:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    3ff6:	69 01       	movw	r12, r18
    3ff8:	7a 01       	movw	r14, r20
    3ffa:	20 93 94 27 	sts	0x2794, r18	; 0x802794 <DecDTG>
    3ffe:	30 93 95 27 	sts	0x2795, r19	; 0x802795 <DecDTG+0x1>
    4002:	40 93 96 27 	sts	0x2796, r20	; 0x802796 <DecDTG+0x2>
    4006:	50 93 97 27 	sts	0x2797, r21	; 0x802797 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    400a:	6d 81       	ldd	r22, Y+5	; 0x05
    400c:	7e 81       	ldd	r23, Y+6	; 0x06
    400e:	8f 81       	ldd	r24, Y+7	; 0x07
    4010:	98 85       	ldd	r25, Y+8	; 0x08
    4012:	29 81       	ldd	r18, Y+1	; 0x01
    4014:	3a 81       	ldd	r19, Y+2	; 0x02
    4016:	4b 81       	ldd	r20, Y+3	; 0x03
    4018:	5c 81       	ldd	r21, Y+4	; 0x04
    401a:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    401e:	46 01       	movw	r8, r12
    4020:	57 01       	movw	r10, r14
    4022:	82 0e       	add	r8, r18
    4024:	93 1e       	adc	r9, r19
    4026:	a4 1e       	adc	r10, r20
    4028:	b5 1e       	adc	r11, r21
    402a:	80 92 5d 27 	sts	0x275D, r8	; 0x80275d <SumAccDecDTG>
    402e:	90 92 5e 27 	sts	0x275E, r9	; 0x80275e <SumAccDecDTG+0x1>
    4032:	a0 92 5f 27 	sts	0x275F, r10	; 0x80275f <SumAccDecDTG+0x2>
    4036:	b0 92 60 27 	sts	0x2760, r11	; 0x802760 <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    403a:	84 14       	cp	r8, r4
    403c:	95 04       	cpc	r9, r5
    403e:	a6 04       	cpc	r10, r6
    4040:	b7 04       	cpc	r11, r7
    4042:	cc f1       	brlt	.+114    	; 0x40b6 <__stack+0xb7>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    4044:	c3 01       	movw	r24, r6
    4046:	b2 01       	movw	r22, r4
    4048:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    404c:	69 83       	std	Y+1, r22	; 0x01
    404e:	7a 83       	std	Y+2, r23	; 0x02
    4050:	8b 83       	std	Y+3, r24	; 0x03
    4052:	9c 83       	std	Y+4, r25	; 0x04
    4054:	c5 01       	movw	r24, r10
    4056:	b4 01       	movw	r22, r8
    4058:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    405c:	9b 01       	movw	r18, r22
    405e:	ac 01       	movw	r20, r24
    4060:	69 81       	ldd	r22, Y+1	; 0x01
    4062:	7a 81       	ldd	r23, Y+2	; 0x02
    4064:	8b 81       	ldd	r24, Y+3	; 0x03
    4066:	9c 81       	ldd	r25, Y+4	; 0x04
    4068:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    406c:	4b 01       	movw	r8, r22
    406e:	5c 01       	movw	r10, r24
    4070:	c7 01       	movw	r24, r14
    4072:	b6 01       	movw	r22, r12
    4074:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    4078:	9b 01       	movw	r18, r22
    407a:	ac 01       	movw	r20, r24
    407c:	c5 01       	movw	r24, r10
    407e:	b4 01       	movw	r22, r8
    4080:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    4084:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    4088:	60 93 94 27 	sts	0x2794, r22	; 0x802794 <DecDTG>
    408c:	70 93 95 27 	sts	0x2795, r23	; 0x802795 <DecDTG+0x1>
    4090:	80 93 96 27 	sts	0x2796, r24	; 0x802796 <DecDTG+0x2>
    4094:	90 93 97 27 	sts	0x2797, r25	; 0x802797 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    4098:	63 01       	movw	r12, r6
    409a:	52 01       	movw	r10, r4
    409c:	a6 1a       	sub	r10, r22
    409e:	b7 0a       	sbc	r11, r23
    40a0:	c8 0a       	sbc	r12, r24
    40a2:	d9 0a       	sbc	r13, r25
    40a4:	a0 92 98 27 	sts	0x2798, r10	; 0x802798 <AccDTG>
    40a8:	b0 92 99 27 	sts	0x2799, r11	; 0x802799 <AccDTG+0x1>
    40ac:	c0 92 9a 27 	sts	0x279A, r12	; 0x80279a <AccDTG+0x2>
    40b0:	d0 92 9b 27 	sts	0x279B, r13	; 0x80279b <AccDTG+0x3>
    40b4:	0e c0       	rjmp	.+28     	; 0x40d2 <__stack+0xd3>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    40b6:	d3 01       	movw	r26, r6
    40b8:	c2 01       	movw	r24, r4
    40ba:	82 1b       	sub	r24, r18
    40bc:	93 0b       	sbc	r25, r19
    40be:	a4 0b       	sbc	r26, r20
    40c0:	b5 0b       	sbc	r27, r21
    40c2:	80 93 98 27 	sts	0x2798, r24	; 0x802798 <AccDTG>
    40c6:	90 93 99 27 	sts	0x2799, r25	; 0x802799 <AccDTG+0x1>
    40ca:	a0 93 9a 27 	sts	0x279A, r26	; 0x80279a <AccDTG+0x2>
    40ce:	b0 93 9b 27 	sts	0x279B, r27	; 0x80279b <AccDTG+0x3>
                    }
                            
                DistanceToGo2=labs(AxisPosition2-SetJog2);  
    40d2:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <AxisPosition2>
    40d6:	90 91 bd 27 	lds	r25, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    40da:	a0 91 be 27 	lds	r26, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    40de:	b0 91 bf 27 	lds	r27, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    40e2:	40 91 c8 27 	lds	r20, 0x27C8	; 0x8027c8 <SetJog2>
    40e6:	50 91 c9 27 	lds	r21, 0x27C9	; 0x8027c9 <SetJog2+0x1>
    40ea:	60 91 ca 27 	lds	r22, 0x27CA	; 0x8027ca <SetJog2+0x2>
    40ee:	70 91 cb 27 	lds	r23, 0x27CB	; 0x8027cb <SetJog2+0x3>
    40f2:	84 1b       	sub	r24, r20
    40f4:	95 0b       	sbc	r25, r21
    40f6:	a6 0b       	sbc	r26, r22
    40f8:	b7 0b       	sbc	r27, r23
    40fa:	ac 01       	movw	r20, r24
    40fc:	bd 01       	movw	r22, r26
    40fe:	3a f4       	brpl	.+14     	; 0x410e <__stack+0x10f>
    4100:	44 27       	eor	r20, r20
    4102:	55 27       	eor	r21, r21
    4104:	ba 01       	movw	r22, r20
    4106:	48 1b       	sub	r20, r24
    4108:	59 0b       	sbc	r21, r25
    410a:	6a 0b       	sbc	r22, r26
    410c:	7b 0b       	sbc	r23, r27
    410e:	40 93 a0 27 	sts	0x27A0, r20	; 0x8027a0 <DistanceToGo2>
    4112:	50 93 a1 27 	sts	0x27A1, r21	; 0x8027a1 <DistanceToGo2+0x1>
    4116:	60 93 a2 27 	sts	0x27A2, r22	; 0x8027a2 <DistanceToGo2+0x2>
    411a:	70 93 a3 27 	sts	0x27A3, r23	; 0x8027a3 <DistanceToGo2+0x3>
                ACC=1;    
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <ACC>
                sprintf(BufferSend,"!0602\r\n");
    4124:	98 e0       	ldi	r25, 0x08	; 8
    4126:	e3 e1       	ldi	r30, 0x13	; 19
    4128:	f3 e2       	ldi	r31, 0x23	; 35
    412a:	af e6       	ldi	r26, 0x6F	; 111
    412c:	b9 e2       	ldi	r27, 0x29	; 41
    412e:	01 90       	ld	r0, Z+
    4130:	0d 92       	st	X+, r0
    4132:	9a 95       	dec	r25
    4134:	e1 f7       	brne	.-8      	; 0x412e <__stack+0x12f>
                Responsing=1;  
    4136:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
                SetDataReady;
    413a:	e0 ea       	ldi	r30, 0xA0	; 160
    413c:	f6 e0       	ldi	r31, 0x06	; 6
    413e:	84 81       	ldd	r24, Z+4	; 0x04
    4140:	81 60       	ori	r24, 0x01	; 1
    4142:	84 83       	std	Z+4, r24	; 0x04
                break;
    4144:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
             } 
            case '3': //Axis 3
            {
            if(SetJog3<AxisPosition3) CLR_DIR3;
    4148:	40 91 c4 27 	lds	r20, 0x27C4	; 0x8027c4 <SetJog3>
    414c:	50 91 c5 27 	lds	r21, 0x27C5	; 0x8027c5 <SetJog3+0x1>
    4150:	60 91 c6 27 	lds	r22, 0x27C6	; 0x8027c6 <SetJog3+0x2>
    4154:	70 91 c7 27 	lds	r23, 0x27C7	; 0x8027c7 <SetJog3+0x3>
    4158:	80 91 b8 27 	lds	r24, 0x27B8	; 0x8027b8 <AxisPosition3>
    415c:	90 91 b9 27 	lds	r25, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    4160:	a0 91 ba 27 	lds	r26, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    4164:	b0 91 bb 27 	lds	r27, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    4168:	48 17       	cp	r20, r24
    416a:	59 07       	cpc	r21, r25
    416c:	6a 07       	cpc	r22, r26
    416e:	7b 07       	cpc	r23, r27
    4170:	2c f4       	brge	.+10     	; 0x417c <__stack+0x17d>
    4172:	e0 e2       	ldi	r30, 0x20	; 32
    4174:	f7 e0       	ldi	r31, 0x07	; 7
    4176:	24 81       	ldd	r18, Z+4	; 0x04
    4178:	2e 7f       	andi	r18, 0xFE	; 254
    417a:	24 83       	std	Z+4, r18	; 0x04
            if(SetJog3>AxisPosition3) SET_DIR3;
    417c:	84 17       	cp	r24, r20
    417e:	95 07       	cpc	r25, r21
    4180:	a6 07       	cpc	r26, r22
    4182:	b7 07       	cpc	r27, r23
    4184:	2c f4       	brge	.+10     	; 0x4190 <__stack+0x191>
    4186:	e0 e2       	ldi	r30, 0x20	; 32
    4188:	f7 e0       	ldi	r31, 0x07	; 7
    418a:	24 81       	ldd	r18, Z+4	; 0x04
    418c:	21 60       	ori	r18, 0x01	; 1
    418e:	24 83       	std	Z+4, r18	; 0x04
                        
            MaxSpeed=SetSpeed3;
    4190:	c0 90 85 27 	lds	r12, 0x2785	; 0x802785 <SetSpeed3>
    4194:	d0 90 86 27 	lds	r13, 0x2786	; 0x802786 <SetSpeed3+0x1>
    4198:	e0 90 87 27 	lds	r14, 0x2787	; 0x802787 <SetSpeed3+0x2>
    419c:	f0 90 88 27 	lds	r15, 0x2788	; 0x802788 <SetSpeed3+0x3>
    41a0:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    41a4:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    41a8:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    41ac:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
            IACC=ACC3;
    41b0:	80 90 75 27 	lds	r8, 0x2775	; 0x802775 <ACC3>
    41b4:	90 90 76 27 	lds	r9, 0x2776	; 0x802776 <ACC3+0x1>
    41b8:	a0 90 77 27 	lds	r10, 0x2777	; 0x802777 <ACC3+0x2>
    41bc:	b0 90 78 27 	lds	r11, 0x2778	; 0x802778 <ACC3+0x3>
    41c0:	89 82       	std	Y+1, r8	; 0x01
    41c2:	9a 82       	std	Y+2, r9	; 0x02
    41c4:	ab 82       	std	Y+3, r10	; 0x03
    41c6:	bc 82       	std	Y+4, r11	; 0x04
    41c8:	80 92 65 27 	sts	0x2765, r8	; 0x802765 <IACC>
    41cc:	90 92 66 27 	sts	0x2766, r9	; 0x802766 <IACC+0x1>
    41d0:	a0 92 67 27 	sts	0x2767, r10	; 0x802767 <IACC+0x2>
    41d4:	b0 92 68 27 	sts	0x2768, r11	; 0x802768 <IACC+0x3>
            IDEC=DEC3;
    41d8:	80 90 69 27 	lds	r8, 0x2769	; 0x802769 <DEC3>
    41dc:	90 90 6a 27 	lds	r9, 0x276A	; 0x80276a <DEC3+0x1>
    41e0:	a0 90 6b 27 	lds	r10, 0x276B	; 0x80276b <DEC3+0x2>
    41e4:	b0 90 6c 27 	lds	r11, 0x276C	; 0x80276c <DEC3+0x3>
    41e8:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    41ec:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    41f0:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    41f4:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
            MaxDistanceToGo = labs(AxisPosition3-SetJog3);  
    41f8:	84 1b       	sub	r24, r20
    41fa:	95 0b       	sbc	r25, r21
    41fc:	a6 0b       	sbc	r26, r22
    41fe:	b7 0b       	sbc	r27, r23
    4200:	2c 01       	movw	r4, r24
    4202:	3d 01       	movw	r6, r26
    4204:	3a f4       	brpl	.+14     	; 0x4214 <__stack+0x215>
    4206:	44 24       	eor	r4, r4
    4208:	55 24       	eor	r5, r5
    420a:	32 01       	movw	r6, r4
    420c:	48 1a       	sub	r4, r24
    420e:	59 0a       	sbc	r5, r25
    4210:	6a 0a       	sbc	r6, r26
    4212:	7b 0a       	sbc	r7, r27
    4214:	40 92 a8 27 	sts	0x27A8, r4	; 0x8027a8 <MaxDistanceToGo>
    4218:	50 92 a9 27 	sts	0x27A9, r5	; 0x8027a9 <MaxDistanceToGo+0x1>
    421c:	60 92 aa 27 	sts	0x27AA, r6	; 0x8027aa <MaxDistanceToGo+0x2>
    4220:	70 92 ab 27 	sts	0x27AB, r7	; 0x8027ab <MaxDistanceToGo+0x3>
                         
            Ma3=1000;           
    4224:	88 ee       	ldi	r24, 0xE8	; 232
    4226:	93 e0       	ldi	r25, 0x03	; 3
    4228:	80 93 40 27 	sts	0x2740, r24	; 0x802740 <Ma3>
    422c:	90 93 41 27 	sts	0x2741, r25	; 0x802741 <Ma3+0x1>
            CurSpeedFrq=0;
    4230:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    4234:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    4238:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    423c:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;                                                   
    4240:	8f ef       	ldi	r24, 0xFF	; 255
    4242:	9f ef       	ldi	r25, 0xFF	; 255
    4244:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4248:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    424c:	c7 01       	movw	r24, r14
    424e:	b6 01       	movw	r22, r12
    4250:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	48 ec       	ldi	r20, 0xC8	; 200
    425a:	52 e4       	ldi	r21, 0x42	; 66
    425c:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    4260:	6d 83       	std	Y+5, r22	; 0x05
    4262:	7e 83       	std	Y+6, r23	; 0x06
    4264:	8f 83       	std	Y+7, r24	; 0x07
    4266:	98 87       	std	Y+8, r25	; 0x08
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    4268:	69 81       	ldd	r22, Y+1	; 0x01
    426a:	7a 81       	ldd	r23, Y+2	; 0x02
    426c:	8b 81       	ldd	r24, Y+3	; 0x03
    426e:	9c 81       	ldd	r25, Y+4	; 0x04
    4270:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    4274:	9b 01       	movw	r18, r22
    4276:	ac 01       	movw	r20, r24
    4278:	6d 81       	ldd	r22, Y+5	; 0x05
    427a:	7e 81       	ldd	r23, Y+6	; 0x06
    427c:	8f 81       	ldd	r24, Y+7	; 0x07
    427e:	98 85       	ldd	r25, Y+8	; 0x08
    4280:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    4284:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    4288:	9b 01       	movw	r18, r22
    428a:	ac 01       	movw	r20, r24
    428c:	c7 01       	movw	r24, r14
    428e:	b6 01       	movw	r22, r12
    4290:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    4294:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    4298:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    429c:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    42a0:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
                        
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                                                       
    42a4:	c5 01       	movw	r24, r10
    42a6:	b4 01       	movw	r22, r8
    42a8:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    42ac:	9b 01       	movw	r18, r22
    42ae:	ac 01       	movw	r20, r24
    42b0:	6d 81       	ldd	r22, Y+5	; 0x05
    42b2:	7e 81       	ldd	r23, Y+6	; 0x06
    42b4:	8f 81       	ldd	r24, Y+7	; 0x07
    42b6:	98 85       	ldd	r25, Y+8	; 0x08
    42b8:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    42bc:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    42c0:	9b 01       	movw	r18, r22
    42c2:	ac 01       	movw	r20, r24
    42c4:	c7 01       	movw	r24, r14
    42c6:	b6 01       	movw	r22, r12
    42c8:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    42cc:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    42d0:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    42d4:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    42d8:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    42dc:	a7 01       	movw	r20, r14
    42de:	96 01       	movw	r18, r12
    42e0:	c7 01       	movw	r24, r14
    42e2:	b6 01       	movw	r22, r12
    42e4:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <__mulsi3>
    42e8:	6d 83       	std	Y+5, r22	; 0x05
    42ea:	7e 83       	std	Y+6, r23	; 0x06
    42ec:	8f 83       	std	Y+7, r24	; 0x07
    42ee:	98 87       	std	Y+8, r25	; 0x08
    42f0:	a5 01       	movw	r20, r10
    42f2:	94 01       	movw	r18, r8
    42f4:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    42f8:	69 01       	movw	r12, r18
    42fa:	7a 01       	movw	r14, r20
    42fc:	20 93 94 27 	sts	0x2794, r18	; 0x802794 <DecDTG>
    4300:	30 93 95 27 	sts	0x2795, r19	; 0x802795 <DecDTG+0x1>
    4304:	40 93 96 27 	sts	0x2796, r20	; 0x802796 <DecDTG+0x2>
    4308:	50 93 97 27 	sts	0x2797, r21	; 0x802797 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    430c:	6d 81       	ldd	r22, Y+5	; 0x05
    430e:	7e 81       	ldd	r23, Y+6	; 0x06
    4310:	8f 81       	ldd	r24, Y+7	; 0x07
    4312:	98 85       	ldd	r25, Y+8	; 0x08
    4314:	29 81       	ldd	r18, Y+1	; 0x01
    4316:	3a 81       	ldd	r19, Y+2	; 0x02
    4318:	4b 81       	ldd	r20, Y+3	; 0x03
    431a:	5c 81       	ldd	r21, Y+4	; 0x04
    431c:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    4320:	46 01       	movw	r8, r12
    4322:	57 01       	movw	r10, r14
    4324:	82 0e       	add	r8, r18
    4326:	93 1e       	adc	r9, r19
    4328:	a4 1e       	adc	r10, r20
    432a:	b5 1e       	adc	r11, r21
    432c:	80 92 5d 27 	sts	0x275D, r8	; 0x80275d <SumAccDecDTG>
    4330:	90 92 5e 27 	sts	0x275E, r9	; 0x80275e <SumAccDecDTG+0x1>
    4334:	a0 92 5f 27 	sts	0x275F, r10	; 0x80275f <SumAccDecDTG+0x2>
    4338:	b0 92 60 27 	sts	0x2760, r11	; 0x802760 <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    433c:	84 14       	cp	r8, r4
    433e:	95 04       	cpc	r9, r5
    4340:	a6 04       	cpc	r10, r6
    4342:	b7 04       	cpc	r11, r7
    4344:	cc f1       	brlt	.+114    	; 0x43b8 <__stack+0x3b9>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    4346:	c3 01       	movw	r24, r6
    4348:	b2 01       	movw	r22, r4
    434a:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    434e:	69 83       	std	Y+1, r22	; 0x01
    4350:	7a 83       	std	Y+2, r23	; 0x02
    4352:	8b 83       	std	Y+3, r24	; 0x03
    4354:	9c 83       	std	Y+4, r25	; 0x04
    4356:	c5 01       	movw	r24, r10
    4358:	b4 01       	movw	r22, r8
    435a:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    435e:	9b 01       	movw	r18, r22
    4360:	ac 01       	movw	r20, r24
    4362:	69 81       	ldd	r22, Y+1	; 0x01
    4364:	7a 81       	ldd	r23, Y+2	; 0x02
    4366:	8b 81       	ldd	r24, Y+3	; 0x03
    4368:	9c 81       	ldd	r25, Y+4	; 0x04
    436a:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    436e:	4b 01       	movw	r8, r22
    4370:	5c 01       	movw	r10, r24
    4372:	c7 01       	movw	r24, r14
    4374:	b6 01       	movw	r22, r12
    4376:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    437a:	9b 01       	movw	r18, r22
    437c:	ac 01       	movw	r20, r24
    437e:	c5 01       	movw	r24, r10
    4380:	b4 01       	movw	r22, r8
    4382:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    4386:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    438a:	60 93 94 27 	sts	0x2794, r22	; 0x802794 <DecDTG>
    438e:	70 93 95 27 	sts	0x2795, r23	; 0x802795 <DecDTG+0x1>
    4392:	80 93 96 27 	sts	0x2796, r24	; 0x802796 <DecDTG+0x2>
    4396:	90 93 97 27 	sts	0x2797, r25	; 0x802797 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    439a:	63 01       	movw	r12, r6
    439c:	52 01       	movw	r10, r4
    439e:	a6 1a       	sub	r10, r22
    43a0:	b7 0a       	sbc	r11, r23
    43a2:	c8 0a       	sbc	r12, r24
    43a4:	d9 0a       	sbc	r13, r25
    43a6:	a0 92 98 27 	sts	0x2798, r10	; 0x802798 <AccDTG>
    43aa:	b0 92 99 27 	sts	0x2799, r11	; 0x802799 <AccDTG+0x1>
    43ae:	c0 92 9a 27 	sts	0x279A, r12	; 0x80279a <AccDTG+0x2>
    43b2:	d0 92 9b 27 	sts	0x279B, r13	; 0x80279b <AccDTG+0x3>
    43b6:	0e c0       	rjmp	.+28     	; 0x43d4 <__stack+0x3d5>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    43b8:	d3 01       	movw	r26, r6
    43ba:	c2 01       	movw	r24, r4
    43bc:	82 1b       	sub	r24, r18
    43be:	93 0b       	sbc	r25, r19
    43c0:	a4 0b       	sbc	r26, r20
    43c2:	b5 0b       	sbc	r27, r21
    43c4:	80 93 98 27 	sts	0x2798, r24	; 0x802798 <AccDTG>
    43c8:	90 93 99 27 	sts	0x2799, r25	; 0x802799 <AccDTG+0x1>
    43cc:	a0 93 9a 27 	sts	0x279A, r26	; 0x80279a <AccDTG+0x2>
    43d0:	b0 93 9b 27 	sts	0x279B, r27	; 0x80279b <AccDTG+0x3>
                    }
                            
                DistanceToGo3=labs(AxisPosition3-SetJog3);  
    43d4:	80 91 b8 27 	lds	r24, 0x27B8	; 0x8027b8 <AxisPosition3>
    43d8:	90 91 b9 27 	lds	r25, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    43dc:	a0 91 ba 27 	lds	r26, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    43e0:	b0 91 bb 27 	lds	r27, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    43e4:	40 91 c4 27 	lds	r20, 0x27C4	; 0x8027c4 <SetJog3>
    43e8:	50 91 c5 27 	lds	r21, 0x27C5	; 0x8027c5 <SetJog3+0x1>
    43ec:	60 91 c6 27 	lds	r22, 0x27C6	; 0x8027c6 <SetJog3+0x2>
    43f0:	70 91 c7 27 	lds	r23, 0x27C7	; 0x8027c7 <SetJog3+0x3>
    43f4:	84 1b       	sub	r24, r20
    43f6:	95 0b       	sbc	r25, r21
    43f8:	a6 0b       	sbc	r26, r22
    43fa:	b7 0b       	sbc	r27, r23
    43fc:	ac 01       	movw	r20, r24
    43fe:	bd 01       	movw	r22, r26
    4400:	3a f4       	brpl	.+14     	; 0x4410 <__stack+0x411>
    4402:	44 27       	eor	r20, r20
    4404:	55 27       	eor	r21, r21
    4406:	ba 01       	movw	r22, r20
    4408:	48 1b       	sub	r20, r24
    440a:	59 0b       	sbc	r21, r25
    440c:	6a 0b       	sbc	r22, r26
    440e:	7b 0b       	sbc	r23, r27
    4410:	40 93 9c 27 	sts	0x279C, r20	; 0x80279c <DistanceToGo3>
    4414:	50 93 9d 27 	sts	0x279D, r21	; 0x80279d <DistanceToGo3+0x1>
    4418:	60 93 9e 27 	sts	0x279E, r22	; 0x80279e <DistanceToGo3+0x2>
    441c:	70 93 9f 27 	sts	0x279F, r23	; 0x80279f <DistanceToGo3+0x3>
                ACC=1;    
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <ACC>
                sprintf(BufferSend,"!0603\r\n");
    4426:	98 e0       	ldi	r25, 0x08	; 8
    4428:	eb e1       	ldi	r30, 0x1B	; 27
    442a:	f3 e2       	ldi	r31, 0x23	; 35
    442c:	af e6       	ldi	r26, 0x6F	; 111
    442e:	b9 e2       	ldi	r27, 0x29	; 41
    4430:	01 90       	ld	r0, Z+
    4432:	0d 92       	st	X+, r0
    4434:	9a 95       	dec	r25
    4436:	e1 f7       	brne	.-8      	; 0x4430 <__stack+0x431>
            Responsing=1;  
    4438:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
            SetDataReady;
    443c:	e0 ea       	ldi	r30, 0xA0	; 160
    443e:	f6 e0       	ldi	r31, 0x06	; 6
    4440:	84 81       	ldd	r24, Z+4	; 0x04
    4442:	81 60       	ori	r24, 0x01	; 1
    4444:	84 83       	std	Z+4, r24	; 0x04
            break;
    4446:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
            }                
           }
      }
      else if(cmdTemp[3]=='1')//Axis Selected
    444a:	81 33       	cpi	r24, 0x31	; 49
    444c:	09 f0       	breq	.+2      	; 0x4450 <__stack+0x451>
    444e:	4b c0       	rjmp	.+150    	; 0x44e6 <__stack+0x4e7>
      {
       switch(cmdTemp[4])
    4450:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    4454:	82 33       	cpi	r24, 0x32	; 50
    4456:	d9 f0       	breq	.+54     	; 0x448e <__stack+0x48f>
    4458:	83 33       	cpi	r24, 0x33	; 51
    445a:	79 f1       	breq	.+94     	; 0x44ba <__stack+0x4bb>
    445c:	81 33       	cpi	r24, 0x31	; 49
    445e:	11 f0       	breq	.+4      	; 0x4464 <__stack+0x465>
    4460:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         case '1': //Axis 1
         {
            SelectedAxis=1;
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0611\r\n"); 
    446a:	98 e0       	ldi	r25, 0x08	; 8
    446c:	e3 e2       	ldi	r30, 0x23	; 35
    446e:	f3 e2       	ldi	r31, 0x23	; 35
    4470:	af e6       	ldi	r26, 0x6F	; 111
    4472:	b9 e2       	ldi	r27, 0x29	; 41
    4474:	01 90       	ld	r0, Z+
    4476:	0d 92       	st	X+, r0
    4478:	9a 95       	dec	r25
    447a:	e1 f7       	brne	.-8      	; 0x4474 <__stack+0x475>
            Responsing=1; 
    447c:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
            SetDataReady;
    4480:	e0 ea       	ldi	r30, 0xA0	; 160
    4482:	f6 e0       	ldi	r31, 0x06	; 6
    4484:	84 81       	ldd	r24, Z+4	; 0x04
    4486:	81 60       	ori	r24, 0x01	; 1
    4488:	84 83       	std	Z+4, r24	; 0x04
            break;
    448a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         }
         case '2': //Axis 2
         {
            SelectedAxis=2;
    448e:	82 e0       	ldi	r24, 0x02	; 2
    4490:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0612\r\n"); 
    4494:	88 e0       	ldi	r24, 0x08	; 8
    4496:	eb e2       	ldi	r30, 0x2B	; 43
    4498:	f3 e2       	ldi	r31, 0x23	; 35
    449a:	af e6       	ldi	r26, 0x6F	; 111
    449c:	b9 e2       	ldi	r27, 0x29	; 41
    449e:	01 90       	ld	r0, Z+
    44a0:	0d 92       	st	X+, r0
    44a2:	8a 95       	dec	r24
    44a4:	e1 f7       	brne	.-8      	; 0x449e <__stack+0x49f>
            Responsing=1; 
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
            SetDataReady;
    44ac:	e0 ea       	ldi	r30, 0xA0	; 160
    44ae:	f6 e0       	ldi	r31, 0x06	; 6
    44b0:	84 81       	ldd	r24, Z+4	; 0x04
    44b2:	81 60       	ori	r24, 0x01	; 1
    44b4:	84 83       	std	Z+4, r24	; 0x04
            break;
    44b6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         } 
        case '3': //Axis 3
        {        
            SelectedAxis=3;
    44ba:	83 e0       	ldi	r24, 0x03	; 3
    44bc:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0613\r\n"); 
    44c0:	88 e0       	ldi	r24, 0x08	; 8
    44c2:	e3 e3       	ldi	r30, 0x33	; 51
    44c4:	f3 e2       	ldi	r31, 0x23	; 35
    44c6:	af e6       	ldi	r26, 0x6F	; 111
    44c8:	b9 e2       	ldi	r27, 0x29	; 41
    44ca:	01 90       	ld	r0, Z+
    44cc:	0d 92       	st	X+, r0
    44ce:	8a 95       	dec	r24
    44d0:	e1 f7       	brne	.-8      	; 0x44ca <__stack+0x4cb>
            Responsing=1; 
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
            SetDataReady;
    44d8:	e0 ea       	ldi	r30, 0xA0	; 160
    44da:	f6 e0       	ldi	r31, 0x06	; 6
    44dc:	84 81       	ldd	r24, Z+4	; 0x04
    44de:	81 60       	ori	r24, 0x01	; 1
    44e0:	84 83       	std	Z+4, r24	; 0x04
            break;
    44e2:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
        }     
      }
     }
      else if(cmdTemp[3]=='2')//Free Jog   to Positive
    44e6:	82 33       	cpi	r24, 0x32	; 50
    44e8:	09 f0       	breq	.+2      	; 0x44ec <__stack+0x4ed>
    44ea:	ee c1       	rjmp	.+988    	; 0x48c8 <__stack+0x8c9>
      {
       switch(cmdTemp[4])
    44ec:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    44f0:	82 33       	cpi	r24, 0x32	; 50
    44f2:	09 f4       	brne	.+2      	; 0x44f6 <__stack+0x4f7>
    44f4:	a7 c0       	rjmp	.+334    	; 0x4644 <__stack+0x645>
    44f6:	83 33       	cpi	r24, 0x33	; 51
    44f8:	09 f4       	brne	.+2      	; 0x44fc <__stack+0x4fd>
    44fa:	45 c1       	rjmp	.+650    	; 0x4786 <__stack+0x787>
    44fc:	81 33       	cpi	r24, 0x31	; 49
    44fe:	11 f0       	breq	.+4      	; 0x4504 <__stack+0x505>
    4500:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         case '1': //Axis 1
         {
            SET_DIR1;                        
    4504:	e0 e2       	ldi	r30, 0x20	; 32
    4506:	f7 e0       	ldi	r31, 0x07	; 7
    4508:	84 81       	ldd	r24, Z+4	; 0x04
    450a:	80 61       	ori	r24, 0x10	; 16
    450c:	84 83       	std	Z+4, r24	; 0x04
            MaxSpeed=SetSpeed1; 
    450e:	c0 90 8d 27 	lds	r12, 0x278D	; 0x80278d <SetSpeed1>
    4512:	d0 90 8e 27 	lds	r13, 0x278E	; 0x80278e <SetSpeed1+0x1>
    4516:	e0 90 8f 27 	lds	r14, 0x278F	; 0x80278f <SetSpeed1+0x2>
    451a:	f0 90 90 27 	lds	r15, 0x2790	; 0x802790 <SetSpeed1+0x3>
    451e:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    4522:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    4526:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    452a:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
            IACC=ACC1; 
    452e:	80 90 7d 27 	lds	r8, 0x277D	; 0x80277d <ACC1>
    4532:	90 90 7e 27 	lds	r9, 0x277E	; 0x80277e <ACC1+0x1>
    4536:	a0 90 7f 27 	lds	r10, 0x277F	; 0x80277f <ACC1+0x2>
    453a:	b0 90 80 27 	lds	r11, 0x2780	; 0x802780 <ACC1+0x3>
    453e:	80 92 65 27 	sts	0x2765, r8	; 0x802765 <IACC>
    4542:	90 92 66 27 	sts	0x2766, r9	; 0x802766 <IACC+0x1>
    4546:	a0 92 67 27 	sts	0x2767, r10	; 0x802767 <IACC+0x2>
    454a:	b0 92 68 27 	sts	0x2768, r11	; 0x802768 <IACC+0x3>
            IDEC=DEC1;         
    454e:	40 90 71 27 	lds	r4, 0x2771	; 0x802771 <DEC1>
    4552:	50 90 72 27 	lds	r5, 0x2772	; 0x802772 <DEC1+0x1>
    4556:	60 90 73 27 	lds	r6, 0x2773	; 0x802773 <DEC1+0x2>
    455a:	70 90 74 27 	lds	r7, 0x2774	; 0x802774 <DEC1+0x3>
    455e:	40 92 61 27 	sts	0x2761, r4	; 0x802761 <IDEC>
    4562:	50 92 62 27 	sts	0x2762, r5	; 0x802762 <IDEC+0x1>
    4566:	60 92 63 27 	sts	0x2763, r6	; 0x802763 <IDEC+0x2>
    456a:	70 92 64 27 	sts	0x2764, r7	; 0x802764 <IDEC+0x3>
            CurSpeedFrq=0;
    456e:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    4572:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    4576:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    457a:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;                                                   
    457e:	8f ef       	ldi	r24, 0xFF	; 255
    4580:	9f ef       	ldi	r25, 0xFF	; 255
    4582:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4586:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    458a:	c7 01       	movw	r24, r14
    458c:	b6 01       	movw	r22, r12
    458e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	48 ec       	ldi	r20, 0xC8	; 200
    4598:	52 e4       	ldi	r21, 0x42	; 66
    459a:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    459e:	69 83       	std	Y+1, r22	; 0x01
    45a0:	7a 83       	std	Y+2, r23	; 0x02
    45a2:	8b 83       	std	Y+3, r24	; 0x03
    45a4:	9c 83       	std	Y+4, r25	; 0x04
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    45a6:	c5 01       	movw	r24, r10
    45a8:	b4 01       	movw	r22, r8
    45aa:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    45ae:	9b 01       	movw	r18, r22
    45b0:	ac 01       	movw	r20, r24
    45b2:	69 81       	ldd	r22, Y+1	; 0x01
    45b4:	7a 81       	ldd	r23, Y+2	; 0x02
    45b6:	8b 81       	ldd	r24, Y+3	; 0x03
    45b8:	9c 81       	ldd	r25, Y+4	; 0x04
    45ba:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    45be:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    45c2:	9b 01       	movw	r18, r22
    45c4:	ac 01       	movw	r20, r24
    45c6:	c7 01       	movw	r24, r14
    45c8:	b6 01       	movw	r22, r12
    45ca:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    45ce:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    45d2:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    45d6:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    45da:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
                        
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                  
    45de:	c3 01       	movw	r24, r6
    45e0:	b2 01       	movw	r22, r4
    45e2:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    45e6:	9b 01       	movw	r18, r22
    45e8:	ac 01       	movw	r20, r24
    45ea:	69 81       	ldd	r22, Y+1	; 0x01
    45ec:	7a 81       	ldd	r23, Y+2	; 0x02
    45ee:	8b 81       	ldd	r24, Y+3	; 0x03
    45f0:	9c 81       	ldd	r25, Y+4	; 0x04
    45f2:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    45f6:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    45fa:	9b 01       	movw	r18, r22
    45fc:	ac 01       	movw	r20, r24
    45fe:	c7 01       	movw	r24, r14
    4600:	b6 01       	movw	r22, r12
    4602:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    4606:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    460a:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    460e:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    4612:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
            FreeJog=1; 
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
            ACC=1;    
    461c:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <ACC>
            sprintf(BufferSend,"!0601\r\n"); 
    4620:	98 e0       	ldi	r25, 0x08	; 8
    4622:	eb e0       	ldi	r30, 0x0B	; 11
    4624:	f3 e2       	ldi	r31, 0x23	; 35
    4626:	af e6       	ldi	r26, 0x6F	; 111
    4628:	b9 e2       	ldi	r27, 0x29	; 41
    462a:	01 90       	ld	r0, Z+
    462c:	0d 92       	st	X+, r0
    462e:	9a 95       	dec	r25
    4630:	e1 f7       	brne	.-8      	; 0x462a <__stack+0x62b>
            Responsing=1; 
    4632:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
            SetDataReady; 
    4636:	e0 ea       	ldi	r30, 0xA0	; 160
    4638:	f6 e0       	ldi	r31, 0x06	; 6
    463a:	84 81       	ldd	r24, Z+4	; 0x04
    463c:	81 60       	ori	r24, 0x01	; 1
    463e:	84 83       	std	Z+4, r24	; 0x04
            break;
    4640:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         }
         case '2': //Axis 2
         {
            SET_DIR2;            
    4644:	e0 e2       	ldi	r30, 0x20	; 32
    4646:	f7 e0       	ldi	r31, 0x07	; 7
    4648:	84 81       	ldd	r24, Z+4	; 0x04
    464a:	84 60       	ori	r24, 0x04	; 4
    464c:	84 83       	std	Z+4, r24	; 0x04
            MaxSpeed=SetSpeed2;
    464e:	c0 90 89 27 	lds	r12, 0x2789	; 0x802789 <SetSpeed2>
    4652:	d0 90 8a 27 	lds	r13, 0x278A	; 0x80278a <SetSpeed2+0x1>
    4656:	e0 90 8b 27 	lds	r14, 0x278B	; 0x80278b <SetSpeed2+0x2>
    465a:	f0 90 8c 27 	lds	r15, 0x278C	; 0x80278c <SetSpeed2+0x3>
    465e:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    4662:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    4666:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    466a:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
            IACC=ACC2;
    466e:	40 90 79 27 	lds	r4, 0x2779	; 0x802779 <ACC2>
    4672:	50 90 7a 27 	lds	r5, 0x277A	; 0x80277a <ACC2+0x1>
    4676:	60 90 7b 27 	lds	r6, 0x277B	; 0x80277b <ACC2+0x2>
    467a:	70 90 7c 27 	lds	r7, 0x277C	; 0x80277c <ACC2+0x3>
    467e:	40 92 65 27 	sts	0x2765, r4	; 0x802765 <IACC>
    4682:	50 92 66 27 	sts	0x2766, r5	; 0x802766 <IACC+0x1>
    4686:	60 92 67 27 	sts	0x2767, r6	; 0x802767 <IACC+0x2>
    468a:	70 92 68 27 	sts	0x2768, r7	; 0x802768 <IACC+0x3>
            IDEC=DEC2;                     
    468e:	80 90 6d 27 	lds	r8, 0x276D	; 0x80276d <DEC2>
    4692:	90 90 6e 27 	lds	r9, 0x276E	; 0x80276e <DEC2+0x1>
    4696:	a0 90 6f 27 	lds	r10, 0x276F	; 0x80276f <DEC2+0x2>
    469a:	b0 90 70 27 	lds	r11, 0x2770	; 0x802770 <DEC2+0x3>
    469e:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    46a2:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    46a6:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    46aa:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
            CurSpeedFrq=0;
    46ae:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    46b2:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    46b6:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    46ba:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;  
    46be:	8f ef       	ldi	r24, 0xFF	; 255
    46c0:	9f ef       	ldi	r25, 0xFF	; 255
    46c2:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    46c6:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                           
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    46ca:	c7 01       	movw	r24, r14
    46cc:	b6 01       	movw	r22, r12
    46ce:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	48 ec       	ldi	r20, 0xC8	; 200
    46d8:	52 e4       	ldi	r21, 0x42	; 66
    46da:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    46de:	69 83       	std	Y+1, r22	; 0x01
    46e0:	7a 83       	std	Y+2, r23	; 0x02
    46e2:	8b 83       	std	Y+3, r24	; 0x03
    46e4:	9c 83       	std	Y+4, r25	; 0x04
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    46e6:	c3 01       	movw	r24, r6
    46e8:	b2 01       	movw	r22, r4
    46ea:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    46ee:	9b 01       	movw	r18, r22
    46f0:	ac 01       	movw	r20, r24
    46f2:	69 81       	ldd	r22, Y+1	; 0x01
    46f4:	7a 81       	ldd	r23, Y+2	; 0x02
    46f6:	8b 81       	ldd	r24, Y+3	; 0x03
    46f8:	9c 81       	ldd	r25, Y+4	; 0x04
    46fa:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    46fe:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    4702:	9b 01       	movw	r18, r22
    4704:	ac 01       	movw	r20, r24
    4706:	c7 01       	movw	r24, r14
    4708:	b6 01       	movw	r22, r12
    470a:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    470e:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    4712:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    4716:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    471a:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
                                   
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                       
    471e:	c5 01       	movw	r24, r10
    4720:	b4 01       	movw	r22, r8
    4722:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    4726:	9b 01       	movw	r18, r22
    4728:	ac 01       	movw	r20, r24
    472a:	69 81       	ldd	r22, Y+1	; 0x01
    472c:	7a 81       	ldd	r23, Y+2	; 0x02
    472e:	8b 81       	ldd	r24, Y+3	; 0x03
    4730:	9c 81       	ldd	r25, Y+4	; 0x04
    4732:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    4736:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    473a:	9b 01       	movw	r18, r22
    473c:	ac 01       	movw	r20, r24
    473e:	c7 01       	movw	r24, r14
    4740:	b6 01       	movw	r22, r12
    4742:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    4746:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    474a:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    474e:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    4752:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
            FreeJog=2;   
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
            ACC=1;    
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <ACC>
            sprintf(BufferSend,"!0602\r\n");
    4762:	98 e0       	ldi	r25, 0x08	; 8
    4764:	e3 e1       	ldi	r30, 0x13	; 19
    4766:	f3 e2       	ldi	r31, 0x23	; 35
    4768:	af e6       	ldi	r26, 0x6F	; 111
    476a:	b9 e2       	ldi	r27, 0x29	; 41
    476c:	01 90       	ld	r0, Z+
    476e:	0d 92       	st	X+, r0
    4770:	9a 95       	dec	r25
    4772:	e1 f7       	brne	.-8      	; 0x476c <__stack+0x76d>
            Responsing=1;  
    4774:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
            SetDataReady;
    4778:	e0 ea       	ldi	r30, 0xA0	; 160
    477a:	f6 e0       	ldi	r31, 0x06	; 6
    477c:	84 81       	ldd	r24, Z+4	; 0x04
    477e:	81 60       	ori	r24, 0x01	; 1
    4780:	84 83       	std	Z+4, r24	; 0x04
            break;
    4782:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         } 
        case '3': //Axis 3
        {        
          SET_DIR3;                
    4786:	e0 e2       	ldi	r30, 0x20	; 32
    4788:	f7 e0       	ldi	r31, 0x07	; 7
    478a:	84 81       	ldd	r24, Z+4	; 0x04
    478c:	81 60       	ori	r24, 0x01	; 1
    478e:	84 83       	std	Z+4, r24	; 0x04
          MaxSpeed=SetSpeed3;
    4790:	c0 90 85 27 	lds	r12, 0x2785	; 0x802785 <SetSpeed3>
    4794:	d0 90 86 27 	lds	r13, 0x2786	; 0x802786 <SetSpeed3+0x1>
    4798:	e0 90 87 27 	lds	r14, 0x2787	; 0x802787 <SetSpeed3+0x2>
    479c:	f0 90 88 27 	lds	r15, 0x2788	; 0x802788 <SetSpeed3+0x3>
    47a0:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    47a4:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    47a8:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    47ac:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
          IACC=ACC3;
    47b0:	40 90 75 27 	lds	r4, 0x2775	; 0x802775 <ACC3>
    47b4:	50 90 76 27 	lds	r5, 0x2776	; 0x802776 <ACC3+0x1>
    47b8:	60 90 77 27 	lds	r6, 0x2777	; 0x802777 <ACC3+0x2>
    47bc:	70 90 78 27 	lds	r7, 0x2778	; 0x802778 <ACC3+0x3>
    47c0:	40 92 65 27 	sts	0x2765, r4	; 0x802765 <IACC>
    47c4:	50 92 66 27 	sts	0x2766, r5	; 0x802766 <IACC+0x1>
    47c8:	60 92 67 27 	sts	0x2767, r6	; 0x802767 <IACC+0x2>
    47cc:	70 92 68 27 	sts	0x2768, r7	; 0x802768 <IACC+0x3>
          IDEC=DEC3;          
    47d0:	80 90 69 27 	lds	r8, 0x2769	; 0x802769 <DEC3>
    47d4:	90 90 6a 27 	lds	r9, 0x276A	; 0x80276a <DEC3+0x1>
    47d8:	a0 90 6b 27 	lds	r10, 0x276B	; 0x80276b <DEC3+0x2>
    47dc:	b0 90 6c 27 	lds	r11, 0x276C	; 0x80276c <DEC3+0x3>
    47e0:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    47e4:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    47e8:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    47ec:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
          CurSpeedFrq=0;
    47f0:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    47f4:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    47f8:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    47fc:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
          TCC0.CCA=0xFFFF;                                                   
    4800:	8f ef       	ldi	r24, 0xFF	; 255
    4802:	9f ef       	ldi	r25, 0xFF	; 255
    4804:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4808:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
          ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    480c:	c7 01       	movw	r24, r14
    480e:	b6 01       	movw	r22, r12
    4810:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	48 ec       	ldi	r20, 0xC8	; 200
    481a:	52 e4       	ldi	r21, 0x42	; 66
    481c:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    4820:	69 83       	std	Y+1, r22	; 0x01
    4822:	7a 83       	std	Y+2, r23	; 0x02
    4824:	8b 83       	std	Y+3, r24	; 0x03
    4826:	9c 83       	std	Y+4, r25	; 0x04
          ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    4828:	c3 01       	movw	r24, r6
    482a:	b2 01       	movw	r22, r4
    482c:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    4830:	9b 01       	movw	r18, r22
    4832:	ac 01       	movw	r20, r24
    4834:	69 81       	ldd	r22, Y+1	; 0x01
    4836:	7a 81       	ldd	r23, Y+2	; 0x02
    4838:	8b 81       	ldd	r24, Y+3	; 0x03
    483a:	9c 81       	ldd	r25, Y+4	; 0x04
    483c:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    4840:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    4844:	9b 01       	movw	r18, r22
    4846:	ac 01       	movw	r20, r24
    4848:	c7 01       	movw	r24, r14
    484a:	b6 01       	movw	r22, r12
    484c:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    4850:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    4854:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    4858:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    485c:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
                        
          DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
          DECSpeedINT= MaxSpeed / DECSpeedINT;                 
    4860:	c5 01       	movw	r24, r10
    4862:	b4 01       	movw	r22, r8
    4864:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    4868:	9b 01       	movw	r18, r22
    486a:	ac 01       	movw	r20, r24
    486c:	69 81       	ldd	r22, Y+1	; 0x01
    486e:	7a 81       	ldd	r23, Y+2	; 0x02
    4870:	8b 81       	ldd	r24, Y+3	; 0x03
    4872:	9c 81       	ldd	r25, Y+4	; 0x04
    4874:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    4878:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    487c:	9b 01       	movw	r18, r22
    487e:	ac 01       	movw	r20, r24
    4880:	c7 01       	movw	r24, r14
    4882:	b6 01       	movw	r22, r12
    4884:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    4888:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    488c:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    4890:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    4894:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
          FreeJog=3;    
    4898:	83 e0       	ldi	r24, 0x03	; 3
    489a:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
          ACC=1;    
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <ACC>
          sprintf(BufferSend,"!0603\r\n");
    48a4:	98 e0       	ldi	r25, 0x08	; 8
    48a6:	eb e1       	ldi	r30, 0x1B	; 27
    48a8:	f3 e2       	ldi	r31, 0x23	; 35
    48aa:	af e6       	ldi	r26, 0x6F	; 111
    48ac:	b9 e2       	ldi	r27, 0x29	; 41
    48ae:	01 90       	ld	r0, Z+
    48b0:	0d 92       	st	X+, r0
    48b2:	9a 95       	dec	r25
    48b4:	e1 f7       	brne	.-8      	; 0x48ae <__stack+0x8af>
          Responsing=1;  
    48b6:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
          SetDataReady;
    48ba:	e0 ea       	ldi	r30, 0xA0	; 160
    48bc:	f6 e0       	ldi	r31, 0x06	; 6
    48be:	84 81       	ldd	r24, Z+4	; 0x04
    48c0:	81 60       	ori	r24, 0x01	; 1
    48c2:	84 83       	std	Z+4, r24	; 0x04
          break;
    48c4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
        }     
      }
     }
      else if(cmdTemp[3]=='3')//Free Jog   STOP
    48c8:	83 33       	cpi	r24, 0x33	; 51
    48ca:	11 f0       	breq	.+4      	; 0x48d0 <__stack+0x8d1>
    48cc:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
       switch(cmdTemp[4])
    48d0:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    48d4:	82 33       	cpi	r24, 0x32	; 50
    48d6:	d9 f0       	breq	.+54     	; 0x490e <__stack+0x90f>
    48d8:	83 33       	cpi	r24, 0x33	; 51
    48da:	71 f1       	breq	.+92     	; 0x4938 <__stack+0x939>
    48dc:	81 33       	cpi	r24, 0x31	; 49
    48de:	11 f0       	breq	.+4      	; 0x48e4 <__stack+0x8e5>
    48e0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         case '1': //Axis 1
         {
            DEC=1;
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	80 93 4c 27 	sts	0x274C, r24	; 0x80274c <DEC>
            sprintf(BufferSend,"!0631\r\n"); 
    48ea:	98 e0       	ldi	r25, 0x08	; 8
    48ec:	eb e3       	ldi	r30, 0x3B	; 59
    48ee:	f3 e2       	ldi	r31, 0x23	; 35
    48f0:	af e6       	ldi	r26, 0x6F	; 111
    48f2:	b9 e2       	ldi	r27, 0x29	; 41
    48f4:	01 90       	ld	r0, Z+
    48f6:	0d 92       	st	X+, r0
    48f8:	9a 95       	dec	r25
    48fa:	e1 f7       	brne	.-8      	; 0x48f4 <__stack+0x8f5>
            Responsing=1; 
    48fc:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
            SetDataReady; 
    4900:	e0 ea       	ldi	r30, 0xA0	; 160
    4902:	f6 e0       	ldi	r31, 0x06	; 6
    4904:	84 81       	ldd	r24, Z+4	; 0x04
    4906:	81 60       	ori	r24, 0x01	; 1
    4908:	84 83       	std	Z+4, r24	; 0x04
            break;
    490a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         }
         case '2': //Axis 2
         {
            DEC=1;   
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	80 93 4c 27 	sts	0x274C, r24	; 0x80274c <DEC>
            sprintf(BufferSend,"!0632\r\n");
    4914:	98 e0       	ldi	r25, 0x08	; 8
    4916:	e3 e4       	ldi	r30, 0x43	; 67
    4918:	f3 e2       	ldi	r31, 0x23	; 35
    491a:	af e6       	ldi	r26, 0x6F	; 111
    491c:	b9 e2       	ldi	r27, 0x29	; 41
    491e:	01 90       	ld	r0, Z+
    4920:	0d 92       	st	X+, r0
    4922:	9a 95       	dec	r25
    4924:	e1 f7       	brne	.-8      	; 0x491e <__stack+0x91f>
            Responsing=1;  
    4926:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
            SetDataReady;
    492a:	e0 ea       	ldi	r30, 0xA0	; 160
    492c:	f6 e0       	ldi	r31, 0x06	; 6
    492e:	84 81       	ldd	r24, Z+4	; 0x04
    4930:	81 60       	ori	r24, 0x01	; 1
    4932:	84 83       	std	Z+4, r24	; 0x04
            break;
    4934:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         } 
        case '3': //Axis 3
        {        
          DEC=1;
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	80 93 4c 27 	sts	0x274C, r24	; 0x80274c <DEC>
          sprintf(BufferSend,"!0633\r\n");
    493e:	98 e0       	ldi	r25, 0x08	; 8
    4940:	eb e4       	ldi	r30, 0x4B	; 75
    4942:	f3 e2       	ldi	r31, 0x23	; 35
    4944:	af e6       	ldi	r26, 0x6F	; 111
    4946:	b9 e2       	ldi	r27, 0x29	; 41
    4948:	01 90       	ld	r0, Z+
    494a:	0d 92       	st	X+, r0
    494c:	9a 95       	dec	r25
    494e:	e1 f7       	brne	.-8      	; 0x4948 <__stack+0x949>
          Responsing=1;  
    4950:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
          SetDataReady;
    4954:	e0 ea       	ldi	r30, 0xA0	; 160
    4956:	f6 e0       	ldi	r31, 0x06	; 6
    4958:	84 81       	ldd	r24, Z+4	; 0x04
    495a:	81 60       	ori	r24, 0x01	; 1
    495c:	84 83       	std	Z+4, r24	; 0x04
          break;
    495e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
        }     
      }
     }
    } 
    }
    else if(strncmp(cmdTemp,"#07",3)==0)
    4962:	43 e0       	ldi	r20, 0x03	; 3
    4964:	50 e0       	ldi	r21, 0x00	; 0
    4966:	63 e5       	ldi	r22, 0x53	; 83
    4968:	73 e2       	ldi	r23, 0x23	; 35
    496a:	83 e2       	ldi	r24, 0x23	; 35
    496c:	97 e2       	ldi	r25, 0x27	; 39
    496e:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    4972:	89 2b       	or	r24, r25
    4974:	09 f0       	breq	.+2      	; 0x4978 <__stack+0x979>
    4976:	5d c0       	rjmp	.+186    	; 0x4a32 <__stack+0xa33>
    {//STOP JOG
    if(!ProgramRun)
    4978:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    497c:	81 11       	cpse	r24, r1
    497e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    {
      if(cmdTemp[3]=='0')
    4982:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    4986:	80 33       	cpi	r24, 0x30	; 48
    4988:	11 f0       	breq	.+4      	; 0x498e <__stack+0x98f>
    498a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
           switch(cmdTemp[4])
    498e:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    4992:	82 33       	cpi	r24, 0x32	; 50
    4994:	f1 f0       	breq	.+60     	; 0x49d2 <__stack+0x9d3>
    4996:	83 33       	cpi	r24, 0x33	; 51
    4998:	a1 f1       	breq	.+104    	; 0x4a02 <__stack+0xa03>
    499a:	81 33       	cpi	r24, 0x31	; 49
    499c:	11 f0       	breq	.+4      	; 0x49a2 <__stack+0x9a3>
    499e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '1': //Axis 1
             {                                                
                DistanceToGo1 = 0;                       
    49a2:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    49a6:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    49aa:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    49ae:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
                if(EchoON) printf("!0701\n\r");
    49b2:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    49b6:	88 23       	and	r24, r24
    49b8:	11 f4       	brne	.+4      	; 0x49be <__stack+0x9bf>
    49ba:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    49be:	87 e5       	ldi	r24, 0x57	; 87
    49c0:	93 e2       	ldi	r25, 0x23	; 35
    49c2:	9f 93       	push	r25
    49c4:	8f 93       	push	r24
    49c6:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    49ca:	0f 90       	pop	r0
    49cc:	0f 90       	pop	r0
    49ce:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
                break;
             }
             case '2': //Axis 2
             {
                DistanceToGo2 = 0;                  
    49d2:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    49d6:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    49da:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    49de:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
                if(EchoON) printf("!0702\n\r");
    49e2:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    49e6:	88 23       	and	r24, r24
    49e8:	11 f4       	brne	.+4      	; 0x49ee <__stack+0x9ef>
    49ea:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    49ee:	8f e5       	ldi	r24, 0x5F	; 95
    49f0:	93 e2       	ldi	r25, 0x23	; 35
    49f2:	9f 93       	push	r25
    49f4:	8f 93       	push	r24
    49f6:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
                break;
             }                          
             case '3': //Axis 3
             {
                DistanceToGo3 = 0;                  
    4a02:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    4a06:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    4a0a:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    4a0e:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
                if(EchoON) printf("!0703\n\r");
    4a12:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4a16:	88 23       	and	r24, r24
    4a18:	11 f4       	brne	.+4      	; 0x4a1e <__stack+0xa1f>
    4a1a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4a1e:	87 e6       	ldi	r24, 0x67	; 103
    4a20:	93 e2       	ldi	r25, 0x23	; 35
    4a22:	9f 93       	push	r25
    4a24:	8f 93       	push	r24
    4a26:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
             }               
           }
        }
      } 
    }
    else if(strncmp(cmdTemp,"?08",3)==0)
    4a32:	43 e0       	ldi	r20, 0x03	; 3
    4a34:	50 e0       	ldi	r21, 0x00	; 0
    4a36:	6f e6       	ldi	r22, 0x6F	; 111
    4a38:	73 e2       	ldi	r23, 0x23	; 35
    4a3a:	83 e2       	ldi	r24, 0x23	; 35
    4a3c:	97 e2       	ldi	r25, 0x27	; 39
    4a3e:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    4a42:	89 2b       	or	r24, r25
    4a44:	09 f0       	breq	.+2      	; 0x4a48 <__stack+0xa49>
    4a46:	7d c0       	rjmp	.+250    	; 0x4b42 <__stack+0xb43>
    {//Read DistanceToGo  
      if(cmdTemp[3]=='0')
    4a48:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    4a4c:	80 33       	cpi	r24, 0x30	; 48
    4a4e:	11 f0       	breq	.+4      	; 0x4a54 <__stack+0xa55>
    4a50:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
           switch(cmdTemp[4])
    4a54:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    4a58:	82 33       	cpi	r24, 0x32	; 50
    4a5a:	59 f1       	breq	.+86     	; 0x4ab2 <__stack+0xab3>
    4a5c:	83 33       	cpi	r24, 0x33	; 51
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <__stack+0xa63>
    4a60:	4c c0       	rjmp	.+152    	; 0x4afa <__stack+0xafb>
    4a62:	81 33       	cpi	r24, 0x31	; 49
    4a64:	11 f0       	breq	.+4      	; 0x4a6a <__stack+0xa6b>
    4a66:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '1': //Axis 1
             {                   
                ltoa(DistanceToGo1,temp,10);            
    4a6a:	60 91 a4 27 	lds	r22, 0x27A4	; 0x8027a4 <DistanceToGo1>
    4a6e:	70 91 a5 27 	lds	r23, 0x27A5	; 0x8027a5 <DistanceToGo1+0x1>
    4a72:	80 91 a6 27 	lds	r24, 0x27A6	; 0x8027a6 <DistanceToGo1+0x2>
    4a76:	90 91 a7 27 	lds	r25, 0x27A7	; 0x8027a7 <DistanceToGo1+0x3>
    4a7a:	2a e0       	ldi	r18, 0x0A	; 10
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	4e e0       	ldi	r20, 0x0E	; 14
    4a80:	57 e2       	ldi	r21, 0x27	; 39
    4a82:	0e 94 5f 40 	call	0x80be	; 0x80be <ltoa>
                if(EchoON) printf("!0801\t%s\n\r",temp);
    4a86:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4a8a:	88 23       	and	r24, r24
    4a8c:	11 f4       	brne	.+4      	; 0x4a92 <__stack+0xa93>
    4a8e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4a92:	8e e0       	ldi	r24, 0x0E	; 14
    4a94:	97 e2       	ldi	r25, 0x27	; 39
    4a96:	9f 93       	push	r25
    4a98:	8f 93       	push	r24
    4a9a:	83 e7       	ldi	r24, 0x73	; 115
    4a9c:	93 e2       	ldi	r25, 0x23	; 35
    4a9e:	9f 93       	push	r25
    4aa0:	8f 93       	push	r24
    4aa2:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
    4aae:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
                break;
             }
             case '2': //Axis 2
             {
                ltoa(DistanceToGo2,temp,10);            
    4ab2:	60 91 a0 27 	lds	r22, 0x27A0	; 0x8027a0 <DistanceToGo2>
    4ab6:	70 91 a1 27 	lds	r23, 0x27A1	; 0x8027a1 <DistanceToGo2+0x1>
    4aba:	80 91 a2 27 	lds	r24, 0x27A2	; 0x8027a2 <DistanceToGo2+0x2>
    4abe:	90 91 a3 27 	lds	r25, 0x27A3	; 0x8027a3 <DistanceToGo2+0x3>
    4ac2:	2a e0       	ldi	r18, 0x0A	; 10
    4ac4:	30 e0       	ldi	r19, 0x00	; 0
    4ac6:	4e e0       	ldi	r20, 0x0E	; 14
    4ac8:	57 e2       	ldi	r21, 0x27	; 39
    4aca:	0e 94 5f 40 	call	0x80be	; 0x80be <ltoa>
                if(EchoON) printf("!0802\t%s\n\r",temp);
    4ace:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4ad2:	88 23       	and	r24, r24
    4ad4:	11 f4       	brne	.+4      	; 0x4ada <__stack+0xadb>
    4ad6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4ada:	8e e0       	ldi	r24, 0x0E	; 14
    4adc:	97 e2       	ldi	r25, 0x27	; 39
    4ade:	9f 93       	push	r25
    4ae0:	8f 93       	push	r24
    4ae2:	8e e7       	ldi	r24, 0x7E	; 126
    4ae4:	93 e2       	ldi	r25, 0x23	; 35
    4ae6:	9f 93       	push	r25
    4ae8:	8f 93       	push	r24
    4aea:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
                break;
             }                          
             case '3': //Axis 3
             {
                ltoa(DistanceToGo3,temp,10);            
    4afa:	60 91 9c 27 	lds	r22, 0x279C	; 0x80279c <DistanceToGo3>
    4afe:	70 91 9d 27 	lds	r23, 0x279D	; 0x80279d <DistanceToGo3+0x1>
    4b02:	80 91 9e 27 	lds	r24, 0x279E	; 0x80279e <DistanceToGo3+0x2>
    4b06:	90 91 9f 27 	lds	r25, 0x279F	; 0x80279f <DistanceToGo3+0x3>
    4b0a:	2a e0       	ldi	r18, 0x0A	; 10
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	4e e0       	ldi	r20, 0x0E	; 14
    4b10:	57 e2       	ldi	r21, 0x27	; 39
    4b12:	0e 94 5f 40 	call	0x80be	; 0x80be <ltoa>
                if(EchoON) printf("!0803\t%s\n\r",temp);
    4b16:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4b1a:	88 23       	and	r24, r24
    4b1c:	11 f4       	brne	.+4      	; 0x4b22 <__stack+0xb23>
    4b1e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4b22:	8e e0       	ldi	r24, 0x0E	; 14
    4b24:	97 e2       	ldi	r25, 0x27	; 39
    4b26:	9f 93       	push	r25
    4b28:	8f 93       	push	r24
    4b2a:	89 e8       	ldi	r24, 0x89	; 137
    4b2c:	93 e2       	ldi	r25, 0x23	; 35
    4b2e:	9f 93       	push	r25
    4b30:	8f 93       	push	r24
    4b32:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	0f 90       	pop	r0
    4b3c:	0f 90       	pop	r0
    4b3e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
                break;
             }              
           }
      }
    } 
    else if(strncmp(cmdTemp,"?09",3)==0)
    4b42:	43 e0       	ldi	r20, 0x03	; 3
    4b44:	50 e0       	ldi	r21, 0x00	; 0
    4b46:	64 e9       	ldi	r22, 0x94	; 148
    4b48:	73 e2       	ldi	r23, 0x23	; 35
    4b4a:	83 e2       	ldi	r24, 0x23	; 35
    4b4c:	97 e2       	ldi	r25, 0x27	; 39
    4b4e:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    4b52:	89 2b       	or	r24, r25
    4b54:	09 f0       	breq	.+2      	; 0x4b58 <__stack+0xb59>
    4b56:	95 c0       	rjmp	.+298    	; 0x4c82 <__stack+0xc83>
    {//Read Axis Position  
      if(cmdTemp[3]=='0')
    4b58:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    4b5c:	80 33       	cpi	r24, 0x30	; 48
    4b5e:	11 f0       	breq	.+4      	; 0x4b64 <__stack+0xb65>
    4b60:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
           switch(cmdTemp[4])
    4b64:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    4b68:	82 33       	cpi	r24, 0x32	; 50
    4b6a:	99 f1       	breq	.+102    	; 0x4bd2 <__stack+0xbd3>
    4b6c:	83 33       	cpi	r24, 0x33	; 51
    4b6e:	09 f4       	brne	.+2      	; 0x4b72 <__stack+0xb73>
    4b70:	5c c0       	rjmp	.+184    	; 0x4c2a <__stack+0xc2b>
    4b72:	81 33       	cpi	r24, 0x31	; 49
    4b74:	11 f0       	breq	.+4      	; 0x4b7a <__stack+0xb7b>
    4b76:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '1': //Axis 1
             {                   
                ltoa(AxisPosition1,temp,10);            
    4b7a:	60 91 c0 27 	lds	r22, 0x27C0	; 0x8027c0 <AxisPosition1>
    4b7e:	70 91 c1 27 	lds	r23, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    4b82:	80 91 c2 27 	lds	r24, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    4b86:	90 91 c3 27 	lds	r25, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    4b8a:	2a e0       	ldi	r18, 0x0A	; 10
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	4e e0       	ldi	r20, 0x0E	; 14
    4b90:	57 e2       	ldi	r21, 0x27	; 39
    4b92:	0e 94 5f 40 	call	0x80be	; 0x80be <ltoa>
                sprintf(BufferSend,"!0901\t%s\r\n",temp);  
    4b96:	8e e0       	ldi	r24, 0x0E	; 14
    4b98:	97 e2       	ldi	r25, 0x27	; 39
    4b9a:	9f 93       	push	r25
    4b9c:	8f 93       	push	r24
    4b9e:	88 e9       	ldi	r24, 0x98	; 152
    4ba0:	93 e2       	ldi	r25, 0x23	; 35
    4ba2:	9f 93       	push	r25
    4ba4:	8f 93       	push	r24
    4ba6:	8f e6       	ldi	r24, 0x6F	; 111
    4ba8:	99 e2       	ldi	r25, 0x29	; 41
    4baa:	9f 93       	push	r25
    4bac:	8f 93       	push	r24
    4bae:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
                Responsing=1;
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
                SetDataReady; 
    4bb8:	e0 ea       	ldi	r30, 0xA0	; 160
    4bba:	f6 e0       	ldi	r31, 0x06	; 6
    4bbc:	84 81       	ldd	r24, Z+4	; 0x04
    4bbe:	81 60       	ori	r24, 0x01	; 1
    4bc0:	84 83       	std	Z+4, r24	; 0x04
                break;
    4bc2:	0f 90       	pop	r0
    4bc4:	0f 90       	pop	r0
    4bc6:	0f 90       	pop	r0
    4bc8:	0f 90       	pop	r0
    4bca:	0f 90       	pop	r0
    4bcc:	0f 90       	pop	r0
    4bce:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
             }
             case '2': //Axis 2
             {
                ltoa(AxisPosition2,temp,10);            
    4bd2:	60 91 bc 27 	lds	r22, 0x27BC	; 0x8027bc <AxisPosition2>
    4bd6:	70 91 bd 27 	lds	r23, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    4bda:	80 91 be 27 	lds	r24, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    4bde:	90 91 bf 27 	lds	r25, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    4be2:	2a e0       	ldi	r18, 0x0A	; 10
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	4e e0       	ldi	r20, 0x0E	; 14
    4be8:	57 e2       	ldi	r21, 0x27	; 39
    4bea:	0e 94 5f 40 	call	0x80be	; 0x80be <ltoa>
                sprintf(BufferSend,"!0902\t%s\r\n",temp); 
    4bee:	8e e0       	ldi	r24, 0x0E	; 14
    4bf0:	97 e2       	ldi	r25, 0x27	; 39
    4bf2:	9f 93       	push	r25
    4bf4:	8f 93       	push	r24
    4bf6:	83 ea       	ldi	r24, 0xA3	; 163
    4bf8:	93 e2       	ldi	r25, 0x23	; 35
    4bfa:	9f 93       	push	r25
    4bfc:	8f 93       	push	r24
    4bfe:	8f e6       	ldi	r24, 0x6F	; 111
    4c00:	99 e2       	ldi	r25, 0x29	; 41
    4c02:	9f 93       	push	r25
    4c04:	8f 93       	push	r24
    4c06:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
                Responsing=1;  
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
                SetDataReady;
    4c10:	e0 ea       	ldi	r30, 0xA0	; 160
    4c12:	f6 e0       	ldi	r31, 0x06	; 6
    4c14:	84 81       	ldd	r24, Z+4	; 0x04
    4c16:	81 60       	ori	r24, 0x01	; 1
    4c18:	84 83       	std	Z+4, r24	; 0x04
                break;
    4c1a:	0f 90       	pop	r0
    4c1c:	0f 90       	pop	r0
    4c1e:	0f 90       	pop	r0
    4c20:	0f 90       	pop	r0
    4c22:	0f 90       	pop	r0
    4c24:	0f 90       	pop	r0
    4c26:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
             }                          
             case '3': //Axis 3
             {
                ltoa(AxisPosition3,temp,10);            
    4c2a:	60 91 b8 27 	lds	r22, 0x27B8	; 0x8027b8 <AxisPosition3>
    4c2e:	70 91 b9 27 	lds	r23, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    4c32:	80 91 ba 27 	lds	r24, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    4c36:	90 91 bb 27 	lds	r25, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    4c3a:	2a e0       	ldi	r18, 0x0A	; 10
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	4e e0       	ldi	r20, 0x0E	; 14
    4c40:	57 e2       	ldi	r21, 0x27	; 39
    4c42:	0e 94 5f 40 	call	0x80be	; 0x80be <ltoa>
                sprintf(BufferSend,"!0903\t%s\r\n",temp);
    4c46:	8e e0       	ldi	r24, 0x0E	; 14
    4c48:	97 e2       	ldi	r25, 0x27	; 39
    4c4a:	9f 93       	push	r25
    4c4c:	8f 93       	push	r24
    4c4e:	8e ea       	ldi	r24, 0xAE	; 174
    4c50:	93 e2       	ldi	r25, 0x23	; 35
    4c52:	9f 93       	push	r25
    4c54:	8f 93       	push	r24
    4c56:	8f e6       	ldi	r24, 0x6F	; 111
    4c58:	99 e2       	ldi	r25, 0x29	; 41
    4c5a:	9f 93       	push	r25
    4c5c:	8f 93       	push	r24
    4c5e:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
                Responsing=1; 
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
                SetDataReady;
    4c68:	e0 ea       	ldi	r30, 0xA0	; 160
    4c6a:	f6 e0       	ldi	r31, 0x06	; 6
    4c6c:	84 81       	ldd	r24, Z+4	; 0x04
    4c6e:	81 60       	ori	r24, 0x01	; 1
    4c70:	84 83       	std	Z+4, r24	; 0x04
                break;
    4c72:	0f 90       	pop	r0
    4c74:	0f 90       	pop	r0
    4c76:	0f 90       	pop	r0
    4c78:	0f 90       	pop	r0
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
             }             
           }
      }
    }
     else if(strncmp(cmdTemp,"#10",3)==0)
    4c82:	43 e0       	ldi	r20, 0x03	; 3
    4c84:	50 e0       	ldi	r21, 0x00	; 0
    4c86:	69 eb       	ldi	r22, 0xB9	; 185
    4c88:	73 e2       	ldi	r23, 0x23	; 35
    4c8a:	83 e2       	ldi	r24, 0x23	; 35
    4c8c:	97 e2       	ldi	r25, 0x27	; 39
    4c8e:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    4c92:	89 2b       	or	r24, r25
    4c94:	09 f0       	breq	.+2      	; 0x4c98 <__stack+0xc99>
    4c96:	8e c0       	rjmp	.+284    	; 0x4db4 <__stack+0xdb5>
    {//Clear JOG  
     if(!ProgramRun)
    4c98:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    4c9c:	81 11       	cpse	r24, r1
    4c9e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    {
      if(cmdTemp[3]=='0')
    4ca2:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    4ca6:	80 33       	cpi	r24, 0x30	; 48
    4ca8:	11 f0       	breq	.+4      	; 0x4cae <__stack+0xcaf>
    4caa:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      {
           switch(cmdTemp[4])
    4cae:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    4cb2:	82 33       	cpi	r24, 0x32	; 50
    4cb4:	79 f1       	breq	.+94     	; 0x4d14 <__stack+0xd15>
    4cb6:	83 33       	cpi	r24, 0x33	; 51
    4cb8:	09 f4       	brne	.+2      	; 0x4cbc <__stack+0xcbd>
    4cba:	54 c0       	rjmp	.+168    	; 0x4d64 <__stack+0xd65>
    4cbc:	81 33       	cpi	r24, 0x31	; 49
    4cbe:	11 f0       	breq	.+4      	; 0x4cc4 <__stack+0xcc5>
    4cc0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
           {
             case '1': //Axis 1
             {                                                
                DistanceToGo1 = 0;
    4cc4:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    4cc8:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    4ccc:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    4cd0:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
                SetJog1 = AxisPosition1;
    4cd4:	80 91 c0 27 	lds	r24, 0x27C0	; 0x8027c0 <AxisPosition1>
    4cd8:	90 91 c1 27 	lds	r25, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    4cdc:	a0 91 c2 27 	lds	r26, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    4ce0:	b0 91 c3 27 	lds	r27, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    4ce4:	80 93 cc 27 	sts	0x27CC, r24	; 0x8027cc <SetJog1>
    4ce8:	90 93 cd 27 	sts	0x27CD, r25	; 0x8027cd <SetJog1+0x1>
    4cec:	a0 93 ce 27 	sts	0x27CE, r26	; 0x8027ce <SetJog1+0x2>
    4cf0:	b0 93 cf 27 	sts	0x27CF, r27	; 0x8027cf <SetJog1+0x3>
                if(EchoON) printf("!0701\n\r");
    4cf4:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4cf8:	88 23       	and	r24, r24
    4cfa:	11 f4       	brne	.+4      	; 0x4d00 <__stack+0xd01>
    4cfc:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4d00:	87 e5       	ldi	r24, 0x57	; 87
    4d02:	93 e2       	ldi	r25, 0x23	; 35
    4d04:	9f 93       	push	r25
    4d06:	8f 93       	push	r24
    4d08:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4d0c:	0f 90       	pop	r0
    4d0e:	0f 90       	pop	r0
    4d10:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
                break;
             }
             case '2': //Axis 2
             {
                DistanceToGo2 = 0;   
    4d14:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    4d18:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    4d1c:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    4d20:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
                SetJog2 = AxisPosition2;
    4d24:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <AxisPosition2>
    4d28:	90 91 bd 27 	lds	r25, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    4d2c:	a0 91 be 27 	lds	r26, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    4d30:	b0 91 bf 27 	lds	r27, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    4d34:	80 93 c8 27 	sts	0x27C8, r24	; 0x8027c8 <SetJog2>
    4d38:	90 93 c9 27 	sts	0x27C9, r25	; 0x8027c9 <SetJog2+0x1>
    4d3c:	a0 93 ca 27 	sts	0x27CA, r26	; 0x8027ca <SetJog2+0x2>
    4d40:	b0 93 cb 27 	sts	0x27CB, r27	; 0x8027cb <SetJog2+0x3>
                if(EchoON) printf("!0702\n\r");
    4d44:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4d48:	88 23       	and	r24, r24
    4d4a:	11 f4       	brne	.+4      	; 0x4d50 <__stack+0xd51>
    4d4c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4d50:	8f e5       	ldi	r24, 0x5F	; 95
    4d52:	93 e2       	ldi	r25, 0x23	; 35
    4d54:	9f 93       	push	r25
    4d56:	8f 93       	push	r24
    4d58:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4d5c:	0f 90       	pop	r0
    4d5e:	0f 90       	pop	r0
    4d60:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
                break;
             }                          
             case '3': //Axis 3
             {
                DistanceToGo3 = 0; 
    4d64:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    4d68:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    4d6c:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    4d70:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
                SetJog3 = AxisPosition3;                    
    4d74:	80 91 b8 27 	lds	r24, 0x27B8	; 0x8027b8 <AxisPosition3>
    4d78:	90 91 b9 27 	lds	r25, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    4d7c:	a0 91 ba 27 	lds	r26, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    4d80:	b0 91 bb 27 	lds	r27, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    4d84:	80 93 c4 27 	sts	0x27C4, r24	; 0x8027c4 <SetJog3>
    4d88:	90 93 c5 27 	sts	0x27C5, r25	; 0x8027c5 <SetJog3+0x1>
    4d8c:	a0 93 c6 27 	sts	0x27C6, r26	; 0x8027c6 <SetJog3+0x2>
    4d90:	b0 93 c7 27 	sts	0x27C7, r27	; 0x8027c7 <SetJog3+0x3>
                if(EchoON) printf("!0703\n\r");
    4d94:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4d98:	88 23       	and	r24, r24
    4d9a:	11 f4       	brne	.+4      	; 0x4da0 <__stack+0xda1>
    4d9c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4da0:	87 e6       	ldi	r24, 0x67	; 103
    4da2:	93 e2       	ldi	r25, 0x23	; 35
    4da4:	9f 93       	push	r25
    4da6:	8f 93       	push	r24
    4da8:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4dac:	0f 90       	pop	r0
    4dae:	0f 90       	pop	r0
    4db0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
             }              
           }
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    4db4:	43 e0       	ldi	r20, 0x03	; 3
    4db6:	50 e0       	ldi	r21, 0x00	; 0
    4db8:	6d eb       	ldi	r22, 0xBD	; 189
    4dba:	73 e2       	ldi	r23, 0x23	; 35
    4dbc:	83 e2       	ldi	r24, 0x23	; 35
    4dbe:	97 e2       	ldi	r25, 0x27	; 39
    4dc0:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    4dc4:	00 97       	sbiw	r24, 0x00	; 0
    4dc6:	09 f0       	breq	.+2      	; 0x4dca <__stack+0xdcb>
    4dc8:	c1 c0       	rjmp	.+386    	; 0x4f4c <__stack+0xf4d>
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4dca:	30 91 5c 27 	lds	r19, 0x275C	; 0x80275c <AxisIsMoving1>
    4dce:	31 11       	cpse	r19, r1
    4dd0:	0c 94 ba 33 	jmp	0x6774	; 0x6774 <__stack+0x2775>
    4dd4:	20 91 5b 27 	lds	r18, 0x275B	; 0x80275b <AxisIsMoving2>
    4dd8:	21 11       	cpse	r18, r1
    4dda:	0c 94 e4 33 	jmp	0x67c8	; 0x67c8 <__stack+0x27c9>
    4dde:	20 91 5a 27 	lds	r18, 0x275A	; 0x80275a <AxisIsMoving3>
    4de2:	41 e0       	ldi	r20, 0x01	; 1
    4de4:	21 11       	cpse	r18, r1
    4de6:	01 c0       	rjmp	.+2      	; 0x4dea <__stack+0xdeb>
    4de8:	40 e0       	ldi	r20, 0x00	; 0
    4dea:	40 93 0c 27 	sts	0x270C, r20	; 0x80270c <AxisMoving>
         
    if (!ProgramRun)
    4dee:	40 91 d0 27 	lds	r20, 0x27D0	; 0x8027d0 <ProgramRun>
    4df2:	41 11       	cpse	r20, r1
    4df4:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
     {
     while (AxisMoving == 1) 
    4df8:	22 23       	and	r18, r18
    4dfa:	99 f0       	breq	.+38     	; 0x4e22 <__stack+0xe23>
    4dfc:	20 91 5b 27 	lds	r18, 0x275B	; 0x80275b <AxisIsMoving2>
    4e00:	21 11       	cpse	r18, r1
    4e02:	07 c0       	rjmp	.+14     	; 0x4e12 <__stack+0xe13>
    4e04:	21 e0       	ldi	r18, 0x01	; 1
    4e06:	40 91 5a 27 	lds	r20, 0x275A	; 0x80275a <AxisIsMoving3>
    4e0a:	41 11       	cpse	r20, r1
    4e0c:	03 c0       	rjmp	.+6      	; 0x4e14 <__stack+0xe15>
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	01 c0       	rjmp	.+2      	; 0x4e14 <__stack+0xe15>
    4e12:	21 e0       	ldi	r18, 0x01	; 1
    4e14:	42 2f       	mov	r20, r18
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4e16:	31 11       	cpse	r19, r1
    4e18:	fe cf       	rjmp	.-4      	; 0x4e16 <__stack+0xe17>
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    4e1a:	41 11       	cpse	r20, r1
    4e1c:	fc cf       	rjmp	.-8      	; 0x4e16 <__stack+0xe17>
    4e1e:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
      if(cmdTemp[3]=='0')
    4e22:	20 91 26 27 	lds	r18, 0x2726	; 0x802726 <cmdTemp+0x3>
    4e26:	20 33       	cpi	r18, 0x30	; 48
    4e28:	11 f0       	breq	.+4      	; 0x4e2e <__stack+0xe2f>
    4e2a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
      { 
        switch(cmdTemp[4])
    4e2e:	20 91 27 27 	lds	r18, 0x2727	; 0x802727 <cmdTemp+0x4>
    4e32:	22 33       	cpi	r18, 0x32	; 50
    4e34:	99 f1       	breq	.+102    	; 0x4e9c <__stack+0xe9d>
    4e36:	23 33       	cpi	r18, 0x33	; 51
    4e38:	09 f4       	brne	.+2      	; 0x4e3c <__stack+0xe3d>
    4e3a:	5c c0       	rjmp	.+184    	; 0x4ef4 <__stack+0xef5>
    4e3c:	21 33       	cpi	r18, 0x31	; 49
    4e3e:	11 f0       	breq	.+4      	; 0x4e44 <__stack+0xe45>
    4e40:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4e44:	a8 e2       	ldi	r26, 0x28	; 40
    4e46:	b7 e2       	ldi	r27, 0x27	; 39
    4e48:	ee e0       	ldi	r30, 0x0E	; 14
    4e4a:	f7 e2       	ldi	r31, 0x27	; 39
        {
          case '1': //Axis 1
          {                   
            for(k=0;k<10;k++)
            {
              temp[k]=cmdTemp[k+5];
    4e4c:	2d 91       	ld	r18, X+
    4e4e:	21 93       	st	Z+, r18
      { 
        switch(cmdTemp[4])
        {
          case '1': //Axis 1
          {                   
            for(k=0;k<10;k++)
    4e50:	01 96       	adiw	r24, 0x01	; 1
    4e52:	8a 30       	cpi	r24, 0x0A	; 10
    4e54:	91 05       	cpc	r25, r1
    4e56:	d4 f3       	brlt	.-12     	; 0x4e4c <__stack+0xe4d>
    4e58:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    4e5c:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4e60:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
            AxisPosition1=atol(temp);
    4e64:	8e e0       	ldi	r24, 0x0E	; 14
    4e66:	97 e2       	ldi	r25, 0x27	; 39
    4e68:	0e 94 2a 40 	call	0x8054	; 0x8054 <atol>
    4e6c:	60 93 c0 27 	sts	0x27C0, r22	; 0x8027c0 <AxisPosition1>
    4e70:	70 93 c1 27 	sts	0x27C1, r23	; 0x8027c1 <AxisPosition1+0x1>
    4e74:	80 93 c2 27 	sts	0x27C2, r24	; 0x8027c2 <AxisPosition1+0x2>
    4e78:	90 93 c3 27 	sts	0x27C3, r25	; 0x8027c3 <AxisPosition1+0x3>
            if(EchoON) printf("!1101\n\r");  
    4e7c:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4e80:	88 23       	and	r24, r24
    4e82:	11 f4       	brne	.+4      	; 0x4e88 <__stack+0xe89>
    4e84:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4e88:	81 ec       	ldi	r24, 0xC1	; 193
    4e8a:	93 e2       	ldi	r25, 0x23	; 35
    4e8c:	9f 93       	push	r25
    4e8e:	8f 93       	push	r24
    4e90:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4e94:	0f 90       	pop	r0
    4e96:	0f 90       	pop	r0
    4e98:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4e9c:	a8 e2       	ldi	r26, 0x28	; 40
    4e9e:	b7 e2       	ldi	r27, 0x27	; 39
    4ea0:	ee e0       	ldi	r30, 0x0E	; 14
    4ea2:	f7 e2       	ldi	r31, 0x27	; 39
          }
          case '2'://Axis 2
          {                   
            for(k=0;k<10;k++)
            {
              temp[k]=cmdTemp[k+5];
    4ea4:	2d 91       	ld	r18, X+
    4ea6:	21 93       	st	Z+, r18
            if(EchoON) printf("!1101\n\r");  
            break;                        
          }
          case '2'://Axis 2
          {                   
            for(k=0;k<10;k++)
    4ea8:	01 96       	adiw	r24, 0x01	; 1
    4eaa:	8a 30       	cpi	r24, 0x0A	; 10
    4eac:	91 05       	cpc	r25, r1
    4eae:	d4 f3       	brlt	.-12     	; 0x4ea4 <__stack+0xea5>
    4eb0:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    4eb4:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4eb8:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
            AxisPosition2=atol(temp);
    4ebc:	8e e0       	ldi	r24, 0x0E	; 14
    4ebe:	97 e2       	ldi	r25, 0x27	; 39
    4ec0:	0e 94 2a 40 	call	0x8054	; 0x8054 <atol>
    4ec4:	60 93 bc 27 	sts	0x27BC, r22	; 0x8027bc <AxisPosition2>
    4ec8:	70 93 bd 27 	sts	0x27BD, r23	; 0x8027bd <AxisPosition2+0x1>
    4ecc:	80 93 be 27 	sts	0x27BE, r24	; 0x8027be <AxisPosition2+0x2>
    4ed0:	90 93 bf 27 	sts	0x27BF, r25	; 0x8027bf <AxisPosition2+0x3>
            if(EchoON) printf("!1102\n\r");  
    4ed4:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4ed8:	88 23       	and	r24, r24
    4eda:	11 f4       	brne	.+4      	; 0x4ee0 <__stack+0xee1>
    4edc:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4ee0:	89 ec       	ldi	r24, 0xC9	; 201
    4ee2:	93 e2       	ldi	r25, 0x23	; 35
    4ee4:	9f 93       	push	r25
    4ee6:	8f 93       	push	r24
    4ee8:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4ef4:	a8 e2       	ldi	r26, 0x28	; 40
    4ef6:	b7 e2       	ldi	r27, 0x27	; 39
    4ef8:	ee e0       	ldi	r30, 0x0E	; 14
    4efa:	f7 e2       	ldi	r31, 0x27	; 39
          }
          case '3'://Axis 3
          {                   
            for(k=0;k<10;k++)
            {
              temp[k]=cmdTemp[k+5];
    4efc:	2d 91       	ld	r18, X+
    4efe:	21 93       	st	Z+, r18
            if(EchoON) printf("!1102\n\r");  
            break;                        
          }
          case '3'://Axis 3
          {                   
            for(k=0;k<10;k++)
    4f00:	01 96       	adiw	r24, 0x01	; 1
    4f02:	8a 30       	cpi	r24, 0x0A	; 10
    4f04:	91 05       	cpc	r25, r1
    4f06:	d4 f3       	brlt	.-12     	; 0x4efc <__stack+0xefd>
    4f08:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    4f0c:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4f10:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
            AxisPosition3=atol(temp);
    4f14:	8e e0       	ldi	r24, 0x0E	; 14
    4f16:	97 e2       	ldi	r25, 0x27	; 39
    4f18:	0e 94 2a 40 	call	0x8054	; 0x8054 <atol>
    4f1c:	60 93 b8 27 	sts	0x27B8, r22	; 0x8027b8 <AxisPosition3>
    4f20:	70 93 b9 27 	sts	0x27B9, r23	; 0x8027b9 <AxisPosition3+0x1>
    4f24:	80 93 ba 27 	sts	0x27BA, r24	; 0x8027ba <AxisPosition3+0x2>
    4f28:	90 93 bb 27 	sts	0x27BB, r25	; 0x8027bb <AxisPosition3+0x3>
            if(EchoON) printf("!1103\n\r");  
    4f2c:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    4f30:	88 23       	and	r24, r24
    4f32:	11 f4       	brne	.+4      	; 0x4f38 <__stack+0xf39>
    4f34:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4f38:	81 ed       	ldi	r24, 0xD1	; 209
    4f3a:	93 e2       	ldi	r25, 0x23	; 35
    4f3c:	9f 93       	push	r25
    4f3e:	8f 93       	push	r24
    4f40:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    4f44:	0f 90       	pop	r0
    4f46:	0f 90       	pop	r0
    4f48:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
          }                                      
        }
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    4f4c:	43 e0       	ldi	r20, 0x03	; 3
    4f4e:	50 e0       	ldi	r21, 0x00	; 0
    4f50:	69 ed       	ldi	r22, 0xD9	; 217
    4f52:	73 e2       	ldi	r23, 0x23	; 35
    4f54:	83 e2       	ldi	r24, 0x23	; 35
    4f56:	97 e2       	ldi	r25, 0x27	; 39
    4f58:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    4f5c:	89 2b       	or	r24, r25
    4f5e:	81 f5       	brne	.+96     	; 0x4fc0 <__stack+0xfc1>
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    4f60:	90 91 5c 27 	lds	r25, 0x275C	; 0x80275c <AxisIsMoving1>
    4f64:	91 11       	cpse	r25, r1
    4f66:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__stack+0x2789>
    4f6a:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    4f6e:	81 11       	cpse	r24, r1
    4f70:	0c 94 ee 33 	jmp	0x67dc	; 0x67dc <__stack+0x27dd>
    4f74:	80 91 5a 27 	lds	r24, 0x275A	; 0x80275a <AxisIsMoving3>
    4f78:	21 e0       	ldi	r18, 0x01	; 1
    4f7a:	81 11       	cpse	r24, r1
    4f7c:	01 c0       	rjmp	.+2      	; 0x4f80 <__stack+0xf81>
    4f7e:	20 e0       	ldi	r18, 0x00	; 0
    4f80:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
    if (!ProgramRun)
    4f84:	20 91 d0 27 	lds	r18, 0x27D0	; 0x8027d0 <ProgramRun>
    4f88:	21 11       	cpse	r18, r1
    4f8a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
     {
     while (AxisMoving == 1) 
    4f8e:	88 23       	and	r24, r24
    4f90:	11 f4       	brne	.+4      	; 0x4f96 <__stack+0xf97>
    4f92:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    4f96:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    4f9a:	81 11       	cpse	r24, r1
    4f9c:	07 c0       	rjmp	.+14     	; 0x4fac <__stack+0xfad>
    4f9e:	81 e0       	ldi	r24, 0x01	; 1
    4fa0:	20 91 5a 27 	lds	r18, 0x275A	; 0x80275a <AxisIsMoving3>
    4fa4:	21 11       	cpse	r18, r1
    4fa6:	03 c0       	rjmp	.+6      	; 0x4fae <__stack+0xfaf>
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	01 c0       	rjmp	.+2      	; 0x4fae <__stack+0xfaf>
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	28 2f       	mov	r18, r24
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4fb0:	91 11       	cpse	r25, r1
    4fb2:	fe cf       	rjmp	.-4      	; 0x4fb0 <__stack+0xfb1>
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    4fb4:	21 11       	cpse	r18, r1
    4fb6:	fc cf       	rjmp	.-8      	; 0x4fb0 <__stack+0xfb1>
    4fb8:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
    4fbc:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
            }
         }
       }
     }
    }   
    else if(strncmp(cmdTemp,"#13",3)==0)
    4fc0:	43 e0       	ldi	r20, 0x03	; 3
    4fc2:	50 e0       	ldi	r21, 0x00	; 0
    4fc4:	6d ed       	ldi	r22, 0xDD	; 221
    4fc6:	73 e2       	ldi	r23, 0x23	; 35
    4fc8:	83 e2       	ldi	r24, 0x23	; 35
    4fca:	97 e2       	ldi	r25, 0x27	; 39
    4fcc:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    4fd0:	00 97       	sbiw	r24, 0x00	; 0
    4fd2:	09 f0       	breq	.+2      	; 0x4fd6 <__stack+0xfd7>
    4fd4:	e5 c0       	rjmp	.+458    	; 0x51a0 <__stack+0x11a1>
    {// Set Speed 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4fd6:	20 91 5c 27 	lds	r18, 0x275C	; 0x80275c <AxisIsMoving1>
    4fda:	21 11       	cpse	r18, r1
    4fdc:	0c 94 ce 33 	jmp	0x679c	; 0x679c <__stack+0x279d>
    4fe0:	20 91 5b 27 	lds	r18, 0x275B	; 0x80275b <AxisIsMoving2>
    4fe4:	21 11       	cpse	r18, r1
    4fe6:	0c 94 ce 33 	jmp	0x679c	; 0x679c <__stack+0x279d>
    4fea:	21 e0       	ldi	r18, 0x01	; 1
    4fec:	30 91 5a 27 	lds	r19, 0x275A	; 0x80275a <AxisIsMoving3>
    4ff0:	31 11       	cpse	r19, r1
    4ff2:	01 c0       	rjmp	.+2      	; 0x4ff6 <__stack+0xff7>
    4ff4:	20 e0       	ldi	r18, 0x00	; 0
    4ff6:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    4ffa:	31 e0       	ldi	r19, 0x01	; 1
    4ffc:	40 91 d0 27 	lds	r20, 0x27D0	; 0x8027d0 <ProgramRun>
    5000:	41 11       	cpse	r20, r1
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	23 17       	cp	r18, r19
    5006:	10 f0       	brcs	.+4      	; 0x500c <__stack+0x100d>
    5008:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
     {
       if(cmdTemp[3]=='0')
    500c:	20 91 26 27 	lds	r18, 0x2726	; 0x802726 <cmdTemp+0x3>
    5010:	20 33       	cpi	r18, 0x30	; 48
    5012:	11 f0       	breq	.+4      	; 0x5018 <__stack+0x1019>
    5014:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         switch(cmdTemp[4])
    5018:	20 91 27 27 	lds	r18, 0x2727	; 0x802727 <cmdTemp+0x4>
    501c:	22 33       	cpi	r18, 0x32	; 50
    501e:	09 f4       	brne	.+2      	; 0x5022 <__stack+0x1023>
    5020:	47 c0       	rjmp	.+142    	; 0x50b0 <__stack+0x10b1>
    5022:	23 33       	cpi	r18, 0x33	; 51
    5024:	09 f4       	brne	.+2      	; 0x5028 <__stack+0x1029>
    5026:	80 c0       	rjmp	.+256    	; 0x5128 <__stack+0x1129>
    5028:	21 33       	cpi	r18, 0x31	; 49
    502a:	11 f0       	breq	.+4      	; 0x5030 <__stack+0x1031>
    502c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    5030:	a8 e2       	ldi	r26, 0x28	; 40
    5032:	b7 e2       	ldi	r27, 0x27	; 39
    5034:	ee e0       	ldi	r30, 0x0E	; 14
    5036:	f7 e2       	ldi	r31, 0x27	; 39
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5038:	2d 91       	ld	r18, X+
    503a:	21 93       	st	Z+, r18
       {
         switch(cmdTemp[4])
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
    503c:	01 96       	adiw	r24, 0x01	; 1
    503e:	8a 30       	cpi	r24, 0x0A	; 10
    5040:	91 05       	cpc	r25, r1
    5042:	d4 f3       	brlt	.-12     	; 0x5038 <__stack+0x1039>
    5044:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    5048:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    504c:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              SetSpeed1=atof(temp);  
    5050:	8e e0       	ldi	r24, 0x0E	; 14
    5052:	97 e2       	ldi	r25, 0x27	; 39
    5054:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    5058:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    505c:	60 93 8d 27 	sts	0x278D, r22	; 0x80278d <SetSpeed1>
    5060:	70 93 8e 27 	sts	0x278E, r23	; 0x80278e <SetSpeed1+0x1>
    5064:	80 93 8f 27 	sts	0x278F, r24	; 0x80278f <SetSpeed1+0x2>
    5068:	90 93 90 27 	sts	0x2790, r25	; 0x802790 <SetSpeed1+0x3>
              sprintf(BufferSend,"!1301\t%s\r\n",temp); 
    506c:	0f 2e       	mov	r0, r31
    506e:	fe e0       	ldi	r31, 0x0E	; 14
    5070:	cf 2e       	mov	r12, r31
    5072:	f7 e2       	ldi	r31, 0x27	; 39
    5074:	df 2e       	mov	r13, r31
    5076:	f0 2d       	mov	r31, r0
    5078:	df 92       	push	r13
    507a:	cf 92       	push	r12
    507c:	81 ee       	ldi	r24, 0xE1	; 225
    507e:	93 e2       	ldi	r25, 0x23	; 35
    5080:	9f 93       	push	r25
    5082:	8f 93       	push	r24
    5084:	8f e6       	ldi	r24, 0x6F	; 111
    5086:	99 e2       	ldi	r25, 0x29	; 41
    5088:	9f 93       	push	r25
    508a:	8f 93       	push	r24
    508c:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1; 
    5090:	81 e0       	ldi	r24, 0x01	; 1
    5092:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    5096:	e0 ea       	ldi	r30, 0xA0	; 160
    5098:	f6 e0       	ldi	r31, 0x06	; 6
    509a:	84 81       	ldd	r24, Z+4	; 0x04
    509c:	81 60       	ori	r24, 0x01	; 1
    509e:	84 83       	std	Z+4, r24	; 0x04
              break; 
    50a0:	0f 90       	pop	r0
    50a2:	0f 90       	pop	r0
    50a4:	0f 90       	pop	r0
    50a6:	0f 90       	pop	r0
    50a8:	0f 90       	pop	r0
    50aa:	0f 90       	pop	r0
    50ac:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    50b0:	a8 e2       	ldi	r26, 0x28	; 40
    50b2:	b7 e2       	ldi	r27, 0x27	; 39
    50b4:	ee e0       	ldi	r30, 0x0E	; 14
    50b6:	f7 e2       	ldi	r31, 0x27	; 39
            }
            case '2': //Axis 2
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    50b8:	2d 91       	ld	r18, X+
    50ba:	21 93       	st	Z+, r18
              SetDataReady;
              break; 
            }
            case '2': //Axis 2
            {
              for(k=0;k<10;k++)
    50bc:	01 96       	adiw	r24, 0x01	; 1
    50be:	8a 30       	cpi	r24, 0x0A	; 10
    50c0:	91 05       	cpc	r25, r1
    50c2:	d4 f3       	brlt	.-12     	; 0x50b8 <__stack+0x10b9>
    50c4:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    50c8:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    50cc:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              SetSpeed2=atof(temp);   
    50d0:	8e e0       	ldi	r24, 0x0E	; 14
    50d2:	97 e2       	ldi	r25, 0x27	; 39
    50d4:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    50d8:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    50dc:	60 93 89 27 	sts	0x2789, r22	; 0x802789 <SetSpeed2>
    50e0:	70 93 8a 27 	sts	0x278A, r23	; 0x80278a <SetSpeed2+0x1>
    50e4:	80 93 8b 27 	sts	0x278B, r24	; 0x80278b <SetSpeed2+0x2>
    50e8:	90 93 8c 27 	sts	0x278C, r25	; 0x80278c <SetSpeed2+0x3>
              sprintf(BufferSend,"!1302\t%s\r\n",temp); 
    50ec:	0e e0       	ldi	r16, 0x0E	; 14
    50ee:	17 e2       	ldi	r17, 0x27	; 39
    50f0:	1f 93       	push	r17
    50f2:	0f 93       	push	r16
    50f4:	8c ee       	ldi	r24, 0xEC	; 236
    50f6:	93 e2       	ldi	r25, 0x23	; 35
    50f8:	9f 93       	push	r25
    50fa:	8f 93       	push	r24
    50fc:	8f e6       	ldi	r24, 0x6F	; 111
    50fe:	99 e2       	ldi	r25, 0x29	; 41
    5100:	9f 93       	push	r25
    5102:	8f 93       	push	r24
    5104:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1;
    5108:	81 e0       	ldi	r24, 0x01	; 1
    510a:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    510e:	e0 ea       	ldi	r30, 0xA0	; 160
    5110:	f6 e0       	ldi	r31, 0x06	; 6
    5112:	84 81       	ldd	r24, Z+4	; 0x04
    5114:	81 60       	ori	r24, 0x01	; 1
    5116:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5118:	0f 90       	pop	r0
    511a:	0f 90       	pop	r0
    511c:	0f 90       	pop	r0
    511e:	0f 90       	pop	r0
    5120:	0f 90       	pop	r0
    5122:	0f 90       	pop	r0
    5124:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    5128:	a8 e2       	ldi	r26, 0x28	; 40
    512a:	b7 e2       	ldi	r27, 0x27	; 39
    512c:	ee e0       	ldi	r30, 0x0E	; 14
    512e:	f7 e2       	ldi	r31, 0x27	; 39
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5130:	2d 91       	ld	r18, X+
    5132:	21 93       	st	Z+, r18
              SetDataReady;
              break; 
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
    5134:	01 96       	adiw	r24, 0x01	; 1
    5136:	8a 30       	cpi	r24, 0x0A	; 10
    5138:	91 05       	cpc	r25, r1
    513a:	d4 f3       	brlt	.-12     	; 0x5130 <__stack+0x1131>
    513c:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    5140:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5144:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              SetSpeed3=atof(temp);   
    5148:	8e e0       	ldi	r24, 0x0E	; 14
    514a:	97 e2       	ldi	r25, 0x27	; 39
    514c:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    5150:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    5154:	60 93 85 27 	sts	0x2785, r22	; 0x802785 <SetSpeed3>
    5158:	70 93 86 27 	sts	0x2786, r23	; 0x802786 <SetSpeed3+0x1>
    515c:	80 93 87 27 	sts	0x2787, r24	; 0x802787 <SetSpeed3+0x2>
    5160:	90 93 88 27 	sts	0x2788, r25	; 0x802788 <SetSpeed3+0x3>
              sprintf(BufferSend,"!1303\t%s\r\n",temp); 
    5164:	4e e0       	ldi	r20, 0x0E	; 14
    5166:	57 e2       	ldi	r21, 0x27	; 39
    5168:	5f 93       	push	r21
    516a:	4f 93       	push	r20
    516c:	87 ef       	ldi	r24, 0xF7	; 247
    516e:	93 e2       	ldi	r25, 0x23	; 35
    5170:	9f 93       	push	r25
    5172:	8f 93       	push	r24
    5174:	8f e6       	ldi	r24, 0x6F	; 111
    5176:	99 e2       	ldi	r25, 0x29	; 41
    5178:	9f 93       	push	r25
    517a:	8f 93       	push	r24
    517c:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1;
    5180:	81 e0       	ldi	r24, 0x01	; 1
    5182:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    5186:	e0 ea       	ldi	r30, 0xA0	; 160
    5188:	f6 e0       	ldi	r31, 0x06	; 6
    518a:	84 81       	ldd	r24, Z+4	; 0x04
    518c:	81 60       	ori	r24, 0x01	; 1
    518e:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5190:	0f 90       	pop	r0
    5192:	0f 90       	pop	r0
    5194:	0f 90       	pop	r0
    5196:	0f 90       	pop	r0
    5198:	0f 90       	pop	r0
    519a:	0f 90       	pop	r0
    519c:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
            }            
         }
       }
     }
    }
    else if(strncmp(cmdTemp,"?14",3)==0)
    51a0:	43 e0       	ldi	r20, 0x03	; 3
    51a2:	50 e0       	ldi	r21, 0x00	; 0
    51a4:	62 e0       	ldi	r22, 0x02	; 2
    51a6:	74 e2       	ldi	r23, 0x24	; 36
    51a8:	83 e2       	ldi	r24, 0x23	; 35
    51aa:	97 e2       	ldi	r25, 0x27	; 39
    51ac:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    51b0:	89 2b       	or	r24, r25
    51b2:	09 f0       	breq	.+2      	; 0x51b6 <__stack+0x11b7>
    51b4:	52 c0       	rjmp	.+164    	; 0x525a <__stack+0x125b>
    {//AxisIsMoving
       if(cmdTemp[3]=='0')
    51b6:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    51ba:	80 33       	cpi	r24, 0x30	; 48
    51bc:	11 f0       	breq	.+4      	; 0x51c2 <__stack+0x11c3>
    51be:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         switch(cmdTemp[4])
    51c2:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    51c6:	82 33       	cpi	r24, 0x32	; 50
    51c8:	e1 f0       	breq	.+56     	; 0x5202 <__stack+0x1203>
    51ca:	83 33       	cpi	r24, 0x33	; 51
    51cc:	81 f1       	breq	.+96     	; 0x522e <__stack+0x122f>
    51ce:	81 33       	cpi	r24, 0x31	; 49
    51d0:	11 f0       	breq	.+4      	; 0x51d6 <__stack+0x11d7>
    51d2:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         {
            case '1': //Axis 1
            {
              if(EchoON) printf("!1401\t%u\n\r",AxisIsMoving1);                      
    51d6:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    51da:	88 23       	and	r24, r24
    51dc:	11 f4       	brne	.+4      	; 0x51e2 <__stack+0x11e3>
    51de:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    51e2:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    51e6:	1f 92       	push	r1
    51e8:	8f 93       	push	r24
    51ea:	86 e0       	ldi	r24, 0x06	; 6
    51ec:	94 e2       	ldi	r25, 0x24	; 36
    51ee:	9f 93       	push	r25
    51f0:	8f 93       	push	r24
    51f2:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    51f6:	0f 90       	pop	r0
    51f8:	0f 90       	pop	r0
    51fa:	0f 90       	pop	r0
    51fc:	0f 90       	pop	r0
    51fe:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
              break; 
            }
            case '2': //Axis 2
            {
              if(EchoON) printf("!1402\t%u\n\r",AxisIsMoving2);
    5202:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    5206:	88 23       	and	r24, r24
    5208:	11 f4       	brne	.+4      	; 0x520e <__stack+0x120f>
    520a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    520e:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    5212:	1f 92       	push	r1
    5214:	8f 93       	push	r24
    5216:	81 e1       	ldi	r24, 0x11	; 17
    5218:	94 e2       	ldi	r25, 0x24	; 36
    521a:	9f 93       	push	r25
    521c:	8f 93       	push	r24
    521e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    5222:	0f 90       	pop	r0
    5224:	0f 90       	pop	r0
    5226:	0f 90       	pop	r0
    5228:	0f 90       	pop	r0
    522a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
              break; 
            }
            case '3': //Axis 3
            {
              if(EchoON) printf("!1403\t%u\n\r",AxisIsMoving3);
    522e:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    5232:	88 23       	and	r24, r24
    5234:	11 f4       	brne	.+4      	; 0x523a <__stack+0x123b>
    5236:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    523a:	80 91 5a 27 	lds	r24, 0x275A	; 0x80275a <AxisIsMoving3>
    523e:	1f 92       	push	r1
    5240:	8f 93       	push	r24
    5242:	8c e1       	ldi	r24, 0x1C	; 28
    5244:	94 e2       	ldi	r25, 0x24	; 36
    5246:	9f 93       	push	r25
    5248:	8f 93       	push	r24
    524a:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    524e:	0f 90       	pop	r0
    5250:	0f 90       	pop	r0
    5252:	0f 90       	pop	r0
    5254:	0f 90       	pop	r0
    5256:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
              break; 
            }            
         }
       }
    }
    else if(strncmp(cmdTemp,"?15",3)==0)
    525a:	43 e0       	ldi	r20, 0x03	; 3
    525c:	50 e0       	ldi	r21, 0x00	; 0
    525e:	67 e2       	ldi	r22, 0x27	; 39
    5260:	74 e2       	ldi	r23, 0x24	; 36
    5262:	83 e2       	ldi	r24, 0x23	; 35
    5264:	97 e2       	ldi	r25, 0x27	; 39
    5266:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    526a:	89 2b       	or	r24, r25
    526c:	09 f0       	breq	.+2      	; 0x5270 <__stack+0x1271>
    526e:	71 c0       	rjmp	.+226    	; 0x5352 <__stack+0x1353>
    {//Read Axis Speed
       if(cmdTemp[3]=='0')
    5270:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <cmdTemp+0x3>
    5274:	80 33       	cpi	r24, 0x30	; 48
    5276:	11 f0       	breq	.+4      	; 0x527c <__stack+0x127d>
    5278:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         switch(cmdTemp[4])
    527c:	80 91 27 27 	lds	r24, 0x2727	; 0x802727 <cmdTemp+0x4>
    5280:	82 33       	cpi	r24, 0x32	; 50
    5282:	39 f1       	breq	.+78     	; 0x52d2 <__stack+0x12d3>
    5284:	83 33       	cpi	r24, 0x33	; 51
    5286:	09 f4       	brne	.+2      	; 0x528a <__stack+0x128b>
    5288:	44 c0       	rjmp	.+136    	; 0x5312 <__stack+0x1313>
    528a:	81 33       	cpi	r24, 0x31	; 49
    528c:	11 f0       	breq	.+4      	; 0x5292 <__stack+0x1293>
    528e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
         {
            case '1': //Axis 1
            {
              if(EchoON) printf("!1501\t%lu",SetSpeed1);                      
    5292:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    5296:	88 23       	and	r24, r24
    5298:	11 f4       	brne	.+4      	; 0x529e <__stack+0x129f>
    529a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    529e:	80 91 90 27 	lds	r24, 0x2790	; 0x802790 <SetSpeed1+0x3>
    52a2:	8f 93       	push	r24
    52a4:	80 91 8f 27 	lds	r24, 0x278F	; 0x80278f <SetSpeed1+0x2>
    52a8:	8f 93       	push	r24
    52aa:	80 91 8e 27 	lds	r24, 0x278E	; 0x80278e <SetSpeed1+0x1>
    52ae:	8f 93       	push	r24
    52b0:	80 91 8d 27 	lds	r24, 0x278D	; 0x80278d <SetSpeed1>
    52b4:	8f 93       	push	r24
    52b6:	8b e2       	ldi	r24, 0x2B	; 43
    52b8:	94 e2       	ldi	r25, 0x24	; 36
    52ba:	9f 93       	push	r25
    52bc:	8f 93       	push	r24
    52be:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    52c2:	0f 90       	pop	r0
    52c4:	0f 90       	pop	r0
    52c6:	0f 90       	pop	r0
    52c8:	0f 90       	pop	r0
    52ca:	0f 90       	pop	r0
    52cc:	0f 90       	pop	r0
    52ce:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
              break; 
            }
            case '2': //Axis 2
            {
              if(EchoON) printf("!1502\t%lu",SetSpeed2);
    52d2:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    52d6:	88 23       	and	r24, r24
    52d8:	11 f4       	brne	.+4      	; 0x52de <__stack+0x12df>
    52da:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    52de:	80 91 8c 27 	lds	r24, 0x278C	; 0x80278c <SetSpeed2+0x3>
    52e2:	8f 93       	push	r24
    52e4:	80 91 8b 27 	lds	r24, 0x278B	; 0x80278b <SetSpeed2+0x2>
    52e8:	8f 93       	push	r24
    52ea:	80 91 8a 27 	lds	r24, 0x278A	; 0x80278a <SetSpeed2+0x1>
    52ee:	8f 93       	push	r24
    52f0:	80 91 89 27 	lds	r24, 0x2789	; 0x802789 <SetSpeed2>
    52f4:	8f 93       	push	r24
    52f6:	85 e3       	ldi	r24, 0x35	; 53
    52f8:	94 e2       	ldi	r25, 0x24	; 36
    52fa:	9f 93       	push	r25
    52fc:	8f 93       	push	r24
    52fe:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    5302:	0f 90       	pop	r0
    5304:	0f 90       	pop	r0
    5306:	0f 90       	pop	r0
    5308:	0f 90       	pop	r0
    530a:	0f 90       	pop	r0
    530c:	0f 90       	pop	r0
    530e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
              break; 
            }
            case '3': //Axis 3
            {
              if(EchoON) printf("!1503\t%lu",SetSpeed3);
    5312:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <EchoON>
    5316:	88 23       	and	r24, r24
    5318:	11 f4       	brne	.+4      	; 0x531e <__stack+0x131f>
    531a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    531e:	80 91 88 27 	lds	r24, 0x2788	; 0x802788 <SetSpeed3+0x3>
    5322:	8f 93       	push	r24
    5324:	80 91 87 27 	lds	r24, 0x2787	; 0x802787 <SetSpeed3+0x2>
    5328:	8f 93       	push	r24
    532a:	80 91 86 27 	lds	r24, 0x2786	; 0x802786 <SetSpeed3+0x1>
    532e:	8f 93       	push	r24
    5330:	80 91 85 27 	lds	r24, 0x2785	; 0x802785 <SetSpeed3>
    5334:	8f 93       	push	r24
    5336:	8f e3       	ldi	r24, 0x3F	; 63
    5338:	94 e2       	ldi	r25, 0x24	; 36
    533a:	9f 93       	push	r25
    533c:	8f 93       	push	r24
    533e:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    5342:	0f 90       	pop	r0
    5344:	0f 90       	pop	r0
    5346:	0f 90       	pop	r0
    5348:	0f 90       	pop	r0
    534a:	0f 90       	pop	r0
    534c:	0f 90       	pop	r0
    534e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
              break; 
            }            
         }
       }
    }
    else if(strncmp(cmdTemp,"#16",3)==0)
    5352:	43 e0       	ldi	r20, 0x03	; 3
    5354:	50 e0       	ldi	r21, 0x00	; 0
    5356:	69 e4       	ldi	r22, 0x49	; 73
    5358:	74 e2       	ldi	r23, 0x24	; 36
    535a:	83 e2       	ldi	r24, 0x23	; 35
    535c:	97 e2       	ldi	r25, 0x27	; 39
    535e:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5362:	00 97       	sbiw	r24, 0x00	; 0
    5364:	09 f0       	breq	.+2      	; 0x5368 <__stack+0x1369>
    5366:	e9 c0       	rjmp	.+466    	; 0x553a <__stack+0x153b>
    {// Set ACC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5368:	20 91 5c 27 	lds	r18, 0x275C	; 0x80275c <AxisIsMoving1>
    536c:	21 11       	cpse	r18, r1
    536e:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__stack+0x27a5>
    5372:	20 91 5b 27 	lds	r18, 0x275B	; 0x80275b <AxisIsMoving2>
    5376:	21 11       	cpse	r18, r1
    5378:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__stack+0x27a5>
    537c:	21 e0       	ldi	r18, 0x01	; 1
    537e:	30 91 5a 27 	lds	r19, 0x275A	; 0x80275a <AxisIsMoving3>
    5382:	31 11       	cpse	r19, r1
    5384:	01 c0       	rjmp	.+2      	; 0x5388 <__stack+0x1389>
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    538c:	31 e0       	ldi	r19, 0x01	; 1
    538e:	40 91 d0 27 	lds	r20, 0x27D0	; 0x8027d0 <ProgramRun>
    5392:	41 11       	cpse	r20, r1
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	23 17       	cp	r18, r19
    5398:	10 f0       	brcs	.+4      	; 0x539e <__stack+0x139f>
    539a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
     {
      if(cmdTemp[3]=='0')
    539e:	20 91 26 27 	lds	r18, 0x2726	; 0x802726 <cmdTemp+0x3>
    53a2:	20 33       	cpi	r18, 0x30	; 48
    53a4:	11 f0       	breq	.+4      	; 0x53aa <__stack+0x13ab>
    53a6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         switch(cmdTemp[4])
    53aa:	20 91 27 27 	lds	r18, 0x2727	; 0x802727 <cmdTemp+0x4>
    53ae:	22 33       	cpi	r18, 0x32	; 50
    53b0:	09 f4       	brne	.+2      	; 0x53b4 <__stack+0x13b5>
    53b2:	43 c0       	rjmp	.+134    	; 0x543a <__stack+0x143b>
    53b4:	23 33       	cpi	r18, 0x33	; 51
    53b6:	09 f4       	brne	.+2      	; 0x53ba <__stack+0x13bb>
    53b8:	80 c0       	rjmp	.+256    	; 0x54ba <__stack+0x14bb>
    53ba:	21 33       	cpi	r18, 0x31	; 49
    53bc:	11 f0       	breq	.+4      	; 0x53c2 <__stack+0x13c3>
    53be:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    53c2:	a8 e2       	ldi	r26, 0x28	; 40
    53c4:	b7 e2       	ldi	r27, 0x27	; 39
    53c6:	ee e0       	ldi	r30, 0x0E	; 14
    53c8:	f7 e2       	ldi	r31, 0x27	; 39
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    53ca:	2d 91       	ld	r18, X+
    53cc:	21 93       	st	Z+, r18
       {
         switch(cmdTemp[4])
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
    53ce:	01 96       	adiw	r24, 0x01	; 1
    53d0:	8a 30       	cpi	r24, 0x0A	; 10
    53d2:	91 05       	cpc	r25, r1
    53d4:	d4 f3       	brlt	.-12     	; 0x53ca <__stack+0x13cb>
    53d6:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    53da:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    53de:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              ACC1=atof(temp);  
    53e2:	8e e0       	ldi	r24, 0x0E	; 14
    53e4:	97 e2       	ldi	r25, 0x27	; 39
    53e6:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    53ea:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    53ee:	60 93 7d 27 	sts	0x277D, r22	; 0x80277d <ACC1>
    53f2:	70 93 7e 27 	sts	0x277E, r23	; 0x80277e <ACC1+0x1>
    53f6:	80 93 7f 27 	sts	0x277F, r24	; 0x80277f <ACC1+0x2>
    53fa:	90 93 80 27 	sts	0x2780, r25	; 0x802780 <ACC1+0x3>
              sprintf(BufferSend,"!1601\t%s\r\n",temp); 
    53fe:	ae e0       	ldi	r26, 0x0E	; 14
    5400:	b7 e2       	ldi	r27, 0x27	; 39
    5402:	bf 93       	push	r27
    5404:	af 93       	push	r26
    5406:	8d e4       	ldi	r24, 0x4D	; 77
    5408:	94 e2       	ldi	r25, 0x24	; 36
    540a:	9f 93       	push	r25
    540c:	8f 93       	push	r24
    540e:	8f e6       	ldi	r24, 0x6F	; 111
    5410:	99 e2       	ldi	r25, 0x29	; 41
    5412:	9f 93       	push	r25
    5414:	8f 93       	push	r24
    5416:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1;    
    541a:	81 e0       	ldi	r24, 0x01	; 1
    541c:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    5420:	e0 ea       	ldi	r30, 0xA0	; 160
    5422:	f6 e0       	ldi	r31, 0x06	; 6
    5424:	84 81       	ldd	r24, Z+4	; 0x04
    5426:	81 60       	ori	r24, 0x01	; 1
    5428:	84 83       	std	Z+4, r24	; 0x04
              break; 
    542a:	0f 90       	pop	r0
    542c:	0f 90       	pop	r0
    542e:	0f 90       	pop	r0
    5430:	0f 90       	pop	r0
    5432:	0f 90       	pop	r0
    5434:	0f 90       	pop	r0
    5436:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    543a:	a8 e2       	ldi	r26, 0x28	; 40
    543c:	b7 e2       	ldi	r27, 0x27	; 39
    543e:	ee e0       	ldi	r30, 0x0E	; 14
    5440:	f7 e2       	ldi	r31, 0x27	; 39
            }
            case '2': //Axis 2
            { 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5442:	2d 91       	ld	r18, X+
    5444:	21 93       	st	Z+, r18
              SetDataReady;
              break; 
            }
            case '2': //Axis 2
            { 
              for(k=0;k<10;k++)
    5446:	01 96       	adiw	r24, 0x01	; 1
    5448:	8a 30       	cpi	r24, 0x0A	; 10
    544a:	91 05       	cpc	r25, r1
    544c:	d4 f3       	brlt	.-12     	; 0x5442 <__stack+0x1443>
    544e:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    5452:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5456:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              ACC2=atof(temp);   
    545a:	8e e0       	ldi	r24, 0x0E	; 14
    545c:	97 e2       	ldi	r25, 0x27	; 39
    545e:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    5462:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    5466:	60 93 79 27 	sts	0x2779, r22	; 0x802779 <ACC2>
    546a:	70 93 7a 27 	sts	0x277A, r23	; 0x80277a <ACC2+0x1>
    546e:	80 93 7b 27 	sts	0x277B, r24	; 0x80277b <ACC2+0x2>
    5472:	90 93 7c 27 	sts	0x277C, r25	; 0x80277c <ACC2+0x3>
              sprintf(BufferSend,"!1602\t%s\r\n",temp); 
    5476:	0f 2e       	mov	r0, r31
    5478:	fe e0       	ldi	r31, 0x0E	; 14
    547a:	af 2e       	mov	r10, r31
    547c:	f7 e2       	ldi	r31, 0x27	; 39
    547e:	bf 2e       	mov	r11, r31
    5480:	f0 2d       	mov	r31, r0
    5482:	bf 92       	push	r11
    5484:	af 92       	push	r10
    5486:	88 e5       	ldi	r24, 0x58	; 88
    5488:	94 e2       	ldi	r25, 0x24	; 36
    548a:	9f 93       	push	r25
    548c:	8f 93       	push	r24
    548e:	8f e6       	ldi	r24, 0x6F	; 111
    5490:	99 e2       	ldi	r25, 0x29	; 41
    5492:	9f 93       	push	r25
    5494:	8f 93       	push	r24
    5496:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1;  
    549a:	81 e0       	ldi	r24, 0x01	; 1
    549c:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    54a0:	e0 ea       	ldi	r30, 0xA0	; 160
    54a2:	f6 e0       	ldi	r31, 0x06	; 6
    54a4:	84 81       	ldd	r24, Z+4	; 0x04
    54a6:	81 60       	ori	r24, 0x01	; 1
    54a8:	84 83       	std	Z+4, r24	; 0x04
              break; 
    54aa:	0f 90       	pop	r0
    54ac:	0f 90       	pop	r0
    54ae:	0f 90       	pop	r0
    54b0:	0f 90       	pop	r0
    54b2:	0f 90       	pop	r0
    54b4:	0f 90       	pop	r0
    54b6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    54ba:	a8 e2       	ldi	r26, 0x28	; 40
    54bc:	b7 e2       	ldi	r27, 0x27	; 39
    54be:	ee e0       	ldi	r30, 0x0E	; 14
    54c0:	f7 e2       	ldi	r31, 0x27	; 39
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    54c2:	2d 91       	ld	r18, X+
    54c4:	21 93       	st	Z+, r18
              SetDataReady;
              break; 
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
    54c6:	01 96       	adiw	r24, 0x01	; 1
    54c8:	8a 30       	cpi	r24, 0x0A	; 10
    54ca:	91 05       	cpc	r25, r1
    54cc:	d4 f3       	brlt	.-12     	; 0x54c2 <__stack+0x14c3>
    54ce:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    54d2:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    54d6:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              ACC3=atof(temp);   
    54da:	8e e0       	ldi	r24, 0x0E	; 14
    54dc:	97 e2       	ldi	r25, 0x27	; 39
    54de:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    54e2:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    54e6:	60 93 75 27 	sts	0x2775, r22	; 0x802775 <ACC3>
    54ea:	70 93 76 27 	sts	0x2776, r23	; 0x802776 <ACC3+0x1>
    54ee:	80 93 77 27 	sts	0x2777, r24	; 0x802777 <ACC3+0x2>
    54f2:	90 93 78 27 	sts	0x2778, r25	; 0x802778 <ACC3+0x3>
              sprintf(BufferSend,"!1603\t%s\r\n",temp); 
    54f6:	0f 2e       	mov	r0, r31
    54f8:	fe e0       	ldi	r31, 0x0E	; 14
    54fa:	ef 2e       	mov	r14, r31
    54fc:	f7 e2       	ldi	r31, 0x27	; 39
    54fe:	ff 2e       	mov	r15, r31
    5500:	f0 2d       	mov	r31, r0
    5502:	ff 92       	push	r15
    5504:	ef 92       	push	r14
    5506:	83 e6       	ldi	r24, 0x63	; 99
    5508:	94 e2       	ldi	r25, 0x24	; 36
    550a:	9f 93       	push	r25
    550c:	8f 93       	push	r24
    550e:	8f e6       	ldi	r24, 0x6F	; 111
    5510:	99 e2       	ldi	r25, 0x29	; 41
    5512:	9f 93       	push	r25
    5514:	8f 93       	push	r24
    5516:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1;
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    5520:	e0 ea       	ldi	r30, 0xA0	; 160
    5522:	f6 e0       	ldi	r31, 0x06	; 6
    5524:	84 81       	ldd	r24, Z+4	; 0x04
    5526:	81 60       	ori	r24, 0x01	; 1
    5528:	84 83       	std	Z+4, r24	; 0x04
              break; 
    552a:	0f 90       	pop	r0
    552c:	0f 90       	pop	r0
    552e:	0f 90       	pop	r0
    5530:	0f 90       	pop	r0
    5532:	0f 90       	pop	r0
    5534:	0f 90       	pop	r0
    5536:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
            
         }
       }          
      }
    }
    else if(strncmp(cmdTemp,"#17",3)==0)
    553a:	43 e0       	ldi	r20, 0x03	; 3
    553c:	50 e0       	ldi	r21, 0x00	; 0
    553e:	6e e6       	ldi	r22, 0x6E	; 110
    5540:	74 e2       	ldi	r23, 0x24	; 36
    5542:	83 e2       	ldi	r24, 0x23	; 35
    5544:	97 e2       	ldi	r25, 0x27	; 39
    5546:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    554a:	00 97       	sbiw	r24, 0x00	; 0
    554c:	09 f0       	breq	.+2      	; 0x5550 <__stack+0x1551>
    554e:	e7 c0       	rjmp	.+462    	; 0x571e <__stack+0x171f>
    {// Set DEC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5550:	20 91 5c 27 	lds	r18, 0x275C	; 0x80275c <AxisIsMoving1>
    5554:	21 11       	cpse	r18, r1
    5556:	0c 94 d6 33 	jmp	0x67ac	; 0x67ac <__stack+0x27ad>
    555a:	20 91 5b 27 	lds	r18, 0x275B	; 0x80275b <AxisIsMoving2>
    555e:	21 11       	cpse	r18, r1
    5560:	0c 94 d6 33 	jmp	0x67ac	; 0x67ac <__stack+0x27ad>
    5564:	30 91 5a 27 	lds	r19, 0x275A	; 0x80275a <AxisIsMoving3>
    5568:	21 e0       	ldi	r18, 0x01	; 1
    556a:	31 11       	cpse	r19, r1
    556c:	01 c0       	rjmp	.+2      	; 0x5570 <__stack+0x1571>
    556e:	20 e0       	ldi	r18, 0x00	; 0
    5570:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    5574:	41 e0       	ldi	r20, 0x01	; 1
    5576:	50 91 d0 27 	lds	r21, 0x27D0	; 0x8027d0 <ProgramRun>
    557a:	51 11       	cpse	r21, r1
    557c:	40 e0       	ldi	r20, 0x00	; 0
    557e:	24 17       	cp	r18, r20
    5580:	10 f0       	brcs	.+4      	; 0x5586 <__stack+0x1587>
    5582:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
     {     
       if(cmdTemp[3]=='0')
    5586:	20 91 26 27 	lds	r18, 0x2726	; 0x802726 <cmdTemp+0x3>
    558a:	20 33       	cpi	r18, 0x30	; 48
    558c:	11 f0       	breq	.+4      	; 0x5592 <__stack+0x1593>
    558e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
       {
         switch(cmdTemp[4])
    5592:	20 91 27 27 	lds	r18, 0x2727	; 0x802727 <cmdTemp+0x4>
    5596:	22 33       	cpi	r18, 0x32	; 50
    5598:	09 f4       	brne	.+2      	; 0x559c <__stack+0x159d>
    559a:	43 c0       	rjmp	.+134    	; 0x5622 <__stack+0x1623>
    559c:	23 33       	cpi	r18, 0x33	; 51
    559e:	09 f4       	brne	.+2      	; 0x55a2 <__stack+0x15a3>
    55a0:	7c c0       	rjmp	.+248    	; 0x569a <__stack+0x169b>
    55a2:	21 33       	cpi	r18, 0x31	; 49
    55a4:	11 f0       	breq	.+4      	; 0x55aa <__stack+0x15ab>
    55a6:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    55aa:	a8 e2       	ldi	r26, 0x28	; 40
    55ac:	b7 e2       	ldi	r27, 0x27	; 39
    55ae:	ee e0       	ldi	r30, 0x0E	; 14
    55b0:	f7 e2       	ldi	r31, 0x27	; 39
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    55b2:	2d 91       	ld	r18, X+
    55b4:	21 93       	st	Z+, r18
            {
              while(AxisIsMoving1)
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
    55b6:	01 96       	adiw	r24, 0x01	; 1
    55b8:	8a 30       	cpi	r24, 0x0A	; 10
    55ba:	91 05       	cpc	r25, r1
    55bc:	d4 f3       	brlt	.-12     	; 0x55b2 <__stack+0x15b3>
    55be:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    55c2:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    55c6:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              DEC1=atof(temp);  
    55ca:	8e e0       	ldi	r24, 0x0E	; 14
    55cc:	97 e2       	ldi	r25, 0x27	; 39
    55ce:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    55d2:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    55d6:	60 93 71 27 	sts	0x2771, r22	; 0x802771 <DEC1>
    55da:	70 93 72 27 	sts	0x2772, r23	; 0x802772 <DEC1+0x1>
    55de:	80 93 73 27 	sts	0x2773, r24	; 0x802773 <DEC1+0x2>
    55e2:	90 93 74 27 	sts	0x2774, r25	; 0x802774 <DEC1+0x3>
              sprintf(BufferSend,"!1701\t%s\r\n",temp); 
    55e6:	2e e0       	ldi	r18, 0x0E	; 14
    55e8:	37 e2       	ldi	r19, 0x27	; 39
    55ea:	3f 93       	push	r19
    55ec:	2f 93       	push	r18
    55ee:	82 e7       	ldi	r24, 0x72	; 114
    55f0:	94 e2       	ldi	r25, 0x24	; 36
    55f2:	9f 93       	push	r25
    55f4:	8f 93       	push	r24
    55f6:	8f e6       	ldi	r24, 0x6F	; 111
    55f8:	99 e2       	ldi	r25, 0x29	; 41
    55fa:	9f 93       	push	r25
    55fc:	8f 93       	push	r24
    55fe:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1;  
    5602:	81 e0       	ldi	r24, 0x01	; 1
    5604:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    5608:	e0 ea       	ldi	r30, 0xA0	; 160
    560a:	f6 e0       	ldi	r31, 0x06	; 6
    560c:	84 81       	ldd	r24, Z+4	; 0x04
    560e:	81 60       	ori	r24, 0x01	; 1
    5610:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5612:	0f 90       	pop	r0
    5614:	0f 90       	pop	r0
    5616:	0f 90       	pop	r0
    5618:	0f 90       	pop	r0
    561a:	0f 90       	pop	r0
    561c:	0f 90       	pop	r0
    561e:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
    5622:	a8 e2       	ldi	r26, 0x28	; 40
    5624:	b7 e2       	ldi	r27, 0x27	; 39
    5626:	ee e0       	ldi	r30, 0x0E	; 14
    5628:	f7 e2       	ldi	r31, 0x27	; 39
              {
                 /*wait until Is Moving*/
              }
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    562a:	2d 91       	ld	r18, X+
    562c:	21 93       	st	Z+, r18
            {
              while(AxisIsMoving2)
              {
                 /*wait until Is Moving*/
              }
              for(k=0;k<10;k++)
    562e:	01 96       	adiw	r24, 0x01	; 1
    5630:	8a 30       	cpi	r24, 0x0A	; 10
    5632:	91 05       	cpc	r25, r1
    5634:	d4 f3       	brlt	.-12     	; 0x562a <__stack+0x162b>
    5636:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    563a:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    563e:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              DEC2=atof(temp);  
    5642:	8e e0       	ldi	r24, 0x0E	; 14
    5644:	97 e2       	ldi	r25, 0x27	; 39
    5646:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    564a:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    564e:	60 93 6d 27 	sts	0x276D, r22	; 0x80276d <DEC2>
    5652:	70 93 6e 27 	sts	0x276E, r23	; 0x80276e <DEC2+0x1>
    5656:	80 93 6f 27 	sts	0x276F, r24	; 0x80276f <DEC2+0x2>
    565a:	90 93 70 27 	sts	0x2770, r25	; 0x802770 <DEC2+0x3>
              sprintf(BufferSend,"!1702\t%s\r\n",temp); 
    565e:	8e e0       	ldi	r24, 0x0E	; 14
    5660:	97 e2       	ldi	r25, 0x27	; 39
    5662:	9f 93       	push	r25
    5664:	8f 93       	push	r24
    5666:	8d e7       	ldi	r24, 0x7D	; 125
    5668:	94 e2       	ldi	r25, 0x24	; 36
    566a:	9f 93       	push	r25
    566c:	8f 93       	push	r24
    566e:	8f e6       	ldi	r24, 0x6F	; 111
    5670:	99 e2       	ldi	r25, 0x29	; 41
    5672:	9f 93       	push	r25
    5674:	8f 93       	push	r24
    5676:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1;
    567a:	81 e0       	ldi	r24, 0x01	; 1
    567c:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    5680:	e0 ea       	ldi	r30, 0xA0	; 160
    5682:	f6 e0       	ldi	r31, 0x06	; 6
    5684:	84 81       	ldd	r24, Z+4	; 0x04
    5686:	81 60       	ori	r24, 0x01	; 1
    5688:	84 83       	std	Z+4, r24	; 0x04
              break; 
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
            }
            case '3': //Axis 3
            {
              while(AxisIsMoving3)
    569a:	31 11       	cpse	r19, r1
    569c:	fe cf       	rjmp	.-4      	; 0x569a <__stack+0x169b>
    569e:	a8 e2       	ldi	r26, 0x28	; 40
    56a0:	b7 e2       	ldi	r27, 0x27	; 39
    56a2:	ee e0       	ldi	r30, 0x0E	; 14
    56a4:	f7 e2       	ldi	r31, 0x27	; 39
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    56a6:	2d 91       	ld	r18, X+
    56a8:	21 93       	st	Z+, r18
            {
              while(AxisIsMoving3)
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
    56aa:	01 96       	adiw	r24, 0x01	; 1
    56ac:	8a 30       	cpi	r24, 0x0A	; 10
    56ae:	91 05       	cpc	r25, r1
    56b0:	d4 f3       	brlt	.-12     	; 0x56a6 <__stack+0x16a7>
    56b2:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <k>
    56b6:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <k+0x1>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    56ba:	10 92 18 27 	sts	0x2718, r1	; 0x802718 <temp+0xa>
              DEC3=atof(temp);  
    56be:	8e e0       	ldi	r24, 0x0E	; 14
    56c0:	97 e2       	ldi	r25, 0x27	; 39
    56c2:	0e 94 26 40 	call	0x804c	; 0x804c <atof>
    56c6:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    56ca:	60 93 69 27 	sts	0x2769, r22	; 0x802769 <DEC3>
    56ce:	70 93 6a 27 	sts	0x276A, r23	; 0x80276a <DEC3+0x1>
    56d2:	80 93 6b 27 	sts	0x276B, r24	; 0x80276b <DEC3+0x2>
    56d6:	90 93 6c 27 	sts	0x276C, r25	; 0x80276c <DEC3+0x3>
              sprintf(BufferSend,"!1703\t%s\r\n",temp); 
    56da:	0f 2e       	mov	r0, r31
    56dc:	fe e0       	ldi	r31, 0x0E	; 14
    56de:	8f 2e       	mov	r8, r31
    56e0:	f7 e2       	ldi	r31, 0x27	; 39
    56e2:	9f 2e       	mov	r9, r31
    56e4:	f0 2d       	mov	r31, r0
    56e6:	9f 92       	push	r9
    56e8:	8f 92       	push	r8
    56ea:	88 e8       	ldi	r24, 0x88	; 136
    56ec:	94 e2       	ldi	r25, 0x24	; 36
    56ee:	9f 93       	push	r25
    56f0:	8f 93       	push	r24
    56f2:	8f e6       	ldi	r24, 0x6F	; 111
    56f4:	99 e2       	ldi	r25, 0x29	; 41
    56f6:	9f 93       	push	r25
    56f8:	8f 93       	push	r24
    56fa:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
              Responsing=1;    
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
              SetDataReady;
    5704:	e0 ea       	ldi	r30, 0xA0	; 160
    5706:	f6 e0       	ldi	r31, 0x06	; 6
    5708:	84 81       	ldd	r24, Z+4	; 0x04
    570a:	81 60       	ori	r24, 0x01	; 1
    570c:	84 83       	std	Z+4, r24	; 0x04
              break; 
    570e:	0f 90       	pop	r0
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
    5714:	0f 90       	pop	r0
    5716:	0f 90       	pop	r0
    5718:	0f 90       	pop	r0
    571a:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
            }            
         }
       }
     }
    }                          
    else if(strncmp(cmdTemp,"#1800",5)==0)
    571e:	45 e0       	ldi	r20, 0x05	; 5
    5720:	50 e0       	ldi	r21, 0x00	; 0
    5722:	63 e9       	ldi	r22, 0x93	; 147
    5724:	74 e2       	ldi	r23, 0x24	; 36
    5726:	83 e2       	ldi	r24, 0x23	; 35
    5728:	97 e2       	ldi	r25, 0x27	; 39
    572a:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    572e:	89 2b       	or	r24, r25
    5730:	09 f0       	breq	.+2      	; 0x5734 <__stack+0x1735>
    5732:	02 c1       	rjmp	.+516    	; 0x5938 <__stack+0x1939>
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
    5734:	20 91 5c 27 	lds	r18, 0x275C	; 0x80275c <AxisIsMoving1>
    5738:	21 11       	cpse	r18, r1
    573a:	0b c0       	rjmp	.+22     	; 0x5752 <__stack+0x1753>
    573c:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    5740:	81 11       	cpse	r24, r1
    5742:	09 c0       	rjmp	.+18     	; 0x5756 <__stack+0x1757>
    5744:	91 e0       	ldi	r25, 0x01	; 1
    5746:	80 91 5a 27 	lds	r24, 0x275A	; 0x80275a <AxisIsMoving3>
    574a:	81 11       	cpse	r24, r1
    574c:	05 c0       	rjmp	.+10     	; 0x5758 <__stack+0x1759>
    574e:	90 e0       	ldi	r25, 0x00	; 0
    5750:	03 c0       	rjmp	.+6      	; 0x5758 <__stack+0x1759>
    5752:	91 e0       	ldi	r25, 0x01	; 1
    5754:	01 c0       	rjmp	.+2      	; 0x5758 <__stack+0x1759>
    5756:	91 e0       	ldi	r25, 0x01	; 1
    5758:	89 2f       	mov	r24, r25
    575a:	90 93 0c 27 	sts	0x270C, r25	; 0x80270c <AxisMoving>
     if (!ProgramRun)
    575e:	90 91 d0 27 	lds	r25, 0x27D0	; 0x8027d0 <ProgramRun>
    5762:	91 11       	cpse	r25, r1
    5764:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__stack+0x27ef>
     {
      while (AxisMoving == 1) 
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5768:	30 91 5b 27 	lds	r19, 0x275B	; 0x80275b <AxisIsMoving2>
    576c:	91 e0       	ldi	r25, 0x01	; 1
    576e:	40 91 5a 27 	lds	r20, 0x275A	; 0x80275a <AxisIsMoving3>
    5772:	41 11       	cpse	r20, r1
    5774:	01 c0       	rjmp	.+2      	; 0x5778 <__stack+0x1779>
    5776:	90 e0       	ldi	r25, 0x00	; 0
    else if(strncmp(cmdTemp,"#1800",5)==0)
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    5778:	81 30       	cpi	r24, 0x01	; 1
    577a:	51 f4       	brne	.+20     	; 0x5790 <__stack+0x1791>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    577c:	21 11       	cpse	r18, r1
    577e:	04 c0       	rjmp	.+8      	; 0x5788 <__stack+0x1789>
    5780:	31 11       	cpse	r19, r1
    5782:	04 c0       	rjmp	.+8      	; 0x578c <__stack+0x178d>
    5784:	89 2f       	mov	r24, r25
    5786:	f8 cf       	rjmp	.-16     	; 0x5778 <__stack+0x1779>
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	f6 cf       	rjmp	.-20     	; 0x5778 <__stack+0x1779>
    578c:	81 e0       	ldi	r24, 0x01	; 1
    else if(strncmp(cmdTemp,"#1800",5)==0)
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    578e:	f4 cf       	rjmp	.-24     	; 0x5778 <__stack+0x1779>
    5790:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }   
      
      printf("RefDir : %u\r\n",Axes[0].RefrenceDir);
    5794:	80 91 ed 27 	lds	r24, 0x27ED	; 0x8027ed <Axes+0x1c>
    5798:	1f 92       	push	r1
    579a:	8f 93       	push	r24
    579c:	89 e9       	ldi	r24, 0x99	; 153
    579e:	94 e2       	ldi	r25, 0x24	; 36
    57a0:	9f 93       	push	r25
    57a2:	8f 93       	push	r24
    57a4:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
      if(Axes[0].RefrenceDir==1)
    57a8:	80 91 ed 27 	lds	r24, 0x27ED	; 0x8027ed <Axes+0x1c>
    57ac:	0f 90       	pop	r0
    57ae:	0f 90       	pop	r0
    57b0:	0f 90       	pop	r0
    57b2:	0f 90       	pop	r0
    57b4:	81 30       	cpi	r24, 0x01	; 1
    57b6:	31 f4       	brne	.+12     	; 0x57c4 <__stack+0x17c5>
      {
        
        CLR_DIR1;
    57b8:	e0 e2       	ldi	r30, 0x20	; 32
    57ba:	f7 e0       	ldi	r31, 0x07	; 7
    57bc:	84 81       	ldd	r24, Z+4	; 0x04
    57be:	8f 7e       	andi	r24, 0xEF	; 239
    57c0:	84 83       	std	Z+4, r24	; 0x04
    57c2:	07 c0       	rjmp	.+14     	; 0x57d2 <__stack+0x17d3>
      }
      else if(Axes[0].RefrenceDir==0)
    57c4:	81 11       	cpse	r24, r1
    57c6:	05 c0       	rjmp	.+10     	; 0x57d2 <__stack+0x17d3>
      {
        SET_DIR1;
    57c8:	e0 e2       	ldi	r30, 0x20	; 32
    57ca:	f7 e0       	ldi	r31, 0x07	; 7
    57cc:	84 81       	ldd	r24, Z+4	; 0x04
    57ce:	80 61       	ori	r24, 0x10	; 16
    57d0:	84 83       	std	Z+4, r24	; 0x04
      } 
      
      if(Axes[1].RefrenceDir==1)
    57d2:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <Axes+0x47>
    57d6:	81 30       	cpi	r24, 0x01	; 1
    57d8:	31 f4       	brne	.+12     	; 0x57e6 <__stack+0x17e7>
      {
        CLR_DIR2;
    57da:	e0 e2       	ldi	r30, 0x20	; 32
    57dc:	f7 e0       	ldi	r31, 0x07	; 7
    57de:	84 81       	ldd	r24, Z+4	; 0x04
    57e0:	8b 7f       	andi	r24, 0xFB	; 251
    57e2:	84 83       	std	Z+4, r24	; 0x04
    57e4:	07 c0       	rjmp	.+14     	; 0x57f4 <__stack+0x17f5>
      }
      else if(Axes[1].RefrenceDir==0)
    57e6:	81 11       	cpse	r24, r1
    57e8:	05 c0       	rjmp	.+10     	; 0x57f4 <__stack+0x17f5>
      {
        SET_DIR2;
    57ea:	e0 e2       	ldi	r30, 0x20	; 32
    57ec:	f7 e0       	ldi	r31, 0x07	; 7
    57ee:	84 81       	ldd	r24, Z+4	; 0x04
    57f0:	84 60       	ori	r24, 0x04	; 4
    57f2:	84 83       	std	Z+4, r24	; 0x04
      }
      
      if(Axes[2].RefrenceDir==1)
    57f4:	80 91 43 28 	lds	r24, 0x2843	; 0x802843 <Axes+0x72>
    57f8:	81 30       	cpi	r24, 0x01	; 1
    57fa:	31 f4       	brne	.+12     	; 0x5808 <__stack+0x1809>
      {
        CLR_DIR3;
    57fc:	e0 e2       	ldi	r30, 0x20	; 32
    57fe:	f7 e0       	ldi	r31, 0x07	; 7
    5800:	84 81       	ldd	r24, Z+4	; 0x04
    5802:	8e 7f       	andi	r24, 0xFE	; 254
    5804:	84 83       	std	Z+4, r24	; 0x04
    5806:	07 c0       	rjmp	.+14     	; 0x5816 <__stack+0x1817>
      }
      else if(Axes[2].RefrenceDir==0)
    5808:	81 11       	cpse	r24, r1
    580a:	05 c0       	rjmp	.+10     	; 0x5816 <__stack+0x1817>
      {
        SET_DIR3;
    580c:	e0 e2       	ldi	r30, 0x20	; 32
    580e:	f7 e0       	ldi	r31, 0x07	; 7
    5810:	84 81       	ldd	r24, Z+4	; 0x04
    5812:	81 60       	ori	r24, 0x01	; 1
    5814:	84 83       	std	Z+4, r24	; 0x04
      }       
                             
      MaxSpeed=8000;                         
    5816:	80 e4       	ldi	r24, 0x40	; 64
    5818:	9f e1       	ldi	r25, 0x1F	; 31
    581a:	a0 e0       	ldi	r26, 0x00	; 0
    581c:	b0 e0       	ldi	r27, 0x00	; 0
    581e:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    5822:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    5826:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    582a:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
        
      CurSpeedFrq = MaxSpeed;
    582e:	80 93 56 27 	sts	0x2756, r24	; 0x802756 <CurSpeedFrq>
    5832:	90 93 57 27 	sts	0x2757, r25	; 0x802757 <CurSpeedFrq+0x1>
    5836:	a0 93 58 27 	sts	0x2758, r26	; 0x802758 <CurSpeedFrq+0x2>
    583a:	b0 93 59 27 	sts	0x2759, r27	; 0x802759 <CurSpeedFrq+0x3>
      ACC = 0;
    583e:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <ACC>
      DEC = 0;
    5842:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <DEC>
      TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);          
    5846:	80 e0       	ldi	r24, 0x00	; 0
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	a0 e0       	ldi	r26, 0x00	; 0
    584c:	b0 e4       	ldi	r27, 0x40	; 64
    584e:	80 93 3c 27 	sts	0x273C, r24	; 0x80273c <TimerMainPeriod>
    5852:	90 93 3d 27 	sts	0x273D, r25	; 0x80273d <TimerMainPeriod+0x1>
    5856:	a0 93 3e 27 	sts	0x273E, r26	; 0x80273e <TimerMainPeriod+0x2>
    585a:	b0 93 3f 27 	sts	0x273F, r27	; 0x80273f <TimerMainPeriod+0x3>
      RefCmd=1;
    585e:	bb 24       	eor	r11, r11
    5860:	b3 94       	inc	r11
    5862:	b0 92 07 27 	sts	0x2707, r11	; 0x802707 <RefCmd>
      Ma1=1000; 
    5866:	88 ee       	ldi	r24, 0xE8	; 232
    5868:	93 e0       	ldi	r25, 0x03	; 3
    586a:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <Ma1>
    586e:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <Ma1+0x1>
      Ma2=1000;
    5872:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <Ma2>
    5876:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <Ma2+0x1>
      Ma3=1000;
    587a:	80 93 40 27 	sts	0x2740, r24	; 0x802740 <Ma3>
    587e:	90 93 41 27 	sts	0x2741, r25	; 0x802741 <Ma3+0x1>
      DistanceToGo1=0x7FFFFFFF;
    5882:	8f ef       	ldi	r24, 0xFF	; 255
    5884:	9f ef       	ldi	r25, 0xFF	; 255
    5886:	af ef       	ldi	r26, 0xFF	; 255
    5888:	bf e7       	ldi	r27, 0x7F	; 127
    588a:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <DistanceToGo1>
    588e:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <DistanceToGo1+0x1>
    5892:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <DistanceToGo1+0x2>
    5896:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <DistanceToGo1+0x3>
      DistanceToGo2=0x7FFFFFFF;
    589a:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <DistanceToGo2>
    589e:	90 93 a1 27 	sts	0x27A1, r25	; 0x8027a1 <DistanceToGo2+0x1>
    58a2:	a0 93 a2 27 	sts	0x27A2, r26	; 0x8027a2 <DistanceToGo2+0x2>
    58a6:	b0 93 a3 27 	sts	0x27A3, r27	; 0x8027a3 <DistanceToGo2+0x3>
      DistanceToGo3=0x7FFFFFFF;   
    58aa:	80 93 9c 27 	sts	0x279C, r24	; 0x80279c <DistanceToGo3>
    58ae:	90 93 9d 27 	sts	0x279D, r25	; 0x80279d <DistanceToGo3+0x1>
    58b2:	a0 93 9e 27 	sts	0x279E, r26	; 0x80279e <DistanceToGo3+0x2>
    58b6:	b0 93 9f 27 	sts	0x279F, r27	; 0x80279f <DistanceToGo3+0x3>
         
      tcc0_init();     
    58ba:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z9tcc0_initv>
      
      TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);                    
    58be:	20 e0       	ldi	r18, 0x00	; 0
    58c0:	30 e0       	ldi	r19, 0x00	; 0
    58c2:	4a e7       	ldi	r20, 0x7A	; 122
    58c4:	54 e4       	ldi	r21, 0x44	; 68
    58c6:	60 91 3c 27 	lds	r22, 0x273C	; 0x80273c <TimerMainPeriod>
    58ca:	70 91 3d 27 	lds	r23, 0x273D	; 0x80273d <TimerMainPeriod+0x1>
    58ce:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <TimerMainPeriod+0x2>
    58d2:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <TimerMainPeriod+0x3>
    58d6:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    58da:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    58de:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    58e2:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                
      sprintf(BufferSend,"!1800\r\n"); 
    58e6:	88 e0       	ldi	r24, 0x08	; 8
    58e8:	e9 ed       	ldi	r30, 0xD9	; 217
    58ea:	f0 e2       	ldi	r31, 0x20	; 32
    58ec:	af e6       	ldi	r26, 0x6F	; 111
    58ee:	b9 e2       	ldi	r27, 0x29	; 41
    58f0:	01 90       	ld	r0, Z+
    58f2:	0d 92       	st	X+, r0
    58f4:	8a 95       	dec	r24
    58f6:	e1 f7       	brne	.-8      	; 0x58f0 <__stack+0x18f1>
      AxisPosition1=0;
    58f8:	10 92 c0 27 	sts	0x27C0, r1	; 0x8027c0 <AxisPosition1>
    58fc:	10 92 c1 27 	sts	0x27C1, r1	; 0x8027c1 <AxisPosition1+0x1>
    5900:	10 92 c2 27 	sts	0x27C2, r1	; 0x8027c2 <AxisPosition1+0x2>
    5904:	10 92 c3 27 	sts	0x27C3, r1	; 0x8027c3 <AxisPosition1+0x3>
      AxisPosition2=0;
    5908:	10 92 bc 27 	sts	0x27BC, r1	; 0x8027bc <AxisPosition2>
    590c:	10 92 bd 27 	sts	0x27BD, r1	; 0x8027bd <AxisPosition2+0x1>
    5910:	10 92 be 27 	sts	0x27BE, r1	; 0x8027be <AxisPosition2+0x2>
    5914:	10 92 bf 27 	sts	0x27BF, r1	; 0x8027bf <AxisPosition2+0x3>
      AxisPosition3=0;
    5918:	10 92 b8 27 	sts	0x27B8, r1	; 0x8027b8 <AxisPosition3>
    591c:	10 92 b9 27 	sts	0x27B9, r1	; 0x8027b9 <AxisPosition3+0x1>
    5920:	10 92 ba 27 	sts	0x27BA, r1	; 0x8027ba <AxisPosition3+0x2>
    5924:	10 92 bb 27 	sts	0x27BB, r1	; 0x8027bb <AxisPosition3+0x3>
      Responsing=1; 
    5928:	b0 92 a2 28 	sts	0x28A2, r11	; 0x8028a2 <Responsing>
      SetDataReady;                      
    592c:	e0 ea       	ldi	r30, 0xA0	; 160
    592e:	f6 e0       	ldi	r31, 0x06	; 6
    5930:	84 81       	ldd	r24, Z+4	; 0x04
    5932:	81 60       	ori	r24, 0x01	; 1
    5934:	84 83       	std	Z+4, r24	; 0x04
    5936:	5b c7       	rjmp	.+3766   	; 0x67ee <__stack+0x27ef>
     }
    }     
    else if(strncmp(cmdTemp,"#1901",5)==0)
    5938:	45 e0       	ldi	r20, 0x05	; 5
    593a:	50 e0       	ldi	r21, 0x00	; 0
    593c:	67 ea       	ldi	r22, 0xA7	; 167
    593e:	74 e2       	ldi	r23, 0x24	; 36
    5940:	83 e2       	ldi	r24, 0x23	; 35
    5942:	97 e2       	ldi	r25, 0x27	; 39
    5944:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5948:	89 2b       	or	r24, r25
    594a:	a1 f4       	brne	.+40     	; 0x5974 <__stack+0x1975>
    {
        RefDir1=0;  
    594c:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <RefDir1>
        sprintf(BufferSend,"!1901\r\n"); 
    5950:	88 e0       	ldi	r24, 0x08	; 8
    5952:	ed ea       	ldi	r30, 0xAD	; 173
    5954:	f4 e2       	ldi	r31, 0x24	; 36
    5956:	af e6       	ldi	r26, 0x6F	; 111
    5958:	b9 e2       	ldi	r27, 0x29	; 41
    595a:	01 90       	ld	r0, Z+
    595c:	0d 92       	st	X+, r0
    595e:	8a 95       	dec	r24
    5960:	e1 f7       	brne	.-8      	; 0x595a <__stack+0x195b>
        Responsing=1; 
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;                    
    5968:	e0 ea       	ldi	r30, 0xA0	; 160
    596a:	f6 e0       	ldi	r31, 0x06	; 6
    596c:	84 81       	ldd	r24, Z+4	; 0x04
    596e:	81 60       	ori	r24, 0x01	; 1
    5970:	84 83       	std	Z+4, r24	; 0x04
    5972:	3d c7       	rjmp	.+3706   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#1902",5)==0)
    5974:	45 e0       	ldi	r20, 0x05	; 5
    5976:	50 e0       	ldi	r21, 0x00	; 0
    5978:	65 eb       	ldi	r22, 0xB5	; 181
    597a:	74 e2       	ldi	r23, 0x24	; 36
    597c:	83 e2       	ldi	r24, 0x23	; 35
    597e:	97 e2       	ldi	r25, 0x27	; 39
    5980:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5984:	89 2b       	or	r24, r25
    5986:	a1 f4       	brne	.+40     	; 0x59b0 <__stack+0x19b1>
    {             
        RefDir2=0;    
    5988:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <RefDir2>
        sprintf(BufferSend,"!1902\r\n"); 
    598c:	88 e0       	ldi	r24, 0x08	; 8
    598e:	eb eb       	ldi	r30, 0xBB	; 187
    5990:	f4 e2       	ldi	r31, 0x24	; 36
    5992:	af e6       	ldi	r26, 0x6F	; 111
    5994:	b9 e2       	ldi	r27, 0x29	; 41
    5996:	01 90       	ld	r0, Z+
    5998:	0d 92       	st	X+, r0
    599a:	8a 95       	dec	r24
    599c:	e1 f7       	brne	.-8      	; 0x5996 <__stack+0x1997>
        Responsing=1; 
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady; 
    59a4:	e0 ea       	ldi	r30, 0xA0	; 160
    59a6:	f6 e0       	ldi	r31, 0x06	; 6
    59a8:	84 81       	ldd	r24, Z+4	; 0x04
    59aa:	81 60       	ori	r24, 0x01	; 1
    59ac:	84 83       	std	Z+4, r24	; 0x04
    59ae:	1f c7       	rjmp	.+3646   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#1903",5)==0)
    59b0:	45 e0       	ldi	r20, 0x05	; 5
    59b2:	50 e0       	ldi	r21, 0x00	; 0
    59b4:	63 ec       	ldi	r22, 0xC3	; 195
    59b6:	74 e2       	ldi	r23, 0x24	; 36
    59b8:	83 e2       	ldi	r24, 0x23	; 35
    59ba:	97 e2       	ldi	r25, 0x27	; 39
    59bc:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    59c0:	89 2b       	or	r24, r25
    59c2:	a1 f4       	brne	.+40     	; 0x59ec <__stack+0x19ed>
    {             
        RefDir3=0; 
    59c4:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <RefDir3>
        sprintf(BufferSend,"!1903\r\n"); 
    59c8:	88 e0       	ldi	r24, 0x08	; 8
    59ca:	e9 ec       	ldi	r30, 0xC9	; 201
    59cc:	f4 e2       	ldi	r31, 0x24	; 36
    59ce:	af e6       	ldi	r26, 0x6F	; 111
    59d0:	b9 e2       	ldi	r27, 0x29	; 41
    59d2:	01 90       	ld	r0, Z+
    59d4:	0d 92       	st	X+, r0
    59d6:	8a 95       	dec	r24
    59d8:	e1 f7       	brne	.-8      	; 0x59d2 <__stack+0x19d3>
        Responsing=1; 
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady; 
    59e0:	e0 ea       	ldi	r30, 0xA0	; 160
    59e2:	f6 e0       	ldi	r31, 0x06	; 6
    59e4:	84 81       	ldd	r24, Z+4	; 0x04
    59e6:	81 60       	ori	r24, 0x01	; 1
    59e8:	84 83       	std	Z+4, r24	; 0x04
    59ea:	01 c7       	rjmp	.+3586   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2001",5)==0)
    59ec:	45 e0       	ldi	r20, 0x05	; 5
    59ee:	50 e0       	ldi	r21, 0x00	; 0
    59f0:	61 ed       	ldi	r22, 0xD1	; 209
    59f2:	74 e2       	ldi	r23, 0x24	; 36
    59f4:	83 e2       	ldi	r24, 0x23	; 35
    59f6:	97 e2       	ldi	r25, 0x27	; 39
    59f8:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    59fc:	89 2b       	or	r24, r25
    59fe:	a1 f4       	brne	.+40     	; 0x5a28 <__stack+0x1a29>
    {
      RefDir1=1;    
    5a00:	81 e0       	ldi	r24, 0x01	; 1
    5a02:	80 93 93 27 	sts	0x2793, r24	; 0x802793 <RefDir1>
      sprintf(BufferSend,"!2001\r\n"); 
    5a06:	98 e0       	ldi	r25, 0x08	; 8
    5a08:	e7 ed       	ldi	r30, 0xD7	; 215
    5a0a:	f4 e2       	ldi	r31, 0x24	; 36
    5a0c:	af e6       	ldi	r26, 0x6F	; 111
    5a0e:	b9 e2       	ldi	r27, 0x29	; 41
    5a10:	01 90       	ld	r0, Z+
    5a12:	0d 92       	st	X+, r0
    5a14:	9a 95       	dec	r25
    5a16:	e1 f7       	brne	.-8      	; 0x5a10 <__stack+0x1a11>
      Responsing=1; 
    5a18:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
      SetDataReady; 
    5a1c:	e0 ea       	ldi	r30, 0xA0	; 160
    5a1e:	f6 e0       	ldi	r31, 0x06	; 6
    5a20:	84 81       	ldd	r24, Z+4	; 0x04
    5a22:	81 60       	ori	r24, 0x01	; 1
    5a24:	84 83       	std	Z+4, r24	; 0x04
    5a26:	e3 c6       	rjmp	.+3526   	; 0x67ee <__stack+0x27ef>
    } 
    else if(strncmp(cmdTemp,"#2002",5)==0)
    5a28:	45 e0       	ldi	r20, 0x05	; 5
    5a2a:	50 e0       	ldi	r21, 0x00	; 0
    5a2c:	6f ed       	ldi	r22, 0xDF	; 223
    5a2e:	74 e2       	ldi	r23, 0x24	; 36
    5a30:	83 e2       	ldi	r24, 0x23	; 35
    5a32:	97 e2       	ldi	r25, 0x27	; 39
    5a34:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5a38:	89 2b       	or	r24, r25
    5a3a:	a1 f4       	brne	.+40     	; 0x5a64 <__stack+0x1a65>
    {
        RefDir2=1;  
    5a3c:	81 e0       	ldi	r24, 0x01	; 1
    5a3e:	80 93 92 27 	sts	0x2792, r24	; 0x802792 <RefDir2>
        sprintf(BufferSend,"!2002\r\n"); 
    5a42:	98 e0       	ldi	r25, 0x08	; 8
    5a44:	e5 ee       	ldi	r30, 0xE5	; 229
    5a46:	f4 e2       	ldi	r31, 0x24	; 36
    5a48:	af e6       	ldi	r26, 0x6F	; 111
    5a4a:	b9 e2       	ldi	r27, 0x29	; 41
    5a4c:	01 90       	ld	r0, Z+
    5a4e:	0d 92       	st	X+, r0
    5a50:	9a 95       	dec	r25
    5a52:	e1 f7       	brne	.-8      	; 0x5a4c <__stack+0x1a4d>
        Responsing=1; 
    5a54:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady; 
    5a58:	e0 ea       	ldi	r30, 0xA0	; 160
    5a5a:	f6 e0       	ldi	r31, 0x06	; 6
    5a5c:	84 81       	ldd	r24, Z+4	; 0x04
    5a5e:	81 60       	ori	r24, 0x01	; 1
    5a60:	84 83       	std	Z+4, r24	; 0x04
    5a62:	c5 c6       	rjmp	.+3466   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2003",5)==0)
    5a64:	45 e0       	ldi	r20, 0x05	; 5
    5a66:	50 e0       	ldi	r21, 0x00	; 0
    5a68:	6d ee       	ldi	r22, 0xED	; 237
    5a6a:	74 e2       	ldi	r23, 0x24	; 36
    5a6c:	83 e2       	ldi	r24, 0x23	; 35
    5a6e:	97 e2       	ldi	r25, 0x27	; 39
    5a70:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5a74:	89 2b       	or	r24, r25
    5a76:	a1 f4       	brne	.+40     	; 0x5aa0 <__stack+0x1aa1>
    {
        RefDir3=1;
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	80 93 91 27 	sts	0x2791, r24	; 0x802791 <RefDir3>
        sprintf(BufferSend,"!2003\r\n"); 
    5a7e:	98 e0       	ldi	r25, 0x08	; 8
    5a80:	e3 ef       	ldi	r30, 0xF3	; 243
    5a82:	f4 e2       	ldi	r31, 0x24	; 36
    5a84:	af e6       	ldi	r26, 0x6F	; 111
    5a86:	b9 e2       	ldi	r27, 0x29	; 41
    5a88:	01 90       	ld	r0, Z+
    5a8a:	0d 92       	st	X+, r0
    5a8c:	9a 95       	dec	r25
    5a8e:	e1 f7       	brne	.-8      	; 0x5a88 <__stack+0x1a89>
        Responsing=1; 
    5a90:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady; 
    5a94:	e0 ea       	ldi	r30, 0xA0	; 160
    5a96:	f6 e0       	ldi	r31, 0x06	; 6
    5a98:	84 81       	ldd	r24, Z+4	; 0x04
    5a9a:	81 60       	ori	r24, 0x01	; 1
    5a9c:	84 83       	std	Z+4, r24	; 0x04
    5a9e:	a7 c6       	rjmp	.+3406   	; 0x67ee <__stack+0x27ef>
    }   
    else if(strncmp(cmdTemp,"#2110",5)==0)  
    5aa0:	45 e0       	ldi	r20, 0x05	; 5
    5aa2:	50 e0       	ldi	r21, 0x00	; 0
    5aa4:	6b ef       	ldi	r22, 0xFB	; 251
    5aa6:	74 e2       	ldi	r23, 0x24	; 36
    5aa8:	83 e2       	ldi	r24, 0x23	; 35
    5aaa:	97 e2       	ldi	r25, 0x27	; 39
    5aac:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5ab0:	89 2b       	or	r24, r25
    5ab2:	a1 f4       	brne	.+40     	; 0x5adc <__stack+0x1add>
    {
        //Disable Hardware Positive Limit 1 
        PLimitIsActiveA1=0;
    5ab4:	10 92 06 27 	sts	0x2706, r1	; 0x802706 <PLimitIsActiveA1>
        sprintf(BufferSend,"!2110\r\n"); 
    5ab8:	88 e0       	ldi	r24, 0x08	; 8
    5aba:	e1 e0       	ldi	r30, 0x01	; 1
    5abc:	f5 e2       	ldi	r31, 0x25	; 37
    5abe:	af e6       	ldi	r26, 0x6F	; 111
    5ac0:	b9 e2       	ldi	r27, 0x29	; 41
    5ac2:	01 90       	ld	r0, Z+
    5ac4:	0d 92       	st	X+, r0
    5ac6:	8a 95       	dec	r24
    5ac8:	e1 f7       	brne	.-8      	; 0x5ac2 <__stack+0x1ac3>
        Responsing=1; 
    5aca:	81 e0       	ldi	r24, 0x01	; 1
    5acc:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5ad0:	e0 ea       	ldi	r30, 0xA0	; 160
    5ad2:	f6 e0       	ldi	r31, 0x06	; 6
    5ad4:	84 81       	ldd	r24, Z+4	; 0x04
    5ad6:	81 60       	ori	r24, 0x01	; 1
    5ad8:	84 83       	std	Z+4, r24	; 0x04
    5ada:	89 c6       	rjmp	.+3346   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2111",5)==0)
    5adc:	45 e0       	ldi	r20, 0x05	; 5
    5ade:	50 e0       	ldi	r21, 0x00	; 0
    5ae0:	69 e0       	ldi	r22, 0x09	; 9
    5ae2:	75 e2       	ldi	r23, 0x25	; 37
    5ae4:	83 e2       	ldi	r24, 0x23	; 35
    5ae6:	97 e2       	ldi	r25, 0x27	; 39
    5ae8:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5aec:	89 2b       	or	r24, r25
    5aee:	a1 f4       	brne	.+40     	; 0x5b18 <__stack+0x1b19>
    {     
        //Enable Hardware Positive Limit 1
        PLimitIsActiveA1=1; 
    5af0:	81 e0       	ldi	r24, 0x01	; 1
    5af2:	80 93 06 27 	sts	0x2706, r24	; 0x802706 <PLimitIsActiveA1>
        sprintf(BufferSend,"!2111\r\n"); 
    5af6:	98 e0       	ldi	r25, 0x08	; 8
    5af8:	ef e0       	ldi	r30, 0x0F	; 15
    5afa:	f5 e2       	ldi	r31, 0x25	; 37
    5afc:	af e6       	ldi	r26, 0x6F	; 111
    5afe:	b9 e2       	ldi	r27, 0x29	; 41
    5b00:	01 90       	ld	r0, Z+
    5b02:	0d 92       	st	X+, r0
    5b04:	9a 95       	dec	r25
    5b06:	e1 f7       	brne	.-8      	; 0x5b00 <__stack+0x1b01>
        Responsing=1; 
    5b08:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5b0c:	e0 ea       	ldi	r30, 0xA0	; 160
    5b0e:	f6 e0       	ldi	r31, 0x06	; 6
    5b10:	84 81       	ldd	r24, Z+4	; 0x04
    5b12:	81 60       	ori	r24, 0x01	; 1
    5b14:	84 83       	std	Z+4, r24	; 0x04
    5b16:	6b c6       	rjmp	.+3286   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2120",5)==0)
    5b18:	45 e0       	ldi	r20, 0x05	; 5
    5b1a:	50 e0       	ldi	r21, 0x00	; 0
    5b1c:	67 e1       	ldi	r22, 0x17	; 23
    5b1e:	75 e2       	ldi	r23, 0x25	; 37
    5b20:	83 e2       	ldi	r24, 0x23	; 35
    5b22:	97 e2       	ldi	r25, 0x27	; 39
    5b24:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5b28:	89 2b       	or	r24, r25
    5b2a:	a1 f4       	brne	.+40     	; 0x5b54 <__stack+0x1b55>
    {
        //Disable Hardware Positive Limit 2
        PLimitIsActiveA2=0;
    5b2c:	10 92 04 27 	sts	0x2704, r1	; 0x802704 <PLimitIsActiveA2>
        sprintf(BufferSend,"!2120\r\n"); 
    5b30:	88 e0       	ldi	r24, 0x08	; 8
    5b32:	ed e1       	ldi	r30, 0x1D	; 29
    5b34:	f5 e2       	ldi	r31, 0x25	; 37
    5b36:	af e6       	ldi	r26, 0x6F	; 111
    5b38:	b9 e2       	ldi	r27, 0x29	; 41
    5b3a:	01 90       	ld	r0, Z+
    5b3c:	0d 92       	st	X+, r0
    5b3e:	8a 95       	dec	r24
    5b40:	e1 f7       	brne	.-8      	; 0x5b3a <__stack+0x1b3b>
        Responsing=1; 
    5b42:	81 e0       	ldi	r24, 0x01	; 1
    5b44:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5b48:	e0 ea       	ldi	r30, 0xA0	; 160
    5b4a:	f6 e0       	ldi	r31, 0x06	; 6
    5b4c:	84 81       	ldd	r24, Z+4	; 0x04
    5b4e:	81 60       	ori	r24, 0x01	; 1
    5b50:	84 83       	std	Z+4, r24	; 0x04
    5b52:	4d c6       	rjmp	.+3226   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2121",5)==0)
    5b54:	45 e0       	ldi	r20, 0x05	; 5
    5b56:	50 e0       	ldi	r21, 0x00	; 0
    5b58:	65 e2       	ldi	r22, 0x25	; 37
    5b5a:	75 e2       	ldi	r23, 0x25	; 37
    5b5c:	83 e2       	ldi	r24, 0x23	; 35
    5b5e:	97 e2       	ldi	r25, 0x27	; 39
    5b60:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5b64:	89 2b       	or	r24, r25
    5b66:	a1 f4       	brne	.+40     	; 0x5b90 <__stack+0x1b91>
    {
        //Enable Hardware Positive Limit 2
        PLimitIsActiveA2=1;
    5b68:	81 e0       	ldi	r24, 0x01	; 1
    5b6a:	80 93 04 27 	sts	0x2704, r24	; 0x802704 <PLimitIsActiveA2>
        sprintf(BufferSend,"!2121\r\n"); 
    5b6e:	98 e0       	ldi	r25, 0x08	; 8
    5b70:	eb e2       	ldi	r30, 0x2B	; 43
    5b72:	f5 e2       	ldi	r31, 0x25	; 37
    5b74:	af e6       	ldi	r26, 0x6F	; 111
    5b76:	b9 e2       	ldi	r27, 0x29	; 41
    5b78:	01 90       	ld	r0, Z+
    5b7a:	0d 92       	st	X+, r0
    5b7c:	9a 95       	dec	r25
    5b7e:	e1 f7       	brne	.-8      	; 0x5b78 <__stack+0x1b79>
        Responsing=1; 
    5b80:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5b84:	e0 ea       	ldi	r30, 0xA0	; 160
    5b86:	f6 e0       	ldi	r31, 0x06	; 6
    5b88:	84 81       	ldd	r24, Z+4	; 0x04
    5b8a:	81 60       	ori	r24, 0x01	; 1
    5b8c:	84 83       	std	Z+4, r24	; 0x04
    5b8e:	2f c6       	rjmp	.+3166   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2130",5)==0)
    5b90:	45 e0       	ldi	r20, 0x05	; 5
    5b92:	50 e0       	ldi	r21, 0x00	; 0
    5b94:	63 e3       	ldi	r22, 0x33	; 51
    5b96:	75 e2       	ldi	r23, 0x25	; 37
    5b98:	83 e2       	ldi	r24, 0x23	; 35
    5b9a:	97 e2       	ldi	r25, 0x27	; 39
    5b9c:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5ba0:	89 2b       	or	r24, r25
    5ba2:	a1 f4       	brne	.+40     	; 0x5bcc <__stack+0x1bcd>
    { 
        //Enable Hardware Positive Limit 3
        PLimitIsActiveA3=0;
    5ba4:	10 92 02 27 	sts	0x2702, r1	; 0x802702 <PLimitIsActiveA3>
        sprintf(BufferSend,"!2130\r\n"); 
    5ba8:	88 e0       	ldi	r24, 0x08	; 8
    5baa:	e9 e3       	ldi	r30, 0x39	; 57
    5bac:	f5 e2       	ldi	r31, 0x25	; 37
    5bae:	af e6       	ldi	r26, 0x6F	; 111
    5bb0:	b9 e2       	ldi	r27, 0x29	; 41
    5bb2:	01 90       	ld	r0, Z+
    5bb4:	0d 92       	st	X+, r0
    5bb6:	8a 95       	dec	r24
    5bb8:	e1 f7       	brne	.-8      	; 0x5bb2 <__stack+0x1bb3>
        Responsing=1; 
    5bba:	81 e0       	ldi	r24, 0x01	; 1
    5bbc:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5bc0:	e0 ea       	ldi	r30, 0xA0	; 160
    5bc2:	f6 e0       	ldi	r31, 0x06	; 6
    5bc4:	84 81       	ldd	r24, Z+4	; 0x04
    5bc6:	81 60       	ori	r24, 0x01	; 1
    5bc8:	84 83       	std	Z+4, r24	; 0x04
    5bca:	11 c6       	rjmp	.+3106   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2131",5)==0)
    5bcc:	45 e0       	ldi	r20, 0x05	; 5
    5bce:	50 e0       	ldi	r21, 0x00	; 0
    5bd0:	61 e4       	ldi	r22, 0x41	; 65
    5bd2:	75 e2       	ldi	r23, 0x25	; 37
    5bd4:	83 e2       	ldi	r24, 0x23	; 35
    5bd6:	97 e2       	ldi	r25, 0x27	; 39
    5bd8:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5bdc:	89 2b       	or	r24, r25
    5bde:	a1 f4       	brne	.+40     	; 0x5c08 <__stack+0x1c09>
    { 
        //Enable Hardware Positive Limit 3 
        PLimitIsActiveA3=1;
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	80 93 02 27 	sts	0x2702, r24	; 0x802702 <PLimitIsActiveA3>
        sprintf(BufferSend,"!2131\r\n"); 
    5be6:	98 e0       	ldi	r25, 0x08	; 8
    5be8:	e7 e4       	ldi	r30, 0x47	; 71
    5bea:	f5 e2       	ldi	r31, 0x25	; 37
    5bec:	af e6       	ldi	r26, 0x6F	; 111
    5bee:	b9 e2       	ldi	r27, 0x29	; 41
    5bf0:	01 90       	ld	r0, Z+
    5bf2:	0d 92       	st	X+, r0
    5bf4:	9a 95       	dec	r25
    5bf6:	e1 f7       	brne	.-8      	; 0x5bf0 <__stack+0x1bf1>
        Responsing=1; 
    5bf8:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5bfc:	e0 ea       	ldi	r30, 0xA0	; 160
    5bfe:	f6 e0       	ldi	r31, 0x06	; 6
    5c00:	84 81       	ldd	r24, Z+4	; 0x04
    5c02:	81 60       	ori	r24, 0x01	; 1
    5c04:	84 83       	std	Z+4, r24	; 0x04
    5c06:	f3 c5       	rjmp	.+3046   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2210",5)==0)  
    5c08:	45 e0       	ldi	r20, 0x05	; 5
    5c0a:	50 e0       	ldi	r21, 0x00	; 0
    5c0c:	6f e4       	ldi	r22, 0x4F	; 79
    5c0e:	75 e2       	ldi	r23, 0x25	; 37
    5c10:	83 e2       	ldi	r24, 0x23	; 35
    5c12:	97 e2       	ldi	r25, 0x27	; 39
    5c14:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5c18:	89 2b       	or	r24, r25
    5c1a:	a1 f4       	brne	.+40     	; 0x5c44 <__stack+0x1c45>
    {  
        NLimitIsActiveA1=0;
    5c1c:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <NLimitIsActiveA1>
        sprintf(BufferSend,"!2210\r\n"); 
    5c20:	88 e0       	ldi	r24, 0x08	; 8
    5c22:	e5 e5       	ldi	r30, 0x55	; 85
    5c24:	f5 e2       	ldi	r31, 0x25	; 37
    5c26:	af e6       	ldi	r26, 0x6F	; 111
    5c28:	b9 e2       	ldi	r27, 0x29	; 41
    5c2a:	01 90       	ld	r0, Z+
    5c2c:	0d 92       	st	X+, r0
    5c2e:	8a 95       	dec	r24
    5c30:	e1 f7       	brne	.-8      	; 0x5c2a <__stack+0x1c2b>
        Responsing=1; 
    5c32:	81 e0       	ldi	r24, 0x01	; 1
    5c34:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5c38:	e0 ea       	ldi	r30, 0xA0	; 160
    5c3a:	f6 e0       	ldi	r31, 0x06	; 6
    5c3c:	84 81       	ldd	r24, Z+4	; 0x04
    5c3e:	81 60       	ori	r24, 0x01	; 1
    5c40:	84 83       	std	Z+4, r24	; 0x04
    5c42:	d5 c5       	rjmp	.+2986   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2211",5)==0)
    5c44:	45 e0       	ldi	r20, 0x05	; 5
    5c46:	50 e0       	ldi	r21, 0x00	; 0
    5c48:	6d e5       	ldi	r22, 0x5D	; 93
    5c4a:	75 e2       	ldi	r23, 0x25	; 37
    5c4c:	83 e2       	ldi	r24, 0x23	; 35
    5c4e:	97 e2       	ldi	r25, 0x27	; 39
    5c50:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5c54:	89 2b       	or	r24, r25
    5c56:	a1 f4       	brne	.+40     	; 0x5c80 <__stack+0x1c81>
    { 
        NLimitIsActiveA1=1; 
    5c58:	81 e0       	ldi	r24, 0x01	; 1
    5c5a:	80 93 05 27 	sts	0x2705, r24	; 0x802705 <NLimitIsActiveA1>
        sprintf(BufferSend,"!2211\r\n"); 
    5c5e:	98 e0       	ldi	r25, 0x08	; 8
    5c60:	e3 e6       	ldi	r30, 0x63	; 99
    5c62:	f5 e2       	ldi	r31, 0x25	; 37
    5c64:	af e6       	ldi	r26, 0x6F	; 111
    5c66:	b9 e2       	ldi	r27, 0x29	; 41
    5c68:	01 90       	ld	r0, Z+
    5c6a:	0d 92       	st	X+, r0
    5c6c:	9a 95       	dec	r25
    5c6e:	e1 f7       	brne	.-8      	; 0x5c68 <__stack+0x1c69>
        Responsing=1; 
    5c70:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5c74:	e0 ea       	ldi	r30, 0xA0	; 160
    5c76:	f6 e0       	ldi	r31, 0x06	; 6
    5c78:	84 81       	ldd	r24, Z+4	; 0x04
    5c7a:	81 60       	ori	r24, 0x01	; 1
    5c7c:	84 83       	std	Z+4, r24	; 0x04
    5c7e:	b7 c5       	rjmp	.+2926   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2220",5)==0)
    5c80:	45 e0       	ldi	r20, 0x05	; 5
    5c82:	50 e0       	ldi	r21, 0x00	; 0
    5c84:	6b e6       	ldi	r22, 0x6B	; 107
    5c86:	75 e2       	ldi	r23, 0x25	; 37
    5c88:	83 e2       	ldi	r24, 0x23	; 35
    5c8a:	97 e2       	ldi	r25, 0x27	; 39
    5c8c:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5c90:	89 2b       	or	r24, r25
    5c92:	a1 f4       	brne	.+40     	; 0x5cbc <__stack+0x1cbd>
    {
        NLimitIsActiveA2=0;
    5c94:	10 92 03 27 	sts	0x2703, r1	; 0x802703 <NLimitIsActiveA2>
        sprintf(BufferSend,"!2220\r\n"); 
    5c98:	88 e0       	ldi	r24, 0x08	; 8
    5c9a:	e1 e7       	ldi	r30, 0x71	; 113
    5c9c:	f5 e2       	ldi	r31, 0x25	; 37
    5c9e:	af e6       	ldi	r26, 0x6F	; 111
    5ca0:	b9 e2       	ldi	r27, 0x29	; 41
    5ca2:	01 90       	ld	r0, Z+
    5ca4:	0d 92       	st	X+, r0
    5ca6:	8a 95       	dec	r24
    5ca8:	e1 f7       	brne	.-8      	; 0x5ca2 <__stack+0x1ca3>
        Responsing=1; 
    5caa:	81 e0       	ldi	r24, 0x01	; 1
    5cac:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5cb0:	e0 ea       	ldi	r30, 0xA0	; 160
    5cb2:	f6 e0       	ldi	r31, 0x06	; 6
    5cb4:	84 81       	ldd	r24, Z+4	; 0x04
    5cb6:	81 60       	ori	r24, 0x01	; 1
    5cb8:	84 83       	std	Z+4, r24	; 0x04
    5cba:	99 c5       	rjmp	.+2866   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2221",5)==0)
    5cbc:	45 e0       	ldi	r20, 0x05	; 5
    5cbe:	50 e0       	ldi	r21, 0x00	; 0
    5cc0:	69 e7       	ldi	r22, 0x79	; 121
    5cc2:	75 e2       	ldi	r23, 0x25	; 37
    5cc4:	83 e2       	ldi	r24, 0x23	; 35
    5cc6:	97 e2       	ldi	r25, 0x27	; 39
    5cc8:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5ccc:	89 2b       	or	r24, r25
    5cce:	a1 f4       	brne	.+40     	; 0x5cf8 <__stack+0x1cf9>
    {
        NLimitIsActiveA2=1;
    5cd0:	81 e0       	ldi	r24, 0x01	; 1
    5cd2:	80 93 03 27 	sts	0x2703, r24	; 0x802703 <NLimitIsActiveA2>
        sprintf(BufferSend,"!2221\r\n"); 
    5cd6:	98 e0       	ldi	r25, 0x08	; 8
    5cd8:	ef e7       	ldi	r30, 0x7F	; 127
    5cda:	f5 e2       	ldi	r31, 0x25	; 37
    5cdc:	af e6       	ldi	r26, 0x6F	; 111
    5cde:	b9 e2       	ldi	r27, 0x29	; 41
    5ce0:	01 90       	ld	r0, Z+
    5ce2:	0d 92       	st	X+, r0
    5ce4:	9a 95       	dec	r25
    5ce6:	e1 f7       	brne	.-8      	; 0x5ce0 <__stack+0x1ce1>
        Responsing=1; 
    5ce8:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5cec:	e0 ea       	ldi	r30, 0xA0	; 160
    5cee:	f6 e0       	ldi	r31, 0x06	; 6
    5cf0:	84 81       	ldd	r24, Z+4	; 0x04
    5cf2:	81 60       	ori	r24, 0x01	; 1
    5cf4:	84 83       	std	Z+4, r24	; 0x04
    5cf6:	7b c5       	rjmp	.+2806   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2230",5)==0)
    5cf8:	45 e0       	ldi	r20, 0x05	; 5
    5cfa:	50 e0       	ldi	r21, 0x00	; 0
    5cfc:	67 e8       	ldi	r22, 0x87	; 135
    5cfe:	75 e2       	ldi	r23, 0x25	; 37
    5d00:	83 e2       	ldi	r24, 0x23	; 35
    5d02:	97 e2       	ldi	r25, 0x27	; 39
    5d04:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5d08:	89 2b       	or	r24, r25
    5d0a:	a1 f4       	brne	.+40     	; 0x5d34 <__stack+0x1d35>
    { 
        NLimitIsActiveA3=0;
    5d0c:	10 92 01 27 	sts	0x2701, r1	; 0x802701 <NLimitIsActiveA3>
        sprintf(BufferSend,"!2230\r\n"); 
    5d10:	88 e0       	ldi	r24, 0x08	; 8
    5d12:	ed e8       	ldi	r30, 0x8D	; 141
    5d14:	f5 e2       	ldi	r31, 0x25	; 37
    5d16:	af e6       	ldi	r26, 0x6F	; 111
    5d18:	b9 e2       	ldi	r27, 0x29	; 41
    5d1a:	01 90       	ld	r0, Z+
    5d1c:	0d 92       	st	X+, r0
    5d1e:	8a 95       	dec	r24
    5d20:	e1 f7       	brne	.-8      	; 0x5d1a <__stack+0x1d1b>
        Responsing=1; 
    5d22:	81 e0       	ldi	r24, 0x01	; 1
    5d24:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5d28:	e0 ea       	ldi	r30, 0xA0	; 160
    5d2a:	f6 e0       	ldi	r31, 0x06	; 6
    5d2c:	84 81       	ldd	r24, Z+4	; 0x04
    5d2e:	81 60       	ori	r24, 0x01	; 1
    5d30:	84 83       	std	Z+4, r24	; 0x04
    5d32:	5d c5       	rjmp	.+2746   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2231",5)==0)
    5d34:	45 e0       	ldi	r20, 0x05	; 5
    5d36:	50 e0       	ldi	r21, 0x00	; 0
    5d38:	65 e9       	ldi	r22, 0x95	; 149
    5d3a:	75 e2       	ldi	r23, 0x25	; 37
    5d3c:	83 e2       	ldi	r24, 0x23	; 35
    5d3e:	97 e2       	ldi	r25, 0x27	; 39
    5d40:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5d44:	89 2b       	or	r24, r25
    5d46:	a1 f4       	brne	.+40     	; 0x5d70 <__stack+0x1d71>
    {  
        NLimitIsActiveA3=1;
    5d48:	81 e0       	ldi	r24, 0x01	; 1
    5d4a:	80 93 01 27 	sts	0x2701, r24	; 0x802701 <NLimitIsActiveA3>
        sprintf(BufferSend,"!2231\r\n"); 
    5d4e:	98 e0       	ldi	r25, 0x08	; 8
    5d50:	eb e9       	ldi	r30, 0x9B	; 155
    5d52:	f5 e2       	ldi	r31, 0x25	; 37
    5d54:	af e6       	ldi	r26, 0x6F	; 111
    5d56:	b9 e2       	ldi	r27, 0x29	; 41
    5d58:	01 90       	ld	r0, Z+
    5d5a:	0d 92       	st	X+, r0
    5d5c:	9a 95       	dec	r25
    5d5e:	e1 f7       	brne	.-8      	; 0x5d58 <__stack+0x1d59>
        Responsing=1; 
    5d60:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
        SetDataReady;
    5d64:	e0 ea       	ldi	r30, 0xA0	; 160
    5d66:	f6 e0       	ldi	r31, 0x06	; 6
    5d68:	84 81       	ldd	r24, Z+4	; 0x04
    5d6a:	81 60       	ori	r24, 0x01	; 1
    5d6c:	84 83       	std	Z+4, r24	; 0x04
    5d6e:	3f c5       	rjmp	.+2686   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2800",5)==0)
    5d70:	45 e0       	ldi	r20, 0x05	; 5
    5d72:	50 e0       	ldi	r21, 0x00	; 0
    5d74:	63 ea       	ldi	r22, 0xA3	; 163
    5d76:	75 e2       	ldi	r23, 0x25	; 37
    5d78:	83 e2       	ldi	r24, 0x23	; 35
    5d7a:	97 e2       	ldi	r25, 0x27	; 39
    5d7c:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5d80:	89 2b       	or	r24, r25
    5d82:	61 f4       	brne	.+24     	; 0x5d9c <__stack+0x1d9d>
    { 
      EchoON=1; 
    5d84:	81 e0       	ldi	r24, 0x01	; 1
    5d86:	80 93 0d 27 	sts	0x270D, r24	; 0x80270d <EchoON>
      if(EchoON) printf("!2800\n\r");
    5d8a:	89 ea       	ldi	r24, 0xA9	; 169
    5d8c:	95 e2       	ldi	r25, 0x25	; 37
    5d8e:	9f 93       	push	r25
    5d90:	8f 93       	push	r24
    5d92:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
    5d96:	0f 90       	pop	r0
    5d98:	0f 90       	pop	r0
    5d9a:	29 c5       	rjmp	.+2642   	; 0x67ee <__stack+0x27ef>
    }
    else if(strncmp(cmdTemp,"#2900",5)==0)
    5d9c:	45 e0       	ldi	r20, 0x05	; 5
    5d9e:	50 e0       	ldi	r21, 0x00	; 0
    5da0:	61 eb       	ldi	r22, 0xB1	; 177
    5da2:	75 e2       	ldi	r23, 0x25	; 37
    5da4:	83 e2       	ldi	r24, 0x23	; 35
    5da6:	97 e2       	ldi	r25, 0x27	; 39
    5da8:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5dac:	89 2b       	or	r24, r25
    5dae:	19 f4       	brne	.+6      	; 0x5db6 <__stack+0x1db7>
    { 
      EchoON=0; 
    5db0:	10 92 0d 27 	sts	0x270D, r1	; 0x80270d <EchoON>
    5db4:	1c c5       	rjmp	.+2616   	; 0x67ee <__stack+0x27ef>
      if(EchoON) printf("!2900\n\r");
    }
    else if(strncmp(cmdTemp,"#3000",5)==0)
    5db6:	45 e0       	ldi	r20, 0x05	; 5
    5db8:	50 e0       	ldi	r21, 0x00	; 0
    5dba:	67 eb       	ldi	r22, 0xB7	; 183
    5dbc:	75 e2       	ldi	r23, 0x25	; 37
    5dbe:	83 e2       	ldi	r24, 0x23	; 35
    5dc0:	97 e2       	ldi	r25, 0x27	; 39
    5dc2:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    5dc6:	89 2b       	or	r24, r25
    5dc8:	09 f0       	breq	.+2      	; 0x5dcc <__stack+0x1dcd>
    5dca:	9d c3       	rjmp	.+1850   	; 0x6506 <__stack+0x2507>
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5dcc:	20 91 5c 27 	lds	r18, 0x275C	; 0x80275c <AxisIsMoving1>
    5dd0:	21 11       	cpse	r18, r1
    5dd2:	0b c0       	rjmp	.+22     	; 0x5dea <__stack+0x1deb>
    5dd4:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    5dd8:	81 11       	cpse	r24, r1
    5dda:	09 c0       	rjmp	.+18     	; 0x5dee <__stack+0x1def>
    5ddc:	91 e0       	ldi	r25, 0x01	; 1
    5dde:	80 91 5a 27 	lds	r24, 0x275A	; 0x80275a <AxisIsMoving3>
    5de2:	81 11       	cpse	r24, r1
    5de4:	05 c0       	rjmp	.+10     	; 0x5df0 <__stack+0x1df1>
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	03 c0       	rjmp	.+6      	; 0x5df0 <__stack+0x1df1>
    5dea:	91 e0       	ldi	r25, 0x01	; 1
    5dec:	01 c0       	rjmp	.+2      	; 0x5df0 <__stack+0x1df1>
    5dee:	91 e0       	ldi	r25, 0x01	; 1
    5df0:	89 2f       	mov	r24, r25
    5df2:	90 93 0c 27 	sts	0x270C, r25	; 0x80270c <AxisMoving>
         
    if (!ProgramRun)
    5df6:	90 91 d0 27 	lds	r25, 0x27D0	; 0x8027d0 <ProgramRun>
    5dfa:	91 11       	cpse	r25, r1
    5dfc:	f8 c4       	rjmp	.+2544   	; 0x67ee <__stack+0x27ef>
     {
     while (AxisMoving == 1) 
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5dfe:	30 91 5b 27 	lds	r19, 0x275B	; 0x80275b <AxisIsMoving2>
    5e02:	91 e0       	ldi	r25, 0x01	; 1
    5e04:	40 91 5a 27 	lds	r20, 0x275A	; 0x80275a <AxisIsMoving3>
    5e08:	41 11       	cpse	r20, r1
    5e0a:	01 c0       	rjmp	.+2      	; 0x5e0e <__stack+0x1e0f>
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    5e0e:	81 30       	cpi	r24, 0x01	; 1
    5e10:	51 f4       	brne	.+20     	; 0x5e26 <__stack+0x1e27>
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5e12:	21 11       	cpse	r18, r1
    5e14:	04 c0       	rjmp	.+8      	; 0x5e1e <__stack+0x1e1f>
    5e16:	31 11       	cpse	r19, r1
    5e18:	04 c0       	rjmp	.+8      	; 0x5e22 <__stack+0x1e23>
    5e1a:	89 2f       	mov	r24, r25
    5e1c:	f8 cf       	rjmp	.-16     	; 0x5e0e <__stack+0x1e0f>
    5e1e:	81 e0       	ldi	r24, 0x01	; 1
    5e20:	f6 cf       	rjmp	.-20     	; 0x5e0e <__stack+0x1e0f>
    5e22:	81 e0       	ldi	r24, 0x01	; 1
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    5e24:	f4 cf       	rjmp	.-24     	; 0x5e0e <__stack+0x1e0f>
    5e26:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
     }      
        if(SetJog1<AxisPosition1) CLR_DIR1;
    5e2a:	c0 90 cc 27 	lds	r12, 0x27CC	; 0x8027cc <SetJog1>
    5e2e:	d0 90 cd 27 	lds	r13, 0x27CD	; 0x8027cd <SetJog1+0x1>
    5e32:	e0 90 ce 27 	lds	r14, 0x27CE	; 0x8027ce <SetJog1+0x2>
    5e36:	f0 90 cf 27 	lds	r15, 0x27CF	; 0x8027cf <SetJog1+0x3>
    5e3a:	cd 82       	std	Y+5, r12	; 0x05
    5e3c:	de 82       	std	Y+6, r13	; 0x06
    5e3e:	ef 82       	std	Y+7, r14	; 0x07
    5e40:	f8 86       	std	Y+8, r15	; 0x08
    5e42:	e0 90 c0 27 	lds	r14, 0x27C0	; 0x8027c0 <AxisPosition1>
    5e46:	f0 90 c1 27 	lds	r15, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    5e4a:	00 91 c2 27 	lds	r16, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    5e4e:	10 91 c3 27 	lds	r17, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    5e52:	eb 8e       	std	Y+27, r14	; 0x1b
    5e54:	fc 8e       	std	Y+28, r15	; 0x1c
    5e56:	0d 8f       	std	Y+29, r16	; 0x1d
    5e58:	1e 8f       	std	Y+30, r17	; 0x1e
    5e5a:	8d 80       	ldd	r8, Y+5	; 0x05
    5e5c:	9e 80       	ldd	r9, Y+6	; 0x06
    5e5e:	af 80       	ldd	r10, Y+7	; 0x07
    5e60:	b8 84       	ldd	r11, Y+8	; 0x08
    5e62:	8e 14       	cp	r8, r14
    5e64:	9f 04       	cpc	r9, r15
    5e66:	a0 06       	cpc	r10, r16
    5e68:	b1 06       	cpc	r11, r17
    5e6a:	2c f4       	brge	.+10     	; 0x5e76 <__stack+0x1e77>
    5e6c:	e0 e2       	ldi	r30, 0x20	; 32
    5e6e:	f7 e0       	ldi	r31, 0x07	; 7
    5e70:	84 81       	ldd	r24, Z+4	; 0x04
    5e72:	8f 7e       	andi	r24, 0xEF	; 239
    5e74:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog1>AxisPosition1) SET_DIR1; 
    5e76:	ad 80       	ldd	r10, Y+5	; 0x05
    5e78:	be 80       	ldd	r11, Y+6	; 0x06
    5e7a:	cf 80       	ldd	r12, Y+7	; 0x07
    5e7c:	d8 84       	ldd	r13, Y+8	; 0x08
    5e7e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    5e80:	fc 8c       	ldd	r15, Y+28	; 0x1c
    5e82:	0d 8d       	ldd	r16, Y+29	; 0x1d
    5e84:	1e 8d       	ldd	r17, Y+30	; 0x1e
    5e86:	ea 14       	cp	r14, r10
    5e88:	fb 04       	cpc	r15, r11
    5e8a:	0c 05       	cpc	r16, r12
    5e8c:	1d 05       	cpc	r17, r13
    5e8e:	2c f4       	brge	.+10     	; 0x5e9a <__stack+0x1e9b>
    5e90:	e0 e2       	ldi	r30, 0x20	; 32
    5e92:	f7 e0       	ldi	r31, 0x07	; 7
    5e94:	84 81       	ldd	r24, Z+4	; 0x04
    5e96:	80 61       	ori	r24, 0x10	; 16
    5e98:	84 83       	std	Z+4, r24	; 0x04
                
        if(SetJog2<AxisPosition2) CLR_DIR2;
    5e9a:	80 90 c8 27 	lds	r8, 0x27C8	; 0x8027c8 <SetJog2>
    5e9e:	90 90 c9 27 	lds	r9, 0x27C9	; 0x8027c9 <SetJog2+0x1>
    5ea2:	a0 90 ca 27 	lds	r10, 0x27CA	; 0x8027ca <SetJog2+0x2>
    5ea6:	b0 90 cb 27 	lds	r11, 0x27CB	; 0x8027cb <SetJog2+0x3>
    5eaa:	89 86       	std	Y+9, r8	; 0x09
    5eac:	9a 86       	std	Y+10, r9	; 0x0a
    5eae:	ab 86       	std	Y+11, r10	; 0x0b
    5eb0:	bc 86       	std	Y+12, r11	; 0x0c
    5eb2:	a0 90 bc 27 	lds	r10, 0x27BC	; 0x8027bc <AxisPosition2>
    5eb6:	b0 90 bd 27 	lds	r11, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    5eba:	c0 90 be 27 	lds	r12, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    5ebe:	d0 90 bf 27 	lds	r13, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    5ec2:	a9 8a       	std	Y+17, r10	; 0x11
    5ec4:	ba 8a       	std	Y+18, r11	; 0x12
    5ec6:	cb 8a       	std	Y+19, r12	; 0x13
    5ec8:	dc 8a       	std	Y+20, r13	; 0x14
    5eca:	e9 84       	ldd	r14, Y+9	; 0x09
    5ecc:	fa 84       	ldd	r15, Y+10	; 0x0a
    5ece:	0b 85       	ldd	r16, Y+11	; 0x0b
    5ed0:	1c 85       	ldd	r17, Y+12	; 0x0c
    5ed2:	ea 14       	cp	r14, r10
    5ed4:	fb 04       	cpc	r15, r11
    5ed6:	0c 05       	cpc	r16, r12
    5ed8:	1d 05       	cpc	r17, r13
    5eda:	2c f4       	brge	.+10     	; 0x5ee6 <__stack+0x1ee7>
    5edc:	e0 e2       	ldi	r30, 0x20	; 32
    5ede:	f7 e0       	ldi	r31, 0x07	; 7
    5ee0:	84 81       	ldd	r24, Z+4	; 0x04
    5ee2:	8b 7f       	andi	r24, 0xFB	; 251
    5ee4:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog2>AxisPosition2) SET_DIR2;  
    5ee6:	89 84       	ldd	r8, Y+9	; 0x09
    5ee8:	9a 84       	ldd	r9, Y+10	; 0x0a
    5eea:	ab 84       	ldd	r10, Y+11	; 0x0b
    5eec:	bc 84       	ldd	r11, Y+12	; 0x0c
    5eee:	c9 88       	ldd	r12, Y+17	; 0x11
    5ef0:	da 88       	ldd	r13, Y+18	; 0x12
    5ef2:	eb 88       	ldd	r14, Y+19	; 0x13
    5ef4:	fc 88       	ldd	r15, Y+20	; 0x14
    5ef6:	c8 14       	cp	r12, r8
    5ef8:	d9 04       	cpc	r13, r9
    5efa:	ea 04       	cpc	r14, r10
    5efc:	fb 04       	cpc	r15, r11
    5efe:	2c f4       	brge	.+10     	; 0x5f0a <__stack+0x1f0b>
    5f00:	e0 e2       	ldi	r30, 0x20	; 32
    5f02:	f7 e0       	ldi	r31, 0x07	; 7
    5f04:	84 81       	ldd	r24, Z+4	; 0x04
    5f06:	84 60       	ori	r24, 0x04	; 4
    5f08:	84 83       	std	Z+4, r24	; 0x04
            
        if(SetJog3<AxisPosition3) CLR_DIR3;
    5f0a:	e0 90 c4 27 	lds	r14, 0x27C4	; 0x8027c4 <SetJog3>
    5f0e:	f0 90 c5 27 	lds	r15, 0x27C5	; 0x8027c5 <SetJog3+0x1>
    5f12:	00 91 c6 27 	lds	r16, 0x27C6	; 0x8027c6 <SetJog3+0x2>
    5f16:	10 91 c7 27 	lds	r17, 0x27C7	; 0x8027c7 <SetJog3+0x3>
    5f1a:	ed 86       	std	Y+13, r14	; 0x0d
    5f1c:	fe 86       	std	Y+14, r15	; 0x0e
    5f1e:	0f 87       	std	Y+15, r16	; 0x0f
    5f20:	18 8b       	std	Y+16, r17	; 0x10
    5f22:	00 91 b8 27 	lds	r16, 0x27B8	; 0x8027b8 <AxisPosition3>
    5f26:	10 91 b9 27 	lds	r17, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    5f2a:	20 91 ba 27 	lds	r18, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    5f2e:	30 91 bb 27 	lds	r19, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    5f32:	09 83       	std	Y+1, r16	; 0x01
    5f34:	1a 83       	std	Y+2, r17	; 0x02
    5f36:	2b 83       	std	Y+3, r18	; 0x03
    5f38:	3c 83       	std	Y+4, r19	; 0x04
    5f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f3e:	af 85       	ldd	r26, Y+15	; 0x0f
    5f40:	b8 89       	ldd	r27, Y+16	; 0x10
    5f42:	80 17       	cp	r24, r16
    5f44:	91 07       	cpc	r25, r17
    5f46:	a2 07       	cpc	r26, r18
    5f48:	b3 07       	cpc	r27, r19
    5f4a:	2c f4       	brge	.+10     	; 0x5f56 <__stack+0x1f57>
    5f4c:	e0 e2       	ldi	r30, 0x20	; 32
    5f4e:	f7 e0       	ldi	r31, 0x07	; 7
    5f50:	84 81       	ldd	r24, Z+4	; 0x04
    5f52:	8e 7f       	andi	r24, 0xFE	; 254
    5f54:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog3>AxisPosition3) SET_DIR3;           
    5f56:	8d 84       	ldd	r8, Y+13	; 0x0d
    5f58:	9e 84       	ldd	r9, Y+14	; 0x0e
    5f5a:	af 84       	ldd	r10, Y+15	; 0x0f
    5f5c:	b8 88       	ldd	r11, Y+16	; 0x10
    5f5e:	c9 80       	ldd	r12, Y+1	; 0x01
    5f60:	da 80       	ldd	r13, Y+2	; 0x02
    5f62:	eb 80       	ldd	r14, Y+3	; 0x03
    5f64:	fc 80       	ldd	r15, Y+4	; 0x04
    5f66:	c8 14       	cp	r12, r8
    5f68:	d9 04       	cpc	r13, r9
    5f6a:	ea 04       	cpc	r14, r10
    5f6c:	fb 04       	cpc	r15, r11
    5f6e:	2c f4       	brge	.+10     	; 0x5f7a <__stack+0x1f7b>
    5f70:	e0 e2       	ldi	r30, 0x20	; 32
    5f72:	f7 e0       	ldi	r31, 0x07	; 7
    5f74:	84 81       	ldd	r24, Z+4	; 0x04
    5f76:	81 60       	ori	r24, 0x01	; 1
    5f78:	84 83       	std	Z+4, r24	; 0x04
              
        if(SetSpeed1 >= SetSpeed2 && SetSpeed1 >= SetSpeed3)
    5f7a:	60 91 8d 27 	lds	r22, 0x278D	; 0x80278d <SetSpeed1>
    5f7e:	70 91 8e 27 	lds	r23, 0x278E	; 0x80278e <SetSpeed1+0x1>
    5f82:	80 91 8f 27 	lds	r24, 0x278F	; 0x80278f <SetSpeed1+0x2>
    5f86:	90 91 90 27 	lds	r25, 0x2790	; 0x802790 <SetSpeed1+0x3>
    5f8a:	40 90 89 27 	lds	r4, 0x2789	; 0x802789 <SetSpeed2>
    5f8e:	50 90 8a 27 	lds	r5, 0x278A	; 0x80278a <SetSpeed2+0x1>
    5f92:	60 90 8b 27 	lds	r6, 0x278B	; 0x80278b <SetSpeed2+0x2>
    5f96:	70 90 8c 27 	lds	r7, 0x278C	; 0x80278c <SetSpeed2+0x3>
    5f9a:	64 15       	cp	r22, r4
    5f9c:	75 05       	cpc	r23, r5
    5f9e:	86 05       	cpc	r24, r6
    5fa0:	97 05       	cpc	r25, r7
    5fa2:	0c f4       	brge	.+2      	; 0x5fa6 <__stack+0x1fa7>
    5fa4:	5a c0       	rjmp	.+180    	; 0x605a <__stack+0x205b>
    5fa6:	80 90 85 27 	lds	r8, 0x2785	; 0x802785 <SetSpeed3>
    5faa:	90 90 86 27 	lds	r9, 0x2786	; 0x802786 <SetSpeed3+0x1>
    5fae:	a0 90 87 27 	lds	r10, 0x2787	; 0x802787 <SetSpeed3+0x2>
    5fb2:	b0 90 88 27 	lds	r11, 0x2788	; 0x802788 <SetSpeed3+0x3>
    5fb6:	68 15       	cp	r22, r8
    5fb8:	79 05       	cpc	r23, r9
    5fba:	8a 05       	cpc	r24, r10
    5fbc:	9b 05       	cpc	r25, r11
    5fbe:	0c f4       	brge	.+2      	; 0x5fc2 <__stack+0x1fc3>
    5fc0:	46 c0       	rjmp	.+140    	; 0x604e <__stack+0x204f>
          { 
            MaxSpeed = SetSpeed1; 
    5fc2:	60 93 81 27 	sts	0x2781, r22	; 0x802781 <MaxSpeed>
    5fc6:	70 93 82 27 	sts	0x2782, r23	; 0x802782 <MaxSpeed+0x1>
    5fca:	80 93 83 27 	sts	0x2783, r24	; 0x802783 <MaxSpeed+0x2>
    5fce:	90 93 84 27 	sts	0x2784, r25	; 0x802784 <MaxSpeed+0x3>
            IACC=ACC1; 
    5fd2:	80 90 7d 27 	lds	r8, 0x277D	; 0x80277d <ACC1>
    5fd6:	90 90 7e 27 	lds	r9, 0x277E	; 0x80277e <ACC1+0x1>
    5fda:	a0 90 7f 27 	lds	r10, 0x277F	; 0x80277f <ACC1+0x2>
    5fde:	b0 90 80 27 	lds	r11, 0x2780	; 0x802780 <ACC1+0x3>
    5fe2:	80 92 65 27 	sts	0x2765, r8	; 0x802765 <IACC>
    5fe6:	90 92 66 27 	sts	0x2766, r9	; 0x802766 <IACC+0x1>
    5fea:	a0 92 67 27 	sts	0x2767, r10	; 0x802767 <IACC+0x2>
    5fee:	b0 92 68 27 	sts	0x2768, r11	; 0x802768 <IACC+0x3>
            IDEC=DEC1; 
    5ff2:	80 90 71 27 	lds	r8, 0x2771	; 0x802771 <DEC1>
    5ff6:	90 90 72 27 	lds	r9, 0x2772	; 0x802772 <DEC1+0x1>
    5ffa:	a0 90 73 27 	lds	r10, 0x2773	; 0x802773 <DEC1+0x2>
    5ffe:	b0 90 74 27 	lds	r11, 0x2774	; 0x802774 <DEC1+0x3>
    6002:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    6006:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    600a:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    600e:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
            MaxDistanceToGo=labs(AxisPosition1-SetJog1);
    6012:	0b 8d       	ldd	r16, Y+27	; 0x1b
    6014:	1c 8d       	ldd	r17, Y+28	; 0x1c
    6016:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6018:	3e 8d       	ldd	r19, Y+30	; 0x1e
    601a:	8d 80       	ldd	r8, Y+5	; 0x05
    601c:	9e 80       	ldd	r9, Y+6	; 0x06
    601e:	af 80       	ldd	r10, Y+7	; 0x07
    6020:	b8 84       	ldd	r11, Y+8	; 0x08
    6022:	08 19       	sub	r16, r8
    6024:	19 09       	sbc	r17, r9
    6026:	2a 09       	sbc	r18, r10
    6028:	3b 09       	sbc	r19, r11
    602a:	48 01       	movw	r8, r16
    602c:	59 01       	movw	r10, r18
    602e:	3a f4       	brpl	.+14     	; 0x603e <__stack+0x203f>
    6030:	88 24       	eor	r8, r8
    6032:	99 24       	eor	r9, r9
    6034:	54 01       	movw	r10, r8
    6036:	80 1a       	sub	r8, r16
    6038:	91 0a       	sbc	r9, r17
    603a:	a2 0a       	sbc	r10, r18
    603c:	b3 0a       	sbc	r11, r19
    603e:	80 92 a8 27 	sts	0x27A8, r8	; 0x8027a8 <MaxDistanceToGo>
    6042:	90 92 a9 27 	sts	0x27A9, r9	; 0x8027a9 <MaxDistanceToGo+0x1>
    6046:	a0 92 aa 27 	sts	0x27AA, r10	; 0x8027aa <MaxDistanceToGo+0x2>
    604a:	b0 92 ab 27 	sts	0x27AB, r11	; 0x8027ab <MaxDistanceToGo+0x3>
          }
        if(SetSpeed2 >= SetSpeed1 && SetSpeed2 >= SetSpeed3)
    604e:	46 16       	cp	r4, r22
    6050:	57 06       	cpc	r5, r23
    6052:	68 06       	cpc	r6, r24
    6054:	79 06       	cpc	r7, r25
    6056:	0c f4       	brge	.+2      	; 0x605a <__stack+0x205b>
    6058:	54 c0       	rjmp	.+168    	; 0x6102 <__stack+0x2103>
    605a:	80 90 85 27 	lds	r8, 0x2785	; 0x802785 <SetSpeed3>
    605e:	90 90 86 27 	lds	r9, 0x2786	; 0x802786 <SetSpeed3+0x1>
    6062:	a0 90 87 27 	lds	r10, 0x2787	; 0x802787 <SetSpeed3+0x2>
    6066:	b0 90 88 27 	lds	r11, 0x2788	; 0x802788 <SetSpeed3+0x3>
    606a:	48 14       	cp	r4, r8
    606c:	59 04       	cpc	r5, r9
    606e:	6a 04       	cpc	r6, r10
    6070:	7b 04       	cpc	r7, r11
    6072:	0c f4       	brge	.+2      	; 0x6076 <__stack+0x2077>
    6074:	54 c0       	rjmp	.+168    	; 0x611e <__stack+0x211f>
          { 
            MaxSpeed = SetSpeed2; 
    6076:	40 92 81 27 	sts	0x2781, r4	; 0x802781 <MaxSpeed>
    607a:	50 92 82 27 	sts	0x2782, r5	; 0x802782 <MaxSpeed+0x1>
    607e:	60 92 83 27 	sts	0x2783, r6	; 0x802783 <MaxSpeed+0x2>
    6082:	70 92 84 27 	sts	0x2784, r7	; 0x802784 <MaxSpeed+0x3>
            IACC=ACC2; 
    6086:	80 90 79 27 	lds	r8, 0x2779	; 0x802779 <ACC2>
    608a:	90 90 7a 27 	lds	r9, 0x277A	; 0x80277a <ACC2+0x1>
    608e:	a0 90 7b 27 	lds	r10, 0x277B	; 0x80277b <ACC2+0x2>
    6092:	b0 90 7c 27 	lds	r11, 0x277C	; 0x80277c <ACC2+0x3>
    6096:	80 92 65 27 	sts	0x2765, r8	; 0x802765 <IACC>
    609a:	90 92 66 27 	sts	0x2766, r9	; 0x802766 <IACC+0x1>
    609e:	a0 92 67 27 	sts	0x2767, r10	; 0x802767 <IACC+0x2>
    60a2:	b0 92 68 27 	sts	0x2768, r11	; 0x802768 <IACC+0x3>
            IDEC=DEC2; 
    60a6:	80 90 6d 27 	lds	r8, 0x276D	; 0x80276d <DEC2>
    60aa:	90 90 6e 27 	lds	r9, 0x276E	; 0x80276e <DEC2+0x1>
    60ae:	a0 90 6f 27 	lds	r10, 0x276F	; 0x80276f <DEC2+0x2>
    60b2:	b0 90 70 27 	lds	r11, 0x2770	; 0x802770 <DEC2+0x3>
    60b6:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    60ba:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    60be:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    60c2:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
            MaxDistanceToGo=labs(AxisPosition2-SetJog2);
    60c6:	09 89       	ldd	r16, Y+17	; 0x11
    60c8:	1a 89       	ldd	r17, Y+18	; 0x12
    60ca:	2b 89       	ldd	r18, Y+19	; 0x13
    60cc:	3c 89       	ldd	r19, Y+20	; 0x14
    60ce:	a9 84       	ldd	r10, Y+9	; 0x09
    60d0:	ba 84       	ldd	r11, Y+10	; 0x0a
    60d2:	cb 84       	ldd	r12, Y+11	; 0x0b
    60d4:	dc 84       	ldd	r13, Y+12	; 0x0c
    60d6:	0a 19       	sub	r16, r10
    60d8:	1b 09       	sbc	r17, r11
    60da:	2c 09       	sbc	r18, r12
    60dc:	3d 09       	sbc	r19, r13
    60de:	48 01       	movw	r8, r16
    60e0:	59 01       	movw	r10, r18
    60e2:	3a f4       	brpl	.+14     	; 0x60f2 <__stack+0x20f3>
    60e4:	88 24       	eor	r8, r8
    60e6:	99 24       	eor	r9, r9
    60e8:	54 01       	movw	r10, r8
    60ea:	80 1a       	sub	r8, r16
    60ec:	91 0a       	sbc	r9, r17
    60ee:	a2 0a       	sbc	r10, r18
    60f0:	b3 0a       	sbc	r11, r19
    60f2:	80 92 a8 27 	sts	0x27A8, r8	; 0x8027a8 <MaxDistanceToGo>
    60f6:	90 92 a9 27 	sts	0x27A9, r9	; 0x8027a9 <MaxDistanceToGo+0x1>
    60fa:	a0 92 aa 27 	sts	0x27AA, r10	; 0x8027aa <MaxDistanceToGo+0x2>
    60fe:	b0 92 ab 27 	sts	0x27AB, r11	; 0x8027ab <MaxDistanceToGo+0x3>
          }
        if(SetSpeed3 >= SetSpeed2 && SetSpeed3 >= SetSpeed1)
    6102:	80 90 85 27 	lds	r8, 0x2785	; 0x802785 <SetSpeed3>
    6106:	90 90 86 27 	lds	r9, 0x2786	; 0x802786 <SetSpeed3+0x1>
    610a:	a0 90 87 27 	lds	r10, 0x2787	; 0x802787 <SetSpeed3+0x2>
    610e:	b0 90 88 27 	lds	r11, 0x2788	; 0x802788 <SetSpeed3+0x3>
    6112:	84 14       	cp	r8, r4
    6114:	95 04       	cpc	r9, r5
    6116:	a6 04       	cpc	r10, r6
    6118:	b7 04       	cpc	r11, r7
    611a:	0c f4       	brge	.+2      	; 0x611e <__stack+0x211f>
    611c:	4c c0       	rjmp	.+152    	; 0x61b6 <__stack+0x21b7>
    611e:	86 16       	cp	r8, r22
    6120:	97 06       	cpc	r9, r23
    6122:	a8 06       	cpc	r10, r24
    6124:	b9 06       	cpc	r11, r25
    6126:	0c f4       	brge	.+2      	; 0x612a <__stack+0x212b>
    6128:	46 c0       	rjmp	.+140    	; 0x61b6 <__stack+0x21b7>
        { 
          MaxSpeed = SetSpeed3; 
    612a:	80 92 81 27 	sts	0x2781, r8	; 0x802781 <MaxSpeed>
    612e:	90 92 82 27 	sts	0x2782, r9	; 0x802782 <MaxSpeed+0x1>
    6132:	a0 92 83 27 	sts	0x2783, r10	; 0x802783 <MaxSpeed+0x2>
    6136:	b0 92 84 27 	sts	0x2784, r11	; 0x802784 <MaxSpeed+0x3>
          IACC=ACC3; 
    613a:	00 91 75 27 	lds	r16, 0x2775	; 0x802775 <ACC3>
    613e:	10 91 76 27 	lds	r17, 0x2776	; 0x802776 <ACC3+0x1>
    6142:	20 91 77 27 	lds	r18, 0x2777	; 0x802777 <ACC3+0x2>
    6146:	30 91 78 27 	lds	r19, 0x2778	; 0x802778 <ACC3+0x3>
    614a:	00 93 65 27 	sts	0x2765, r16	; 0x802765 <IACC>
    614e:	10 93 66 27 	sts	0x2766, r17	; 0x802766 <IACC+0x1>
    6152:	20 93 67 27 	sts	0x2767, r18	; 0x802767 <IACC+0x2>
    6156:	30 93 68 27 	sts	0x2768, r19	; 0x802768 <IACC+0x3>
          IDEC=DEC3; 
    615a:	00 91 69 27 	lds	r16, 0x2769	; 0x802769 <DEC3>
    615e:	10 91 6a 27 	lds	r17, 0x276A	; 0x80276a <DEC3+0x1>
    6162:	20 91 6b 27 	lds	r18, 0x276B	; 0x80276b <DEC3+0x2>
    6166:	30 91 6c 27 	lds	r19, 0x276C	; 0x80276c <DEC3+0x3>
    616a:	00 93 61 27 	sts	0x2761, r16	; 0x802761 <IDEC>
    616e:	10 93 62 27 	sts	0x2762, r17	; 0x802762 <IDEC+0x1>
    6172:	20 93 63 27 	sts	0x2763, r18	; 0x802763 <IDEC+0x2>
    6176:	30 93 64 27 	sts	0x2764, r19	; 0x802764 <IDEC+0x3>
          MaxDistanceToGo=labs(AxisPosition3-SetJog3);
    617a:	c9 80       	ldd	r12, Y+1	; 0x01
    617c:	da 80       	ldd	r13, Y+2	; 0x02
    617e:	eb 80       	ldd	r14, Y+3	; 0x03
    6180:	fc 80       	ldd	r15, Y+4	; 0x04
    6182:	0d 85       	ldd	r16, Y+13	; 0x0d
    6184:	1e 85       	ldd	r17, Y+14	; 0x0e
    6186:	2f 85       	ldd	r18, Y+15	; 0x0f
    6188:	38 89       	ldd	r19, Y+16	; 0x10
    618a:	c0 1a       	sub	r12, r16
    618c:	d1 0a       	sbc	r13, r17
    618e:	e2 0a       	sbc	r14, r18
    6190:	f3 0a       	sbc	r15, r19
    6192:	97 01       	movw	r18, r14
    6194:	86 01       	movw	r16, r12
    6196:	3a f4       	brpl	.+14     	; 0x61a6 <__stack+0x21a7>
    6198:	30 95       	com	r19
    619a:	20 95       	com	r18
    619c:	10 95       	com	r17
    619e:	01 95       	neg	r16
    61a0:	1f 4f       	sbci	r17, 0xFF	; 255
    61a2:	2f 4f       	sbci	r18, 0xFF	; 255
    61a4:	3f 4f       	sbci	r19, 0xFF	; 255
    61a6:	00 93 a8 27 	sts	0x27A8, r16	; 0x8027a8 <MaxDistanceToGo>
    61aa:	10 93 a9 27 	sts	0x27A9, r17	; 0x8027a9 <MaxDistanceToGo+0x1>
    61ae:	20 93 aa 27 	sts	0x27AA, r18	; 0x8027aa <MaxDistanceToGo+0x2>
    61b2:	30 93 ab 27 	sts	0x27AB, r19	; 0x8027ab <MaxDistanceToGo+0x3>
        }
        if(MaxSpeed>0)
    61b6:	c0 90 81 27 	lds	r12, 0x2781	; 0x802781 <MaxSpeed>
    61ba:	d0 90 82 27 	lds	r13, 0x2782	; 0x802782 <MaxSpeed+0x1>
    61be:	e0 90 83 27 	lds	r14, 0x2783	; 0x802783 <MaxSpeed+0x2>
    61c2:	f0 90 84 27 	lds	r15, 0x2784	; 0x802784 <MaxSpeed+0x3>
    61c6:	c9 82       	std	Y+1, r12	; 0x01
    61c8:	da 82       	std	Y+2, r13	; 0x02
    61ca:	eb 82       	std	Y+3, r14	; 0x03
    61cc:	fc 82       	std	Y+4, r15	; 0x04
    61ce:	1c 14       	cp	r1, r12
    61d0:	1d 04       	cpc	r1, r13
    61d2:	1e 04       	cpc	r1, r14
    61d4:	1f 04       	cpc	r1, r15
    61d6:	0c f0       	brlt	.+2      	; 0x61da <__stack+0x21db>
    61d8:	40 c0       	rjmp	.+128    	; 0x625a <__stack+0x225b>
        {
          Ma1=(unsigned int)((float)(SetSpeed1/MaxSpeed)*1000);
    61da:	a7 01       	movw	r20, r14
    61dc:	96 01       	movw	r18, r12
    61de:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    61e2:	ca 01       	movw	r24, r20
    61e4:	b9 01       	movw	r22, r18
    61e6:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    61ea:	20 e0       	ldi	r18, 0x00	; 0
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	4a e7       	ldi	r20, 0x7A	; 122
    61f0:	54 e4       	ldi	r21, 0x44	; 68
    61f2:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    61f6:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    61fa:	60 93 44 27 	sts	0x2744, r22	; 0x802744 <Ma1>
    61fe:	70 93 45 27 	sts	0x2745, r23	; 0x802745 <Ma1+0x1>
          Ma2=(unsigned int)((float)(SetSpeed2/MaxSpeed)*1000);  
    6202:	c3 01       	movw	r24, r6
    6204:	b2 01       	movw	r22, r4
    6206:	a7 01       	movw	r20, r14
    6208:	96 01       	movw	r18, r12
    620a:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    620e:	ca 01       	movw	r24, r20
    6210:	b9 01       	movw	r22, r18
    6212:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6216:	20 e0       	ldi	r18, 0x00	; 0
    6218:	30 e0       	ldi	r19, 0x00	; 0
    621a:	4a e7       	ldi	r20, 0x7A	; 122
    621c:	54 e4       	ldi	r21, 0x44	; 68
    621e:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    6222:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    6226:	60 93 42 27 	sts	0x2742, r22	; 0x802742 <Ma2>
    622a:	70 93 43 27 	sts	0x2743, r23	; 0x802743 <Ma2+0x1>
          Ma3=(unsigned int)((float)(SetSpeed3/MaxSpeed)*1000);          		  
    622e:	c5 01       	movw	r24, r10
    6230:	b4 01       	movw	r22, r8
    6232:	a7 01       	movw	r20, r14
    6234:	96 01       	movw	r18, r12
    6236:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    623a:	ca 01       	movw	r24, r20
    623c:	b9 01       	movw	r22, r18
    623e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6242:	20 e0       	ldi	r18, 0x00	; 0
    6244:	30 e0       	ldi	r19, 0x00	; 0
    6246:	4a e7       	ldi	r20, 0x7A	; 122
    6248:	54 e4       	ldi	r21, 0x44	; 68
    624a:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    624e:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    6252:	60 93 40 27 	sts	0x2740, r22	; 0x802740 <Ma3>
    6256:	70 93 41 27 	sts	0x2741, r23	; 0x802741 <Ma3+0x1>
        }
        CurSpeedFrq=0;
    625a:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    625e:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    6262:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    6266:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
        TCC0.CCA=0xFFFF;                                                   
    626a:	8f ef       	ldi	r24, 0xFF	; 255
    626c:	9f ef       	ldi	r25, 0xFF	; 255
    626e:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    6272:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
        if(IACC>0)
    6276:	40 90 65 27 	lds	r4, 0x2765	; 0x802765 <IACC>
    627a:	50 90 66 27 	lds	r5, 0x2766	; 0x802766 <IACC+0x1>
    627e:	60 90 67 27 	lds	r6, 0x2767	; 0x802767 <IACC+0x2>
    6282:	70 90 68 27 	lds	r7, 0x2768	; 0x802768 <IACC+0x3>
    6286:	14 14       	cp	r1, r4
    6288:	15 04       	cpc	r1, r5
    628a:	16 04       	cpc	r1, r6
    628c:	17 04       	cpc	r1, r7
    628e:	54 f5       	brge	.+84     	; 0x62e4 <__stack+0x22e5>
        {                 
          ACCSpeedINT = (long int) (100 * (float)((float)MaxSpeed / (float)IACC));// t = V/a                        
          ACCSpeedINT = (long int)(MaxSpeed / ACCSpeedINT); 
    6290:	69 81       	ldd	r22, Y+1	; 0x01
    6292:	7a 81       	ldd	r23, Y+2	; 0x02
    6294:	8b 81       	ldd	r24, Y+3	; 0x03
    6296:	9c 81       	ldd	r25, Y+4	; 0x04
    6298:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    629c:	4b 01       	movw	r8, r22
    629e:	5c 01       	movw	r10, r24
    62a0:	c3 01       	movw	r24, r6
    62a2:	b2 01       	movw	r22, r4
    62a4:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    62a8:	9b 01       	movw	r18, r22
    62aa:	ac 01       	movw	r20, r24
    62ac:	c5 01       	movw	r24, r10
    62ae:	b4 01       	movw	r22, r8
    62b0:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    62b4:	20 e0       	ldi	r18, 0x00	; 0
    62b6:	30 e0       	ldi	r19, 0x00	; 0
    62b8:	48 ec       	ldi	r20, 0xC8	; 200
    62ba:	52 e4       	ldi	r21, 0x42	; 66
    62bc:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    62c0:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    62c4:	9b 01       	movw	r18, r22
    62c6:	ac 01       	movw	r20, r24
    62c8:	69 81       	ldd	r22, Y+1	; 0x01
    62ca:	7a 81       	ldd	r23, Y+2	; 0x02
    62cc:	8b 81       	ldd	r24, Y+3	; 0x03
    62ce:	9c 81       	ldd	r25, Y+4	; 0x04
    62d0:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    62d4:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    62d8:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    62dc:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    62e0:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
        }
        if(IDEC>0)
    62e4:	80 90 61 27 	lds	r8, 0x2761	; 0x802761 <IDEC>
    62e8:	90 90 62 27 	lds	r9, 0x2762	; 0x802762 <IDEC+0x1>
    62ec:	a0 90 63 27 	lds	r10, 0x2763	; 0x802763 <IDEC+0x2>
    62f0:	b0 90 64 27 	lds	r11, 0x2764	; 0x802764 <IDEC+0x3>
    62f4:	18 14       	cp	r1, r8
    62f6:	19 04       	cpc	r1, r9
    62f8:	1a 04       	cpc	r1, r10
    62fa:	1b 04       	cpc	r1, r11
    62fc:	54 f5       	brge	.+84     	; 0x6352 <__stack+0x2353>
        {       
          DECSpeedINT = (long int)(100 * (float)((float)MaxSpeed / (float)IDEC));// t = V/a                        
          DECSpeedINT = (long int)(MaxSpeed / DECSpeedINT);   
    62fe:	69 81       	ldd	r22, Y+1	; 0x01
    6300:	7a 81       	ldd	r23, Y+2	; 0x02
    6302:	8b 81       	ldd	r24, Y+3	; 0x03
    6304:	9c 81       	ldd	r25, Y+4	; 0x04
    6306:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    630a:	6b 01       	movw	r12, r22
    630c:	7c 01       	movw	r14, r24
    630e:	c5 01       	movw	r24, r10
    6310:	b4 01       	movw	r22, r8
    6312:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6316:	9b 01       	movw	r18, r22
    6318:	ac 01       	movw	r20, r24
    631a:	c7 01       	movw	r24, r14
    631c:	b6 01       	movw	r22, r12
    631e:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6322:	20 e0       	ldi	r18, 0x00	; 0
    6324:	30 e0       	ldi	r19, 0x00	; 0
    6326:	48 ec       	ldi	r20, 0xC8	; 200
    6328:	52 e4       	ldi	r21, 0x42	; 66
    632a:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    632e:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6332:	9b 01       	movw	r18, r22
    6334:	ac 01       	movw	r20, r24
    6336:	69 81       	ldd	r22, Y+1	; 0x01
    6338:	7a 81       	ldd	r23, Y+2	; 0x02
    633a:	8b 81       	ldd	r24, Y+3	; 0x03
    633c:	9c 81       	ldd	r25, Y+4	; 0x04
    633e:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6342:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    6346:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    634a:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    634e:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
        }                                                  
                       
        DecDTG = pow(MaxSpeed,2)/(IDEC);            
    6352:	69 81       	ldd	r22, Y+1	; 0x01
    6354:	7a 81       	ldd	r23, Y+2	; 0x02
    6356:	8b 81       	ldd	r24, Y+3	; 0x03
    6358:	9c 81       	ldd	r25, Y+4	; 0x04
    635a:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    635e:	9b 01       	movw	r18, r22
    6360:	ac 01       	movw	r20, r24
    6362:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    6366:	6b 01       	movw	r12, r22
    6368:	7c 01       	movw	r14, r24
    636a:	c5 01       	movw	r24, r10
    636c:	b4 01       	movw	r22, r8
    636e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6372:	9b 01       	movw	r18, r22
    6374:	ac 01       	movw	r20, r24
    6376:	c7 01       	movw	r24, r14
    6378:	b6 01       	movw	r22, r12
    637a:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    637e:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6382:	60 93 94 27 	sts	0x2794, r22	; 0x802794 <DecDTG>
    6386:	70 93 95 27 	sts	0x2795, r23	; 0x802795 <DecDTG+0x1>
    638a:	80 93 96 27 	sts	0x2796, r24	; 0x802796 <DecDTG+0x2>
    638e:	90 93 97 27 	sts	0x2797, r25	; 0x802797 <DecDTG+0x3>
        AccDTG = MaxDistanceToGo - pow(MaxSpeed,2)/(IACC);
    6392:	00 91 a8 27 	lds	r16, 0x27A8	; 0x8027a8 <MaxDistanceToGo>
    6396:	30 90 a9 27 	lds	r3, 0x27A9	; 0x8027a9 <MaxDistanceToGo+0x1>
    639a:	20 90 aa 27 	lds	r2, 0x27AA	; 0x8027aa <MaxDistanceToGo+0x2>
    639e:	10 91 ab 27 	lds	r17, 0x27AB	; 0x8027ab <MaxDistanceToGo+0x3>
    63a2:	60 2f       	mov	r22, r16
    63a4:	73 2d       	mov	r23, r3
    63a6:	82 2d       	mov	r24, r2
    63a8:	91 2f       	mov	r25, r17
    63aa:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    63ae:	6d 8b       	std	Y+21, r22	; 0x15
    63b0:	7e 8b       	std	Y+22, r23	; 0x16
    63b2:	8f 8b       	std	Y+23, r24	; 0x17
    63b4:	98 8f       	std	Y+24, r25	; 0x18
    63b6:	c3 01       	movw	r24, r6
    63b8:	b2 01       	movw	r22, r4
    63ba:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    63be:	9b 01       	movw	r18, r22
    63c0:	ac 01       	movw	r20, r24
    63c2:	c7 01       	movw	r24, r14
    63c4:	b6 01       	movw	r22, r12
    63c6:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    63ca:	9b 01       	movw	r18, r22
    63cc:	ac 01       	movw	r20, r24
    63ce:	6d 89       	ldd	r22, Y+21	; 0x15
    63d0:	7e 89       	ldd	r23, Y+22	; 0x16
    63d2:	8f 89       	ldd	r24, Y+23	; 0x17
    63d4:	98 8d       	ldd	r25, Y+24	; 0x18
    63d6:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <__subsf3>
    63da:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    63de:	60 93 98 27 	sts	0x2798, r22	; 0x802798 <AccDTG>
    63e2:	70 93 99 27 	sts	0x2799, r23	; 0x802799 <AccDTG+0x1>
    63e6:	80 93 9a 27 	sts	0x279A, r24	; 0x80279a <AccDTG+0x2>
    63ea:	90 93 9b 27 	sts	0x279B, r25	; 0x80279b <AccDTG+0x3>
                 
        DistanceToGo1=labs(AxisPosition1-SetJog1);  
    63ee:	cb 8c       	ldd	r12, Y+27	; 0x1b
    63f0:	dc 8c       	ldd	r13, Y+28	; 0x1c
    63f2:	ed 8c       	ldd	r14, Y+29	; 0x1d
    63f4:	fe 8c       	ldd	r15, Y+30	; 0x1e
    63f6:	2d 81       	ldd	r18, Y+5	; 0x05
    63f8:	3e 81       	ldd	r19, Y+6	; 0x06
    63fa:	4f 81       	ldd	r20, Y+7	; 0x07
    63fc:	58 85       	ldd	r21, Y+8	; 0x08
    63fe:	c2 1a       	sub	r12, r18
    6400:	d3 0a       	sbc	r13, r19
    6402:	e4 0a       	sbc	r14, r20
    6404:	f5 0a       	sbc	r15, r21
    6406:	d7 01       	movw	r26, r14
    6408:	c6 01       	movw	r24, r12
    640a:	3a f4       	brpl	.+14     	; 0x641a <__stack+0x241b>
    640c:	88 27       	eor	r24, r24
    640e:	99 27       	eor	r25, r25
    6410:	dc 01       	movw	r26, r24
    6412:	8c 19       	sub	r24, r12
    6414:	9d 09       	sbc	r25, r13
    6416:	ae 09       	sbc	r26, r14
    6418:	bf 09       	sbc	r27, r15
    641a:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <DistanceToGo1>
    641e:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <DistanceToGo1+0x1>
    6422:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <DistanceToGo1+0x2>
    6426:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <DistanceToGo1+0x3>
        DistanceToGo2=labs(AxisPosition2-SetJog2);        
    642a:	89 89       	ldd	r24, Y+17	; 0x11
    642c:	9a 89       	ldd	r25, Y+18	; 0x12
    642e:	ab 89       	ldd	r26, Y+19	; 0x13
    6430:	bc 89       	ldd	r27, Y+20	; 0x14
    6432:	c9 84       	ldd	r12, Y+9	; 0x09
    6434:	da 84       	ldd	r13, Y+10	; 0x0a
    6436:	eb 84       	ldd	r14, Y+11	; 0x0b
    6438:	fc 84       	ldd	r15, Y+12	; 0x0c
    643a:	8c 19       	sub	r24, r12
    643c:	9d 09       	sbc	r25, r13
    643e:	ae 09       	sbc	r26, r14
    6440:	bf 09       	sbc	r27, r15
    6442:	ac 01       	movw	r20, r24
    6444:	bd 01       	movw	r22, r26
    6446:	3a f4       	brpl	.+14     	; 0x6456 <__stack+0x2457>
    6448:	44 27       	eor	r20, r20
    644a:	55 27       	eor	r21, r21
    644c:	ba 01       	movw	r22, r20
    644e:	48 1b       	sub	r20, r24
    6450:	59 0b       	sbc	r21, r25
    6452:	6a 0b       	sbc	r22, r26
    6454:	7b 0b       	sbc	r23, r27
    6456:	40 93 a0 27 	sts	0x27A0, r20	; 0x8027a0 <DistanceToGo2>
    645a:	50 93 a1 27 	sts	0x27A1, r21	; 0x8027a1 <DistanceToGo2+0x1>
    645e:	60 93 a2 27 	sts	0x27A2, r22	; 0x8027a2 <DistanceToGo2+0x2>
    6462:	70 93 a3 27 	sts	0x27A3, r23	; 0x8027a3 <DistanceToGo2+0x3>
        ACC=1; 
    6466:	ff 24       	eor	r15, r15
    6468:	f3 94       	inc	r15
    646a:	f0 92 4d 27 	sts	0x274D, r15	; 0x80274d <ACC>
        sprintf(BufferSend,"!30\tMaxS:%ld\tIACC:%ld\tIDEC:%ld\n\rMa1:%u\tMa2:%u\tBACC:%ld\tBDEC:%ld\tMAXDTG:%ld\n\r",MaxSpeed,IACC,IDEC,Ma1,Ma2,ACCSpeedINT,DECSpeedINT,MaxDistanceToGo); 
    646e:	1f 93       	push	r17
    6470:	2f 92       	push	r2
    6472:	3f 92       	push	r3
    6474:	0f 93       	push	r16
    6476:	80 91 51 27 	lds	r24, 0x2751	; 0x802751 <DECSpeedINT+0x3>
    647a:	8f 93       	push	r24
    647c:	80 91 50 27 	lds	r24, 0x2750	; 0x802750 <DECSpeedINT+0x2>
    6480:	8f 93       	push	r24
    6482:	80 91 4f 27 	lds	r24, 0x274F	; 0x80274f <DECSpeedINT+0x1>
    6486:	8f 93       	push	r24
    6488:	80 91 4e 27 	lds	r24, 0x274E	; 0x80274e <DECSpeedINT>
    648c:	8f 93       	push	r24
    648e:	80 91 55 27 	lds	r24, 0x2755	; 0x802755 <ACCSpeedINT+0x3>
    6492:	8f 93       	push	r24
    6494:	80 91 54 27 	lds	r24, 0x2754	; 0x802754 <ACCSpeedINT+0x2>
    6498:	8f 93       	push	r24
    649a:	80 91 53 27 	lds	r24, 0x2753	; 0x802753 <ACCSpeedINT+0x1>
    649e:	8f 93       	push	r24
    64a0:	80 91 52 27 	lds	r24, 0x2752	; 0x802752 <ACCSpeedINT>
    64a4:	8f 93       	push	r24
    64a6:	80 91 43 27 	lds	r24, 0x2743	; 0x802743 <Ma2+0x1>
    64aa:	8f 93       	push	r24
    64ac:	80 91 42 27 	lds	r24, 0x2742	; 0x802742 <Ma2>
    64b0:	8f 93       	push	r24
    64b2:	80 91 45 27 	lds	r24, 0x2745	; 0x802745 <Ma1+0x1>
    64b6:	8f 93       	push	r24
    64b8:	80 91 44 27 	lds	r24, 0x2744	; 0x802744 <Ma1>
    64bc:	8f 93       	push	r24
    64be:	bf 92       	push	r11
    64c0:	af 92       	push	r10
    64c2:	9f 92       	push	r9
    64c4:	8f 92       	push	r8
    64c6:	7f 92       	push	r7
    64c8:	6f 92       	push	r6
    64ca:	5f 92       	push	r5
    64cc:	4f 92       	push	r4
    64ce:	dc 80       	ldd	r13, Y+4	; 0x04
    64d0:	df 92       	push	r13
    64d2:	eb 80       	ldd	r14, Y+3	; 0x03
    64d4:	ef 92       	push	r14
    64d6:	0a 81       	ldd	r16, Y+2	; 0x02
    64d8:	0f 93       	push	r16
    64da:	19 81       	ldd	r17, Y+1	; 0x01
    64dc:	1f 93       	push	r17
    64de:	8d eb       	ldi	r24, 0xBD	; 189
    64e0:	95 e2       	ldi	r25, 0x25	; 37
    64e2:	9f 93       	push	r25
    64e4:	8f 93       	push	r24
    64e6:	8f e6       	ldi	r24, 0x6F	; 111
    64e8:	99 e2       	ldi	r25, 0x29	; 41
    64ea:	9f 93       	push	r25
    64ec:	8f 93       	push	r24
    64ee:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
        Responsing=1;                     
    64f2:	f0 92 a2 28 	sts	0x28A2, r15	; 0x8028a2 <Responsing>
        SetDataReady;
    64f6:	e0 ea       	ldi	r30, 0xA0	; 160
    64f8:	f6 e0       	ldi	r31, 0x06	; 6
    64fa:	84 81       	ldd	r24, Z+4	; 0x04
    64fc:	81 60       	ori	r24, 0x01	; 1
    64fe:	84 83       	std	Z+4, r24	; 0x04
    6500:	cd bf       	out	0x3d, r28	; 61
    6502:	de bf       	out	0x3e, r29	; 62
    6504:	74 c1       	rjmp	.+744    	; 0x67ee <__stack+0x27ef>
     }     
    }            
    else if(strncmp(cmdTemp,"#4000",5)==0)
    6506:	45 e0       	ldi	r20, 0x05	; 5
    6508:	50 e0       	ldi	r21, 0x00	; 0
    650a:	6a e0       	ldi	r22, 0x0A	; 10
    650c:	76 e2       	ldi	r23, 0x26	; 38
    650e:	83 e2       	ldi	r24, 0x23	; 35
    6510:	97 e2       	ldi	r25, 0x27	; 39
    6512:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    6516:	89 2b       	or	r24, r25
    6518:	61 f5       	brne	.+88     	; 0x6572 <__stack+0x2573>
    { 
      //if(ProgramRun)
      //{
          ProgramRun=0;
    651a:	10 92 d0 27 	sts	0x27D0, r1	; 0x8027d0 <ProgramRun>
          DistanceToGo1=0;
    651e:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    6522:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    6526:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    652a:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
          DistanceToGo2=0;
    652e:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    6532:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    6536:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    653a:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
          DistanceToGo3=0;   
    653e:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    6542:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    6546:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    654a:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
          DO1_CLR;
    654e:	e0 e0       	ldi	r30, 0x00	; 0
    6550:	f7 e0       	ldi	r31, 0x07	; 7
    6552:	84 81       	ldd	r24, Z+4	; 0x04
    6554:	8b 7f       	andi	r24, 0xFB	; 251
    6556:	84 83       	std	Z+4, r24	; 0x04
          sprintf(BufferSend,"!4000\r\n"); 
    6558:	88 e0       	ldi	r24, 0x08	; 8
    655a:	e0 e1       	ldi	r30, 0x10	; 16
    655c:	f6 e2       	ldi	r31, 0x26	; 38
    655e:	af e6       	ldi	r26, 0x6F	; 111
    6560:	b9 e2       	ldi	r27, 0x29	; 41
    6562:	01 90       	ld	r0, Z+
    6564:	0d 92       	st	X+, r0
    6566:	8a 95       	dec	r24
    6568:	e1 f7       	brne	.-8      	; 0x6562 <__stack+0x2563>
          Responsing=1;      
    656a:	81 e0       	ldi	r24, 0x01	; 1
    656c:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
    6570:	3e c1       	rjmp	.+636    	; 0x67ee <__stack+0x27ef>
      //}
    } 
    else if(strncmp(cmdTemp,"#4100",5)==0)
    6572:	45 e0       	ldi	r20, 0x05	; 5
    6574:	50 e0       	ldi	r21, 0x00	; 0
    6576:	68 e1       	ldi	r22, 0x18	; 24
    6578:	76 e2       	ldi	r23, 0x26	; 38
    657a:	83 e2       	ldi	r24, 0x23	; 35
    657c:	97 e2       	ldi	r25, 0x27	; 39
    657e:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    6582:	89 2b       	or	r24, r25
    6584:	61 f5       	brne	.+88     	; 0x65de <__stack+0x25df>
    { 
      if(ProgramRun)
    6586:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    658a:	88 23       	and	r24, r24
    658c:	09 f4       	brne	.+2      	; 0x6590 <__stack+0x2591>
    658e:	2f c1       	rjmp	.+606    	; 0x67ee <__stack+0x27ef>
      {
          IsPause=1;
    6590:	81 e0       	ldi	r24, 0x01	; 1
    6592:	80 93 ec 26 	sts	0x26EC, r24	; 0x8026ec <IsPause>
          DistanceToGo1=0;
    6596:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    659a:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    659e:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    65a2:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
          DistanceToGo2=0;
    65a6:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    65aa:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    65ae:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    65b2:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
          DistanceToGo3=0;
    65b6:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    65ba:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    65be:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    65c2:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
          sprintf(BufferSend,"!4100\r\n"); 
    65c6:	98 e0       	ldi	r25, 0x08	; 8
    65c8:	ee e1       	ldi	r30, 0x1E	; 30
    65ca:	f6 e2       	ldi	r31, 0x26	; 38
    65cc:	af e6       	ldi	r26, 0x6F	; 111
    65ce:	b9 e2       	ldi	r27, 0x29	; 41
    65d0:	01 90       	ld	r0, Z+
    65d2:	0d 92       	st	X+, r0
    65d4:	9a 95       	dec	r25
    65d6:	e1 f7       	brne	.-8      	; 0x65d0 <__stack+0x25d1>
          Responsing=1;      
    65d8:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
    65dc:	08 c1       	rjmp	.+528    	; 0x67ee <__stack+0x27ef>
      }
    }
    else if(strncmp(cmdTemp,"#9800",5)==0)
    65de:	45 e0       	ldi	r20, 0x05	; 5
    65e0:	50 e0       	ldi	r21, 0x00	; 0
    65e2:	66 e2       	ldi	r22, 0x26	; 38
    65e4:	76 e2       	ldi	r23, 0x26	; 38
    65e6:	83 e2       	ldi	r24, 0x23	; 35
    65e8:	97 e2       	ldi	r25, 0x27	; 39
    65ea:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    65ee:	89 2b       	or	r24, r25
    65f0:	09 f0       	breq	.+2      	; 0x65f4 <__stack+0x25f5>
    65f2:	5f c0       	rjmp	.+190    	; 0x66b2 <__stack+0x26b3>
    {  
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    65f4:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    65f8:	81 11       	cpse	r24, r1
    65fa:	0b c0       	rjmp	.+22     	; 0x6612 <__stack+0x2613>
    65fc:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    6600:	81 11       	cpse	r24, r1
    6602:	09 c0       	rjmp	.+18     	; 0x6616 <__stack+0x2617>
    6604:	81 e0       	ldi	r24, 0x01	; 1
    6606:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    660a:	91 11       	cpse	r25, r1
    660c:	05 c0       	rjmp	.+10     	; 0x6618 <__stack+0x2619>
    660e:	80 e0       	ldi	r24, 0x00	; 0
    6610:	03 c0       	rjmp	.+6      	; 0x6618 <__stack+0x2619>
    6612:	81 e0       	ldi	r24, 0x01	; 1
    6614:	01 c0       	rjmp	.+2      	; 0x6618 <__stack+0x2619>
    6616:	81 e0       	ldi	r24, 0x01	; 1
    6618:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
     if (!ProgramRun)
    661c:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    6620:	81 11       	cpse	r24, r1
    6622:	3d c0       	rjmp	.+122    	; 0x669e <__stack+0x269f>
     { 
      printf("Get Run Command\r\n");
    6624:	8c e2       	ldi	r24, 0x2C	; 44
    6626:	96 e2       	ldi	r25, 0x26	; 38
    6628:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
    662c:	80 91 0c 27 	lds	r24, 0x270C	; 0x80270c <AxisMoving>
      while (AxisMoving == 1) 
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6630:	20 91 5c 27 	lds	r18, 0x275C	; 0x80275c <AxisIsMoving1>
    6634:	30 91 5b 27 	lds	r19, 0x275B	; 0x80275b <AxisIsMoving2>
    6638:	91 e0       	ldi	r25, 0x01	; 1
    663a:	40 91 5a 27 	lds	r20, 0x275A	; 0x80275a <AxisIsMoving3>
    663e:	41 11       	cpse	r20, r1
    6640:	01 c0       	rjmp	.+2      	; 0x6644 <__stack+0x2645>
    6642:	90 e0       	ldi	r25, 0x00	; 0
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
     if (!ProgramRun)
     { 
      printf("Get Run Command\r\n");
      while (AxisMoving == 1) 
    6644:	81 30       	cpi	r24, 0x01	; 1
    6646:	51 f4       	brne	.+20     	; 0x665c <__stack+0x265d>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6648:	21 11       	cpse	r18, r1
    664a:	04 c0       	rjmp	.+8      	; 0x6654 <__stack+0x2655>
    664c:	31 11       	cpse	r19, r1
    664e:	04 c0       	rjmp	.+8      	; 0x6658 <__stack+0x2659>
    6650:	89 2f       	mov	r24, r25
    6652:	f8 cf       	rjmp	.-16     	; 0x6644 <__stack+0x2645>
    6654:	81 e0       	ldi	r24, 0x01	; 1
    6656:	f6 cf       	rjmp	.-20     	; 0x6644 <__stack+0x2645>
    6658:	81 e0       	ldi	r24, 0x01	; 1
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
     if (!ProgramRun)
     { 
      printf("Get Run Command\r\n");
      while (AxisMoving == 1) 
    665a:	f4 cf       	rjmp	.-24     	; 0x6644 <__stack+0x2645>
    665c:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
       ContinuousRead=0; 
    6660:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <ContinuousRead>
       PRGEXEindex = 0;
    6664:	10 92 0a 27 	sts	0x270A, r1	; 0x80270a <PRGEXEindex>
    6668:	10 92 0b 27 	sts	0x270B, r1	; 0x80270b <PRGEXEindex+0x1>
       ProgramRun = 1;
    666c:	31 e0       	ldi	r19, 0x01	; 1
    666e:	30 93 d0 27 	sts	0x27D0, r19	; 0x8027d0 <ProgramRun>
       printf("Program is running\r\n");       
    6672:	8d e3       	ldi	r24, 0x3D	; 61
    6674:	96 e2       	ldi	r25, 0x26	; 38
    6676:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
       sprintf(BufferSend,"!9800\r\n");
    667a:	88 e0       	ldi	r24, 0x08	; 8
    667c:	e1 e5       	ldi	r30, 0x51	; 81
    667e:	f6 e2       	ldi	r31, 0x26	; 38
    6680:	af e6       	ldi	r26, 0x6F	; 111
    6682:	b9 e2       	ldi	r27, 0x29	; 41
    6684:	01 90       	ld	r0, Z+
    6686:	0d 92       	st	X+, r0
    6688:	8a 95       	dec	r24
    668a:	e1 f7       	brne	.-8      	; 0x6684 <__stack+0x2685>
       Responsing=1;
    668c:	41 e0       	ldi	r20, 0x01	; 1
    668e:	40 93 a2 28 	sts	0x28A2, r20	; 0x8028a2 <Responsing>
       SetDataReady;  
    6692:	e0 ea       	ldi	r30, 0xA0	; 160
    6694:	f6 e0       	ldi	r31, 0x06	; 6
    6696:	84 81       	ldd	r24, Z+4	; 0x04
    6698:	81 60       	ori	r24, 0x01	; 1
    669a:	84 83       	std	Z+4, r24	; 0x04
    669c:	a8 c0       	rjmp	.+336    	; 0x67ee <__stack+0x27ef>
     } 
     else if(IsPause==1)
    669e:	80 91 ec 26 	lds	r24, 0x26EC	; 0x8026ec <IsPause>
    66a2:	81 30       	cpi	r24, 0x01	; 1
    66a4:	09 f0       	breq	.+2      	; 0x66a8 <__stack+0x26a9>
    66a6:	a3 c0       	rjmp	.+326    	; 0x67ee <__stack+0x27ef>
     {
         PRGExe();
    66a8:	0e 94 09 11 	call	0x2212	; 0x2212 <_Z6PRGExev>
         IsPause=0;
    66ac:	10 92 ec 26 	sts	0x26EC, r1	; 0x8026ec <IsPause>
    66b0:	9e c0       	rjmp	.+316    	; 0x67ee <__stack+0x27ef>
     }       
    }
    else if(strncmp(cmdTemp,"#9900",5)==0)
    66b2:	45 e0       	ldi	r20, 0x05	; 5
    66b4:	50 e0       	ldi	r21, 0x00	; 0
    66b6:	69 e5       	ldi	r22, 0x59	; 89
    66b8:	76 e2       	ldi	r23, 0x26	; 38
    66ba:	83 e2       	ldi	r24, 0x23	; 35
    66bc:	97 e2       	ldi	r25, 0x27	; 39
    66be:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strncmp>
    66c2:	89 2b       	or	r24, r25
    66c4:	09 f0       	breq	.+2      	; 0x66c8 <__stack+0x26c9>
    66c6:	46 c0       	rjmp	.+140    	; 0x6754 <__stack+0x2755>
    { 
       ContinuousRead=0; 
    66c8:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <ContinuousRead>
       readRam(); 
    66cc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z7readRamv>
       readRam(); 
    66d0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z7readRamv>
       readRam(); 
    66d4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z7readRamv>
       sprintf(BufferSend,"!9800\r\nPL:%u\tMD:%u\tMv1:%ld\tMaxDTG:%ld\tMaxSpeed:%ld\tACCDTG:%ld\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode,CMDPRGlist.Move1,CMDPRGlist.MaxDistanceToGo,CMDPRGlist.MaxSpeed,CMDPRGlist.ACCDTG); 
    66d8:	e2 e5       	ldi	r30, 0x52	; 82
    66da:	f8 e2       	ldi	r31, 0x28	; 40
    66dc:	83 a9       	ldd	r24, Z+51	; 0x33
    66de:	8f 93       	push	r24
    66e0:	82 a9       	ldd	r24, Z+50	; 0x32
    66e2:	8f 93       	push	r24
    66e4:	81 a9       	ldd	r24, Z+49	; 0x31
    66e6:	8f 93       	push	r24
    66e8:	80 a9       	ldd	r24, Z+48	; 0x30
    66ea:	8f 93       	push	r24
    66ec:	83 a1       	ldd	r24, Z+35	; 0x23
    66ee:	8f 93       	push	r24
    66f0:	82 a1       	ldd	r24, Z+34	; 0x22
    66f2:	8f 93       	push	r24
    66f4:	81 a1       	ldd	r24, Z+33	; 0x21
    66f6:	8f 93       	push	r24
    66f8:	80 a1       	ldd	r24, Z+32	; 0x20
    66fa:	8f 93       	push	r24
    66fc:	87 a1       	ldd	r24, Z+39	; 0x27
    66fe:	8f 93       	push	r24
    6700:	86 a1       	ldd	r24, Z+38	; 0x26
    6702:	8f 93       	push	r24
    6704:	85 a1       	ldd	r24, Z+37	; 0x25
    6706:	8f 93       	push	r24
    6708:	84 a1       	ldd	r24, Z+36	; 0x24
    670a:	8f 93       	push	r24
    670c:	80 85       	ldd	r24, Z+8	; 0x08
    670e:	8f 93       	push	r24
    6710:	87 81       	ldd	r24, Z+7	; 0x07
    6712:	8f 93       	push	r24
    6714:	86 81       	ldd	r24, Z+6	; 0x06
    6716:	8f 93       	push	r24
    6718:	85 81       	ldd	r24, Z+5	; 0x05
    671a:	8f 93       	push	r24
    671c:	83 81       	ldd	r24, Z+3	; 0x03
    671e:	1f 92       	push	r1
    6720:	8f 93       	push	r24
    6722:	81 81       	ldd	r24, Z+1	; 0x01
    6724:	8f 93       	push	r24
    6726:	80 81       	ld	r24, Z
    6728:	8f 93       	push	r24
    672a:	8f e5       	ldi	r24, 0x5F	; 95
    672c:	96 e2       	ldi	r25, 0x26	; 38
    672e:	9f 93       	push	r25
    6730:	8f 93       	push	r24
    6732:	8f e6       	ldi	r24, 0x6F	; 111
    6734:	99 e2       	ldi	r25, 0x29	; 41
    6736:	9f 93       	push	r25
    6738:	8f 93       	push	r24
    673a:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <sprintf>
       //sprintf(BufferSend,"!9900\r\nID:%u\tMaxSpeed:%d\tACC:%d\r\n",Axes[0].ID,Axes[0].MaxSpeed,Axes[0].ACC);
       Responsing=1;
    673e:	81 e0       	ldi	r24, 0x01	; 1
    6740:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
       SetDataReady;
    6744:	e0 ea       	ldi	r30, 0xA0	; 160
    6746:	f6 e0       	ldi	r31, 0x06	; 6
    6748:	84 81       	ldd	r24, Z+4	; 0x04
    674a:	81 60       	ori	r24, 0x01	; 1
    674c:	84 83       	std	Z+4, r24	; 0x04
    674e:	cd bf       	out	0x3d, r28	; 61
    6750:	de bf       	out	0x3e, r29	; 62
    6752:	4d c0       	rjmp	.+154    	; 0x67ee <__stack+0x27ef>
    }    
    else
    {
      ClrDataReady;
    6754:	e0 ea       	ldi	r30, 0xA0	; 160
    6756:	f6 e0       	ldi	r31, 0x06	; 6
    6758:	84 81       	ldd	r24, Z+4	; 0x04
    675a:	8e 7f       	andi	r24, 0xFE	; 254
    675c:	84 83       	std	Z+4, r24	; 0x04
    }
}
    675e:	47 c0       	rjmp	.+142    	; 0x67ee <__stack+0x27ef>
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6760:	91 e0       	ldi	r25, 0x01	; 1
    6762:	90 93 0c 27 	sts	0x270C, r25	; 0x80270c <AxisMoving>
         
     if (!ProgramRun)
    6766:	90 91 d0 27 	lds	r25, 0x27D0	; 0x8027d0 <ProgramRun>
    676a:	99 23       	and	r25, r25
    676c:	11 f4       	brne	.+4      	; 0x6772 <__stack+0x2773>
    676e:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <_Z6cmdExev+0xb5c>
    6772:	3d c0       	rjmp	.+122    	; 0x67ee <__stack+0x27ef>
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6774:	21 e0       	ldi	r18, 0x01	; 1
    6776:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
         
    if (!ProgramRun)
    677a:	20 91 d0 27 	lds	r18, 0x27D0	; 0x8027d0 <ProgramRun>
    677e:	22 23       	and	r18, r18
    6780:	11 f4       	brne	.+4      	; 0x6786 <__stack+0x2787>
    6782:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__stack+0xdfd>
    6786:	33 c0       	rjmp	.+102    	; 0x67ee <__stack+0x27ef>
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    6788:	81 e0       	ldi	r24, 0x01	; 1
    678a:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
    if (!ProgramRun)
    678e:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    6792:	88 23       	and	r24, r24
    6794:	11 f4       	brne	.+4      	; 0x679a <__stack+0x279b>
    6796:	0c 94 cb 27 	jmp	0x4f96	; 0x4f96 <__stack+0xf97>
    679a:	29 c0       	rjmp	.+82     	; 0x67ee <__stack+0x27ef>
       }
     }
    }   
    else if(strncmp(cmdTemp,"#13",3)==0)
    {// Set Speed 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
    67a2:	25 c0       	rjmp	.+74     	; 0x67ee <__stack+0x27ef>
         }
       }
    }
    else if(strncmp(cmdTemp,"#16",3)==0)
    {// Set ACC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67a4:	81 e0       	ldi	r24, 0x01	; 1
    67a6:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
    67aa:	21 c0       	rjmp	.+66     	; 0x67ee <__stack+0x27ef>
       }          
      }
    }
    else if(strncmp(cmdTemp,"#17",3)==0)
    {// Set DEC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67ac:	81 e0       	ldi	r24, 0x01	; 1
    67ae:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
    67b2:	1d c0       	rjmp	.+58     	; 0x67ee <__stack+0x27ef>
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67b4:	91 e0       	ldi	r25, 0x01	; 1
    67b6:	90 93 0c 27 	sts	0x270C, r25	; 0x80270c <AxisMoving>
         
     if (!ProgramRun)
    67ba:	90 91 d0 27 	lds	r25, 0x27D0	; 0x8027d0 <ProgramRun>
    67be:	99 23       	and	r25, r25
    67c0:	11 f4       	brne	.+4      	; 0x67c6 <__stack+0x27c7>
    67c2:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <_Z6cmdExev+0xb5c>
    67c6:	13 c0       	rjmp	.+38     	; 0x67ee <__stack+0x27ef>
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    67c8:	21 e0       	ldi	r18, 0x01	; 1
    67ca:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
         
    if (!ProgramRun)
    67ce:	20 91 d0 27 	lds	r18, 0x27D0	; 0x8027d0 <ProgramRun>
    67d2:	22 23       	and	r18, r18
    67d4:	11 f4       	brne	.+4      	; 0x67da <__stack+0x27db>
    67d6:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__stack+0xdfd>
    67da:	09 c0       	rjmp	.+18     	; 0x67ee <__stack+0x27ef>
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    67dc:	81 e0       	ldi	r24, 0x01	; 1
    67de:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
    if (!ProgramRun)
    67e2:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    67e6:	88 23       	and	r24, r24
    67e8:	11 f4       	brne	.+4      	; 0x67ee <__stack+0x27ef>
    67ea:	0c 94 cb 27 	jmp	0x4f96	; 0x4f96 <__stack+0xf97>
    }    
    else
    {
      ClrDataReady;
    }
}
    67ee:	6e 96       	adiw	r28, 0x1e	; 30
    67f0:	cd bf       	out	0x3d, r28	; 61
    67f2:	de bf       	out	0x3e, r29	; 62
    67f4:	df 91       	pop	r29
    67f6:	cf 91       	pop	r28
    67f8:	1f 91       	pop	r17
    67fa:	0f 91       	pop	r16
    67fc:	ff 90       	pop	r15
    67fe:	ef 90       	pop	r14
    6800:	df 90       	pop	r13
    6802:	cf 90       	pop	r12
    6804:	bf 90       	pop	r11
    6806:	af 90       	pop	r10
    6808:	9f 90       	pop	r9
    680a:	8f 90       	pop	r8
    680c:	7f 90       	pop	r7
    680e:	6f 90       	pop	r6
    6810:	5f 90       	pop	r5
    6812:	4f 90       	pop	r4
    6814:	3f 90       	pop	r3
    6816:	2f 90       	pop	r2
    6818:	08 95       	ret

0000681a <_Z18system_clocks_initv>:

void system_clocks_init(void) // System Clocks initialization
{
	unsigned char n,s;
	//#pragma optsize-
	s=SREG;
    681a:	9f b7       	in	r25, 0x3f	; 63
	asm("cli");
    681c:	f8 94       	cli
	OSC.CTRL|=OSC_RC32KEN_bm;
    681e:	e0 e5       	ldi	r30, 0x50	; 80
    6820:	f0 e0       	ldi	r31, 0x00	; 0
    6822:	80 81       	ld	r24, Z
    6824:	84 60       	ori	r24, 0x04	; 4
    6826:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
    6828:	81 81       	ldd	r24, Z+1	; 0x01
    682a:	82 ff       	sbrs	r24, 2
    682c:	fd cf       	rjmp	.-6      	; 0x6828 <_Z18system_clocks_initv+0xe>
	OSC.CTRL|=OSC_RC32MEN_bm;
    682e:	e0 e5       	ldi	r30, 0x50	; 80
    6830:	f0 e0       	ldi	r31, 0x00	; 0
    6832:	80 81       	ld	r24, Z
    6834:	82 60       	ori	r24, 0x02	; 2
    6836:	80 83       	st	Z, r24
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    6838:	a0 e4       	ldi	r26, 0x40	; 64
    683a:	b0 e0       	ldi	r27, 0x00	; 0
    683c:	11 96       	adiw	r26, 0x01	; 1
    683e:	8c 91       	ld	r24, X
    6840:	11 97       	sbiw	r26, 0x01	; 1
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
    6842:	80 78       	andi	r24, 0x80	; 128
	CCP=CCP_IOREG_gc;
    6844:	28 ed       	ldi	r18, 0xD8	; 216
    6846:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
    6848:	11 96       	adiw	r26, 0x01	; 1
    684a:	8c 93       	st	X, r24
	OSC.DFLLCTRL&= ~(OSC_RC32MCREF_bm | OSC_RC2MCREF_bm);
    684c:	86 81       	ldd	r24, Z+6	; 0x06
    684e:	8c 7f       	andi	r24, 0xFC	; 252
    6850:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
    6852:	e0 e6       	ldi	r30, 0x60	; 96
    6854:	f0 e0       	ldi	r31, 0x00	; 0
    6856:	80 81       	ld	r24, Z
    6858:	81 60       	ori	r24, 0x01	; 1
    685a:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
    685c:	e0 e5       	ldi	r30, 0x50	; 80
    685e:	f0 e0       	ldi	r31, 0x00	; 0
    6860:	81 81       	ldd	r24, Z+1	; 0x01
    6862:	81 ff       	sbrs	r24, 1
    6864:	fd cf       	rjmp	.-6      	; 0x6860 <_Z18system_clocks_initv+0x46>
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
    6866:	e0 e4       	ldi	r30, 0x40	; 64
    6868:	f0 e0       	ldi	r31, 0x00	; 0
    686a:	80 81       	ld	r24, Z
    686c:	88 7f       	andi	r24, 0xF8	; 248
    686e:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
    6870:	28 ed       	ldi	r18, 0xD8	; 216
    6872:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
    6874:	80 83       	st	Z, r24
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    6876:	e0 e5       	ldi	r30, 0x50	; 80
    6878:	f0 e0       	ldi	r31, 0x00	; 0
    687a:	80 81       	ld	r24, Z
    687c:	86 7e       	andi	r24, 0xE6	; 230
    687e:	80 83       	st	Z, r24
	PORTCFG.CLKEVOUT&= ~PORTCFG_CLKOUT_gm;
    6880:	e0 eb       	ldi	r30, 0xB0	; 176
    6882:	f0 e0       	ldi	r31, 0x00	; 0
    6884:	84 81       	ldd	r24, Z+4	; 0x04
    6886:	8c 7f       	andi	r24, 0xFC	; 252
    6888:	84 83       	std	Z+4, r24	; 0x04
	SREG=s;
    688a:	9f bf       	out	0x3f, r25	; 63
    688c:	08 95       	ret

0000688e <__vector_96>:
}

// PORTH interrupt 0 service routine
// JOG Interrupt routine for positive direction 
ISR (PORTH_INT0_vect)  
{					   
    688e:	1f 92       	push	r1
    6890:	0f 92       	push	r0
    6892:	0f b6       	in	r0, 0x3f	; 63
    6894:	0f 92       	push	r0
    6896:	11 24       	eor	r1, r1
    6898:	08 b6       	in	r0, 0x38	; 56
    689a:	0f 92       	push	r0
    689c:	18 be       	out	0x38, r1	; 56
    689e:	09 b6       	in	r0, 0x39	; 57
    68a0:	0f 92       	push	r0
    68a2:	19 be       	out	0x39, r1	; 57
    68a4:	0a b6       	in	r0, 0x3a	; 58
    68a6:	0f 92       	push	r0
    68a8:	1a be       	out	0x3a, r1	; 58
    68aa:	0b b6       	in	r0, 0x3b	; 59
    68ac:	0f 92       	push	r0
    68ae:	1b be       	out	0x3b, r1	; 59
    68b0:	4f 92       	push	r4
    68b2:	5f 92       	push	r5
    68b4:	6f 92       	push	r6
    68b6:	7f 92       	push	r7
    68b8:	8f 92       	push	r8
    68ba:	9f 92       	push	r9
    68bc:	af 92       	push	r10
    68be:	bf 92       	push	r11
    68c0:	cf 92       	push	r12
    68c2:	df 92       	push	r13
    68c4:	ef 92       	push	r14
    68c6:	ff 92       	push	r15
    68c8:	2f 93       	push	r18
    68ca:	3f 93       	push	r19
    68cc:	4f 93       	push	r20
    68ce:	5f 93       	push	r21
    68d0:	6f 93       	push	r22
    68d2:	7f 93       	push	r23
    68d4:	8f 93       	push	r24
    68d6:	9f 93       	push	r25
    68d8:	af 93       	push	r26
    68da:	bf 93       	push	r27
    68dc:	ef 93       	push	r30
    68de:	ff 93       	push	r31
    68e0:	cf 93       	push	r28
    68e2:	df 93       	push	r29
    68e4:	00 d0       	rcall	.+0      	; 0x68e6 <__vector_96+0x58>
    68e6:	1f 92       	push	r1
    68e8:	cd b7       	in	r28, 0x3d	; 61
    68ea:	de b7       	in	r29, 0x3e	; 62
	if(JogPos)
    68ec:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    68f0:	81 ff       	sbrs	r24, 1
    68f2:	71 c0       	rjmp	.+226    	; 0x69d6 <__vector_96+0x148>
	{
		printf("Jog+\r\n");
    68f4:	8f e9       	ldi	r24, 0x9F	; 159
    68f6:	96 e2       	ldi	r25, 0x26	; 38
    68f8:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
		if(!JogNeg)
    68fc:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    6900:	83 fd       	sbrc	r24, 3
    6902:	25 c2       	rjmp	.+1098   	; 0x6d4e <__vector_96+0x4c0>
		{
			MaxSpeed=10000;
    6904:	80 e1       	ldi	r24, 0x10	; 16
    6906:	97 e2       	ldi	r25, 0x27	; 39
    6908:	a0 e0       	ldi	r26, 0x00	; 0
    690a:	b0 e0       	ldi	r27, 0x00	; 0
    690c:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    6910:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    6914:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    6918:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
			IACC=5000;
    691c:	88 e8       	ldi	r24, 0x88	; 136
    691e:	93 e1       	ldi	r25, 0x13	; 19
    6920:	a0 e0       	ldi	r26, 0x00	; 0
    6922:	b0 e0       	ldi	r27, 0x00	; 0
    6924:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <IACC>
    6928:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <IACC+0x1>
    692c:	a0 93 67 27 	sts	0x2767, r26	; 0x802767 <IACC+0x2>
    6930:	b0 93 68 27 	sts	0x2768, r27	; 0x802768 <IACC+0x3>
			IDEC=5000;
    6934:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <IDEC>
    6938:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <IDEC+0x1>
    693c:	a0 93 63 27 	sts	0x2763, r26	; 0x802763 <IDEC+0x2>
    6940:	b0 93 64 27 	sts	0x2764, r27	; 0x802764 <IDEC+0x3>
			CurSpeedFrq=0;
    6944:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    6948:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    694c:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    6950:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    6954:	8f ef       	ldi	r24, 0xFF	; 255
    6956:	9f ef       	ldi	r25, 0xFF	; 255
    6958:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    695c:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6960:	82 e3       	ldi	r24, 0x32	; 50
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	a0 e0       	ldi	r26, 0x00	; 0
    6966:	b0 e0       	ldi	r27, 0x00	; 0
    6968:	80 93 52 27 	sts	0x2752, r24	; 0x802752 <ACCSpeedINT>
    696c:	90 93 53 27 	sts	0x2753, r25	; 0x802753 <ACCSpeedINT+0x1>
    6970:	a0 93 54 27 	sts	0x2754, r26	; 0x802754 <ACCSpeedINT+0x2>
    6974:	b0 93 55 27 	sts	0x2755, r27	; 0x802755 <ACCSpeedINT+0x3>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    6978:	80 93 4e 27 	sts	0x274E, r24	; 0x80274e <DECSpeedINT>
    697c:	90 93 4f 27 	sts	0x274F, r25	; 0x80274f <DECSpeedINT+0x1>
    6980:	a0 93 50 27 	sts	0x2750, r26	; 0x802750 <DECSpeedINT+0x2>
    6984:	b0 93 51 27 	sts	0x2751, r27	; 0x802751 <DECSpeedINT+0x3>
			switch(SelectedAxis)
    6988:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <SelectedAxis>
    698c:	82 30       	cpi	r24, 0x02	; 2
    698e:	69 f0       	breq	.+26     	; 0x69aa <__vector_96+0x11c>
    6990:	83 30       	cpi	r24, 0x03	; 3
    6992:	a1 f0       	breq	.+40     	; 0x69bc <__vector_96+0x12e>
    6994:	81 30       	cpi	r24, 0x01	; 1
    6996:	d9 f4       	brne	.+54     	; 0x69ce <__vector_96+0x140>
			{
				case 1:
				{
					
					if(!LIM_POS1 && Axes[0].HardwareLimitPosIsActive)
    6998:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    699c:	83 fd       	sbrc	r24, 3
    699e:	38 c0       	rjmp	.+112    	; 0x6a10 <__vector_96+0x182>
    69a0:	80 91 fa 27 	lds	r24, 0x27FA	; 0x8027fa <Axes+0x29>
    69a4:	81 11       	cpse	r24, r1
    69a6:	13 c0       	rjmp	.+38     	; 0x69ce <__vector_96+0x140>
    69a8:	33 c0       	rjmp	.+102    	; 0x6a10 <__vector_96+0x182>
					break;
					
				}
				case 2:
				{
					if(!LIM_POS2 && Axes[1].HardwareLimitPosIsActive)
    69aa:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    69ae:	80 fd       	sbrc	r24, 0
    69b0:	b6 c0       	rjmp	.+364    	; 0x6b1e <__vector_96+0x290>
    69b2:	80 91 25 28 	lds	r24, 0x2825	; 0x802825 <Axes+0x54>
    69b6:	81 11       	cpse	r24, r1
    69b8:	0a c0       	rjmp	.+20     	; 0x69ce <__vector_96+0x140>
    69ba:	b1 c0       	rjmp	.+354    	; 0x6b1e <__vector_96+0x290>
					break;
					
				}
				case 3:
				{
					if(!LIM_POS3 && Axes[2].HardwareLimitPosIsActive)
    69bc:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    69c0:	85 fd       	sbrc	r24, 5
    69c2:	34 c1       	rjmp	.+616    	; 0x6c2c <__vector_96+0x39e>
    69c4:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <Axes+0x7f>
    69c8:	88 23       	and	r24, r24
    69ca:	09 f4       	brne	.+2      	; 0x69ce <__vector_96+0x140>
    69cc:	2f c1       	rjmp	.+606    	; 0x6c2c <__vector_96+0x39e>
					break;
					
				}
			}
			
			ACC=1;
    69ce:	81 e0       	ldi	r24, 0x01	; 1
    69d0:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <ACC>
    69d4:	bc c1       	rjmp	.+888    	; 0x6d4e <__vector_96+0x4c0>
		}
	}
	else if((FreeJog==1 && DIR1)||(FreeJog==2 && DIR2)||(FreeJog==3 && DIR3))
    69d6:	80 91 00 27 	lds	r24, 0x2700	; 0x802700 <FreeJog>
    69da:	81 30       	cpi	r24, 0x01	; 1
    69dc:	29 f4       	brne	.+10     	; 0x69e8 <__vector_96+0x15a>
    69de:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    69e2:	84 fd       	sbrc	r24, 4
    69e4:	0f c0       	rjmp	.+30     	; 0x6a04 <__vector_96+0x176>
    69e6:	b3 c1       	rjmp	.+870    	; 0x6d4e <__vector_96+0x4c0>
    69e8:	82 30       	cpi	r24, 0x02	; 2
    69ea:	29 f4       	brne	.+10     	; 0x69f6 <__vector_96+0x168>
    69ec:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    69f0:	82 fd       	sbrc	r24, 2
    69f2:	08 c0       	rjmp	.+16     	; 0x6a04 <__vector_96+0x176>
    69f4:	ac c1       	rjmp	.+856    	; 0x6d4e <__vector_96+0x4c0>
    69f6:	83 30       	cpi	r24, 0x03	; 3
    69f8:	09 f0       	breq	.+2      	; 0x69fc <__vector_96+0x16e>
    69fa:	a9 c1       	rjmp	.+850    	; 0x6d4e <__vector_96+0x4c0>
    69fc:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6a00:	80 ff       	sbrs	r24, 0
    6a02:	a5 c1       	rjmp	.+842    	; 0x6d4e <__vector_96+0x4c0>
	{
		ACC=0;
    6a04:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <ACC>
		DEC=1;
    6a08:	81 e0       	ldi	r24, 0x01	; 1
    6a0a:	80 93 4c 27 	sts	0x274C, r24	; 0x80274c <DEC>
	}
}
    6a0e:	9f c1       	rjmp	.+830    	; 0x6d4e <__vector_96+0x4c0>
				case 1:
				{
					
					if(!LIM_POS1 && Axes[0].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[0].MaxSpeed;
    6a10:	e1 ed       	ldi	r30, 0xD1	; 209
    6a12:	f7 e2       	ldi	r31, 0x27	; 39
    6a14:	c5 80       	ldd	r12, Z+5	; 0x05
    6a16:	d6 80       	ldd	r13, Z+6	; 0x06
    6a18:	e7 80       	ldd	r14, Z+7	; 0x07
    6a1a:	f0 84       	ldd	r15, Z+8	; 0x08
    6a1c:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    6a20:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    6a24:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    6a28:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    6a2c:	41 84       	ldd	r4, Z+9	; 0x09
    6a2e:	52 84       	ldd	r5, Z+10	; 0x0a
    6a30:	63 84       	ldd	r6, Z+11	; 0x0b
    6a32:	74 84       	ldd	r7, Z+12	; 0x0c
    6a34:	40 92 65 27 	sts	0x2765, r4	; 0x802765 <IACC>
    6a38:	50 92 66 27 	sts	0x2766, r5	; 0x802766 <IACC+0x1>
    6a3c:	60 92 67 27 	sts	0x2767, r6	; 0x802767 <IACC+0x2>
    6a40:	70 92 68 27 	sts	0x2768, r7	; 0x802768 <IACC+0x3>
					IDEC=Axes[0].DEC;
    6a44:	85 84       	ldd	r8, Z+13	; 0x0d
    6a46:	96 84       	ldd	r9, Z+14	; 0x0e
    6a48:	a7 84       	ldd	r10, Z+15	; 0x0f
    6a4a:	b0 88       	ldd	r11, Z+16	; 0x10
    6a4c:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    6a50:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    6a54:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    6a58:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6a5c:	c7 01       	movw	r24, r14
    6a5e:	b6 01       	movw	r22, r12
    6a60:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6a64:	20 e0       	ldi	r18, 0x00	; 0
    6a66:	30 e0       	ldi	r19, 0x00	; 0
    6a68:	48 ec       	ldi	r20, 0xC8	; 200
    6a6a:	52 e4       	ldi	r21, 0x42	; 66
    6a6c:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    6a70:	69 83       	std	Y+1, r22	; 0x01
    6a72:	7a 83       	std	Y+2, r23	; 0x02
    6a74:	8b 83       	std	Y+3, r24	; 0x03
    6a76:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6a78:	c3 01       	movw	r24, r6
    6a7a:	b2 01       	movw	r22, r4
    6a7c:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6a80:	9b 01       	movw	r18, r22
    6a82:	ac 01       	movw	r20, r24
    6a84:	69 81       	ldd	r22, Y+1	; 0x01
    6a86:	7a 81       	ldd	r23, Y+2	; 0x02
    6a88:	8b 81       	ldd	r24, Y+3	; 0x03
    6a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    6a8c:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6a90:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6a94:	9b 01       	movw	r18, r22
    6a96:	ac 01       	movw	r20, r24
    6a98:	c7 01       	movw	r24, r14
    6a9a:	b6 01       	movw	r22, r12
    6a9c:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6aa0:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    6aa4:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    6aa8:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    6aac:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6ab0:	c5 01       	movw	r24, r10
    6ab2:	b4 01       	movw	r22, r8
    6ab4:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6ab8:	9b 01       	movw	r18, r22
    6aba:	ac 01       	movw	r20, r24
    6abc:	69 81       	ldd	r22, Y+1	; 0x01
    6abe:	7a 81       	ldd	r23, Y+2	; 0x02
    6ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    6ac4:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6ac8:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6acc:	9b 01       	movw	r18, r22
    6ace:	ac 01       	movw	r20, r24
    6ad0:	c7 01       	movw	r24, r14
    6ad2:	b6 01       	movw	r22, r12
    6ad4:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6ad8:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    6adc:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    6ae0:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    6ae4:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
					
					SET_DIR1;
    6ae8:	e0 e2       	ldi	r30, 0x20	; 32
    6aea:	f7 e0       	ldi	r31, 0x07	; 7
    6aec:	84 81       	ldd	r24, Z+4	; 0x04
    6aee:	80 61       	ori	r24, 0x10	; 16
    6af0:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=1;
    6af2:	81 e0       	ldi	r24, 0x01	; 1
    6af4:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
					Ma1=1000;
    6af8:	88 ee       	ldi	r24, 0xE8	; 232
    6afa:	93 e0       	ldi	r25, 0x03	; 3
    6afc:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <Ma1>
    6b00:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <Ma1+0x1>
					DistanceToGo1=0x7FFFFFFF;
    6b04:	8f ef       	ldi	r24, 0xFF	; 255
    6b06:	9f ef       	ldi	r25, 0xFF	; 255
    6b08:	af ef       	ldi	r26, 0xFF	; 255
    6b0a:	bf e7       	ldi	r27, 0x7F	; 127
    6b0c:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <DistanceToGo1>
    6b10:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <DistanceToGo1+0x1>
    6b14:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <DistanceToGo1+0x2>
    6b18:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <DistanceToGo1+0x3>
					break;
    6b1c:	58 cf       	rjmp	.-336    	; 0x69ce <__vector_96+0x140>
				}
				case 2:
				{
					if(!LIM_POS2 && Axes[1].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[1].MaxSpeed;
    6b1e:	e1 ed       	ldi	r30, 0xD1	; 209
    6b20:	f7 e2       	ldi	r31, 0x27	; 39
    6b22:	c0 a8       	ldd	r12, Z+48	; 0x30
    6b24:	d1 a8       	ldd	r13, Z+49	; 0x31
    6b26:	e2 a8       	ldd	r14, Z+50	; 0x32
    6b28:	f3 a8       	ldd	r15, Z+51	; 0x33
    6b2a:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    6b2e:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    6b32:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    6b36:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    6b3a:	44 a8       	ldd	r4, Z+52	; 0x34
    6b3c:	55 a8       	ldd	r5, Z+53	; 0x35
    6b3e:	66 a8       	ldd	r6, Z+54	; 0x36
    6b40:	77 a8       	ldd	r7, Z+55	; 0x37
    6b42:	40 92 65 27 	sts	0x2765, r4	; 0x802765 <IACC>
    6b46:	50 92 66 27 	sts	0x2766, r5	; 0x802766 <IACC+0x1>
    6b4a:	60 92 67 27 	sts	0x2767, r6	; 0x802767 <IACC+0x2>
    6b4e:	70 92 68 27 	sts	0x2768, r7	; 0x802768 <IACC+0x3>
					IDEC=Axes[1].DEC;
    6b52:	80 ac       	ldd	r8, Z+56	; 0x38
    6b54:	91 ac       	ldd	r9, Z+57	; 0x39
    6b56:	a2 ac       	ldd	r10, Z+58	; 0x3a
    6b58:	b3 ac       	ldd	r11, Z+59	; 0x3b
    6b5a:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    6b5e:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    6b62:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    6b66:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6b6a:	c7 01       	movw	r24, r14
    6b6c:	b6 01       	movw	r22, r12
    6b6e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6b72:	20 e0       	ldi	r18, 0x00	; 0
    6b74:	30 e0       	ldi	r19, 0x00	; 0
    6b76:	48 ec       	ldi	r20, 0xC8	; 200
    6b78:	52 e4       	ldi	r21, 0x42	; 66
    6b7a:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    6b7e:	69 83       	std	Y+1, r22	; 0x01
    6b80:	7a 83       	std	Y+2, r23	; 0x02
    6b82:	8b 83       	std	Y+3, r24	; 0x03
    6b84:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6b86:	c3 01       	movw	r24, r6
    6b88:	b2 01       	movw	r22, r4
    6b8a:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6b8e:	9b 01       	movw	r18, r22
    6b90:	ac 01       	movw	r20, r24
    6b92:	69 81       	ldd	r22, Y+1	; 0x01
    6b94:	7a 81       	ldd	r23, Y+2	; 0x02
    6b96:	8b 81       	ldd	r24, Y+3	; 0x03
    6b98:	9c 81       	ldd	r25, Y+4	; 0x04
    6b9a:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6b9e:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6ba2:	9b 01       	movw	r18, r22
    6ba4:	ac 01       	movw	r20, r24
    6ba6:	c7 01       	movw	r24, r14
    6ba8:	b6 01       	movw	r22, r12
    6baa:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6bae:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    6bb2:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    6bb6:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    6bba:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6bbe:	c5 01       	movw	r24, r10
    6bc0:	b4 01       	movw	r22, r8
    6bc2:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6bc6:	9b 01       	movw	r18, r22
    6bc8:	ac 01       	movw	r20, r24
    6bca:	69 81       	ldd	r22, Y+1	; 0x01
    6bcc:	7a 81       	ldd	r23, Y+2	; 0x02
    6bce:	8b 81       	ldd	r24, Y+3	; 0x03
    6bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    6bd2:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6bd6:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6bda:	9b 01       	movw	r18, r22
    6bdc:	ac 01       	movw	r20, r24
    6bde:	c7 01       	movw	r24, r14
    6be0:	b6 01       	movw	r22, r12
    6be2:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6be6:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    6bea:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    6bee:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    6bf2:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
					
					SET_DIR2;
    6bf6:	e0 e2       	ldi	r30, 0x20	; 32
    6bf8:	f7 e0       	ldi	r31, 0x07	; 7
    6bfa:	84 81       	ldd	r24, Z+4	; 0x04
    6bfc:	84 60       	ori	r24, 0x04	; 4
    6bfe:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=2;
    6c00:	82 e0       	ldi	r24, 0x02	; 2
    6c02:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
					Ma2=1000;
    6c06:	88 ee       	ldi	r24, 0xE8	; 232
    6c08:	93 e0       	ldi	r25, 0x03	; 3
    6c0a:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <Ma2>
    6c0e:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <Ma2+0x1>
					DistanceToGo2=0x7FFFFFFF;
    6c12:	8f ef       	ldi	r24, 0xFF	; 255
    6c14:	9f ef       	ldi	r25, 0xFF	; 255
    6c16:	af ef       	ldi	r26, 0xFF	; 255
    6c18:	bf e7       	ldi	r27, 0x7F	; 127
    6c1a:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <DistanceToGo2>
    6c1e:	90 93 a1 27 	sts	0x27A1, r25	; 0x8027a1 <DistanceToGo2+0x1>
    6c22:	a0 93 a2 27 	sts	0x27A2, r26	; 0x8027a2 <DistanceToGo2+0x2>
    6c26:	b0 93 a3 27 	sts	0x27A3, r27	; 0x8027a3 <DistanceToGo2+0x3>
					break;
    6c2a:	d1 ce       	rjmp	.-606    	; 0x69ce <__vector_96+0x140>
				}
				case 3:
				{
					if(!LIM_POS3 && Axes[2].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[2].MaxSpeed;
    6c2c:	c0 90 2c 28 	lds	r12, 0x282C	; 0x80282c <Axes+0x5b>
    6c30:	d0 90 2d 28 	lds	r13, 0x282D	; 0x80282d <Axes+0x5c>
    6c34:	e0 90 2e 28 	lds	r14, 0x282E	; 0x80282e <Axes+0x5d>
    6c38:	f0 90 2f 28 	lds	r15, 0x282F	; 0x80282f <Axes+0x5e>
    6c3c:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    6c40:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    6c44:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    6c48:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    6c4c:	40 90 30 28 	lds	r4, 0x2830	; 0x802830 <Axes+0x5f>
    6c50:	50 90 31 28 	lds	r5, 0x2831	; 0x802831 <Axes+0x60>
    6c54:	60 90 32 28 	lds	r6, 0x2832	; 0x802832 <Axes+0x61>
    6c58:	70 90 33 28 	lds	r7, 0x2833	; 0x802833 <Axes+0x62>
    6c5c:	40 92 65 27 	sts	0x2765, r4	; 0x802765 <IACC>
    6c60:	50 92 66 27 	sts	0x2766, r5	; 0x802766 <IACC+0x1>
    6c64:	60 92 67 27 	sts	0x2767, r6	; 0x802767 <IACC+0x2>
    6c68:	70 92 68 27 	sts	0x2768, r7	; 0x802768 <IACC+0x3>
					IDEC=Axes[2].DEC;
    6c6c:	80 90 34 28 	lds	r8, 0x2834	; 0x802834 <Axes+0x63>
    6c70:	90 90 35 28 	lds	r9, 0x2835	; 0x802835 <Axes+0x64>
    6c74:	a0 90 36 28 	lds	r10, 0x2836	; 0x802836 <Axes+0x65>
    6c78:	b0 90 37 28 	lds	r11, 0x2837	; 0x802837 <Axes+0x66>
    6c7c:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    6c80:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    6c84:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    6c88:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6c8c:	c7 01       	movw	r24, r14
    6c8e:	b6 01       	movw	r22, r12
    6c90:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6c94:	20 e0       	ldi	r18, 0x00	; 0
    6c96:	30 e0       	ldi	r19, 0x00	; 0
    6c98:	48 ec       	ldi	r20, 0xC8	; 200
    6c9a:	52 e4       	ldi	r21, 0x42	; 66
    6c9c:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    6ca0:	69 83       	std	Y+1, r22	; 0x01
    6ca2:	7a 83       	std	Y+2, r23	; 0x02
    6ca4:	8b 83       	std	Y+3, r24	; 0x03
    6ca6:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6ca8:	c3 01       	movw	r24, r6
    6caa:	b2 01       	movw	r22, r4
    6cac:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6cb0:	9b 01       	movw	r18, r22
    6cb2:	ac 01       	movw	r20, r24
    6cb4:	69 81       	ldd	r22, Y+1	; 0x01
    6cb6:	7a 81       	ldd	r23, Y+2	; 0x02
    6cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    6cba:	9c 81       	ldd	r25, Y+4	; 0x04
    6cbc:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6cc0:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6cc4:	9b 01       	movw	r18, r22
    6cc6:	ac 01       	movw	r20, r24
    6cc8:	c7 01       	movw	r24, r14
    6cca:	b6 01       	movw	r22, r12
    6ccc:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6cd0:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    6cd4:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    6cd8:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    6cdc:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6ce0:	c5 01       	movw	r24, r10
    6ce2:	b4 01       	movw	r22, r8
    6ce4:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6ce8:	9b 01       	movw	r18, r22
    6cea:	ac 01       	movw	r20, r24
    6cec:	69 81       	ldd	r22, Y+1	; 0x01
    6cee:	7a 81       	ldd	r23, Y+2	; 0x02
    6cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    6cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    6cf4:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6cf8:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6cfc:	9b 01       	movw	r18, r22
    6cfe:	ac 01       	movw	r20, r24
    6d00:	c7 01       	movw	r24, r14
    6d02:	b6 01       	movw	r22, r12
    6d04:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6d08:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    6d0c:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    6d10:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    6d14:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
					
					SET_DIR3;
    6d18:	e0 e2       	ldi	r30, 0x20	; 32
    6d1a:	f7 e0       	ldi	r31, 0x07	; 7
    6d1c:	84 81       	ldd	r24, Z+4	; 0x04
    6d1e:	81 60       	ori	r24, 0x01	; 1
    6d20:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=3;
    6d22:	83 e0       	ldi	r24, 0x03	; 3
    6d24:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
					Ma3=1000;
    6d28:	88 ee       	ldi	r24, 0xE8	; 232
    6d2a:	93 e0       	ldi	r25, 0x03	; 3
    6d2c:	80 93 40 27 	sts	0x2740, r24	; 0x802740 <Ma3>
    6d30:	90 93 41 27 	sts	0x2741, r25	; 0x802741 <Ma3+0x1>
					DistanceToGo3=0x7FFFFFFF;
    6d34:	8f ef       	ldi	r24, 0xFF	; 255
    6d36:	9f ef       	ldi	r25, 0xFF	; 255
    6d38:	af ef       	ldi	r26, 0xFF	; 255
    6d3a:	bf e7       	ldi	r27, 0x7F	; 127
    6d3c:	80 93 9c 27 	sts	0x279C, r24	; 0x80279c <DistanceToGo3>
    6d40:	90 93 9d 27 	sts	0x279D, r25	; 0x80279d <DistanceToGo3+0x1>
    6d44:	a0 93 9e 27 	sts	0x279E, r26	; 0x80279e <DistanceToGo3+0x2>
    6d48:	b0 93 9f 27 	sts	0x279F, r27	; 0x80279f <DistanceToGo3+0x3>
					break;
    6d4c:	40 ce       	rjmp	.-896    	; 0x69ce <__vector_96+0x140>
	else if((FreeJog==1 && DIR1)||(FreeJog==2 && DIR2)||(FreeJog==3 && DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    6d4e:	24 96       	adiw	r28, 0x04	; 4
    6d50:	cd bf       	out	0x3d, r28	; 61
    6d52:	de bf       	out	0x3e, r29	; 62
    6d54:	df 91       	pop	r29
    6d56:	cf 91       	pop	r28
    6d58:	ff 91       	pop	r31
    6d5a:	ef 91       	pop	r30
    6d5c:	bf 91       	pop	r27
    6d5e:	af 91       	pop	r26
    6d60:	9f 91       	pop	r25
    6d62:	8f 91       	pop	r24
    6d64:	7f 91       	pop	r23
    6d66:	6f 91       	pop	r22
    6d68:	5f 91       	pop	r21
    6d6a:	4f 91       	pop	r20
    6d6c:	3f 91       	pop	r19
    6d6e:	2f 91       	pop	r18
    6d70:	ff 90       	pop	r15
    6d72:	ef 90       	pop	r14
    6d74:	df 90       	pop	r13
    6d76:	cf 90       	pop	r12
    6d78:	bf 90       	pop	r11
    6d7a:	af 90       	pop	r10
    6d7c:	9f 90       	pop	r9
    6d7e:	8f 90       	pop	r8
    6d80:	7f 90       	pop	r7
    6d82:	6f 90       	pop	r6
    6d84:	5f 90       	pop	r5
    6d86:	4f 90       	pop	r4
    6d88:	0f 90       	pop	r0
    6d8a:	0b be       	out	0x3b, r0	; 59
    6d8c:	0f 90       	pop	r0
    6d8e:	0a be       	out	0x3a, r0	; 58
    6d90:	0f 90       	pop	r0
    6d92:	09 be       	out	0x39, r0	; 57
    6d94:	0f 90       	pop	r0
    6d96:	08 be       	out	0x38, r0	; 56
    6d98:	0f 90       	pop	r0
    6d9a:	0f be       	out	0x3f, r0	; 63
    6d9c:	0f 90       	pop	r0
    6d9e:	1f 90       	pop	r1
    6da0:	18 95       	reti

00006da2 <__vector_64>:

// PORTH interrupt 0 service routine
// Interrupt for Negative jog key 
ISR (PORTD_INT0_vect)
{
    6da2:	1f 92       	push	r1
    6da4:	0f 92       	push	r0
    6da6:	0f b6       	in	r0, 0x3f	; 63
    6da8:	0f 92       	push	r0
    6daa:	11 24       	eor	r1, r1
    6dac:	08 b6       	in	r0, 0x38	; 56
    6dae:	0f 92       	push	r0
    6db0:	18 be       	out	0x38, r1	; 56
    6db2:	09 b6       	in	r0, 0x39	; 57
    6db4:	0f 92       	push	r0
    6db6:	19 be       	out	0x39, r1	; 57
    6db8:	0a b6       	in	r0, 0x3a	; 58
    6dba:	0f 92       	push	r0
    6dbc:	1a be       	out	0x3a, r1	; 58
    6dbe:	0b b6       	in	r0, 0x3b	; 59
    6dc0:	0f 92       	push	r0
    6dc2:	1b be       	out	0x3b, r1	; 59
    6dc4:	4f 92       	push	r4
    6dc6:	5f 92       	push	r5
    6dc8:	6f 92       	push	r6
    6dca:	7f 92       	push	r7
    6dcc:	8f 92       	push	r8
    6dce:	9f 92       	push	r9
    6dd0:	af 92       	push	r10
    6dd2:	bf 92       	push	r11
    6dd4:	cf 92       	push	r12
    6dd6:	df 92       	push	r13
    6dd8:	ef 92       	push	r14
    6dda:	ff 92       	push	r15
    6ddc:	2f 93       	push	r18
    6dde:	3f 93       	push	r19
    6de0:	4f 93       	push	r20
    6de2:	5f 93       	push	r21
    6de4:	6f 93       	push	r22
    6de6:	7f 93       	push	r23
    6de8:	8f 93       	push	r24
    6dea:	9f 93       	push	r25
    6dec:	af 93       	push	r26
    6dee:	bf 93       	push	r27
    6df0:	ef 93       	push	r30
    6df2:	ff 93       	push	r31
    6df4:	cf 93       	push	r28
    6df6:	df 93       	push	r29
    6df8:	00 d0       	rcall	.+0      	; 0x6dfa <__vector_64+0x58>
    6dfa:	1f 92       	push	r1
    6dfc:	cd b7       	in	r28, 0x3d	; 61
    6dfe:	de b7       	in	r29, 0x3e	; 62
	if(JogNeg)
    6e00:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    6e04:	83 ff       	sbrs	r24, 3
    6e06:	8d c0       	rjmp	.+282    	; 0x6f22 <__vector_64+0x180>
	{
		if(!JogPos)
    6e08:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    6e0c:	81 fd       	sbrc	r24, 1
    6e0e:	45 c2       	rjmp	.+1162   	; 0x729a <__vector_64+0x4f8>
		{
			CurSpeedFrq=0;
    6e10:	10 92 56 27 	sts	0x2756, r1	; 0x802756 <CurSpeedFrq>
    6e14:	10 92 57 27 	sts	0x2757, r1	; 0x802757 <CurSpeedFrq+0x1>
    6e18:	10 92 58 27 	sts	0x2758, r1	; 0x802758 <CurSpeedFrq+0x2>
    6e1c:	10 92 59 27 	sts	0x2759, r1	; 0x802759 <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    6e20:	8f ef       	ldi	r24, 0xFF	; 255
    6e22:	9f ef       	ldi	r25, 0xFF	; 255
    6e24:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    6e28:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6e2c:	c0 90 81 27 	lds	r12, 0x2781	; 0x802781 <MaxSpeed>
    6e30:	d0 90 82 27 	lds	r13, 0x2782	; 0x802782 <MaxSpeed+0x1>
    6e34:	e0 90 83 27 	lds	r14, 0x2783	; 0x802783 <MaxSpeed+0x2>
    6e38:	f0 90 84 27 	lds	r15, 0x2784	; 0x802784 <MaxSpeed+0x3>
    6e3c:	c7 01       	movw	r24, r14
    6e3e:	b6 01       	movw	r22, r12
    6e40:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6e44:	20 e0       	ldi	r18, 0x00	; 0
    6e46:	30 e0       	ldi	r19, 0x00	; 0
    6e48:	48 ec       	ldi	r20, 0xC8	; 200
    6e4a:	52 e4       	ldi	r21, 0x42	; 66
    6e4c:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    6e50:	4b 01       	movw	r8, r22
    6e52:	5c 01       	movw	r10, r24
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6e54:	60 91 65 27 	lds	r22, 0x2765	; 0x802765 <IACC>
    6e58:	70 91 66 27 	lds	r23, 0x2766	; 0x802766 <IACC+0x1>
    6e5c:	80 91 67 27 	lds	r24, 0x2767	; 0x802767 <IACC+0x2>
    6e60:	90 91 68 27 	lds	r25, 0x2768	; 0x802768 <IACC+0x3>
    6e64:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6e68:	9b 01       	movw	r18, r22
    6e6a:	ac 01       	movw	r20, r24
    6e6c:	c5 01       	movw	r24, r10
    6e6e:	b4 01       	movw	r22, r8
    6e70:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6e74:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6e78:	9b 01       	movw	r18, r22
    6e7a:	ac 01       	movw	r20, r24
    6e7c:	c7 01       	movw	r24, r14
    6e7e:	b6 01       	movw	r22, r12
    6e80:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6e84:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    6e88:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    6e8c:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    6e90:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    6e94:	60 91 61 27 	lds	r22, 0x2761	; 0x802761 <IDEC>
    6e98:	70 91 62 27 	lds	r23, 0x2762	; 0x802762 <IDEC+0x1>
    6e9c:	80 91 63 27 	lds	r24, 0x2763	; 0x802763 <IDEC+0x2>
    6ea0:	90 91 64 27 	lds	r25, 0x2764	; 0x802764 <IDEC+0x3>
    6ea4:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6ea8:	9b 01       	movw	r18, r22
    6eaa:	ac 01       	movw	r20, r24
    6eac:	c5 01       	movw	r24, r10
    6eae:	b4 01       	movw	r22, r8
    6eb0:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6eb4:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6eb8:	9b 01       	movw	r18, r22
    6eba:	ac 01       	movw	r20, r24
    6ebc:	c7 01       	movw	r24, r14
    6ebe:	b6 01       	movw	r22, r12
    6ec0:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6ec4:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    6ec8:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    6ecc:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    6ed0:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
			switch(SelectedAxis)
    6ed4:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <SelectedAxis>
    6ed8:	82 30       	cpi	r24, 0x02	; 2
    6eda:	69 f0       	breq	.+26     	; 0x6ef6 <__vector_64+0x154>
    6edc:	83 30       	cpi	r24, 0x03	; 3
    6ede:	a1 f0       	breq	.+40     	; 0x6f08 <__vector_64+0x166>
    6ee0:	81 30       	cpi	r24, 0x01	; 1
    6ee2:	d9 f4       	brne	.+54     	; 0x6f1a <__vector_64+0x178>
			{
				case 1:
				{
					if(!LIM_NEG1 && Axes[0].HardwareLimitNegIsActive)
    6ee4:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    6ee8:	84 fd       	sbrc	r24, 4
    6eea:	38 c0       	rjmp	.+112    	; 0x6f5c <__vector_64+0x1ba>
    6eec:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <Axes+0x2a>
    6ef0:	81 11       	cpse	r24, r1
    6ef2:	13 c0       	rjmp	.+38     	; 0x6f1a <__vector_64+0x178>
    6ef4:	33 c0       	rjmp	.+102    	; 0x6f5c <__vector_64+0x1ba>
					break;
					
				}
				case 2:
				{
					if(!LIM_NEG2 && Axes[1].HardwareLimitNegIsActive)
    6ef6:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    6efa:	86 fd       	sbrc	r24, 6
    6efc:	b6 c0       	rjmp	.+364    	; 0x706a <__vector_64+0x2c8>
    6efe:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <Axes+0x55>
    6f02:	81 11       	cpse	r24, r1
    6f04:	0a c0       	rjmp	.+20     	; 0x6f1a <__vector_64+0x178>
    6f06:	b1 c0       	rjmp	.+354    	; 0x706a <__vector_64+0x2c8>
					break;
					
				}
				case 3:
				{
					if(!LIM_NEG3 && Axes[2].HardwareLimitNegIsActive)
    6f08:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    6f0c:	84 fd       	sbrc	r24, 4
    6f0e:	34 c1       	rjmp	.+616    	; 0x7178 <__vector_64+0x3d6>
    6f10:	80 91 51 28 	lds	r24, 0x2851	; 0x802851 <Axes+0x80>
    6f14:	88 23       	and	r24, r24
    6f16:	09 f4       	brne	.+2      	; 0x6f1a <__vector_64+0x178>
    6f18:	2f c1       	rjmp	.+606    	; 0x7178 <__vector_64+0x3d6>
					DistanceToGo3=0x7FFFFFFF;
					break;
				}
			}
			
			ACC=1;
    6f1a:	81 e0       	ldi	r24, 0x01	; 1
    6f1c:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <ACC>
    6f20:	bc c1       	rjmp	.+888    	; 0x729a <__vector_64+0x4f8>
		}
	}
	else if((FreeJog==1 && !DIR1)||(FreeJog==2 && !DIR2)||(FreeJog==3 && !DIR3))
    6f22:	80 91 00 27 	lds	r24, 0x2700	; 0x802700 <FreeJog>
    6f26:	81 30       	cpi	r24, 0x01	; 1
    6f28:	29 f4       	brne	.+10     	; 0x6f34 <__vector_64+0x192>
    6f2a:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6f2e:	84 ff       	sbrs	r24, 4
    6f30:	0f c0       	rjmp	.+30     	; 0x6f50 <__vector_64+0x1ae>
    6f32:	b3 c1       	rjmp	.+870    	; 0x729a <__vector_64+0x4f8>
    6f34:	82 30       	cpi	r24, 0x02	; 2
    6f36:	29 f4       	brne	.+10     	; 0x6f42 <__vector_64+0x1a0>
    6f38:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6f3c:	82 ff       	sbrs	r24, 2
    6f3e:	08 c0       	rjmp	.+16     	; 0x6f50 <__vector_64+0x1ae>
    6f40:	ac c1       	rjmp	.+856    	; 0x729a <__vector_64+0x4f8>
    6f42:	83 30       	cpi	r24, 0x03	; 3
    6f44:	09 f0       	breq	.+2      	; 0x6f48 <__vector_64+0x1a6>
    6f46:	a9 c1       	rjmp	.+850    	; 0x729a <__vector_64+0x4f8>
    6f48:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6f4c:	80 fd       	sbrc	r24, 0
    6f4e:	a5 c1       	rjmp	.+842    	; 0x729a <__vector_64+0x4f8>
	{
		ACC=0;
    6f50:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <ACC>
		DEC=1;
    6f54:	81 e0       	ldi	r24, 0x01	; 1
    6f56:	80 93 4c 27 	sts	0x274C, r24	; 0x80274c <DEC>
	}
}
    6f5a:	9f c1       	rjmp	.+830    	; 0x729a <__vector_64+0x4f8>
			{
				case 1:
				{
					if(!LIM_NEG1 && Axes[0].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[0].MaxSpeed;
    6f5c:	e1 ed       	ldi	r30, 0xD1	; 209
    6f5e:	f7 e2       	ldi	r31, 0x27	; 39
    6f60:	c5 80       	ldd	r12, Z+5	; 0x05
    6f62:	d6 80       	ldd	r13, Z+6	; 0x06
    6f64:	e7 80       	ldd	r14, Z+7	; 0x07
    6f66:	f0 84       	ldd	r15, Z+8	; 0x08
    6f68:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    6f6c:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    6f70:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    6f74:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    6f78:	41 84       	ldd	r4, Z+9	; 0x09
    6f7a:	52 84       	ldd	r5, Z+10	; 0x0a
    6f7c:	63 84       	ldd	r6, Z+11	; 0x0b
    6f7e:	74 84       	ldd	r7, Z+12	; 0x0c
    6f80:	40 92 65 27 	sts	0x2765, r4	; 0x802765 <IACC>
    6f84:	50 92 66 27 	sts	0x2766, r5	; 0x802766 <IACC+0x1>
    6f88:	60 92 67 27 	sts	0x2767, r6	; 0x802767 <IACC+0x2>
    6f8c:	70 92 68 27 	sts	0x2768, r7	; 0x802768 <IACC+0x3>
					IDEC=Axes[0].DEC;
    6f90:	85 84       	ldd	r8, Z+13	; 0x0d
    6f92:	96 84       	ldd	r9, Z+14	; 0x0e
    6f94:	a7 84       	ldd	r10, Z+15	; 0x0f
    6f96:	b0 88       	ldd	r11, Z+16	; 0x10
    6f98:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    6f9c:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    6fa0:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    6fa4:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6fa8:	c7 01       	movw	r24, r14
    6faa:	b6 01       	movw	r22, r12
    6fac:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6fb0:	20 e0       	ldi	r18, 0x00	; 0
    6fb2:	30 e0       	ldi	r19, 0x00	; 0
    6fb4:	48 ec       	ldi	r20, 0xC8	; 200
    6fb6:	52 e4       	ldi	r21, 0x42	; 66
    6fb8:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    6fbc:	69 83       	std	Y+1, r22	; 0x01
    6fbe:	7a 83       	std	Y+2, r23	; 0x02
    6fc0:	8b 83       	std	Y+3, r24	; 0x03
    6fc2:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6fc4:	c3 01       	movw	r24, r6
    6fc6:	b2 01       	movw	r22, r4
    6fc8:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    6fcc:	9b 01       	movw	r18, r22
    6fce:	ac 01       	movw	r20, r24
    6fd0:	69 81       	ldd	r22, Y+1	; 0x01
    6fd2:	7a 81       	ldd	r23, Y+2	; 0x02
    6fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    6fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    6fd8:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    6fdc:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    6fe0:	9b 01       	movw	r18, r22
    6fe2:	ac 01       	movw	r20, r24
    6fe4:	c7 01       	movw	r24, r14
    6fe6:	b6 01       	movw	r22, r12
    6fe8:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    6fec:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    6ff0:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    6ff4:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    6ff8:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6ffc:	c5 01       	movw	r24, r10
    6ffe:	b4 01       	movw	r22, r8
    7000:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    7004:	9b 01       	movw	r18, r22
    7006:	ac 01       	movw	r20, r24
    7008:	69 81       	ldd	r22, Y+1	; 0x01
    700a:	7a 81       	ldd	r23, Y+2	; 0x02
    700c:	8b 81       	ldd	r24, Y+3	; 0x03
    700e:	9c 81       	ldd	r25, Y+4	; 0x04
    7010:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    7014:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    7018:	9b 01       	movw	r18, r22
    701a:	ac 01       	movw	r20, r24
    701c:	c7 01       	movw	r24, r14
    701e:	b6 01       	movw	r22, r12
    7020:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    7024:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    7028:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    702c:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    7030:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
					
					CLR_DIR1;
    7034:	e0 e2       	ldi	r30, 0x20	; 32
    7036:	f7 e0       	ldi	r31, 0x07	; 7
    7038:	84 81       	ldd	r24, Z+4	; 0x04
    703a:	8f 7e       	andi	r24, 0xEF	; 239
    703c:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=1;
    703e:	81 e0       	ldi	r24, 0x01	; 1
    7040:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
					Ma1=1000;
    7044:	88 ee       	ldi	r24, 0xE8	; 232
    7046:	93 e0       	ldi	r25, 0x03	; 3
    7048:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <Ma1>
    704c:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <Ma1+0x1>
					DistanceToGo1=0x7FFFFFFF;
    7050:	8f ef       	ldi	r24, 0xFF	; 255
    7052:	9f ef       	ldi	r25, 0xFF	; 255
    7054:	af ef       	ldi	r26, 0xFF	; 255
    7056:	bf e7       	ldi	r27, 0x7F	; 127
    7058:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <DistanceToGo1>
    705c:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <DistanceToGo1+0x1>
    7060:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <DistanceToGo1+0x2>
    7064:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <DistanceToGo1+0x3>
					break;
    7068:	58 cf       	rjmp	.-336    	; 0x6f1a <__vector_64+0x178>
				}
				case 2:
				{
					if(!LIM_NEG2 && Axes[1].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[1].MaxSpeed;
    706a:	e1 ed       	ldi	r30, 0xD1	; 209
    706c:	f7 e2       	ldi	r31, 0x27	; 39
    706e:	c0 a8       	ldd	r12, Z+48	; 0x30
    7070:	d1 a8       	ldd	r13, Z+49	; 0x31
    7072:	e2 a8       	ldd	r14, Z+50	; 0x32
    7074:	f3 a8       	ldd	r15, Z+51	; 0x33
    7076:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    707a:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    707e:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    7082:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    7086:	44 a8       	ldd	r4, Z+52	; 0x34
    7088:	55 a8       	ldd	r5, Z+53	; 0x35
    708a:	66 a8       	ldd	r6, Z+54	; 0x36
    708c:	77 a8       	ldd	r7, Z+55	; 0x37
    708e:	40 92 65 27 	sts	0x2765, r4	; 0x802765 <IACC>
    7092:	50 92 66 27 	sts	0x2766, r5	; 0x802766 <IACC+0x1>
    7096:	60 92 67 27 	sts	0x2767, r6	; 0x802767 <IACC+0x2>
    709a:	70 92 68 27 	sts	0x2768, r7	; 0x802768 <IACC+0x3>
					IDEC=Axes[1].DEC;
    709e:	80 ac       	ldd	r8, Z+56	; 0x38
    70a0:	91 ac       	ldd	r9, Z+57	; 0x39
    70a2:	a2 ac       	ldd	r10, Z+58	; 0x3a
    70a4:	b3 ac       	ldd	r11, Z+59	; 0x3b
    70a6:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    70aa:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    70ae:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    70b2:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    70b6:	c7 01       	movw	r24, r14
    70b8:	b6 01       	movw	r22, r12
    70ba:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    70be:	20 e0       	ldi	r18, 0x00	; 0
    70c0:	30 e0       	ldi	r19, 0x00	; 0
    70c2:	48 ec       	ldi	r20, 0xC8	; 200
    70c4:	52 e4       	ldi	r21, 0x42	; 66
    70c6:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    70ca:	69 83       	std	Y+1, r22	; 0x01
    70cc:	7a 83       	std	Y+2, r23	; 0x02
    70ce:	8b 83       	std	Y+3, r24	; 0x03
    70d0:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    70d2:	c3 01       	movw	r24, r6
    70d4:	b2 01       	movw	r22, r4
    70d6:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    70da:	9b 01       	movw	r18, r22
    70dc:	ac 01       	movw	r20, r24
    70de:	69 81       	ldd	r22, Y+1	; 0x01
    70e0:	7a 81       	ldd	r23, Y+2	; 0x02
    70e2:	8b 81       	ldd	r24, Y+3	; 0x03
    70e4:	9c 81       	ldd	r25, Y+4	; 0x04
    70e6:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    70ea:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    70ee:	9b 01       	movw	r18, r22
    70f0:	ac 01       	movw	r20, r24
    70f2:	c7 01       	movw	r24, r14
    70f4:	b6 01       	movw	r22, r12
    70f6:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    70fa:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    70fe:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    7102:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    7106:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    710a:	c5 01       	movw	r24, r10
    710c:	b4 01       	movw	r22, r8
    710e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    7112:	9b 01       	movw	r18, r22
    7114:	ac 01       	movw	r20, r24
    7116:	69 81       	ldd	r22, Y+1	; 0x01
    7118:	7a 81       	ldd	r23, Y+2	; 0x02
    711a:	8b 81       	ldd	r24, Y+3	; 0x03
    711c:	9c 81       	ldd	r25, Y+4	; 0x04
    711e:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    7122:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    7126:	9b 01       	movw	r18, r22
    7128:	ac 01       	movw	r20, r24
    712a:	c7 01       	movw	r24, r14
    712c:	b6 01       	movw	r22, r12
    712e:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    7132:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    7136:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    713a:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    713e:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
					
					CLR_DIR2;
    7142:	e0 e2       	ldi	r30, 0x20	; 32
    7144:	f7 e0       	ldi	r31, 0x07	; 7
    7146:	84 81       	ldd	r24, Z+4	; 0x04
    7148:	8b 7f       	andi	r24, 0xFB	; 251
    714a:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=2;
    714c:	82 e0       	ldi	r24, 0x02	; 2
    714e:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
					Ma2=1000;
    7152:	88 ee       	ldi	r24, 0xE8	; 232
    7154:	93 e0       	ldi	r25, 0x03	; 3
    7156:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <Ma2>
    715a:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <Ma2+0x1>
					DistanceToGo2=0x7FFFFFFF;
    715e:	8f ef       	ldi	r24, 0xFF	; 255
    7160:	9f ef       	ldi	r25, 0xFF	; 255
    7162:	af ef       	ldi	r26, 0xFF	; 255
    7164:	bf e7       	ldi	r27, 0x7F	; 127
    7166:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <DistanceToGo2>
    716a:	90 93 a1 27 	sts	0x27A1, r25	; 0x8027a1 <DistanceToGo2+0x1>
    716e:	a0 93 a2 27 	sts	0x27A2, r26	; 0x8027a2 <DistanceToGo2+0x2>
    7172:	b0 93 a3 27 	sts	0x27A3, r27	; 0x8027a3 <DistanceToGo2+0x3>
					break;
    7176:	d1 ce       	rjmp	.-606    	; 0x6f1a <__vector_64+0x178>
				}
				case 3:
				{
					if(!LIM_NEG3 && Axes[2].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[2].MaxSpeed;
    7178:	c0 90 2c 28 	lds	r12, 0x282C	; 0x80282c <Axes+0x5b>
    717c:	d0 90 2d 28 	lds	r13, 0x282D	; 0x80282d <Axes+0x5c>
    7180:	e0 90 2e 28 	lds	r14, 0x282E	; 0x80282e <Axes+0x5d>
    7184:	f0 90 2f 28 	lds	r15, 0x282F	; 0x80282f <Axes+0x5e>
    7188:	c0 92 81 27 	sts	0x2781, r12	; 0x802781 <MaxSpeed>
    718c:	d0 92 82 27 	sts	0x2782, r13	; 0x802782 <MaxSpeed+0x1>
    7190:	e0 92 83 27 	sts	0x2783, r14	; 0x802783 <MaxSpeed+0x2>
    7194:	f0 92 84 27 	sts	0x2784, r15	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    7198:	40 90 30 28 	lds	r4, 0x2830	; 0x802830 <Axes+0x5f>
    719c:	50 90 31 28 	lds	r5, 0x2831	; 0x802831 <Axes+0x60>
    71a0:	60 90 32 28 	lds	r6, 0x2832	; 0x802832 <Axes+0x61>
    71a4:	70 90 33 28 	lds	r7, 0x2833	; 0x802833 <Axes+0x62>
    71a8:	40 92 65 27 	sts	0x2765, r4	; 0x802765 <IACC>
    71ac:	50 92 66 27 	sts	0x2766, r5	; 0x802766 <IACC+0x1>
    71b0:	60 92 67 27 	sts	0x2767, r6	; 0x802767 <IACC+0x2>
    71b4:	70 92 68 27 	sts	0x2768, r7	; 0x802768 <IACC+0x3>
					IDEC=Axes[2].DEC;
    71b8:	80 90 34 28 	lds	r8, 0x2834	; 0x802834 <Axes+0x63>
    71bc:	90 90 35 28 	lds	r9, 0x2835	; 0x802835 <Axes+0x64>
    71c0:	a0 90 36 28 	lds	r10, 0x2836	; 0x802836 <Axes+0x65>
    71c4:	b0 90 37 28 	lds	r11, 0x2837	; 0x802837 <Axes+0x66>
    71c8:	80 92 61 27 	sts	0x2761, r8	; 0x802761 <IDEC>
    71cc:	90 92 62 27 	sts	0x2762, r9	; 0x802762 <IDEC+0x1>
    71d0:	a0 92 63 27 	sts	0x2763, r10	; 0x802763 <IDEC+0x2>
    71d4:	b0 92 64 27 	sts	0x2764, r11	; 0x802764 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    71d8:	c7 01       	movw	r24, r14
    71da:	b6 01       	movw	r22, r12
    71dc:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    71e0:	20 e0       	ldi	r18, 0x00	; 0
    71e2:	30 e0       	ldi	r19, 0x00	; 0
    71e4:	48 ec       	ldi	r20, 0xC8	; 200
    71e6:	52 e4       	ldi	r21, 0x42	; 66
    71e8:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    71ec:	69 83       	std	Y+1, r22	; 0x01
    71ee:	7a 83       	std	Y+2, r23	; 0x02
    71f0:	8b 83       	std	Y+3, r24	; 0x03
    71f2:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    71f4:	c3 01       	movw	r24, r6
    71f6:	b2 01       	movw	r22, r4
    71f8:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    71fc:	9b 01       	movw	r18, r22
    71fe:	ac 01       	movw	r20, r24
    7200:	69 81       	ldd	r22, Y+1	; 0x01
    7202:	7a 81       	ldd	r23, Y+2	; 0x02
    7204:	8b 81       	ldd	r24, Y+3	; 0x03
    7206:	9c 81       	ldd	r25, Y+4	; 0x04
    7208:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    720c:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    7210:	9b 01       	movw	r18, r22
    7212:	ac 01       	movw	r20, r24
    7214:	c7 01       	movw	r24, r14
    7216:	b6 01       	movw	r22, r12
    7218:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    721c:	20 93 52 27 	sts	0x2752, r18	; 0x802752 <ACCSpeedINT>
    7220:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <ACCSpeedINT+0x1>
    7224:	40 93 54 27 	sts	0x2754, r20	; 0x802754 <ACCSpeedINT+0x2>
    7228:	50 93 55 27 	sts	0x2755, r21	; 0x802755 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    722c:	c5 01       	movw	r24, r10
    722e:	b4 01       	movw	r22, r8
    7230:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    7234:	9b 01       	movw	r18, r22
    7236:	ac 01       	movw	r20, r24
    7238:	69 81       	ldd	r22, Y+1	; 0x01
    723a:	7a 81       	ldd	r23, Y+2	; 0x02
    723c:	8b 81       	ldd	r24, Y+3	; 0x03
    723e:	9c 81       	ldd	r25, Y+4	; 0x04
    7240:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    7244:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__fixsfsi>
    7248:	9b 01       	movw	r18, r22
    724a:	ac 01       	movw	r20, r24
    724c:	c7 01       	movw	r24, r14
    724e:	b6 01       	movw	r22, r12
    7250:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <__divmodsi4>
    7254:	20 93 4e 27 	sts	0x274E, r18	; 0x80274e <DECSpeedINT>
    7258:	30 93 4f 27 	sts	0x274F, r19	; 0x80274f <DECSpeedINT+0x1>
    725c:	40 93 50 27 	sts	0x2750, r20	; 0x802750 <DECSpeedINT+0x2>
    7260:	50 93 51 27 	sts	0x2751, r21	; 0x802751 <DECSpeedINT+0x3>
					
					CLR_DIR3;
    7264:	e0 e2       	ldi	r30, 0x20	; 32
    7266:	f7 e0       	ldi	r31, 0x07	; 7
    7268:	84 81       	ldd	r24, Z+4	; 0x04
    726a:	8e 7f       	andi	r24, 0xFE	; 254
    726c:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=3;
    726e:	83 e0       	ldi	r24, 0x03	; 3
    7270:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <FreeJog>
					Ma3=1000;
    7274:	88 ee       	ldi	r24, 0xE8	; 232
    7276:	93 e0       	ldi	r25, 0x03	; 3
    7278:	80 93 40 27 	sts	0x2740, r24	; 0x802740 <Ma3>
    727c:	90 93 41 27 	sts	0x2741, r25	; 0x802741 <Ma3+0x1>
					DistanceToGo3=0x7FFFFFFF;
    7280:	8f ef       	ldi	r24, 0xFF	; 255
    7282:	9f ef       	ldi	r25, 0xFF	; 255
    7284:	af ef       	ldi	r26, 0xFF	; 255
    7286:	bf e7       	ldi	r27, 0x7F	; 127
    7288:	80 93 9c 27 	sts	0x279C, r24	; 0x80279c <DistanceToGo3>
    728c:	90 93 9d 27 	sts	0x279D, r25	; 0x80279d <DistanceToGo3+0x1>
    7290:	a0 93 9e 27 	sts	0x279E, r26	; 0x80279e <DistanceToGo3+0x2>
    7294:	b0 93 9f 27 	sts	0x279F, r27	; 0x80279f <DistanceToGo3+0x3>
					break;
    7298:	40 ce       	rjmp	.-896    	; 0x6f1a <__vector_64+0x178>
	else if((FreeJog==1 && !DIR1)||(FreeJog==2 && !DIR2)||(FreeJog==3 && !DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    729a:	24 96       	adiw	r28, 0x04	; 4
    729c:	cd bf       	out	0x3d, r28	; 61
    729e:	de bf       	out	0x3e, r29	; 62
    72a0:	df 91       	pop	r29
    72a2:	cf 91       	pop	r28
    72a4:	ff 91       	pop	r31
    72a6:	ef 91       	pop	r30
    72a8:	bf 91       	pop	r27
    72aa:	af 91       	pop	r26
    72ac:	9f 91       	pop	r25
    72ae:	8f 91       	pop	r24
    72b0:	7f 91       	pop	r23
    72b2:	6f 91       	pop	r22
    72b4:	5f 91       	pop	r21
    72b6:	4f 91       	pop	r20
    72b8:	3f 91       	pop	r19
    72ba:	2f 91       	pop	r18
    72bc:	ff 90       	pop	r15
    72be:	ef 90       	pop	r14
    72c0:	df 90       	pop	r13
    72c2:	cf 90       	pop	r12
    72c4:	bf 90       	pop	r11
    72c6:	af 90       	pop	r10
    72c8:	9f 90       	pop	r9
    72ca:	8f 90       	pop	r8
    72cc:	7f 90       	pop	r7
    72ce:	6f 90       	pop	r6
    72d0:	5f 90       	pop	r5
    72d2:	4f 90       	pop	r4
    72d4:	0f 90       	pop	r0
    72d6:	0b be       	out	0x3b, r0	; 59
    72d8:	0f 90       	pop	r0
    72da:	0a be       	out	0x3a, r0	; 58
    72dc:	0f 90       	pop	r0
    72de:	09 be       	out	0x39, r0	; 57
    72e0:	0f 90       	pop	r0
    72e2:	08 be       	out	0x38, r0	; 56
    72e4:	0f 90       	pop	r0
    72e6:	0f be       	out	0x3f, r0	; 63
    72e8:	0f 90       	pop	r0
    72ea:	1f 90       	pop	r1
    72ec:	18 95       	reti

000072ee <__vector_65>:

//Port D interrupt
//Start Stop Key Interrupt

ISR (PORTD_INT1_vect)
{
    72ee:	1f 92       	push	r1
    72f0:	0f 92       	push	r0
    72f2:	0f b6       	in	r0, 0x3f	; 63
    72f4:	0f 92       	push	r0
    72f6:	11 24       	eor	r1, r1
    72f8:	08 b6       	in	r0, 0x38	; 56
    72fa:	0f 92       	push	r0
    72fc:	18 be       	out	0x38, r1	; 56
    72fe:	09 b6       	in	r0, 0x39	; 57
    7300:	0f 92       	push	r0
    7302:	19 be       	out	0x39, r1	; 57
    7304:	0a b6       	in	r0, 0x3a	; 58
    7306:	0f 92       	push	r0
    7308:	1a be       	out	0x3a, r1	; 58
    730a:	0b b6       	in	r0, 0x3b	; 59
    730c:	0f 92       	push	r0
    730e:	1b be       	out	0x3b, r1	; 59
    7310:	2f 92       	push	r2
    7312:	3f 92       	push	r3
    7314:	4f 92       	push	r4
    7316:	5f 92       	push	r5
    7318:	6f 92       	push	r6
    731a:	7f 92       	push	r7
    731c:	8f 92       	push	r8
    731e:	9f 92       	push	r9
    7320:	af 92       	push	r10
    7322:	bf 92       	push	r11
    7324:	cf 92       	push	r12
    7326:	df 92       	push	r13
    7328:	ef 92       	push	r14
    732a:	ff 92       	push	r15
    732c:	0f 93       	push	r16
    732e:	1f 93       	push	r17
    7330:	2f 93       	push	r18
    7332:	3f 93       	push	r19
    7334:	4f 93       	push	r20
    7336:	5f 93       	push	r21
    7338:	6f 93       	push	r22
    733a:	7f 93       	push	r23
    733c:	8f 93       	push	r24
    733e:	9f 93       	push	r25
    7340:	af 93       	push	r26
    7342:	bf 93       	push	r27
    7344:	ef 93       	push	r30
    7346:	ff 93       	push	r31
    7348:	cf 93       	push	r28
    734a:	df 93       	push	r29
    734c:	cd b7       	in	r28, 0x3d	; 61
    734e:	de b7       	in	r29, 0x3e	; 62
    7350:	28 97       	sbiw	r28, 0x08	; 8
    7352:	cd bf       	out	0x3d, r28	; 61
    7354:	de bf       	out	0x3e, r29	; 62
	//printf("PortD INT1\r\n");
	if(RunProgram)
    7356:	e0 e6       	ldi	r30, 0x60	; 96
    7358:	f6 e0       	ldi	r31, 0x06	; 6
    735a:	80 85       	ldd	r24, Z+8	; 0x08
		//     {
		//         PRGExe();
		//         IsPause=0;
		//     }
	}
	if(StopProgram)
    735c:	80 85       	ldd	r24, Z+8	; 0x08
    735e:	82 ff       	sbrs	r24, 2
    7360:	8a c2       	rjmp	.+1300   	; 0x7876 <__vector_65+0x588>
	{
		if(ProgramRun)
    7362:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    7366:	88 23       	and	r24, r24
    7368:	31 f1       	breq	.+76     	; 0x73b6 <__vector_65+0xc8>
		{
			IsPause=1;
    736a:	81 e0       	ldi	r24, 0x01	; 1
    736c:	80 93 ec 26 	sts	0x26EC, r24	; 0x8026ec <IsPause>
			DistanceToGo1=0;
    7370:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <DistanceToGo1>
    7374:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <DistanceToGo1+0x1>
    7378:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <DistanceToGo1+0x2>
    737c:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <DistanceToGo1+0x3>
			DistanceToGo2=0;
    7380:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <DistanceToGo2>
    7384:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <DistanceToGo2+0x1>
    7388:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <DistanceToGo2+0x2>
    738c:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <DistanceToGo2+0x3>
			DistanceToGo3=0;
    7390:	10 92 9c 27 	sts	0x279C, r1	; 0x80279c <DistanceToGo3>
    7394:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <DistanceToGo3+0x1>
    7398:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <DistanceToGo3+0x2>
    739c:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <DistanceToGo3+0x3>
			sprintf(BufferSend,"!4100\r\n");
    73a0:	98 e0       	ldi	r25, 0x08	; 8
    73a2:	ee e1       	ldi	r30, 0x1E	; 30
    73a4:	f6 e2       	ldi	r31, 0x26	; 38
    73a6:	af e6       	ldi	r26, 0x6F	; 111
    73a8:	b9 e2       	ldi	r27, 0x29	; 41
    73aa:	01 90       	ld	r0, Z+
    73ac:	0d 92       	st	X+, r0
    73ae:	9a 95       	dec	r25
    73b0:	e1 f7       	brne	.-8      	; 0x73aa <__vector_65+0xbc>
			Responsing=1;
    73b2:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <Responsing>
		}
		
		StopTime=0;
    73b6:	10 92 eb 26 	sts	0x26EB, r1	; 0x8026eb <StopTime>
			{


				DO1_CLR;

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    73ba:	22 24       	eor	r2, r2
    73bc:	23 94       	inc	r2
			sprintf(BufferSend,"!4100\r\n");
			Responsing=1;
		}
		
		StopTime=0;
		while(StopProgram)
    73be:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    73c2:	82 ff       	sbrs	r24, 2
    73c4:	58 c2       	rjmp	.+1200   	; 0x7876 <__vector_65+0x588>
    73c6:	2f ef       	ldi	r18, 0xFF	; 255
    73c8:	83 ec       	ldi	r24, 0xC3	; 195
    73ca:	99 e0       	ldi	r25, 0x09	; 9
    73cc:	21 50       	subi	r18, 0x01	; 1
    73ce:	80 40       	sbci	r24, 0x00	; 0
    73d0:	90 40       	sbci	r25, 0x00	; 0
    73d2:	e1 f7       	brne	.-8      	; 0x73cc <__vector_65+0xde>
    73d4:	00 c0       	rjmp	.+0      	; 0x73d6 <__vector_65+0xe8>
    73d6:	00 00       	nop
		{
			_delay_ms(100);
			StopTime++;
    73d8:	80 91 eb 26 	lds	r24, 0x26EB	; 0x8026eb <StopTime>
    73dc:	8f 5f       	subi	r24, 0xFF	; 255
    73de:	80 93 eb 26 	sts	0x26EB, r24	; 0x8026eb <StopTime>
			if(StopTime>30)
    73e2:	8f 31       	cpi	r24, 0x1F	; 31
    73e4:	60 f3       	brcs	.-40     	; 0x73be <__vector_65+0xd0>
			{


				DO1_CLR;
    73e6:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>
    73ea:	8b 7f       	andi	r24, 0xFB	; 251
    73ec:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    73f0:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    73f4:	81 11       	cpse	r24, r1
    73f6:	0e c0       	rjmp	.+28     	; 0x7414 <__vector_65+0x126>
    73f8:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <AxisIsMoving2>
    73fc:	91 11       	cpse	r25, r1
    73fe:	0a c0       	rjmp	.+20     	; 0x7414 <__vector_65+0x126>
    7400:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    7404:	22 2d       	mov	r18, r2
    7406:	91 11       	cpse	r25, r1
    7408:	01 c0       	rjmp	.+2      	; 0x740c <__vector_65+0x11e>
    740a:	20 e0       	ldi	r18, 0x00	; 0
    740c:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
				while (AxisMoving == 1)
    7410:	99 23       	and	r25, r25
    7412:	99 f0       	breq	.+38     	; 0x743a <__vector_65+0x14c>
    7414:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <AxisIsMoving2>
    7418:	91 11       	cpse	r25, r1
    741a:	07 c0       	rjmp	.+14     	; 0x742a <__vector_65+0x13c>
    741c:	22 2d       	mov	r18, r2
    741e:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    7422:	91 11       	cpse	r25, r1
    7424:	03 c0       	rjmp	.+6      	; 0x742c <__vector_65+0x13e>
    7426:	20 e0       	ldi	r18, 0x00	; 0
    7428:	01 c0       	rjmp	.+2      	; 0x742c <__vector_65+0x13e>
    742a:	22 2d       	mov	r18, r2
    742c:	92 2f       	mov	r25, r18
				{
					AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    742e:	81 11       	cpse	r24, r1
    7430:	fe cf       	rjmp	.-4      	; 0x742e <__vector_65+0x140>


				DO1_CLR;

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
				while (AxisMoving == 1)
    7432:	91 11       	cpse	r25, r1
    7434:	fc cf       	rjmp	.-8      	; 0x742e <__vector_65+0x140>
    7436:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <AxisMoving>
				{
					AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
				}
				if(SoftRef1<AxisPosition1) CLR_DIR1;
    743a:	40 90 b4 27 	lds	r4, 0x27B4	; 0x8027b4 <SoftRef1>
    743e:	50 90 b5 27 	lds	r5, 0x27B5	; 0x8027b5 <SoftRef1+0x1>
    7442:	60 90 b6 27 	lds	r6, 0x27B6	; 0x8027b6 <SoftRef1+0x2>
    7446:	70 90 b7 27 	lds	r7, 0x27B7	; 0x8027b7 <SoftRef1+0x3>
    744a:	c0 90 c0 27 	lds	r12, 0x27C0	; 0x8027c0 <AxisPosition1>
    744e:	d0 90 c1 27 	lds	r13, 0x27C1	; 0x8027c1 <AxisPosition1+0x1>
    7452:	e0 90 c2 27 	lds	r14, 0x27C2	; 0x8027c2 <AxisPosition1+0x2>
    7456:	f0 90 c3 27 	lds	r15, 0x27C3	; 0x8027c3 <AxisPosition1+0x3>
    745a:	4c 14       	cp	r4, r12
    745c:	5d 04       	cpc	r5, r13
    745e:	6e 04       	cpc	r6, r14
    7460:	7f 04       	cpc	r7, r15
    7462:	2c f4       	brge	.+10     	; 0x746e <__vector_65+0x180>
    7464:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    7468:	8f 7e       	andi	r24, 0xEF	; 239
    746a:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef1>AxisPosition1) SET_DIR1;
    746e:	c4 14       	cp	r12, r4
    7470:	d5 04       	cpc	r13, r5
    7472:	e6 04       	cpc	r14, r6
    7474:	f7 04       	cpc	r15, r7
    7476:	2c f4       	brge	.+10     	; 0x7482 <__vector_65+0x194>
    7478:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    747c:	80 61       	ori	r24, 0x10	; 16
    747e:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				if(SoftRef2<AxisPosition2) CLR_DIR2;
    7482:	80 90 b0 27 	lds	r8, 0x27B0	; 0x8027b0 <SoftRef2>
    7486:	90 90 b1 27 	lds	r9, 0x27B1	; 0x8027b1 <SoftRef2+0x1>
    748a:	a0 90 b2 27 	lds	r10, 0x27B2	; 0x8027b2 <SoftRef2+0x2>
    748e:	b0 90 b3 27 	lds	r11, 0x27B3	; 0x8027b3 <SoftRef2+0x3>
    7492:	40 91 bc 27 	lds	r20, 0x27BC	; 0x8027bc <AxisPosition2>
    7496:	50 91 bd 27 	lds	r21, 0x27BD	; 0x8027bd <AxisPosition2+0x1>
    749a:	60 91 be 27 	lds	r22, 0x27BE	; 0x8027be <AxisPosition2+0x2>
    749e:	70 91 bf 27 	lds	r23, 0x27BF	; 0x8027bf <AxisPosition2+0x3>
    74a2:	84 16       	cp	r8, r20
    74a4:	95 06       	cpc	r9, r21
    74a6:	a6 06       	cpc	r10, r22
    74a8:	b7 06       	cpc	r11, r23
    74aa:	2c f4       	brge	.+10     	; 0x74b6 <__vector_65+0x1c8>
    74ac:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    74b0:	8b 7f       	andi	r24, 0xFB	; 251
    74b2:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef2>AxisPosition2) SET_DIR2;
    74b6:	48 15       	cp	r20, r8
    74b8:	59 05       	cpc	r21, r9
    74ba:	6a 05       	cpc	r22, r10
    74bc:	7b 05       	cpc	r23, r11
    74be:	2c f4       	brge	.+10     	; 0x74ca <__vector_65+0x1dc>
    74c0:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    74c4:	84 60       	ori	r24, 0x04	; 4
    74c6:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				if(SoftRef3<AxisPosition3) CLR_DIR3;
    74ca:	00 91 ac 27 	lds	r16, 0x27AC	; 0x8027ac <SoftRef3>
    74ce:	10 91 ad 27 	lds	r17, 0x27AD	; 0x8027ad <SoftRef3+0x1>
    74d2:	20 91 ae 27 	lds	r18, 0x27AE	; 0x8027ae <SoftRef3+0x2>
    74d6:	30 91 af 27 	lds	r19, 0x27AF	; 0x8027af <SoftRef3+0x3>
    74da:	80 91 b8 27 	lds	r24, 0x27B8	; 0x8027b8 <AxisPosition3>
    74de:	90 91 b9 27 	lds	r25, 0x27B9	; 0x8027b9 <AxisPosition3+0x1>
    74e2:	a0 91 ba 27 	lds	r26, 0x27BA	; 0x8027ba <AxisPosition3+0x2>
    74e6:	b0 91 bb 27 	lds	r27, 0x27BB	; 0x8027bb <AxisPosition3+0x3>
    74ea:	08 17       	cp	r16, r24
    74ec:	19 07       	cpc	r17, r25
    74ee:	2a 07       	cpc	r18, r26
    74f0:	3b 07       	cpc	r19, r27
    74f2:	34 f4       	brge	.+12     	; 0x7500 <__vector_65+0x212>
    74f4:	30 90 24 07 	lds	r3, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    74f8:	e3 2d       	mov	r30, r3
    74fa:	ee 7f       	andi	r30, 0xFE	; 254
    74fc:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef3>AxisPosition3) SET_DIR3;
    7500:	80 17       	cp	r24, r16
    7502:	91 07       	cpc	r25, r17
    7504:	a2 07       	cpc	r26, r18
    7506:	b3 07       	cpc	r27, r19
    7508:	34 f4       	brge	.+12     	; 0x7516 <__vector_65+0x228>
    750a:	30 90 24 07 	lds	r3, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    750e:	f3 2d       	mov	r31, r3
    7510:	f1 60       	ori	r31, 0x01	; 1
    7512:	f0 93 24 07 	sts	0x0724, r31	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				//printf("SoftRef1: %d\tSoftRef2: %d\tSoftRef3: %d\r\n",SoftRef1,SoftRef2,SoftRef3);
				DistanceToGo1=labs(AxisPosition1-SoftRef1);
    7516:	c4 18       	sub	r12, r4
    7518:	d5 08       	sbc	r13, r5
    751a:	e6 08       	sbc	r14, r6
    751c:	f7 08       	sbc	r15, r7
    751e:	26 01       	movw	r4, r12
    7520:	37 01       	movw	r6, r14
    7522:	3a f4       	brpl	.+14     	; 0x7532 <__vector_65+0x244>
    7524:	44 24       	eor	r4, r4
    7526:	55 24       	eor	r5, r5
    7528:	32 01       	movw	r6, r4
    752a:	4c 18       	sub	r4, r12
    752c:	5d 08       	sbc	r5, r13
    752e:	6e 08       	sbc	r6, r14
    7530:	7f 08       	sbc	r7, r15
    7532:	73 01       	movw	r14, r6
    7534:	62 01       	movw	r12, r4
    7536:	40 92 a4 27 	sts	0x27A4, r4	; 0x8027a4 <DistanceToGo1>
    753a:	50 92 a5 27 	sts	0x27A5, r5	; 0x8027a5 <DistanceToGo1+0x1>
    753e:	60 92 a6 27 	sts	0x27A6, r6	; 0x8027a6 <DistanceToGo1+0x2>
    7542:	70 92 a7 27 	sts	0x27A7, r7	; 0x8027a7 <DistanceToGo1+0x3>
				DistanceToGo2=labs(AxisPosition2-SoftRef2);
    7546:	48 19       	sub	r20, r8
    7548:	59 09       	sbc	r21, r9
    754a:	6a 09       	sbc	r22, r10
    754c:	7b 09       	sbc	r23, r11
    754e:	4a 01       	movw	r8, r20
    7550:	5b 01       	movw	r10, r22
    7552:	3a f4       	brpl	.+14     	; 0x7562 <__vector_65+0x274>
    7554:	88 24       	eor	r8, r8
    7556:	99 24       	eor	r9, r9
    7558:	54 01       	movw	r10, r8
    755a:	84 1a       	sub	r8, r20
    755c:	95 0a       	sbc	r9, r21
    755e:	a6 0a       	sbc	r10, r22
    7560:	b7 0a       	sbc	r11, r23
    7562:	24 01       	movw	r4, r8
    7564:	35 01       	movw	r6, r10
    7566:	80 92 a0 27 	sts	0x27A0, r8	; 0x8027a0 <DistanceToGo2>
    756a:	90 92 a1 27 	sts	0x27A1, r9	; 0x8027a1 <DistanceToGo2+0x1>
    756e:	a0 92 a2 27 	sts	0x27A2, r10	; 0x8027a2 <DistanceToGo2+0x2>
    7572:	b0 92 a3 27 	sts	0x27A3, r11	; 0x8027a3 <DistanceToGo2+0x3>
				DistanceToGo3=labs(AxisPosition3-SoftRef3);
    7576:	80 1b       	sub	r24, r16
    7578:	91 0b       	sbc	r25, r17
    757a:	a2 0b       	sbc	r26, r18
    757c:	b3 0b       	sbc	r27, r19
    757e:	ac 01       	movw	r20, r24
    7580:	bd 01       	movw	r22, r26
    7582:	3a f4       	brpl	.+14     	; 0x7592 <__vector_65+0x2a4>
    7584:	44 27       	eor	r20, r20
    7586:	55 27       	eor	r21, r21
    7588:	ba 01       	movw	r22, r20
    758a:	48 1b       	sub	r20, r24
    758c:	59 0b       	sbc	r21, r25
    758e:	6a 0b       	sbc	r22, r26
    7590:	7b 0b       	sbc	r23, r27
    7592:	49 83       	std	Y+1, r20	; 0x01
    7594:	5a 83       	std	Y+2, r21	; 0x02
    7596:	6b 83       	std	Y+3, r22	; 0x03
    7598:	7c 83       	std	Y+4, r23	; 0x04
    759a:	40 93 9c 27 	sts	0x279C, r20	; 0x80279c <DistanceToGo3>
    759e:	50 93 9d 27 	sts	0x279D, r21	; 0x80279d <DistanceToGo3+0x1>
    75a2:	60 93 9e 27 	sts	0x279E, r22	; 0x80279e <DistanceToGo3+0x2>
    75a6:	70 93 9f 27 	sts	0x279F, r23	; 0x80279f <DistanceToGo3+0x3>
				//printf("DistanceToGo1: %d\tDistanceToGo2: %d\tDistanceToGo3: %d\r\n",DistanceToGo1,DistanceToGo2,DistanceToGo3);
				if(DistanceToGo1 > DistanceToGo2 && DistanceToGo1 > DistanceToGo3)
    75aa:	4c 14       	cp	r4, r12
    75ac:	5d 04       	cpc	r5, r13
    75ae:	6e 04       	cpc	r6, r14
    75b0:	7f 04       	cpc	r7, r15
    75b2:	ec f5       	brge	.+122    	; 0x762e <__vector_65+0x340>
    75b4:	4c 15       	cp	r20, r12
    75b6:	5d 05       	cpc	r21, r13
    75b8:	6e 05       	cpc	r22, r14
    75ba:	7f 05       	cpc	r23, r15
    75bc:	c4 f5       	brge	.+112    	; 0x762e <__vector_65+0x340>
				{
					MaxSpeed = Axes[0].MaxSpeed;
    75be:	80 91 d6 27 	lds	r24, 0x27D6	; 0x8027d6 <Axes+0x5>
    75c2:	90 91 d7 27 	lds	r25, 0x27D7	; 0x8027d7 <Axes+0x6>
    75c6:	a0 91 d8 27 	lds	r26, 0x27D8	; 0x8027d8 <Axes+0x7>
    75ca:	b0 91 d9 27 	lds	r27, 0x27D9	; 0x8027d9 <Axes+0x8>
    75ce:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    75d2:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    75d6:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    75da:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    75de:	80 91 da 27 	lds	r24, 0x27DA	; 0x8027da <Axes+0x9>
    75e2:	90 91 db 27 	lds	r25, 0x27DB	; 0x8027db <Axes+0xa>
    75e6:	a0 91 dc 27 	lds	r26, 0x27DC	; 0x8027dc <Axes+0xb>
    75ea:	b0 91 dd 27 	lds	r27, 0x27DD	; 0x8027dd <Axes+0xc>
    75ee:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <IACC>
    75f2:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <IACC+0x1>
    75f6:	a0 93 67 27 	sts	0x2767, r26	; 0x802767 <IACC+0x2>
    75fa:	b0 93 68 27 	sts	0x2768, r27	; 0x802768 <IACC+0x3>
					IDEC=Axes[0].DEC;
    75fe:	80 91 de 27 	lds	r24, 0x27DE	; 0x8027de <Axes+0xd>
    7602:	90 91 df 27 	lds	r25, 0x27DF	; 0x8027df <Axes+0xe>
    7606:	a0 91 e0 27 	lds	r26, 0x27E0	; 0x8027e0 <Axes+0xf>
    760a:	b0 91 e1 27 	lds	r27, 0x27E1	; 0x8027e1 <Axes+0x10>
    760e:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <IDEC>
    7612:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <IDEC+0x1>
    7616:	a0 93 63 27 	sts	0x2763, r26	; 0x802763 <IDEC+0x2>
    761a:	b0 93 64 27 	sts	0x2764, r27	; 0x802764 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition1-SoftRef1);
    761e:	c0 92 a8 27 	sts	0x27A8, r12	; 0x8027a8 <MaxDistanceToGo>
    7622:	d0 92 a9 27 	sts	0x27A9, r13	; 0x8027a9 <MaxDistanceToGo+0x1>
    7626:	e0 92 aa 27 	sts	0x27AA, r14	; 0x8027aa <MaxDistanceToGo+0x2>
    762a:	f0 92 ab 27 	sts	0x27AB, r15	; 0x8027ab <MaxDistanceToGo+0x3>
				}
				if(DistanceToGo2 > DistanceToGo1 && DistanceToGo2 > DistanceToGo3)
    762e:	c4 14       	cp	r12, r4
    7630:	d5 04       	cpc	r13, r5
    7632:	e6 04       	cpc	r14, r6
    7634:	f7 04       	cpc	r15, r7
    7636:	0c f0       	brlt	.+2      	; 0x763a <__vector_65+0x34c>
    7638:	41 c0       	rjmp	.+130    	; 0x76bc <__vector_65+0x3ce>
    763a:	89 81       	ldd	r24, Y+1	; 0x01
    763c:	9a 81       	ldd	r25, Y+2	; 0x02
    763e:	ab 81       	ldd	r26, Y+3	; 0x03
    7640:	bc 81       	ldd	r27, Y+4	; 0x04
    7642:	84 15       	cp	r24, r4
    7644:	95 05       	cpc	r25, r5
    7646:	a6 05       	cpc	r26, r6
    7648:	b7 05       	cpc	r27, r7
    764a:	c4 f5       	brge	.+112    	; 0x76bc <__vector_65+0x3ce>
				{
					MaxSpeed = Axes[1].MaxSpeed;
    764c:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <Axes+0x30>
    7650:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <Axes+0x31>
    7654:	a0 91 03 28 	lds	r26, 0x2803	; 0x802803 <Axes+0x32>
    7658:	b0 91 04 28 	lds	r27, 0x2804	; 0x802804 <Axes+0x33>
    765c:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    7660:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    7664:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    7668:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    766c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <Axes+0x34>
    7670:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <Axes+0x35>
    7674:	a0 91 07 28 	lds	r26, 0x2807	; 0x802807 <Axes+0x36>
    7678:	b0 91 08 28 	lds	r27, 0x2808	; 0x802808 <Axes+0x37>
    767c:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <IACC>
    7680:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <IACC+0x1>
    7684:	a0 93 67 27 	sts	0x2767, r26	; 0x802767 <IACC+0x2>
    7688:	b0 93 68 27 	sts	0x2768, r27	; 0x802768 <IACC+0x3>
					IDEC=Axes[1].DEC;
    768c:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Axes+0x38>
    7690:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <Axes+0x39>
    7694:	a0 91 0b 28 	lds	r26, 0x280B	; 0x80280b <Axes+0x3a>
    7698:	b0 91 0c 28 	lds	r27, 0x280C	; 0x80280c <Axes+0x3b>
    769c:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <IDEC>
    76a0:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <IDEC+0x1>
    76a4:	a0 93 63 27 	sts	0x2763, r26	; 0x802763 <IDEC+0x2>
    76a8:	b0 93 64 27 	sts	0x2764, r27	; 0x802764 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition2-SoftRef2);
    76ac:	40 92 a8 27 	sts	0x27A8, r4	; 0x8027a8 <MaxDistanceToGo>
    76b0:	50 92 a9 27 	sts	0x27A9, r5	; 0x8027a9 <MaxDistanceToGo+0x1>
    76b4:	60 92 aa 27 	sts	0x27AA, r6	; 0x8027aa <MaxDistanceToGo+0x2>
    76b8:	70 92 ab 27 	sts	0x27AB, r7	; 0x8027ab <MaxDistanceToGo+0x3>
				}
				if(DistanceToGo3 > DistanceToGo1 && DistanceToGo3 > DistanceToGo2)
    76bc:	89 81       	ldd	r24, Y+1	; 0x01
    76be:	9a 81       	ldd	r25, Y+2	; 0x02
    76c0:	ab 81       	ldd	r26, Y+3	; 0x03
    76c2:	bc 81       	ldd	r27, Y+4	; 0x04
    76c4:	c8 16       	cp	r12, r24
    76c6:	d9 06       	cpc	r13, r25
    76c8:	ea 06       	cpc	r14, r26
    76ca:	fb 06       	cpc	r15, r27
    76cc:	dc f5       	brge	.+118    	; 0x7744 <__vector_65+0x456>
    76ce:	48 16       	cp	r4, r24
    76d0:	59 06       	cpc	r5, r25
    76d2:	6a 06       	cpc	r6, r26
    76d4:	7b 06       	cpc	r7, r27
    76d6:	b4 f5       	brge	.+108    	; 0x7744 <__vector_65+0x456>
				{
					MaxSpeed = Axes[2].MaxSpeed;
    76d8:	ec e2       	ldi	r30, 0x2C	; 44
    76da:	f8 e2       	ldi	r31, 0x28	; 40
    76dc:	80 81       	ld	r24, Z
    76de:	91 81       	ldd	r25, Z+1	; 0x01
    76e0:	a2 81       	ldd	r26, Z+2	; 0x02
    76e2:	b3 81       	ldd	r27, Z+3	; 0x03
    76e4:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <MaxSpeed>
    76e8:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <MaxSpeed+0x1>
    76ec:	a0 93 83 27 	sts	0x2783, r26	; 0x802783 <MaxSpeed+0x2>
    76f0:	b0 93 84 27 	sts	0x2784, r27	; 0x802784 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    76f4:	e0 e3       	ldi	r30, 0x30	; 48
    76f6:	f8 e2       	ldi	r31, 0x28	; 40
    76f8:	80 81       	ld	r24, Z
    76fa:	91 81       	ldd	r25, Z+1	; 0x01
    76fc:	a2 81       	ldd	r26, Z+2	; 0x02
    76fe:	b3 81       	ldd	r27, Z+3	; 0x03
    7700:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <IACC>
    7704:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <IACC+0x1>
    7708:	a0 93 67 27 	sts	0x2767, r26	; 0x802767 <IACC+0x2>
    770c:	b0 93 68 27 	sts	0x2768, r27	; 0x802768 <IACC+0x3>
					IDEC=Axes[2].DEC;
    7710:	e4 e3       	ldi	r30, 0x34	; 52
    7712:	f8 e2       	ldi	r31, 0x28	; 40
    7714:	80 81       	ld	r24, Z
    7716:	91 81       	ldd	r25, Z+1	; 0x01
    7718:	a2 81       	ldd	r26, Z+2	; 0x02
    771a:	b3 81       	ldd	r27, Z+3	; 0x03
    771c:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <IDEC>
    7720:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <IDEC+0x1>
    7724:	a0 93 63 27 	sts	0x2763, r26	; 0x802763 <IDEC+0x2>
    7728:	b0 93 64 27 	sts	0x2764, r27	; 0x802764 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition3-SoftRef3);
    772c:	89 81       	ldd	r24, Y+1	; 0x01
    772e:	9a 81       	ldd	r25, Y+2	; 0x02
    7730:	ab 81       	ldd	r26, Y+3	; 0x03
    7732:	bc 81       	ldd	r27, Y+4	; 0x04
    7734:	80 93 a8 27 	sts	0x27A8, r24	; 0x8027a8 <MaxDistanceToGo>
    7738:	90 93 a9 27 	sts	0x27A9, r25	; 0x8027a9 <MaxDistanceToGo+0x1>
    773c:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <MaxDistanceToGo+0x2>
    7740:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <MaxDistanceToGo+0x3>
				}
				//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
				if(MaxSpeed>0)
    7744:	80 90 81 27 	lds	r8, 0x2781	; 0x802781 <MaxSpeed>
    7748:	90 90 82 27 	lds	r9, 0x2782	; 0x802782 <MaxSpeed+0x1>
    774c:	a0 90 83 27 	lds	r10, 0x2783	; 0x802783 <MaxSpeed+0x2>
    7750:	b0 90 84 27 	lds	r11, 0x2784	; 0x802784 <MaxSpeed+0x3>
    7754:	18 14       	cp	r1, r8
    7756:	19 04       	cpc	r1, r9
    7758:	1a 04       	cpc	r1, r10
    775a:	1b 04       	cpc	r1, r11
    775c:	0c f0       	brlt	.+2      	; 0x7760 <__vector_65+0x472>
    775e:	52 c0       	rjmp	.+164    	; 0x7804 <__vector_65+0x516>
				{
					Ma1=(unsigned int)((float)((float)DistanceToGo1/(float)MaxDistanceToGo)*1000);
    7760:	60 91 a8 27 	lds	r22, 0x27A8	; 0x8027a8 <MaxDistanceToGo>
    7764:	70 91 a9 27 	lds	r23, 0x27A9	; 0x8027a9 <MaxDistanceToGo+0x1>
    7768:	80 91 aa 27 	lds	r24, 0x27AA	; 0x8027aa <MaxDistanceToGo+0x2>
    776c:	90 91 ab 27 	lds	r25, 0x27AB	; 0x8027ab <MaxDistanceToGo+0x3>
    7770:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    7774:	6d 83       	std	Y+5, r22	; 0x05
    7776:	7e 83       	std	Y+6, r23	; 0x06
    7778:	8f 83       	std	Y+7, r24	; 0x07
    777a:	98 87       	std	Y+8, r25	; 0x08
    777c:	c7 01       	movw	r24, r14
    777e:	b6 01       	movw	r22, r12
    7780:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    7784:	2d 81       	ldd	r18, Y+5	; 0x05
    7786:	3e 81       	ldd	r19, Y+6	; 0x06
    7788:	4f 81       	ldd	r20, Y+7	; 0x07
    778a:	58 85       	ldd	r21, Y+8	; 0x08
    778c:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    7790:	20 e0       	ldi	r18, 0x00	; 0
    7792:	30 e0       	ldi	r19, 0x00	; 0
    7794:	4a e7       	ldi	r20, 0x7A	; 122
    7796:	54 e4       	ldi	r21, 0x44	; 68
    7798:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    779c:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    77a0:	60 93 44 27 	sts	0x2744, r22	; 0x802744 <Ma1>
    77a4:	70 93 45 27 	sts	0x2745, r23	; 0x802745 <Ma1+0x1>
					Ma2=(unsigned int)((float)((float)DistanceToGo2/(float)MaxDistanceToGo)*1000);
    77a8:	c3 01       	movw	r24, r6
    77aa:	b2 01       	movw	r22, r4
    77ac:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    77b0:	2d 81       	ldd	r18, Y+5	; 0x05
    77b2:	3e 81       	ldd	r19, Y+6	; 0x06
    77b4:	4f 81       	ldd	r20, Y+7	; 0x07
    77b6:	58 85       	ldd	r21, Y+8	; 0x08
    77b8:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    77bc:	20 e0       	ldi	r18, 0x00	; 0
    77be:	30 e0       	ldi	r19, 0x00	; 0
    77c0:	4a e7       	ldi	r20, 0x7A	; 122
    77c2:	54 e4       	ldi	r21, 0x44	; 68
    77c4:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    77c8:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    77cc:	60 93 42 27 	sts	0x2742, r22	; 0x802742 <Ma2>
    77d0:	70 93 43 27 	sts	0x2743, r23	; 0x802743 <Ma2+0x1>
					Ma3=(unsigned int)((float)((float)DistanceToGo3/(float)MaxDistanceToGo)*1000);
    77d4:	69 81       	ldd	r22, Y+1	; 0x01
    77d6:	7a 81       	ldd	r23, Y+2	; 0x02
    77d8:	8b 81       	ldd	r24, Y+3	; 0x03
    77da:	9c 81       	ldd	r25, Y+4	; 0x04
    77dc:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    77e0:	2d 81       	ldd	r18, Y+5	; 0x05
    77e2:	3e 81       	ldd	r19, Y+6	; 0x06
    77e4:	4f 81       	ldd	r20, Y+7	; 0x07
    77e6:	58 85       	ldd	r21, Y+8	; 0x08
    77e8:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    77ec:	20 e0       	ldi	r18, 0x00	; 0
    77ee:	30 e0       	ldi	r19, 0x00	; 0
    77f0:	4a e7       	ldi	r20, 0x7A	; 122
    77f2:	54 e4       	ldi	r21, 0x44	; 68
    77f4:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    77f8:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    77fc:	60 93 40 27 	sts	0x2740, r22	; 0x802740 <Ma3>
    7800:	70 93 41 27 	sts	0x2741, r23	; 0x802741 <Ma3+0x1>
					//printf("MaxSpeed: %d\tMa1: %d\tMa2: %d\tMa3: %d\r\n",MaxSpeed,Ma1,Ma2,Ma3);
				}
				CurSpeedFrq=MaxSpeed;
    7804:	80 92 56 27 	sts	0x2756, r8	; 0x802756 <CurSpeedFrq>
    7808:	90 92 57 27 	sts	0x2757, r9	; 0x802757 <CurSpeedFrq+0x1>
    780c:	a0 92 58 27 	sts	0x2758, r10	; 0x802758 <CurSpeedFrq+0x2>
    7810:	b0 92 59 27 	sts	0x2759, r11	; 0x802759 <CurSpeedFrq+0x3>
				ACC = 0;
    7814:	10 92 4d 27 	sts	0x274D, r1	; 0x80274d <ACC>
				DEC = 0;
    7818:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <DEC>
				TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    781c:	c5 01       	movw	r24, r10
    781e:	b4 01       	movw	r22, r8
    7820:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__floatsisf>
    7824:	9b 01       	movw	r18, r22
    7826:	ac 01       	movw	r20, r24
    7828:	60 e0       	ldi	r22, 0x00	; 0
    782a:	70 e0       	ldi	r23, 0x00	; 0
    782c:	8a e7       	ldi	r24, 0x7A	; 122
    782e:	96 e4       	ldi	r25, 0x46	; 70
    7830:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divsf3>
    7834:	60 93 3c 27 	sts	0x273C, r22	; 0x80273c <TimerMainPeriod>
    7838:	70 93 3d 27 	sts	0x273D, r23	; 0x80273d <TimerMainPeriod+0x1>
    783c:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <TimerMainPeriod+0x2>
    7840:	90 93 3f 27 	sts	0x273F, r25	; 0x80273f <TimerMainPeriod+0x3>
				tcc0_init();
    7844:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z9tcc0_initv>
				TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    7848:	20 e0       	ldi	r18, 0x00	; 0
    784a:	30 e0       	ldi	r19, 0x00	; 0
    784c:	4a e7       	ldi	r20, 0x7A	; 122
    784e:	54 e4       	ldi	r21, 0x44	; 68
    7850:	60 91 3c 27 	lds	r22, 0x273C	; 0x80273c <TimerMainPeriod>
    7854:	70 91 3d 27 	lds	r23, 0x273D	; 0x80273d <TimerMainPeriod+0x1>
    7858:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <TimerMainPeriod+0x2>
    785c:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <TimerMainPeriod+0x3>
    7860:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    7864:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    7868:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    786c:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				ProgramRun=0;
    7870:	10 92 d0 27 	sts	0x27D0, r1	; 0x8027d0 <ProgramRun>
    7874:	a4 cd       	rjmp	.-1208   	; 0x73be <__vector_65+0xd0>
				//DistanceToGo2=0;
				//DistanceToGo3=0;
			}
		}
	}
}
    7876:	28 96       	adiw	r28, 0x08	; 8
    7878:	cd bf       	out	0x3d, r28	; 61
    787a:	de bf       	out	0x3e, r29	; 62
    787c:	df 91       	pop	r29
    787e:	cf 91       	pop	r28
    7880:	ff 91       	pop	r31
    7882:	ef 91       	pop	r30
    7884:	bf 91       	pop	r27
    7886:	af 91       	pop	r26
    7888:	9f 91       	pop	r25
    788a:	8f 91       	pop	r24
    788c:	7f 91       	pop	r23
    788e:	6f 91       	pop	r22
    7890:	5f 91       	pop	r21
    7892:	4f 91       	pop	r20
    7894:	3f 91       	pop	r19
    7896:	2f 91       	pop	r18
    7898:	1f 91       	pop	r17
    789a:	0f 91       	pop	r16
    789c:	ff 90       	pop	r15
    789e:	ef 90       	pop	r14
    78a0:	df 90       	pop	r13
    78a2:	cf 90       	pop	r12
    78a4:	bf 90       	pop	r11
    78a6:	af 90       	pop	r10
    78a8:	9f 90       	pop	r9
    78aa:	8f 90       	pop	r8
    78ac:	7f 90       	pop	r7
    78ae:	6f 90       	pop	r6
    78b0:	5f 90       	pop	r5
    78b2:	4f 90       	pop	r4
    78b4:	3f 90       	pop	r3
    78b6:	2f 90       	pop	r2
    78b8:	0f 90       	pop	r0
    78ba:	0b be       	out	0x3b, r0	; 59
    78bc:	0f 90       	pop	r0
    78be:	0a be       	out	0x3a, r0	; 58
    78c0:	0f 90       	pop	r0
    78c2:	09 be       	out	0x39, r0	; 57
    78c4:	0f 90       	pop	r0
    78c6:	08 be       	out	0x38, r0	; 56
    78c8:	0f 90       	pop	r0
    78ca:	0f be       	out	0x3f, r0	; 63
    78cc:	0f 90       	pop	r0
    78ce:	1f 90       	pop	r1
    78d0:	18 95       	reti

000078d2 <_Z12usartc0_initv>:
{
	// Note: The correct PORTC direction for the RxD, TxD and XCK signals
	// is configured in the ports_init function.
	// Transmitter is enabled
	// Set TxD=1
	PORTC.OUTSET=0x08;
    78d2:	88 e0       	ldi	r24, 0x08	; 8
    78d4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	// Communication mode: Asynchronous USART
	// Data bits: 8
	// Stop bits: 1
	// Parity: Disabled
	USARTC0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    78d8:	e0 ea       	ldi	r30, 0xA0	; 160
    78da:	f8 e0       	ldi	r31, 0x08	; 8
    78dc:	83 e0       	ldi	r24, 0x03	; 3
    78de:	85 83       	std	Z+5, r24	; 0x05

	// Receive complete interrupt: Medium Level
	// Transmit complete interrupt: Disabled
	// Data register empty interrupt: Disabled
	USARTC0.CTRLA=(USARTC0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
    78e0:	83 81       	ldd	r24, Z+3	; 0x03
	USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    78e2:	80 7c       	andi	r24, 0xC0	; 192
    78e4:	80 62       	ori	r24, 0x20	; 32
    78e6:	83 83       	std	Z+3, r24	; 0x03

	// Required Baud rate: 115200
	// Real Baud Rate: 115211.5 (x1 Mode), Error: 0.0 %
	USARTC0.BAUDCTRLA=0x2E;
    78e8:	8e e2       	ldi	r24, 0x2E	; 46
    78ea:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x08;
    78ec:	88 e9       	ldi	r24, 0x98	; 152
    78ee:	87 83       	std	Z+7, r24	; 0x07

	// Receiver: On
	// Transmitter: On
	// Double transmission speed mode: Off
	// Multi-processor communication mode: Off
	USARTC0.CTRLB=(USARTC0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
    78f0:	84 81       	ldd	r24, Z+4	; 0x04
	USART_RXEN_bm | USART_TXEN_bm;
    78f2:	80 7e       	andi	r24, 0xE0	; 224
    78f4:	88 61       	ori	r24, 0x18	; 24
    78f6:	84 83       	std	Z+4, r24	; 0x04
    78f8:	08 95       	ret

000078fa <__vector_25>:
bool rx_buffer_overflow_usartc0=0;

// USARTC0 Receiver interrupt service routine
// Debug port receive interrupt
ISR (USARTC0_RXC_vect)
{
    78fa:	1f 92       	push	r1
    78fc:	0f 92       	push	r0
    78fe:	0f b6       	in	r0, 0x3f	; 63
    7900:	0f 92       	push	r0
    7902:	11 24       	eor	r1, r1
    7904:	08 b6       	in	r0, 0x38	; 56
    7906:	0f 92       	push	r0
    7908:	18 be       	out	0x38, r1	; 56
    790a:	0b b6       	in	r0, 0x3b	; 59
    790c:	0f 92       	push	r0
    790e:	1b be       	out	0x3b, r1	; 59
    7910:	8f 93       	push	r24
    7912:	9f 93       	push	r25
    7914:	ef 93       	push	r30
    7916:	ff 93       	push	r31
	unsigned char status;
	char data;

	status=USARTC0.STATUS;
    7918:	e0 ea       	ldi	r30, 0xA0	; 160
    791a:	f8 e0       	ldi	r31, 0x08	; 8
    791c:	81 81       	ldd	r24, Z+1	; 0x01
	data=USARTC0.DATA;
    791e:	90 81       	ld	r25, Z
	if ((status & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
    7920:	8c 71       	andi	r24, 0x1C	; 28
    7922:	d9 f4       	brne	.+54     	; 0x795a <__vector_25+0x60>
	{
		rx_buffer_usartc0[rx_wr_index_usartc0++]=data;
    7924:	e0 91 e2 26 	lds	r30, 0x26E2	; 0x8026e2 <rx_wr_index_usartc0>
    7928:	81 e0       	ldi	r24, 0x01	; 1
    792a:	8e 0f       	add	r24, r30
    792c:	80 93 e2 26 	sts	0x26E2, r24	; 0x8026e2 <rx_wr_index_usartc0>
    7930:	f0 e0       	ldi	r31, 0x00	; 0
    7932:	ed 51       	subi	r30, 0x1D	; 29
    7934:	f9 4d       	sbci	r31, 0xD9	; 217
    7936:	90 83       	st	Z, r25
		#if RX_BUFFER_SIZE_USARTC0 == 256
		// special case for receiver buffer size=256
		if (++rx_counter_usartc0 == 0) rx_buffer_overflow_usartc0=1;
		#else
		if (rx_wr_index_usartc0 == RX_BUFFER_SIZE_USARTC0) rx_wr_index_usartc0=0;
    7938:	88 30       	cpi	r24, 0x08	; 8
    793a:	11 f4       	brne	.+4      	; 0x7940 <__vector_25+0x46>
    793c:	10 92 e2 26 	sts	0x26E2, r1	; 0x8026e2 <rx_wr_index_usartc0>
		if (++rx_counter_usartc0 == RX_BUFFER_SIZE_USARTC0)
    7940:	80 91 e1 26 	lds	r24, 0x26E1	; 0x8026e1 <rx_counter_usartc0>
    7944:	8f 5f       	subi	r24, 0xFF	; 255
    7946:	88 30       	cpi	r24, 0x08	; 8
    7948:	19 f0       	breq	.+6      	; 0x7950 <__vector_25+0x56>
    794a:	80 93 e1 26 	sts	0x26E1, r24	; 0x8026e1 <rx_counter_usartc0>
    794e:	05 c0       	rjmp	.+10     	; 0x795a <__vector_25+0x60>
		{
			rx_counter_usartc0=0;
    7950:	10 92 e1 26 	sts	0x26E1, r1	; 0x8026e1 <rx_counter_usartc0>
			rx_buffer_overflow_usartc0=1;
    7954:	81 e0       	ldi	r24, 0x01	; 1
    7956:	80 93 e0 26 	sts	0x26E0, r24	; 0x8026e0 <__data_end>
		}
		#endif
	}
}
    795a:	ff 91       	pop	r31
    795c:	ef 91       	pop	r30
    795e:	9f 91       	pop	r25
    7960:	8f 91       	pop	r24
    7962:	0f 90       	pop	r0
    7964:	0b be       	out	0x3b, r0	; 59
    7966:	0f 90       	pop	r0
    7968:	08 be       	out	0x38, r0	; 56
    796a:	0f 90       	pop	r0
    796c:	0f be       	out	0x3f, r0	; 63
    796e:	0f 90       	pop	r0
    7970:	1f 90       	pop	r1
    7972:	18 95       	reti

00007974 <main>:

    // Interrupt system initialization
    // Optimize for speed
    //#pragma optsize-
    // Make sure the interrupts are disabled
    asm("cli");
    7974:	f8 94       	cli
    // Low level interrupt: On
    // Round-robin scheduling for low level interrupt: Off
    // Medium level interrupt: On
    // High level interrupt: On
    // The interrupt vectors will be placed at the start of the Application FLASH section
    n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
    7976:	e0 ea       	ldi	r30, 0xA0	; 160
    7978:	f0 e0       	ldi	r31, 0x00	; 0
    797a:	82 81       	ldd	r24, Z+2	; 0x02
    PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    797c:	88 73       	andi	r24, 0x38	; 56
    797e:	87 60       	ori	r24, 0x07	; 7
    CCP=CCP_IOREG_gc;
    7980:	98 ed       	ldi	r25, 0xD8	; 216
    7982:	94 bf       	out	0x34, r25	; 52
    PMIC.CTRL=n;
    7984:	82 83       	std	Z+2, r24	; 0x02
    // Set the default priority for round-robin scheduling
    PMIC.INTPRI=0x00;
    7986:	11 82       	std	Z+1, r1	; 0x01
	
    // Restore optimization for size if needed
    //#pragma optsize_default

    // System clocks initialization
    system_clocks_init();
    7988:	0e 94 0d 34 	call	0x681a	; 0x681a <_Z18system_clocks_initv>

    // Ports initialization
    ports_init();
    798c:	0e 94 40 01 	call	0x280	; 0x280 <_Z10ports_initv>

    // Virtual Ports initialization
    //vports_init();
    spif_init();
    7990:	0e 94 00 02 	call	0x400	; 0x400 <_Z9spif_initv>


    // Globally enable interrupts
    asm("sei");
    7994:	78 94       	sei

    tcc0_init();  // Axis interpolation counter for level 0 
    7996:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z9tcc0_initv>
    tcc1_init();  // Axis interpolation counter for level 1
    799a:	0e 94 33 0c 	call	0x1866	; 0x1866 <_Z9tcc1_initv>
    tcd1_init();  // PLC interpolation timer
    799e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <_Z9tcd1_initv>
    spie_init();  // SPI Flash initialization
    79a2:	0e 94 a0 02 	call	0x540	; 0x540 <_Z9spie_initv>
    SG17_SET;     // says to 7 segment board and says that Xmega is loaded 
    79a6:	e0 e0       	ldi	r30, 0x00	; 0
    79a8:	f7 e0       	ldi	r31, 0x07	; 7
    79aa:	84 81       	ldd	r24, Z+4	; 0x04
    79ac:	82 60       	ori	r24, 0x02	; 2
    79ae:	84 83       	std	Z+4, r24	; 0x04
    usartc0_init();
    79b0:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <_Z12usartc0_initv>
    SETSFRST; //set Serial Flash Reset means Xmega is able to read from SPI Flash 
    79b4:	e0 e8       	ldi	r30, 0x80	; 128
    79b6:	f6 e0       	ldi	r31, 0x06	; 6
    79b8:	84 81       	ldd	r24, Z+4	; 0x04
    79ba:	84 60       	ori	r24, 0x04	; 4
    79bc:	84 83       	std	Z+4, r24	; 0x04
    SETSFWP;  //set Serial Flash Write protect to allow raspberry to write on it
    79be:	84 81       	ldd	r24, Z+4	; 0x04
    79c0:	82 60       	ori	r24, 0x02	; 2
    79c2:	84 83       	std	Z+4, r24	; 0x04
    79c4:	2f ef       	ldi	r18, 0xFF	; 255
    79c6:	89 e6       	ldi	r24, 0x69	; 105
    79c8:	98 e1       	ldi	r25, 0x18	; 24
    79ca:	21 50       	subi	r18, 0x01	; 1
    79cc:	80 40       	sbci	r24, 0x00	; 0
    79ce:	90 40       	sbci	r25, 0x00	; 0
    79d0:	e1 f7       	brne	.-8      	; 0x79ca <main+0x56>
    79d2:	00 c0       	rjmp	.+0      	; 0x79d4 <main+0x60>
    79d4:	00 00       	nop
    _delay_ms(250);
    printf("Reading Config...\r\n");
    79d6:	85 ea       	ldi	r24, 0xA5	; 165
    79d8:	96 e2       	ldi	r25, 0x26	; 38
    79da:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
    ReadConfig();  // read configuration from Serail Flash 
    79de:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z10ReadConfigv>

    while (1)
    {
		// ifjog is pushed the LED on the board turns on
	    if(JogNeg) SETBIT(PORTR.OUT,0);
    79e2:	0f 2e       	mov	r0, r31
    79e4:	f0 e6       	ldi	r31, 0x60	; 96
    79e6:	ef 2e       	mov	r14, r31
    79e8:	f6 e0       	ldi	r31, 0x06	; 6
    79ea:	ff 2e       	mov	r15, r31
    79ec:	f0 2d       	mov	r31, r0
    79ee:	c0 ee       	ldi	r28, 0xE0	; 224
    79f0:	d7 e0       	ldi	r29, 0x07	; 7
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
	    if(JogPos) SETBIT(PORTR.OUT,1);
    79f2:	00 ee       	ldi	r16, 0xE0	; 224
    79f4:	16 e0       	ldi	r17, 0x06	; 6
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
	    
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3; // is any axis is moving
    79f6:	44 24       	eor	r4, r4
    79f8:	43 94       	inc	r4
			    else
			    {
				    printf("Read Main Program.\r\n");
				    readRam();
			    }
			    printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    79fa:	0f 2e       	mov	r0, r31
    79fc:	f2 e5       	ldi	r31, 0x52	; 82
    79fe:	cf 2e       	mov	r12, r31
    7a00:	f8 e2       	ldi	r31, 0x28	; 40
    7a02:	df 2e       	mov	r13, r31
    7a04:	f0 2d       	mov	r31, r0
    7a06:	0f 2e       	mov	r0, r31
    7a08:	f9 ef       	ldi	r31, 0xF9	; 249
    7a0a:	af 2e       	mov	r10, r31
    7a0c:	f0 e2       	ldi	r31, 0x20	; 32
    7a0e:	bf 2e       	mov	r11, r31
    7a10:	f0 2d       	mov	r31, r0
	    if(JogNeg) SETBIT(PORTR.OUT,0);
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
	    if(JogPos) SETBIT(PORTR.OUT,1);
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
	    
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3; // is any axis is moving
    7a12:	54 2c       	mov	r5, r4
    7a14:	0f 2e       	mov	r0, r31
    7a16:	f5 e1       	ldi	r31, 0x15	; 21
    7a18:	6f 2e       	mov	r6, r31
    7a1a:	71 2c       	mov	r7, r1
    7a1c:	f0 2d       	mov	r31, r0
    ReadConfig();  // read configuration from Serail Flash 

    while (1)
    {
		// ifjog is pushed the LED on the board turns on
	    if(JogNeg) SETBIT(PORTR.OUT,0);
    7a1e:	f7 01       	movw	r30, r14
    7a20:	80 85       	ldd	r24, Z+8	; 0x08
    7a22:	83 ff       	sbrs	r24, 3
    7a24:	03 c0       	rjmp	.+6      	; 0x7a2c <main+0xb8>
    7a26:	8c 81       	ldd	r24, Y+4	; 0x04
    7a28:	81 60       	ori	r24, 0x01	; 1
    7a2a:	8c 83       	std	Y+4, r24	; 0x04
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
    7a2c:	f7 01       	movw	r30, r14
    7a2e:	80 85       	ldd	r24, Z+8	; 0x08
    7a30:	83 fd       	sbrc	r24, 3
    7a32:	03 c0       	rjmp	.+6      	; 0x7a3a <main+0xc6>
    7a34:	8c 81       	ldd	r24, Y+4	; 0x04
    7a36:	8e 7f       	andi	r24, 0xFE	; 254
    7a38:	8c 83       	std	Y+4, r24	; 0x04
	    if(JogPos) SETBIT(PORTR.OUT,1);
    7a3a:	f8 01       	movw	r30, r16
    7a3c:	80 85       	ldd	r24, Z+8	; 0x08
    7a3e:	81 ff       	sbrs	r24, 1
    7a40:	03 c0       	rjmp	.+6      	; 0x7a48 <main+0xd4>
    7a42:	8c 81       	ldd	r24, Y+4	; 0x04
    7a44:	82 60       	ori	r24, 0x02	; 2
    7a46:	8c 83       	std	Y+4, r24	; 0x04
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
    7a48:	f8 01       	movw	r30, r16
    7a4a:	80 85       	ldd	r24, Z+8	; 0x08
    7a4c:	81 fd       	sbrc	r24, 1
    7a4e:	03 c0       	rjmp	.+6      	; 0x7a56 <main+0xe2>
    7a50:	8c 81       	ldd	r24, Y+4	; 0x04
    7a52:	8d 7f       	andi	r24, 0xFD	; 253
    7a54:	8c 83       	std	Y+4, r24	; 0x04
	    
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3; // is any axis is moving
    7a56:	80 91 5c 27 	lds	r24, 0x275C	; 0x80275c <AxisIsMoving1>
    7a5a:	81 11       	cpse	r24, r1
    7a5c:	79 c0       	rjmp	.+242    	; 0x7b50 <main+0x1dc>
    7a5e:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <AxisIsMoving2>
    7a62:	81 11       	cpse	r24, r1
    7a64:	75 c0       	rjmp	.+234    	; 0x7b50 <main+0x1dc>
    7a66:	90 91 5a 27 	lds	r25, 0x275A	; 0x80275a <AxisIsMoving3>
    7a6a:	85 2d       	mov	r24, r5
    7a6c:	91 11       	cpse	r25, r1
    7a6e:	01 c0       	rjmp	.+2      	; 0x7a72 <main+0xfe>
    7a70:	80 e0       	ldi	r24, 0x00	; 0
    7a72:	80 93 0c 27 	sts	0x270C, r24	; 0x80270c <AxisMoving>
		
	    if(ProgramRun && !AxisMoving)
    7a76:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <ProgramRun>
    7a7a:	88 23       	and	r24, r24
    7a7c:	f1 f1       	breq	.+124    	; 0x7afa <main+0x186>
    7a7e:	91 11       	cpse	r25, r1
    7a80:	3c c0       	rjmp	.+120    	; 0x7afa <main+0x186>
	    {
		    if(IsPause==0)
    7a82:	80 91 ec 26 	lds	r24, 0x26EC	; 0x8026ec <IsPause>
    7a86:	81 11       	cpse	r24, r1
    7a88:	38 c0       	rjmp	.+112    	; 0x7afa <main+0x186>
		    {
			    if(RunSubProgram)
    7a8a:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <RunSubProgram>
    7a8e:	88 23       	and	r24, r24
    7a90:	49 f0       	breq	.+18     	; 0x7aa4 <main+0x130>
			    {
				    printf("Read Sub Program.\r\n");
    7a92:	88 eb       	ldi	r24, 0xB8	; 184
    7a94:	96 e2       	ldi	r25, 0x26	; 38
    7a96:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
				    ReadSubProgram(0);
    7a9a:	80 e0       	ldi	r24, 0x00	; 0
    7a9c:	90 e0       	ldi	r25, 0x00	; 0
    7a9e:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z14ReadSubProgramj>
    7aa2:	06 c0       	rjmp	.+12     	; 0x7ab0 <main+0x13c>
			    }
			    else
			    {
				    printf("Read Main Program.\r\n");
    7aa4:	8b ec       	ldi	r24, 0xCB	; 203
    7aa6:	96 e2       	ldi	r25, 0x26	; 38
    7aa8:	0e 94 c4 40 	call	0x8188	; 0x8188 <puts>
				    readRam();
    7aac:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z7readRamv>
			    }
			    printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    7ab0:	f6 01       	movw	r30, r12
    7ab2:	83 81       	ldd	r24, Z+3	; 0x03
    7ab4:	1f 92       	push	r1
    7ab6:	8f 93       	push	r24
    7ab8:	81 81       	ldd	r24, Z+1	; 0x01
    7aba:	8f 93       	push	r24
    7abc:	80 81       	ld	r24, Z
    7abe:	8f 93       	push	r24
    7ac0:	bf 92       	push	r11
    7ac2:	af 92       	push	r10
    7ac4:	0e 94 b0 40 	call	0x8160	; 0x8160 <printf>
			    
				PORTR.OUTTGL=0x01; //program running will flash the LED 
    7ac8:	4f 82       	std	Y+7, r4	; 0x07
			    PRGExe();
    7aca:	0e 94 09 11 	call	0x2212	; 0x2212 <_Z6PRGExev>
			    if(PRGEXEindex < PRGSize) PRGEXEindex++;
    7ace:	80 91 0a 27 	lds	r24, 0x270A	; 0x80270a <PRGEXEindex>
    7ad2:	90 91 0b 27 	lds	r25, 0x270B	; 0x80270b <PRGEXEindex+0x1>
    7ad6:	0f 90       	pop	r0
    7ad8:	0f 90       	pop	r0
    7ada:	0f 90       	pop	r0
    7adc:	0f 90       	pop	r0
    7ade:	0f 90       	pop	r0
    7ae0:	0f 90       	pop	r0
    7ae2:	20 91 08 27 	lds	r18, 0x2708	; 0x802708 <PRGSize>
    7ae6:	30 91 09 27 	lds	r19, 0x2709	; 0x802709 <PRGSize+0x1>
    7aea:	82 17       	cp	r24, r18
    7aec:	93 07       	cpc	r25, r19
    7aee:	2c f4       	brge	.+10     	; 0x7afa <main+0x186>
    7af0:	01 96       	adiw	r24, 0x01	; 1
    7af2:	80 93 0a 27 	sts	0x270A, r24	; 0x80270a <PRGEXEindex>
    7af6:	90 93 0b 27 	sts	0x270B, r25	; 0x80270b <PRGEXEindex+0x1>
		    }
	    }
	    /**********************************************/
	    if(cmdIsReady==0) continue;
    7afa:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <cmdIsReady>
    7afe:	88 23       	and	r24, r24
    7b00:	09 f4       	brne	.+2      	; 0x7b04 <main+0x190>
    7b02:	8d cf       	rjmp	.-230    	; 0x7a1e <main+0xaa>
    7b04:	0f 2e       	mov	r0, r31
    7b06:	f3 e2       	ldi	r31, 0x23	; 35
    7b08:	8f 2e       	mov	r8, r31
    7b0a:	f7 e2       	ldi	r31, 0x27	; 39
    7b0c:	9f 2e       	mov	r9, r31
    7b0e:	f0 2d       	mov	r31, r0
    7b10:	e5 ea       	ldi	r30, 0xA5	; 165
    7b12:	f8 e2       	ldi	r31, 0x28	; 40
    7b14:	2a eb       	ldi	r18, 0xBA	; 186
    7b16:	38 e2       	ldi	r19, 0x28	; 40
    7b18:	d4 01       	movw	r26, r8
	    for (j = 0 ; j < 21 ; j++)
	    {
		    cmdTemp[j] = EXECMD[j];
    7b1a:	80 81       	ld	r24, Z
    7b1c:	8d 93       	st	X+, r24
		    EXECMD[j] = 0;
    7b1e:	11 92       	st	Z+, r1
			    if(PRGEXEindex < PRGSize) PRGEXEindex++;
		    }
	    }
	    /**********************************************/
	    if(cmdIsReady==0) continue;
	    for (j = 0 ; j < 21 ; j++)
    7b20:	2e 17       	cp	r18, r30
    7b22:	3f 07       	cpc	r19, r31
    7b24:	d1 f7       	brne	.-12     	; 0x7b1a <main+0x1a6>
    7b26:	60 92 3a 27 	sts	0x273A, r6	; 0x80273a <j>
    7b2a:	70 92 3b 27 	sts	0x273B, r7	; 0x80273b <j+0x1>
	    {
		    cmdTemp[j] = EXECMD[j];
		    EXECMD[j] = 0;
	    }
	    cmdExe();
    7b2e:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <_Z6cmdExev>
    7b32:	88 e3       	ldi	r24, 0x38	; 56
    7b34:	97 e2       	ldi	r25, 0x27	; 39
	    for (j=0;j<21;j++) cmdTemp[j] = 0;
    7b36:	f4 01       	movw	r30, r8
    7b38:	11 92       	st	Z+, r1
    7b3a:	4f 01       	movw	r8, r30
    7b3c:	e8 17       	cp	r30, r24
    7b3e:	f9 07       	cpc	r31, r25
    7b40:	d1 f7       	brne	.-12     	; 0x7b36 <main+0x1c2>
    7b42:	60 92 3a 27 	sts	0x273A, r6	; 0x80273a <j>
    7b46:	70 92 3b 27 	sts	0x273B, r7	; 0x80273b <j+0x1>
	    cmdIsReady=0;
    7b4a:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <cmdIsReady>
    7b4e:	67 cf       	rjmp	.-306    	; 0x7a1e <main+0xaa>
	    if(JogNeg) SETBIT(PORTR.OUT,0);
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
	    if(JogPos) SETBIT(PORTR.OUT,1);
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
	    
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3; // is any axis is moving
    7b50:	50 92 0c 27 	sts	0x270C, r5	; 0x80270c <AxisMoving>
    7b54:	d2 cf       	rjmp	.-92     	; 0x7afa <main+0x186>

00007b56 <__subsf3>:
    7b56:	50 58       	subi	r21, 0x80	; 128

00007b58 <__addsf3>:
    7b58:	bb 27       	eor	r27, r27
    7b5a:	aa 27       	eor	r26, r26
    7b5c:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__addsf3x>
    7b60:	0c 94 14 3f 	jmp	0x7e28	; 0x7e28 <__fp_round>
    7b64:	0e 94 06 3f 	call	0x7e0c	; 0x7e0c <__fp_pscA>
    7b68:	38 f0       	brcs	.+14     	; 0x7b78 <__addsf3+0x20>
    7b6a:	0e 94 0d 3f 	call	0x7e1a	; 0x7e1a <__fp_pscB>
    7b6e:	20 f0       	brcs	.+8      	; 0x7b78 <__addsf3+0x20>
    7b70:	39 f4       	brne	.+14     	; 0x7b80 <__addsf3+0x28>
    7b72:	9f 3f       	cpi	r25, 0xFF	; 255
    7b74:	19 f4       	brne	.+6      	; 0x7b7c <__addsf3+0x24>
    7b76:	26 f4       	brtc	.+8      	; 0x7b80 <__addsf3+0x28>
    7b78:	0c 94 03 3f 	jmp	0x7e06	; 0x7e06 <__fp_nan>
    7b7c:	0e f4       	brtc	.+2      	; 0x7b80 <__addsf3+0x28>
    7b7e:	e0 95       	com	r30
    7b80:	e7 fb       	bst	r30, 7
    7b82:	0c 94 fd 3e 	jmp	0x7dfa	; 0x7dfa <__fp_inf>

00007b86 <__addsf3x>:
    7b86:	e9 2f       	mov	r30, r25
    7b88:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <__fp_split3>
    7b8c:	58 f3       	brcs	.-42     	; 0x7b64 <__addsf3+0xc>
    7b8e:	ba 17       	cp	r27, r26
    7b90:	62 07       	cpc	r22, r18
    7b92:	73 07       	cpc	r23, r19
    7b94:	84 07       	cpc	r24, r20
    7b96:	95 07       	cpc	r25, r21
    7b98:	20 f0       	brcs	.+8      	; 0x7ba2 <__addsf3x+0x1c>
    7b9a:	79 f4       	brne	.+30     	; 0x7bba <__addsf3x+0x34>
    7b9c:	a6 f5       	brtc	.+104    	; 0x7c06 <__addsf3x+0x80>
    7b9e:	0c 94 47 3f 	jmp	0x7e8e	; 0x7e8e <__fp_zero>
    7ba2:	0e f4       	brtc	.+2      	; 0x7ba6 <__addsf3x+0x20>
    7ba4:	e0 95       	com	r30
    7ba6:	0b 2e       	mov	r0, r27
    7ba8:	ba 2f       	mov	r27, r26
    7baa:	a0 2d       	mov	r26, r0
    7bac:	0b 01       	movw	r0, r22
    7bae:	b9 01       	movw	r22, r18
    7bb0:	90 01       	movw	r18, r0
    7bb2:	0c 01       	movw	r0, r24
    7bb4:	ca 01       	movw	r24, r20
    7bb6:	a0 01       	movw	r20, r0
    7bb8:	11 24       	eor	r1, r1
    7bba:	ff 27       	eor	r31, r31
    7bbc:	59 1b       	sub	r21, r25
    7bbe:	99 f0       	breq	.+38     	; 0x7be6 <__addsf3x+0x60>
    7bc0:	59 3f       	cpi	r21, 0xF9	; 249
    7bc2:	50 f4       	brcc	.+20     	; 0x7bd8 <__addsf3x+0x52>
    7bc4:	50 3e       	cpi	r21, 0xE0	; 224
    7bc6:	68 f1       	brcs	.+90     	; 0x7c22 <__addsf3x+0x9c>
    7bc8:	1a 16       	cp	r1, r26
    7bca:	f0 40       	sbci	r31, 0x00	; 0
    7bcc:	a2 2f       	mov	r26, r18
    7bce:	23 2f       	mov	r18, r19
    7bd0:	34 2f       	mov	r19, r20
    7bd2:	44 27       	eor	r20, r20
    7bd4:	58 5f       	subi	r21, 0xF8	; 248
    7bd6:	f3 cf       	rjmp	.-26     	; 0x7bbe <__addsf3x+0x38>
    7bd8:	46 95       	lsr	r20
    7bda:	37 95       	ror	r19
    7bdc:	27 95       	ror	r18
    7bde:	a7 95       	ror	r26
    7be0:	f0 40       	sbci	r31, 0x00	; 0
    7be2:	53 95       	inc	r21
    7be4:	c9 f7       	brne	.-14     	; 0x7bd8 <__addsf3x+0x52>
    7be6:	7e f4       	brtc	.+30     	; 0x7c06 <__addsf3x+0x80>
    7be8:	1f 16       	cp	r1, r31
    7bea:	ba 0b       	sbc	r27, r26
    7bec:	62 0b       	sbc	r22, r18
    7bee:	73 0b       	sbc	r23, r19
    7bf0:	84 0b       	sbc	r24, r20
    7bf2:	ba f0       	brmi	.+46     	; 0x7c22 <__addsf3x+0x9c>
    7bf4:	91 50       	subi	r25, 0x01	; 1
    7bf6:	a1 f0       	breq	.+40     	; 0x7c20 <__addsf3x+0x9a>
    7bf8:	ff 0f       	add	r31, r31
    7bfa:	bb 1f       	adc	r27, r27
    7bfc:	66 1f       	adc	r22, r22
    7bfe:	77 1f       	adc	r23, r23
    7c00:	88 1f       	adc	r24, r24
    7c02:	c2 f7       	brpl	.-16     	; 0x7bf4 <__addsf3x+0x6e>
    7c04:	0e c0       	rjmp	.+28     	; 0x7c22 <__addsf3x+0x9c>
    7c06:	ba 0f       	add	r27, r26
    7c08:	62 1f       	adc	r22, r18
    7c0a:	73 1f       	adc	r23, r19
    7c0c:	84 1f       	adc	r24, r20
    7c0e:	48 f4       	brcc	.+18     	; 0x7c22 <__addsf3x+0x9c>
    7c10:	87 95       	ror	r24
    7c12:	77 95       	ror	r23
    7c14:	67 95       	ror	r22
    7c16:	b7 95       	ror	r27
    7c18:	f7 95       	ror	r31
    7c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    7c1c:	08 f0       	brcs	.+2      	; 0x7c20 <__addsf3x+0x9a>
    7c1e:	b0 cf       	rjmp	.-160    	; 0x7b80 <__addsf3+0x28>
    7c20:	93 95       	inc	r25
    7c22:	88 0f       	add	r24, r24
    7c24:	08 f0       	brcs	.+2      	; 0x7c28 <__addsf3x+0xa2>
    7c26:	99 27       	eor	r25, r25
    7c28:	ee 0f       	add	r30, r30
    7c2a:	97 95       	ror	r25
    7c2c:	87 95       	ror	r24
    7c2e:	08 95       	ret

00007c30 <__divsf3>:
    7c30:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__divsf3x>
    7c34:	0c 94 14 3f 	jmp	0x7e28	; 0x7e28 <__fp_round>
    7c38:	0e 94 0d 3f 	call	0x7e1a	; 0x7e1a <__fp_pscB>
    7c3c:	58 f0       	brcs	.+22     	; 0x7c54 <__divsf3+0x24>
    7c3e:	0e 94 06 3f 	call	0x7e0c	; 0x7e0c <__fp_pscA>
    7c42:	40 f0       	brcs	.+16     	; 0x7c54 <__divsf3+0x24>
    7c44:	29 f4       	brne	.+10     	; 0x7c50 <__divsf3+0x20>
    7c46:	5f 3f       	cpi	r21, 0xFF	; 255
    7c48:	29 f0       	breq	.+10     	; 0x7c54 <__divsf3+0x24>
    7c4a:	0c 94 fd 3e 	jmp	0x7dfa	; 0x7dfa <__fp_inf>
    7c4e:	51 11       	cpse	r21, r1
    7c50:	0c 94 48 3f 	jmp	0x7e90	; 0x7e90 <__fp_szero>
    7c54:	0c 94 03 3f 	jmp	0x7e06	; 0x7e06 <__fp_nan>

00007c58 <__divsf3x>:
    7c58:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <__fp_split3>
    7c5c:	68 f3       	brcs	.-38     	; 0x7c38 <__divsf3+0x8>

00007c5e <__divsf3_pse>:
    7c5e:	99 23       	and	r25, r25
    7c60:	b1 f3       	breq	.-20     	; 0x7c4e <__divsf3+0x1e>
    7c62:	55 23       	and	r21, r21
    7c64:	91 f3       	breq	.-28     	; 0x7c4a <__divsf3+0x1a>
    7c66:	95 1b       	sub	r25, r21
    7c68:	55 0b       	sbc	r21, r21
    7c6a:	bb 27       	eor	r27, r27
    7c6c:	aa 27       	eor	r26, r26
    7c6e:	62 17       	cp	r22, r18
    7c70:	73 07       	cpc	r23, r19
    7c72:	84 07       	cpc	r24, r20
    7c74:	38 f0       	brcs	.+14     	; 0x7c84 <__divsf3_pse+0x26>
    7c76:	9f 5f       	subi	r25, 0xFF	; 255
    7c78:	5f 4f       	sbci	r21, 0xFF	; 255
    7c7a:	22 0f       	add	r18, r18
    7c7c:	33 1f       	adc	r19, r19
    7c7e:	44 1f       	adc	r20, r20
    7c80:	aa 1f       	adc	r26, r26
    7c82:	a9 f3       	breq	.-22     	; 0x7c6e <__divsf3_pse+0x10>
    7c84:	35 d0       	rcall	.+106    	; 0x7cf0 <__divsf3_pse+0x92>
    7c86:	0e 2e       	mov	r0, r30
    7c88:	3a f0       	brmi	.+14     	; 0x7c98 <__divsf3_pse+0x3a>
    7c8a:	e0 e8       	ldi	r30, 0x80	; 128
    7c8c:	32 d0       	rcall	.+100    	; 0x7cf2 <__divsf3_pse+0x94>
    7c8e:	91 50       	subi	r25, 0x01	; 1
    7c90:	50 40       	sbci	r21, 0x00	; 0
    7c92:	e6 95       	lsr	r30
    7c94:	00 1c       	adc	r0, r0
    7c96:	ca f7       	brpl	.-14     	; 0x7c8a <__divsf3_pse+0x2c>
    7c98:	2b d0       	rcall	.+86     	; 0x7cf0 <__divsf3_pse+0x92>
    7c9a:	fe 2f       	mov	r31, r30
    7c9c:	29 d0       	rcall	.+82     	; 0x7cf0 <__divsf3_pse+0x92>
    7c9e:	66 0f       	add	r22, r22
    7ca0:	77 1f       	adc	r23, r23
    7ca2:	88 1f       	adc	r24, r24
    7ca4:	bb 1f       	adc	r27, r27
    7ca6:	26 17       	cp	r18, r22
    7ca8:	37 07       	cpc	r19, r23
    7caa:	48 07       	cpc	r20, r24
    7cac:	ab 07       	cpc	r26, r27
    7cae:	b0 e8       	ldi	r27, 0x80	; 128
    7cb0:	09 f0       	breq	.+2      	; 0x7cb4 <__divsf3_pse+0x56>
    7cb2:	bb 0b       	sbc	r27, r27
    7cb4:	80 2d       	mov	r24, r0
    7cb6:	bf 01       	movw	r22, r30
    7cb8:	ff 27       	eor	r31, r31
    7cba:	93 58       	subi	r25, 0x83	; 131
    7cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    7cbe:	3a f0       	brmi	.+14     	; 0x7cce <__divsf3_pse+0x70>
    7cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    7cc2:	51 05       	cpc	r21, r1
    7cc4:	78 f0       	brcs	.+30     	; 0x7ce4 <__divsf3_pse+0x86>
    7cc6:	0c 94 fd 3e 	jmp	0x7dfa	; 0x7dfa <__fp_inf>
    7cca:	0c 94 48 3f 	jmp	0x7e90	; 0x7e90 <__fp_szero>
    7cce:	5f 3f       	cpi	r21, 0xFF	; 255
    7cd0:	e4 f3       	brlt	.-8      	; 0x7cca <__divsf3_pse+0x6c>
    7cd2:	98 3e       	cpi	r25, 0xE8	; 232
    7cd4:	d4 f3       	brlt	.-12     	; 0x7cca <__divsf3_pse+0x6c>
    7cd6:	86 95       	lsr	r24
    7cd8:	77 95       	ror	r23
    7cda:	67 95       	ror	r22
    7cdc:	b7 95       	ror	r27
    7cde:	f7 95       	ror	r31
    7ce0:	9f 5f       	subi	r25, 0xFF	; 255
    7ce2:	c9 f7       	brne	.-14     	; 0x7cd6 <__divsf3_pse+0x78>
    7ce4:	88 0f       	add	r24, r24
    7ce6:	91 1d       	adc	r25, r1
    7ce8:	96 95       	lsr	r25
    7cea:	87 95       	ror	r24
    7cec:	97 f9       	bld	r25, 7
    7cee:	08 95       	ret
    7cf0:	e1 e0       	ldi	r30, 0x01	; 1
    7cf2:	66 0f       	add	r22, r22
    7cf4:	77 1f       	adc	r23, r23
    7cf6:	88 1f       	adc	r24, r24
    7cf8:	bb 1f       	adc	r27, r27
    7cfa:	62 17       	cp	r22, r18
    7cfc:	73 07       	cpc	r23, r19
    7cfe:	84 07       	cpc	r24, r20
    7d00:	ba 07       	cpc	r27, r26
    7d02:	20 f0       	brcs	.+8      	; 0x7d0c <__divsf3_pse+0xae>
    7d04:	62 1b       	sub	r22, r18
    7d06:	73 0b       	sbc	r23, r19
    7d08:	84 0b       	sbc	r24, r20
    7d0a:	ba 0b       	sbc	r27, r26
    7d0c:	ee 1f       	adc	r30, r30
    7d0e:	88 f7       	brcc	.-30     	; 0x7cf2 <__divsf3_pse+0x94>
    7d10:	e0 95       	com	r30
    7d12:	08 95       	ret

00007d14 <__fixsfsi>:
    7d14:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <__fixunssfsi>
    7d18:	68 94       	set
    7d1a:	b1 11       	cpse	r27, r1
    7d1c:	0c 94 48 3f 	jmp	0x7e90	; 0x7e90 <__fp_szero>
    7d20:	08 95       	ret

00007d22 <__fixunssfsi>:
    7d22:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <__fp_splitA>
    7d26:	88 f0       	brcs	.+34     	; 0x7d4a <__fixunssfsi+0x28>
    7d28:	9f 57       	subi	r25, 0x7F	; 127
    7d2a:	98 f0       	brcs	.+38     	; 0x7d52 <__fixunssfsi+0x30>
    7d2c:	b9 2f       	mov	r27, r25
    7d2e:	99 27       	eor	r25, r25
    7d30:	b7 51       	subi	r27, 0x17	; 23
    7d32:	b0 f0       	brcs	.+44     	; 0x7d60 <__fixunssfsi+0x3e>
    7d34:	e1 f0       	breq	.+56     	; 0x7d6e <__fixunssfsi+0x4c>
    7d36:	66 0f       	add	r22, r22
    7d38:	77 1f       	adc	r23, r23
    7d3a:	88 1f       	adc	r24, r24
    7d3c:	99 1f       	adc	r25, r25
    7d3e:	1a f0       	brmi	.+6      	; 0x7d46 <__fixunssfsi+0x24>
    7d40:	ba 95       	dec	r27
    7d42:	c9 f7       	brne	.-14     	; 0x7d36 <__fixunssfsi+0x14>
    7d44:	14 c0       	rjmp	.+40     	; 0x7d6e <__fixunssfsi+0x4c>
    7d46:	b1 30       	cpi	r27, 0x01	; 1
    7d48:	91 f0       	breq	.+36     	; 0x7d6e <__fixunssfsi+0x4c>
    7d4a:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <__fp_zero>
    7d4e:	b1 e0       	ldi	r27, 0x01	; 1
    7d50:	08 95       	ret
    7d52:	0c 94 47 3f 	jmp	0x7e8e	; 0x7e8e <__fp_zero>
    7d56:	67 2f       	mov	r22, r23
    7d58:	78 2f       	mov	r23, r24
    7d5a:	88 27       	eor	r24, r24
    7d5c:	b8 5f       	subi	r27, 0xF8	; 248
    7d5e:	39 f0       	breq	.+14     	; 0x7d6e <__fixunssfsi+0x4c>
    7d60:	b9 3f       	cpi	r27, 0xF9	; 249
    7d62:	cc f3       	brlt	.-14     	; 0x7d56 <__fixunssfsi+0x34>
    7d64:	86 95       	lsr	r24
    7d66:	77 95       	ror	r23
    7d68:	67 95       	ror	r22
    7d6a:	b3 95       	inc	r27
    7d6c:	d9 f7       	brne	.-10     	; 0x7d64 <__fixunssfsi+0x42>
    7d6e:	3e f4       	brtc	.+14     	; 0x7d7e <__fixunssfsi+0x5c>
    7d70:	90 95       	com	r25
    7d72:	80 95       	com	r24
    7d74:	70 95       	com	r23
    7d76:	61 95       	neg	r22
    7d78:	7f 4f       	sbci	r23, 0xFF	; 255
    7d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    7d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d7e:	08 95       	ret

00007d80 <__floatunsisf>:
    7d80:	e8 94       	clt
    7d82:	09 c0       	rjmp	.+18     	; 0x7d96 <__floatsisf+0x12>

00007d84 <__floatsisf>:
    7d84:	97 fb       	bst	r25, 7
    7d86:	3e f4       	brtc	.+14     	; 0x7d96 <__floatsisf+0x12>
    7d88:	90 95       	com	r25
    7d8a:	80 95       	com	r24
    7d8c:	70 95       	com	r23
    7d8e:	61 95       	neg	r22
    7d90:	7f 4f       	sbci	r23, 0xFF	; 255
    7d92:	8f 4f       	sbci	r24, 0xFF	; 255
    7d94:	9f 4f       	sbci	r25, 0xFF	; 255
    7d96:	99 23       	and	r25, r25
    7d98:	a9 f0       	breq	.+42     	; 0x7dc4 <__floatsisf+0x40>
    7d9a:	f9 2f       	mov	r31, r25
    7d9c:	96 e9       	ldi	r25, 0x96	; 150
    7d9e:	bb 27       	eor	r27, r27
    7da0:	93 95       	inc	r25
    7da2:	f6 95       	lsr	r31
    7da4:	87 95       	ror	r24
    7da6:	77 95       	ror	r23
    7da8:	67 95       	ror	r22
    7daa:	b7 95       	ror	r27
    7dac:	f1 11       	cpse	r31, r1
    7dae:	f8 cf       	rjmp	.-16     	; 0x7da0 <__floatsisf+0x1c>
    7db0:	fa f4       	brpl	.+62     	; 0x7df0 <__floatsisf+0x6c>
    7db2:	bb 0f       	add	r27, r27
    7db4:	11 f4       	brne	.+4      	; 0x7dba <__floatsisf+0x36>
    7db6:	60 ff       	sbrs	r22, 0
    7db8:	1b c0       	rjmp	.+54     	; 0x7df0 <__floatsisf+0x6c>
    7dba:	6f 5f       	subi	r22, 0xFF	; 255
    7dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    7dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    7dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    7dc2:	16 c0       	rjmp	.+44     	; 0x7df0 <__floatsisf+0x6c>
    7dc4:	88 23       	and	r24, r24
    7dc6:	11 f0       	breq	.+4      	; 0x7dcc <__floatsisf+0x48>
    7dc8:	96 e9       	ldi	r25, 0x96	; 150
    7dca:	11 c0       	rjmp	.+34     	; 0x7dee <__floatsisf+0x6a>
    7dcc:	77 23       	and	r23, r23
    7dce:	21 f0       	breq	.+8      	; 0x7dd8 <__floatsisf+0x54>
    7dd0:	9e e8       	ldi	r25, 0x8E	; 142
    7dd2:	87 2f       	mov	r24, r23
    7dd4:	76 2f       	mov	r23, r22
    7dd6:	05 c0       	rjmp	.+10     	; 0x7de2 <__floatsisf+0x5e>
    7dd8:	66 23       	and	r22, r22
    7dda:	71 f0       	breq	.+28     	; 0x7df8 <__floatsisf+0x74>
    7ddc:	96 e8       	ldi	r25, 0x86	; 134
    7dde:	86 2f       	mov	r24, r22
    7de0:	70 e0       	ldi	r23, 0x00	; 0
    7de2:	60 e0       	ldi	r22, 0x00	; 0
    7de4:	2a f0       	brmi	.+10     	; 0x7df0 <__floatsisf+0x6c>
    7de6:	9a 95       	dec	r25
    7de8:	66 0f       	add	r22, r22
    7dea:	77 1f       	adc	r23, r23
    7dec:	88 1f       	adc	r24, r24
    7dee:	da f7       	brpl	.-10     	; 0x7de6 <__floatsisf+0x62>
    7df0:	88 0f       	add	r24, r24
    7df2:	96 95       	lsr	r25
    7df4:	87 95       	ror	r24
    7df6:	97 f9       	bld	r25, 7
    7df8:	08 95       	ret

00007dfa <__fp_inf>:
    7dfa:	97 f9       	bld	r25, 7
    7dfc:	9f 67       	ori	r25, 0x7F	; 127
    7dfe:	80 e8       	ldi	r24, 0x80	; 128
    7e00:	70 e0       	ldi	r23, 0x00	; 0
    7e02:	60 e0       	ldi	r22, 0x00	; 0
    7e04:	08 95       	ret

00007e06 <__fp_nan>:
    7e06:	9f ef       	ldi	r25, 0xFF	; 255
    7e08:	80 ec       	ldi	r24, 0xC0	; 192
    7e0a:	08 95       	ret

00007e0c <__fp_pscA>:
    7e0c:	00 24       	eor	r0, r0
    7e0e:	0a 94       	dec	r0
    7e10:	16 16       	cp	r1, r22
    7e12:	17 06       	cpc	r1, r23
    7e14:	18 06       	cpc	r1, r24
    7e16:	09 06       	cpc	r0, r25
    7e18:	08 95       	ret

00007e1a <__fp_pscB>:
    7e1a:	00 24       	eor	r0, r0
    7e1c:	0a 94       	dec	r0
    7e1e:	12 16       	cp	r1, r18
    7e20:	13 06       	cpc	r1, r19
    7e22:	14 06       	cpc	r1, r20
    7e24:	05 06       	cpc	r0, r21
    7e26:	08 95       	ret

00007e28 <__fp_round>:
    7e28:	09 2e       	mov	r0, r25
    7e2a:	03 94       	inc	r0
    7e2c:	00 0c       	add	r0, r0
    7e2e:	11 f4       	brne	.+4      	; 0x7e34 <__fp_round+0xc>
    7e30:	88 23       	and	r24, r24
    7e32:	52 f0       	brmi	.+20     	; 0x7e48 <__fp_round+0x20>
    7e34:	bb 0f       	add	r27, r27
    7e36:	40 f4       	brcc	.+16     	; 0x7e48 <__fp_round+0x20>
    7e38:	bf 2b       	or	r27, r31
    7e3a:	11 f4       	brne	.+4      	; 0x7e40 <__fp_round+0x18>
    7e3c:	60 ff       	sbrs	r22, 0
    7e3e:	04 c0       	rjmp	.+8      	; 0x7e48 <__fp_round+0x20>
    7e40:	6f 5f       	subi	r22, 0xFF	; 255
    7e42:	7f 4f       	sbci	r23, 0xFF	; 255
    7e44:	8f 4f       	sbci	r24, 0xFF	; 255
    7e46:	9f 4f       	sbci	r25, 0xFF	; 255
    7e48:	08 95       	ret

00007e4a <__fp_split3>:
    7e4a:	57 fd       	sbrc	r21, 7
    7e4c:	90 58       	subi	r25, 0x80	; 128
    7e4e:	44 0f       	add	r20, r20
    7e50:	55 1f       	adc	r21, r21
    7e52:	59 f0       	breq	.+22     	; 0x7e6a <__fp_splitA+0x10>
    7e54:	5f 3f       	cpi	r21, 0xFF	; 255
    7e56:	71 f0       	breq	.+28     	; 0x7e74 <__fp_splitA+0x1a>
    7e58:	47 95       	ror	r20

00007e5a <__fp_splitA>:
    7e5a:	88 0f       	add	r24, r24
    7e5c:	97 fb       	bst	r25, 7
    7e5e:	99 1f       	adc	r25, r25
    7e60:	61 f0       	breq	.+24     	; 0x7e7a <__fp_splitA+0x20>
    7e62:	9f 3f       	cpi	r25, 0xFF	; 255
    7e64:	79 f0       	breq	.+30     	; 0x7e84 <__fp_splitA+0x2a>
    7e66:	87 95       	ror	r24
    7e68:	08 95       	ret
    7e6a:	12 16       	cp	r1, r18
    7e6c:	13 06       	cpc	r1, r19
    7e6e:	14 06       	cpc	r1, r20
    7e70:	55 1f       	adc	r21, r21
    7e72:	f2 cf       	rjmp	.-28     	; 0x7e58 <__fp_split3+0xe>
    7e74:	46 95       	lsr	r20
    7e76:	f1 df       	rcall	.-30     	; 0x7e5a <__fp_splitA>
    7e78:	08 c0       	rjmp	.+16     	; 0x7e8a <__fp_splitA+0x30>
    7e7a:	16 16       	cp	r1, r22
    7e7c:	17 06       	cpc	r1, r23
    7e7e:	18 06       	cpc	r1, r24
    7e80:	99 1f       	adc	r25, r25
    7e82:	f1 cf       	rjmp	.-30     	; 0x7e66 <__fp_splitA+0xc>
    7e84:	86 95       	lsr	r24
    7e86:	71 05       	cpc	r23, r1
    7e88:	61 05       	cpc	r22, r1
    7e8a:	08 94       	sec
    7e8c:	08 95       	ret

00007e8e <__fp_zero>:
    7e8e:	e8 94       	clt

00007e90 <__fp_szero>:
    7e90:	bb 27       	eor	r27, r27
    7e92:	66 27       	eor	r22, r22
    7e94:	77 27       	eor	r23, r23
    7e96:	cb 01       	movw	r24, r22
    7e98:	97 f9       	bld	r25, 7
    7e9a:	08 95       	ret

00007e9c <__mulsf3>:
    7e9c:	0e 94 61 3f 	call	0x7ec2	; 0x7ec2 <__mulsf3x>
    7ea0:	0c 94 14 3f 	jmp	0x7e28	; 0x7e28 <__fp_round>
    7ea4:	0e 94 06 3f 	call	0x7e0c	; 0x7e0c <__fp_pscA>
    7ea8:	38 f0       	brcs	.+14     	; 0x7eb8 <__mulsf3+0x1c>
    7eaa:	0e 94 0d 3f 	call	0x7e1a	; 0x7e1a <__fp_pscB>
    7eae:	20 f0       	brcs	.+8      	; 0x7eb8 <__mulsf3+0x1c>
    7eb0:	95 23       	and	r25, r21
    7eb2:	11 f0       	breq	.+4      	; 0x7eb8 <__mulsf3+0x1c>
    7eb4:	0c 94 fd 3e 	jmp	0x7dfa	; 0x7dfa <__fp_inf>
    7eb8:	0c 94 03 3f 	jmp	0x7e06	; 0x7e06 <__fp_nan>
    7ebc:	11 24       	eor	r1, r1
    7ebe:	0c 94 48 3f 	jmp	0x7e90	; 0x7e90 <__fp_szero>

00007ec2 <__mulsf3x>:
    7ec2:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <__fp_split3>
    7ec6:	70 f3       	brcs	.-36     	; 0x7ea4 <__mulsf3+0x8>

00007ec8 <__mulsf3_pse>:
    7ec8:	95 9f       	mul	r25, r21
    7eca:	c1 f3       	breq	.-16     	; 0x7ebc <__mulsf3+0x20>
    7ecc:	95 0f       	add	r25, r21
    7ece:	50 e0       	ldi	r21, 0x00	; 0
    7ed0:	55 1f       	adc	r21, r21
    7ed2:	62 9f       	mul	r22, r18
    7ed4:	f0 01       	movw	r30, r0
    7ed6:	72 9f       	mul	r23, r18
    7ed8:	bb 27       	eor	r27, r27
    7eda:	f0 0d       	add	r31, r0
    7edc:	b1 1d       	adc	r27, r1
    7ede:	63 9f       	mul	r22, r19
    7ee0:	aa 27       	eor	r26, r26
    7ee2:	f0 0d       	add	r31, r0
    7ee4:	b1 1d       	adc	r27, r1
    7ee6:	aa 1f       	adc	r26, r26
    7ee8:	64 9f       	mul	r22, r20
    7eea:	66 27       	eor	r22, r22
    7eec:	b0 0d       	add	r27, r0
    7eee:	a1 1d       	adc	r26, r1
    7ef0:	66 1f       	adc	r22, r22
    7ef2:	82 9f       	mul	r24, r18
    7ef4:	22 27       	eor	r18, r18
    7ef6:	b0 0d       	add	r27, r0
    7ef8:	a1 1d       	adc	r26, r1
    7efa:	62 1f       	adc	r22, r18
    7efc:	73 9f       	mul	r23, r19
    7efe:	b0 0d       	add	r27, r0
    7f00:	a1 1d       	adc	r26, r1
    7f02:	62 1f       	adc	r22, r18
    7f04:	83 9f       	mul	r24, r19
    7f06:	a0 0d       	add	r26, r0
    7f08:	61 1d       	adc	r22, r1
    7f0a:	22 1f       	adc	r18, r18
    7f0c:	74 9f       	mul	r23, r20
    7f0e:	33 27       	eor	r19, r19
    7f10:	a0 0d       	add	r26, r0
    7f12:	61 1d       	adc	r22, r1
    7f14:	23 1f       	adc	r18, r19
    7f16:	84 9f       	mul	r24, r20
    7f18:	60 0d       	add	r22, r0
    7f1a:	21 1d       	adc	r18, r1
    7f1c:	82 2f       	mov	r24, r18
    7f1e:	76 2f       	mov	r23, r22
    7f20:	6a 2f       	mov	r22, r26
    7f22:	11 24       	eor	r1, r1
    7f24:	9f 57       	subi	r25, 0x7F	; 127
    7f26:	50 40       	sbci	r21, 0x00	; 0
    7f28:	9a f0       	brmi	.+38     	; 0x7f50 <__mulsf3_pse+0x88>
    7f2a:	f1 f0       	breq	.+60     	; 0x7f68 <__mulsf3_pse+0xa0>
    7f2c:	88 23       	and	r24, r24
    7f2e:	4a f0       	brmi	.+18     	; 0x7f42 <__mulsf3_pse+0x7a>
    7f30:	ee 0f       	add	r30, r30
    7f32:	ff 1f       	adc	r31, r31
    7f34:	bb 1f       	adc	r27, r27
    7f36:	66 1f       	adc	r22, r22
    7f38:	77 1f       	adc	r23, r23
    7f3a:	88 1f       	adc	r24, r24
    7f3c:	91 50       	subi	r25, 0x01	; 1
    7f3e:	50 40       	sbci	r21, 0x00	; 0
    7f40:	a9 f7       	brne	.-22     	; 0x7f2c <__mulsf3_pse+0x64>
    7f42:	9e 3f       	cpi	r25, 0xFE	; 254
    7f44:	51 05       	cpc	r21, r1
    7f46:	80 f0       	brcs	.+32     	; 0x7f68 <__mulsf3_pse+0xa0>
    7f48:	0c 94 fd 3e 	jmp	0x7dfa	; 0x7dfa <__fp_inf>
    7f4c:	0c 94 48 3f 	jmp	0x7e90	; 0x7e90 <__fp_szero>
    7f50:	5f 3f       	cpi	r21, 0xFF	; 255
    7f52:	e4 f3       	brlt	.-8      	; 0x7f4c <__mulsf3_pse+0x84>
    7f54:	98 3e       	cpi	r25, 0xE8	; 232
    7f56:	d4 f3       	brlt	.-12     	; 0x7f4c <__mulsf3_pse+0x84>
    7f58:	86 95       	lsr	r24
    7f5a:	77 95       	ror	r23
    7f5c:	67 95       	ror	r22
    7f5e:	b7 95       	ror	r27
    7f60:	f7 95       	ror	r31
    7f62:	e7 95       	ror	r30
    7f64:	9f 5f       	subi	r25, 0xFF	; 255
    7f66:	c1 f7       	brne	.-16     	; 0x7f58 <__mulsf3_pse+0x90>
    7f68:	fe 2b       	or	r31, r30
    7f6a:	88 0f       	add	r24, r24
    7f6c:	91 1d       	adc	r25, r1
    7f6e:	96 95       	lsr	r25
    7f70:	87 95       	ror	r24
    7f72:	97 f9       	bld	r25, 7
    7f74:	08 95       	ret

00007f76 <__mulsi3>:
    7f76:	db 01       	movw	r26, r22
    7f78:	8f 93       	push	r24
    7f7a:	9f 93       	push	r25
    7f7c:	0e 94 0c 40 	call	0x8018	; 0x8018 <__muluhisi3>
    7f80:	bf 91       	pop	r27
    7f82:	af 91       	pop	r26
    7f84:	a2 9f       	mul	r26, r18
    7f86:	80 0d       	add	r24, r0
    7f88:	91 1d       	adc	r25, r1
    7f8a:	a3 9f       	mul	r26, r19
    7f8c:	90 0d       	add	r25, r0
    7f8e:	b2 9f       	mul	r27, r18
    7f90:	90 0d       	add	r25, r0
    7f92:	11 24       	eor	r1, r1
    7f94:	08 95       	ret

00007f96 <__udivmodsi4>:
    7f96:	a1 e2       	ldi	r26, 0x21	; 33
    7f98:	1a 2e       	mov	r1, r26
    7f9a:	aa 1b       	sub	r26, r26
    7f9c:	bb 1b       	sub	r27, r27
    7f9e:	fd 01       	movw	r30, r26
    7fa0:	0d c0       	rjmp	.+26     	; 0x7fbc <__udivmodsi4_ep>

00007fa2 <__udivmodsi4_loop>:
    7fa2:	aa 1f       	adc	r26, r26
    7fa4:	bb 1f       	adc	r27, r27
    7fa6:	ee 1f       	adc	r30, r30
    7fa8:	ff 1f       	adc	r31, r31
    7faa:	a2 17       	cp	r26, r18
    7fac:	b3 07       	cpc	r27, r19
    7fae:	e4 07       	cpc	r30, r20
    7fb0:	f5 07       	cpc	r31, r21
    7fb2:	20 f0       	brcs	.+8      	; 0x7fbc <__udivmodsi4_ep>
    7fb4:	a2 1b       	sub	r26, r18
    7fb6:	b3 0b       	sbc	r27, r19
    7fb8:	e4 0b       	sbc	r30, r20
    7fba:	f5 0b       	sbc	r31, r21

00007fbc <__udivmodsi4_ep>:
    7fbc:	66 1f       	adc	r22, r22
    7fbe:	77 1f       	adc	r23, r23
    7fc0:	88 1f       	adc	r24, r24
    7fc2:	99 1f       	adc	r25, r25
    7fc4:	1a 94       	dec	r1
    7fc6:	69 f7       	brne	.-38     	; 0x7fa2 <__udivmodsi4_loop>
    7fc8:	60 95       	com	r22
    7fca:	70 95       	com	r23
    7fcc:	80 95       	com	r24
    7fce:	90 95       	com	r25
    7fd0:	9b 01       	movw	r18, r22
    7fd2:	ac 01       	movw	r20, r24
    7fd4:	bd 01       	movw	r22, r26
    7fd6:	cf 01       	movw	r24, r30
    7fd8:	08 95       	ret

00007fda <__divmodsi4>:
    7fda:	05 2e       	mov	r0, r21
    7fdc:	97 fb       	bst	r25, 7
    7fde:	1e f4       	brtc	.+6      	; 0x7fe6 <__divmodsi4+0xc>
    7fe0:	00 94       	com	r0
    7fe2:	0e 94 04 40 	call	0x8008	; 0x8008 <__negsi2>
    7fe6:	57 fd       	sbrc	r21, 7
    7fe8:	07 d0       	rcall	.+14     	; 0x7ff8 <__divmodsi4_neg2>
    7fea:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <__udivmodsi4>
    7fee:	07 fc       	sbrc	r0, 7
    7ff0:	03 d0       	rcall	.+6      	; 0x7ff8 <__divmodsi4_neg2>
    7ff2:	4e f4       	brtc	.+18     	; 0x8006 <__divmodsi4_exit>
    7ff4:	0c 94 04 40 	jmp	0x8008	; 0x8008 <__negsi2>

00007ff8 <__divmodsi4_neg2>:
    7ff8:	50 95       	com	r21
    7ffa:	40 95       	com	r20
    7ffc:	30 95       	com	r19
    7ffe:	21 95       	neg	r18
    8000:	3f 4f       	sbci	r19, 0xFF	; 255
    8002:	4f 4f       	sbci	r20, 0xFF	; 255
    8004:	5f 4f       	sbci	r21, 0xFF	; 255

00008006 <__divmodsi4_exit>:
    8006:	08 95       	ret

00008008 <__negsi2>:
    8008:	90 95       	com	r25
    800a:	80 95       	com	r24
    800c:	70 95       	com	r23
    800e:	61 95       	neg	r22
    8010:	7f 4f       	sbci	r23, 0xFF	; 255
    8012:	8f 4f       	sbci	r24, 0xFF	; 255
    8014:	9f 4f       	sbci	r25, 0xFF	; 255
    8016:	08 95       	ret

00008018 <__muluhisi3>:
    8018:	0e 94 17 40 	call	0x802e	; 0x802e <__umulhisi3>
    801c:	a5 9f       	mul	r26, r21
    801e:	90 0d       	add	r25, r0
    8020:	b4 9f       	mul	r27, r20
    8022:	90 0d       	add	r25, r0
    8024:	a4 9f       	mul	r26, r20
    8026:	80 0d       	add	r24, r0
    8028:	91 1d       	adc	r25, r1
    802a:	11 24       	eor	r1, r1
    802c:	08 95       	ret

0000802e <__umulhisi3>:
    802e:	a2 9f       	mul	r26, r18
    8030:	b0 01       	movw	r22, r0
    8032:	b3 9f       	mul	r27, r19
    8034:	c0 01       	movw	r24, r0
    8036:	a3 9f       	mul	r26, r19
    8038:	70 0d       	add	r23, r0
    803a:	81 1d       	adc	r24, r1
    803c:	11 24       	eor	r1, r1
    803e:	91 1d       	adc	r25, r1
    8040:	b2 9f       	mul	r27, r18
    8042:	70 0d       	add	r23, r0
    8044:	81 1d       	adc	r24, r1
    8046:	11 24       	eor	r1, r1
    8048:	91 1d       	adc	r25, r1
    804a:	08 95       	ret

0000804c <atof>:
    804c:	66 27       	eor	r22, r22
    804e:	77 27       	eor	r23, r23
    8050:	0c 94 21 43 	jmp	0x8642	; 0x8642 <strtod>

00008054 <atol>:
    8054:	1f 93       	push	r17
    8056:	fc 01       	movw	r30, r24
    8058:	99 27       	eor	r25, r25
    805a:	88 27       	eor	r24, r24
    805c:	bc 01       	movw	r22, r24
    805e:	e8 94       	clt
    8060:	11 91       	ld	r17, Z+
    8062:	10 32       	cpi	r17, 0x20	; 32
    8064:	e9 f3       	breq	.-6      	; 0x8060 <atol+0xc>
    8066:	19 30       	cpi	r17, 0x09	; 9
    8068:	10 f0       	brcs	.+4      	; 0x806e <atol+0x1a>
    806a:	1e 30       	cpi	r17, 0x0E	; 14
    806c:	c8 f3       	brcs	.-14     	; 0x8060 <atol+0xc>
    806e:	1b 32       	cpi	r17, 0x2B	; 43
    8070:	51 f0       	breq	.+20     	; 0x8086 <atol+0x32>
    8072:	1d 32       	cpi	r17, 0x2D	; 45
    8074:	49 f4       	brne	.+18     	; 0x8088 <atol+0x34>
    8076:	68 94       	set
    8078:	06 c0       	rjmp	.+12     	; 0x8086 <atol+0x32>
    807a:	0e 94 79 40 	call	0x80f2	; 0x80f2 <__mulsi_const_10>
    807e:	61 0f       	add	r22, r17
    8080:	71 1d       	adc	r23, r1
    8082:	81 1d       	adc	r24, r1
    8084:	91 1d       	adc	r25, r1
    8086:	11 91       	ld	r17, Z+
    8088:	10 53       	subi	r17, 0x30	; 48
    808a:	1a 30       	cpi	r17, 0x0A	; 10
    808c:	b0 f3       	brcs	.-20     	; 0x807a <atol+0x26>
    808e:	3e f4       	brtc	.+14     	; 0x809e <atol+0x4a>
    8090:	90 95       	com	r25
    8092:	80 95       	com	r24
    8094:	70 95       	com	r23
    8096:	61 95       	neg	r22
    8098:	7f 4f       	sbci	r23, 0xFF	; 255
    809a:	8f 4f       	sbci	r24, 0xFF	; 255
    809c:	9f 4f       	sbci	r25, 0xFF	; 255
    809e:	1f 91       	pop	r17
    80a0:	08 95       	ret

000080a2 <strncmp>:
    80a2:	fb 01       	movw	r30, r22
    80a4:	dc 01       	movw	r26, r24
    80a6:	41 50       	subi	r20, 0x01	; 1
    80a8:	50 40       	sbci	r21, 0x00	; 0
    80aa:	30 f0       	brcs	.+12     	; 0x80b8 <strncmp+0x16>
    80ac:	8d 91       	ld	r24, X+
    80ae:	01 90       	ld	r0, Z+
    80b0:	80 19       	sub	r24, r0
    80b2:	19 f4       	brne	.+6      	; 0x80ba <strncmp+0x18>
    80b4:	00 20       	and	r0, r0
    80b6:	b9 f7       	brne	.-18     	; 0x80a6 <strncmp+0x4>
    80b8:	88 1b       	sub	r24, r24
    80ba:	99 0b       	sbc	r25, r25
    80bc:	08 95       	ret

000080be <ltoa>:
    80be:	25 32       	cpi	r18, 0x25	; 37
    80c0:	31 05       	cpc	r19, r1
    80c2:	20 f4       	brcc	.+8      	; 0x80cc <ltoa+0xe>
    80c4:	22 30       	cpi	r18, 0x02	; 2
    80c6:	10 f0       	brcs	.+4      	; 0x80cc <ltoa+0xe>
    80c8:	0c 94 6a 40 	jmp	0x80d4	; 0x80d4 <__ltoa_ncheck>
    80cc:	fa 01       	movw	r30, r20
    80ce:	10 82       	st	Z, r1
    80d0:	ca 01       	movw	r24, r20
    80d2:	08 95       	ret

000080d4 <__ltoa_ncheck>:
    80d4:	bb 27       	eor	r27, r27
    80d6:	2a 30       	cpi	r18, 0x0A	; 10
    80d8:	51 f4       	brne	.+20     	; 0x80ee <__ltoa_ncheck+0x1a>
    80da:	99 23       	and	r25, r25
    80dc:	42 f4       	brpl	.+16     	; 0x80ee <__ltoa_ncheck+0x1a>
    80de:	bd e2       	ldi	r27, 0x2D	; 45
    80e0:	90 95       	com	r25
    80e2:	80 95       	com	r24
    80e4:	70 95       	com	r23
    80e6:	61 95       	neg	r22
    80e8:	7f 4f       	sbci	r23, 0xFF	; 255
    80ea:	8f 4f       	sbci	r24, 0xFF	; 255
    80ec:	9f 4f       	sbci	r25, 0xFF	; 255
    80ee:	0c 94 8f 40 	jmp	0x811e	; 0x811e <__ultoa_common>

000080f2 <__mulsi_const_10>:
    80f2:	59 2f       	mov	r21, r25
    80f4:	48 2f       	mov	r20, r24
    80f6:	37 2f       	mov	r19, r23
    80f8:	26 2f       	mov	r18, r22
    80fa:	66 0f       	add	r22, r22
    80fc:	77 1f       	adc	r23, r23
    80fe:	88 1f       	adc	r24, r24
    8100:	99 1f       	adc	r25, r25
    8102:	66 0f       	add	r22, r22
    8104:	77 1f       	adc	r23, r23
    8106:	88 1f       	adc	r24, r24
    8108:	99 1f       	adc	r25, r25
    810a:	62 0f       	add	r22, r18
    810c:	73 1f       	adc	r23, r19
    810e:	84 1f       	adc	r24, r20
    8110:	95 1f       	adc	r25, r21
    8112:	66 0f       	add	r22, r22
    8114:	77 1f       	adc	r23, r23
    8116:	88 1f       	adc	r24, r24
    8118:	99 1f       	adc	r25, r25
    811a:	08 95       	ret

0000811c <__ultoa_ncheck>:
    811c:	bb 27       	eor	r27, r27

0000811e <__ultoa_common>:
    811e:	fa 01       	movw	r30, r20
    8120:	a6 2f       	mov	r26, r22
    8122:	62 17       	cp	r22, r18
    8124:	71 05       	cpc	r23, r1
    8126:	81 05       	cpc	r24, r1
    8128:	91 05       	cpc	r25, r1
    812a:	33 0b       	sbc	r19, r19
    812c:	30 fb       	bst	r19, 0
    812e:	66 f0       	brts	.+24     	; 0x8148 <__ultoa_common+0x2a>
    8130:	aa 27       	eor	r26, r26
    8132:	66 0f       	add	r22, r22
    8134:	77 1f       	adc	r23, r23
    8136:	88 1f       	adc	r24, r24
    8138:	99 1f       	adc	r25, r25
    813a:	aa 1f       	adc	r26, r26
    813c:	a2 17       	cp	r26, r18
    813e:	10 f0       	brcs	.+4      	; 0x8144 <__ultoa_common+0x26>
    8140:	a2 1b       	sub	r26, r18
    8142:	63 95       	inc	r22
    8144:	38 50       	subi	r19, 0x08	; 8
    8146:	a9 f7       	brne	.-22     	; 0x8132 <__ultoa_common+0x14>
    8148:	a0 5d       	subi	r26, 0xD0	; 208
    814a:	aa 33       	cpi	r26, 0x3A	; 58
    814c:	08 f0       	brcs	.+2      	; 0x8150 <__ultoa_common+0x32>
    814e:	a9 5d       	subi	r26, 0xD9	; 217
    8150:	a1 93       	st	Z+, r26
    8152:	36 f7       	brtc	.-52     	; 0x8120 <__ultoa_common+0x2>
    8154:	b1 11       	cpse	r27, r1
    8156:	b1 93       	st	Z+, r27
    8158:	10 82       	st	Z, r1
    815a:	ca 01       	movw	r24, r20
    815c:	0c 94 b4 44 	jmp	0x8968	; 0x8968 <strrev>

00008160 <printf>:
    8160:	cf 93       	push	r28
    8162:	df 93       	push	r29
    8164:	cd b7       	in	r28, 0x3d	; 61
    8166:	de b7       	in	r29, 0x3e	; 62
    8168:	ae 01       	movw	r20, r28
    816a:	4a 5f       	subi	r20, 0xFA	; 250
    816c:	5f 4f       	sbci	r21, 0xFF	; 255
    816e:	fa 01       	movw	r30, r20
    8170:	61 91       	ld	r22, Z+
    8172:	71 91       	ld	r23, Z+
    8174:	af 01       	movw	r20, r30
    8176:	80 91 d5 29 	lds	r24, 0x29D5	; 0x8029d5 <__iob+0x2>
    817a:	90 91 d6 29 	lds	r25, 0x29D6	; 0x8029d6 <__iob+0x3>
    817e:	0e 94 1d 41 	call	0x823a	; 0x823a <vfprintf>
    8182:	df 91       	pop	r29
    8184:	cf 91       	pop	r28
    8186:	08 95       	ret

00008188 <puts>:
    8188:	0f 93       	push	r16
    818a:	1f 93       	push	r17
    818c:	cf 93       	push	r28
    818e:	df 93       	push	r29
    8190:	e0 91 d5 29 	lds	r30, 0x29D5	; 0x8029d5 <__iob+0x2>
    8194:	f0 91 d6 29 	lds	r31, 0x29D6	; 0x8029d6 <__iob+0x3>
    8198:	23 81       	ldd	r18, Z+3	; 0x03
    819a:	21 ff       	sbrs	r18, 1
    819c:	1b c0       	rjmp	.+54     	; 0x81d4 <puts+0x4c>
    819e:	8c 01       	movw	r16, r24
    81a0:	d0 e0       	ldi	r29, 0x00	; 0
    81a2:	c0 e0       	ldi	r28, 0x00	; 0
    81a4:	f8 01       	movw	r30, r16
    81a6:	81 91       	ld	r24, Z+
    81a8:	8f 01       	movw	r16, r30
    81aa:	60 91 d5 29 	lds	r22, 0x29D5	; 0x8029d5 <__iob+0x2>
    81ae:	70 91 d6 29 	lds	r23, 0x29D6	; 0x8029d6 <__iob+0x3>
    81b2:	db 01       	movw	r26, r22
    81b4:	18 96       	adiw	r26, 0x08	; 8
    81b6:	ed 91       	ld	r30, X+
    81b8:	fc 91       	ld	r31, X
    81ba:	19 97       	sbiw	r26, 0x09	; 9
    81bc:	88 23       	and	r24, r24
    81be:	31 f0       	breq	.+12     	; 0x81cc <puts+0x44>
    81c0:	19 95       	eicall
    81c2:	89 2b       	or	r24, r25
    81c4:	79 f3       	breq	.-34     	; 0x81a4 <puts+0x1c>
    81c6:	df ef       	ldi	r29, 0xFF	; 255
    81c8:	cf ef       	ldi	r28, 0xFF	; 255
    81ca:	ec cf       	rjmp	.-40     	; 0x81a4 <puts+0x1c>
    81cc:	8a e0       	ldi	r24, 0x0A	; 10
    81ce:	19 95       	eicall
    81d0:	89 2b       	or	r24, r25
    81d2:	19 f0       	breq	.+6      	; 0x81da <puts+0x52>
    81d4:	8f ef       	ldi	r24, 0xFF	; 255
    81d6:	9f ef       	ldi	r25, 0xFF	; 255
    81d8:	02 c0       	rjmp	.+4      	; 0x81de <puts+0x56>
    81da:	8d 2f       	mov	r24, r29
    81dc:	9c 2f       	mov	r25, r28
    81de:	df 91       	pop	r29
    81e0:	cf 91       	pop	r28
    81e2:	1f 91       	pop	r17
    81e4:	0f 91       	pop	r16
    81e6:	08 95       	ret

000081e8 <sprintf>:
    81e8:	0f 93       	push	r16
    81ea:	1f 93       	push	r17
    81ec:	cf 93       	push	r28
    81ee:	df 93       	push	r29
    81f0:	cd b7       	in	r28, 0x3d	; 61
    81f2:	de b7       	in	r29, 0x3e	; 62
    81f4:	2e 97       	sbiw	r28, 0x0e	; 14
    81f6:	cd bf       	out	0x3d, r28	; 61
    81f8:	de bf       	out	0x3e, r29	; 62
    81fa:	0e 89       	ldd	r16, Y+22	; 0x16
    81fc:	1f 89       	ldd	r17, Y+23	; 0x17
    81fe:	86 e0       	ldi	r24, 0x06	; 6
    8200:	8c 83       	std	Y+4, r24	; 0x04
    8202:	09 83       	std	Y+1, r16	; 0x01
    8204:	1a 83       	std	Y+2, r17	; 0x02
    8206:	8f ef       	ldi	r24, 0xFF	; 255
    8208:	9f e7       	ldi	r25, 0x7F	; 127
    820a:	8d 83       	std	Y+5, r24	; 0x05
    820c:	9e 83       	std	Y+6, r25	; 0x06
    820e:	ae 01       	movw	r20, r28
    8210:	46 5e       	subi	r20, 0xE6	; 230
    8212:	5f 4f       	sbci	r21, 0xFF	; 255
    8214:	68 8d       	ldd	r22, Y+24	; 0x18
    8216:	79 8d       	ldd	r23, Y+25	; 0x19
    8218:	ce 01       	movw	r24, r28
    821a:	01 96       	adiw	r24, 0x01	; 1
    821c:	0e 94 1d 41 	call	0x823a	; 0x823a <vfprintf>
    8220:	ef 81       	ldd	r30, Y+7	; 0x07
    8222:	f8 85       	ldd	r31, Y+8	; 0x08
    8224:	e0 0f       	add	r30, r16
    8226:	f1 1f       	adc	r31, r17
    8228:	10 82       	st	Z, r1
    822a:	2e 96       	adiw	r28, 0x0e	; 14
    822c:	cd bf       	out	0x3d, r28	; 61
    822e:	de bf       	out	0x3e, r29	; 62
    8230:	df 91       	pop	r29
    8232:	cf 91       	pop	r28
    8234:	1f 91       	pop	r17
    8236:	0f 91       	pop	r16
    8238:	08 95       	ret

0000823a <vfprintf>:
    823a:	2f 92       	push	r2
    823c:	3f 92       	push	r3
    823e:	4f 92       	push	r4
    8240:	5f 92       	push	r5
    8242:	6f 92       	push	r6
    8244:	7f 92       	push	r7
    8246:	8f 92       	push	r8
    8248:	9f 92       	push	r9
    824a:	af 92       	push	r10
    824c:	bf 92       	push	r11
    824e:	cf 92       	push	r12
    8250:	df 92       	push	r13
    8252:	ef 92       	push	r14
    8254:	ff 92       	push	r15
    8256:	0f 93       	push	r16
    8258:	1f 93       	push	r17
    825a:	cf 93       	push	r28
    825c:	df 93       	push	r29
    825e:	cd b7       	in	r28, 0x3d	; 61
    8260:	de b7       	in	r29, 0x3e	; 62
    8262:	2b 97       	sbiw	r28, 0x0b	; 11
    8264:	cd bf       	out	0x3d, r28	; 61
    8266:	de bf       	out	0x3e, r29	; 62
    8268:	6c 01       	movw	r12, r24
    826a:	7b 01       	movw	r14, r22
    826c:	8a 01       	movw	r16, r20
    826e:	fc 01       	movw	r30, r24
    8270:	16 82       	std	Z+6, r1	; 0x06
    8272:	17 82       	std	Z+7, r1	; 0x07
    8274:	83 81       	ldd	r24, Z+3	; 0x03
    8276:	81 ff       	sbrs	r24, 1
    8278:	cc c1       	rjmp	.+920    	; 0x8612 <vfprintf+0x3d8>
    827a:	ce 01       	movw	r24, r28
    827c:	01 96       	adiw	r24, 0x01	; 1
    827e:	3c 01       	movw	r6, r24
    8280:	f6 01       	movw	r30, r12
    8282:	93 81       	ldd	r25, Z+3	; 0x03
    8284:	f7 01       	movw	r30, r14
    8286:	93 fd       	sbrc	r25, 3
    8288:	85 91       	lpm	r24, Z+
    828a:	93 ff       	sbrs	r25, 3
    828c:	81 91       	ld	r24, Z+
    828e:	7f 01       	movw	r14, r30
    8290:	88 23       	and	r24, r24
    8292:	09 f4       	brne	.+2      	; 0x8296 <vfprintf+0x5c>
    8294:	ba c1       	rjmp	.+884    	; 0x860a <vfprintf+0x3d0>
    8296:	85 32       	cpi	r24, 0x25	; 37
    8298:	39 f4       	brne	.+14     	; 0x82a8 <vfprintf+0x6e>
    829a:	93 fd       	sbrc	r25, 3
    829c:	85 91       	lpm	r24, Z+
    829e:	93 ff       	sbrs	r25, 3
    82a0:	81 91       	ld	r24, Z+
    82a2:	7f 01       	movw	r14, r30
    82a4:	85 32       	cpi	r24, 0x25	; 37
    82a6:	29 f4       	brne	.+10     	; 0x82b2 <vfprintf+0x78>
    82a8:	b6 01       	movw	r22, r12
    82aa:	90 e0       	ldi	r25, 0x00	; 0
    82ac:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    82b0:	e7 cf       	rjmp	.-50     	; 0x8280 <vfprintf+0x46>
    82b2:	91 2c       	mov	r9, r1
    82b4:	21 2c       	mov	r2, r1
    82b6:	31 2c       	mov	r3, r1
    82b8:	ff e1       	ldi	r31, 0x1F	; 31
    82ba:	f3 15       	cp	r31, r3
    82bc:	d8 f0       	brcs	.+54     	; 0x82f4 <vfprintf+0xba>
    82be:	8b 32       	cpi	r24, 0x2B	; 43
    82c0:	79 f0       	breq	.+30     	; 0x82e0 <vfprintf+0xa6>
    82c2:	38 f4       	brcc	.+14     	; 0x82d2 <vfprintf+0x98>
    82c4:	80 32       	cpi	r24, 0x20	; 32
    82c6:	79 f0       	breq	.+30     	; 0x82e6 <vfprintf+0xac>
    82c8:	83 32       	cpi	r24, 0x23	; 35
    82ca:	a1 f4       	brne	.+40     	; 0x82f4 <vfprintf+0xba>
    82cc:	23 2d       	mov	r18, r3
    82ce:	20 61       	ori	r18, 0x10	; 16
    82d0:	1d c0       	rjmp	.+58     	; 0x830c <vfprintf+0xd2>
    82d2:	8d 32       	cpi	r24, 0x2D	; 45
    82d4:	61 f0       	breq	.+24     	; 0x82ee <vfprintf+0xb4>
    82d6:	80 33       	cpi	r24, 0x30	; 48
    82d8:	69 f4       	brne	.+26     	; 0x82f4 <vfprintf+0xba>
    82da:	23 2d       	mov	r18, r3
    82dc:	21 60       	ori	r18, 0x01	; 1
    82de:	16 c0       	rjmp	.+44     	; 0x830c <vfprintf+0xd2>
    82e0:	83 2d       	mov	r24, r3
    82e2:	82 60       	ori	r24, 0x02	; 2
    82e4:	38 2e       	mov	r3, r24
    82e6:	e3 2d       	mov	r30, r3
    82e8:	e4 60       	ori	r30, 0x04	; 4
    82ea:	3e 2e       	mov	r3, r30
    82ec:	2a c0       	rjmp	.+84     	; 0x8342 <vfprintf+0x108>
    82ee:	f3 2d       	mov	r31, r3
    82f0:	f8 60       	ori	r31, 0x08	; 8
    82f2:	1d c0       	rjmp	.+58     	; 0x832e <vfprintf+0xf4>
    82f4:	37 fc       	sbrc	r3, 7
    82f6:	2d c0       	rjmp	.+90     	; 0x8352 <vfprintf+0x118>
    82f8:	20 ed       	ldi	r18, 0xD0	; 208
    82fa:	28 0f       	add	r18, r24
    82fc:	2a 30       	cpi	r18, 0x0A	; 10
    82fe:	40 f0       	brcs	.+16     	; 0x8310 <vfprintf+0xd6>
    8300:	8e 32       	cpi	r24, 0x2E	; 46
    8302:	b9 f4       	brne	.+46     	; 0x8332 <vfprintf+0xf8>
    8304:	36 fc       	sbrc	r3, 6
    8306:	81 c1       	rjmp	.+770    	; 0x860a <vfprintf+0x3d0>
    8308:	23 2d       	mov	r18, r3
    830a:	20 64       	ori	r18, 0x40	; 64
    830c:	32 2e       	mov	r3, r18
    830e:	19 c0       	rjmp	.+50     	; 0x8342 <vfprintf+0x108>
    8310:	36 fe       	sbrs	r3, 6
    8312:	06 c0       	rjmp	.+12     	; 0x8320 <vfprintf+0xe6>
    8314:	8a e0       	ldi	r24, 0x0A	; 10
    8316:	98 9e       	mul	r9, r24
    8318:	20 0d       	add	r18, r0
    831a:	11 24       	eor	r1, r1
    831c:	92 2e       	mov	r9, r18
    831e:	11 c0       	rjmp	.+34     	; 0x8342 <vfprintf+0x108>
    8320:	ea e0       	ldi	r30, 0x0A	; 10
    8322:	2e 9e       	mul	r2, r30
    8324:	20 0d       	add	r18, r0
    8326:	11 24       	eor	r1, r1
    8328:	22 2e       	mov	r2, r18
    832a:	f3 2d       	mov	r31, r3
    832c:	f0 62       	ori	r31, 0x20	; 32
    832e:	3f 2e       	mov	r3, r31
    8330:	08 c0       	rjmp	.+16     	; 0x8342 <vfprintf+0x108>
    8332:	8c 36       	cpi	r24, 0x6C	; 108
    8334:	21 f4       	brne	.+8      	; 0x833e <vfprintf+0x104>
    8336:	83 2d       	mov	r24, r3
    8338:	80 68       	ori	r24, 0x80	; 128
    833a:	38 2e       	mov	r3, r24
    833c:	02 c0       	rjmp	.+4      	; 0x8342 <vfprintf+0x108>
    833e:	88 36       	cpi	r24, 0x68	; 104
    8340:	41 f4       	brne	.+16     	; 0x8352 <vfprintf+0x118>
    8342:	f7 01       	movw	r30, r14
    8344:	93 fd       	sbrc	r25, 3
    8346:	85 91       	lpm	r24, Z+
    8348:	93 ff       	sbrs	r25, 3
    834a:	81 91       	ld	r24, Z+
    834c:	7f 01       	movw	r14, r30
    834e:	81 11       	cpse	r24, r1
    8350:	b3 cf       	rjmp	.-154    	; 0x82b8 <vfprintf+0x7e>
    8352:	98 2f       	mov	r25, r24
    8354:	9f 7d       	andi	r25, 0xDF	; 223
    8356:	95 54       	subi	r25, 0x45	; 69
    8358:	93 30       	cpi	r25, 0x03	; 3
    835a:	28 f4       	brcc	.+10     	; 0x8366 <vfprintf+0x12c>
    835c:	0c 5f       	subi	r16, 0xFC	; 252
    835e:	1f 4f       	sbci	r17, 0xFF	; 255
    8360:	9f e3       	ldi	r25, 0x3F	; 63
    8362:	99 83       	std	Y+1, r25	; 0x01
    8364:	0d c0       	rjmp	.+26     	; 0x8380 <vfprintf+0x146>
    8366:	83 36       	cpi	r24, 0x63	; 99
    8368:	31 f0       	breq	.+12     	; 0x8376 <vfprintf+0x13c>
    836a:	83 37       	cpi	r24, 0x73	; 115
    836c:	71 f0       	breq	.+28     	; 0x838a <vfprintf+0x150>
    836e:	83 35       	cpi	r24, 0x53	; 83
    8370:	09 f0       	breq	.+2      	; 0x8374 <vfprintf+0x13a>
    8372:	59 c0       	rjmp	.+178    	; 0x8426 <vfprintf+0x1ec>
    8374:	21 c0       	rjmp	.+66     	; 0x83b8 <vfprintf+0x17e>
    8376:	f8 01       	movw	r30, r16
    8378:	80 81       	ld	r24, Z
    837a:	89 83       	std	Y+1, r24	; 0x01
    837c:	0e 5f       	subi	r16, 0xFE	; 254
    837e:	1f 4f       	sbci	r17, 0xFF	; 255
    8380:	88 24       	eor	r8, r8
    8382:	83 94       	inc	r8
    8384:	91 2c       	mov	r9, r1
    8386:	53 01       	movw	r10, r6
    8388:	13 c0       	rjmp	.+38     	; 0x83b0 <vfprintf+0x176>
    838a:	28 01       	movw	r4, r16
    838c:	f2 e0       	ldi	r31, 0x02	; 2
    838e:	4f 0e       	add	r4, r31
    8390:	51 1c       	adc	r5, r1
    8392:	f8 01       	movw	r30, r16
    8394:	a0 80       	ld	r10, Z
    8396:	b1 80       	ldd	r11, Z+1	; 0x01
    8398:	36 fe       	sbrs	r3, 6
    839a:	03 c0       	rjmp	.+6      	; 0x83a2 <vfprintf+0x168>
    839c:	69 2d       	mov	r22, r9
    839e:	70 e0       	ldi	r23, 0x00	; 0
    83a0:	02 c0       	rjmp	.+4      	; 0x83a6 <vfprintf+0x16c>
    83a2:	6f ef       	ldi	r22, 0xFF	; 255
    83a4:	7f ef       	ldi	r23, 0xFF	; 255
    83a6:	c5 01       	movw	r24, r10
    83a8:	0e 94 a9 44 	call	0x8952	; 0x8952 <strnlen>
    83ac:	4c 01       	movw	r8, r24
    83ae:	82 01       	movw	r16, r4
    83b0:	f3 2d       	mov	r31, r3
    83b2:	ff 77       	andi	r31, 0x7F	; 127
    83b4:	3f 2e       	mov	r3, r31
    83b6:	16 c0       	rjmp	.+44     	; 0x83e4 <vfprintf+0x1aa>
    83b8:	28 01       	movw	r4, r16
    83ba:	22 e0       	ldi	r18, 0x02	; 2
    83bc:	42 0e       	add	r4, r18
    83be:	51 1c       	adc	r5, r1
    83c0:	f8 01       	movw	r30, r16
    83c2:	a0 80       	ld	r10, Z
    83c4:	b1 80       	ldd	r11, Z+1	; 0x01
    83c6:	36 fe       	sbrs	r3, 6
    83c8:	03 c0       	rjmp	.+6      	; 0x83d0 <vfprintf+0x196>
    83ca:	69 2d       	mov	r22, r9
    83cc:	70 e0       	ldi	r23, 0x00	; 0
    83ce:	02 c0       	rjmp	.+4      	; 0x83d4 <vfprintf+0x19a>
    83d0:	6f ef       	ldi	r22, 0xFF	; 255
    83d2:	7f ef       	ldi	r23, 0xFF	; 255
    83d4:	c5 01       	movw	r24, r10
    83d6:	0e 94 9e 44 	call	0x893c	; 0x893c <strnlen_P>
    83da:	4c 01       	movw	r8, r24
    83dc:	f3 2d       	mov	r31, r3
    83de:	f0 68       	ori	r31, 0x80	; 128
    83e0:	3f 2e       	mov	r3, r31
    83e2:	82 01       	movw	r16, r4
    83e4:	33 fc       	sbrc	r3, 3
    83e6:	1b c0       	rjmp	.+54     	; 0x841e <vfprintf+0x1e4>
    83e8:	82 2d       	mov	r24, r2
    83ea:	90 e0       	ldi	r25, 0x00	; 0
    83ec:	88 16       	cp	r8, r24
    83ee:	99 06       	cpc	r9, r25
    83f0:	b0 f4       	brcc	.+44     	; 0x841e <vfprintf+0x1e4>
    83f2:	b6 01       	movw	r22, r12
    83f4:	80 e2       	ldi	r24, 0x20	; 32
    83f6:	90 e0       	ldi	r25, 0x00	; 0
    83f8:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    83fc:	2a 94       	dec	r2
    83fe:	f4 cf       	rjmp	.-24     	; 0x83e8 <vfprintf+0x1ae>
    8400:	f5 01       	movw	r30, r10
    8402:	37 fc       	sbrc	r3, 7
    8404:	85 91       	lpm	r24, Z+
    8406:	37 fe       	sbrs	r3, 7
    8408:	81 91       	ld	r24, Z+
    840a:	5f 01       	movw	r10, r30
    840c:	b6 01       	movw	r22, r12
    840e:	90 e0       	ldi	r25, 0x00	; 0
    8410:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    8414:	21 10       	cpse	r2, r1
    8416:	2a 94       	dec	r2
    8418:	21 e0       	ldi	r18, 0x01	; 1
    841a:	82 1a       	sub	r8, r18
    841c:	91 08       	sbc	r9, r1
    841e:	81 14       	cp	r8, r1
    8420:	91 04       	cpc	r9, r1
    8422:	71 f7       	brne	.-36     	; 0x8400 <vfprintf+0x1c6>
    8424:	e8 c0       	rjmp	.+464    	; 0x85f6 <vfprintf+0x3bc>
    8426:	84 36       	cpi	r24, 0x64	; 100
    8428:	11 f0       	breq	.+4      	; 0x842e <vfprintf+0x1f4>
    842a:	89 36       	cpi	r24, 0x69	; 105
    842c:	41 f5       	brne	.+80     	; 0x847e <vfprintf+0x244>
    842e:	f8 01       	movw	r30, r16
    8430:	37 fe       	sbrs	r3, 7
    8432:	07 c0       	rjmp	.+14     	; 0x8442 <vfprintf+0x208>
    8434:	60 81       	ld	r22, Z
    8436:	71 81       	ldd	r23, Z+1	; 0x01
    8438:	82 81       	ldd	r24, Z+2	; 0x02
    843a:	93 81       	ldd	r25, Z+3	; 0x03
    843c:	0c 5f       	subi	r16, 0xFC	; 252
    843e:	1f 4f       	sbci	r17, 0xFF	; 255
    8440:	08 c0       	rjmp	.+16     	; 0x8452 <vfprintf+0x218>
    8442:	60 81       	ld	r22, Z
    8444:	71 81       	ldd	r23, Z+1	; 0x01
    8446:	07 2e       	mov	r0, r23
    8448:	00 0c       	add	r0, r0
    844a:	88 0b       	sbc	r24, r24
    844c:	99 0b       	sbc	r25, r25
    844e:	0e 5f       	subi	r16, 0xFE	; 254
    8450:	1f 4f       	sbci	r17, 0xFF	; 255
    8452:	f3 2d       	mov	r31, r3
    8454:	ff 76       	andi	r31, 0x6F	; 111
    8456:	3f 2e       	mov	r3, r31
    8458:	97 ff       	sbrs	r25, 7
    845a:	09 c0       	rjmp	.+18     	; 0x846e <vfprintf+0x234>
    845c:	90 95       	com	r25
    845e:	80 95       	com	r24
    8460:	70 95       	com	r23
    8462:	61 95       	neg	r22
    8464:	7f 4f       	sbci	r23, 0xFF	; 255
    8466:	8f 4f       	sbci	r24, 0xFF	; 255
    8468:	9f 4f       	sbci	r25, 0xFF	; 255
    846a:	f0 68       	ori	r31, 0x80	; 128
    846c:	3f 2e       	mov	r3, r31
    846e:	2a e0       	ldi	r18, 0x0A	; 10
    8470:	30 e0       	ldi	r19, 0x00	; 0
    8472:	a3 01       	movw	r20, r6
    8474:	0e 94 00 45 	call	0x8a00	; 0x8a00 <__ultoa_invert>
    8478:	88 2e       	mov	r8, r24
    847a:	86 18       	sub	r8, r6
    847c:	45 c0       	rjmp	.+138    	; 0x8508 <vfprintf+0x2ce>
    847e:	85 37       	cpi	r24, 0x75	; 117
    8480:	31 f4       	brne	.+12     	; 0x848e <vfprintf+0x254>
    8482:	23 2d       	mov	r18, r3
    8484:	2f 7e       	andi	r18, 0xEF	; 239
    8486:	b2 2e       	mov	r11, r18
    8488:	2a e0       	ldi	r18, 0x0A	; 10
    848a:	30 e0       	ldi	r19, 0x00	; 0
    848c:	25 c0       	rjmp	.+74     	; 0x84d8 <vfprintf+0x29e>
    848e:	93 2d       	mov	r25, r3
    8490:	99 7f       	andi	r25, 0xF9	; 249
    8492:	b9 2e       	mov	r11, r25
    8494:	8f 36       	cpi	r24, 0x6F	; 111
    8496:	c1 f0       	breq	.+48     	; 0x84c8 <vfprintf+0x28e>
    8498:	18 f4       	brcc	.+6      	; 0x84a0 <vfprintf+0x266>
    849a:	88 35       	cpi	r24, 0x58	; 88
    849c:	79 f0       	breq	.+30     	; 0x84bc <vfprintf+0x282>
    849e:	b5 c0       	rjmp	.+362    	; 0x860a <vfprintf+0x3d0>
    84a0:	80 37       	cpi	r24, 0x70	; 112
    84a2:	19 f0       	breq	.+6      	; 0x84aa <vfprintf+0x270>
    84a4:	88 37       	cpi	r24, 0x78	; 120
    84a6:	21 f0       	breq	.+8      	; 0x84b0 <vfprintf+0x276>
    84a8:	b0 c0       	rjmp	.+352    	; 0x860a <vfprintf+0x3d0>
    84aa:	e9 2f       	mov	r30, r25
    84ac:	e0 61       	ori	r30, 0x10	; 16
    84ae:	be 2e       	mov	r11, r30
    84b0:	b4 fe       	sbrs	r11, 4
    84b2:	0d c0       	rjmp	.+26     	; 0x84ce <vfprintf+0x294>
    84b4:	fb 2d       	mov	r31, r11
    84b6:	f4 60       	ori	r31, 0x04	; 4
    84b8:	bf 2e       	mov	r11, r31
    84ba:	09 c0       	rjmp	.+18     	; 0x84ce <vfprintf+0x294>
    84bc:	34 fe       	sbrs	r3, 4
    84be:	0a c0       	rjmp	.+20     	; 0x84d4 <vfprintf+0x29a>
    84c0:	29 2f       	mov	r18, r25
    84c2:	26 60       	ori	r18, 0x06	; 6
    84c4:	b2 2e       	mov	r11, r18
    84c6:	06 c0       	rjmp	.+12     	; 0x84d4 <vfprintf+0x29a>
    84c8:	28 e0       	ldi	r18, 0x08	; 8
    84ca:	30 e0       	ldi	r19, 0x00	; 0
    84cc:	05 c0       	rjmp	.+10     	; 0x84d8 <vfprintf+0x29e>
    84ce:	20 e1       	ldi	r18, 0x10	; 16
    84d0:	30 e0       	ldi	r19, 0x00	; 0
    84d2:	02 c0       	rjmp	.+4      	; 0x84d8 <vfprintf+0x29e>
    84d4:	20 e1       	ldi	r18, 0x10	; 16
    84d6:	32 e0       	ldi	r19, 0x02	; 2
    84d8:	f8 01       	movw	r30, r16
    84da:	b7 fe       	sbrs	r11, 7
    84dc:	07 c0       	rjmp	.+14     	; 0x84ec <vfprintf+0x2b2>
    84de:	60 81       	ld	r22, Z
    84e0:	71 81       	ldd	r23, Z+1	; 0x01
    84e2:	82 81       	ldd	r24, Z+2	; 0x02
    84e4:	93 81       	ldd	r25, Z+3	; 0x03
    84e6:	0c 5f       	subi	r16, 0xFC	; 252
    84e8:	1f 4f       	sbci	r17, 0xFF	; 255
    84ea:	06 c0       	rjmp	.+12     	; 0x84f8 <vfprintf+0x2be>
    84ec:	60 81       	ld	r22, Z
    84ee:	71 81       	ldd	r23, Z+1	; 0x01
    84f0:	80 e0       	ldi	r24, 0x00	; 0
    84f2:	90 e0       	ldi	r25, 0x00	; 0
    84f4:	0e 5f       	subi	r16, 0xFE	; 254
    84f6:	1f 4f       	sbci	r17, 0xFF	; 255
    84f8:	a3 01       	movw	r20, r6
    84fa:	0e 94 00 45 	call	0x8a00	; 0x8a00 <__ultoa_invert>
    84fe:	88 2e       	mov	r8, r24
    8500:	86 18       	sub	r8, r6
    8502:	fb 2d       	mov	r31, r11
    8504:	ff 77       	andi	r31, 0x7F	; 127
    8506:	3f 2e       	mov	r3, r31
    8508:	36 fe       	sbrs	r3, 6
    850a:	0d c0       	rjmp	.+26     	; 0x8526 <vfprintf+0x2ec>
    850c:	23 2d       	mov	r18, r3
    850e:	2e 7f       	andi	r18, 0xFE	; 254
    8510:	a2 2e       	mov	r10, r18
    8512:	89 14       	cp	r8, r9
    8514:	58 f4       	brcc	.+22     	; 0x852c <vfprintf+0x2f2>
    8516:	34 fe       	sbrs	r3, 4
    8518:	0b c0       	rjmp	.+22     	; 0x8530 <vfprintf+0x2f6>
    851a:	32 fc       	sbrc	r3, 2
    851c:	09 c0       	rjmp	.+18     	; 0x8530 <vfprintf+0x2f6>
    851e:	83 2d       	mov	r24, r3
    8520:	8e 7e       	andi	r24, 0xEE	; 238
    8522:	a8 2e       	mov	r10, r24
    8524:	05 c0       	rjmp	.+10     	; 0x8530 <vfprintf+0x2f6>
    8526:	b8 2c       	mov	r11, r8
    8528:	a3 2c       	mov	r10, r3
    852a:	03 c0       	rjmp	.+6      	; 0x8532 <vfprintf+0x2f8>
    852c:	b8 2c       	mov	r11, r8
    852e:	01 c0       	rjmp	.+2      	; 0x8532 <vfprintf+0x2f8>
    8530:	b9 2c       	mov	r11, r9
    8532:	a4 fe       	sbrs	r10, 4
    8534:	0f c0       	rjmp	.+30     	; 0x8554 <vfprintf+0x31a>
    8536:	fe 01       	movw	r30, r28
    8538:	e8 0d       	add	r30, r8
    853a:	f1 1d       	adc	r31, r1
    853c:	80 81       	ld	r24, Z
    853e:	80 33       	cpi	r24, 0x30	; 48
    8540:	21 f4       	brne	.+8      	; 0x854a <vfprintf+0x310>
    8542:	9a 2d       	mov	r25, r10
    8544:	99 7e       	andi	r25, 0xE9	; 233
    8546:	a9 2e       	mov	r10, r25
    8548:	09 c0       	rjmp	.+18     	; 0x855c <vfprintf+0x322>
    854a:	a2 fe       	sbrs	r10, 2
    854c:	06 c0       	rjmp	.+12     	; 0x855a <vfprintf+0x320>
    854e:	b3 94       	inc	r11
    8550:	b3 94       	inc	r11
    8552:	04 c0       	rjmp	.+8      	; 0x855c <vfprintf+0x322>
    8554:	8a 2d       	mov	r24, r10
    8556:	86 78       	andi	r24, 0x86	; 134
    8558:	09 f0       	breq	.+2      	; 0x855c <vfprintf+0x322>
    855a:	b3 94       	inc	r11
    855c:	a3 fc       	sbrc	r10, 3
    855e:	11 c0       	rjmp	.+34     	; 0x8582 <vfprintf+0x348>
    8560:	a0 fe       	sbrs	r10, 0
    8562:	06 c0       	rjmp	.+12     	; 0x8570 <vfprintf+0x336>
    8564:	b2 14       	cp	r11, r2
    8566:	88 f4       	brcc	.+34     	; 0x858a <vfprintf+0x350>
    8568:	28 0c       	add	r2, r8
    856a:	92 2c       	mov	r9, r2
    856c:	9b 18       	sub	r9, r11
    856e:	0e c0       	rjmp	.+28     	; 0x858c <vfprintf+0x352>
    8570:	b2 14       	cp	r11, r2
    8572:	60 f4       	brcc	.+24     	; 0x858c <vfprintf+0x352>
    8574:	b6 01       	movw	r22, r12
    8576:	80 e2       	ldi	r24, 0x20	; 32
    8578:	90 e0       	ldi	r25, 0x00	; 0
    857a:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    857e:	b3 94       	inc	r11
    8580:	f7 cf       	rjmp	.-18     	; 0x8570 <vfprintf+0x336>
    8582:	b2 14       	cp	r11, r2
    8584:	18 f4       	brcc	.+6      	; 0x858c <vfprintf+0x352>
    8586:	2b 18       	sub	r2, r11
    8588:	02 c0       	rjmp	.+4      	; 0x858e <vfprintf+0x354>
    858a:	98 2c       	mov	r9, r8
    858c:	21 2c       	mov	r2, r1
    858e:	a4 fe       	sbrs	r10, 4
    8590:	10 c0       	rjmp	.+32     	; 0x85b2 <vfprintf+0x378>
    8592:	b6 01       	movw	r22, r12
    8594:	80 e3       	ldi	r24, 0x30	; 48
    8596:	90 e0       	ldi	r25, 0x00	; 0
    8598:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    859c:	a2 fe       	sbrs	r10, 2
    859e:	17 c0       	rjmp	.+46     	; 0x85ce <vfprintf+0x394>
    85a0:	a1 fc       	sbrc	r10, 1
    85a2:	03 c0       	rjmp	.+6      	; 0x85aa <vfprintf+0x370>
    85a4:	88 e7       	ldi	r24, 0x78	; 120
    85a6:	90 e0       	ldi	r25, 0x00	; 0
    85a8:	02 c0       	rjmp	.+4      	; 0x85ae <vfprintf+0x374>
    85aa:	88 e5       	ldi	r24, 0x58	; 88
    85ac:	90 e0       	ldi	r25, 0x00	; 0
    85ae:	b6 01       	movw	r22, r12
    85b0:	0c c0       	rjmp	.+24     	; 0x85ca <vfprintf+0x390>
    85b2:	8a 2d       	mov	r24, r10
    85b4:	86 78       	andi	r24, 0x86	; 134
    85b6:	59 f0       	breq	.+22     	; 0x85ce <vfprintf+0x394>
    85b8:	a1 fe       	sbrs	r10, 1
    85ba:	02 c0       	rjmp	.+4      	; 0x85c0 <vfprintf+0x386>
    85bc:	8b e2       	ldi	r24, 0x2B	; 43
    85be:	01 c0       	rjmp	.+2      	; 0x85c2 <vfprintf+0x388>
    85c0:	80 e2       	ldi	r24, 0x20	; 32
    85c2:	a7 fc       	sbrc	r10, 7
    85c4:	8d e2       	ldi	r24, 0x2D	; 45
    85c6:	b6 01       	movw	r22, r12
    85c8:	90 e0       	ldi	r25, 0x00	; 0
    85ca:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    85ce:	89 14       	cp	r8, r9
    85d0:	38 f4       	brcc	.+14     	; 0x85e0 <vfprintf+0x3a6>
    85d2:	b6 01       	movw	r22, r12
    85d4:	80 e3       	ldi	r24, 0x30	; 48
    85d6:	90 e0       	ldi	r25, 0x00	; 0
    85d8:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    85dc:	9a 94       	dec	r9
    85de:	f7 cf       	rjmp	.-18     	; 0x85ce <vfprintf+0x394>
    85e0:	8a 94       	dec	r8
    85e2:	f3 01       	movw	r30, r6
    85e4:	e8 0d       	add	r30, r8
    85e6:	f1 1d       	adc	r31, r1
    85e8:	80 81       	ld	r24, Z
    85ea:	b6 01       	movw	r22, r12
    85ec:	90 e0       	ldi	r25, 0x00	; 0
    85ee:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    85f2:	81 10       	cpse	r8, r1
    85f4:	f5 cf       	rjmp	.-22     	; 0x85e0 <vfprintf+0x3a6>
    85f6:	22 20       	and	r2, r2
    85f8:	09 f4       	brne	.+2      	; 0x85fc <vfprintf+0x3c2>
    85fa:	42 ce       	rjmp	.-892    	; 0x8280 <vfprintf+0x46>
    85fc:	b6 01       	movw	r22, r12
    85fe:	80 e2       	ldi	r24, 0x20	; 32
    8600:	90 e0       	ldi	r25, 0x00	; 0
    8602:	0e 94 c4 44 	call	0x8988	; 0x8988 <fputc>
    8606:	2a 94       	dec	r2
    8608:	f6 cf       	rjmp	.-20     	; 0x85f6 <vfprintf+0x3bc>
    860a:	f6 01       	movw	r30, r12
    860c:	86 81       	ldd	r24, Z+6	; 0x06
    860e:	97 81       	ldd	r25, Z+7	; 0x07
    8610:	02 c0       	rjmp	.+4      	; 0x8616 <vfprintf+0x3dc>
    8612:	8f ef       	ldi	r24, 0xFF	; 255
    8614:	9f ef       	ldi	r25, 0xFF	; 255
    8616:	2b 96       	adiw	r28, 0x0b	; 11
    8618:	cd bf       	out	0x3d, r28	; 61
    861a:	de bf       	out	0x3e, r29	; 62
    861c:	df 91       	pop	r29
    861e:	cf 91       	pop	r28
    8620:	1f 91       	pop	r17
    8622:	0f 91       	pop	r16
    8624:	ff 90       	pop	r15
    8626:	ef 90       	pop	r14
    8628:	df 90       	pop	r13
    862a:	cf 90       	pop	r12
    862c:	bf 90       	pop	r11
    862e:	af 90       	pop	r10
    8630:	9f 90       	pop	r9
    8632:	8f 90       	pop	r8
    8634:	7f 90       	pop	r7
    8636:	6f 90       	pop	r6
    8638:	5f 90       	pop	r5
    863a:	4f 90       	pop	r4
    863c:	3f 90       	pop	r3
    863e:	2f 90       	pop	r2
    8640:	08 95       	ret

00008642 <strtod>:
    8642:	8f 92       	push	r8
    8644:	9f 92       	push	r9
    8646:	af 92       	push	r10
    8648:	bf 92       	push	r11
    864a:	cf 92       	push	r12
    864c:	df 92       	push	r13
    864e:	ef 92       	push	r14
    8650:	ff 92       	push	r15
    8652:	0f 93       	push	r16
    8654:	1f 93       	push	r17
    8656:	cf 93       	push	r28
    8658:	df 93       	push	r29
    865a:	ec 01       	movw	r28, r24
    865c:	6b 01       	movw	r12, r22
    865e:	61 15       	cp	r22, r1
    8660:	71 05       	cpc	r23, r1
    8662:	19 f0       	breq	.+6      	; 0x866a <strtod+0x28>
    8664:	fb 01       	movw	r30, r22
    8666:	80 83       	st	Z, r24
    8668:	91 83       	std	Z+1, r25	; 0x01
    866a:	7e 01       	movw	r14, r28
    866c:	ff ef       	ldi	r31, 0xFF	; 255
    866e:	ef 1a       	sub	r14, r31
    8670:	ff 0a       	sbc	r15, r31
    8672:	08 81       	ld	r16, Y
    8674:	80 2f       	mov	r24, r16
    8676:	90 e0       	ldi	r25, 0x00	; 0
    8678:	0e 94 7d 44 	call	0x88fa	; 0x88fa <isspace>
    867c:	89 2b       	or	r24, r25
    867e:	11 f0       	breq	.+4      	; 0x8684 <strtod+0x42>
    8680:	e7 01       	movw	r28, r14
    8682:	f3 cf       	rjmp	.-26     	; 0x866a <strtod+0x28>
    8684:	0d 32       	cpi	r16, 0x2D	; 45
    8686:	39 f4       	brne	.+14     	; 0x8696 <strtod+0x54>
    8688:	7e 01       	movw	r14, r28
    868a:	82 e0       	ldi	r24, 0x02	; 2
    868c:	e8 0e       	add	r14, r24
    868e:	f1 1c       	adc	r15, r1
    8690:	09 81       	ldd	r16, Y+1	; 0x01
    8692:	11 e0       	ldi	r17, 0x01	; 1
    8694:	08 c0       	rjmp	.+16     	; 0x86a6 <strtod+0x64>
    8696:	0b 32       	cpi	r16, 0x2B	; 43
    8698:	29 f4       	brne	.+10     	; 0x86a4 <strtod+0x62>
    869a:	7e 01       	movw	r14, r28
    869c:	92 e0       	ldi	r25, 0x02	; 2
    869e:	e9 0e       	add	r14, r25
    86a0:	f1 1c       	adc	r15, r1
    86a2:	09 81       	ldd	r16, Y+1	; 0x01
    86a4:	10 e0       	ldi	r17, 0x00	; 0
    86a6:	e7 01       	movw	r28, r14
    86a8:	21 97       	sbiw	r28, 0x01	; 1
    86aa:	43 e0       	ldi	r20, 0x03	; 3
    86ac:	50 e0       	ldi	r21, 0x00	; 0
    86ae:	6c ef       	ldi	r22, 0xFC	; 252
    86b0:	71 e0       	ldi	r23, 0x01	; 1
    86b2:	ce 01       	movw	r24, r28
    86b4:	0e 94 86 44 	call	0x890c	; 0x890c <strncasecmp_P>
    86b8:	89 2b       	or	r24, r25
    86ba:	c1 f4       	brne	.+48     	; 0x86ec <strtod+0xaa>
    86bc:	23 96       	adiw	r28, 0x03	; 3
    86be:	45 e0       	ldi	r20, 0x05	; 5
    86c0:	50 e0       	ldi	r21, 0x00	; 0
    86c2:	67 ef       	ldi	r22, 0xF7	; 247
    86c4:	71 e0       	ldi	r23, 0x01	; 1
    86c6:	ce 01       	movw	r24, r28
    86c8:	0e 94 86 44 	call	0x890c	; 0x890c <strncasecmp_P>
    86cc:	89 2b       	or	r24, r25
    86ce:	09 f4       	brne	.+2      	; 0x86d2 <strtod+0x90>
    86d0:	25 96       	adiw	r28, 0x05	; 5
    86d2:	c1 14       	cp	r12, r1
    86d4:	d1 04       	cpc	r13, r1
    86d6:	19 f0       	breq	.+6      	; 0x86de <strtod+0x9c>
    86d8:	f6 01       	movw	r30, r12
    86da:	c0 83       	st	Z, r28
    86dc:	d1 83       	std	Z+1, r29	; 0x01
    86de:	11 11       	cpse	r17, r1
    86e0:	f6 c0       	rjmp	.+492    	; 0x88ce <strtod+0x28c>
    86e2:	60 e0       	ldi	r22, 0x00	; 0
    86e4:	70 e0       	ldi	r23, 0x00	; 0
    86e6:	80 e8       	ldi	r24, 0x80	; 128
    86e8:	9f e7       	ldi	r25, 0x7F	; 127
    86ea:	fa c0       	rjmp	.+500    	; 0x88e0 <strtod+0x29e>
    86ec:	43 e0       	ldi	r20, 0x03	; 3
    86ee:	50 e0       	ldi	r21, 0x00	; 0
    86f0:	64 ef       	ldi	r22, 0xF4	; 244
    86f2:	71 e0       	ldi	r23, 0x01	; 1
    86f4:	ce 01       	movw	r24, r28
    86f6:	0e 94 86 44 	call	0x890c	; 0x890c <strncasecmp_P>
    86fa:	89 2b       	or	r24, r25
    86fc:	59 f4       	brne	.+22     	; 0x8714 <strtod+0xd2>
    86fe:	c1 14       	cp	r12, r1
    8700:	d1 04       	cpc	r13, r1
    8702:	09 f4       	brne	.+2      	; 0x8706 <strtod+0xc4>
    8704:	e9 c0       	rjmp	.+466    	; 0x88d8 <strtod+0x296>
    8706:	f2 e0       	ldi	r31, 0x02	; 2
    8708:	ef 0e       	add	r14, r31
    870a:	f1 1c       	adc	r15, r1
    870c:	f6 01       	movw	r30, r12
    870e:	e0 82       	st	Z, r14
    8710:	f1 82       	std	Z+1, r15	; 0x01
    8712:	e2 c0       	rjmp	.+452    	; 0x88d8 <strtod+0x296>
    8714:	20 e0       	ldi	r18, 0x00	; 0
    8716:	30 e0       	ldi	r19, 0x00	; 0
    8718:	a9 01       	movw	r20, r18
    871a:	c0 e0       	ldi	r28, 0x00	; 0
    871c:	d0 e0       	ldi	r29, 0x00	; 0
    871e:	f7 01       	movw	r30, r14
    8720:	60 ed       	ldi	r22, 0xD0	; 208
    8722:	a6 2e       	mov	r10, r22
    8724:	a0 0e       	add	r10, r16
    8726:	89 e0       	ldi	r24, 0x09	; 9
    8728:	8a 15       	cp	r24, r10
    872a:	30 f1       	brcs	.+76     	; 0x8778 <strtod+0x136>
    872c:	91 2f       	mov	r25, r17
    872e:	92 60       	ori	r25, 0x02	; 2
    8730:	b9 2e       	mov	r11, r25
    8732:	81 2f       	mov	r24, r17
    8734:	88 70       	andi	r24, 0x08	; 8
    8736:	12 ff       	sbrs	r17, 2
    8738:	04 c0       	rjmp	.+8      	; 0x8742 <strtod+0x100>
    873a:	81 11       	cpse	r24, r1
    873c:	24 c0       	rjmp	.+72     	; 0x8786 <strtod+0x144>
    873e:	21 96       	adiw	r28, 0x01	; 1
    8740:	22 c0       	rjmp	.+68     	; 0x8786 <strtod+0x144>
    8742:	81 11       	cpse	r24, r1
    8744:	21 97       	sbiw	r28, 0x01	; 1
    8746:	a5 e0       	ldi	r26, 0x05	; 5
    8748:	b0 e0       	ldi	r27, 0x00	; 0
    874a:	0e 94 0c 40 	call	0x8018	; 0x8018 <__muluhisi3>
    874e:	dc 01       	movw	r26, r24
    8750:	cb 01       	movw	r24, r22
    8752:	88 0f       	add	r24, r24
    8754:	99 1f       	adc	r25, r25
    8756:	aa 1f       	adc	r26, r26
    8758:	bb 1f       	adc	r27, r27
    875a:	9c 01       	movw	r18, r24
    875c:	ad 01       	movw	r20, r26
    875e:	2a 0d       	add	r18, r10
    8760:	31 1d       	adc	r19, r1
    8762:	41 1d       	adc	r20, r1
    8764:	51 1d       	adc	r21, r1
    8766:	28 39       	cpi	r18, 0x98	; 152
    8768:	89 e9       	ldi	r24, 0x99	; 153
    876a:	38 07       	cpc	r19, r24
    876c:	48 07       	cpc	r20, r24
    876e:	89 e1       	ldi	r24, 0x19	; 25
    8770:	58 07       	cpc	r21, r24
    8772:	48 f0       	brcs	.+18     	; 0x8786 <strtod+0x144>
    8774:	16 60       	ori	r17, 0x06	; 6
    8776:	06 c0       	rjmp	.+12     	; 0x8784 <strtod+0x142>
    8778:	9e ef       	ldi	r25, 0xFE	; 254
    877a:	a9 12       	cpse	r10, r25
    877c:	0a c0       	rjmp	.+20     	; 0x8792 <strtod+0x150>
    877e:	13 fd       	sbrc	r17, 3
    8780:	40 c0       	rjmp	.+128    	; 0x8802 <strtod+0x1c0>
    8782:	18 60       	ori	r17, 0x08	; 8
    8784:	b1 2e       	mov	r11, r17
    8786:	8f ef       	ldi	r24, 0xFF	; 255
    8788:	e8 1a       	sub	r14, r24
    878a:	f8 0a       	sbc	r15, r24
    878c:	00 81       	ld	r16, Z
    878e:	1b 2d       	mov	r17, r11
    8790:	c6 cf       	rjmp	.-116    	; 0x871e <strtod+0xdc>
    8792:	80 2f       	mov	r24, r16
    8794:	8f 7d       	andi	r24, 0xDF	; 223
    8796:	85 34       	cpi	r24, 0x45	; 69
    8798:	a1 f5       	brne	.+104    	; 0x8802 <strtod+0x1c0>
    879a:	80 81       	ld	r24, Z
    879c:	8d 32       	cpi	r24, 0x2D	; 45
    879e:	11 f4       	brne	.+4      	; 0x87a4 <strtod+0x162>
    87a0:	10 61       	ori	r17, 0x10	; 16
    87a2:	06 c0       	rjmp	.+12     	; 0x87b0 <strtod+0x16e>
    87a4:	8b 32       	cpi	r24, 0x2B	; 43
    87a6:	21 f0       	breq	.+8      	; 0x87b0 <strtod+0x16e>
    87a8:	31 96       	adiw	r30, 0x01	; 1
    87aa:	61 e0       	ldi	r22, 0x01	; 1
    87ac:	70 e0       	ldi	r23, 0x00	; 0
    87ae:	04 c0       	rjmp	.+8      	; 0x87b8 <strtod+0x176>
    87b0:	81 81       	ldd	r24, Z+1	; 0x01
    87b2:	32 96       	adiw	r30, 0x02	; 2
    87b4:	62 e0       	ldi	r22, 0x02	; 2
    87b6:	70 e0       	ldi	r23, 0x00	; 0
    87b8:	80 53       	subi	r24, 0x30	; 48
    87ba:	8a 30       	cpi	r24, 0x0A	; 10
    87bc:	18 f0       	brcs	.+6      	; 0x87c4 <strtod+0x182>
    87be:	e6 1b       	sub	r30, r22
    87c0:	f7 0b       	sbc	r31, r23
    87c2:	1f c0       	rjmp	.+62     	; 0x8802 <strtod+0x1c0>
    87c4:	60 e0       	ldi	r22, 0x00	; 0
    87c6:	70 e0       	ldi	r23, 0x00	; 0
    87c8:	60 38       	cpi	r22, 0x80	; 128
    87ca:	9c e0       	ldi	r25, 0x0C	; 12
    87cc:	79 07       	cpc	r23, r25
    87ce:	5c f4       	brge	.+22     	; 0x87e6 <strtod+0x1a4>
    87d0:	db 01       	movw	r26, r22
    87d2:	aa 0f       	add	r26, r26
    87d4:	bb 1f       	adc	r27, r27
    87d6:	aa 0f       	add	r26, r26
    87d8:	bb 1f       	adc	r27, r27
    87da:	6a 0f       	add	r22, r26
    87dc:	7b 1f       	adc	r23, r27
    87de:	66 0f       	add	r22, r22
    87e0:	77 1f       	adc	r23, r23
    87e2:	68 0f       	add	r22, r24
    87e4:	71 1d       	adc	r23, r1
    87e6:	31 96       	adiw	r30, 0x01	; 1
    87e8:	df 01       	movw	r26, r30
    87ea:	11 97       	sbiw	r26, 0x01	; 1
    87ec:	8c 91       	ld	r24, X
    87ee:	80 53       	subi	r24, 0x30	; 48
    87f0:	8a 30       	cpi	r24, 0x0A	; 10
    87f2:	50 f3       	brcs	.-44     	; 0x87c8 <strtod+0x186>
    87f4:	14 ff       	sbrs	r17, 4
    87f6:	03 c0       	rjmp	.+6      	; 0x87fe <strtod+0x1bc>
    87f8:	71 95       	neg	r23
    87fa:	61 95       	neg	r22
    87fc:	71 09       	sbc	r23, r1
    87fe:	c6 0f       	add	r28, r22
    8800:	d7 1f       	adc	r29, r23
    8802:	11 ff       	sbrs	r17, 1
    8804:	08 c0       	rjmp	.+16     	; 0x8816 <strtod+0x1d4>
    8806:	c1 14       	cp	r12, r1
    8808:	d1 04       	cpc	r13, r1
    880a:	29 f0       	breq	.+10     	; 0x8816 <strtod+0x1d4>
    880c:	cf 01       	movw	r24, r30
    880e:	01 97       	sbiw	r24, 0x01	; 1
    8810:	f6 01       	movw	r30, r12
    8812:	80 83       	st	Z, r24
    8814:	91 83       	std	Z+1, r25	; 0x01
    8816:	ca 01       	movw	r24, r20
    8818:	b9 01       	movw	r22, r18
    881a:	0e 94 c0 3e 	call	0x7d80	; 0x7d80 <__floatunsisf>
    881e:	21 2f       	mov	r18, r17
    8820:	23 70       	andi	r18, 0x03	; 3
    8822:	23 30       	cpi	r18, 0x03	; 3
    8824:	19 f0       	breq	.+6      	; 0x882c <strtod+0x1ea>
    8826:	4b 01       	movw	r8, r22
    8828:	5c 01       	movw	r10, r24
    882a:	06 c0       	rjmp	.+12     	; 0x8838 <strtod+0x1f6>
    882c:	4b 01       	movw	r8, r22
    882e:	5c 01       	movw	r10, r24
    8830:	b7 fa       	bst	r11, 7
    8832:	b0 94       	com	r11
    8834:	b7 f8       	bld	r11, 7
    8836:	b0 94       	com	r11
    8838:	20 e0       	ldi	r18, 0x00	; 0
    883a:	30 e0       	ldi	r19, 0x00	; 0
    883c:	a9 01       	movw	r20, r18
    883e:	c5 01       	movw	r24, r10
    8840:	b4 01       	movw	r22, r8
    8842:	0e 94 5e 45 	call	0x8abc	; 0x8abc <__cmpsf2>
    8846:	88 23       	and	r24, r24
    8848:	09 f4       	brne	.+2      	; 0x884c <strtod+0x20a>
    884a:	3e c0       	rjmp	.+124    	; 0x88c8 <strtod+0x286>
    884c:	d7 ff       	sbrs	r29, 7
    884e:	06 c0       	rjmp	.+12     	; 0x885c <strtod+0x21a>
    8850:	d1 95       	neg	r29
    8852:	c1 95       	neg	r28
    8854:	d1 09       	sbc	r29, r1
    8856:	03 e1       	ldi	r16, 0x13	; 19
    8858:	12 e0       	ldi	r17, 0x02	; 2
    885a:	02 c0       	rjmp	.+4      	; 0x8860 <strtod+0x21e>
    885c:	0b e2       	ldi	r16, 0x2B	; 43
    885e:	12 e0       	ldi	r17, 0x02	; 2
    8860:	68 01       	movw	r12, r16
    8862:	f8 e1       	ldi	r31, 0x18	; 24
    8864:	cf 1a       	sub	r12, r31
    8866:	d1 08       	sbc	r13, r1
    8868:	90 e2       	ldi	r25, 0x20	; 32
    886a:	e9 2e       	mov	r14, r25
    886c:	f1 2c       	mov	r15, r1
    886e:	ce 15       	cp	r28, r14
    8870:	df 05       	cpc	r29, r15
    8872:	74 f0       	brlt	.+28     	; 0x8890 <strtod+0x24e>
    8874:	f8 01       	movw	r30, r16
    8876:	25 91       	lpm	r18, Z+
    8878:	35 91       	lpm	r19, Z+
    887a:	45 91       	lpm	r20, Z+
    887c:	54 91       	lpm	r21, Z
    887e:	c5 01       	movw	r24, r10
    8880:	b4 01       	movw	r22, r8
    8882:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <__mulsf3>
    8886:	4b 01       	movw	r8, r22
    8888:	5c 01       	movw	r10, r24
    888a:	ce 19       	sub	r28, r14
    888c:	df 09       	sbc	r29, r15
    888e:	ef cf       	rjmp	.-34     	; 0x886e <strtod+0x22c>
    8890:	04 50       	subi	r16, 0x04	; 4
    8892:	11 09       	sbc	r17, r1
    8894:	f5 94       	asr	r15
    8896:	e7 94       	ror	r14
    8898:	0c 15       	cp	r16, r12
    889a:	1d 05       	cpc	r17, r13
    889c:	41 f7       	brne	.-48     	; 0x886e <strtod+0x22c>
    889e:	8a 2d       	mov	r24, r10
    88a0:	88 0f       	add	r24, r24
    88a2:	8b 2d       	mov	r24, r11
    88a4:	88 1f       	adc	r24, r24
    88a6:	8f 3f       	cpi	r24, 0xFF	; 255
    88a8:	49 f0       	breq	.+18     	; 0x88bc <strtod+0x27a>
    88aa:	20 e0       	ldi	r18, 0x00	; 0
    88ac:	30 e0       	ldi	r19, 0x00	; 0
    88ae:	a9 01       	movw	r20, r18
    88b0:	c5 01       	movw	r24, r10
    88b2:	b4 01       	movw	r22, r8
    88b4:	0e 94 5e 45 	call	0x8abc	; 0x8abc <__cmpsf2>
    88b8:	81 11       	cpse	r24, r1
    88ba:	06 c0       	rjmp	.+12     	; 0x88c8 <strtod+0x286>
    88bc:	82 e2       	ldi	r24, 0x22	; 34
    88be:	90 e0       	ldi	r25, 0x00	; 0
    88c0:	80 93 d9 29 	sts	0x29D9, r24	; 0x8029d9 <errno>
    88c4:	90 93 da 29 	sts	0x29DA, r25	; 0x8029da <errno+0x1>
    88c8:	c5 01       	movw	r24, r10
    88ca:	b4 01       	movw	r22, r8
    88cc:	09 c0       	rjmp	.+18     	; 0x88e0 <strtod+0x29e>
    88ce:	60 e0       	ldi	r22, 0x00	; 0
    88d0:	70 e0       	ldi	r23, 0x00	; 0
    88d2:	80 e8       	ldi	r24, 0x80	; 128
    88d4:	9f ef       	ldi	r25, 0xFF	; 255
    88d6:	04 c0       	rjmp	.+8      	; 0x88e0 <strtod+0x29e>
    88d8:	60 e0       	ldi	r22, 0x00	; 0
    88da:	70 e0       	ldi	r23, 0x00	; 0
    88dc:	80 ec       	ldi	r24, 0xC0	; 192
    88de:	9f e7       	ldi	r25, 0x7F	; 127
    88e0:	df 91       	pop	r29
    88e2:	cf 91       	pop	r28
    88e4:	1f 91       	pop	r17
    88e6:	0f 91       	pop	r16
    88e8:	ff 90       	pop	r15
    88ea:	ef 90       	pop	r14
    88ec:	df 90       	pop	r13
    88ee:	cf 90       	pop	r12
    88f0:	bf 90       	pop	r11
    88f2:	af 90       	pop	r10
    88f4:	9f 90       	pop	r9
    88f6:	8f 90       	pop	r8
    88f8:	08 95       	ret

000088fa <isspace>:
    88fa:	91 11       	cpse	r25, r1
    88fc:	0c 94 87 45 	jmp	0x8b0e	; 0x8b0e <__ctype_isfalse>
    8900:	80 32       	cpi	r24, 0x20	; 32
    8902:	19 f0       	breq	.+6      	; 0x890a <isspace+0x10>
    8904:	89 50       	subi	r24, 0x09	; 9
    8906:	85 50       	subi	r24, 0x05	; 5
    8908:	c8 f7       	brcc	.-14     	; 0x88fc <isspace+0x2>
    890a:	08 95       	ret

0000890c <strncasecmp_P>:
    890c:	fb 01       	movw	r30, r22
    890e:	dc 01       	movw	r26, r24
    8910:	41 50       	subi	r20, 0x01	; 1
    8912:	50 40       	sbci	r21, 0x00	; 0
    8914:	88 f0       	brcs	.+34     	; 0x8938 <strncasecmp_P+0x2c>
    8916:	8d 91       	ld	r24, X+
    8918:	81 34       	cpi	r24, 0x41	; 65
    891a:	1c f0       	brlt	.+6      	; 0x8922 <strncasecmp_P+0x16>
    891c:	8b 35       	cpi	r24, 0x5B	; 91
    891e:	0c f4       	brge	.+2      	; 0x8922 <strncasecmp_P+0x16>
    8920:	80 5e       	subi	r24, 0xE0	; 224
    8922:	65 91       	lpm	r22, Z+
    8924:	61 34       	cpi	r22, 0x41	; 65
    8926:	1c f0       	brlt	.+6      	; 0x892e <strncasecmp_P+0x22>
    8928:	6b 35       	cpi	r22, 0x5B	; 91
    892a:	0c f4       	brge	.+2      	; 0x892e <strncasecmp_P+0x22>
    892c:	60 5e       	subi	r22, 0xE0	; 224
    892e:	86 1b       	sub	r24, r22
    8930:	61 11       	cpse	r22, r1
    8932:	71 f3       	breq	.-36     	; 0x8910 <strncasecmp_P+0x4>
    8934:	99 0b       	sbc	r25, r25
    8936:	08 95       	ret
    8938:	88 1b       	sub	r24, r24
    893a:	fc cf       	rjmp	.-8      	; 0x8934 <strncasecmp_P+0x28>

0000893c <strnlen_P>:
    893c:	fc 01       	movw	r30, r24
    893e:	05 90       	lpm	r0, Z+
    8940:	61 50       	subi	r22, 0x01	; 1
    8942:	70 40       	sbci	r23, 0x00	; 0
    8944:	01 10       	cpse	r0, r1
    8946:	d8 f7       	brcc	.-10     	; 0x893e <strnlen_P+0x2>
    8948:	80 95       	com	r24
    894a:	90 95       	com	r25
    894c:	8e 0f       	add	r24, r30
    894e:	9f 1f       	adc	r25, r31
    8950:	08 95       	ret

00008952 <strnlen>:
    8952:	fc 01       	movw	r30, r24
    8954:	61 50       	subi	r22, 0x01	; 1
    8956:	70 40       	sbci	r23, 0x00	; 0
    8958:	01 90       	ld	r0, Z+
    895a:	01 10       	cpse	r0, r1
    895c:	d8 f7       	brcc	.-10     	; 0x8954 <strnlen+0x2>
    895e:	80 95       	com	r24
    8960:	90 95       	com	r25
    8962:	8e 0f       	add	r24, r30
    8964:	9f 1f       	adc	r25, r31
    8966:	08 95       	ret

00008968 <strrev>:
    8968:	dc 01       	movw	r26, r24
    896a:	fc 01       	movw	r30, r24
    896c:	67 2f       	mov	r22, r23
    896e:	71 91       	ld	r23, Z+
    8970:	77 23       	and	r23, r23
    8972:	e1 f7       	brne	.-8      	; 0x896c <strrev+0x4>
    8974:	32 97       	sbiw	r30, 0x02	; 2
    8976:	04 c0       	rjmp	.+8      	; 0x8980 <strrev+0x18>
    8978:	7c 91       	ld	r23, X
    897a:	6d 93       	st	X+, r22
    897c:	70 83       	st	Z, r23
    897e:	62 91       	ld	r22, -Z
    8980:	ae 17       	cp	r26, r30
    8982:	bf 07       	cpc	r27, r31
    8984:	c8 f3       	brcs	.-14     	; 0x8978 <strrev+0x10>
    8986:	08 95       	ret

00008988 <fputc>:
    8988:	0f 93       	push	r16
    898a:	1f 93       	push	r17
    898c:	cf 93       	push	r28
    898e:	df 93       	push	r29
    8990:	fb 01       	movw	r30, r22
    8992:	23 81       	ldd	r18, Z+3	; 0x03
    8994:	21 fd       	sbrc	r18, 1
    8996:	03 c0       	rjmp	.+6      	; 0x899e <fputc+0x16>
    8998:	8f ef       	ldi	r24, 0xFF	; 255
    899a:	9f ef       	ldi	r25, 0xFF	; 255
    899c:	2c c0       	rjmp	.+88     	; 0x89f6 <fputc+0x6e>
    899e:	22 ff       	sbrs	r18, 2
    89a0:	16 c0       	rjmp	.+44     	; 0x89ce <fputc+0x46>
    89a2:	46 81       	ldd	r20, Z+6	; 0x06
    89a4:	57 81       	ldd	r21, Z+7	; 0x07
    89a6:	24 81       	ldd	r18, Z+4	; 0x04
    89a8:	35 81       	ldd	r19, Z+5	; 0x05
    89aa:	42 17       	cp	r20, r18
    89ac:	53 07       	cpc	r21, r19
    89ae:	44 f4       	brge	.+16     	; 0x89c0 <fputc+0x38>
    89b0:	a0 81       	ld	r26, Z
    89b2:	b1 81       	ldd	r27, Z+1	; 0x01
    89b4:	9d 01       	movw	r18, r26
    89b6:	2f 5f       	subi	r18, 0xFF	; 255
    89b8:	3f 4f       	sbci	r19, 0xFF	; 255
    89ba:	20 83       	st	Z, r18
    89bc:	31 83       	std	Z+1, r19	; 0x01
    89be:	8c 93       	st	X, r24
    89c0:	26 81       	ldd	r18, Z+6	; 0x06
    89c2:	37 81       	ldd	r19, Z+7	; 0x07
    89c4:	2f 5f       	subi	r18, 0xFF	; 255
    89c6:	3f 4f       	sbci	r19, 0xFF	; 255
    89c8:	26 83       	std	Z+6, r18	; 0x06
    89ca:	37 83       	std	Z+7, r19	; 0x07
    89cc:	14 c0       	rjmp	.+40     	; 0x89f6 <fputc+0x6e>
    89ce:	8b 01       	movw	r16, r22
    89d0:	ec 01       	movw	r28, r24
    89d2:	fb 01       	movw	r30, r22
    89d4:	00 84       	ldd	r0, Z+8	; 0x08
    89d6:	f1 85       	ldd	r31, Z+9	; 0x09
    89d8:	e0 2d       	mov	r30, r0
    89da:	19 95       	eicall
    89dc:	89 2b       	or	r24, r25
    89de:	e1 f6       	brne	.-72     	; 0x8998 <fputc+0x10>
    89e0:	d8 01       	movw	r26, r16
    89e2:	16 96       	adiw	r26, 0x06	; 6
    89e4:	8d 91       	ld	r24, X+
    89e6:	9c 91       	ld	r25, X
    89e8:	17 97       	sbiw	r26, 0x07	; 7
    89ea:	01 96       	adiw	r24, 0x01	; 1
    89ec:	16 96       	adiw	r26, 0x06	; 6
    89ee:	8d 93       	st	X+, r24
    89f0:	9c 93       	st	X, r25
    89f2:	17 97       	sbiw	r26, 0x07	; 7
    89f4:	ce 01       	movw	r24, r28
    89f6:	df 91       	pop	r29
    89f8:	cf 91       	pop	r28
    89fa:	1f 91       	pop	r17
    89fc:	0f 91       	pop	r16
    89fe:	08 95       	ret

00008a00 <__ultoa_invert>:
    8a00:	fa 01       	movw	r30, r20
    8a02:	aa 27       	eor	r26, r26
    8a04:	28 30       	cpi	r18, 0x08	; 8
    8a06:	51 f1       	breq	.+84     	; 0x8a5c <__ultoa_invert+0x5c>
    8a08:	20 31       	cpi	r18, 0x10	; 16
    8a0a:	81 f1       	breq	.+96     	; 0x8a6c <__ultoa_invert+0x6c>
    8a0c:	e8 94       	clt
    8a0e:	6f 93       	push	r22
    8a10:	6e 7f       	andi	r22, 0xFE	; 254
    8a12:	6e 5f       	subi	r22, 0xFE	; 254
    8a14:	7f 4f       	sbci	r23, 0xFF	; 255
    8a16:	8f 4f       	sbci	r24, 0xFF	; 255
    8a18:	9f 4f       	sbci	r25, 0xFF	; 255
    8a1a:	af 4f       	sbci	r26, 0xFF	; 255
    8a1c:	b1 e0       	ldi	r27, 0x01	; 1
    8a1e:	3e d0       	rcall	.+124    	; 0x8a9c <__ultoa_invert+0x9c>
    8a20:	b4 e0       	ldi	r27, 0x04	; 4
    8a22:	3c d0       	rcall	.+120    	; 0x8a9c <__ultoa_invert+0x9c>
    8a24:	67 0f       	add	r22, r23
    8a26:	78 1f       	adc	r23, r24
    8a28:	89 1f       	adc	r24, r25
    8a2a:	9a 1f       	adc	r25, r26
    8a2c:	a1 1d       	adc	r26, r1
    8a2e:	68 0f       	add	r22, r24
    8a30:	79 1f       	adc	r23, r25
    8a32:	8a 1f       	adc	r24, r26
    8a34:	91 1d       	adc	r25, r1
    8a36:	a1 1d       	adc	r26, r1
    8a38:	6a 0f       	add	r22, r26
    8a3a:	71 1d       	adc	r23, r1
    8a3c:	81 1d       	adc	r24, r1
    8a3e:	91 1d       	adc	r25, r1
    8a40:	a1 1d       	adc	r26, r1
    8a42:	20 d0       	rcall	.+64     	; 0x8a84 <__ultoa_invert+0x84>
    8a44:	09 f4       	brne	.+2      	; 0x8a48 <__ultoa_invert+0x48>
    8a46:	68 94       	set
    8a48:	3f 91       	pop	r19
    8a4a:	2a e0       	ldi	r18, 0x0A	; 10
    8a4c:	26 9f       	mul	r18, r22
    8a4e:	11 24       	eor	r1, r1
    8a50:	30 19       	sub	r19, r0
    8a52:	30 5d       	subi	r19, 0xD0	; 208
    8a54:	31 93       	st	Z+, r19
    8a56:	de f6       	brtc	.-74     	; 0x8a0e <__ultoa_invert+0xe>
    8a58:	cf 01       	movw	r24, r30
    8a5a:	08 95       	ret
    8a5c:	46 2f       	mov	r20, r22
    8a5e:	47 70       	andi	r20, 0x07	; 7
    8a60:	40 5d       	subi	r20, 0xD0	; 208
    8a62:	41 93       	st	Z+, r20
    8a64:	b3 e0       	ldi	r27, 0x03	; 3
    8a66:	0f d0       	rcall	.+30     	; 0x8a86 <__ultoa_invert+0x86>
    8a68:	c9 f7       	brne	.-14     	; 0x8a5c <__ultoa_invert+0x5c>
    8a6a:	f6 cf       	rjmp	.-20     	; 0x8a58 <__ultoa_invert+0x58>
    8a6c:	46 2f       	mov	r20, r22
    8a6e:	4f 70       	andi	r20, 0x0F	; 15
    8a70:	40 5d       	subi	r20, 0xD0	; 208
    8a72:	4a 33       	cpi	r20, 0x3A	; 58
    8a74:	18 f0       	brcs	.+6      	; 0x8a7c <__ultoa_invert+0x7c>
    8a76:	49 5d       	subi	r20, 0xD9	; 217
    8a78:	31 fd       	sbrc	r19, 1
    8a7a:	40 52       	subi	r20, 0x20	; 32
    8a7c:	41 93       	st	Z+, r20
    8a7e:	02 d0       	rcall	.+4      	; 0x8a84 <__ultoa_invert+0x84>
    8a80:	a9 f7       	brne	.-22     	; 0x8a6c <__ultoa_invert+0x6c>
    8a82:	ea cf       	rjmp	.-44     	; 0x8a58 <__ultoa_invert+0x58>
    8a84:	b4 e0       	ldi	r27, 0x04	; 4
    8a86:	a6 95       	lsr	r26
    8a88:	97 95       	ror	r25
    8a8a:	87 95       	ror	r24
    8a8c:	77 95       	ror	r23
    8a8e:	67 95       	ror	r22
    8a90:	ba 95       	dec	r27
    8a92:	c9 f7       	brne	.-14     	; 0x8a86 <__ultoa_invert+0x86>
    8a94:	00 97       	sbiw	r24, 0x00	; 0
    8a96:	61 05       	cpc	r22, r1
    8a98:	71 05       	cpc	r23, r1
    8a9a:	08 95       	ret
    8a9c:	9b 01       	movw	r18, r22
    8a9e:	ac 01       	movw	r20, r24
    8aa0:	0a 2e       	mov	r0, r26
    8aa2:	06 94       	lsr	r0
    8aa4:	57 95       	ror	r21
    8aa6:	47 95       	ror	r20
    8aa8:	37 95       	ror	r19
    8aaa:	27 95       	ror	r18
    8aac:	ba 95       	dec	r27
    8aae:	c9 f7       	brne	.-14     	; 0x8aa2 <__ultoa_invert+0xa2>
    8ab0:	62 0f       	add	r22, r18
    8ab2:	73 1f       	adc	r23, r19
    8ab4:	84 1f       	adc	r24, r20
    8ab6:	95 1f       	adc	r25, r21
    8ab8:	a0 1d       	adc	r26, r0
    8aba:	08 95       	ret

00008abc <__cmpsf2>:
    8abc:	0e 94 63 45 	call	0x8ac6	; 0x8ac6 <__fp_cmp>
    8ac0:	08 f4       	brcc	.+2      	; 0x8ac4 <__cmpsf2+0x8>
    8ac2:	81 e0       	ldi	r24, 0x01	; 1
    8ac4:	08 95       	ret

00008ac6 <__fp_cmp>:
    8ac6:	99 0f       	add	r25, r25
    8ac8:	00 08       	sbc	r0, r0
    8aca:	55 0f       	add	r21, r21
    8acc:	aa 0b       	sbc	r26, r26
    8ace:	e0 e8       	ldi	r30, 0x80	; 128
    8ad0:	fe ef       	ldi	r31, 0xFE	; 254
    8ad2:	16 16       	cp	r1, r22
    8ad4:	17 06       	cpc	r1, r23
    8ad6:	e8 07       	cpc	r30, r24
    8ad8:	f9 07       	cpc	r31, r25
    8ada:	c0 f0       	brcs	.+48     	; 0x8b0c <__fp_cmp+0x46>
    8adc:	12 16       	cp	r1, r18
    8ade:	13 06       	cpc	r1, r19
    8ae0:	e4 07       	cpc	r30, r20
    8ae2:	f5 07       	cpc	r31, r21
    8ae4:	98 f0       	brcs	.+38     	; 0x8b0c <__fp_cmp+0x46>
    8ae6:	62 1b       	sub	r22, r18
    8ae8:	73 0b       	sbc	r23, r19
    8aea:	84 0b       	sbc	r24, r20
    8aec:	95 0b       	sbc	r25, r21
    8aee:	39 f4       	brne	.+14     	; 0x8afe <__fp_cmp+0x38>
    8af0:	0a 26       	eor	r0, r26
    8af2:	61 f0       	breq	.+24     	; 0x8b0c <__fp_cmp+0x46>
    8af4:	23 2b       	or	r18, r19
    8af6:	24 2b       	or	r18, r20
    8af8:	25 2b       	or	r18, r21
    8afa:	21 f4       	brne	.+8      	; 0x8b04 <__fp_cmp+0x3e>
    8afc:	08 95       	ret
    8afe:	0a 26       	eor	r0, r26
    8b00:	09 f4       	brne	.+2      	; 0x8b04 <__fp_cmp+0x3e>
    8b02:	a1 40       	sbci	r26, 0x01	; 1
    8b04:	a6 95       	lsr	r26
    8b06:	8f ef       	ldi	r24, 0xFF	; 255
    8b08:	81 1d       	adc	r24, r1
    8b0a:	81 1d       	adc	r24, r1
    8b0c:	08 95       	ret

00008b0e <__ctype_isfalse>:
    8b0e:	99 27       	eor	r25, r25
    8b10:	88 27       	eor	r24, r24

00008b12 <__ctype_istrue>:
    8b12:	08 95       	ret

00008b14 <_exit>:
    8b14:	f8 94       	cli

00008b16 <__stop_program>:
    8b16:	ff cf       	rjmp	.-2      	; 0x8b16 <__stop_program>
