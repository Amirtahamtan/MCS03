
MCS03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006ce  00802000  00008ae2  00008b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f5  008026ce  008026ce  00009244  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000092a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000092e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008117  00000000  00000000  00009400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037c4  00000000  00000000  00011517  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f37  00000000  00000000  00014cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  00018c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000406f  00000000  00000000  000192ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001996  00000000  00000000  0001d35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0001ecf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__ctors_end>
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_16>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      50:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_20>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 62 3c 	jmp	0x78c4	; 0x78c4 <__vector_25>
      68:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      6c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      70:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      7c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      80:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      84:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      8c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      90:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      94:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      98:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      fc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     100:	0c 94 b6 36 	jmp	0x6d6c	; 0x6d6c <__vector_64>
     104:	0c 94 5c 39 	jmp	0x72b8	; 0x72b8 <__vector_65>
     108:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     10c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     110:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     114:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     118:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     11c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     120:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     124:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     128:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     12c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     130:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     134:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     138:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     13c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     140:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     144:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     148:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     14c:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__vector_83>
     150:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     154:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     158:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     15c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     160:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     164:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     168:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     16c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     170:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     174:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     178:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     17c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     180:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <__vector_96>
     184:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     188:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     18c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     190:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     194:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     198:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     19c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_118>
     1dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

000001f4 <__trampolines_end>:
     1f4:	4e 41       	sbci	r20, 0x1E	; 30
     1f6:	4e 49       	Address 0x000001f6 is out of bounds.
.word	0xffff	; ????

000001f7 <pstr_inity>:
     1f7:	49 4e 49 54 59                                      INITY

000001fc <pstr_inf>:
     1fc:	49 4e 46                                            INF

000001ff <pwr_m10>:
     1ff:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     20f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000217 <pwr_p10>:
     217:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     227:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000230 <__ctors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df e3       	ldi	r29, 0x3F	; 63
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60
     240:	18 be       	out	0x38, r1	; 56
     242:	19 be       	out	0x39, r1	; 57
     244:	1a be       	out	0x3a, r1	; 58
     246:	1b be       	out	0x3b, r1	; 59

00000248 <__do_copy_data>:
     248:	16 e2       	ldi	r17, 0x26	; 38
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	e2 ee       	ldi	r30, 0xE2	; 226
     250:	fa e8       	ldi	r31, 0x8A	; 138
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	ae 3c       	cpi	r26, 0xCE	; 206
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>
     262:	1b be       	out	0x3b, r1	; 59

00000264 <__do_clear_bss>:
     264:	29 e2       	ldi	r18, 0x29	; 41
     266:	ae ec       	ldi	r26, 0xCE	; 206
     268:	b6 e2       	ldi	r27, 0x26	; 38
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	a3 3c       	cpi	r26, 0xC3	; 195
     270:	b2 07       	cpc	r27, r18
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>
     274:	0e 94 9f 3c 	call	0x793e	; 0x793e <main>
     278:	0c 94 6f 45 	jmp	0x8ade	; 0x8ade <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <_Z10ports_initv>:
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
     280:	e0 e0       	ldi	r30, 0x00	; 0
     282:	f6 e0       	ldi	r31, 0x06	; 6
     284:	14 82       	std	Z+4, r1	; 0x04
     286:	80 ec       	ldi	r24, 0xC0	; 192
     288:	80 83       	st	Z, r24
     28a:	10 8a       	std	Z+16, r1	; 0x10
     28c:	11 8a       	std	Z+17, r1	; 0x11
     28e:	12 8a       	std	Z+18, r1	; 0x12
     290:	13 8a       	std	Z+19, r1	; 0x13
     292:	14 8a       	std	Z+20, r1	; 0x14
     294:	15 8a       	std	Z+21, r1	; 0x15
     296:	16 8a       	std	Z+22, r1	; 0x16
     298:	17 8a       	std	Z+23, r1	; 0x17
     29a:	81 85       	ldd	r24, Z+9	; 0x09
     29c:	80 7f       	andi	r24, 0xF0	; 240
     29e:	81 87       	std	Z+9, r24	; 0x09
     2a0:	12 86       	std	Z+10, r1	; 0x0a
     2a2:	13 86       	std	Z+11, r1	; 0x0b
     2a4:	e0 e2       	ldi	r30, 0x20	; 32
     2a6:	f6 e0       	ldi	r31, 0x06	; 6
     2a8:	14 82       	std	Z+4, r1	; 0x04
     2aa:	80 e9       	ldi	r24, 0x90	; 144
     2ac:	80 83       	st	Z, r24
     2ae:	10 8a       	std	Z+16, r1	; 0x10
     2b0:	11 8a       	std	Z+17, r1	; 0x11
     2b2:	12 8a       	std	Z+18, r1	; 0x12
     2b4:	13 8a       	std	Z+19, r1	; 0x13
     2b6:	14 8a       	std	Z+20, r1	; 0x14
     2b8:	15 8a       	std	Z+21, r1	; 0x15
     2ba:	16 8a       	std	Z+22, r1	; 0x16
     2bc:	17 8a       	std	Z+23, r1	; 0x17
     2be:	81 85       	ldd	r24, Z+9	; 0x09
     2c0:	80 7f       	andi	r24, 0xF0	; 240
     2c2:	81 87       	std	Z+9, r24	; 0x09
     2c4:	12 86       	std	Z+10, r1	; 0x0a
     2c6:	13 86       	std	Z+11, r1	; 0x0b
     2c8:	e0 e4       	ldi	r30, 0x40	; 64
     2ca:	f6 e0       	ldi	r31, 0x06	; 6
     2cc:	88 e8       	ldi	r24, 0x88	; 136
     2ce:	84 83       	std	Z+4, r24	; 0x04
     2d0:	98 e0       	ldi	r25, 0x08	; 8
     2d2:	90 83       	st	Z, r25
     2d4:	10 8a       	std	Z+16, r1	; 0x10
     2d6:	11 8a       	std	Z+17, r1	; 0x11
     2d8:	12 8a       	std	Z+18, r1	; 0x12
     2da:	13 8a       	std	Z+19, r1	; 0x13
     2dc:	14 8a       	std	Z+20, r1	; 0x14
     2de:	15 8a       	std	Z+21, r1	; 0x15
     2e0:	16 8a       	std	Z+22, r1	; 0x16
     2e2:	17 8a       	std	Z+23, r1	; 0x17
     2e4:	81 85       	ldd	r24, Z+9	; 0x09
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	81 87       	std	Z+9, r24	; 0x09
     2ea:	12 86       	std	Z+10, r1	; 0x0a
     2ec:	13 86       	std	Z+11, r1	; 0x0b
     2ee:	e0 e6       	ldi	r30, 0x60	; 96
     2f0:	f6 e0       	ldi	r31, 0x06	; 6
     2f2:	14 82       	std	Z+4, r1	; 0x04
     2f4:	10 82       	st	Z, r1
     2f6:	10 8a       	std	Z+16, r1	; 0x10
     2f8:	11 8a       	std	Z+17, r1	; 0x11
     2fa:	12 8a       	std	Z+18, r1	; 0x12
     2fc:	13 8a       	std	Z+19, r1	; 0x13
     2fe:	14 8a       	std	Z+20, r1	; 0x14
     300:	15 8a       	std	Z+21, r1	; 0x15
     302:	16 8a       	std	Z+22, r1	; 0x16
     304:	17 8a       	std	Z+23, r1	; 0x17
     306:	81 85       	ldd	r24, Z+9	; 0x09
     308:	80 7f       	andi	r24, 0xF0	; 240
     30a:	85 60       	ori	r24, 0x05	; 5
     30c:	81 87       	std	Z+9, r24	; 0x09
     30e:	92 87       	std	Z+10, r25	; 0x0a
     310:	86 e0       	ldi	r24, 0x06	; 6
     312:	83 87       	std	Z+11, r24	; 0x0b
     314:	e0 e8       	ldi	r30, 0x80	; 128
     316:	f6 e0       	ldi	r31, 0x06	; 6
     318:	14 82       	std	Z+4, r1	; 0x04
     31a:	86 eb       	ldi	r24, 0xB6	; 182
     31c:	80 83       	st	Z, r24
     31e:	10 8a       	std	Z+16, r1	; 0x10
     320:	11 8a       	std	Z+17, r1	; 0x11
     322:	12 8a       	std	Z+18, r1	; 0x12
     324:	13 8a       	std	Z+19, r1	; 0x13
     326:	14 8a       	std	Z+20, r1	; 0x14
     328:	15 8a       	std	Z+21, r1	; 0x15
     32a:	16 8a       	std	Z+22, r1	; 0x16
     32c:	17 8a       	std	Z+23, r1	; 0x17
     32e:	81 85       	ldd	r24, Z+9	; 0x09
     330:	80 7f       	andi	r24, 0xF0	; 240
     332:	81 87       	std	Z+9, r24	; 0x09
     334:	12 86       	std	Z+10, r1	; 0x0a
     336:	13 86       	std	Z+11, r1	; 0x0b
     338:	e0 ea       	ldi	r30, 0xA0	; 160
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	14 82       	std	Z+4, r1	; 0x04
     33e:	81 e4       	ldi	r24, 0x41	; 65
     340:	80 83       	st	Z, r24
     342:	10 8a       	std	Z+16, r1	; 0x10
     344:	11 8a       	std	Z+17, r1	; 0x11
     346:	12 8a       	std	Z+18, r1	; 0x12
     348:	13 8a       	std	Z+19, r1	; 0x13
     34a:	14 8a       	std	Z+20, r1	; 0x14
     34c:	15 8a       	std	Z+21, r1	; 0x15
     34e:	16 8a       	std	Z+22, r1	; 0x16
     350:	17 8a       	std	Z+23, r1	; 0x17
     352:	81 85       	ldd	r24, Z+9	; 0x09
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	81 87       	std	Z+9, r24	; 0x09
     358:	12 86       	std	Z+10, r1	; 0x0a
     35a:	13 86       	std	Z+11, r1	; 0x0b
     35c:	e0 ee       	ldi	r30, 0xE0	; 224
     35e:	f6 e0       	ldi	r31, 0x06	; 6
     360:	14 82       	std	Z+4, r1	; 0x04
     362:	8c ef       	ldi	r24, 0xFC	; 252
     364:	80 83       	st	Z, r24
     366:	10 8a       	std	Z+16, r1	; 0x10
     368:	11 8a       	std	Z+17, r1	; 0x11
     36a:	12 8a       	std	Z+18, r1	; 0x12
     36c:	13 8a       	std	Z+19, r1	; 0x13
     36e:	14 8a       	std	Z+20, r1	; 0x14
     370:	15 8a       	std	Z+21, r1	; 0x15
     372:	16 8a       	std	Z+22, r1	; 0x16
     374:	17 8a       	std	Z+23, r1	; 0x17
     376:	81 85       	ldd	r24, Z+9	; 0x09
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	81 60       	ori	r24, 0x01	; 1
     37c:	81 87       	std	Z+9, r24	; 0x09
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	82 87       	std	Z+10, r24	; 0x0a
     382:	13 86       	std	Z+11, r1	; 0x0b
     384:	e0 e0       	ldi	r30, 0x00	; 0
     386:	f7 e0       	ldi	r31, 0x07	; 7
     388:	14 82       	std	Z+4, r1	; 0x04
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	80 83       	st	Z, r24
     38e:	10 8a       	std	Z+16, r1	; 0x10
     390:	11 8a       	std	Z+17, r1	; 0x11
     392:	12 8a       	std	Z+18, r1	; 0x12
     394:	13 8a       	std	Z+19, r1	; 0x13
     396:	14 8a       	std	Z+20, r1	; 0x14
     398:	15 8a       	std	Z+21, r1	; 0x15
     39a:	16 8a       	std	Z+22, r1	; 0x16
     39c:	17 8a       	std	Z+23, r1	; 0x17
     39e:	81 85       	ldd	r24, Z+9	; 0x09
     3a0:	80 7f       	andi	r24, 0xF0	; 240
     3a2:	81 87       	std	Z+9, r24	; 0x09
     3a4:	12 86       	std	Z+10, r1	; 0x0a
     3a6:	13 86       	std	Z+11, r1	; 0x0b
     3a8:	e0 e2       	ldi	r30, 0x20	; 32
     3aa:	f7 e0       	ldi	r31, 0x07	; 7
     3ac:	14 82       	std	Z+4, r1	; 0x04
     3ae:	8f e3       	ldi	r24, 0x3F	; 63
     3b0:	80 83       	st	Z, r24
     3b2:	10 8a       	std	Z+16, r1	; 0x10
     3b4:	11 8a       	std	Z+17, r1	; 0x11
     3b6:	12 8a       	std	Z+18, r1	; 0x12
     3b8:	13 8a       	std	Z+19, r1	; 0x13
     3ba:	14 8a       	std	Z+20, r1	; 0x14
     3bc:	15 8a       	std	Z+21, r1	; 0x15
     3be:	16 8a       	std	Z+22, r1	; 0x16
     3c0:	17 8a       	std	Z+23, r1	; 0x17
     3c2:	81 85       	ldd	r24, Z+9	; 0x09
     3c4:	80 7f       	andi	r24, 0xF0	; 240
     3c6:	81 87       	std	Z+9, r24	; 0x09
     3c8:	12 86       	std	Z+10, r1	; 0x0a
     3ca:	13 86       	std	Z+11, r1	; 0x0b
     3cc:	e0 ec       	ldi	r30, 0xC0	; 192
     3ce:	f7 e0       	ldi	r31, 0x07	; 7
     3d0:	14 82       	std	Z+4, r1	; 0x04
     3d2:	10 82       	st	Z, r1
     3d4:	10 8a       	std	Z+16, r1	; 0x10
     3d6:	11 8a       	std	Z+17, r1	; 0x11
     3d8:	12 8a       	std	Z+18, r1	; 0x12
     3da:	13 8a       	std	Z+19, r1	; 0x13
     3dc:	81 85       	ldd	r24, Z+9	; 0x09
     3de:	80 7f       	andi	r24, 0xF0	; 240
     3e0:	81 87       	std	Z+9, r24	; 0x09
     3e2:	12 86       	std	Z+10, r1	; 0x0a
     3e4:	13 86       	std	Z+11, r1	; 0x0b
     3e6:	e0 ee       	ldi	r30, 0xE0	; 224
     3e8:	f7 e0       	ldi	r31, 0x07	; 7
     3ea:	14 82       	std	Z+4, r1	; 0x04
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	80 83       	st	Z, r24
     3f0:	10 8a       	std	Z+16, r1	; 0x10
     3f2:	11 8a       	std	Z+17, r1	; 0x11
     3f4:	81 85       	ldd	r24, Z+9	; 0x09
     3f6:	80 7f       	andi	r24, 0xF0	; 240
     3f8:	81 87       	std	Z+9, r24	; 0x09
     3fa:	12 86       	std	Z+10, r1	; 0x0a
     3fc:	13 86       	std	Z+11, r1	; 0x0b
     3fe:	08 95       	ret

00000400 <_Z9spif_initv>:
     400:	e0 ec       	ldi	r30, 0xC0	; 192
     402:	fb e0       	ldi	r31, 0x0B	; 11
     404:	80 e4       	ldi	r24, 0x40	; 64
     406:	80 83       	st	Z, r24
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	81 83       	std	Z+1, r24	; 0x01
     40c:	08 95       	ret

0000040e <__vector_118>:
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	0f 92       	push	r0
     416:	11 24       	eor	r1, r1
     418:	08 b6       	in	r0, 0x38	; 56
     41a:	0f 92       	push	r0
     41c:	18 be       	out	0x38, r1	; 56
     41e:	09 b6       	in	r0, 0x39	; 57
     420:	0f 92       	push	r0
     422:	19 be       	out	0x39, r1	; 57
     424:	0a b6       	in	r0, 0x3a	; 58
     426:	0f 92       	push	r0
     428:	1a be       	out	0x3a, r1	; 58
     42a:	0b b6       	in	r0, 0x3b	; 59
     42c:	0f 92       	push	r0
     42e:	1b be       	out	0x3b, r1	; 59
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	8f 93       	push	r24
     436:	9f 93       	push	r25
     438:	af 93       	push	r26
     43a:	bf 93       	push	r27
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
     444:	e0 ec       	ldi	r30, 0xC0	; 192
     446:	fb e0       	ldi	r31, 0x0B	; 11
     448:	82 81       	ldd	r24, Z+2	; 0x02
     44a:	93 81       	ldd	r25, Z+3	; 0x03
     44c:	80 91 8c 28 	lds	r24, 0x288C	; 0x80288c <Responsing>
     450:	81 11       	cpse	r24, r1
     452:	2b c0       	rjmp	.+86     	; 0x4aa <__vector_118+0x9c>
     454:	9d 30       	cpi	r25, 0x0D	; 13
     456:	79 f0       	breq	.+30     	; 0x476 <__vector_118+0x68>
     458:	99 23       	and	r25, r25
     45a:	f1 f1       	breq	.+124    	; 0x4d8 <__vector_118+0xca>
     45c:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <indexBR>
     460:	84 36       	cpi	r24, 0x64	; 100
     462:	d0 f5       	brcc	.+116    	; 0x4d8 <__vector_118+0xca>
     464:	e8 2f       	mov	r30, r24
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	ee 50       	subi	r30, 0x0E	; 14
     46a:	f7 4d       	sbci	r31, 0xD7	; 215
     46c:	90 83       	st	Z, r25
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <indexBR>
     474:	31 c0       	rjmp	.+98     	; 0x4d8 <__vector_118+0xca>
     476:	ce e8       	ldi	r28, 0x8E	; 142
     478:	d8 e2       	ldi	r29, 0x28	; 40
     47a:	a2 ef       	ldi	r26, 0xF2	; 242
     47c:	b8 e2       	ldi	r27, 0x28	; 40
     47e:	86 e5       	ldi	r24, 0x56	; 86
     480:	99 e2       	ldi	r25, 0x29	; 41
     482:	fd 01       	movw	r30, r26
     484:	20 81       	ld	r18, Z
     486:	29 93       	st	Y+, r18
     488:	11 92       	st	Z+, r1
     48a:	8e 17       	cp	r24, r30
     48c:	9f 07       	cpc	r25, r31
     48e:	d1 f7       	brne	.-12     	; 0x484 <__vector_118+0x76>
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	20 93 8b 28 	sts	0x288B, r18	; 0x80288b <cmdIsReady>
     496:	1d 92       	st	X+, r1
     498:	8a 17       	cp	r24, r26
     49a:	9b 07       	cpc	r25, r27
     49c:	e1 f7       	brne	.-8      	; 0x496 <__vector_118+0x88>
     49e:	84 e6       	ldi	r24, 0x64	; 100
     4a0:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <h>
     4a4:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <indexBR>
     4a8:	17 c0       	rjmp	.+46     	; 0x4d8 <__vector_118+0xca>
     4aa:	80 91 56 29 	lds	r24, 0x2956	; 0x802956 <indexBS>
     4ae:	84 36       	cpi	r24, 0x64	; 100
     4b0:	28 f4       	brcc	.+10     	; 0x4bc <__vector_118+0xae>
     4b2:	e8 2f       	mov	r30, r24
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	e9 5a       	subi	r30, 0xA9	; 169
     4b8:	f6 4d       	sbci	r31, 0xD6	; 214
     4ba:	30 81       	ld	r19, Z
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	80 93 56 29 	sts	0x2956, r24	; 0x802956 <indexBS>
     4c2:	85 36       	cpi	r24, 0x65	; 101
     4c4:	49 f4       	brne	.+18     	; 0x4d8 <__vector_118+0xca>
     4c6:	e0 ea       	ldi	r30, 0xA0	; 160
     4c8:	f6 e0       	ldi	r31, 0x06	; 6
     4ca:	84 81       	ldd	r24, Z+4	; 0x04
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	84 83       	std	Z+4, r24	; 0x04
     4d0:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <Responsing>
     4d4:	10 92 56 29 	sts	0x2956, r1	; 0x802956 <indexBS>
     4d8:	30 93 c3 0b 	sts	0x0BC3, r19	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	bf 91       	pop	r27
     4e6:	af 91       	pop	r26
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0b be       	out	0x3b, r0	; 59
     4f4:	0f 90       	pop	r0
     4f6:	0a be       	out	0x3a, r0	; 58
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <_Z9spie_initv>:
     50a:	e0 ec       	ldi	r30, 0xC0	; 192
     50c:	fa e0       	ldi	r31, 0x0A	; 10
     50e:	83 e5       	ldi	r24, 0x53	; 83
     510:	80 83       	st	Z, r24
     512:	11 82       	std	Z+1, r1	; 0x01
     514:	08 95       	ret

00000516 <_Z17spie_master_tx_rxh>:
     516:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     51a:	e0 ec       	ldi	r30, 0xC0	; 192
     51c:	fa e0       	ldi	r31, 0x0A	; 10
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	88 23       	and	r24, r24
     522:	ec f7       	brge	.-6      	; 0x51e <_Z17spie_master_tx_rxh+0x8>
     524:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     528:	08 95       	ret

0000052a <_Z4ltoblPc>:
     52a:	fa 01       	movw	r30, r20
     52c:	60 83       	st	Z, r22
     52e:	71 83       	std	Z+1, r23	; 0x01
     530:	82 83       	std	Z+2, r24	; 0x02
     532:	93 83       	std	Z+3, r25	; 0x03
     534:	08 95       	ret

00000536 <_Z4btolPc>:
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	fc 01       	movw	r30, r24
     53c:	03 81       	ldd	r16, Z+3	; 0x03
     53e:	10 e0       	ldi	r17, 0x00	; 0
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	30 2f       	mov	r19, r16
     546:	22 27       	eor	r18, r18
     548:	11 27       	eor	r17, r17
     54a:	00 27       	eor	r16, r16
     54c:	42 81       	ldd	r20, Z+2	; 0x02
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	ba 01       	movw	r22, r20
     556:	55 27       	eor	r21, r21
     558:	44 27       	eor	r20, r20
     55a:	04 0f       	add	r16, r20
     55c:	15 1f       	adc	r17, r21
     55e:	26 1f       	adc	r18, r22
     560:	37 1f       	adc	r19, r23
     562:	41 81       	ldd	r20, Z+1	; 0x01
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	76 2f       	mov	r23, r22
     56c:	65 2f       	mov	r22, r21
     56e:	54 2f       	mov	r21, r20
     570:	44 27       	eor	r20, r20
     572:	d9 01       	movw	r26, r18
     574:	c8 01       	movw	r24, r16
     576:	84 0f       	add	r24, r20
     578:	95 1f       	adc	r25, r21
     57a:	a6 1f       	adc	r26, r22
     57c:	b7 1f       	adc	r27, r23
     57e:	20 81       	ld	r18, Z
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	62 0f       	add	r22, r18
     586:	71 1d       	adc	r23, r1
     588:	81 1d       	adc	r24, r1
     58a:	91 1d       	adc	r25, r1
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <_Z10ReadConfigv>:
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <_Z10ReadConfigv+0x16>
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <fk>
     5b2:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <fk+0x1>
     5b6:	10 92 87 28 	sts	0x2887, r1	; 0x802887 <fk+0x2>
     5ba:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <fk+0x3>
     5be:	10 92 83 28 	sts	0x2883, r1	; 0x802883 <ft>
     5c2:	10 92 84 28 	sts	0x2884, r1	; 0x802884 <ft+0x1>
     5c6:	10 92 82 28 	sts	0x2882, r1	; 0x802882 <fadd1>
     5ca:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <fadd2>
     5ce:	e0 e8       	ldi	r30, 0x80	; 128
     5d0:	f6 e0       	ldi	r31, 0x06	; 6
     5d2:	84 81       	ldd	r24, Z+4	; 0x04
     5d4:	80 61       	ori	r24, 0x10	; 16
     5d6:	84 83       	std	Z+4, r24	; 0x04
     5d8:	84 81       	ldd	r24, Z+4	; 0x04
     5da:	8f 7e       	andi	r24, 0xEF	; 239
     5dc:	84 83       	std	Z+4, r24	; 0x04
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     5e4:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
     5e8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     5ec:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
     5f0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     5fa:	0d eb       	ldi	r16, 0xBD	; 189
     5fc:	17 e2       	ldi	r17, 0x27	; 39
     5fe:	e1 2c       	mov	r14, r1
     600:	f1 2c       	mov	r15, r1
     602:	0f 2e       	mov	r0, r31
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	af 2e       	mov	r10, r31
     608:	f0 e2       	ldi	r31, 0x20	; 32
     60a:	bf 2e       	mov	r11, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	0f 2e       	mov	r0, r31
     610:	f2 e2       	ldi	r31, 0x22	; 34
     612:	cf 2e       	mov	r12, r31
     614:	f0 e2       	ldi	r31, 0x20	; 32
     616:	df 2e       	mov	r13, r31
     618:	f0 2d       	mov	r31, r0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     620:	8a 83       	std	Y+2, r24	; 0x02
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	2a 81       	ldd	r18, Y+2	; 0x02
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	32 2f       	mov	r19, r18
     630:	22 27       	eor	r18, r18
     632:	a9 01       	movw	r20, r18
     634:	48 0f       	add	r20, r24
     636:	51 1d       	adc	r21, r1
     638:	f8 01       	movw	r30, r16
     63a:	40 83       	st	Z, r20
     63c:	51 83       	std	Z+1, r21	; 0x01
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     644:	f8 01       	movw	r30, r16
     646:	82 83       	std	Z+2, r24	; 0x02
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     64e:	f8 01       	movw	r30, r16
     650:	83 83       	std	Z+3, r24	; 0x03
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     658:	f8 01       	movw	r30, r16
     65a:	84 83       	std	Z+4, r24	; 0x04
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     662:	8c 83       	std	Y+4, r24	; 0x04
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     66a:	8b 83       	std	Y+3, r24	; 0x03
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     672:	8a 83       	std	Y+2, r24	; 0x02
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     67a:	89 83       	std	Y+1, r24	; 0x01
     67c:	ce 01       	movw	r24, r28
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     684:	f8 01       	movw	r30, r16
     686:	65 83       	std	Z+5, r22	; 0x05
     688:	76 83       	std	Z+6, r23	; 0x06
     68a:	87 83       	std	Z+7, r24	; 0x07
     68c:	90 87       	std	Z+8, r25	; 0x08
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     694:	8c 83       	std	Y+4, r24	; 0x04
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     69c:	8b 83       	std	Y+3, r24	; 0x03
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6a4:	8a 83       	std	Y+2, r24	; 0x02
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	ce 01       	movw	r24, r28
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     6b6:	f8 01       	movw	r30, r16
     6b8:	61 87       	std	Z+9, r22	; 0x09
     6ba:	72 87       	std	Z+10, r23	; 0x0a
     6bc:	83 87       	std	Z+11, r24	; 0x0b
     6be:	94 87       	std	Z+12, r25	; 0x0c
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6c6:	8c 83       	std	Y+4, r24	; 0x04
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6ce:	8b 83       	std	Y+3, r24	; 0x03
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6d6:	8a 83       	std	Y+2, r24	; 0x02
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     6e8:	f8 01       	movw	r30, r16
     6ea:	65 87       	std	Z+13, r22	; 0x0d
     6ec:	76 87       	std	Z+14, r23	; 0x0e
     6ee:	87 87       	std	Z+15, r24	; 0x0f
     6f0:	90 8b       	std	Z+16, r25	; 0x10
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     6f8:	8c 83       	std	Y+4, r24	; 0x04
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     700:	8b 83       	std	Y+3, r24	; 0x03
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     708:	8a 83       	std	Y+2, r24	; 0x02
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	ce 01       	movw	r24, r28
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     71a:	f8 01       	movw	r30, r16
     71c:	61 8b       	std	Z+17, r22	; 0x11
     71e:	72 8b       	std	Z+18, r23	; 0x12
     720:	83 8b       	std	Z+19, r24	; 0x13
     722:	94 8b       	std	Z+20, r25	; 0x14
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     72a:	8c 83       	std	Y+4, r24	; 0x04
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     732:	8b 83       	std	Y+3, r24	; 0x03
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     73a:	8a 83       	std	Y+2, r24	; 0x02
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	ce 01       	movw	r24, r28
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     74c:	f8 01       	movw	r30, r16
     74e:	65 8b       	std	Z+21, r22	; 0x15
     750:	76 8b       	std	Z+22, r23	; 0x16
     752:	87 8b       	std	Z+23, r24	; 0x17
     754:	90 8f       	std	Z+24, r25	; 0x18
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     75c:	8a 83       	std	Y+2, r24	; 0x02
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	2a 81       	ldd	r18, Y+2	; 0x02
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	32 2f       	mov	r19, r18
     76c:	22 27       	eor	r18, r18
     76e:	a9 01       	movw	r20, r18
     770:	48 0f       	add	r20, r24
     772:	51 1d       	adc	r21, r1
     774:	f8 01       	movw	r30, r16
     776:	41 8f       	std	Z+25, r20	; 0x19
     778:	52 8f       	std	Z+26, r21	; 0x1a
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     780:	f8 01       	movw	r30, r16
     782:	83 8f       	std	Z+27, r24	; 0x1b
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     78a:	f8 01       	movw	r30, r16
     78c:	84 8f       	std	Z+28, r24	; 0x1c
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     794:	8c 83       	std	Y+4, r24	; 0x04
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7a4:	8a 83       	std	Y+2, r24	; 0x02
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     7b6:	f8 01       	movw	r30, r16
     7b8:	65 8f       	std	Z+29, r22	; 0x1d
     7ba:	76 8f       	std	Z+30, r23	; 0x1e
     7bc:	87 8f       	std	Z+31, r24	; 0x1f
     7be:	90 a3       	std	Z+32, r25	; 0x20
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7c6:	8c 83       	std	Y+4, r24	; 0x04
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7d6:	8a 83       	std	Y+2, r24	; 0x02
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     7e8:	f8 01       	movw	r30, r16
     7ea:	61 a3       	std	Z+33, r22	; 0x21
     7ec:	72 a3       	std	Z+34, r23	; 0x22
     7ee:	83 a3       	std	Z+35, r24	; 0x23
     7f0:	94 a3       	std	Z+36, r25	; 0x24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     7f8:	f8 01       	movw	r30, r16
     7fa:	85 a3       	std	Z+37, r24	; 0x25
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     802:	f8 01       	movw	r30, r16
     804:	86 a3       	std	Z+38, r24	; 0x26
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     80c:	f8 01       	movw	r30, r16
     80e:	87 a3       	std	Z+39, r24	; 0x27
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     816:	f8 01       	movw	r30, r16
     818:	80 a7       	std	Z+40, r24	; 0x28
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     820:	f8 01       	movw	r30, r16
     822:	81 a7       	std	Z+41, r24	; 0x29
     824:	1f 92       	push	r1
     826:	8f 93       	push	r24
     828:	ff 92       	push	r15
     82a:	ef 92       	push	r14
     82c:	bf 92       	push	r11
     82e:	af 92       	push	r10
     830:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     83a:	f8 01       	movw	r30, r16
     83c:	82 a7       	std	Z+42, r24	; 0x2a
     83e:	1f 92       	push	r1
     840:	8f 93       	push	r24
     842:	ff 92       	push	r15
     844:	ef 92       	push	r14
     846:	df 92       	push	r13
     848:	cf 92       	push	r12
     84a:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
     84e:	ff ef       	ldi	r31, 0xFF	; 255
     850:	ef 1a       	sub	r14, r31
     852:	ff 0a       	sbc	r15, r31
     854:	05 5d       	subi	r16, 0xD5	; 213
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	53 e0       	ldi	r21, 0x03	; 3
     85e:	e5 16       	cp	r14, r21
     860:	f1 04       	cpc	r15, r1
     862:	09 f0       	breq	.+2      	; 0x866 <_Z10ReadConfigv+0x2d4>
     864:	da ce       	rjmp	.-588    	; 0x61a <_Z10ReadConfigv+0x88>
     866:	24 96       	adiw	r28, 0x04	; 4
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	08 95       	ret

00000882 <_Z7readRamv>:
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	00 d0       	rcall	.+0      	; 0x894 <_Z7readRamv+0x12>
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	83 e4       	ldi	r24, 0x43	; 67
     89c:	90 e2       	ldi	r25, 0x20	; 32
     89e:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
     8a2:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <ContinuousRead>
     8a6:	81 11       	cpse	r24, r1
     8a8:	4f c0       	rjmp	.+158    	; 0x948 <_Z7readRamv+0xc6>
     8aa:	82 e5       	ldi	r24, 0x52	; 82
     8ac:	90 e2       	ldi	r25, 0x20	; 32
     8ae:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
     8b2:	88 ee       	ldi	r24, 0xE8	; 232
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	a0 e0       	ldi	r26, 0x00	; 0
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <fk>
     8be:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <fk+0x1>
     8c2:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <fk+0x2>
     8c6:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <fk+0x3>
     8ca:	1f 92       	push	r1
     8cc:	1f 92       	push	r1
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	8f 93       	push	r24
     8d2:	88 ee       	ldi	r24, 0xE8	; 232
     8d4:	8f 93       	push	r24
     8d6:	87 e6       	ldi	r24, 0x67	; 103
     8d8:	90 e2       	ldi	r25, 0x20	; 32
     8da:	9f 93       	push	r25
     8dc:	8f 93       	push	r24
     8de:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
     8e2:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <fk>
     8e6:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <fk+0x1>
     8ea:	a0 91 87 28 	lds	r26, 0x2887	; 0x802887 <fk+0x2>
     8ee:	b0 91 88 28 	lds	r27, 0x2888	; 0x802888 <fk+0x3>
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	aa 1f       	adc	r26, r26
     8f8:	bb 1f       	adc	r27, r27
     8fa:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <ft>
     8fe:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <ft+0x1>
     902:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <fadd1>
     906:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <fadd2>
     90a:	e0 e8       	ldi	r30, 0x80	; 128
     90c:	f6 e0       	ldi	r31, 0x06	; 6
     90e:	84 81       	ldd	r24, Z+4	; 0x04
     910:	80 61       	ori	r24, 0x10	; 16
     912:	84 83       	std	Z+4, r24	; 0x04
     914:	84 81       	ldd	r24, Z+4	; 0x04
     916:	8f 7e       	andi	r24, 0xEF	; 239
     918:	84 83       	std	Z+4, r24	; 0x04
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     920:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
     924:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     928:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
     92c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <ContinuousRead>
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     94e:	8a 83       	std	Y+2, r24	; 0x02
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     956:	89 83       	std	Y+1, r24	; 0x01
     958:	0e e3       	ldi	r16, 0x3E	; 62
     95a:	18 e2       	ldi	r17, 0x28	; 40
     95c:	2a 81       	ldd	r18, Y+2	; 0x02
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	32 2f       	mov	r19, r18
     962:	22 27       	eor	r18, r18
     964:	a9 01       	movw	r20, r18
     966:	48 0f       	add	r20, r24
     968:	51 1d       	adc	r21, r1
     96a:	f8 01       	movw	r30, r16
     96c:	40 83       	st	Z, r20
     96e:	51 83       	std	Z+1, r21	; 0x01
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     976:	f8 01       	movw	r30, r16
     978:	82 83       	std	Z+2, r24	; 0x02
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     980:	f8 01       	movw	r30, r16
     982:	83 83       	std	Z+3, r24	; 0x03
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	09 f4       	brne	.+2      	; 0x98a <_Z7readRamv+0x108>
     988:	5c c1       	rjmp	.+696    	; 0xc42 <_Z7readRamv+0x3c0>
     98a:	20 f0       	brcs	.+8      	; 0x994 <_Z7readRamv+0x112>
     98c:	8a 35       	cpi	r24, 0x5A	; 90
     98e:	09 f4       	brne	.+2      	; 0x992 <_Z7readRamv+0x110>
     990:	42 c2       	rjmp	.+1156   	; 0xe16 <_Z7readRamv+0x594>
     992:	bb c2       	rjmp	.+1398   	; 0xf0a <_Z7readRamv+0x688>
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     99a:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <CMDPRGlist+0x4>
     99e:	88 23       	and	r24, r24
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <_Z7readRamv+0x122>
     9a2:	a7 c2       	rjmp	.+1358   	; 0xef2 <_Z7readRamv+0x670>
     9a4:	8e 01       	movw	r16, r28
     9a6:	0b 5f       	subi	r16, 0xFB	; 251
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	ae 01       	movw	r20, r28
     9ac:	4f 5f       	subi	r20, 0xFF	; 255
     9ae:	5f 4f       	sbci	r21, 0xFF	; 255
     9b0:	6a 01       	movw	r12, r20
     9b2:	78 01       	movw	r14, r16
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     9ba:	f7 01       	movw	r30, r14
     9bc:	82 93       	st	-Z, r24
     9be:	7f 01       	movw	r14, r30
     9c0:	ec 15       	cp	r30, r12
     9c2:	fd 05       	cpc	r31, r13
     9c4:	b9 f7       	brne	.-18     	; 0x9b4 <_Z7readRamv+0x132>
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     9ce:	ee e3       	ldi	r30, 0x3E	; 62
     9d0:	f8 e2       	ldi	r31, 0x28	; 40
     9d2:	65 83       	std	Z+5, r22	; 0x05
     9d4:	76 83       	std	Z+6, r23	; 0x06
     9d6:	87 83       	std	Z+7, r24	; 0x07
     9d8:	90 87       	std	Z+8, r25	; 0x08
     9da:	84 81       	ldd	r24, Z+4	; 0x04
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	08 f4       	brcc	.+2      	; 0x9e2 <_Z7readRamv+0x160>
     9e0:	61 c2       	rjmp	.+1218   	; 0xea4 <_Z7readRamv+0x622>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     9e8:	f8 01       	movw	r30, r16
     9ea:	82 93       	st	-Z, r24
     9ec:	8f 01       	movw	r16, r30
     9ee:	ec 15       	cp	r30, r12
     9f0:	fd 05       	cpc	r31, r13
     9f2:	b9 f7       	brne	.-18     	; 0x9e2 <_Z7readRamv+0x160>
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     9fc:	ee e3       	ldi	r30, 0x3E	; 62
     9fe:	f8 e2       	ldi	r31, 0x28	; 40
     a00:	61 87       	std	Z+9, r22	; 0x09
     a02:	72 87       	std	Z+10, r23	; 0x0a
     a04:	83 87       	std	Z+11, r24	; 0x0b
     a06:	94 87       	std	Z+12, r25	; 0x0c
     a08:	84 81       	ldd	r24, Z+4	; 0x04
     a0a:	83 30       	cpi	r24, 0x03	; 3
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <_Z7readRamv+0x18e>
     a0e:	4e c2       	rjmp	.+1180   	; 0xeac <_Z7readRamv+0x62a>
     a10:	8e 01       	movw	r16, r28
     a12:	0b 5f       	subi	r16, 0xFB	; 251
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	ae 01       	movw	r20, r28
     a18:	4f 5f       	subi	r20, 0xFF	; 255
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	7a 01       	movw	r14, r20
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     a24:	f8 01       	movw	r30, r16
     a26:	82 93       	st	-Z, r24
     a28:	8f 01       	movw	r16, r30
     a2a:	ee 15       	cp	r30, r14
     a2c:	ff 05       	cpc	r31, r15
     a2e:	b9 f7       	brne	.-18     	; 0xa1e <_Z7readRamv+0x19c>
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     a38:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <CMDPRGlist+0xd>
     a3c:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <CMDPRGlist+0xe>
     a40:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <CMDPRGlist+0xf>
     a44:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <CMDPRGlist+0x10>
     a48:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     a4c:	88 23       	and	r24, r24
     a4e:	09 f4       	brne	.+2      	; 0xa52 <_Z7readRamv+0x1d0>
     a50:	57 c0       	rjmp	.+174    	; 0xb00 <_Z7readRamv+0x27e>
     a52:	8e 01       	movw	r16, r28
     a54:	0b 5f       	subi	r16, 0xFB	; 251
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ae 01       	movw	r20, r28
     a5a:	4f 5f       	subi	r20, 0xFF	; 255
     a5c:	5f 4f       	sbci	r21, 0xFF	; 255
     a5e:	7a 01       	movw	r14, r20
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     a66:	f8 01       	movw	r30, r16
     a68:	82 93       	st	-Z, r24
     a6a:	8f 01       	movw	r16, r30
     a6c:	ee 16       	cp	r14, r30
     a6e:	ff 06       	cpc	r15, r31
     a70:	b9 f7       	brne	.-18     	; 0xa60 <_Z7readRamv+0x1de>
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     a7a:	ee e3       	ldi	r30, 0x3E	; 62
     a7c:	f8 e2       	ldi	r31, 0x28	; 40
     a7e:	64 8b       	std	Z+20, r22	; 0x14
     a80:	75 8b       	std	Z+21, r23	; 0x15
     a82:	86 8b       	std	Z+22, r24	; 0x16
     a84:	97 8b       	std	Z+23, r25	; 0x17
     a86:	84 81       	ldd	r24, Z+4	; 0x04
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <_Z7readRamv+0x20c>
     a8c:	12 c2       	rjmp	.+1060   	; 0xeb2 <_Z7readRamv+0x630>
     a8e:	8e 01       	movw	r16, r28
     a90:	0b 5f       	subi	r16, 0xFB	; 251
     a92:	1f 4f       	sbci	r17, 0xFF	; 255
     a94:	ae 01       	movw	r20, r28
     a96:	4f 5f       	subi	r20, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	7a 01       	movw	r14, r20
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     aa2:	f8 01       	movw	r30, r16
     aa4:	82 93       	st	-Z, r24
     aa6:	8f 01       	movw	r16, r30
     aa8:	ee 16       	cp	r14, r30
     aaa:	ff 06       	cpc	r15, r31
     aac:	b9 f7       	brne	.-18     	; 0xa9c <_Z7readRamv+0x21a>
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     ab6:	ee e3       	ldi	r30, 0x3E	; 62
     ab8:	f8 e2       	ldi	r31, 0x28	; 40
     aba:	60 8f       	std	Z+24, r22	; 0x18
     abc:	71 8f       	std	Z+25, r23	; 0x19
     abe:	82 8f       	std	Z+26, r24	; 0x1a
     ac0:	93 8f       	std	Z+27, r25	; 0x1b
     ac2:	84 81       	ldd	r24, Z+4	; 0x04
     ac4:	83 30       	cpi	r24, 0x03	; 3
     ac6:	e0 f0       	brcs	.+56     	; 0xb00 <_Z7readRamv+0x27e>
     ac8:	8e 01       	movw	r16, r28
     aca:	0b 5f       	subi	r16, 0xFB	; 251
     acc:	1f 4f       	sbci	r17, 0xFF	; 255
     ace:	ae 01       	movw	r20, r28
     ad0:	4f 5f       	subi	r20, 0xFF	; 255
     ad2:	5f 4f       	sbci	r21, 0xFF	; 255
     ad4:	7a 01       	movw	r14, r20
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     adc:	f8 01       	movw	r30, r16
     ade:	82 93       	st	-Z, r24
     ae0:	8f 01       	movw	r16, r30
     ae2:	ee 15       	cp	r30, r14
     ae4:	ff 05       	cpc	r31, r15
     ae6:	b9 f7       	brne	.-18     	; 0xad6 <_Z7readRamv+0x254>
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     af0:	60 93 5a 28 	sts	0x285A, r22	; 0x80285a <CMDPRGlist+0x1c>
     af4:	70 93 5b 28 	sts	0x285B, r23	; 0x80285b <CMDPRGlist+0x1d>
     af8:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CMDPRGlist+0x1e>
     afc:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CMDPRGlist+0x1f>
     b00:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     b04:	88 23       	and	r24, r24
     b06:	09 f4       	brne	.+2      	; 0xb0a <_Z7readRamv+0x288>
     b08:	d8 c1       	rjmp	.+944    	; 0xeba <_Z7readRamv+0x638>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b10:	ee e3       	ldi	r30, 0x3E	; 62
     b12:	f8 e2       	ldi	r31, 0x28	; 40
     b14:	81 8b       	std	Z+17, r24	; 0x11
     b16:	84 81       	ldd	r24, Z+4	; 0x04
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <_Z7readRamv+0x2a4>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b22:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <CMDPRGlist+0x12>
     b26:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     b2a:	83 30       	cpi	r24, 0x03	; 3
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <_Z7readRamv+0x2ae>
     b2e:	c5 c1       	rjmp	.+906    	; 0xeba <_Z7readRamv+0x638>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b36:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <CMDPRGlist+0x13>
     b3a:	bf c1       	rjmp	.+894    	; 0xeba <_Z7readRamv+0x638>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b42:	f6 01       	movw	r30, r12
     b44:	82 93       	st	-Z, r24
     b46:	6f 01       	movw	r12, r30
     b48:	0e 17       	cp	r16, r30
     b4a:	1f 07       	cpc	r17, r31
     b4c:	b9 f7       	brne	.-18     	; 0xb3c <_Z7readRamv+0x2ba>
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     b56:	60 93 5e 28 	sts	0x285E, r22	; 0x80285e <CMDPRGlist+0x20>
     b5a:	70 93 5f 28 	sts	0x285F, r23	; 0x80285f <CMDPRGlist+0x21>
     b5e:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <CMDPRGlist+0x22>
     b62:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <CMDPRGlist+0x23>
     b66:	67 01       	movw	r12, r14
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b6e:	f6 01       	movw	r30, r12
     b70:	82 93       	st	-Z, r24
     b72:	6f 01       	movw	r12, r30
     b74:	0e 17       	cp	r16, r30
     b76:	1f 07       	cpc	r17, r31
     b78:	b9 f7       	brne	.-18     	; 0xb68 <_Z7readRamv+0x2e6>
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     b82:	60 93 62 28 	sts	0x2862, r22	; 0x802862 <CMDPRGlist+0x24>
     b86:	70 93 63 28 	sts	0x2863, r23	; 0x802863 <CMDPRGlist+0x25>
     b8a:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <CMDPRGlist+0x26>
     b8e:	90 93 65 28 	sts	0x2865, r25	; 0x802865 <CMDPRGlist+0x27>
     b92:	67 01       	movw	r12, r14
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     b9a:	f6 01       	movw	r30, r12
     b9c:	82 93       	st	-Z, r24
     b9e:	6f 01       	movw	r12, r30
     ba0:	0e 17       	cp	r16, r30
     ba2:	1f 07       	cpc	r17, r31
     ba4:	b9 f7       	brne	.-18     	; 0xb94 <_Z7readRamv+0x312>
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     bae:	60 93 66 28 	sts	0x2866, r22	; 0x802866 <CMDPRGlist+0x28>
     bb2:	70 93 67 28 	sts	0x2867, r23	; 0x802867 <CMDPRGlist+0x29>
     bb6:	80 93 68 28 	sts	0x2868, r24	; 0x802868 <CMDPRGlist+0x2a>
     bba:	90 93 69 28 	sts	0x2869, r25	; 0x802869 <CMDPRGlist+0x2b>
     bbe:	67 01       	movw	r12, r14
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     bc6:	f6 01       	movw	r30, r12
     bc8:	82 93       	st	-Z, r24
     bca:	6f 01       	movw	r12, r30
     bcc:	0e 17       	cp	r16, r30
     bce:	1f 07       	cpc	r17, r31
     bd0:	b9 f7       	brne	.-18     	; 0xbc0 <_Z7readRamv+0x33e>
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     bda:	60 93 6a 28 	sts	0x286A, r22	; 0x80286a <CMDPRGlist+0x2c>
     bde:	70 93 6b 28 	sts	0x286B, r23	; 0x80286b <CMDPRGlist+0x2d>
     be2:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <CMDPRGlist+0x2e>
     be6:	90 93 6d 28 	sts	0x286D, r25	; 0x80286d <CMDPRGlist+0x2f>
     bea:	67 01       	movw	r12, r14
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     bf2:	f6 01       	movw	r30, r12
     bf4:	82 93       	st	-Z, r24
     bf6:	6f 01       	movw	r12, r30
     bf8:	e0 17       	cp	r30, r16
     bfa:	f1 07       	cpc	r31, r17
     bfc:	b9 f7       	brne	.-18     	; 0xbec <_Z7readRamv+0x36a>
     bfe:	ce 01       	movw	r24, r28
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     c06:	60 93 6e 28 	sts	0x286E, r22	; 0x80286e <CMDPRGlist+0x30>
     c0a:	70 93 6f 28 	sts	0x286F, r23	; 0x80286f <CMDPRGlist+0x31>
     c0e:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <CMDPRGlist+0x32>
     c12:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <CMDPRGlist+0x33>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     c1c:	f7 01       	movw	r30, r14
     c1e:	82 93       	st	-Z, r24
     c20:	7f 01       	movw	r14, r30
     c22:	0e 17       	cp	r16, r30
     c24:	1f 07       	cpc	r17, r31
     c26:	b9 f7       	brne	.-18     	; 0xc16 <_Z7readRamv+0x394>
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     c30:	60 93 72 28 	sts	0x2872, r22	; 0x802872 <CMDPRGlist+0x34>
     c34:	70 93 73 28 	sts	0x2873, r23	; 0x802873 <CMDPRGlist+0x35>
     c38:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <CMDPRGlist+0x36>
     c3c:	90 93 75 28 	sts	0x2875, r25	; 0x802875 <CMDPRGlist+0x37>
     c40:	64 c1       	rjmp	.+712    	; 0xf0a <_Z7readRamv+0x688>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     c48:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <CMDPRGlist+0x4>
     c4c:	88 23       	and	r24, r24
     c4e:	09 f4       	brne	.+2      	; 0xc52 <_Z7readRamv+0x3d0>
     c50:	56 c1       	rjmp	.+684    	; 0xefe <_Z7readRamv+0x67c>
     c52:	8e 01       	movw	r16, r28
     c54:	0b 5f       	subi	r16, 0xFB	; 251
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	ae 01       	movw	r20, r28
     c5a:	4f 5f       	subi	r20, 0xFF	; 255
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	6a 01       	movw	r12, r20
     c60:	78 01       	movw	r14, r16
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     c68:	f7 01       	movw	r30, r14
     c6a:	82 93       	st	-Z, r24
     c6c:	7f 01       	movw	r14, r30
     c6e:	ec 15       	cp	r30, r12
     c70:	fd 05       	cpc	r31, r13
     c72:	b9 f7       	brne	.-18     	; 0xc62 <_Z7readRamv+0x3e0>
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     c7c:	ee e3       	ldi	r30, 0x3E	; 62
     c7e:	f8 e2       	ldi	r31, 0x28	; 40
     c80:	65 83       	std	Z+5, r22	; 0x05
     c82:	76 83       	std	Z+6, r23	; 0x06
     c84:	87 83       	std	Z+7, r24	; 0x07
     c86:	90 87       	std	Z+8, r25	; 0x08
     c88:	84 81       	ldd	r24, Z+4	; 0x04
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <_Z7readRamv+0x40e>
     c8e:	1e c1       	rjmp	.+572    	; 0xecc <_Z7readRamv+0x64a>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     c96:	f8 01       	movw	r30, r16
     c98:	82 93       	st	-Z, r24
     c9a:	8f 01       	movw	r16, r30
     c9c:	ec 15       	cp	r30, r12
     c9e:	fd 05       	cpc	r31, r13
     ca0:	b9 f7       	brne	.-18     	; 0xc90 <_Z7readRamv+0x40e>
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     caa:	ee e3       	ldi	r30, 0x3E	; 62
     cac:	f8 e2       	ldi	r31, 0x28	; 40
     cae:	61 87       	std	Z+9, r22	; 0x09
     cb0:	72 87       	std	Z+10, r23	; 0x0a
     cb2:	83 87       	std	Z+11, r24	; 0x0b
     cb4:	94 87       	std	Z+12, r25	; 0x0c
     cb6:	84 81       	ldd	r24, Z+4	; 0x04
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	08 f4       	brcc	.+2      	; 0xcbe <_Z7readRamv+0x43c>
     cbc:	0b c1       	rjmp	.+534    	; 0xed4 <_Z7readRamv+0x652>
     cbe:	8e 01       	movw	r16, r28
     cc0:	0b 5f       	subi	r16, 0xFB	; 251
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	ae 01       	movw	r20, r28
     cc6:	4f 5f       	subi	r20, 0xFF	; 255
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	7a 01       	movw	r14, r20
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     cd2:	f8 01       	movw	r30, r16
     cd4:	82 93       	st	-Z, r24
     cd6:	8f 01       	movw	r16, r30
     cd8:	ee 16       	cp	r14, r30
     cda:	ff 06       	cpc	r15, r31
     cdc:	b9 f7       	brne	.-18     	; 0xccc <_Z7readRamv+0x44a>
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     ce6:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <CMDPRGlist+0xd>
     cea:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <CMDPRGlist+0xe>
     cee:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <CMDPRGlist+0xf>
     cf2:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <CMDPRGlist+0x10>
     cf6:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     cfa:	88 23       	and	r24, r24
     cfc:	09 f4       	brne	.+2      	; 0xd00 <_Z7readRamv+0x47e>
     cfe:	57 c0       	rjmp	.+174    	; 0xdae <_Z7readRamv+0x52c>
     d00:	8e 01       	movw	r16, r28
     d02:	0b 5f       	subi	r16, 0xFB	; 251
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	ae 01       	movw	r20, r28
     d08:	4f 5f       	subi	r20, 0xFF	; 255
     d0a:	5f 4f       	sbci	r21, 0xFF	; 255
     d0c:	7a 01       	movw	r14, r20
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     d14:	f8 01       	movw	r30, r16
     d16:	82 93       	st	-Z, r24
     d18:	8f 01       	movw	r16, r30
     d1a:	ee 16       	cp	r14, r30
     d1c:	ff 06       	cpc	r15, r31
     d1e:	b9 f7       	brne	.-18     	; 0xd0e <_Z7readRamv+0x48c>
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     d28:	ee e3       	ldi	r30, 0x3E	; 62
     d2a:	f8 e2       	ldi	r31, 0x28	; 40
     d2c:	64 8b       	std	Z+20, r22	; 0x14
     d2e:	75 8b       	std	Z+21, r23	; 0x15
     d30:	86 8b       	std	Z+22, r24	; 0x16
     d32:	97 8b       	std	Z+23, r25	; 0x17
     d34:	84 81       	ldd	r24, Z+4	; 0x04
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	08 f4       	brcc	.+2      	; 0xd3c <_Z7readRamv+0x4ba>
     d3a:	cf c0       	rjmp	.+414    	; 0xeda <_Z7readRamv+0x658>
     d3c:	8e 01       	movw	r16, r28
     d3e:	0b 5f       	subi	r16, 0xFB	; 251
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	ae 01       	movw	r20, r28
     d44:	4f 5f       	subi	r20, 0xFF	; 255
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	7a 01       	movw	r14, r20
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     d50:	f8 01       	movw	r30, r16
     d52:	82 93       	st	-Z, r24
     d54:	8f 01       	movw	r16, r30
     d56:	ee 15       	cp	r30, r14
     d58:	ff 05       	cpc	r31, r15
     d5a:	b9 f7       	brne	.-18     	; 0xd4a <_Z7readRamv+0x4c8>
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     d64:	ee e3       	ldi	r30, 0x3E	; 62
     d66:	f8 e2       	ldi	r31, 0x28	; 40
     d68:	60 8f       	std	Z+24, r22	; 0x18
     d6a:	71 8f       	std	Z+25, r23	; 0x19
     d6c:	82 8f       	std	Z+26, r24	; 0x1a
     d6e:	93 8f       	std	Z+27, r25	; 0x1b
     d70:	84 81       	ldd	r24, Z+4	; 0x04
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	e0 f0       	brcs	.+56     	; 0xdae <_Z7readRamv+0x52c>
     d76:	8e 01       	movw	r16, r28
     d78:	0b 5f       	subi	r16, 0xFB	; 251
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	ae 01       	movw	r20, r28
     d7e:	4f 5f       	subi	r20, 0xFF	; 255
     d80:	5f 4f       	sbci	r21, 0xFF	; 255
     d82:	7a 01       	movw	r14, r20
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     d8a:	f8 01       	movw	r30, r16
     d8c:	82 93       	st	-Z, r24
     d8e:	8f 01       	movw	r16, r30
     d90:	ee 15       	cp	r30, r14
     d92:	ff 05       	cpc	r31, r15
     d94:	b9 f7       	brne	.-18     	; 0xd84 <_Z7readRamv+0x502>
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     d9e:	60 93 5a 28 	sts	0x285A, r22	; 0x80285a <CMDPRGlist+0x1c>
     da2:	70 93 5b 28 	sts	0x285B, r23	; 0x80285b <CMDPRGlist+0x1d>
     da6:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CMDPRGlist+0x1e>
     daa:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CMDPRGlist+0x1f>
     dae:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     db2:	88 23       	and	r24, r24
     db4:	09 f4       	brne	.+2      	; 0xdb8 <_Z7readRamv+0x536>
     db6:	95 c0       	rjmp	.+298    	; 0xee2 <_Z7readRamv+0x660>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     dbe:	ee e3       	ldi	r30, 0x3E	; 62
     dc0:	f8 e2       	ldi	r31, 0x28	; 40
     dc2:	81 8b       	std	Z+17, r24	; 0x11
     dc4:	84 81       	ldd	r24, Z+4	; 0x04
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	28 f0       	brcs	.+10     	; 0xdd4 <_Z7readRamv+0x552>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     dd0:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <CMDPRGlist+0x12>
     dd4:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	08 f4       	brcc	.+2      	; 0xdde <_Z7readRamv+0x55c>
     ddc:	82 c0       	rjmp	.+260    	; 0xee2 <_Z7readRamv+0x660>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     de4:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <CMDPRGlist+0x13>
     de8:	7c c0       	rjmp	.+248    	; 0xee2 <_Z7readRamv+0x660>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     df0:	f8 01       	movw	r30, r16
     df2:	82 93       	st	-Z, r24
     df4:	8f 01       	movw	r16, r30
     df6:	ee 16       	cp	r14, r30
     df8:	ff 06       	cpc	r15, r31
     dfa:	b9 f7       	brne	.-18     	; 0xdea <_Z7readRamv+0x568>
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     e04:	60 93 5e 28 	sts	0x285E, r22	; 0x80285e <CMDPRGlist+0x20>
     e08:	70 93 5f 28 	sts	0x285F, r23	; 0x80285f <CMDPRGlist+0x21>
     e0c:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <CMDPRGlist+0x22>
     e10:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <CMDPRGlist+0x23>
     e14:	7a c0       	rjmp	.+244    	; 0xf0a <_Z7readRamv+0x688>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e1c:	0e e3       	ldi	r16, 0x3E	; 62
     e1e:	18 e2       	ldi	r17, 0x28	; 40
     e20:	f8 01       	movw	r30, r16
     e22:	80 af       	std	Z+56, r24	; 0x38
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e2a:	8c 83       	std	Y+4, r24	; 0x04
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e32:	8b 83       	std	Y+3, r24	; 0x03
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     e4c:	f8 01       	movw	r30, r16
     e4e:	61 af       	std	Z+57, r22	; 0x39
     e50:	72 af       	std	Z+58, r23	; 0x3a
     e52:	83 af       	std	Z+59, r24	; 0x3b
     e54:	94 af       	std	Z+60, r25	; 0x3c
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e5c:	8c 83       	std	Y+4, r24	; 0x04
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e6c:	8a 83       	std	Y+2, r24	; 0x02
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     e7e:	60 93 7b 28 	sts	0x287B, r22	; 0x80287b <CMDPRGlist+0x3d>
     e82:	70 93 7c 28 	sts	0x287C, r23	; 0x80287c <CMDPRGlist+0x3e>
     e86:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <CMDPRGlist+0x3f>
     e8a:	90 93 7e 28 	sts	0x287E, r25	; 0x80287e <CMDPRGlist+0x40>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e94:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <CMDPRGlist+0x41>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     e9e:	80 93 80 28 	sts	0x2880, r24	; 0x802880 <CMDPRGlist+0x42>
     ea2:	33 c0       	rjmp	.+102    	; 0xf0a <_Z7readRamv+0x688>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <_Z7readRamv+0x628>
     ea8:	b3 cd       	rjmp	.-1178   	; 0xa10 <_Z7readRamv+0x18e>
     eaa:	ce cd       	rjmp	.-1124   	; 0xa48 <_Z7readRamv+0x1c6>
     eac:	81 11       	cpse	r24, r1
     eae:	d1 cd       	rjmp	.-1118   	; 0xa52 <_Z7readRamv+0x1d0>
     eb0:	23 c0       	rjmp	.+70     	; 0xef8 <_Z7readRamv+0x676>
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <_Z7readRamv+0x636>
     eb6:	24 ce       	rjmp	.-952    	; 0xb00 <_Z7readRamv+0x27e>
     eb8:	07 ce       	rjmp	.-1010   	; 0xac8 <_Z7readRamv+0x246>
     eba:	7e 01       	movw	r14, r28
     ebc:	f5 e0       	ldi	r31, 0x05	; 5
     ebe:	ef 0e       	add	r14, r31
     ec0:	f1 1c       	adc	r15, r1
     ec2:	8e 01       	movw	r16, r28
     ec4:	0f 5f       	subi	r16, 0xFF	; 255
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	67 01       	movw	r12, r14
     eca:	38 ce       	rjmp	.-912    	; 0xb3c <_Z7readRamv+0x2ba>
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	08 f0       	brcs	.+2      	; 0xed2 <_Z7readRamv+0x650>
     ed0:	f6 ce       	rjmp	.-532    	; 0xcbe <_Z7readRamv+0x43c>
     ed2:	11 cf       	rjmp	.-478    	; 0xcf6 <_Z7readRamv+0x474>
     ed4:	81 11       	cpse	r24, r1
     ed6:	14 cf       	rjmp	.-472    	; 0xd00 <_Z7readRamv+0x47e>
     ed8:	15 c0       	rjmp	.+42     	; 0xf04 <_Z7readRamv+0x682>
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	08 f4       	brcc	.+2      	; 0xee0 <_Z7readRamv+0x65e>
     ede:	67 cf       	rjmp	.-306    	; 0xdae <_Z7readRamv+0x52c>
     ee0:	4a cf       	rjmp	.-364    	; 0xd76 <_Z7readRamv+0x4f4>
     ee2:	8e 01       	movw	r16, r28
     ee4:	0b 5f       	subi	r16, 0xFB	; 251
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	ae 01       	movw	r20, r28
     eea:	4f 5f       	subi	r20, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
     eee:	7a 01       	movw	r14, r20
     ef0:	7c cf       	rjmp	.-264    	; 0xdea <_Z7readRamv+0x568>
     ef2:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     ef6:	da cf       	rjmp	.-76     	; 0xeac <_Z7readRamv+0x62a>
     ef8:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     efc:	da cf       	rjmp	.-76     	; 0xeb2 <_Z7readRamv+0x630>
     efe:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     f02:	e8 cf       	rjmp	.-48     	; 0xed4 <_Z7readRamv+0x652>
     f04:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
     f08:	e8 cf       	rjmp	.-48     	; 0xeda <_Z7readRamv+0x658>
     f0a:	24 96       	adiw	r28, 0x04	; 4
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	cf 90       	pop	r12
     f20:	08 95       	ret

00000f22 <_Z10ReadSerialv>:
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	00 d0       	rcall	.+0      	; 0xf28 <_Z10ReadSerialv+0x6>
     f28:	1f 92       	push	r1
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	90 e2       	ldi	r25, 0x20	; 32
     f32:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
     f36:	87 ee       	ldi	r24, 0xE7	; 231
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <fk>
     f42:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <fk+0x1>
     f46:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <fk+0x2>
     f4a:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <fk+0x3>
     f4e:	8e ec       	ldi	r24, 0xCE	; 206
     f50:	97 e0       	ldi	r25, 0x07	; 7
     f52:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <ft>
     f56:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <ft+0x1>
     f5a:	8e ec       	ldi	r24, 0xCE	; 206
     f5c:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <fadd1>
     f60:	87 e0       	ldi	r24, 0x07	; 7
     f62:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <fadd2>
     f66:	e0 e8       	ldi	r30, 0x80	; 128
     f68:	f6 e0       	ldi	r31, 0x06	; 6
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	80 61       	ori	r24, 0x10	; 16
     f6e:	84 83       	std	Z+4, r24	; 0x04
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	84 83       	std	Z+4, r24	; 0x04
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f7c:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
     f80:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f84:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
     f88:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     f98:	8c 83       	std	Y+4, r24	; 0x04
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     fa0:	8b 83       	std	Y+3, r24	; 0x03
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	1f 92       	push	r1
     fb6:	9f 93       	push	r25
     fb8:	9b 81       	ldd	r25, Y+3	; 0x03
     fba:	1f 92       	push	r1
     fbc:	9f 93       	push	r25
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	1f 92       	push	r1
     fc2:	9f 93       	push	r25
     fc4:	1f 92       	push	r1
     fc6:	8f 93       	push	r24
     fc8:	83 e9       	ldi	r24, 0x93	; 147
     fca:	90 e2       	ldi	r25, 0x20	; 32
     fcc:	9f 93       	push	r25
     fce:	8f 93       	push	r24
     fd0:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	24 96       	adiw	r28, 0x04	; 4
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <_Z14ReadSubProgramj>:
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	00 d0       	rcall	.+0      	; 0xffe <_Z14ReadSubProgramj+0x12>
     ffe:	1f 92       	push	r1
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	20 91 89 28 	lds	r18, 0x2889	; 0x802889 <ContinuousRead>
    1008:	21 11       	cpse	r18, r1
    100a:	2f c0       	rjmp	.+94     	; 0x106a <_Z14ReadSubProgramj+0x7e>
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <fk>
    1014:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <fk+0x1>
    1018:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <fk+0x2>
    101c:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <fk+0x3>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	aa 1f       	adc	r26, r26
    1026:	bb 1f       	adc	r27, r27
    1028:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <ft>
    102c:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <ft+0x1>
    1030:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <fadd1>
    1034:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <fadd2>
    1038:	e0 e8       	ldi	r30, 0x80	; 128
    103a:	f6 e0       	ldi	r31, 0x06	; 6
    103c:	84 81       	ldd	r24, Z+4	; 0x04
    103e:	80 61       	ori	r24, 0x10	; 16
    1040:	84 83       	std	Z+4, r24	; 0x04
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	8f 7e       	andi	r24, 0xEF	; 239
    1046:	84 83       	std	Z+4, r24	; 0x04
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    104e:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
    1052:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1056:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
    105a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <ContinuousRead>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1070:	8a 83       	std	Y+2, r24	; 0x02
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	0e e3       	ldi	r16, 0x3E	; 62
    107c:	18 e2       	ldi	r17, 0x28	; 40
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	32 2f       	mov	r19, r18
    1084:	22 27       	eor	r18, r18
    1086:	a9 01       	movw	r20, r18
    1088:	48 0f       	add	r20, r24
    108a:	51 1d       	adc	r21, r1
    108c:	f8 01       	movw	r30, r16
    108e:	40 83       	st	Z, r20
    1090:	51 83       	std	Z+1, r21	; 0x01
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1098:	f8 01       	movw	r30, r16
    109a:	82 83       	std	Z+2, r24	; 0x02
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    10a2:	f8 01       	movw	r30, r16
    10a4:	83 83       	std	Z+3, r24	; 0x03
    10a6:	88 23       	and	r24, r24
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <_Z14ReadSubProgramj+0xc6>
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <_Z14ReadSubProgramj+0xc4>
    10ae:	58 c1       	rjmp	.+688    	; 0x1360 <_Z14ReadSubProgramj+0x374>
    10b0:	73 c2       	rjmp	.+1254   	; 0x1598 <_Z14ReadSubProgramj+0x5ac>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    10b8:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <CMDPRGlist+0x4>
    10bc:	88 23       	and	r24, r24
    10be:	09 f4       	brne	.+2      	; 0x10c2 <_Z14ReadSubProgramj+0xd6>
    10c0:	5f c2       	rjmp	.+1214   	; 0x1580 <_Z14ReadSubProgramj+0x594>
    10c2:	8e 01       	movw	r16, r28
    10c4:	0b 5f       	subi	r16, 0xFB	; 251
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	ae 01       	movw	r20, r28
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	6a 01       	movw	r12, r20
    10d0:	78 01       	movw	r14, r16
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    10d8:	f7 01       	movw	r30, r14
    10da:	82 93       	st	-Z, r24
    10dc:	7f 01       	movw	r14, r30
    10de:	ec 15       	cp	r30, r12
    10e0:	fd 05       	cpc	r31, r13
    10e2:	b9 f7       	brne	.-18     	; 0x10d2 <_Z14ReadSubProgramj+0xe6>
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    10ec:	ee e3       	ldi	r30, 0x3E	; 62
    10ee:	f8 e2       	ldi	r31, 0x28	; 40
    10f0:	65 83       	std	Z+5, r22	; 0x05
    10f2:	76 83       	std	Z+6, r23	; 0x06
    10f4:	87 83       	std	Z+7, r24	; 0x07
    10f6:	90 87       	std	Z+8, r25	; 0x08
    10f8:	84 81       	ldd	r24, Z+4	; 0x04
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <_Z14ReadSubProgramj+0x114>
    10fe:	19 c2       	rjmp	.+1074   	; 0x1532 <_Z14ReadSubProgramj+0x546>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1106:	f8 01       	movw	r30, r16
    1108:	82 93       	st	-Z, r24
    110a:	8f 01       	movw	r16, r30
    110c:	ec 15       	cp	r30, r12
    110e:	fd 05       	cpc	r31, r13
    1110:	b9 f7       	brne	.-18     	; 0x1100 <_Z14ReadSubProgramj+0x114>
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    111a:	ee e3       	ldi	r30, 0x3E	; 62
    111c:	f8 e2       	ldi	r31, 0x28	; 40
    111e:	61 87       	std	Z+9, r22	; 0x09
    1120:	72 87       	std	Z+10, r23	; 0x0a
    1122:	83 87       	std	Z+11, r24	; 0x0b
    1124:	94 87       	std	Z+12, r25	; 0x0c
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	08 f4       	brcc	.+2      	; 0x112e <_Z14ReadSubProgramj+0x142>
    112c:	06 c2       	rjmp	.+1036   	; 0x153a <_Z14ReadSubProgramj+0x54e>
    112e:	8e 01       	movw	r16, r28
    1130:	0b 5f       	subi	r16, 0xFB	; 251
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	ae 01       	movw	r20, r28
    1136:	4f 5f       	subi	r20, 0xFF	; 255
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	7a 01       	movw	r14, r20
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1142:	f8 01       	movw	r30, r16
    1144:	82 93       	st	-Z, r24
    1146:	8f 01       	movw	r16, r30
    1148:	ee 15       	cp	r30, r14
    114a:	ff 05       	cpc	r31, r15
    114c:	b9 f7       	brne	.-18     	; 0x113c <_Z14ReadSubProgramj+0x150>
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1156:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <CMDPRGlist+0xd>
    115a:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <CMDPRGlist+0xe>
    115e:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <CMDPRGlist+0xf>
    1162:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <CMDPRGlist+0x10>
    1166:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    116a:	88 23       	and	r24, r24
    116c:	09 f4       	brne	.+2      	; 0x1170 <_Z14ReadSubProgramj+0x184>
    116e:	57 c0       	rjmp	.+174    	; 0x121e <_Z14ReadSubProgramj+0x232>
    1170:	8e 01       	movw	r16, r28
    1172:	0b 5f       	subi	r16, 0xFB	; 251
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	ae 01       	movw	r20, r28
    1178:	4f 5f       	subi	r20, 0xFF	; 255
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	7a 01       	movw	r14, r20
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1184:	f8 01       	movw	r30, r16
    1186:	82 93       	st	-Z, r24
    1188:	8f 01       	movw	r16, r30
    118a:	ee 16       	cp	r14, r30
    118c:	ff 06       	cpc	r15, r31
    118e:	b9 f7       	brne	.-18     	; 0x117e <_Z14ReadSubProgramj+0x192>
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1198:	ee e3       	ldi	r30, 0x3E	; 62
    119a:	f8 e2       	ldi	r31, 0x28	; 40
    119c:	64 8b       	std	Z+20, r22	; 0x14
    119e:	75 8b       	std	Z+21, r23	; 0x15
    11a0:	86 8b       	std	Z+22, r24	; 0x16
    11a2:	97 8b       	std	Z+23, r25	; 0x17
    11a4:	84 81       	ldd	r24, Z+4	; 0x04
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <_Z14ReadSubProgramj+0x1c0>
    11aa:	ca c1       	rjmp	.+916    	; 0x1540 <_Z14ReadSubProgramj+0x554>
    11ac:	8e 01       	movw	r16, r28
    11ae:	0b 5f       	subi	r16, 0xFB	; 251
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	ae 01       	movw	r20, r28
    11b4:	4f 5f       	subi	r20, 0xFF	; 255
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	7a 01       	movw	r14, r20
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    11c0:	f8 01       	movw	r30, r16
    11c2:	82 93       	st	-Z, r24
    11c4:	8f 01       	movw	r16, r30
    11c6:	ee 16       	cp	r14, r30
    11c8:	ff 06       	cpc	r15, r31
    11ca:	b9 f7       	brne	.-18     	; 0x11ba <_Z14ReadSubProgramj+0x1ce>
    11cc:	ce 01       	movw	r24, r28
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    11d4:	ee e3       	ldi	r30, 0x3E	; 62
    11d6:	f8 e2       	ldi	r31, 0x28	; 40
    11d8:	60 8f       	std	Z+24, r22	; 0x18
    11da:	71 8f       	std	Z+25, r23	; 0x19
    11dc:	82 8f       	std	Z+26, r24	; 0x1a
    11de:	93 8f       	std	Z+27, r25	; 0x1b
    11e0:	84 81       	ldd	r24, Z+4	; 0x04
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	e0 f0       	brcs	.+56     	; 0x121e <_Z14ReadSubProgramj+0x232>
    11e6:	8e 01       	movw	r16, r28
    11e8:	0b 5f       	subi	r16, 0xFB	; 251
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	ae 01       	movw	r20, r28
    11ee:	4f 5f       	subi	r20, 0xFF	; 255
    11f0:	5f 4f       	sbci	r21, 0xFF	; 255
    11f2:	7a 01       	movw	r14, r20
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    11fa:	f8 01       	movw	r30, r16
    11fc:	82 93       	st	-Z, r24
    11fe:	8f 01       	movw	r16, r30
    1200:	ee 15       	cp	r30, r14
    1202:	ff 05       	cpc	r31, r15
    1204:	b9 f7       	brne	.-18     	; 0x11f4 <_Z14ReadSubProgramj+0x208>
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    120e:	60 93 5a 28 	sts	0x285A, r22	; 0x80285a <CMDPRGlist+0x1c>
    1212:	70 93 5b 28 	sts	0x285B, r23	; 0x80285b <CMDPRGlist+0x1d>
    1216:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CMDPRGlist+0x1e>
    121a:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CMDPRGlist+0x1f>
    121e:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <_Z14ReadSubProgramj+0x23c>
    1226:	90 c1       	rjmp	.+800    	; 0x1548 <_Z14ReadSubProgramj+0x55c>
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    122e:	ee e3       	ldi	r30, 0x3E	; 62
    1230:	f8 e2       	ldi	r31, 0x28	; 40
    1232:	81 8b       	std	Z+17, r24	; 0x11
    1234:	84 81       	ldd	r24, Z+4	; 0x04
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	28 f0       	brcs	.+10     	; 0x1244 <_Z14ReadSubProgramj+0x258>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1240:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <CMDPRGlist+0x12>
    1244:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	08 f4       	brcc	.+2      	; 0x124e <_Z14ReadSubProgramj+0x262>
    124c:	7d c1       	rjmp	.+762    	; 0x1548 <_Z14ReadSubProgramj+0x55c>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1254:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <CMDPRGlist+0x13>
    1258:	77 c1       	rjmp	.+750    	; 0x1548 <_Z14ReadSubProgramj+0x55c>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1260:	f6 01       	movw	r30, r12
    1262:	82 93       	st	-Z, r24
    1264:	6f 01       	movw	r12, r30
    1266:	0e 17       	cp	r16, r30
    1268:	1f 07       	cpc	r17, r31
    126a:	b9 f7       	brne	.-18     	; 0x125a <_Z14ReadSubProgramj+0x26e>
    126c:	ce 01       	movw	r24, r28
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1274:	60 93 5e 28 	sts	0x285E, r22	; 0x80285e <CMDPRGlist+0x20>
    1278:	70 93 5f 28 	sts	0x285F, r23	; 0x80285f <CMDPRGlist+0x21>
    127c:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <CMDPRGlist+0x22>
    1280:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <CMDPRGlist+0x23>
    1284:	67 01       	movw	r12, r14
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    128c:	f6 01       	movw	r30, r12
    128e:	82 93       	st	-Z, r24
    1290:	6f 01       	movw	r12, r30
    1292:	0e 17       	cp	r16, r30
    1294:	1f 07       	cpc	r17, r31
    1296:	b9 f7       	brne	.-18     	; 0x1286 <_Z14ReadSubProgramj+0x29a>
    1298:	ce 01       	movw	r24, r28
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    12a0:	60 93 62 28 	sts	0x2862, r22	; 0x802862 <CMDPRGlist+0x24>
    12a4:	70 93 63 28 	sts	0x2863, r23	; 0x802863 <CMDPRGlist+0x25>
    12a8:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <CMDPRGlist+0x26>
    12ac:	90 93 65 28 	sts	0x2865, r25	; 0x802865 <CMDPRGlist+0x27>
    12b0:	67 01       	movw	r12, r14
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    12b8:	f6 01       	movw	r30, r12
    12ba:	82 93       	st	-Z, r24
    12bc:	6f 01       	movw	r12, r30
    12be:	0e 17       	cp	r16, r30
    12c0:	1f 07       	cpc	r17, r31
    12c2:	b9 f7       	brne	.-18     	; 0x12b2 <_Z14ReadSubProgramj+0x2c6>
    12c4:	ce 01       	movw	r24, r28
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    12cc:	60 93 66 28 	sts	0x2866, r22	; 0x802866 <CMDPRGlist+0x28>
    12d0:	70 93 67 28 	sts	0x2867, r23	; 0x802867 <CMDPRGlist+0x29>
    12d4:	80 93 68 28 	sts	0x2868, r24	; 0x802868 <CMDPRGlist+0x2a>
    12d8:	90 93 69 28 	sts	0x2869, r25	; 0x802869 <CMDPRGlist+0x2b>
    12dc:	67 01       	movw	r12, r14
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    12e4:	f6 01       	movw	r30, r12
    12e6:	82 93       	st	-Z, r24
    12e8:	6f 01       	movw	r12, r30
    12ea:	0e 17       	cp	r16, r30
    12ec:	1f 07       	cpc	r17, r31
    12ee:	b9 f7       	brne	.-18     	; 0x12de <_Z14ReadSubProgramj+0x2f2>
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    12f8:	60 93 6a 28 	sts	0x286A, r22	; 0x80286a <CMDPRGlist+0x2c>
    12fc:	70 93 6b 28 	sts	0x286B, r23	; 0x80286b <CMDPRGlist+0x2d>
    1300:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <CMDPRGlist+0x2e>
    1304:	90 93 6d 28 	sts	0x286D, r25	; 0x80286d <CMDPRGlist+0x2f>
    1308:	67 01       	movw	r12, r14
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1310:	f6 01       	movw	r30, r12
    1312:	82 93       	st	-Z, r24
    1314:	6f 01       	movw	r12, r30
    1316:	e0 17       	cp	r30, r16
    1318:	f1 07       	cpc	r31, r17
    131a:	b9 f7       	brne	.-18     	; 0x130a <_Z14ReadSubProgramj+0x31e>
    131c:	ce 01       	movw	r24, r28
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1324:	60 93 6e 28 	sts	0x286E, r22	; 0x80286e <CMDPRGlist+0x30>
    1328:	70 93 6f 28 	sts	0x286F, r23	; 0x80286f <CMDPRGlist+0x31>
    132c:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <CMDPRGlist+0x32>
    1330:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <CMDPRGlist+0x33>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    133a:	f7 01       	movw	r30, r14
    133c:	82 93       	st	-Z, r24
    133e:	7f 01       	movw	r14, r30
    1340:	0e 17       	cp	r16, r30
    1342:	1f 07       	cpc	r17, r31
    1344:	b9 f7       	brne	.-18     	; 0x1334 <_Z14ReadSubProgramj+0x348>
    1346:	ce 01       	movw	r24, r28
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    134e:	60 93 72 28 	sts	0x2872, r22	; 0x802872 <CMDPRGlist+0x34>
    1352:	70 93 73 28 	sts	0x2873, r23	; 0x802873 <CMDPRGlist+0x35>
    1356:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <CMDPRGlist+0x36>
    135a:	90 93 75 28 	sts	0x2875, r25	; 0x802875 <CMDPRGlist+0x37>
    135e:	1c c1       	rjmp	.+568    	; 0x1598 <_Z14ReadSubProgramj+0x5ac>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1366:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <CMDPRGlist+0x4>
    136a:	88 23       	and	r24, r24
    136c:	09 f4       	brne	.+2      	; 0x1370 <_Z14ReadSubProgramj+0x384>
    136e:	0e c1       	rjmp	.+540    	; 0x158c <_Z14ReadSubProgramj+0x5a0>
    1370:	8e 01       	movw	r16, r28
    1372:	0b 5f       	subi	r16, 0xFB	; 251
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	ae 01       	movw	r20, r28
    1378:	4f 5f       	subi	r20, 0xFF	; 255
    137a:	5f 4f       	sbci	r21, 0xFF	; 255
    137c:	6a 01       	movw	r12, r20
    137e:	78 01       	movw	r14, r16
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1386:	f7 01       	movw	r30, r14
    1388:	82 93       	st	-Z, r24
    138a:	7f 01       	movw	r14, r30
    138c:	ec 15       	cp	r30, r12
    138e:	fd 05       	cpc	r31, r13
    1390:	b9 f7       	brne	.-18     	; 0x1380 <_Z14ReadSubProgramj+0x394>
    1392:	ce 01       	movw	r24, r28
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    139a:	ee e3       	ldi	r30, 0x3E	; 62
    139c:	f8 e2       	ldi	r31, 0x28	; 40
    139e:	65 83       	std	Z+5, r22	; 0x05
    13a0:	76 83       	std	Z+6, r23	; 0x06
    13a2:	87 83       	std	Z+7, r24	; 0x07
    13a4:	90 87       	std	Z+8, r25	; 0x08
    13a6:	84 81       	ldd	r24, Z+4	; 0x04
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <_Z14ReadSubProgramj+0x3c2>
    13ac:	d6 c0       	rjmp	.+428    	; 0x155a <_Z14ReadSubProgramj+0x56e>
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    13b4:	f8 01       	movw	r30, r16
    13b6:	82 93       	st	-Z, r24
    13b8:	8f 01       	movw	r16, r30
    13ba:	ec 15       	cp	r30, r12
    13bc:	fd 05       	cpc	r31, r13
    13be:	b9 f7       	brne	.-18     	; 0x13ae <_Z14ReadSubProgramj+0x3c2>
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    13c8:	ee e3       	ldi	r30, 0x3E	; 62
    13ca:	f8 e2       	ldi	r31, 0x28	; 40
    13cc:	61 87       	std	Z+9, r22	; 0x09
    13ce:	72 87       	std	Z+10, r23	; 0x0a
    13d0:	83 87       	std	Z+11, r24	; 0x0b
    13d2:	94 87       	std	Z+12, r25	; 0x0c
    13d4:	84 81       	ldd	r24, Z+4	; 0x04
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <_Z14ReadSubProgramj+0x3f0>
    13da:	c3 c0       	rjmp	.+390    	; 0x1562 <_Z14ReadSubProgramj+0x576>
    13dc:	8e 01       	movw	r16, r28
    13de:	0b 5f       	subi	r16, 0xFB	; 251
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	ae 01       	movw	r20, r28
    13e4:	4f 5f       	subi	r20, 0xFF	; 255
    13e6:	5f 4f       	sbci	r21, 0xFF	; 255
    13e8:	7a 01       	movw	r14, r20
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    13f0:	f8 01       	movw	r30, r16
    13f2:	82 93       	st	-Z, r24
    13f4:	8f 01       	movw	r16, r30
    13f6:	ee 16       	cp	r14, r30
    13f8:	ff 06       	cpc	r15, r31
    13fa:	b9 f7       	brne	.-18     	; 0x13ea <_Z14ReadSubProgramj+0x3fe>
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1404:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <CMDPRGlist+0xd>
    1408:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <CMDPRGlist+0xe>
    140c:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <CMDPRGlist+0xf>
    1410:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <CMDPRGlist+0x10>
    1414:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1418:	88 23       	and	r24, r24
    141a:	09 f4       	brne	.+2      	; 0x141e <_Z14ReadSubProgramj+0x432>
    141c:	57 c0       	rjmp	.+174    	; 0x14cc <_Z14ReadSubProgramj+0x4e0>
    141e:	8e 01       	movw	r16, r28
    1420:	0b 5f       	subi	r16, 0xFB	; 251
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	ae 01       	movw	r20, r28
    1426:	4f 5f       	subi	r20, 0xFF	; 255
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	7a 01       	movw	r14, r20
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1432:	f8 01       	movw	r30, r16
    1434:	82 93       	st	-Z, r24
    1436:	8f 01       	movw	r16, r30
    1438:	ee 16       	cp	r14, r30
    143a:	ff 06       	cpc	r15, r31
    143c:	b9 f7       	brne	.-18     	; 0x142c <_Z14ReadSubProgramj+0x440>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1446:	ee e3       	ldi	r30, 0x3E	; 62
    1448:	f8 e2       	ldi	r31, 0x28	; 40
    144a:	64 8b       	std	Z+20, r22	; 0x14
    144c:	75 8b       	std	Z+21, r23	; 0x15
    144e:	86 8b       	std	Z+22, r24	; 0x16
    1450:	97 8b       	std	Z+23, r25	; 0x17
    1452:	84 81       	ldd	r24, Z+4	; 0x04
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	08 f4       	brcc	.+2      	; 0x145a <_Z14ReadSubProgramj+0x46e>
    1458:	87 c0       	rjmp	.+270    	; 0x1568 <_Z14ReadSubProgramj+0x57c>
    145a:	8e 01       	movw	r16, r28
    145c:	0b 5f       	subi	r16, 0xFB	; 251
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	ae 01       	movw	r20, r28
    1462:	4f 5f       	subi	r20, 0xFF	; 255
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	7a 01       	movw	r14, r20
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    146e:	f8 01       	movw	r30, r16
    1470:	82 93       	st	-Z, r24
    1472:	8f 01       	movw	r16, r30
    1474:	ee 15       	cp	r30, r14
    1476:	ff 05       	cpc	r31, r15
    1478:	b9 f7       	brne	.-18     	; 0x1468 <_Z14ReadSubProgramj+0x47c>
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1482:	ee e3       	ldi	r30, 0x3E	; 62
    1484:	f8 e2       	ldi	r31, 0x28	; 40
    1486:	60 8f       	std	Z+24, r22	; 0x18
    1488:	71 8f       	std	Z+25, r23	; 0x19
    148a:	82 8f       	std	Z+26, r24	; 0x1a
    148c:	93 8f       	std	Z+27, r25	; 0x1b
    148e:	84 81       	ldd	r24, Z+4	; 0x04
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	e0 f0       	brcs	.+56     	; 0x14cc <_Z14ReadSubProgramj+0x4e0>
    1494:	8e 01       	movw	r16, r28
    1496:	0b 5f       	subi	r16, 0xFB	; 251
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	ae 01       	movw	r20, r28
    149c:	4f 5f       	subi	r20, 0xFF	; 255
    149e:	5f 4f       	sbci	r21, 0xFF	; 255
    14a0:	7a 01       	movw	r14, r20
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    14a8:	f8 01       	movw	r30, r16
    14aa:	82 93       	st	-Z, r24
    14ac:	8f 01       	movw	r16, r30
    14ae:	ee 15       	cp	r30, r14
    14b0:	ff 05       	cpc	r31, r15
    14b2:	b9 f7       	brne	.-18     	; 0x14a2 <_Z14ReadSubProgramj+0x4b6>
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    14bc:	60 93 5a 28 	sts	0x285A, r22	; 0x80285a <CMDPRGlist+0x1c>
    14c0:	70 93 5b 28 	sts	0x285B, r23	; 0x80285b <CMDPRGlist+0x1d>
    14c4:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <CMDPRGlist+0x1e>
    14c8:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <CMDPRGlist+0x1f>
    14cc:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    14d0:	88 23       	and	r24, r24
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <_Z14ReadSubProgramj+0x4ea>
    14d4:	4d c0       	rjmp	.+154    	; 0x1570 <_Z14ReadSubProgramj+0x584>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    14dc:	ee e3       	ldi	r30, 0x3E	; 62
    14de:	f8 e2       	ldi	r31, 0x28	; 40
    14e0:	81 8b       	std	Z+17, r24	; 0x11
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	28 f0       	brcs	.+10     	; 0x14f2 <_Z14ReadSubProgramj+0x506>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    14ee:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <CMDPRGlist+0x12>
    14f2:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	d8 f1       	brcs	.+118    	; 0x1570 <_Z14ReadSubProgramj+0x584>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1500:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <CMDPRGlist+0x13>
    1504:	35 c0       	rjmp	.+106    	; 0x1570 <_Z14ReadSubProgramj+0x584>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    150c:	f8 01       	movw	r30, r16
    150e:	82 93       	st	-Z, r24
    1510:	8f 01       	movw	r16, r30
    1512:	ee 16       	cp	r14, r30
    1514:	ff 06       	cpc	r15, r31
    1516:	b9 f7       	brne	.-18     	; 0x1506 <_Z14ReadSubProgramj+0x51a>
    1518:	ce 01       	movw	r24, r28
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	0e 94 9b 02 	call	0x536	; 0x536 <_Z4btolPc>
    1520:	60 93 5e 28 	sts	0x285E, r22	; 0x80285e <CMDPRGlist+0x20>
    1524:	70 93 5f 28 	sts	0x285F, r23	; 0x80285f <CMDPRGlist+0x21>
    1528:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <CMDPRGlist+0x22>
    152c:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <CMDPRGlist+0x23>
    1530:	33 c0       	rjmp	.+102    	; 0x1598 <_Z14ReadSubProgramj+0x5ac>
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	08 f0       	brcs	.+2      	; 0x1538 <_Z14ReadSubProgramj+0x54c>
    1536:	fb cd       	rjmp	.-1034   	; 0x112e <_Z14ReadSubProgramj+0x142>
    1538:	16 ce       	rjmp	.-980    	; 0x1166 <_Z14ReadSubProgramj+0x17a>
    153a:	81 11       	cpse	r24, r1
    153c:	19 ce       	rjmp	.-974    	; 0x1170 <_Z14ReadSubProgramj+0x184>
    153e:	23 c0       	rjmp	.+70     	; 0x1586 <_Z14ReadSubProgramj+0x59a>
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	08 f4       	brcc	.+2      	; 0x1546 <_Z14ReadSubProgramj+0x55a>
    1544:	6c ce       	rjmp	.-808    	; 0x121e <_Z14ReadSubProgramj+0x232>
    1546:	4f ce       	rjmp	.-866    	; 0x11e6 <_Z14ReadSubProgramj+0x1fa>
    1548:	7e 01       	movw	r14, r28
    154a:	f5 e0       	ldi	r31, 0x05	; 5
    154c:	ef 0e       	add	r14, r31
    154e:	f1 1c       	adc	r15, r1
    1550:	8e 01       	movw	r16, r28
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	67 01       	movw	r12, r14
    1558:	80 ce       	rjmp	.-768    	; 0x125a <_Z14ReadSubProgramj+0x26e>
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	08 f0       	brcs	.+2      	; 0x1560 <_Z14ReadSubProgramj+0x574>
    155e:	3e cf       	rjmp	.-388    	; 0x13dc <_Z14ReadSubProgramj+0x3f0>
    1560:	59 cf       	rjmp	.-334    	; 0x1414 <_Z14ReadSubProgramj+0x428>
    1562:	81 11       	cpse	r24, r1
    1564:	5c cf       	rjmp	.-328    	; 0x141e <_Z14ReadSubProgramj+0x432>
    1566:	15 c0       	rjmp	.+42     	; 0x1592 <_Z14ReadSubProgramj+0x5a6>
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	08 f4       	brcc	.+2      	; 0x156e <_Z14ReadSubProgramj+0x582>
    156c:	af cf       	rjmp	.-162    	; 0x14cc <_Z14ReadSubProgramj+0x4e0>
    156e:	92 cf       	rjmp	.-220    	; 0x1494 <_Z14ReadSubProgramj+0x4a8>
    1570:	8e 01       	movw	r16, r28
    1572:	0b 5f       	subi	r16, 0xFB	; 251
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	ae 01       	movw	r20, r28
    1578:	4f 5f       	subi	r20, 0xFF	; 255
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	7a 01       	movw	r14, r20
    157e:	c3 cf       	rjmp	.-122    	; 0x1506 <_Z14ReadSubProgramj+0x51a>
    1580:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1584:	da cf       	rjmp	.-76     	; 0x153a <_Z14ReadSubProgramj+0x54e>
    1586:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    158a:	da cf       	rjmp	.-76     	; 0x1540 <_Z14ReadSubProgramj+0x554>
    158c:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1590:	e8 cf       	rjmp	.-48     	; 0x1562 <_Z14ReadSubProgramj+0x576>
    1592:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <CMDPRGlist+0x4>
    1596:	e8 cf       	rjmp	.-48     	; 0x1568 <_Z14ReadSubProgramj+0x57c>
    1598:	24 96       	adiw	r28, 0x04	; 4
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	08 95       	ret

000015b0 <_Z11WriteSeriall>:
    15b0:	7f 92       	push	r7
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <_Z11WriteSeriall+0x1c>
    15cc:	1f 92       	push	r1
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	4b 01       	movw	r8, r22
    15d4:	5c 01       	movw	r10, r24
    15d6:	87 ee       	ldi	r24, 0xE7	; 231
    15d8:	93 e0       	ldi	r25, 0x03	; 3
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <fk>
    15e2:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <fk+0x1>
    15e6:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <fk+0x2>
    15ea:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <fk+0x3>
    15ee:	8e ec       	ldi	r24, 0xCE	; 206
    15f0:	97 e0       	ldi	r25, 0x07	; 7
    15f2:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <ft>
    15f6:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <ft+0x1>
    15fa:	8e ec       	ldi	r24, 0xCE	; 206
    15fc:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <fadd1>
    1600:	87 e0       	ldi	r24, 0x07	; 7
    1602:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <fadd2>
    1606:	00 e8       	ldi	r16, 0x80	; 128
    1608:	16 e0       	ldi	r17, 0x06	; 6
    160a:	f8 01       	movw	r30, r16
    160c:	84 81       	ldd	r24, Z+4	; 0x04
    160e:	80 61       	ori	r24, 0x10	; 16
    1610:	84 83       	std	Z+4, r24	; 0x04
    1612:	84 81       	ldd	r24, Z+4	; 0x04
    1614:	8f 7e       	andi	r24, 0xEF	; 239
    1616:	84 83       	std	Z+4, r24	; 0x04
    1618:	81 e8       	ldi	r24, 0x81	; 129
    161a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    161e:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
    1622:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1626:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
    162a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1634:	f8 01       	movw	r30, r16
    1636:	84 81       	ldd	r24, Z+4	; 0x04
    1638:	80 61       	ori	r24, 0x10	; 16
    163a:	84 83       	std	Z+4, r24	; 0x04
    163c:	0f 2e       	mov	r0, r31
    163e:	f0 ee       	ldi	r31, 0xE0	; 224
    1640:	ef 2e       	mov	r14, r31
    1642:	f7 e0       	ldi	r31, 0x07	; 7
    1644:	ff 2e       	mov	r15, r31
    1646:	f0 2d       	mov	r31, r0
    1648:	0f 2e       	mov	r0, r31
    164a:	f1 eb       	ldi	r31, 0xB1	; 177
    164c:	cf 2e       	mov	r12, r31
    164e:	f0 e2       	ldi	r31, 0x20	; 32
    1650:	df 2e       	mov	r13, r31
    1652:	f0 2d       	mov	r31, r0
    1654:	f8 01       	movw	r30, r16
    1656:	84 81       	ldd	r24, Z+4	; 0x04
    1658:	8f 7e       	andi	r24, 0xEF	; 239
    165a:	84 83       	std	Z+4, r24	; 0x04
    165c:	f7 01       	movw	r30, r14
    165e:	84 81       	ldd	r24, Z+4	; 0x04
    1660:	80 ff       	sbrs	r24, 0
    1662:	03 c0       	rjmp	.+6      	; 0x166a <_Z11WriteSeriall+0xba>
    1664:	84 81       	ldd	r24, Z+4	; 0x04
    1666:	84 83       	std	Z+4, r24	; 0x04
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <_Z11WriteSeriall+0xc2>
    166a:	f7 01       	movw	r30, r14
    166c:	84 81       	ldd	r24, Z+4	; 0x04
    166e:	81 60       	ori	r24, 0x01	; 1
    1670:	84 83       	std	Z+4, r24	; 0x04
    1672:	87 ed       	ldi	r24, 0xD7	; 215
    1674:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    167e:	78 2e       	mov	r7, r24
    1680:	1f 92       	push	r1
    1682:	8f 93       	push	r24
    1684:	df 92       	push	r13
    1686:	cf 92       	push	r12
    1688:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    168c:	f8 01       	movw	r30, r16
    168e:	84 81       	ldd	r24, Z+4	; 0x04
    1690:	80 61       	ori	r24, 0x10	; 16
    1692:	84 83       	std	Z+4, r24	; 0x04
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	77 20       	and	r7, r7
    169e:	d4 f6       	brge	.-76     	; 0x1654 <_Z11WriteSeriall+0xa4>
    16a0:	e0 e8       	ldi	r30, 0x80	; 128
    16a2:	f6 e0       	ldi	r31, 0x06	; 6
    16a4:	84 81       	ldd	r24, Z+4	; 0x04
    16a6:	8f 7e       	andi	r24, 0xEF	; 239
    16a8:	84 83       	std	Z+4, r24	; 0x04
    16aa:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7007e4>
    16ae:	81 ff       	sbrs	r24, 1
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <_Z11WriteSeriall+0x10e>
    16b2:	e0 ee       	ldi	r30, 0xE0	; 224
    16b4:	f7 e0       	ldi	r31, 0x07	; 7
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	8e 7f       	andi	r24, 0xFE	; 254
    16ba:	84 83       	std	Z+4, r24	; 0x04
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <_Z11WriteSeriall+0x118>
    16be:	e0 ee       	ldi	r30, 0xE0	; 224
    16c0:	f7 e0       	ldi	r31, 0x07	; 7
    16c2:	84 81       	ldd	r24, Z+4	; 0x04
    16c4:	82 60       	ori	r24, 0x02	; 2
    16c6:	84 83       	std	Z+4, r24	; 0x04
    16c8:	84 e8       	ldi	r24, 0x84	; 132
    16ca:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    16ce:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
    16d2:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    16d6:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
    16da:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    16e4:	ae 01       	movw	r20, r28
    16e6:	4f 5f       	subi	r20, 0xFF	; 255
    16e8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ea:	c5 01       	movw	r24, r10
    16ec:	b4 01       	movw	r22, r8
    16ee:	0e 94 95 02 	call	0x52a	; 0x52a <_Z4ltoblPc>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	1f 92       	push	r1
    16f6:	8f 93       	push	r24
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	1f 92       	push	r1
    16fc:	8f 93       	push	r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	1f 92       	push	r1
    1702:	8f 93       	push	r24
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	1f 92       	push	r1
    1708:	8f 93       	push	r24
    170a:	8e eb       	ldi	r24, 0xBE	; 190
    170c:	90 e2       	ldi	r25, 0x20	; 32
    170e:	9f 93       	push	r25
    1710:	8f 93       	push	r24
    1712:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    172e:	00 e8       	ldi	r16, 0x80	; 128
    1730:	16 e0       	ldi	r17, 0x06	; 6
    1732:	f8 01       	movw	r30, r16
    1734:	84 81       	ldd	r24, Z+4	; 0x04
    1736:	80 61       	ori	r24, 0x10	; 16
    1738:	84 83       	std	Z+4, r24	; 0x04
    173a:	84 81       	ldd	r24, Z+4	; 0x04
    173c:	8f 7e       	andi	r24, 0xEF	; 239
    173e:	84 83       	std	Z+4, r24	; 0x04
    1740:	83 e8       	ldi	r24, 0x83	; 131
    1742:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1746:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <fadd2>
    174a:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    174e:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <fadd1>
    1752:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	0e 94 8b 02 	call	0x516	; 0x516 <_Z17spie_master_tx_rxh>
    175c:	f8 01       	movw	r30, r16
    175e:	84 81       	ldd	r24, Z+4	; 0x04
    1760:	80 61       	ori	r24, 0x10	; 16
    1762:	84 83       	std	Z+4, r24	; 0x04
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	24 96       	adiw	r28, 0x04	; 4
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	df 90       	pop	r13
    177c:	cf 90       	pop	r12
    177e:	bf 90       	pop	r11
    1780:	af 90       	pop	r10
    1782:	9f 90       	pop	r9
    1784:	8f 90       	pop	r8
    1786:	7f 90       	pop	r7
    1788:	08 95       	ret

0000178a <_Z9tcc0_initv>:
    178a:	2f b7       	in	r18, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	e0 e0       	ldi	r30, 0x00	; 0
    1790:	f8 e0       	ldi	r31, 0x08	; 8
    1792:	10 82       	st	Z, r1
    1794:	8c e0       	ldi	r24, 0x0C	; 12
    1796:	81 87       	std	Z+9, r24	; 0x09
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	80 83       	st	Z, r24
    179c:	81 83       	std	Z+1, r24	; 0x01
    179e:	13 82       	std	Z+3, r1	; 0x03
    17a0:	14 82       	std	Z+4, r1	; 0x04
    17a2:	16 82       	std	Z+6, r1	; 0x06
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	87 83       	std	Z+7, r24	; 0x07
    17a8:	a0 e9       	ldi	r26, 0x90	; 144
    17aa:	b8 e0       	ldi	r27, 0x08	; 8
    17ac:	8c 91       	ld	r24, X
    17ae:	8e 7f       	andi	r24, 0xFE	; 254
    17b0:	8c 93       	st	X, r24
    17b2:	a0 e9       	ldi	r26, 0x90	; 144
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	19 96       	adiw	r26, 0x09	; 9
    17b8:	8c 91       	ld	r24, X
    17ba:	19 97       	sbiw	r26, 0x09	; 9
    17bc:	8e 7f       	andi	r24, 0xFE	; 254
    17be:	98 ed       	ldi	r25, 0xD8	; 216
    17c0:	94 bf       	out	0x34, r25	; 52
    17c2:	19 96       	adiw	r26, 0x09	; 9
    17c4:	8c 93       	st	X, r24
    17c6:	a0 e8       	ldi	r26, 0x80	; 128
    17c8:	b8 e0       	ldi	r27, 0x08	; 8
    17ca:	1c 92       	st	X, r1
    17cc:	18 96       	adiw	r26, 0x08	; 8
    17ce:	1c 92       	st	X, r1
    17d0:	18 97       	sbiw	r26, 0x08	; 8
    17d2:	19 96       	adiw	r26, 0x09	; 9
    17d4:	1c 92       	st	X, r1
    17d6:	19 97       	sbiw	r26, 0x09	; 9
    17d8:	1c 96       	adiw	r26, 0x0c	; 12
    17da:	1c 92       	st	X, r1
    17dc:	1c 97       	sbiw	r26, 0x0c	; 12
    17de:	13 96       	adiw	r26, 0x03	; 3
    17e0:	8c 91       	ld	r24, X
    17e2:	13 97       	sbiw	r26, 0x03	; 3
    17e4:	88 7e       	andi	r24, 0xE8	; 232
    17e6:	13 96       	adiw	r26, 0x03	; 3
    17e8:	8c 93       	st	X, r24
    17ea:	13 97       	sbiw	r26, 0x03	; 3
    17ec:	12 96       	adiw	r26, 0x02	; 2
    17ee:	1c 92       	st	X, r1
    17f0:	12 97       	sbiw	r26, 0x02	; 2
    17f2:	14 96       	adiw	r26, 0x04	; 4
    17f4:	8c 91       	ld	r24, X
    17f6:	14 97       	sbiw	r26, 0x04	; 4
    17f8:	14 96       	adiw	r26, 0x04	; 4
    17fa:	9c 91       	ld	r25, X
    17fc:	14 97       	sbiw	r26, 0x04	; 4
    17fe:	84 70       	andi	r24, 0x04	; 4
    1800:	89 2b       	or	r24, r25
    1802:	14 96       	adiw	r26, 0x04	; 4
    1804:	8c 93       	st	X, r24
    1806:	84 85       	ldd	r24, Z+12	; 0x0c
    1808:	84 87       	std	Z+12, r24	; 0x0c
    180a:	10 a2       	std	Z+32, r1	; 0x20
    180c:	11 a2       	std	Z+33, r1	; 0x21
    180e:	16 a2       	std	Z+38, r1	; 0x26
    1810:	17 a2       	std	Z+39, r1	; 0x27
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	80 a7       	std	Z+40, r24	; 0x28
    1818:	91 a7       	std	Z+41, r25	; 0x29
    181a:	12 a6       	std	Z+42, r1	; 0x2a
    181c:	13 a6       	std	Z+43, r1	; 0x2b
    181e:	14 a6       	std	Z+44, r1	; 0x2c
    1820:	15 a6       	std	Z+45, r1	; 0x2d
    1822:	16 a6       	std	Z+46, r1	; 0x2e
    1824:	17 a6       	std	Z+47, r1	; 0x2f
    1826:	2f bf       	out	0x3f, r18	; 63
    1828:	08 95       	ret

0000182a <_Z9tcc1_initv>:

// Note: The correct PORTC direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    182a:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    182c:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    182e:	e0 e4       	ldi	r30, 0x40	; 64
    1830:	f8 e0       	ldi	r31, 0x08	; 8
    1832:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    1834:	8c e0       	ldi	r24, 0x0C	; 12
    1836:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCC1);
// Clock source: ClkPer/8
TCC1.CTRLA=TC_CLKSEL_DIV8_gc;
    1838:	84 e0       	ldi	r24, 0x04	; 4
    183a:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCC1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    183c:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCC1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    183e:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCC1.CTRLE=(0<<TC1_BYTEM_bp);
    1840:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Medium Level
// Error interrupt: Disabled
TCC1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCC1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1846:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESC.CTRLA&= ~HIRES_HREN1_bm;
    1848:	a0 e9       	ldi	r26, 0x90	; 144
    184a:	b8 e0       	ldi	r27, 0x08	; 8
    184c:	8c 91       	ld	r24, X
    184e:	8d 7f       	andi	r24, 0xFD	; 253
    1850:	8c 93       	st	X, r24

// Clear the interrupt flags
TCC1.INTFLAGS=TCC1.INTFLAGS;
    1852:	84 85       	ldd	r24, Z+12	; 0x0c
    1854:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCC1.CNT=0x0000;
    1856:	10 a2       	std	Z+32, r1	; 0x20
    1858:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCC1.PER=0x9C3F;
    185a:	2f e3       	ldi	r18, 0x3F	; 63
    185c:	3c e9       	ldi	r19, 0x9C	; 156
    185e:	26 a3       	std	Z+38, r18	; 0x26
    1860:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCC1.CCA=0x0000;
    1862:	10 a6       	std	Z+40, r1	; 0x28
    1864:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCC1.CCB=0x0000;
    1866:	12 a6       	std	Z+42, r1	; 0x2a
    1868:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    186a:	9f bf       	out	0x3f, r25	; 63
    186c:	08 95       	ret

0000186e <_Z9tcd1_initv>:

// Note: The correct PORTD direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    186e:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    1870:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    1872:	e0 e4       	ldi	r30, 0x40	; 64
    1874:	f9 e0       	ldi	r31, 0x09	; 9
    1876:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    1878:	8c e0       	ldi	r24, 0x0C	; 12
    187a:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCD1);
// Clock source: ClkPer/64
TCD1.CTRLA=TC_CLKSEL_DIV64_gc;
    187c:	85 e0       	ldi	r24, 0x05	; 5
    187e:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCD1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    1880:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCD1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1882:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCD1.CTRLE=(0<<TC1_BYTEM_bp);
    1884:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Low Level
// Error interrupt: Disabled
TCD1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_LO_gc;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCD1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    188a:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESD.CTRLA&= ~HIRES_HREN1_bm;
    188c:	a0 e9       	ldi	r26, 0x90	; 144
    188e:	b9 e0       	ldi	r27, 0x09	; 9
    1890:	8c 91       	ld	r24, X
    1892:	8d 7f       	andi	r24, 0xFD	; 253
    1894:	8c 93       	st	X, r24

// Clear the interrupt flags
TCD1.INTFLAGS=TCD1.INTFLAGS;
    1896:	84 85       	ldd	r24, Z+12	; 0x0c
    1898:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCD1.CNT=0x0000;
    189a:	10 a2       	std	Z+32, r1	; 0x20
    189c:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCD1.PER=0xC34F;
    189e:	2f e4       	ldi	r18, 0x4F	; 79
    18a0:	33 ec       	ldi	r19, 0xC3	; 195
    18a2:	26 a3       	std	Z+38, r18	; 0x26
    18a4:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCD1.CCA=0x0000;
    18a6:	10 a6       	std	Z+40, r1	; 0x28
    18a8:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCD1.CCB=0x0000;
    18aa:	12 a6       	std	Z+42, r1	; 0x2a
    18ac:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    18ae:	9f bf       	out	0x3f, r25	; 63
    18b0:	08 95       	ret

000018b2 <__vector_16>:

// Timer/Counter TCC0 Compare/Capture A interrupt service routine
// timer to make pulses level 0

ISR (TCC0_CCA_vect) 
{          
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	08 b6       	in	r0, 0x38	; 56
    18be:	0f 92       	push	r0
    18c0:	18 be       	out	0x38, r1	; 56
    18c2:	09 b6       	in	r0, 0x39	; 57
    18c4:	0f 92       	push	r0
    18c6:	19 be       	out	0x39, r1	; 57
    18c8:	0b b6       	in	r0, 0x3b	; 59
    18ca:	0f 92       	push	r0
    18cc:	1b be       	out	0x3b, r1	; 59
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
    if (TCC0.INTFLAGS & TC0_CCAIF_bm) TCC0.INTFLAGS|=TC0_CCAIF_bm;   
    18e6:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    18ea:	84 ff       	sbrs	r24, 4
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <__vector_16+0x46>
    18ee:	e0 e0       	ldi	r30, 0x00	; 0
    18f0:	f8 e0       	ldi	r31, 0x08	; 8
    18f2:	84 85       	ldd	r24, Z+12	; 0x0c
    18f4:	80 61       	ori	r24, 0x10	; 16
    18f6:	84 87       	std	Z+12, r24	; 0x0c
     
    if(MaxDistanceToGo>0) MaxDistanceToGo--;
    18f8:	80 91 94 27 	lds	r24, 0x2794	; 0x802794 <MaxDistanceToGo>
    18fc:	90 91 95 27 	lds	r25, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    1900:	a0 91 96 27 	lds	r26, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    1904:	b0 91 97 27 	lds	r27, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    1908:	18 16       	cp	r1, r24
    190a:	19 06       	cpc	r1, r25
    190c:	1a 06       	cpc	r1, r26
    190e:	1b 06       	cpc	r1, r27
    1910:	5c f4       	brge	.+22     	; 0x1928 <__vector_16+0x76>
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	a1 09       	sbc	r26, r1
    1916:	b1 09       	sbc	r27, r1
    1918:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <MaxDistanceToGo>
    191c:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <MaxDistanceToGo+0x1>
    1920:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <MaxDistanceToGo+0x2>
    1924:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <MaxDistanceToGo+0x3>
     
    if(DistanceToGo1>0)
    1928:	40 91 90 27 	lds	r20, 0x2790	; 0x802790 <DistanceToGo1>
    192c:	50 91 91 27 	lds	r21, 0x2791	; 0x802791 <DistanceToGo1+0x1>
    1930:	60 91 92 27 	lds	r22, 0x2792	; 0x802792 <DistanceToGo1+0x2>
    1934:	70 91 93 27 	lds	r23, 0x2793	; 0x802793 <DistanceToGo1+0x3>
    1938:	14 16       	cp	r1, r20
    193a:	15 06       	cpc	r1, r21
    193c:	16 06       	cpc	r1, r22
    193e:	17 06       	cpc	r1, r23
    1940:	0c f0       	brlt	.+2      	; 0x1944 <__vector_16+0x92>
    1942:	57 c0       	rjmp	.+174    	; 0x19f2 <__vector_16+0x140>
    {              
      Pi1+=Ma1; 
    1944:	20 91 36 27 	lds	r18, 0x2736	; 0x802736 <Pi1>
    1948:	30 91 37 27 	lds	r19, 0x2737	; 0x802737 <Pi1+0x1>
    194c:	80 91 30 27 	lds	r24, 0x2730	; 0x802730 <Ma1>
    1950:	90 91 31 27 	lds	r25, 0x2731	; 0x802731 <Ma1+0x1>
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	80 93 36 27 	sts	0x2736, r24	; 0x802736 <Pi1>
    195c:	90 93 37 27 	sts	0x2737, r25	; 0x802737 <Pi1+0x1>
      if(Pi1>=1000)
    1960:	88 3e       	cpi	r24, 0xE8	; 232
    1962:	23 e0       	ldi	r18, 0x03	; 3
    1964:	92 07       	cpc	r25, r18
    1966:	08 f4       	brcc	.+2      	; 0x196a <__vector_16+0xb8>
    1968:	40 c0       	rjmp	.+128    	; 0x19ea <__vector_16+0x138>
      {                   
        PULSE1;
    196a:	e0 e2       	ldi	r30, 0x20	; 32
    196c:	f7 e0       	ldi	r31, 0x07	; 7
    196e:	20 e2       	ldi	r18, 0x20	; 32
    1970:	27 83       	std	Z+7, r18	; 0x07
        Pi1-=1000;
    1972:	88 5e       	subi	r24, 0xE8	; 232
    1974:	93 40       	sbci	r25, 0x03	; 3
    1976:	80 93 36 27 	sts	0x2736, r24	; 0x802736 <Pi1>
    197a:	90 93 37 27 	sts	0x2737, r25	; 0x802737 <Pi1+0x1>
        DistanceToGo1--;   
    197e:	41 50       	subi	r20, 0x01	; 1
    1980:	51 09       	sbc	r21, r1
    1982:	61 09       	sbc	r22, r1
    1984:	71 09       	sbc	r23, r1
    1986:	40 93 90 27 	sts	0x2790, r20	; 0x802790 <DistanceToGo1>
    198a:	50 93 91 27 	sts	0x2791, r21	; 0x802791 <DistanceToGo1+0x1>
    198e:	60 93 92 27 	sts	0x2792, r22	; 0x802792 <DistanceToGo1+0x2>
    1992:	70 93 93 27 	sts	0x2793, r23	; 0x802793 <DistanceToGo1+0x3>
        if(DIR1==0) AxisPosition1--;  
    1996:	84 81       	ldd	r24, Z+4	; 0x04
    1998:	84 fd       	sbrc	r24, 4
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <__vector_16+0x112>
    199c:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    19a0:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    19a4:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    19a8:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	a1 09       	sbc	r26, r1
    19b0:	b1 09       	sbc	r27, r1
    19b2:	80 93 ac 27 	sts	0x27AC, r24	; 0x8027ac <AxisPosition1>
    19b6:	90 93 ad 27 	sts	0x27AD, r25	; 0x8027ad <AxisPosition1+0x1>
    19ba:	a0 93 ae 27 	sts	0x27AE, r26	; 0x8027ae <AxisPosition1+0x2>
    19be:	b0 93 af 27 	sts	0x27AF, r27	; 0x8027af <AxisPosition1+0x3>
    19c2:	13 c0       	rjmp	.+38     	; 0x19ea <__vector_16+0x138>
        else AxisPosition1++; 
    19c4:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    19c8:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    19cc:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    19d0:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	a1 1d       	adc	r26, r1
    19d8:	b1 1d       	adc	r27, r1
    19da:	80 93 ac 27 	sts	0x27AC, r24	; 0x8027ac <AxisPosition1>
    19de:	90 93 ad 27 	sts	0x27AD, r25	; 0x8027ad <AxisPosition1+0x1>
    19e2:	a0 93 ae 27 	sts	0x27AE, r26	; 0x8027ae <AxisPosition1+0x2>
    19e6:	b0 93 af 27 	sts	0x27AF, r27	; 0x8027af <AxisPosition1+0x3>
      } 
      AxisIsMoving1=1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 93 48 27 	sts	0x2748, r24	; 0x802748 <AxisIsMoving1>
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <__vector_16+0x144>
    } 
    else
    {
      AxisIsMoving1=0;
    19f2:	10 92 48 27 	sts	0x2748, r1	; 0x802748 <AxisIsMoving1>
    }   
                            
    if(DistanceToGo2>0)
    19f6:	40 91 8c 27 	lds	r20, 0x278C	; 0x80278c <DistanceToGo2>
    19fa:	50 91 8d 27 	lds	r21, 0x278D	; 0x80278d <DistanceToGo2+0x1>
    19fe:	60 91 8e 27 	lds	r22, 0x278E	; 0x80278e <DistanceToGo2+0x2>
    1a02:	70 91 8f 27 	lds	r23, 0x278F	; 0x80278f <DistanceToGo2+0x3>
    1a06:	14 16       	cp	r1, r20
    1a08:	15 06       	cpc	r1, r21
    1a0a:	16 06       	cpc	r1, r22
    1a0c:	17 06       	cpc	r1, r23
    1a0e:	0c f0       	brlt	.+2      	; 0x1a12 <__vector_16+0x160>
    1a10:	57 c0       	rjmp	.+174    	; 0x1ac0 <__vector_16+0x20e>
    {
      Pi2+=Ma2; 
    1a12:	20 91 34 27 	lds	r18, 0x2734	; 0x802734 <Pi2>
    1a16:	30 91 35 27 	lds	r19, 0x2735	; 0x802735 <Pi2+0x1>
    1a1a:	80 91 2e 27 	lds	r24, 0x272E	; 0x80272e <Ma2>
    1a1e:	90 91 2f 27 	lds	r25, 0x272F	; 0x80272f <Ma2+0x1>
    1a22:	82 0f       	add	r24, r18
    1a24:	93 1f       	adc	r25, r19
    1a26:	80 93 34 27 	sts	0x2734, r24	; 0x802734 <Pi2>
    1a2a:	90 93 35 27 	sts	0x2735, r25	; 0x802735 <Pi2+0x1>
      if(Pi2>=1000)
    1a2e:	88 3e       	cpi	r24, 0xE8	; 232
    1a30:	23 e0       	ldi	r18, 0x03	; 3
    1a32:	92 07       	cpc	r25, r18
    1a34:	08 f4       	brcc	.+2      	; 0x1a38 <__vector_16+0x186>
    1a36:	40 c0       	rjmp	.+128    	; 0x1ab8 <__vector_16+0x206>
      {                   
        PULSE2;
    1a38:	e0 e2       	ldi	r30, 0x20	; 32
    1a3a:	f7 e0       	ldi	r31, 0x07	; 7
    1a3c:	28 e0       	ldi	r18, 0x08	; 8
    1a3e:	27 83       	std	Z+7, r18	; 0x07
        Pi2-=1000;
    1a40:	88 5e       	subi	r24, 0xE8	; 232
    1a42:	93 40       	sbci	r25, 0x03	; 3
    1a44:	80 93 34 27 	sts	0x2734, r24	; 0x802734 <Pi2>
    1a48:	90 93 35 27 	sts	0x2735, r25	; 0x802735 <Pi2+0x1>
        DistanceToGo2--;   
    1a4c:	41 50       	subi	r20, 0x01	; 1
    1a4e:	51 09       	sbc	r21, r1
    1a50:	61 09       	sbc	r22, r1
    1a52:	71 09       	sbc	r23, r1
    1a54:	40 93 8c 27 	sts	0x278C, r20	; 0x80278c <DistanceToGo2>
    1a58:	50 93 8d 27 	sts	0x278D, r21	; 0x80278d <DistanceToGo2+0x1>
    1a5c:	60 93 8e 27 	sts	0x278E, r22	; 0x80278e <DistanceToGo2+0x2>
    1a60:	70 93 8f 27 	sts	0x278F, r23	; 0x80278f <DistanceToGo2+0x3>
        if(DIR2==0) AxisPosition2--;  
    1a64:	84 81       	ldd	r24, Z+4	; 0x04
    1a66:	82 fd       	sbrc	r24, 2
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <__vector_16+0x1e0>
    1a6a:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    1a6e:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    1a72:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    1a76:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	a1 09       	sbc	r26, r1
    1a7e:	b1 09       	sbc	r27, r1
    1a80:	80 93 a8 27 	sts	0x27A8, r24	; 0x8027a8 <AxisPosition2>
    1a84:	90 93 a9 27 	sts	0x27A9, r25	; 0x8027a9 <AxisPosition2+0x1>
    1a88:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <AxisPosition2+0x2>
    1a8c:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <AxisPosition2+0x3>
    1a90:	13 c0       	rjmp	.+38     	; 0x1ab8 <__vector_16+0x206>
        else AxisPosition2++; 
    1a92:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    1a96:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    1a9a:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    1a9e:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	a1 1d       	adc	r26, r1
    1aa6:	b1 1d       	adc	r27, r1
    1aa8:	80 93 a8 27 	sts	0x27A8, r24	; 0x8027a8 <AxisPosition2>
    1aac:	90 93 a9 27 	sts	0x27A9, r25	; 0x8027a9 <AxisPosition2+0x1>
    1ab0:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <AxisPosition2+0x2>
    1ab4:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <AxisPosition2+0x3>
      }
     AxisIsMoving2=1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	80 93 47 27 	sts	0x2747, r24	; 0x802747 <AxisIsMoving2>
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <__vector_16+0x212>
    } 
    else
    {
      AxisIsMoving2=0;
    1ac0:	10 92 47 27 	sts	0x2747, r1	; 0x802747 <AxisIsMoving2>
    }
        
    if(DistanceToGo3>0)
    1ac4:	40 91 88 27 	lds	r20, 0x2788	; 0x802788 <DistanceToGo3>
    1ac8:	50 91 89 27 	lds	r21, 0x2789	; 0x802789 <DistanceToGo3+0x1>
    1acc:	60 91 8a 27 	lds	r22, 0x278A	; 0x80278a <DistanceToGo3+0x2>
    1ad0:	70 91 8b 27 	lds	r23, 0x278B	; 0x80278b <DistanceToGo3+0x3>
    1ad4:	14 16       	cp	r1, r20
    1ad6:	15 06       	cpc	r1, r21
    1ad8:	16 06       	cpc	r1, r22
    1ada:	17 06       	cpc	r1, r23
    1adc:	0c f0       	brlt	.+2      	; 0x1ae0 <__vector_16+0x22e>
    1ade:	57 c0       	rjmp	.+174    	; 0x1b8e <__vector_16+0x2dc>
    {
      Pi3+=Ma3; 
    1ae0:	20 91 32 27 	lds	r18, 0x2732	; 0x802732 <Pi3>
    1ae4:	30 91 33 27 	lds	r19, 0x2733	; 0x802733 <Pi3+0x1>
    1ae8:	80 91 2c 27 	lds	r24, 0x272C	; 0x80272c <Ma3>
    1aec:	90 91 2d 27 	lds	r25, 0x272D	; 0x80272d <Ma3+0x1>
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	80 93 32 27 	sts	0x2732, r24	; 0x802732 <Pi3>
    1af8:	90 93 33 27 	sts	0x2733, r25	; 0x802733 <Pi3+0x1>
      if(Pi3>=1000)
    1afc:	88 3e       	cpi	r24, 0xE8	; 232
    1afe:	23 e0       	ldi	r18, 0x03	; 3
    1b00:	92 07       	cpc	r25, r18
    1b02:	08 f4       	brcc	.+2      	; 0x1b06 <__vector_16+0x254>
    1b04:	40 c0       	rjmp	.+128    	; 0x1b86 <__vector_16+0x2d4>
      {                   
        PULSE3;
    1b06:	e0 e2       	ldi	r30, 0x20	; 32
    1b08:	f7 e0       	ldi	r31, 0x07	; 7
    1b0a:	22 e0       	ldi	r18, 0x02	; 2
    1b0c:	27 83       	std	Z+7, r18	; 0x07
        Pi3-=1000;
    1b0e:	88 5e       	subi	r24, 0xE8	; 232
    1b10:	93 40       	sbci	r25, 0x03	; 3
    1b12:	80 93 32 27 	sts	0x2732, r24	; 0x802732 <Pi3>
    1b16:	90 93 33 27 	sts	0x2733, r25	; 0x802733 <Pi3+0x1>
        DistanceToGo3--;   
    1b1a:	41 50       	subi	r20, 0x01	; 1
    1b1c:	51 09       	sbc	r21, r1
    1b1e:	61 09       	sbc	r22, r1
    1b20:	71 09       	sbc	r23, r1
    1b22:	40 93 88 27 	sts	0x2788, r20	; 0x802788 <DistanceToGo3>
    1b26:	50 93 89 27 	sts	0x2789, r21	; 0x802789 <DistanceToGo3+0x1>
    1b2a:	60 93 8a 27 	sts	0x278A, r22	; 0x80278a <DistanceToGo3+0x2>
    1b2e:	70 93 8b 27 	sts	0x278B, r23	; 0x80278b <DistanceToGo3+0x3>
        if(DIR3==0) AxisPosition3--;  
    1b32:	84 81       	ldd	r24, Z+4	; 0x04
    1b34:	80 fd       	sbrc	r24, 0
    1b36:	14 c0       	rjmp	.+40     	; 0x1b60 <__vector_16+0x2ae>
    1b38:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    1b3c:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    1b40:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    1b44:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	a1 09       	sbc	r26, r1
    1b4c:	b1 09       	sbc	r27, r1
    1b4e:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <AxisPosition3>
    1b52:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <AxisPosition3+0x1>
    1b56:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <AxisPosition3+0x2>
    1b5a:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <AxisPosition3+0x3>
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <__vector_16+0x2d4>
        else AxisPosition3++; 
    1b60:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    1b64:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    1b68:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    1b6c:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	a1 1d       	adc	r26, r1
    1b74:	b1 1d       	adc	r27, r1
    1b76:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <AxisPosition3>
    1b7a:	90 93 a5 27 	sts	0x27A5, r25	; 0x8027a5 <AxisPosition3+0x1>
    1b7e:	a0 93 a6 27 	sts	0x27A6, r26	; 0x8027a6 <AxisPosition3+0x2>
    1b82:	b0 93 a7 27 	sts	0x27A7, r27	; 0x8027a7 <AxisPosition3+0x3>
      }
     AxisIsMoving3=1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	80 93 46 27 	sts	0x2746, r24	; 0x802746 <AxisIsMoving3>
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <__vector_16+0x2e0>
    } 
    else
    {
      AxisIsMoving3=0;
    1b8e:	10 92 46 27 	sts	0x2746, r1	; 0x802746 <AxisIsMoving3>
    }
}
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	bf 91       	pop	r27
    1b98:	af 91       	pop	r26
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0b be       	out	0x3b, r0	; 59
    1bae:	0f 90       	pop	r0
    1bb0:	09 be       	out	0x39, r0	; 57
    1bb2:	0f 90       	pop	r0
    1bb4:	08 be       	out	0x38, r0	; 56
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <__vector_20>:

// Timer/Counter TCC1 Overflow/Underflow interrupt service routine
// Timer to set speed according to acceleration and deceleration Level 1
ISR (TCC1_OVF_vect)
{
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	08 b6       	in	r0, 0x38	; 56
    1bcc:	0f 92       	push	r0
    1bce:	18 be       	out	0x38, r1	; 56
    1bd0:	09 b6       	in	r0, 0x39	; 57
    1bd2:	0f 92       	push	r0
    1bd4:	19 be       	out	0x39, r1	; 57
    1bd6:	0b b6       	in	r0, 0x3b	; 59
    1bd8:	0f 92       	push	r0
    1bda:	1b be       	out	0x3b, r1	; 59
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	2f 93       	push	r18
    1bea:	3f 93       	push	r19
    1bec:	4f 93       	push	r20
    1bee:	5f 93       	push	r21
    1bf0:	6f 93       	push	r22
    1bf2:	7f 93       	push	r23
    1bf4:	8f 93       	push	r24
    1bf6:	9f 93       	push	r25
    1bf8:	af 93       	push	r26
    1bfa:	bf 93       	push	r27
    1bfc:	ef 93       	push	r30
    1bfe:	ff 93       	push	r31
  float PER;
  j++;   
    1c00:	80 91 26 27 	lds	r24, 0x2726	; 0x802726 <j>
    1c04:	90 91 27 27 	lds	r25, 0x2727	; 0x802727 <j+0x1>
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	80 93 26 27 	sts	0x2726, r24	; 0x802726 <j>
    1c0e:	90 93 27 27 	sts	0x2727, r25	; 0x802727 <j+0x1>
  if(MaxDistanceToGo>0)
    1c12:	c0 90 94 27 	lds	r12, 0x2794	; 0x802794 <MaxDistanceToGo>
    1c16:	d0 90 95 27 	lds	r13, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    1c1a:	e0 90 96 27 	lds	r14, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    1c1e:	f0 90 97 27 	lds	r15, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    1c22:	1c 14       	cp	r1, r12
    1c24:	1d 04       	cpc	r1, r13
    1c26:	1e 04       	cpc	r1, r14
    1c28:	1f 04       	cpc	r1, r15
    1c2a:	0c f0       	brlt	.+2      	; 0x1c2e <__vector_20+0x6e>
    1c2c:	86 c0       	rjmp	.+268    	; 0x1d3a <__vector_20+0x17a>
  {
    if(MaxDistanceToGo >= AccDTG)
    1c2e:	80 91 84 27 	lds	r24, 0x2784	; 0x802784 <AccDTG>
    1c32:	90 91 85 27 	lds	r25, 0x2785	; 0x802785 <AccDTG+0x1>
    1c36:	a0 91 86 27 	lds	r26, 0x2786	; 0x802786 <AccDTG+0x2>
    1c3a:	b0 91 87 27 	lds	r27, 0x2787	; 0x802787 <AccDTG+0x3>
    1c3e:	c8 16       	cp	r12, r24
    1c40:	d9 06       	cpc	r13, r25
    1c42:	ea 06       	cpc	r14, r26
    1c44:	fb 06       	cpc	r15, r27
    1c46:	b4 f1       	brlt	.+108    	; 0x1cb4 <__vector_20+0xf4>
    {
    CurSpeedFrq+= ACCSpeedINT; 
    1c48:	40 91 42 27 	lds	r20, 0x2742	; 0x802742 <CurSpeedFrq>
    1c4c:	50 91 43 27 	lds	r21, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1c50:	60 91 44 27 	lds	r22, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1c54:	70 91 45 27 	lds	r23, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1c58:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <ACCSpeedINT>
    1c5c:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <ACCSpeedINT+0x1>
    1c60:	a0 91 40 27 	lds	r26, 0x2740	; 0x802740 <ACCSpeedINT+0x2>
    1c64:	b0 91 41 27 	lds	r27, 0x2741	; 0x802741 <ACCSpeedINT+0x3>
    1c68:	8a 01       	movw	r16, r20
    1c6a:	9b 01       	movw	r18, r22
    1c6c:	08 0f       	add	r16, r24
    1c6e:	19 1f       	adc	r17, r25
    1c70:	2a 1f       	adc	r18, r26
    1c72:	3b 1f       	adc	r19, r27
    1c74:	c9 01       	movw	r24, r18
    1c76:	b8 01       	movw	r22, r16
    1c78:	00 93 42 27 	sts	0x2742, r16	; 0x802742 <CurSpeedFrq>
    1c7c:	10 93 43 27 	sts	0x2743, r17	; 0x802743 <CurSpeedFrq+0x1>
    1c80:	20 93 44 27 	sts	0x2744, r18	; 0x802744 <CurSpeedFrq+0x2>
    1c84:	30 93 45 27 	sts	0x2745, r19	; 0x802745 <CurSpeedFrq+0x3>
    PER=(float)(16000.0/CurSpeedFrq);        
    TCC0.CCA=(unsigned int)(PER*1000);
    1c88:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    1c8c:	9b 01       	movw	r18, r22
    1c8e:	ac 01       	movw	r20, r24
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	8a e7       	ldi	r24, 0x7A	; 122
    1c96:	96 e4       	ldi	r25, 0x46	; 70
    1c98:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a e7       	ldi	r20, 0x7A	; 122
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    1ca8:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    1cac:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1cb0:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    }
    if(MaxDistanceToGo <= DecDTG)
    1cb4:	80 91 80 27 	lds	r24, 0x2780	; 0x802780 <DecDTG>
    1cb8:	90 91 81 27 	lds	r25, 0x2781	; 0x802781 <DecDTG+0x1>
    1cbc:	a0 91 82 27 	lds	r26, 0x2782	; 0x802782 <DecDTG+0x2>
    1cc0:	b0 91 83 27 	lds	r27, 0x2783	; 0x802783 <DecDTG+0x3>
    1cc4:	8c 15       	cp	r24, r12
    1cc6:	9d 05       	cpc	r25, r13
    1cc8:	ae 05       	cpc	r26, r14
    1cca:	bf 05       	cpc	r27, r15
    1ccc:	0c f4       	brge	.+2      	; 0x1cd0 <__vector_20+0x110>
    1cce:	04 c1       	rjmp	.+520    	; 0x1ed8 <__vector_20+0x318>
    {
    CurSpeedFrq-= ACCSpeedINT; 
    1cd0:	80 91 42 27 	lds	r24, 0x2742	; 0x802742 <CurSpeedFrq>
    1cd4:	90 91 43 27 	lds	r25, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1cd8:	a0 91 44 27 	lds	r26, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1cdc:	b0 91 45 27 	lds	r27, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1ce0:	c0 90 3e 27 	lds	r12, 0x273E	; 0x80273e <ACCSpeedINT>
    1ce4:	d0 90 3f 27 	lds	r13, 0x273F	; 0x80273f <ACCSpeedINT+0x1>
    1ce8:	e0 90 40 27 	lds	r14, 0x2740	; 0x802740 <ACCSpeedINT+0x2>
    1cec:	f0 90 41 27 	lds	r15, 0x2741	; 0x802741 <ACCSpeedINT+0x3>
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	6c 19       	sub	r22, r12
    1cf6:	7d 09       	sbc	r23, r13
    1cf8:	8e 09       	sbc	r24, r14
    1cfa:	9f 09       	sbc	r25, r15
    1cfc:	60 93 42 27 	sts	0x2742, r22	; 0x802742 <CurSpeedFrq>
    1d00:	70 93 43 27 	sts	0x2743, r23	; 0x802743 <CurSpeedFrq+0x1>
    1d04:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <CurSpeedFrq+0x2>
    1d08:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <CurSpeedFrq+0x3>
    PER=(float)(16000.0/CurSpeedFrq);        
    TCC0.CCA=(unsigned int)(PER*1000);
    1d0c:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    1d10:	9b 01       	movw	r18, r22
    1d12:	ac 01       	movw	r20, r24
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	8a e7       	ldi	r24, 0x7A	; 122
    1d1a:	96 e4       	ldi	r25, 0x46	; 70
    1d1c:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	4a e7       	ldi	r20, 0x7A	; 122
    1d26:	54 e4       	ldi	r21, 0x44	; 68
    1d28:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    1d2c:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    1d30:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1d34:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1d38:	cf c0       	rjmp	.+414    	; 0x1ed8 <__vector_20+0x318>
    }  
  }
  else
  {          
      if(ACC==1)
    1d3a:	80 91 39 27 	lds	r24, 0x2739	; 0x802739 <ACC>
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <__vector_20+0x184>
    1d42:	51 c0       	rjmp	.+162    	; 0x1de6 <__vector_20+0x226>
      {
         CurSpeedFrq+= ACCSpeedINT;
    1d44:	40 91 42 27 	lds	r20, 0x2742	; 0x802742 <CurSpeedFrq>
    1d48:	50 91 43 27 	lds	r21, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1d4c:	60 91 44 27 	lds	r22, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1d50:	70 91 45 27 	lds	r23, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1d54:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <ACCSpeedINT>
    1d58:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <ACCSpeedINT+0x1>
    1d5c:	a0 91 40 27 	lds	r26, 0x2740	; 0x802740 <ACCSpeedINT+0x2>
    1d60:	b0 91 41 27 	lds	r27, 0x2741	; 0x802741 <ACCSpeedINT+0x3>
    1d64:	84 0f       	add	r24, r20
    1d66:	95 1f       	adc	r25, r21
    1d68:	a6 1f       	adc	r26, r22
    1d6a:	b7 1f       	adc	r27, r23
    1d6c:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <CurSpeedFrq>
    1d70:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <CurSpeedFrq+0x1>
    1d74:	a0 93 44 27 	sts	0x2744, r26	; 0x802744 <CurSpeedFrq+0x2>
    1d78:	b0 93 45 27 	sts	0x2745, r27	; 0x802745 <CurSpeedFrq+0x3>
         if(CurSpeedFrq>=MaxSpeed)
    1d7c:	40 91 6d 27 	lds	r20, 0x276D	; 0x80276d <MaxSpeed>
    1d80:	50 91 6e 27 	lds	r21, 0x276E	; 0x80276e <MaxSpeed+0x1>
    1d84:	60 91 6f 27 	lds	r22, 0x276F	; 0x80276f <MaxSpeed+0x2>
    1d88:	70 91 70 27 	lds	r23, 0x2770	; 0x802770 <MaxSpeed+0x3>
    1d8c:	84 17       	cp	r24, r20
    1d8e:	95 07       	cpc	r25, r21
    1d90:	a6 07       	cpc	r26, r22
    1d92:	b7 07       	cpc	r27, r23
    1d94:	54 f0       	brlt	.+20     	; 0x1daa <__vector_20+0x1ea>
         {
           CurSpeedFrq=MaxSpeed;   
    1d96:	40 93 42 27 	sts	0x2742, r20	; 0x802742 <CurSpeedFrq>
    1d9a:	50 93 43 27 	sts	0x2743, r21	; 0x802743 <CurSpeedFrq+0x1>
    1d9e:	60 93 44 27 	sts	0x2744, r22	; 0x802744 <CurSpeedFrq+0x2>
    1da2:	70 93 45 27 	sts	0x2745, r23	; 0x802745 <CurSpeedFrq+0x3>
           ACC=0;
    1da6:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
         } 
         PER=(float)(16000.0/CurSpeedFrq);   
            
        TCC0.CCA=(unsigned int)(PER*1000); 
    1daa:	60 91 42 27 	lds	r22, 0x2742	; 0x802742 <CurSpeedFrq>
    1dae:	70 91 43 27 	lds	r23, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1db2:	80 91 44 27 	lds	r24, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1db6:	90 91 45 27 	lds	r25, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1dba:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	8a e7       	ldi	r24, 0x7A	; 122
    1dc8:	96 e4       	ldi	r25, 0x46	; 70
    1dca:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	4a e7       	ldi	r20, 0x7A	; 122
    1dd4:	54 e4       	ldi	r21, 0x44	; 68
    1dd6:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    1dda:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    1dde:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1de2:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      } 
      if(DEC==1)
    1de6:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <DEC>
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <__vector_20+0x230>
    1dee:	74 c0       	rjmp	.+232    	; 0x1ed8 <__vector_20+0x318>
      { 
         CurSpeedFrq-= DECSpeedINT;
    1df0:	40 91 3a 27 	lds	r20, 0x273A	; 0x80273a <DECSpeedINT>
    1df4:	50 91 3b 27 	lds	r21, 0x273B	; 0x80273b <DECSpeedINT+0x1>
    1df8:	60 91 3c 27 	lds	r22, 0x273C	; 0x80273c <DECSpeedINT+0x2>
    1dfc:	70 91 3d 27 	lds	r23, 0x273D	; 0x80273d <DECSpeedINT+0x3>
    1e00:	80 91 42 27 	lds	r24, 0x2742	; 0x802742 <CurSpeedFrq>
    1e04:	90 91 43 27 	lds	r25, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1e08:	a0 91 44 27 	lds	r26, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1e0c:	b0 91 45 27 	lds	r27, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1e10:	84 1b       	sub	r24, r20
    1e12:	95 0b       	sbc	r25, r21
    1e14:	a6 0b       	sbc	r26, r22
    1e16:	b7 0b       	sbc	r27, r23
         if(CurSpeedFrq<=DECSpeedINT)
    1e18:	48 17       	cp	r20, r24
    1e1a:	59 07       	cpc	r21, r25
    1e1c:	6a 07       	cpc	r22, r26
    1e1e:	7b 07       	cpc	r23, r27
    1e20:	4c f4       	brge	.+18     	; 0x1e34 <__vector_20+0x274>
            
        TCC0.CCA=(unsigned int)(PER*1000); 
      } 
      if(DEC==1)
      { 
         CurSpeedFrq-= DECSpeedINT;
    1e22:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <CurSpeedFrq>
    1e26:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <CurSpeedFrq+0x1>
    1e2a:	a0 93 44 27 	sts	0x2744, r26	; 0x802744 <CurSpeedFrq+0x2>
    1e2e:	b0 93 45 27 	sts	0x2745, r27	; 0x802745 <CurSpeedFrq+0x3>
    1e32:	34 c0       	rjmp	.+104    	; 0x1e9c <__vector_20+0x2dc>
         if(CurSpeedFrq<=DECSpeedINT)
         {
           CurSpeedFrq=DECSpeedINT;   
    1e34:	40 93 42 27 	sts	0x2742, r20	; 0x802742 <CurSpeedFrq>
    1e38:	50 93 43 27 	sts	0x2743, r21	; 0x802743 <CurSpeedFrq+0x1>
    1e3c:	60 93 44 27 	sts	0x2744, r22	; 0x802744 <CurSpeedFrq+0x2>
    1e40:	70 93 45 27 	sts	0x2745, r23	; 0x802745 <CurSpeedFrq+0x3>
           DEC=0;  
    1e44:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
           if(FreeJog==1)
    1e48:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <FreeJog>
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	59 f4       	brne	.+22     	; 0x1e66 <__vector_20+0x2a6>
           {
            FreeJog=0;  
    1e50:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            DistanceToGo1=0;
    1e54:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    1e58:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    1e5c:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    1e60:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
    1e64:	1b c0       	rjmp	.+54     	; 0x1e9c <__vector_20+0x2dc>
           }
           if(FreeJog==2)
    1e66:	82 30       	cpi	r24, 0x02	; 2
    1e68:	59 f4       	brne	.+22     	; 0x1e80 <__vector_20+0x2c0>
           {
            FreeJog=0;  
    1e6a:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            DistanceToGo2=0;
    1e6e:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    1e72:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    1e76:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    1e7a:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
    1e7e:	0e c0       	rjmp	.+28     	; 0x1e9c <__vector_20+0x2dc>
           }
           if(FreeJog==3)
    1e80:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <FreeJog>
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	51 f4       	brne	.+20     	; 0x1e9c <__vector_20+0x2dc>
           {
            FreeJog=0;  
    1e88:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            DistanceToGo3=0;
    1e8c:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    1e90:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    1e94:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    1e98:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
           }
         }
         PER=(float)(16000.0/CurSpeedFrq); 
            
        TCC0.CCA=(unsigned int)(PER*1000);  
    1e9c:	60 91 42 27 	lds	r22, 0x2742	; 0x802742 <CurSpeedFrq>
    1ea0:	70 91 43 27 	lds	r23, 0x2743	; 0x802743 <CurSpeedFrq+0x1>
    1ea4:	80 91 44 27 	lds	r24, 0x2744	; 0x802744 <CurSpeedFrq+0x2>
    1ea8:	90 91 45 27 	lds	r25, 0x2745	; 0x802745 <CurSpeedFrq+0x3>
    1eac:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    1eb0:	9b 01       	movw	r18, r22
    1eb2:	ac 01       	movw	r20, r24
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	8a e7       	ldi	r24, 0x7A	; 122
    1eba:	96 e4       	ldi	r25, 0x46	; 70
    1ebc:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a e7       	ldi	r20, 0x7A	; 122
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    1ecc:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    1ed0:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1ed4:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      } 
  } 
  //printf("%u\r\n",TCC0.CCA);        
}
    1ed8:	ff 91       	pop	r31
    1eda:	ef 91       	pop	r30
    1edc:	bf 91       	pop	r27
    1ede:	af 91       	pop	r26
    1ee0:	9f 91       	pop	r25
    1ee2:	8f 91       	pop	r24
    1ee4:	7f 91       	pop	r23
    1ee6:	6f 91       	pop	r22
    1ee8:	5f 91       	pop	r21
    1eea:	4f 91       	pop	r20
    1eec:	3f 91       	pop	r19
    1eee:	2f 91       	pop	r18
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	df 90       	pop	r13
    1efa:	cf 90       	pop	r12
    1efc:	0f 90       	pop	r0
    1efe:	0b be       	out	0x3b, r0	; 59
    1f00:	0f 90       	pop	r0
    1f02:	09 be       	out	0x39, r0	; 57
    1f04:	0f 90       	pop	r0
    1f06:	08 be       	out	0x38, r0	; 56
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <__vector_83>:

// Timer/Counter TCD1 Overflow/Underflow interrupt service routine
// PLC INterpolation in this time level 4
ISR (TCD1_OVF_vect)
{ 
    1f12:	1f 92       	push	r1
    1f14:	0f 92       	push	r0
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	0f 92       	push	r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	08 b6       	in	r0, 0x38	; 56
    1f1e:	0f 92       	push	r0
    1f20:	18 be       	out	0x38, r1	; 56
    1f22:	8f 93       	push	r24
   if(Axes[0].HardwareLimitNegIsActive)
    1f24:	80 91 e7 27 	lds	r24, 0x27E7	; 0x8027e7 <Axes+0x2a>
    1f28:	88 23       	and	r24, r24
    1f2a:	79 f1       	breq	.+94     	; 0x1f8a <__vector_83+0x78>
   {  
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routine)\r\n");  
       //printf("LIM POS X: %u\r\n",LIM_NEG1);            
       if(!DIR1 && !LIM_NEG1)       
    1f2c:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1f30:	84 fd       	sbrc	r24, 4
    1f32:	2b c0       	rjmp	.+86     	; 0x1f8a <__vector_83+0x78>
    1f34:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1f38:	84 ff       	sbrs	r24, 4
    1f3a:	28 c1       	rjmp	.+592    	; 0x218c <__vector_83+0x27a>
    1f3c:	26 c0       	rjmp	.+76     	; 0x1f8a <__vector_83+0x78>
       {
         if(AxisIsMoving1) 
         {
          DistanceToGo1=0;      
    1f3e:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    1f42:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    1f46:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    1f4a:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          if(!RefCmd)
    1f4e:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    1f52:	81 11       	cpse	r24, r1
    1f54:	1a c0       	rjmp	.+52     	; 0x1f8a <__vector_83+0x78>
          {
            FreeJog=0;
    1f56:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    1f5a:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    1f5e:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    1f62:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    1f66:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    1f6a:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    1f6e:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    1f72:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    1f76:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
            DistanceToGo3=0;  
    1f7a:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    1f7e:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    1f82:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    1f86:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          } 
         }
       }  
   }
     
   if(Axes[0].HardwareLimitPosIsActive)
    1f8a:	80 91 e6 27 	lds	r24, 0x27E6	; 0x8027e6 <Axes+0x29>
    1f8e:	88 23       	and	r24, r24
    1f90:	79 f1       	breq	.+94     	; 0x1ff0 <__vector_83+0xde>
   { 
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routin)\r\n");    
       //printf("LIM POS X: %u\r\n",LIM_NEG1);
       if(DIR1 && !LIM_POS1)       
    1f92:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1f96:	84 ff       	sbrs	r24, 4
    1f98:	2b c0       	rjmp	.+86     	; 0x1ff0 <__vector_83+0xde>
    1f9a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1f9e:	83 ff       	sbrs	r24, 3
    1fa0:	fa c0       	rjmp	.+500    	; 0x2196 <__vector_83+0x284>
    1fa2:	26 c0       	rjmp	.+76     	; 0x1ff0 <__vector_83+0xde>
       {
         //printf("Axis X PLimit is Active.\r\n");
         if(AxisIsMoving1) 
         {
          DistanceToGo1=0;      
    1fa4:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    1fa8:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    1fac:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    1fb0:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          if(!RefCmd)
    1fb4:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    1fb8:	81 11       	cpse	r24, r1
    1fba:	1a c0       	rjmp	.+52     	; 0x1ff0 <__vector_83+0xde>
          {
            FreeJog=0;
    1fbc:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    1fc0:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    1fc4:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    1fc8:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    1fcc:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    1fd0:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    1fd4:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    1fd8:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    1fdc:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
            DistanceToGo3=0;  
    1fe0:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    1fe4:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    1fe8:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    1fec:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          } 
         }
       } 
   }
  //------------------------------------------- 
   if(Axes[1].HardwareLimitNegIsActive)  
    1ff0:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <Axes+0x55>
    1ff4:	88 23       	and	r24, r24
    1ff6:	79 f1       	breq	.+94     	; 0x2056 <__vector_83+0x144>
   {
       if(!DIR2 && !LIM_NEG2)       
    1ff8:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    1ffc:	82 fd       	sbrc	r24, 2
    1ffe:	2b c0       	rjmp	.+86     	; 0x2056 <__vector_83+0x144>
    2000:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    2004:	86 ff       	sbrs	r24, 6
    2006:	cc c0       	rjmp	.+408    	; 0x21a0 <__vector_83+0x28e>
    2008:	26 c0       	rjmp	.+76     	; 0x2056 <__vector_83+0x144>
       { 
         if(AxisIsMoving2)
         {
          DistanceToGo2=0;      
    200a:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    200e:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    2012:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    2016:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
          if(!RefCmd)
    201a:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    201e:	81 11       	cpse	r24, r1
    2020:	1a c0       	rjmp	.+52     	; 0x2056 <__vector_83+0x144>
          {
            FreeJog=0;
    2022:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    2026:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    202a:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    202e:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    2032:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo1=0;
    2036:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    203a:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    203e:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    2042:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
            DistanceToGo3=0;  
    2046:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    204a:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    204e:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    2052:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          }
         }
       }    
   }
   
   if(Axes[1].HardwareLimitPosIsActive)
    2056:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <Axes+0x54>
    205a:	88 23       	and	r24, r24
    205c:	79 f1       	breq	.+94     	; 0x20bc <__vector_83+0x1aa>
   {
       if(DIR2 && !LIM_POS2)       
    205e:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2062:	82 ff       	sbrs	r24, 2
    2064:	2b c0       	rjmp	.+86     	; 0x20bc <__vector_83+0x1aa>
    2066:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    206a:	80 ff       	sbrs	r24, 0
    206c:	9e c0       	rjmp	.+316    	; 0x21aa <__vector_83+0x298>
    206e:	26 c0       	rjmp	.+76     	; 0x20bc <__vector_83+0x1aa>
       { 
         if(AxisIsMoving2)
         {
          DistanceToGo2=0;      
    2070:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    2074:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    2078:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    207c:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
          if(!RefCmd)
    2080:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    2084:	81 11       	cpse	r24, r1
    2086:	1a c0       	rjmp	.+52     	; 0x20bc <__vector_83+0x1aa>
          {
            FreeJog=0;
    2088:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    208c:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    2090:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    2094:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    2098:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo1=0;
    209c:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    20a0:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    20a4:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    20a8:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
            DistanceToGo3=0;  
    20ac:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    20b0:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    20b4:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    20b8:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          }
         }
       } 
   }  
   //----------------------------------------------- 
   if(Axes[2].HardwareLimitNegIsActive)
    20bc:	80 91 3d 28 	lds	r24, 0x283D	; 0x80283d <Axes+0x80>
    20c0:	88 23       	and	r24, r24
    20c2:	79 f1       	breq	.+94     	; 0x2122 <__vector_83+0x210>
   {
       if(!DIR3 && !LIM_NEG3)       
    20c4:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    20c8:	80 fd       	sbrc	r24, 0
    20ca:	2b c0       	rjmp	.+86     	; 0x2122 <__vector_83+0x210>
    20cc:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    20d0:	84 ff       	sbrs	r24, 4
    20d2:	70 c0       	rjmp	.+224    	; 0x21b4 <__vector_83+0x2a2>
    20d4:	26 c0       	rjmp	.+76     	; 0x2122 <__vector_83+0x210>
       {
         if(AxisIsMoving3)
         {
          DistanceToGo3=0;      
    20d6:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    20da:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    20de:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    20e2:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          if(!RefCmd)
    20e6:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    20ea:	81 11       	cpse	r24, r1
    20ec:	1a c0       	rjmp	.+52     	; 0x2122 <__vector_83+0x210>
          {
            FreeJog=0;
    20ee:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    20f2:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    20f6:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    20fa:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    20fe:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    2102:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    2106:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    210a:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    210e:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
            DistanceToGo1=0;  
    2112:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    2116:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    211a:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    211e:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          }
         }
       }
   }
   
   if(Axes[2].HardwareLimitPosIsActive)
    2122:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <Axes+0x7f>
    2126:	88 23       	and	r24, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <__vector_83+0x21a>
    212a:	4d c0       	rjmp	.+154    	; 0x21c6 <__vector_83+0x2b4>
   {
       if(DIR3 && !LIM_POS3)       
    212c:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2130:	80 ff       	sbrs	r24, 0
    2132:	49 c0       	rjmp	.+146    	; 0x21c6 <__vector_83+0x2b4>
    2134:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    2138:	85 ff       	sbrs	r24, 5
    213a:	41 c0       	rjmp	.+130    	; 0x21be <__vector_83+0x2ac>
    213c:	44 c0       	rjmp	.+136    	; 0x21c6 <__vector_83+0x2b4>
       {
         if(AxisIsMoving3)
         {
          DistanceToGo3=0;      
    213e:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    2142:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    2146:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    214a:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          if(!RefCmd)
    214e:	80 91 f4 26 	lds	r24, 0x26F4	; 0x8026f4 <RefCmd>
    2152:	81 11       	cpse	r24, r1
    2154:	38 c0       	rjmp	.+112    	; 0x21c6 <__vector_83+0x2b4>
          {
            FreeJog=0;
    2156:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <FreeJog>
            MaxDistanceToGo=0;        
    215a:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <MaxDistanceToGo>
    215e:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <MaxDistanceToGo+0x1>
    2162:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <MaxDistanceToGo+0x2>
    2166:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <MaxDistanceToGo+0x3>
            DistanceToGo2=0;
    216a:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    216e:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    2172:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    2176:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
            DistanceToGo1=0;  
    217a:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    217e:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    2182:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    2186:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          }
         }
       }
   } 
}
    218a:	1d c0       	rjmp	.+58     	; 0x21c6 <__vector_83+0x2b4>
   {  
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routine)\r\n");  
       //printf("LIM POS X: %u\r\n",LIM_NEG1);            
       if(!DIR1 && !LIM_NEG1)       
       {
         if(AxisIsMoving1) 
    218c:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    2190:	81 11       	cpse	r24, r1
    2192:	d5 ce       	rjmp	.-598    	; 0x1f3e <__vector_83+0x2c>
    2194:	fa ce       	rjmp	.-524    	; 0x1f8a <__vector_83+0x78>
       //printf("Hardware Limit Axis X is Active.(From PLC Timer routin)\r\n");    
       //printf("LIM POS X: %u\r\n",LIM_NEG1);
       if(DIR1 && !LIM_POS1)       
       {
         //printf("Axis X PLimit is Active.\r\n");
         if(AxisIsMoving1) 
    2196:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    219a:	81 11       	cpse	r24, r1
    219c:	03 cf       	rjmp	.-506    	; 0x1fa4 <__vector_83+0x92>
    219e:	28 cf       	rjmp	.-432    	; 0x1ff0 <__vector_83+0xde>
  //------------------------------------------- 
   if(Axes[1].HardwareLimitNegIsActive)  
   {
       if(!DIR2 && !LIM_NEG2)       
       { 
         if(AxisIsMoving2)
    21a0:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    21a4:	81 11       	cpse	r24, r1
    21a6:	31 cf       	rjmp	.-414    	; 0x200a <__vector_83+0xf8>
    21a8:	56 cf       	rjmp	.-340    	; 0x2056 <__vector_83+0x144>
   
   if(Axes[1].HardwareLimitPosIsActive)
   {
       if(DIR2 && !LIM_POS2)       
       { 
         if(AxisIsMoving2)
    21aa:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    21ae:	81 11       	cpse	r24, r1
    21b0:	5f cf       	rjmp	.-322    	; 0x2070 <__vector_83+0x15e>
    21b2:	84 cf       	rjmp	.-248    	; 0x20bc <__vector_83+0x1aa>
   //----------------------------------------------- 
   if(Axes[2].HardwareLimitNegIsActive)
   {
       if(!DIR3 && !LIM_NEG3)       
       {
         if(AxisIsMoving3)
    21b4:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    21b8:	81 11       	cpse	r24, r1
    21ba:	8d cf       	rjmp	.-230    	; 0x20d6 <__vector_83+0x1c4>
    21bc:	b2 cf       	rjmp	.-156    	; 0x2122 <__vector_83+0x210>
   
   if(Axes[2].HardwareLimitPosIsActive)
   {
       if(DIR3 && !LIM_POS3)       
       {
         if(AxisIsMoving3)
    21be:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    21c2:	81 11       	cpse	r24, r1
    21c4:	bc cf       	rjmp	.-136    	; 0x213e <__vector_83+0x22c>
            DistanceToGo1=0;  
          }
         }
       }
   } 
}
    21c6:	8f 91       	pop	r24
    21c8:	0f 90       	pop	r0
    21ca:	08 be       	out	0x38, r0	; 56
    21cc:	0f 90       	pop	r0
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	0f 90       	pop	r0
    21d2:	1f 90       	pop	r1
    21d4:	18 95       	reti

000021d6 <_Z6PRGExev>:


// run a single block the command will be in the CMDPRGList structure
// the structure will load in Main program
void PRGExe()
{
    21d6:	4f 92       	push	r4
    21d8:	5f 92       	push	r5
    21da:	6f 92       	push	r6
    21dc:	7f 92       	push	r7
    21de:	8f 92       	push	r8
    21e0:	9f 92       	push	r9
    21e2:	af 92       	push	r10
    21e4:	bf 92       	push	r11
    21e6:	cf 92       	push	r12
    21e8:	df 92       	push	r13
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	28 97       	sbiw	r28, 0x08	; 8
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	de bf       	out	0x3e, r29	; 62
 switch (CMDPRGlist.Mode) 
    2200:	80 91 41 28 	lds	r24, 0x2841	; 0x802841 <CMDPRGlist+0x3>
    2204:	8e 30       	cpi	r24, 0x0E	; 14
    2206:	09 f4       	brne	.+2      	; 0x220a <_Z6PRGExev+0x34>
    2208:	9f c2       	rjmp	.+1342   	; 0x2748 <_Z6PRGExev+0x572>
    220a:	58 f4       	brcc	.+22     	; 0x2222 <_Z6PRGExev+0x4c>
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	09 f4       	brne	.+2      	; 0x2212 <_Z6PRGExev+0x3c>
    2210:	de c0       	rjmp	.+444    	; 0x23ce <_Z6PRGExev+0x1f8>
    2212:	c8 f0       	brcs	.+50     	; 0x2246 <_Z6PRGExev+0x70>
    2214:	8c 30       	cpi	r24, 0x0C	; 12
    2216:	09 f4       	brne	.+2      	; 0x221a <_Z6PRGExev+0x44>
    2218:	96 c1       	rjmp	.+812    	; 0x2546 <_Z6PRGExev+0x370>
    221a:	8d 30       	cpi	r24, 0x0D	; 13
    221c:	09 f4       	brne	.+2      	; 0x2220 <_Z6PRGExev+0x4a>
    221e:	63 c2       	rjmp	.+1222   	; 0x26e6 <_Z6PRGExev+0x510>
    2220:	86 c6       	rjmp	.+3340   	; 0x2f2e <_Z6PRGExev+0xd58>
    2222:	8a 35       	cpi	r24, 0x5A	; 90
    2224:	09 f4       	brne	.+2      	; 0x2228 <_Z6PRGExev+0x52>
    2226:	cd c4       	rjmp	.+2458   	; 0x2bc2 <_Z6PRGExev+0x9ec>
    2228:	38 f4       	brcc	.+14     	; 0x2238 <_Z6PRGExev+0x62>
    222a:	81 35       	cpi	r24, 0x51	; 81
    222c:	09 f4       	brne	.+2      	; 0x2230 <_Z6PRGExev+0x5a>
    222e:	bd c4       	rjmp	.+2426   	; 0x2baa <_Z6PRGExev+0x9d4>
    2230:	82 35       	cpi	r24, 0x52	; 82
    2232:	09 f4       	brne	.+2      	; 0x2236 <_Z6PRGExev+0x60>
    2234:	c0 c4       	rjmp	.+2432   	; 0x2bb6 <_Z6PRGExev+0x9e0>
    2236:	7b c6       	rjmp	.+3318   	; 0x2f2e <_Z6PRGExev+0xd58>
    2238:	84 36       	cpi	r24, 0x64	; 100
    223a:	09 f4       	brne	.+2      	; 0x223e <_Z6PRGExev+0x68>
    223c:	2c c6       	rjmp	.+3160   	; 0x2e96 <_Z6PRGExev+0xcc0>
    223e:	85 36       	cpi	r24, 0x65	; 101
    2240:	09 f4       	brne	.+2      	; 0x2244 <_Z6PRGExev+0x6e>
    2242:	32 c6       	rjmp	.+3172   	; 0x2ea8 <_Z6PRGExev+0xcd2>
    2244:	74 c6       	rjmp	.+3304   	; 0x2f2e <_Z6PRGExev+0xd58>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    2246:	e0 e0       	ldi	r30, 0x00	; 0
    2248:	f8 e0       	ldi	r31, 0x08	; 8
    224a:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    224c:	8c e0       	ldi	r24, 0x0C	; 12
    224e:	81 87       	std	Z+9, r24	; 0x09
 {   
    case 0 :  //Acceleration Mode
    {
        tc0_disable(&TCC0); 
            
        Ma1 = CMDPRGlist.Speed1Ma1;                
    2250:	ee e3       	ldi	r30, 0x3E	; 62
    2252:	f8 e2       	ldi	r31, 0x28	; 40
    2254:	84 89       	ldd	r24, Z+20	; 0x14
    2256:	95 89       	ldd	r25, Z+21	; 0x15
    2258:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    225c:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
        Ma2 = CMDPRGlist.Speed2Ma2;   
    2260:	80 8d       	ldd	r24, Z+24	; 0x18
    2262:	91 8d       	ldd	r25, Z+25	; 0x19
    2264:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    2268:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
        Ma3 = CMDPRGlist.Speed3Ma3;
    226c:	84 8d       	ldd	r24, Z+28	; 0x1c
    226e:	95 8d       	ldd	r25, Z+29	; 0x1d
    2270:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    2274:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
                    
                    
        MaxSpeed = CMDPRGlist.MaxSpeed;
    2278:	80 a1       	ldd	r24, Z+32	; 0x20
    227a:	91 a1       	ldd	r25, Z+33	; 0x21
    227c:	a2 a1       	ldd	r26, Z+34	; 0x22
    227e:	b3 a1       	ldd	r27, Z+35	; 0x23
    2280:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    2284:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    2288:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    228c:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        ACCSpeedINT = CMDPRGlist.ACCSpeedINT;
    2290:	80 a5       	ldd	r24, Z+40	; 0x28
    2292:	91 a5       	ldd	r25, Z+41	; 0x29
    2294:	a2 a5       	ldd	r26, Z+42	; 0x2a
    2296:	b3 a5       	ldd	r27, Z+43	; 0x2b
    2298:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <ACCSpeedINT>
    229c:	90 93 3f 27 	sts	0x273F, r25	; 0x80273f <ACCSpeedINT+0x1>
    22a0:	a0 93 40 27 	sts	0x2740, r26	; 0x802740 <ACCSpeedINT+0x2>
    22a4:	b0 93 41 27 	sts	0x2741, r27	; 0x802741 <ACCSpeedINT+0x3>
        DECSpeedINT = CMDPRGlist.DECSpeedINT;
    22a8:	84 a5       	ldd	r24, Z+44	; 0x2c
    22aa:	95 a5       	ldd	r25, Z+45	; 0x2d
    22ac:	a6 a5       	ldd	r26, Z+46	; 0x2e
    22ae:	b7 a5       	ldd	r27, Z+47	; 0x2f
    22b0:	80 93 3a 27 	sts	0x273A, r24	; 0x80273a <DECSpeedINT>
    22b4:	90 93 3b 27 	sts	0x273B, r25	; 0x80273b <DECSpeedINT+0x1>
    22b8:	a0 93 3c 27 	sts	0x273C, r26	; 0x80273c <DECSpeedINT+0x2>
    22bc:	b0 93 3d 27 	sts	0x273D, r27	; 0x80273d <DECSpeedINT+0x3>
                    
          if(CMDPRGlist.Direction1==1)
    22c0:	81 89       	ldd	r24, Z+17	; 0x11
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	31 f4       	brne	.+12     	; 0x22d2 <_Z6PRGExev+0xfc>
          { 
            SET_DIR1;
    22c6:	e0 e2       	ldi	r30, 0x20	; 32
    22c8:	f7 e0       	ldi	r31, 0x07	; 7
    22ca:	84 81       	ldd	r24, Z+4	; 0x04
    22cc:	80 61       	ori	r24, 0x10	; 16
    22ce:	84 83       	std	Z+4, r24	; 0x04
    22d0:	05 c0       	rjmp	.+10     	; 0x22dc <_Z6PRGExev+0x106>
          }
          else
          {
            CLR_DIR1;
    22d2:	e0 e2       	ldi	r30, 0x20	; 32
    22d4:	f7 e0       	ldi	r31, 0x07	; 7
    22d6:	84 81       	ldd	r24, Z+4	; 0x04
    22d8:	8f 7e       	andi	r24, 0xEF	; 239
    22da:	84 83       	std	Z+4, r24	; 0x04
          } 
          
          if(CMDPRGlist.Direction2==1)
    22dc:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <CMDPRGlist+0x12>
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	31 f4       	brne	.+12     	; 0x22f0 <_Z6PRGExev+0x11a>
          { 
            SET_DIR2;
    22e4:	e0 e2       	ldi	r30, 0x20	; 32
    22e6:	f7 e0       	ldi	r31, 0x07	; 7
    22e8:	84 81       	ldd	r24, Z+4	; 0x04
    22ea:	84 60       	ori	r24, 0x04	; 4
    22ec:	84 83       	std	Z+4, r24	; 0x04
    22ee:	05 c0       	rjmp	.+10     	; 0x22fa <_Z6PRGExev+0x124>
          }
          else
          {
            CLR_DIR2;
    22f0:	e0 e2       	ldi	r30, 0x20	; 32
    22f2:	f7 e0       	ldi	r31, 0x07	; 7
    22f4:	84 81       	ldd	r24, Z+4	; 0x04
    22f6:	8b 7f       	andi	r24, 0xFB	; 251
    22f8:	84 83       	std	Z+4, r24	; 0x04
          } 
          
          if(CMDPRGlist.Direction3==1)
    22fa:	80 91 51 28 	lds	r24, 0x2851	; 0x802851 <CMDPRGlist+0x13>
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	31 f4       	brne	.+12     	; 0x230e <_Z6PRGExev+0x138>
          { 
            SET_DIR3;
    2302:	e0 e2       	ldi	r30, 0x20	; 32
    2304:	f7 e0       	ldi	r31, 0x07	; 7
    2306:	84 81       	ldd	r24, Z+4	; 0x04
    2308:	81 60       	ori	r24, 0x01	; 1
    230a:	84 83       	std	Z+4, r24	; 0x04
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <_Z6PRGExev+0x142>
          }
          else
          {
            CLR_DIR3;
    230e:	e0 e2       	ldi	r30, 0x20	; 32
    2310:	f7 e0       	ldi	r31, 0x07	; 7
    2312:	84 81       	ldd	r24, Z+4	; 0x04
    2314:	8e 7f       	andi	r24, 0xFE	; 254
    2316:	84 83       	std	Z+4, r24	; 0x04
          }
                            
//         if(CMDPRGlist.Speed1Ma1==1000) MaxDistanceToGo=CMDPRGlist.Move1;
//         if(CMDPRGlist.Speed2Ma2==1000) MaxDistanceToGo=CMDPRGlist.Move2;
//         if(CMDPRGlist.Speed3Ma3==1000) MaxDistanceToGo=CMDPRGlist.Move3;
         MaxDistanceToGo=CMDPRGlist.MaxDistanceToGo;
    2318:	ee e3       	ldi	r30, 0x3E	; 62
    231a:	f8 e2       	ldi	r31, 0x28	; 40
    231c:	84 a1       	ldd	r24, Z+36	; 0x24
    231e:	95 a1       	ldd	r25, Z+37	; 0x25
    2320:	a6 a1       	ldd	r26, Z+38	; 0x26
    2322:	b7 a1       	ldd	r27, Z+39	; 0x27
    2324:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <MaxDistanceToGo>
    2328:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <MaxDistanceToGo+0x1>
    232c:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <MaxDistanceToGo+0x2>
    2330:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <MaxDistanceToGo+0x3>
//         else
//         {
//              AccDTG = MaxDistanceToGo - AccDTG;
//         }
            
        AccDTG=CMDPRGlist.ACCDTG;
    2334:	80 a9       	ldd	r24, Z+48	; 0x30
    2336:	91 a9       	ldd	r25, Z+49	; 0x31
    2338:	a2 a9       	ldd	r26, Z+50	; 0x32
    233a:	b3 a9       	ldd	r27, Z+51	; 0x33
    233c:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <AccDTG>
    2340:	90 93 85 27 	sts	0x2785, r25	; 0x802785 <AccDTG+0x1>
    2344:	a0 93 86 27 	sts	0x2786, r26	; 0x802786 <AccDTG+0x2>
    2348:	b0 93 87 27 	sts	0x2787, r27	; 0x802787 <AccDTG+0x3>
        DecDTG=CMDPRGlist.DECDTG;
    234c:	84 a9       	ldd	r24, Z+52	; 0x34
    234e:	95 a9       	ldd	r25, Z+53	; 0x35
    2350:	a6 a9       	ldd	r26, Z+54	; 0x36
    2352:	b7 a9       	ldd	r27, Z+55	; 0x37
    2354:	80 93 80 27 	sts	0x2780, r24	; 0x802780 <DecDTG>
    2358:	90 93 81 27 	sts	0x2781, r25	; 0x802781 <DecDTG+0x1>
    235c:	a0 93 82 27 	sts	0x2782, r26	; 0x802782 <DecDTG+0x2>
    2360:	b0 93 83 27 	sts	0x2783, r27	; 0x802783 <DecDTG+0x3>
                    
        DistanceToGo1 = CMDPRGlist.Move1;
    2364:	85 81       	ldd	r24, Z+5	; 0x05
    2366:	96 81       	ldd	r25, Z+6	; 0x06
    2368:	a7 81       	ldd	r26, Z+7	; 0x07
    236a:	b0 85       	ldd	r27, Z+8	; 0x08
    236c:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    2370:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    2374:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    2378:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
        DistanceToGo2 = CMDPRGlist.Move2;
    237c:	81 85       	ldd	r24, Z+9	; 0x09
    237e:	92 85       	ldd	r25, Z+10	; 0x0a
    2380:	a3 85       	ldd	r26, Z+11	; 0x0b
    2382:	b4 85       	ldd	r27, Z+12	; 0x0c
    2384:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    2388:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    238c:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    2390:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
        DistanceToGo3 = CMDPRGlist.Move3;
    2394:	85 85       	ldd	r24, Z+13	; 0x0d
    2396:	96 85       	ldd	r25, Z+14	; 0x0e
    2398:	a7 85       	ldd	r26, Z+15	; 0x0f
    239a:	b0 89       	ldd	r27, Z+16	; 0x10
    239c:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    23a0:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    23a4:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    23a8:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
                    
        CurSpeedFrq = 0;                
    23ac:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    23b0:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    23b4:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    23b8:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
        tcc0_init(); 
    23bc:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
        TCC0.CCA = 0XFFFF;
    23c0:	8f ef       	ldi	r24, 0xFF	; 255
    23c2:	9f ef       	ldi	r25, 0xFF	; 255
    23c4:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    23c8:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
//        ACC = 1;      
        
        break;                
    23cc:	b0 c5       	rjmp	.+2912   	; 0x2f2e <_Z6PRGExev+0xd58>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    23ce:	e0 e0       	ldi	r30, 0x00	; 0
    23d0:	f8 e0       	ldi	r31, 0x08	; 8
    23d2:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    23d4:	8c e0       	ldi	r24, 0x0C	; 12
    23d6:	81 87       	std	Z+9, r24	; 0x09
    }
    case 1 : // With out ACC Mode
    {        
        tc0_disable(&TCC0);
        Ma1 = CMDPRGlist.Speed1Ma1;
    23d8:	ee e3       	ldi	r30, 0x3E	; 62
    23da:	f8 e2       	ldi	r31, 0x28	; 40
    23dc:	84 89       	ldd	r24, Z+20	; 0x14
    23de:	95 89       	ldd	r25, Z+21	; 0x15
    23e0:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    23e4:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
        Ma2 = CMDPRGlist.Speed2Ma2;
    23e8:	80 8d       	ldd	r24, Z+24	; 0x18
    23ea:	91 8d       	ldd	r25, Z+25	; 0x19
    23ec:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    23f0:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
        Ma3 = CMDPRGlist.Speed3Ma3;
    23f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    23f6:	95 8d       	ldd	r25, Z+29	; 0x1d
    23f8:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    23fc:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
          
        MaxSpeed = CMDPRGlist.MaxSpeed;
    2400:	60 a1       	ldd	r22, Z+32	; 0x20
    2402:	71 a1       	ldd	r23, Z+33	; 0x21
    2404:	82 a1       	ldd	r24, Z+34	; 0x22
    2406:	93 a1       	ldd	r25, Z+35	; 0x23
    2408:	60 93 6d 27 	sts	0x276D, r22	; 0x80276d <MaxSpeed>
    240c:	70 93 6e 27 	sts	0x276E, r23	; 0x80276e <MaxSpeed+0x1>
    2410:	80 93 6f 27 	sts	0x276F, r24	; 0x80276f <MaxSpeed+0x2>
    2414:	90 93 70 27 	sts	0x2770, r25	; 0x802770 <MaxSpeed+0x3>
                    
        if(CMDPRGlist.Direction1==1)
    2418:	21 89       	ldd	r18, Z+17	; 0x11
    241a:	21 30       	cpi	r18, 0x01	; 1
    241c:	31 f4       	brne	.+12     	; 0x242a <_Z6PRGExev+0x254>
        { 
         SET_DIR1;
    241e:	e0 e2       	ldi	r30, 0x20	; 32
    2420:	f7 e0       	ldi	r31, 0x07	; 7
    2422:	24 81       	ldd	r18, Z+4	; 0x04
    2424:	20 61       	ori	r18, 0x10	; 16
    2426:	24 83       	std	Z+4, r18	; 0x04
    2428:	05 c0       	rjmp	.+10     	; 0x2434 <_Z6PRGExev+0x25e>
        }
        else
        {
         CLR_DIR1;
    242a:	e0 e2       	ldi	r30, 0x20	; 32
    242c:	f7 e0       	ldi	r31, 0x07	; 7
    242e:	24 81       	ldd	r18, Z+4	; 0x04
    2430:	2f 7e       	andi	r18, 0xEF	; 239
    2432:	24 83       	std	Z+4, r18	; 0x04
        } 
              
        if(CMDPRGlist.Direction2==1)
    2434:	20 91 50 28 	lds	r18, 0x2850	; 0x802850 <CMDPRGlist+0x12>
    2438:	21 30       	cpi	r18, 0x01	; 1
    243a:	31 f4       	brne	.+12     	; 0x2448 <_Z6PRGExev+0x272>
        { 
         SET_DIR2;
    243c:	e0 e2       	ldi	r30, 0x20	; 32
    243e:	f7 e0       	ldi	r31, 0x07	; 7
    2440:	24 81       	ldd	r18, Z+4	; 0x04
    2442:	24 60       	ori	r18, 0x04	; 4
    2444:	24 83       	std	Z+4, r18	; 0x04
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <_Z6PRGExev+0x27c>
        }
        else
        {
          CLR_DIR2;
    2448:	e0 e2       	ldi	r30, 0x20	; 32
    244a:	f7 e0       	ldi	r31, 0x07	; 7
    244c:	24 81       	ldd	r18, Z+4	; 0x04
    244e:	2b 7f       	andi	r18, 0xFB	; 251
    2450:	24 83       	std	Z+4, r18	; 0x04
        }  
              
        if(CMDPRGlist.Direction3==1)
    2452:	20 91 51 28 	lds	r18, 0x2851	; 0x802851 <CMDPRGlist+0x13>
    2456:	21 30       	cpi	r18, 0x01	; 1
    2458:	31 f4       	brne	.+12     	; 0x2466 <_Z6PRGExev+0x290>
        { 
         SET_DIR3;
    245a:	e0 e2       	ldi	r30, 0x20	; 32
    245c:	f7 e0       	ldi	r31, 0x07	; 7
    245e:	24 81       	ldd	r18, Z+4	; 0x04
    2460:	21 60       	ori	r18, 0x01	; 1
    2462:	24 83       	std	Z+4, r18	; 0x04
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <_Z6PRGExev+0x29a>
        }
        else
        {
         CLR_DIR3;
    2466:	e0 e2       	ldi	r30, 0x20	; 32
    2468:	f7 e0       	ldi	r31, 0x07	; 7
    246a:	24 81       	ldd	r18, Z+4	; 0x04
    246c:	2e 7f       	andi	r18, 0xFE	; 254
    246e:	24 83       	std	Z+4, r18	; 0x04
        }                     
    				
        AccDTG = 0;
    2470:	10 92 84 27 	sts	0x2784, r1	; 0x802784 <AccDTG>
    2474:	10 92 85 27 	sts	0x2785, r1	; 0x802785 <AccDTG+0x1>
    2478:	10 92 86 27 	sts	0x2786, r1	; 0x802786 <AccDTG+0x2>
    247c:	10 92 87 27 	sts	0x2787, r1	; 0x802787 <AccDTG+0x3>
        DecDTG = 0;
    2480:	10 92 80 27 	sts	0x2780, r1	; 0x802780 <DecDTG>
    2484:	10 92 81 27 	sts	0x2781, r1	; 0x802781 <DecDTG+0x1>
    2488:	10 92 82 27 	sts	0x2782, r1	; 0x802782 <DecDTG+0x2>
    248c:	10 92 83 27 	sts	0x2783, r1	; 0x802783 <DecDTG+0x3>
                    
        DistanceToGo1 = CMDPRGlist.Move1;
    2490:	ee e3       	ldi	r30, 0x3E	; 62
    2492:	f8 e2       	ldi	r31, 0x28	; 40
    2494:	05 81       	ldd	r16, Z+5	; 0x05
    2496:	16 81       	ldd	r17, Z+6	; 0x06
    2498:	27 81       	ldd	r18, Z+7	; 0x07
    249a:	30 85       	ldd	r19, Z+8	; 0x08
    249c:	00 93 90 27 	sts	0x2790, r16	; 0x802790 <DistanceToGo1>
    24a0:	10 93 91 27 	sts	0x2791, r17	; 0x802791 <DistanceToGo1+0x1>
    24a4:	20 93 92 27 	sts	0x2792, r18	; 0x802792 <DistanceToGo1+0x2>
    24a8:	30 93 93 27 	sts	0x2793, r19	; 0x802793 <DistanceToGo1+0x3>
        DistanceToGo2 = CMDPRGlist.Move2;
    24ac:	01 85       	ldd	r16, Z+9	; 0x09
    24ae:	12 85       	ldd	r17, Z+10	; 0x0a
    24b0:	23 85       	ldd	r18, Z+11	; 0x0b
    24b2:	34 85       	ldd	r19, Z+12	; 0x0c
    24b4:	00 93 8c 27 	sts	0x278C, r16	; 0x80278c <DistanceToGo2>
    24b8:	10 93 8d 27 	sts	0x278D, r17	; 0x80278d <DistanceToGo2+0x1>
    24bc:	20 93 8e 27 	sts	0x278E, r18	; 0x80278e <DistanceToGo2+0x2>
    24c0:	30 93 8f 27 	sts	0x278F, r19	; 0x80278f <DistanceToGo2+0x3>
        DistanceToGo3 = CMDPRGlist.Move3;
    24c4:	05 85       	ldd	r16, Z+13	; 0x0d
    24c6:	16 85       	ldd	r17, Z+14	; 0x0e
    24c8:	27 85       	ldd	r18, Z+15	; 0x0f
    24ca:	30 89       	ldd	r19, Z+16	; 0x10
    24cc:	00 93 88 27 	sts	0x2788, r16	; 0x802788 <DistanceToGo3>
    24d0:	10 93 89 27 	sts	0x2789, r17	; 0x802789 <DistanceToGo3+0x1>
    24d4:	20 93 8a 27 	sts	0x278A, r18	; 0x80278a <DistanceToGo3+0x2>
    24d8:	30 93 8b 27 	sts	0x278B, r19	; 0x80278b <DistanceToGo3+0x3>
                    
        CurSpeedFrq = MaxSpeed;
    24dc:	60 93 42 27 	sts	0x2742, r22	; 0x802742 <CurSpeedFrq>
    24e0:	70 93 43 27 	sts	0x2743, r23	; 0x802743 <CurSpeedFrq+0x1>
    24e4:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <CurSpeedFrq+0x2>
    24e8:	90 93 45 27 	sts	0x2745, r25	; 0x802745 <CurSpeedFrq+0x3>
        ACC = 0;
    24ec:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
        DEC = 0;
    24f0:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
        TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);   
    24f4:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    24f8:	9b 01       	movw	r18, r22
    24fa:	ac 01       	movw	r20, r24
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	8a e7       	ldi	r24, 0x7A	; 122
    2502:	96 e4       	ldi	r25, 0x46	; 70
    2504:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    2508:	60 93 28 27 	sts	0x2728, r22	; 0x802728 <TimerMainPeriod>
    250c:	70 93 29 27 	sts	0x2729, r23	; 0x802729 <TimerMainPeriod+0x1>
    2510:	80 93 2a 27 	sts	0x272A, r24	; 0x80272a <TimerMainPeriod+0x2>
    2514:	90 93 2b 27 	sts	0x272B, r25	; 0x80272b <TimerMainPeriod+0x3>
        tcc0_init();   
    2518:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
        TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    2528:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    252c:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    2530:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    2534:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    2538:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    253c:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2540:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
        break;				
    2544:	f4 c4       	rjmp	.+2536   	; 0x2f2e <_Z6PRGExev+0xd58>
    }			
    case 12: //Go to Refrence
    { 
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
    2546:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    254a:	81 11       	cpse	r24, r1
    254c:	0e c0       	rjmp	.+28     	; 0x256a <_Z6PRGExev+0x394>
    254e:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    2552:	91 11       	cpse	r25, r1
    2554:	0a c0       	rjmp	.+20     	; 0x256a <_Z6PRGExev+0x394>
    2556:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    255a:	21 e0       	ldi	r18, 0x01	; 1
    255c:	91 11       	cpse	r25, r1
    255e:	01 c0       	rjmp	.+2      	; 0x2562 <_Z6PRGExev+0x38c>
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
        while (AxisMoving == 1) 
    2566:	99 23       	and	r25, r25
    2568:	99 f0       	breq	.+38     	; 0x2590 <_Z6PRGExev+0x3ba>
    256a:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    256e:	91 11       	cpse	r25, r1
    2570:	07 c0       	rjmp	.+14     	; 0x2580 <_Z6PRGExev+0x3aa>
    2572:	21 e0       	ldi	r18, 0x01	; 1
    2574:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    2578:	91 11       	cpse	r25, r1
    257a:	03 c0       	rjmp	.+6      	; 0x2582 <_Z6PRGExev+0x3ac>
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <_Z6PRGExev+0x3ac>
    2580:	21 e0       	ldi	r18, 0x01	; 1
    2582:	92 2f       	mov	r25, r18
        {
         AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    2584:	81 11       	cpse	r24, r1
    2586:	fe cf       	rjmp	.-4      	; 0x2584 <_Z6PRGExev+0x3ae>
        break;				
    }			
    case 12: //Go to Refrence
    { 
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
        while (AxisMoving == 1) 
    2588:	91 11       	cpse	r25, r1
    258a:	fc cf       	rjmp	.-8      	; 0x2584 <_Z6PRGExev+0x3ae>
    258c:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
        {
         AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
        }   
      
        if(RefDir1==0)
    2590:	80 91 7f 27 	lds	r24, 0x277F	; 0x80277f <RefDir1>
    2594:	81 11       	cpse	r24, r1
    2596:	06 c0       	rjmp	.+12     	; 0x25a4 <_Z6PRGExev+0x3ce>
        {
          CLR_DIR1;
    2598:	e0 e2       	ldi	r30, 0x20	; 32
    259a:	f7 e0       	ldi	r31, 0x07	; 7
    259c:	84 81       	ldd	r24, Z+4	; 0x04
    259e:	8f 7e       	andi	r24, 0xEF	; 239
    25a0:	84 83       	std	Z+4, r24	; 0x04
    25a2:	07 c0       	rjmp	.+14     	; 0x25b2 <_Z6PRGExev+0x3dc>
        }
        else if(RefDir1==1)
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	29 f4       	brne	.+10     	; 0x25b2 <_Z6PRGExev+0x3dc>
        {
          SET_DIR1;
    25a8:	e0 e2       	ldi	r30, 0x20	; 32
    25aa:	f7 e0       	ldi	r31, 0x07	; 7
    25ac:	84 81       	ldd	r24, Z+4	; 0x04
    25ae:	80 61       	ori	r24, 0x10	; 16
    25b0:	84 83       	std	Z+4, r24	; 0x04
        } 
      
        if(RefDir2==0)
    25b2:	80 91 7e 27 	lds	r24, 0x277E	; 0x80277e <RefDir2>
    25b6:	81 11       	cpse	r24, r1
    25b8:	06 c0       	rjmp	.+12     	; 0x25c6 <_Z6PRGExev+0x3f0>
        {
          CLR_DIR2;
    25ba:	e0 e2       	ldi	r30, 0x20	; 32
    25bc:	f7 e0       	ldi	r31, 0x07	; 7
    25be:	84 81       	ldd	r24, Z+4	; 0x04
    25c0:	8b 7f       	andi	r24, 0xFB	; 251
    25c2:	84 83       	std	Z+4, r24	; 0x04
    25c4:	07 c0       	rjmp	.+14     	; 0x25d4 <_Z6PRGExev+0x3fe>
        }
        else if(RefDir2==1)
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	29 f4       	brne	.+10     	; 0x25d4 <_Z6PRGExev+0x3fe>
        {
          SET_DIR2;
    25ca:	e0 e2       	ldi	r30, 0x20	; 32
    25cc:	f7 e0       	ldi	r31, 0x07	; 7
    25ce:	84 81       	ldd	r24, Z+4	; 0x04
    25d0:	84 60       	ori	r24, 0x04	; 4
    25d2:	84 83       	std	Z+4, r24	; 0x04
        }
      
        if(RefDir3==0)
    25d4:	80 91 7d 27 	lds	r24, 0x277D	; 0x80277d <RefDir3>
    25d8:	81 11       	cpse	r24, r1
    25da:	06 c0       	rjmp	.+12     	; 0x25e8 <_Z6PRGExev+0x412>
        {
          CLR_DIR3;
    25dc:	e0 e2       	ldi	r30, 0x20	; 32
    25de:	f7 e0       	ldi	r31, 0x07	; 7
    25e0:	84 81       	ldd	r24, Z+4	; 0x04
    25e2:	8e 7f       	andi	r24, 0xFE	; 254
    25e4:	84 83       	std	Z+4, r24	; 0x04
    25e6:	07 c0       	rjmp	.+14     	; 0x25f6 <_Z6PRGExev+0x420>
        }
        else if(RefDir3==1)
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	29 f4       	brne	.+10     	; 0x25f6 <_Z6PRGExev+0x420>
        {
          SET_DIR3;
    25ec:	e0 e2       	ldi	r30, 0x20	; 32
    25ee:	f7 e0       	ldi	r31, 0x07	; 7
    25f0:	84 81       	ldd	r24, Z+4	; 0x04
    25f2:	81 60       	ori	r24, 0x01	; 1
    25f4:	84 83       	std	Z+4, r24	; 0x04
        }       
                             
        MaxSpeed=8000;                           
    25f6:	80 e4       	ldi	r24, 0x40	; 64
    25f8:	9f e1       	ldi	r25, 0x1F	; 31
    25fa:	a0 e0       	ldi	r26, 0x00	; 0
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    2602:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    2606:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    260a:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        
        CurSpeedFrq = MaxSpeed;
    260e:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <CurSpeedFrq>
    2612:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <CurSpeedFrq+0x1>
    2616:	a0 93 44 27 	sts	0x2744, r26	; 0x802744 <CurSpeedFrq+0x2>
    261a:	b0 93 45 27 	sts	0x2745, r27	; 0x802745 <CurSpeedFrq+0x3>
        ACC = 0;
    261e:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
        DEC = 0;
    2622:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
        TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);          
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e4       	ldi	r27, 0x40	; 64
    262e:	80 93 28 27 	sts	0x2728, r24	; 0x802728 <TimerMainPeriod>
    2632:	90 93 29 27 	sts	0x2729, r25	; 0x802729 <TimerMainPeriod+0x1>
    2636:	a0 93 2a 27 	sts	0x272A, r26	; 0x80272a <TimerMainPeriod+0x2>
    263a:	b0 93 2b 27 	sts	0x272B, r27	; 0x80272b <TimerMainPeriod+0x3>
        RefCmd=1;
    263e:	21 e0       	ldi	r18, 0x01	; 1
    2640:	20 93 f4 26 	sts	0x26F4, r18	; 0x8026f4 <RefCmd>
        Ma1=1000; 
    2644:	88 ee       	ldi	r24, 0xE8	; 232
    2646:	93 e0       	ldi	r25, 0x03	; 3
    2648:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    264c:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
        Ma2=1000;
    2650:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    2654:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
        Ma3=1000;
    2658:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    265c:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
        DistanceToGo1=0x7FFFFFFF;
    2660:	8f ef       	ldi	r24, 0xFF	; 255
    2662:	9f ef       	ldi	r25, 0xFF	; 255
    2664:	af ef       	ldi	r26, 0xFF	; 255
    2666:	bf e7       	ldi	r27, 0x7F	; 127
    2668:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    266c:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    2670:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    2674:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
        DistanceToGo2=0x7FFFFFFF;
    2678:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    267c:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    2680:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    2684:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
        DistanceToGo3=0x7FFFFFFF;   
    2688:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    268c:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    2690:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    2694:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
         
        tcc0_init();     
    2698:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
      
        TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);                    
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	4a e7       	ldi	r20, 0x7A	; 122
    26a2:	54 e4       	ldi	r21, 0x44	; 68
    26a4:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    26a8:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    26ac:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    26b0:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    26b4:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    26b8:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    26bc:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    26c0:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                
        sprintf(BufferSend,"!1800\r\n"); 
    26c4:	88 e0       	ldi	r24, 0x08	; 8
    26c6:	e8 ed       	ldi	r30, 0xD8	; 216
    26c8:	f0 e2       	ldi	r31, 0x20	; 32
    26ca:	a7 e5       	ldi	r26, 0x57	; 87
    26cc:	b9 e2       	ldi	r27, 0x29	; 41
    26ce:	01 90       	ld	r0, Z+
    26d0:	0d 92       	st	X+, r0
    26d2:	8a 95       	dec	r24
    26d4:	e1 f7       	brne	.-8      	; 0x26ce <_Z6PRGExev+0x4f8>
        Responsing=1; 
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;  
    26dc:	e0 ea       	ldi	r30, 0xA0	; 160
    26de:	f6 e0       	ldi	r31, 0x06	; 6
    26e0:	84 81       	ldd	r24, Z+4	; 0x04
    26e2:	81 60       	ori	r24, 0x01	; 1
    26e4:	84 83       	std	Z+4, r24	; 0x04
    }
    case 13:
    {
      SoftRef1=AxisPosition1; 
    26e6:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    26ea:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    26ee:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    26f2:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    26f6:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <SoftRef1>
    26fa:	90 93 a1 27 	sts	0x27A1, r25	; 0x8027a1 <SoftRef1+0x1>
    26fe:	a0 93 a2 27 	sts	0x27A2, r26	; 0x8027a2 <SoftRef1+0x2>
    2702:	b0 93 a3 27 	sts	0x27A3, r27	; 0x8027a3 <SoftRef1+0x3>
      SoftRef2=AxisPosition2;
    2706:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    270a:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    270e:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    2712:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    2716:	80 93 9c 27 	sts	0x279C, r24	; 0x80279c <SoftRef2>
    271a:	90 93 9d 27 	sts	0x279D, r25	; 0x80279d <SoftRef2+0x1>
    271e:	a0 93 9e 27 	sts	0x279E, r26	; 0x80279e <SoftRef2+0x2>
    2722:	b0 93 9f 27 	sts	0x279F, r27	; 0x80279f <SoftRef2+0x3>
      SoftRef3=AxisPosition3;
    2726:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    272a:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    272e:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    2732:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    2736:	80 93 98 27 	sts	0x2798, r24	; 0x802798 <SoftRef3>
    273a:	90 93 99 27 	sts	0x2799, r25	; 0x802799 <SoftRef3+0x1>
    273e:	a0 93 9a 27 	sts	0x279A, r26	; 0x80279a <SoftRef3+0x2>
    2742:	b0 93 9b 27 	sts	0x279B, r27	; 0x80279b <SoftRef3+0x3>
      break;
    2746:	f3 c3       	rjmp	.+2022   	; 0x2f2e <_Z6PRGExev+0xd58>
    }       
    case 14:
    {
      //printf("Back to Software refrence.\r\n");
      AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    2748:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    274c:	81 11       	cpse	r24, r1
    274e:	0e c0       	rjmp	.+28     	; 0x276c <_Z6PRGExev+0x596>
    2750:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    2754:	91 11       	cpse	r25, r1
    2756:	0a c0       	rjmp	.+20     	; 0x276c <_Z6PRGExev+0x596>
    2758:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    275c:	21 e0       	ldi	r18, 0x01	; 1
    275e:	91 11       	cpse	r25, r1
    2760:	01 c0       	rjmp	.+2      	; 0x2764 <_Z6PRGExev+0x58e>
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
      while (AxisMoving == 1) 
    2768:	99 23       	and	r25, r25
    276a:	99 f0       	breq	.+38     	; 0x2792 <_Z6PRGExev+0x5bc>
    276c:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    2770:	91 11       	cpse	r25, r1
    2772:	07 c0       	rjmp	.+14     	; 0x2782 <_Z6PRGExev+0x5ac>
    2774:	21 e0       	ldi	r18, 0x01	; 1
    2776:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    277a:	91 11       	cpse	r25, r1
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <_Z6PRGExev+0x5ae>
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <_Z6PRGExev+0x5ae>
    2782:	21 e0       	ldi	r18, 0x01	; 1
    2784:	92 2f       	mov	r25, r18
      {
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    2786:	81 11       	cpse	r24, r1
    2788:	fe cf       	rjmp	.-4      	; 0x2786 <_Z6PRGExev+0x5b0>
    }       
    case 14:
    {
      //printf("Back to Software refrence.\r\n");
      AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      while (AxisMoving == 1) 
    278a:	91 11       	cpse	r25, r1
    278c:	fc cf       	rjmp	.-8      	; 0x2786 <_Z6PRGExev+0x5b0>
    278e:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
      {
        AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }      
      if(SoftRef1<AxisPosition1) CLR_DIR1;
    2792:	00 91 a0 27 	lds	r16, 0x27A0	; 0x8027a0 <SoftRef1>
    2796:	10 91 a1 27 	lds	r17, 0x27A1	; 0x8027a1 <SoftRef1+0x1>
    279a:	20 91 a2 27 	lds	r18, 0x27A2	; 0x8027a2 <SoftRef1+0x2>
    279e:	30 91 a3 27 	lds	r19, 0x27A3	; 0x8027a3 <SoftRef1+0x3>
    27a2:	c0 90 ac 27 	lds	r12, 0x27AC	; 0x8027ac <AxisPosition1>
    27a6:	d0 90 ad 27 	lds	r13, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    27aa:	e0 90 ae 27 	lds	r14, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    27ae:	f0 90 af 27 	lds	r15, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    27b2:	0c 15       	cp	r16, r12
    27b4:	1d 05       	cpc	r17, r13
    27b6:	2e 05       	cpc	r18, r14
    27b8:	3f 05       	cpc	r19, r15
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <_Z6PRGExev+0x5f0>
    27bc:	e0 e2       	ldi	r30, 0x20	; 32
    27be:	f7 e0       	ldi	r31, 0x07	; 7
    27c0:	84 81       	ldd	r24, Z+4	; 0x04
    27c2:	8f 7e       	andi	r24, 0xEF	; 239
    27c4:	84 83       	std	Z+4, r24	; 0x04
      if(SoftRef1>AxisPosition1) SET_DIR1; 
    27c6:	c0 16       	cp	r12, r16
    27c8:	d1 06       	cpc	r13, r17
    27ca:	e2 06       	cpc	r14, r18
    27cc:	f3 06       	cpc	r15, r19
    27ce:	2c f4       	brge	.+10     	; 0x27da <_Z6PRGExev+0x604>
    27d0:	e0 e2       	ldi	r30, 0x20	; 32
    27d2:	f7 e0       	ldi	r31, 0x07	; 7
    27d4:	84 81       	ldd	r24, Z+4	; 0x04
    27d6:	80 61       	ori	r24, 0x10	; 16
    27d8:	84 83       	std	Z+4, r24	; 0x04
                
      if(SoftRef2<AxisPosition2) CLR_DIR2;
    27da:	40 90 9c 27 	lds	r4, 0x279C	; 0x80279c <SoftRef2>
    27de:	50 90 9d 27 	lds	r5, 0x279D	; 0x80279d <SoftRef2+0x1>
    27e2:	60 90 9e 27 	lds	r6, 0x279E	; 0x80279e <SoftRef2+0x2>
    27e6:	70 90 9f 27 	lds	r7, 0x279F	; 0x80279f <SoftRef2+0x3>
    27ea:	40 91 a8 27 	lds	r20, 0x27A8	; 0x8027a8 <AxisPosition2>
    27ee:	50 91 a9 27 	lds	r21, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    27f2:	60 91 aa 27 	lds	r22, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    27f6:	70 91 ab 27 	lds	r23, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    27fa:	44 16       	cp	r4, r20
    27fc:	55 06       	cpc	r5, r21
    27fe:	66 06       	cpc	r6, r22
    2800:	77 06       	cpc	r7, r23
    2802:	2c f4       	brge	.+10     	; 0x280e <_Z6PRGExev+0x638>
    2804:	e0 e2       	ldi	r30, 0x20	; 32
    2806:	f7 e0       	ldi	r31, 0x07	; 7
    2808:	84 81       	ldd	r24, Z+4	; 0x04
    280a:	8b 7f       	andi	r24, 0xFB	; 251
    280c:	84 83       	std	Z+4, r24	; 0x04
      if(SoftRef2>AxisPosition2) SET_DIR2;  
    280e:	44 15       	cp	r20, r4
    2810:	55 05       	cpc	r21, r5
    2812:	66 05       	cpc	r22, r6
    2814:	77 05       	cpc	r23, r7
    2816:	2c f4       	brge	.+10     	; 0x2822 <_Z6PRGExev+0x64c>
    2818:	e0 e2       	ldi	r30, 0x20	; 32
    281a:	f7 e0       	ldi	r31, 0x07	; 7
    281c:	84 81       	ldd	r24, Z+4	; 0x04
    281e:	84 60       	ori	r24, 0x04	; 4
    2820:	84 83       	std	Z+4, r24	; 0x04
            
      if(SoftRef3<AxisPosition3) CLR_DIR3;
    2822:	80 90 98 27 	lds	r8, 0x2798	; 0x802798 <SoftRef3>
    2826:	90 90 99 27 	lds	r9, 0x2799	; 0x802799 <SoftRef3+0x1>
    282a:	a0 90 9a 27 	lds	r10, 0x279A	; 0x80279a <SoftRef3+0x2>
    282e:	b0 90 9b 27 	lds	r11, 0x279B	; 0x80279b <SoftRef3+0x3>
    2832:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    2836:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    283a:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    283e:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    2842:	88 16       	cp	r8, r24
    2844:	99 06       	cpc	r9, r25
    2846:	aa 06       	cpc	r10, r26
    2848:	bb 06       	cpc	r11, r27
    284a:	2c f4       	brge	.+10     	; 0x2856 <_Z6PRGExev+0x680>
    284c:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2850:	ee 7f       	andi	r30, 0xFE	; 254
    2852:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
      if(SoftRef3>AxisPosition3) SET_DIR3;   
    2856:	88 15       	cp	r24, r8
    2858:	99 05       	cpc	r25, r9
    285a:	aa 05       	cpc	r26, r10
    285c:	bb 05       	cpc	r27, r11
    285e:	2c f4       	brge	.+10     	; 0x286a <_Z6PRGExev+0x694>
    2860:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    2864:	e1 60       	ori	r30, 0x01	; 1
    2866:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
      
      //printf("SoftRef1: %d\tSoftRef2: %d\tSoftRef3: %d\r\n",SoftRef1,SoftRef2,SoftRef3);
      DistanceToGo1=labs(AxisPosition1-SoftRef1);  
    286a:	c0 1a       	sub	r12, r16
    286c:	d1 0a       	sbc	r13, r17
    286e:	e2 0a       	sbc	r14, r18
    2870:	f3 0a       	sbc	r15, r19
    2872:	97 01       	movw	r18, r14
    2874:	86 01       	movw	r16, r12
    2876:	3a f4       	brpl	.+14     	; 0x2886 <_Z6PRGExev+0x6b0>
    2878:	00 27       	eor	r16, r16
    287a:	11 27       	eor	r17, r17
    287c:	98 01       	movw	r18, r16
    287e:	0c 19       	sub	r16, r12
    2880:	1d 09       	sbc	r17, r13
    2882:	2e 09       	sbc	r18, r14
    2884:	3f 09       	sbc	r19, r15
    2886:	68 01       	movw	r12, r16
    2888:	79 01       	movw	r14, r18
    288a:	00 93 90 27 	sts	0x2790, r16	; 0x802790 <DistanceToGo1>
    288e:	10 93 91 27 	sts	0x2791, r17	; 0x802791 <DistanceToGo1+0x1>
    2892:	20 93 92 27 	sts	0x2792, r18	; 0x802792 <DistanceToGo1+0x2>
    2896:	30 93 93 27 	sts	0x2793, r19	; 0x802793 <DistanceToGo1+0x3>
      DistanceToGo2=labs(AxisPosition2-SoftRef2); 
    289a:	44 19       	sub	r20, r4
    289c:	55 09       	sbc	r21, r5
    289e:	66 09       	sbc	r22, r6
    28a0:	77 09       	sbc	r23, r7
    28a2:	8a 01       	movw	r16, r20
    28a4:	9b 01       	movw	r18, r22
    28a6:	3a f4       	brpl	.+14     	; 0x28b6 <_Z6PRGExev+0x6e0>
    28a8:	00 27       	eor	r16, r16
    28aa:	11 27       	eor	r17, r17
    28ac:	98 01       	movw	r18, r16
    28ae:	04 1b       	sub	r16, r20
    28b0:	15 0b       	sbc	r17, r21
    28b2:	26 0b       	sbc	r18, r22
    28b4:	37 0b       	sbc	r19, r23
    28b6:	28 01       	movw	r4, r16
    28b8:	39 01       	movw	r6, r18
    28ba:	00 93 8c 27 	sts	0x278C, r16	; 0x80278c <DistanceToGo2>
    28be:	10 93 8d 27 	sts	0x278D, r17	; 0x80278d <DistanceToGo2+0x1>
    28c2:	20 93 8e 27 	sts	0x278E, r18	; 0x80278e <DistanceToGo2+0x2>
    28c6:	30 93 8f 27 	sts	0x278F, r19	; 0x80278f <DistanceToGo2+0x3>
      DistanceToGo3=labs(AxisPosition3-SoftRef3); 
    28ca:	88 19       	sub	r24, r8
    28cc:	99 09       	sbc	r25, r9
    28ce:	aa 09       	sbc	r26, r10
    28d0:	bb 09       	sbc	r27, r11
    28d2:	ac 01       	movw	r20, r24
    28d4:	bd 01       	movw	r22, r26
    28d6:	3a f4       	brpl	.+14     	; 0x28e6 <_Z6PRGExev+0x710>
    28d8:	44 27       	eor	r20, r20
    28da:	55 27       	eor	r21, r21
    28dc:	ba 01       	movw	r22, r20
    28de:	48 1b       	sub	r20, r24
    28e0:	59 0b       	sbc	r21, r25
    28e2:	6a 0b       	sbc	r22, r26
    28e4:	7b 0b       	sbc	r23, r27
    28e6:	49 83       	std	Y+1, r20	; 0x01
    28e8:	5a 83       	std	Y+2, r21	; 0x02
    28ea:	6b 83       	std	Y+3, r22	; 0x03
    28ec:	7c 83       	std	Y+4, r23	; 0x04
    28ee:	40 93 88 27 	sts	0x2788, r20	; 0x802788 <DistanceToGo3>
    28f2:	50 93 89 27 	sts	0x2789, r21	; 0x802789 <DistanceToGo3+0x1>
    28f6:	60 93 8a 27 	sts	0x278A, r22	; 0x80278a <DistanceToGo3+0x2>
    28fa:	70 93 8b 27 	sts	0x278B, r23	; 0x80278b <DistanceToGo3+0x3>
      //printf("DistanceToGo1: %d\tDistanceToGo2: %d\tDistanceToGo3: %d\r\n",DistanceToGo1,DistanceToGo2,DistanceToGo3);        
      if(DistanceToGo1 > DistanceToGo2 && DistanceToGo1 > DistanceToGo3) 
    28fe:	4c 14       	cp	r4, r12
    2900:	5d 04       	cpc	r5, r13
    2902:	6e 04       	cpc	r6, r14
    2904:	7f 04       	cpc	r7, r15
    2906:	9c f5       	brge	.+102    	; 0x296e <_Z6PRGExev+0x798>
    2908:	4c 15       	cp	r20, r12
    290a:	5d 05       	cpc	r21, r13
    290c:	6e 05       	cpc	r22, r14
    290e:	7f 05       	cpc	r23, r15
    2910:	74 f5       	brge	.+92     	; 0x296e <_Z6PRGExev+0x798>
      {
        MaxSpeed = Axes[0].MaxSpeed; 
    2912:	ed eb       	ldi	r30, 0xBD	; 189
    2914:	f7 e2       	ldi	r31, 0x27	; 39
    2916:	85 81       	ldd	r24, Z+5	; 0x05
    2918:	96 81       	ldd	r25, Z+6	; 0x06
    291a:	a7 81       	ldd	r26, Z+7	; 0x07
    291c:	b0 85       	ldd	r27, Z+8	; 0x08
    291e:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    2922:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    2926:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    292a:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        IACC=Axes[0].ACC; 
    292e:	81 85       	ldd	r24, Z+9	; 0x09
    2930:	92 85       	ldd	r25, Z+10	; 0x0a
    2932:	a3 85       	ldd	r26, Z+11	; 0x0b
    2934:	b4 85       	ldd	r27, Z+12	; 0x0c
    2936:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    293a:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    293e:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    2942:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
        IDEC=Axes[0].DEC; 
    2946:	85 85       	ldd	r24, Z+13	; 0x0d
    2948:	96 85       	ldd	r25, Z+14	; 0x0e
    294a:	a7 85       	ldd	r26, Z+15	; 0x0f
    294c:	b0 89       	ldd	r27, Z+16	; 0x10
    294e:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    2952:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    2956:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    295a:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition1-SoftRef1);
    295e:	c0 92 94 27 	sts	0x2794, r12	; 0x802794 <MaxDistanceToGo>
    2962:	d0 92 95 27 	sts	0x2795, r13	; 0x802795 <MaxDistanceToGo+0x1>
    2966:	e0 92 96 27 	sts	0x2796, r14	; 0x802796 <MaxDistanceToGo+0x2>
    296a:	f0 92 97 27 	sts	0x2797, r15	; 0x802797 <MaxDistanceToGo+0x3>
      } 
      if(DistanceToGo2 > DistanceToGo1 && DistanceToGo2 > DistanceToGo3)  
    296e:	c4 14       	cp	r12, r4
    2970:	d5 04       	cpc	r13, r5
    2972:	e6 04       	cpc	r14, r6
    2974:	f7 04       	cpc	r15, r7
    2976:	bc f5       	brge	.+110    	; 0x29e6 <_Z6PRGExev+0x810>
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	ab 81       	ldd	r26, Y+3	; 0x03
    297e:	bc 81       	ldd	r27, Y+4	; 0x04
    2980:	84 15       	cp	r24, r4
    2982:	95 05       	cpc	r25, r5
    2984:	a6 05       	cpc	r26, r6
    2986:	b7 05       	cpc	r27, r7
    2988:	74 f5       	brge	.+92     	; 0x29e6 <_Z6PRGExev+0x810>
      {
        MaxSpeed = Axes[1].MaxSpeed; 
    298a:	ed eb       	ldi	r30, 0xBD	; 189
    298c:	f7 e2       	ldi	r31, 0x27	; 39
    298e:	80 a9       	ldd	r24, Z+48	; 0x30
    2990:	91 a9       	ldd	r25, Z+49	; 0x31
    2992:	a2 a9       	ldd	r26, Z+50	; 0x32
    2994:	b3 a9       	ldd	r27, Z+51	; 0x33
    2996:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    299a:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    299e:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    29a2:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        IACC=Axes[1].ACC; 
    29a6:	84 a9       	ldd	r24, Z+52	; 0x34
    29a8:	95 a9       	ldd	r25, Z+53	; 0x35
    29aa:	a6 a9       	ldd	r26, Z+54	; 0x36
    29ac:	b7 a9       	ldd	r27, Z+55	; 0x37
    29ae:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    29b2:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    29b6:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    29ba:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
        IDEC=Axes[1].DEC; 
    29be:	80 ad       	ldd	r24, Z+56	; 0x38
    29c0:	91 ad       	ldd	r25, Z+57	; 0x39
    29c2:	a2 ad       	ldd	r26, Z+58	; 0x3a
    29c4:	b3 ad       	ldd	r27, Z+59	; 0x3b
    29c6:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    29ca:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    29ce:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    29d2:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition2-SoftRef2);
    29d6:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    29da:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    29de:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    29e2:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
      }
      if(DistanceToGo3 > DistanceToGo1 && DistanceToGo3 > DistanceToGo2)  
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ea:	ab 81       	ldd	r26, Y+3	; 0x03
    29ec:	bc 81       	ldd	r27, Y+4	; 0x04
    29ee:	c8 16       	cp	r12, r24
    29f0:	d9 06       	cpc	r13, r25
    29f2:	ea 06       	cpc	r14, r26
    29f4:	fb 06       	cpc	r15, r27
    29f6:	0c f0       	brlt	.+2      	; 0x29fa <_Z6PRGExev+0x824>
    29f8:	41 c0       	rjmp	.+130    	; 0x2a7c <_Z6PRGExev+0x8a6>
    29fa:	48 16       	cp	r4, r24
    29fc:	59 06       	cpc	r5, r25
    29fe:	6a 06       	cpc	r6, r26
    2a00:	7b 06       	cpc	r7, r27
    2a02:	e4 f5       	brge	.+120    	; 0x2a7c <_Z6PRGExev+0x8a6>
      {
        MaxSpeed = Axes[2].MaxSpeed; 
    2a04:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <Axes+0x5b>
    2a08:	90 91 19 28 	lds	r25, 0x2819	; 0x802819 <Axes+0x5c>
    2a0c:	a0 91 1a 28 	lds	r26, 0x281A	; 0x80281a <Axes+0x5d>
    2a10:	b0 91 1b 28 	lds	r27, 0x281B	; 0x80281b <Axes+0x5e>
    2a14:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    2a18:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    2a1c:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    2a20:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        IACC=Axes[2].ACC; 
    2a24:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <Axes+0x5f>
    2a28:	90 91 1d 28 	lds	r25, 0x281D	; 0x80281d <Axes+0x60>
    2a2c:	a0 91 1e 28 	lds	r26, 0x281E	; 0x80281e <Axes+0x61>
    2a30:	b0 91 1f 28 	lds	r27, 0x281F	; 0x80281f <Axes+0x62>
    2a34:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    2a38:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    2a3c:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    2a40:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
        IDEC=Axes[2].DEC; 
    2a44:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <Axes+0x63>
    2a48:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <Axes+0x64>
    2a4c:	a0 91 22 28 	lds	r26, 0x2822	; 0x802822 <Axes+0x65>
    2a50:	b0 91 23 28 	lds	r27, 0x2823	; 0x802823 <Axes+0x66>
    2a54:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    2a58:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    2a5c:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    2a60:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
        MaxDistanceToGo=labs(AxisPosition3-SoftRef3);
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	ab 81       	ldd	r26, Y+3	; 0x03
    2a6a:	bc 81       	ldd	r27, Y+4	; 0x04
    2a6c:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <MaxDistanceToGo>
    2a70:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <MaxDistanceToGo+0x1>
    2a74:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <MaxDistanceToGo+0x2>
    2a78:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <MaxDistanceToGo+0x3>
      }   
      //printf("MaxDTG: %d\r\n",MaxDistanceToGo);
      if(MaxSpeed>0)
    2a7c:	80 90 6d 27 	lds	r8, 0x276D	; 0x80276d <MaxSpeed>
    2a80:	90 90 6e 27 	lds	r9, 0x276E	; 0x80276e <MaxSpeed+0x1>
    2a84:	a0 90 6f 27 	lds	r10, 0x276F	; 0x80276f <MaxSpeed+0x2>
    2a88:	b0 90 70 27 	lds	r11, 0x2770	; 0x802770 <MaxSpeed+0x3>
    2a8c:	18 14       	cp	r1, r8
    2a8e:	19 04       	cpc	r1, r9
    2a90:	1a 04       	cpc	r1, r10
    2a92:	1b 04       	cpc	r1, r11
    2a94:	0c f0       	brlt	.+2      	; 0x2a98 <_Z6PRGExev+0x8c2>
    2a96:	52 c0       	rjmp	.+164    	; 0x2b3c <_Z6PRGExev+0x966>
      {
        Ma1=(unsigned int)((float)((float)DistanceToGo1/(float)MaxDistanceToGo)*1000);
    2a98:	60 91 94 27 	lds	r22, 0x2794	; 0x802794 <MaxDistanceToGo>
    2a9c:	70 91 95 27 	lds	r23, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    2aa0:	80 91 96 27 	lds	r24, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    2aa4:	90 91 97 27 	lds	r25, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    2aa8:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    2aac:	6d 83       	std	Y+5, r22	; 0x05
    2aae:	7e 83       	std	Y+6, r23	; 0x06
    2ab0:	8f 83       	std	Y+7, r24	; 0x07
    2ab2:	98 87       	std	Y+8, r25	; 0x08
    2ab4:	c7 01       	movw	r24, r14
    2ab6:	b6 01       	movw	r22, r12
    2ab8:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    2abc:	2d 81       	ldd	r18, Y+5	; 0x05
    2abe:	3e 81       	ldd	r19, Y+6	; 0x06
    2ac0:	4f 81       	ldd	r20, Y+7	; 0x07
    2ac2:	58 85       	ldd	r21, Y+8	; 0x08
    2ac4:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	4a e7       	ldi	r20, 0x7A	; 122
    2ace:	54 e4       	ldi	r21, 0x44	; 68
    2ad0:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    2ad4:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    2ad8:	60 93 30 27 	sts	0x2730, r22	; 0x802730 <Ma1>
    2adc:	70 93 31 27 	sts	0x2731, r23	; 0x802731 <Ma1+0x1>
        Ma2=(unsigned int)((float)((float)DistanceToGo2/(float)MaxDistanceToGo)*1000);  
    2ae0:	c3 01       	movw	r24, r6
    2ae2:	b2 01       	movw	r22, r4
    2ae4:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    2ae8:	2d 81       	ldd	r18, Y+5	; 0x05
    2aea:	3e 81       	ldd	r19, Y+6	; 0x06
    2aec:	4f 81       	ldd	r20, Y+7	; 0x07
    2aee:	58 85       	ldd	r21, Y+8	; 0x08
    2af0:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a e7       	ldi	r20, 0x7A	; 122
    2afa:	54 e4       	ldi	r21, 0x44	; 68
    2afc:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    2b00:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    2b04:	60 93 2e 27 	sts	0x272E, r22	; 0x80272e <Ma2>
    2b08:	70 93 2f 27 	sts	0x272F, r23	; 0x80272f <Ma2+0x1>
        Ma3=(unsigned int)((float)((float)DistanceToGo3/(float)MaxDistanceToGo)*1000); 
    2b0c:	69 81       	ldd	r22, Y+1	; 0x01
    2b0e:	7a 81       	ldd	r23, Y+2	; 0x02
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    2b18:	2d 81       	ldd	r18, Y+5	; 0x05
    2b1a:	3e 81       	ldd	r19, Y+6	; 0x06
    2b1c:	4f 81       	ldd	r20, Y+7	; 0x07
    2b1e:	58 85       	ldd	r21, Y+8	; 0x08
    2b20:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a e7       	ldi	r20, 0x7A	; 122
    2b2a:	54 e4       	ldi	r21, 0x44	; 68
    2b2c:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    2b30:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    2b34:	60 93 2c 27 	sts	0x272C, r22	; 0x80272c <Ma3>
    2b38:	70 93 2d 27 	sts	0x272D, r23	; 0x80272d <Ma3+0x1>
        //printf("MaxSpeed: %d\tMa1: %d\tMa2: %d\tMa3: %d\r\n",MaxSpeed,Ma1,Ma2,Ma3);         		  
      }
      CurSpeedFrq=MaxSpeed;
    2b3c:	80 92 42 27 	sts	0x2742, r8	; 0x802742 <CurSpeedFrq>
    2b40:	90 92 43 27 	sts	0x2743, r9	; 0x802743 <CurSpeedFrq+0x1>
    2b44:	a0 92 44 27 	sts	0x2744, r10	; 0x802744 <CurSpeedFrq+0x2>
    2b48:	b0 92 45 27 	sts	0x2745, r11	; 0x802745 <CurSpeedFrq+0x3>
      ACC = 0;
    2b4c:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
      DEC = 0;
    2b50:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
      TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);   
    2b54:	c5 01       	movw	r24, r10
    2b56:	b4 01       	movw	r22, r8
    2b58:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    2b5c:	9b 01       	movw	r18, r22
    2b5e:	ac 01       	movw	r20, r24
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	8a e7       	ldi	r24, 0x7A	; 122
    2b66:	96 e4       	ldi	r25, 0x46	; 70
    2b68:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    2b6c:	60 93 28 27 	sts	0x2728, r22	; 0x802728 <TimerMainPeriod>
    2b70:	70 93 29 27 	sts	0x2729, r23	; 0x802729 <TimerMainPeriod+0x1>
    2b74:	80 93 2a 27 	sts	0x272A, r24	; 0x80272a <TimerMainPeriod+0x2>
    2b78:	90 93 2b 27 	sts	0x272B, r25	; 0x80272b <TimerMainPeriod+0x3>
      tcc0_init();   
    2b7c:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
      TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a e7       	ldi	r20, 0x7A	; 122
    2b86:	54 e4       	ldi	r21, 0x44	; 68
    2b88:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    2b8c:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    2b90:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    2b94:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    2b98:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    2b9c:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    2ba0:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2ba4:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
      break;
    2ba8:	c2 c1       	rjmp	.+900    	; 0x2f2e <_Z6PRGExev+0xd58>
    {
      break;
    }
    case 81 :
    {
        DO1_SET;
    2baa:	e0 e0       	ldi	r30, 0x00	; 0
    2bac:	f7 e0       	ldi	r31, 0x07	; 7
    2bae:	84 81       	ldd	r24, Z+4	; 0x04
    2bb0:	84 60       	ori	r24, 0x04	; 4
    2bb2:	84 83       	std	Z+4, r24	; 0x04
        
        break;
    2bb4:	bc c1       	rjmp	.+888    	; 0x2f2e <_Z6PRGExev+0xd58>
    } 
    case 82 :
    {
        DO1_CLR;        
    2bb6:	e0 e0       	ldi	r30, 0x00	; 0
    2bb8:	f7 e0       	ldi	r31, 0x07	; 7
    2bba:	84 81       	ldd	r24, Z+4	; 0x04
    2bbc:	8b 7f       	andi	r24, 0xFB	; 251
    2bbe:	84 83       	std	Z+4, r24	; 0x04
        break;
    2bc0:	b6 c1       	rjmp	.+876    	; 0x2f2e <_Z6PRGExev+0xd58>
    }  
    case 90: //Serial number mode
    {
      char digit;
      int di=0;
      LastPLine = CMDPRGlist.PRGLine;
    2bc2:	80 91 3e 28 	lds	r24, 0x283E	; 0x80283e <CMDPRGlist>
    2bc6:	90 91 3f 28 	lds	r25, 0x283F	; 0x80283f <CMDPRGlist+0x1>
    2bca:	80 93 eb 26 	sts	0x26EB, r24	; 0x8026eb <LastPLine>
    2bce:	90 93 ec 26 	sts	0x26EC, r25	; 0x8026ec <LastPLine+0x1>
        
      CurrentSerial=ReadSerial(); 
    2bd2:	0e 94 91 07 	call	0xf22	; 0xf22 <_Z10ReadSerialv>
    2bd6:	60 93 e7 26 	sts	0x26E7, r22	; 0x8026e7 <CurrentSerial>
    2bda:	70 93 e8 26 	sts	0x26E8, r23	; 0x8026e8 <CurrentSerial+0x1>
    2bde:	80 93 e9 26 	sts	0x26E9, r24	; 0x8026e9 <CurrentSerial+0x2>
    2be2:	90 93 ea 26 	sts	0x26EA, r25	; 0x8026ea <CurrentSerial+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2be6:	9f ef       	ldi	r25, 0xFF	; 255
    2be8:	a3 ec       	ldi	r26, 0xC3	; 195
    2bea:	b9 e0       	ldi	r27, 0x09	; 9
    2bec:	91 50       	subi	r25, 0x01	; 1
    2bee:	a0 40       	sbci	r26, 0x00	; 0
    2bf0:	b0 40       	sbci	r27, 0x00	; 0
    2bf2:	e1 f7       	brne	.-8      	; 0x2bec <_Z6PRGExev+0xa16>
    2bf4:	00 c0       	rjmp	.+0      	; 0x2bf6 <_Z6PRGExev+0xa20>
    2bf6:	00 00       	nop
      _delay_ms(100);      
      if(((CurrentSerial <= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 0)) || ((CurrentSerial >= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 1)))
    2bf8:	00 91 7b 28 	lds	r16, 0x287B	; 0x80287b <CMDPRGlist+0x3d>
    2bfc:	10 91 7c 28 	lds	r17, 0x287C	; 0x80287c <CMDPRGlist+0x3e>
    2c00:	20 91 7d 28 	lds	r18, 0x287D	; 0x80287d <CMDPRGlist+0x3f>
    2c04:	30 91 7e 28 	lds	r19, 0x287E	; 0x80287e <CMDPRGlist+0x40>
    2c08:	60 91 e7 26 	lds	r22, 0x26E7	; 0x8026e7 <CurrentSerial>
    2c0c:	70 91 e8 26 	lds	r23, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2c10:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2c14:	90 91 ea 26 	lds	r25, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2c18:	06 17       	cp	r16, r22
    2c1a:	17 07       	cpc	r17, r23
    2c1c:	28 07       	cpc	r18, r24
    2c1e:	39 07       	cpc	r19, r25
    2c20:	50 f0       	brcs	.+20     	; 0x2c36 <_Z6PRGExev+0xa60>
    2c22:	40 91 76 28 	lds	r20, 0x2876	; 0x802876 <CMDPRGlist+0x38>
    2c26:	44 23       	and	r20, r20
    2c28:	59 f0       	breq	.+22     	; 0x2c40 <_Z6PRGExev+0xa6a>
    2c2a:	60 17       	cp	r22, r16
    2c2c:	71 07       	cpc	r23, r17
    2c2e:	82 07       	cpc	r24, r18
    2c30:	93 07       	cpc	r25, r19
    2c32:	08 f4       	brcc	.+2      	; 0x2c36 <_Z6PRGExev+0xa60>
    2c34:	10 c1       	rjmp	.+544    	; 0x2e56 <_Z6PRGExev+0xc80>
    2c36:	20 91 76 28 	lds	r18, 0x2876	; 0x802876 <CMDPRGlist+0x38>
    2c3a:	21 30       	cpi	r18, 0x01	; 1
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <_Z6PRGExev+0xa6a>
    2c3e:	0b c1       	rjmp	.+534    	; 0x2e56 <_Z6PRGExev+0xc80>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    2c40:	2a e0       	ldi	r18, 0x0A	; 10
    2c42:	4d ed       	ldi	r20, 0xDD	; 221
    2c44:	56 e2       	ldi	r21, 0x26	; 38
    2c46:	0e 94 4f 40 	call	0x809e	; 0x809e <__ltoa_ncheck>
      {               
        ltoa(CurrentSerial,SerialCh,10);       
        if(CMDPRGlist.FillWithZero)
    2c4a:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <CMDPRGlist+0x41>
    2c4e:	88 23       	and	r24, r24
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <_Z6PRGExev+0xa7e>
    2c52:	3f c0       	rjmp	.+126    	; 0x2cd2 <_Z6PRGExev+0xafc>
        {
          digit = CurrentSerial / 10;  
    2c54:	60 91 e7 26 	lds	r22, 0x26E7	; 0x8026e7 <CurrentSerial>
    2c58:	70 91 e8 26 	lds	r23, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2c5c:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2c60:	90 91 ea 26 	lds	r25, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2c64:	2a e0       	ldi	r18, 0x0A	; 10
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <__udivmodsi4>
          digit++;
    2c70:	2f 5f       	subi	r18, 0xFF	; 255
          if(CMDPRGlist.DigitNumber>digit)
    2c72:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <CMDPRGlist+0x42>
    2c76:	29 17       	cp	r18, r25
    2c78:	60 f5       	brcc	.+88     	; 0x2cd2 <_Z6PRGExev+0xafc>
          {
            for(di=digit-1;di>=0;di--)
    2c7a:	42 2f       	mov	r20, r18
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	ba 01       	movw	r22, r20
    2c80:	61 50       	subi	r22, 0x01	; 1
    2c82:	71 09       	sbc	r23, r1
    2c84:	4a f4       	brpl	.+18     	; 0x2c98 <_Z6PRGExev+0xac2>
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    2c86:	29 2f       	mov	r18, r25
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	c9 01       	movw	r24, r18
    2c8c:	84 1b       	sub	r24, r20
    2c8e:	95 0b       	sbc	r25, r21
    2c90:	18 16       	cp	r1, r24
    2c92:	19 06       	cpc	r1, r25
    2c94:	8c f0       	brlt	.+34     	; 0x2cb8 <_Z6PRGExev+0xae2>
    2c96:	19 c0       	rjmp	.+50     	; 0x2cca <_Z6PRGExev+0xaf4>
    2c98:	e2 2f       	mov	r30, r18
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	e3 52       	subi	r30, 0x23	; 35
    2c9e:	f9 4d       	sbci	r31, 0xD9	; 217
    2ca0:	a9 2f       	mov	r26, r25
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	a3 52       	subi	r26, 0x23	; 35
    2ca6:	b9 4d       	sbci	r27, 0xD9	; 217
    2ca8:	2d ed       	ldi	r18, 0xDD	; 221
    2caa:	36 e2       	ldi	r19, 0x26	; 38
          digit++;
          if(CMDPRGlist.DigitNumber>digit)
          {
            for(di=digit-1;di>=0;di--)
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
    2cac:	82 91       	ld	r24, -Z
    2cae:	8e 93       	st	-X, r24
        {
          digit = CurrentSerial / 10;  
          digit++;
          if(CMDPRGlist.DigitNumber>digit)
          {
            for(di=digit-1;di>=0;di--)
    2cb0:	2e 17       	cp	r18, r30
    2cb2:	3f 07       	cpc	r19, r31
    2cb4:	d9 f7       	brne	.-10     	; 0x2cac <_Z6PRGExev+0xad6>
    2cb6:	e7 cf       	rjmp	.-50     	; 0x2c86 <_Z6PRGExev+0xab0>
    2cb8:	ed ed       	ldi	r30, 0xDD	; 221
    2cba:	f6 e2       	ldi	r31, 0x26	; 38
    2cbc:	83 52       	subi	r24, 0x23	; 35
    2cbe:	99 4d       	sbci	r25, 0xD9	; 217
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
            {
              SerialCh[di]='0';
    2cc0:	40 e3       	ldi	r20, 0x30	; 48
    2cc2:	41 93       	st	Z+, r20
          {
            for(di=digit-1;di>=0;di--)
            {
              SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
            }    
            for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    2cc4:	e8 17       	cp	r30, r24
    2cc6:	f9 07       	cpc	r31, r25
    2cc8:	e1 f7       	brne	.-8      	; 0x2cc2 <_Z6PRGExev+0xaec>
            {
              SerialCh[di]='0';
            } 
            SerialCh[CMDPRGlist.DigitNumber]=0;
    2cca:	f9 01       	movw	r30, r18
    2ccc:	e3 52       	subi	r30, 0x23	; 35
    2cce:	f9 4d       	sbci	r31, 0xD9	; 217
    2cd0:	10 82       	st	Z, r1
          }
        }
        if(CMDPRGlist.SerialCountType == 0)
    2cd2:	80 91 76 28 	lds	r24, 0x2876	; 0x802876 <CMDPRGlist+0x38>
    2cd6:	81 11       	cpse	r24, r1
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <_Z6PRGExev+0xb2c>
        {
          CurrentSerial++;
    2cda:	80 91 e7 26 	lds	r24, 0x26E7	; 0x8026e7 <CurrentSerial>
    2cde:	90 91 e8 26 	lds	r25, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2ce2:	a0 91 e9 26 	lds	r26, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2ce6:	b0 91 ea 26 	lds	r27, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2cea:	01 96       	adiw	r24, 0x01	; 1
    2cec:	a1 1d       	adc	r26, r1
    2cee:	b1 1d       	adc	r27, r1
    2cf0:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <CurrentSerial>
    2cf4:	90 93 e8 26 	sts	0x26E8, r25	; 0x8026e8 <CurrentSerial+0x1>
    2cf8:	a0 93 e9 26 	sts	0x26E9, r26	; 0x8026e9 <CurrentSerial+0x2>
    2cfc:	b0 93 ea 26 	sts	0x26EA, r27	; 0x8026ea <CurrentSerial+0x3>
    2d00:	13 c0       	rjmp	.+38     	; 0x2d28 <_Z6PRGExev+0xb52>
        }
        else
        {
          CurrentSerial--;
    2d02:	80 91 e7 26 	lds	r24, 0x26E7	; 0x8026e7 <CurrentSerial>
    2d06:	90 91 e8 26 	lds	r25, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2d0a:	a0 91 e9 26 	lds	r26, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2d0e:	b0 91 ea 26 	lds	r27, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	a1 09       	sbc	r26, r1
    2d16:	b1 09       	sbc	r27, r1
    2d18:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <CurrentSerial>
    2d1c:	90 93 e8 26 	sts	0x26E8, r25	; 0x8026e8 <CurrentSerial+0x1>
    2d20:	a0 93 e9 26 	sts	0x26E9, r26	; 0x8026e9 <CurrentSerial+0x2>
    2d24:	b0 93 ea 26 	sts	0x26EA, r27	; 0x8026ea <CurrentSerial+0x3>
        }      
        
        SerChIndex=0; 
    2d28:	10 92 dc 26 	sts	0x26DC, r1	; 0x8026dc <SerChIndex>
        ContinuousRead=0;       
    2d2c:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        WriteSerial(CurrentSerial); 
    2d30:	60 91 e7 26 	lds	r22, 0x26E7	; 0x8026e7 <CurrentSerial>
    2d34:	70 91 e8 26 	lds	r23, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2d38:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2d3c:	90 91 ea 26 	lds	r25, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2d40:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_Z11WriteSeriall>
    2d44:	ef ef       	ldi	r30, 0xFF	; 255
    2d46:	f3 ed       	ldi	r31, 0xD3	; 211
    2d48:	20 e3       	ldi	r18, 0x30	; 48
    2d4a:	e1 50       	subi	r30, 0x01	; 1
    2d4c:	f0 40       	sbci	r31, 0x00	; 0
    2d4e:	20 40       	sbci	r18, 0x00	; 0
    2d50:	e1 f7       	brne	.-8      	; 0x2d4a <_Z6PRGExev+0xb74>
    2d52:	00 c0       	rjmp	.+0      	; 0x2d54 <_Z6PRGExev+0xb7e>
    2d54:	00 00       	nop
        _delay_ms(500);
        CurrentSerial=ReadSerial(); 
    2d56:	0e 94 91 07 	call	0xf22	; 0xf22 <_Z10ReadSerialv>
    2d5a:	60 93 e7 26 	sts	0x26E7, r22	; 0x8026e7 <CurrentSerial>
    2d5e:	70 93 e8 26 	sts	0x26E8, r23	; 0x8026e8 <CurrentSerial+0x1>
    2d62:	80 93 e9 26 	sts	0x26E9, r24	; 0x8026e9 <CurrentSerial+0x2>
    2d66:	90 93 ea 26 	sts	0x26EA, r25	; 0x8026ea <CurrentSerial+0x3>
    2d6a:	8f ef       	ldi	r24, 0xFF	; 255
    2d6c:	93 ec       	ldi	r25, 0xC3	; 195
    2d6e:	a9 e0       	ldi	r26, 0x09	; 9
    2d70:	81 50       	subi	r24, 0x01	; 1
    2d72:	90 40       	sbci	r25, 0x00	; 0
    2d74:	a0 40       	sbci	r26, 0x00	; 0
    2d76:	e1 f7       	brne	.-8      	; 0x2d70 <_Z6PRGExev+0xb9a>
    2d78:	00 c0       	rjmp	.+0      	; 0x2d7a <_Z6PRGExev+0xba4>
    2d7a:	00 00       	nop
        _delay_ms(100);                     
        printf("Current Serial is %d\r\n",CurrentSerial);
    2d7c:	80 91 ea 26 	lds	r24, 0x26EA	; 0x8026ea <CurrentSerial+0x3>
    2d80:	8f 93       	push	r24
    2d82:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <CurrentSerial+0x2>
    2d86:	8f 93       	push	r24
    2d88:	80 91 e8 26 	lds	r24, 0x26E8	; 0x8026e8 <CurrentSerial+0x1>
    2d8c:	8f 93       	push	r24
    2d8e:	80 91 e7 26 	lds	r24, 0x26E7	; 0x8026e7 <CurrentSerial>
    2d92:	8f 93       	push	r24
    2d94:	80 ee       	ldi	r24, 0xE0	; 224
    2d96:	90 e2       	ldi	r25, 0x20	; 32
    2d98:	9f 93       	push	r25
    2d9a:	8f 93       	push	r24
    2d9c:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
        ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100); 
    2da0:	e0 91 dc 26 	lds	r30, 0x26DC	; 0x8026dc <SerChIndex>
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	e3 52       	subi	r30, 0x23	; 35
    2da8:	f9 4d       	sbci	r31, 0xD9	; 217
    2daa:	20 81       	ld	r18, Z
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	20 53       	subi	r18, 0x30	; 48
    2db0:	31 09       	sbc	r19, r1
    2db2:	c9 01       	movw	r24, r18
    2db4:	88 0f       	add	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	22 0f       	add	r18, r18
    2dba:	33 1f       	adc	r19, r19
    2dbc:	22 0f       	add	r18, r18
    2dbe:	33 1f       	adc	r19, r19
    2dc0:	22 0f       	add	r18, r18
    2dc2:	33 1f       	adc	r19, r19
    2dc4:	82 0f       	add	r24, r18
    2dc6:	93 1f       	adc	r25, r19
    2dc8:	8c 59       	subi	r24, 0x9C	; 156
    2dca:	9f 4f       	sbci	r25, 0xFF	; 255
    2dcc:	0e 94 f6 07 	call	0xfec	; 0xfec <_Z14ReadSubProgramj>
        printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode); 
    2dd0:	80 91 41 28 	lds	r24, 0x2841	; 0x802841 <CMDPRGlist+0x3>
    2dd4:	1f 92       	push	r1
    2dd6:	8f 93       	push	r24
    2dd8:	80 91 3f 28 	lds	r24, 0x283F	; 0x80283f <CMDPRGlist+0x1>
    2ddc:	8f 93       	push	r24
    2dde:	ee e3       	ldi	r30, 0x3E	; 62
    2de0:	f8 e2       	ldi	r31, 0x28	; 40
    2de2:	80 81       	ld	r24, Z
    2de4:	8f 93       	push	r24
    2de6:	87 ef       	ldi	r24, 0xF7	; 247
    2de8:	90 e2       	ldi	r25, 0x20	; 32
    2dea:	9f 93       	push	r25
    2dec:	8f 93       	push	r24
    2dee:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
        printf("Move1:%d\tMove2:%d\tMove3:%d\r\n",CMDPRGlist.Move1,CMDPRGlist.Move2,CMDPRGlist.Move3);
    2df2:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <CMDPRGlist+0x10>
    2df6:	8f 93       	push	r24
    2df8:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <CMDPRGlist+0xf>
    2dfc:	8f 93       	push	r24
    2dfe:	80 91 4c 28 	lds	r24, 0x284C	; 0x80284c <CMDPRGlist+0xe>
    2e02:	8f 93       	push	r24
    2e04:	80 91 4b 28 	lds	r24, 0x284B	; 0x80284b <CMDPRGlist+0xd>
    2e08:	8f 93       	push	r24
    2e0a:	80 91 4a 28 	lds	r24, 0x284A	; 0x80284a <CMDPRGlist+0xc>
    2e0e:	8f 93       	push	r24
    2e10:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <CMDPRGlist+0xb>
    2e14:	8f 93       	push	r24
    2e16:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <CMDPRGlist+0xa>
    2e1a:	8f 93       	push	r24
    2e1c:	80 91 47 28 	lds	r24, 0x2847	; 0x802847 <CMDPRGlist+0x9>
    2e20:	8f 93       	push	r24
    2e22:	80 91 46 28 	lds	r24, 0x2846	; 0x802846 <CMDPRGlist+0x8>
    2e26:	8f 93       	push	r24
    2e28:	80 91 45 28 	lds	r24, 0x2845	; 0x802845 <CMDPRGlist+0x7>
    2e2c:	8f 93       	push	r24
    2e2e:	80 91 44 28 	lds	r24, 0x2844	; 0x802844 <CMDPRGlist+0x6>
    2e32:	8f 93       	push	r24
    2e34:	80 91 43 28 	lds	r24, 0x2843	; 0x802843 <CMDPRGlist+0x5>
    2e38:	8f 93       	push	r24
    2e3a:	84 e1       	ldi	r24, 0x14	; 20
    2e3c:	91 e2       	ldi	r25, 0x21	; 33
    2e3e:	9f 93       	push	r25
    2e40:	8f 93       	push	r24
    2e42:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
        PRGExe(); 
    2e46:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_Z6PRGExev>
        RunSubProgram=1;  
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	80 93 db 26 	sts	0x26DB, r24	; 0x8026db <RunSubProgram>
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	6c c0       	rjmp	.+216    	; 0x2f2e <_Z6PRGExev+0xd58>
      } 
      else
      {
        RunSubProgram=0;
    2e56:	10 92 db 26 	sts	0x26DB, r1	; 0x8026db <RunSubProgram>
        ContinuousRead=0; 
    2e5a:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        readRam();
    2e5e:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
        while(CMDPRGlist.PRGLine != LastPLine)
    2e62:	20 91 3e 28 	lds	r18, 0x283E	; 0x80283e <CMDPRGlist>
    2e66:	30 91 3f 28 	lds	r19, 0x283F	; 0x80283f <CMDPRGlist+0x1>
    2e6a:	80 91 eb 26 	lds	r24, 0x26EB	; 0x8026eb <LastPLine>
    2e6e:	90 91 ec 26 	lds	r25, 0x26EC	; 0x8026ec <LastPLine+0x1>
    2e72:	28 17       	cp	r18, r24
    2e74:	39 07       	cpc	r19, r25
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <_Z6PRGExev+0xca4>
    2e78:	5a c0       	rjmp	.+180    	; 0x2f2e <_Z6PRGExev+0xd58>
        {
          readRam();
    2e7a:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
      else
      {
        RunSubProgram=0;
        ContinuousRead=0; 
        readRam();
        while(CMDPRGlist.PRGLine != LastPLine)
    2e7e:	ae e3       	ldi	r26, 0x3E	; 62
    2e80:	b8 e2       	ldi	r27, 0x28	; 40
    2e82:	2d 91       	ld	r18, X+
    2e84:	3c 91       	ld	r19, X
    2e86:	80 91 eb 26 	lds	r24, 0x26EB	; 0x8026eb <LastPLine>
    2e8a:	90 91 ec 26 	lds	r25, 0x26EC	; 0x8026ec <LastPLine+0x1>
    2e8e:	28 17       	cp	r18, r24
    2e90:	39 07       	cpc	r19, r25
    2e92:	99 f7       	brne	.-26     	; 0x2e7a <_Z6PRGExev+0xca4>
    2e94:	4c c0       	rjmp	.+152    	; 0x2f2e <_Z6PRGExev+0xd58>
      }
      break;    
    }
    case 100 :
    {
        printf("End Of Program.\r\n");                       
    2e96:	81 e3       	ldi	r24, 0x31	; 49
    2e98:	91 e2       	ldi	r25, 0x21	; 33
    2e9a:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
        ProgramRun = 0;  
    2e9e:	10 92 bc 27 	sts	0x27BC, r1	; 0x8027bc <ProgramRun>
        ContinuousRead = 0;      
    2ea2:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        break;
    2ea6:	43 c0       	rjmp	.+134    	; 0x2f2e <_Z6PRGExev+0xd58>
    }  
    case 101:
    {
      SerChIndex++; 
    2ea8:	e0 91 dc 26 	lds	r30, 0x26DC	; 0x8026dc <SerChIndex>
    2eac:	ef 5f       	subi	r30, 0xFF	; 255
    2eae:	e0 93 dc 26 	sts	0x26DC, r30	; 0x8026dc <SerChIndex>
      
      if(SerialCh[SerChIndex]!=0)
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	e3 52       	subi	r30, 0x23	; 35
    2eb6:	f9 4d       	sbci	r31, 0xD9	; 217
    2eb8:	20 81       	ld	r18, Z
    2eba:	22 23       	and	r18, r18
    2ebc:	d1 f0       	breq	.+52     	; 0x2ef2 <_Z6PRGExev+0xd1c>
      {
        RunSubProgram=1;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	80 93 db 26 	sts	0x26DB, r24	; 0x8026db <RunSubProgram>
        ContinuousRead=0;
    2ec4:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100);  
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	20 53       	subi	r18, 0x30	; 48
    2ecc:	31 09       	sbc	r19, r1
    2ece:	c9 01       	movw	r24, r18
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	22 0f       	add	r18, r18
    2ed6:	33 1f       	adc	r19, r19
    2ed8:	22 0f       	add	r18, r18
    2eda:	33 1f       	adc	r19, r19
    2edc:	22 0f       	add	r18, r18
    2ede:	33 1f       	adc	r19, r19
    2ee0:	82 0f       	add	r24, r18
    2ee2:	93 1f       	adc	r25, r19
    2ee4:	8c 59       	subi	r24, 0x9C	; 156
    2ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee8:	0e 94 f6 07 	call	0xfec	; 0xfec <_Z14ReadSubProgramj>
        PRGExe();
    2eec:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_Z6PRGExev>
    2ef0:	1e c0       	rjmp	.+60     	; 0x2f2e <_Z6PRGExev+0xd58>
      }
      else
      {
        RunSubProgram=0;
    2ef2:	10 92 db 26 	sts	0x26DB, r1	; 0x8026db <RunSubProgram>
        ContinuousRead=0; 
    2ef6:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
        readRam();
    2efa:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
        while(CMDPRGlist.PRGLine != LastPLine)
    2efe:	20 91 eb 26 	lds	r18, 0x26EB	; 0x8026eb <LastPLine>
    2f02:	30 91 ec 26 	lds	r19, 0x26EC	; 0x8026ec <LastPLine+0x1>
    2f06:	80 91 3e 28 	lds	r24, 0x283E	; 0x80283e <CMDPRGlist>
    2f0a:	90 91 3f 28 	lds	r25, 0x283F	; 0x80283f <CMDPRGlist+0x1>
    2f0e:	28 17       	cp	r18, r24
    2f10:	39 07       	cpc	r19, r25
    2f12:	69 f0       	breq	.+26     	; 0x2f2e <_Z6PRGExev+0xd58>
        {
          readRam();
    2f14:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
      else
      {
        RunSubProgram=0;
        ContinuousRead=0; 
        readRam();
        while(CMDPRGlist.PRGLine != LastPLine)
    2f18:	ee e3       	ldi	r30, 0x3E	; 62
    2f1a:	f8 e2       	ldi	r31, 0x28	; 40
    2f1c:	20 81       	ld	r18, Z
    2f1e:	31 81       	ldd	r19, Z+1	; 0x01
    2f20:	80 91 eb 26 	lds	r24, 0x26EB	; 0x8026eb <LastPLine>
    2f24:	90 91 ec 26 	lds	r25, 0x26EC	; 0x8026ec <LastPLine+0x1>
    2f28:	28 17       	cp	r18, r24
    2f2a:	39 07       	cpc	r19, r25
    2f2c:	99 f7       	brne	.-26     	; 0x2f14 <_Z6PRGExev+0xd3e>
        }
      }
      break;
    }
 }
}
    2f2e:	28 96       	adiw	r28, 0x08	; 8
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	df 90       	pop	r13
    2f42:	cf 90       	pop	r12
    2f44:	bf 90       	pop	r11
    2f46:	af 90       	pop	r10
    2f48:	9f 90       	pop	r9
    2f4a:	8f 90       	pop	r8
    2f4c:	7f 90       	pop	r7
    2f4e:	6f 90       	pop	r6
    2f50:	5f 90       	pop	r5
    2f52:	4f 90       	pop	r4
    2f54:	08 95       	ret

00002f56 <_Z6cmdExev>:

// run command that comes from raspberry the command will be in cmdtemp
void cmdExe()
{
    2f56:	2f 92       	push	r2
    2f58:	3f 92       	push	r3
    2f5a:	4f 92       	push	r4
    2f5c:	5f 92       	push	r5
    2f5e:	6f 92       	push	r6
    2f60:	7f 92       	push	r7
    2f62:	8f 92       	push	r8
    2f64:	9f 92       	push	r9
    2f66:	af 92       	push	r10
    2f68:	bf 92       	push	r11
    2f6a:	cf 92       	push	r12
    2f6c:	df 92       	push	r13
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	6e 97       	sbiw	r28, 0x1e	; 30
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	de bf       	out	0x3e, r29	; 62
    if(strncmp(cmdTemp,"?0000",3)==0)         
    2f84:	43 e0       	ldi	r20, 0x03	; 3
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	62 e4       	ldi	r22, 0x42	; 66
    2f8a:	71 e2       	ldi	r23, 0x21	; 33
    2f8c:	80 e1       	ldi	r24, 0x10	; 16
    2f8e:	97 e2       	ldi	r25, 0x27	; 39
    2f90:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    2f94:	89 2b       	or	r24, r25
    2f96:	89 f4       	brne	.+34     	; 0x2fba <_Z6cmdExev+0x64>
    {
      sprintf(BufferSend,"!0000\n\r");       
    2f98:	88 e0       	ldi	r24, 0x08	; 8
    2f9a:	e8 e4       	ldi	r30, 0x48	; 72
    2f9c:	f1 e2       	ldi	r31, 0x21	; 33
    2f9e:	a7 e5       	ldi	r26, 0x57	; 87
    2fa0:	b9 e2       	ldi	r27, 0x29	; 41
    2fa2:	01 90       	ld	r0, Z+
    2fa4:	0d 92       	st	X+, r0
    2fa6:	8a 95       	dec	r24
    2fa8:	e1 f7       	brne	.-8      	; 0x2fa2 <_Z6cmdExev+0x4c>
      Responsing=1; 
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
      SetDataReady;
    2fb0:	e0 ea       	ldi	r30, 0xA0	; 160
    2fb2:	f6 e0       	ldi	r31, 0x06	; 6
    2fb4:	84 81       	ldd	r24, Z+4	; 0x04
    2fb6:	81 60       	ori	r24, 0x01	; 1
    2fb8:	84 83       	std	Z+4, r24	; 0x04
    }  
    if(strncmp(cmdTemp,"?01",3)==0)
    2fba:	43 e0       	ldi	r20, 0x03	; 3
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	60 e5       	ldi	r22, 0x50	; 80
    2fc0:	71 e2       	ldi	r23, 0x21	; 33
    2fc2:	80 e1       	ldi	r24, 0x10	; 16
    2fc4:	97 e2       	ldi	r25, 0x27	; 39
    2fc6:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    2fca:	89 2b       	or	r24, r25
    2fcc:	09 f0       	breq	.+2      	; 0x2fd0 <_Z6cmdExev+0x7a>
    2fce:	bb c1       	rjmp	.+886    	; 0x3346 <_Z6cmdExev+0x3f0>
    {//Read Axis Inputs
      if(cmdTemp[3]=='0')
    2fd0:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    2fd4:	80 33       	cpi	r24, 0x30	; 48
    2fd6:	11 f0       	breq	.+4      	; 0x2fdc <_Z6cmdExev+0x86>
    2fd8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
       switch(cmdTemp[4])
    2fdc:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    2fe0:	82 33       	cpi	r24, 0x32	; 50
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <_Z6cmdExev+0x90>
    2fe4:	96 c0       	rjmp	.+300    	; 0x3112 <_Z6cmdExev+0x1bc>
    2fe6:	83 33       	cpi	r24, 0x33	; 51
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <_Z6cmdExev+0x96>
    2fea:	21 c1       	rjmp	.+578    	; 0x322e <_Z6cmdExev+0x2d8>
    2fec:	81 33       	cpi	r24, 0x31	; 49
    2fee:	11 f0       	breq	.+4      	; 0x2ff4 <_Z6cmdExev+0x9e>
    2ff0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    2ff4:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    2ff8:	82 33       	cpi	r24, 0x32	; 50
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <_Z6cmdExev+0xa8>
    2ffc:	40 c0       	rjmp	.+128    	; 0x307e <_Z6cmdExev+0x128>
    2ffe:	30 f4       	brcc	.+12     	; 0x300c <_Z6cmdExev+0xb6>
    3000:	80 33       	cpi	r24, 0x30	; 48
    3002:	61 f0       	breq	.+24     	; 0x301c <_Z6cmdExev+0xc6>
    3004:	81 33       	cpi	r24, 0x31	; 49
    3006:	19 f1       	breq	.+70     	; 0x304e <_Z6cmdExev+0xf8>
    3008:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    300c:	83 33       	cpi	r24, 0x33	; 51
    300e:	09 f4       	brne	.+2      	; 0x3012 <_Z6cmdExev+0xbc>
    3010:	4f c0       	rjmp	.+158    	; 0x30b0 <_Z6cmdExev+0x15a>
    3012:	84 33       	cpi	r24, 0x34	; 52
    3014:	09 f4       	brne	.+2      	; 0x3018 <_Z6cmdExev+0xc2>
    3016:	65 c0       	rjmp	.+202    	; 0x30e2 <_Z6cmdExev+0x18c>
    3018:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01010\t%u\n\r",ALARM1);
    301c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3020:	88 23       	and	r24, r24
    3022:	11 f4       	brne	.+4      	; 0x3028 <_Z6cmdExev+0xd2>
    3024:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3028:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    302c:	82 fb       	bst	r24, 2
    302e:	88 27       	eor	r24, r24
    3030:	80 f9       	bld	r24, 0
    3032:	1f 92       	push	r1
    3034:	8f 93       	push	r24
    3036:	84 e5       	ldi	r24, 0x54	; 84
    3038:	91 e2       	ldi	r25, 0x21	; 33
    303a:	9f 93       	push	r25
    303c:	8f 93       	push	r24
    303e:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01011\t%u\n\r",INPOS1);
    304e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3052:	88 23       	and	r24, r24
    3054:	11 f4       	brne	.+4      	; 0x305a <_Z6cmdExev+0x104>
    3056:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    305a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    305e:	86 95       	lsr	r24
    3060:	81 70       	andi	r24, 0x01	; 1
    3062:	1f 92       	push	r1
    3064:	8f 93       	push	r24
    3066:	80 e6       	ldi	r24, 0x60	; 96
    3068:	91 e2       	ldi	r25, 0x21	; 33
    306a:	9f 93       	push	r25
    306c:	8f 93       	push	r24
    306e:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01012\t%u\n\r",REF1);
    307e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3082:	88 23       	and	r24, r24
    3084:	11 f4       	brne	.+4      	; 0x308a <_Z6cmdExev+0x134>
    3086:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    308a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    308e:	85 fb       	bst	r24, 5
    3090:	88 27       	eor	r24, r24
    3092:	80 f9       	bld	r24, 0
    3094:	1f 92       	push	r1
    3096:	8f 93       	push	r24
    3098:	8c e6       	ldi	r24, 0x6C	; 108
    309a:	91 e2       	ldi	r25, 0x21	; 33
    309c:	9f 93       	push	r25
    309e:	8f 93       	push	r24
    30a0:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01013\t%u\n\r",LIM_POS1);
    30b0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    30b4:	88 23       	and	r24, r24
    30b6:	11 f4       	brne	.+4      	; 0x30bc <_Z6cmdExev+0x166>
    30b8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    30bc:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    30c0:	83 fb       	bst	r24, 3
    30c2:	88 27       	eor	r24, r24
    30c4:	80 f9       	bld	r24, 0
    30c6:	1f 92       	push	r1
    30c8:	8f 93       	push	r24
    30ca:	88 e7       	ldi	r24, 0x78	; 120
    30cc:	91 e2       	ldi	r25, 0x21	; 33
    30ce:	9f 93       	push	r25
    30d0:	8f 93       	push	r24
    30d2:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01014\t%u\n\r",LIM_NEG1);
    30e2:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    30e6:	88 23       	and	r24, r24
    30e8:	11 f4       	brne	.+4      	; 0x30ee <_Z6cmdExev+0x198>
    30ea:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    30ee:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    30f2:	82 95       	swap	r24
    30f4:	81 70       	andi	r24, 0x01	; 1
    30f6:	1f 92       	push	r1
    30f8:	8f 93       	push	r24
    30fa:	84 e8       	ldi	r24, 0x84	; 132
    30fc:	91 e2       	ldi	r25, 0x21	; 33
    30fe:	9f 93       	push	r25
    3100:	8f 93       	push	r24
    3102:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    3112:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3116:	82 33       	cpi	r24, 0x32	; 50
    3118:	09 f4       	brne	.+2      	; 0x311c <_Z6cmdExev+0x1c6>
    311a:	40 c0       	rjmp	.+128    	; 0x319c <_Z6cmdExev+0x246>
    311c:	30 f4       	brcc	.+12     	; 0x312a <_Z6cmdExev+0x1d4>
    311e:	80 33       	cpi	r24, 0x30	; 48
    3120:	61 f0       	breq	.+24     	; 0x313a <_Z6cmdExev+0x1e4>
    3122:	81 33       	cpi	r24, 0x31	; 49
    3124:	11 f1       	breq	.+68     	; 0x316a <_Z6cmdExev+0x214>
    3126:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    312a:	83 33       	cpi	r24, 0x33	; 51
    312c:	09 f4       	brne	.+2      	; 0x3130 <_Z6cmdExev+0x1da>
    312e:	4f c0       	rjmp	.+158    	; 0x31ce <_Z6cmdExev+0x278>
    3130:	84 33       	cpi	r24, 0x34	; 52
    3132:	09 f4       	brne	.+2      	; 0x3136 <_Z6cmdExev+0x1e0>
    3134:	63 c0       	rjmp	.+198    	; 0x31fc <_Z6cmdExev+0x2a6>
    3136:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01020\t%u\n\r",ALARM2);
    313a:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    313e:	88 23       	and	r24, r24
    3140:	11 f4       	brne	.+4      	; 0x3146 <_Z6cmdExev+0x1f0>
    3142:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3146:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    314a:	86 95       	lsr	r24
    314c:	81 70       	andi	r24, 0x01	; 1
    314e:	1f 92       	push	r1
    3150:	8f 93       	push	r24
    3152:	80 e9       	ldi	r24, 0x90	; 144
    3154:	91 e2       	ldi	r25, 0x21	; 33
    3156:	9f 93       	push	r25
    3158:	8f 93       	push	r24
    315a:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01021\t%u\n\r",INPOS2);
    316a:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    316e:	88 23       	and	r24, r24
    3170:	11 f4       	brne	.+4      	; 0x3176 <_Z6cmdExev+0x220>
    3172:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3176:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    317a:	82 fb       	bst	r24, 2
    317c:	88 27       	eor	r24, r24
    317e:	80 f9       	bld	r24, 0
    3180:	1f 92       	push	r1
    3182:	8f 93       	push	r24
    3184:	8c e9       	ldi	r24, 0x9C	; 156
    3186:	91 e2       	ldi	r25, 0x21	; 33
    3188:	9f 93       	push	r25
    318a:	8f 93       	push	r24
    318c:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01032\t%u\n\r",REF2);
    319c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    31a0:	88 23       	and	r24, r24
    31a2:	11 f4       	brne	.+4      	; 0x31a8 <_Z6cmdExev+0x252>
    31a4:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    31a8:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    31ac:	85 fb       	bst	r24, 5
    31ae:	88 27       	eor	r24, r24
    31b0:	80 f9       	bld	r24, 0
    31b2:	1f 92       	push	r1
    31b4:	8f 93       	push	r24
    31b6:	88 ea       	ldi	r24, 0xA8	; 168
    31b8:	91 e2       	ldi	r25, 0x21	; 33
    31ba:	9f 93       	push	r25
    31bc:	8f 93       	push	r24
    31be:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01023\t%u\n\r",LIM_POS2);
    31ce:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    31d2:	88 23       	and	r24, r24
    31d4:	11 f4       	brne	.+4      	; 0x31da <_Z6cmdExev+0x284>
    31d6:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    31da:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    31de:	81 70       	andi	r24, 0x01	; 1
    31e0:	1f 92       	push	r1
    31e2:	8f 93       	push	r24
    31e4:	84 eb       	ldi	r24, 0xB4	; 180
    31e6:	91 e2       	ldi	r25, 0x21	; 33
    31e8:	9f 93       	push	r25
    31ea:	8f 93       	push	r24
    31ec:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01024\t%u\n\r",LIM_NEG2);
    31fc:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3200:	88 23       	and	r24, r24
    3202:	11 f4       	brne	.+4      	; 0x3208 <_Z6cmdExev+0x2b2>
    3204:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3208:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    320c:	86 fb       	bst	r24, 6
    320e:	88 27       	eor	r24, r24
    3210:	80 f9       	bld	r24, 0
    3212:	1f 92       	push	r1
    3214:	8f 93       	push	r24
    3216:	80 ec       	ldi	r24, 0xC0	; 192
    3218:	91 e2       	ldi	r25, 0x21	; 33
    321a:	9f 93       	push	r25
    321c:	8f 93       	push	r24
    321e:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    322e:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3232:	82 33       	cpi	r24, 0x32	; 50
    3234:	f1 f1       	breq	.+124    	; 0x32b2 <_Z6cmdExev+0x35c>
    3236:	30 f4       	brcc	.+12     	; 0x3244 <_Z6cmdExev+0x2ee>
    3238:	80 33       	cpi	r24, 0x30	; 48
    323a:	61 f0       	breq	.+24     	; 0x3254 <_Z6cmdExev+0x2fe>
    323c:	81 33       	cpi	r24, 0x31	; 49
    323e:	09 f1       	breq	.+66     	; 0x3282 <_Z6cmdExev+0x32c>
    3240:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3244:	83 33       	cpi	r24, 0x33	; 51
    3246:	09 f4       	brne	.+2      	; 0x324a <_Z6cmdExev+0x2f4>
    3248:	4d c0       	rjmp	.+154    	; 0x32e4 <_Z6cmdExev+0x38e>
    324a:	84 33       	cpi	r24, 0x34	; 52
    324c:	09 f4       	brne	.+2      	; 0x3250 <_Z6cmdExev+0x2fa>
    324e:	63 c0       	rjmp	.+198    	; 0x3316 <_Z6cmdExev+0x3c0>
    3250:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //ALARM
             {
               if(EchoON) printf("!01030\t%u\n\r",ALARM3);
    3254:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3258:	88 23       	and	r24, r24
    325a:	11 f4       	brne	.+4      	; 0x3260 <_Z6cmdExev+0x30a>
    325c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3260:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    3264:	81 70       	andi	r24, 0x01	; 1
    3266:	1f 92       	push	r1
    3268:	8f 93       	push	r24
    326a:	8c ec       	ldi	r24, 0xCC	; 204
    326c:	91 e2       	ldi	r25, 0x21	; 33
    326e:	9f 93       	push	r25
    3270:	8f 93       	push	r24
    3272:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	0f 90       	pop	r0
    327e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '1': //INPOS
             {
               if(EchoON) printf("!01031\t%u\n\r",INPOS3);
    3282:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3286:	88 23       	and	r24, r24
    3288:	11 f4       	brne	.+4      	; 0x328e <_Z6cmdExev+0x338>
    328a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    328e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    3292:	86 95       	lsr	r24
    3294:	81 70       	andi	r24, 0x01	; 1
    3296:	1f 92       	push	r1
    3298:	8f 93       	push	r24
    329a:	88 ed       	ldi	r24, 0xD8	; 216
    329c:	91 e2       	ldi	r25, 0x21	; 33
    329e:	9f 93       	push	r25
    32a0:	8f 93       	push	r24
    32a2:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '2': //REF
             {
               if(EchoON) printf("!01032\t%u\n\r",REF3);
    32b2:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    32b6:	88 23       	and	r24, r24
    32b8:	11 f4       	brne	.+4      	; 0x32be <_Z6cmdExev+0x368>
    32ba:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    32be:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    32c2:	86 fb       	bst	r24, 6
    32c4:	88 27       	eor	r24, r24
    32c6:	80 f9       	bld	r24, 0
    32c8:	1f 92       	push	r1
    32ca:	8f 93       	push	r24
    32cc:	88 ea       	ldi	r24, 0xA8	; 168
    32ce:	91 e2       	ldi	r25, 0x21	; 33
    32d0:	9f 93       	push	r25
    32d2:	8f 93       	push	r24
    32d4:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '3': //LIMIT+
             {
               if(EchoON) printf("!01033\t%u\n\r",LIM_POS3);
    32e4:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    32e8:	88 23       	and	r24, r24
    32ea:	11 f4       	brne	.+4      	; 0x32f0 <_Z6cmdExev+0x39a>
    32ec:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    32f0:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    32f4:	85 fb       	bst	r24, 5
    32f6:	88 27       	eor	r24, r24
    32f8:	80 f9       	bld	r24, 0
    32fa:	1f 92       	push	r1
    32fc:	8f 93       	push	r24
    32fe:	84 ee       	ldi	r24, 0xE4	; 228
    3300:	91 e2       	ldi	r25, 0x21	; 33
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '4': //LIMIT-
             {
               if(EchoON) printf("!01034\t%u\n\r",LIM_NEG3);
    3316:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    331a:	88 23       	and	r24, r24
    331c:	11 f4       	brne	.+4      	; 0x3322 <_Z6cmdExev+0x3cc>
    331e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3322:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    3326:	82 95       	swap	r24
    3328:	81 70       	andi	r24, 0x01	; 1
    332a:	1f 92       	push	r1
    332c:	8f 93       	push	r24
    332e:	80 ef       	ldi	r24, 0xF0	; 240
    3330:	91 e2       	ldi	r25, 0x21	; 33
    3332:	9f 93       	push	r25
    3334:	8f 93       	push	r24
    3336:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           break;
         }
       }
      }
    }      
    else if(strncmp(cmdTemp,"#02",3)==0)
    3346:	43 e0       	ldi	r20, 0x03	; 3
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	6c ef       	ldi	r22, 0xFC	; 252
    334c:	71 e2       	ldi	r23, 0x21	; 33
    334e:	80 e1       	ldi	r24, 0x10	; 16
    3350:	97 e2       	ldi	r25, 0x27	; 39
    3352:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    3356:	89 2b       	or	r24, r25
    3358:	09 f0       	breq	.+2      	; 0x335c <_Z6cmdExev+0x406>
    335a:	42 c1       	rjmp	.+644    	; 0x35e0 <_Z6cmdExev+0x68a>
    {//Write Axis Outputs
      if(cmdTemp[3]=='0')
    335c:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    3360:	80 33       	cpi	r24, 0x30	; 48
    3362:	11 f0       	breq	.+4      	; 0x3368 <_Z6cmdExev+0x412>
    3364:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
       switch(cmdTemp[4])
    3368:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    336c:	82 33       	cpi	r24, 0x32	; 50
    336e:	09 f4       	brne	.+2      	; 0x3372 <_Z6cmdExev+0x41c>
    3370:	6f c0       	rjmp	.+222    	; 0x3450 <_Z6cmdExev+0x4fa>
    3372:	83 33       	cpi	r24, 0x33	; 51
    3374:	09 f4       	brne	.+2      	; 0x3378 <_Z6cmdExev+0x422>
    3376:	d4 c0       	rjmp	.+424    	; 0x3520 <_Z6cmdExev+0x5ca>
    3378:	81 33       	cpi	r24, 0x31	; 49
    337a:	11 f0       	breq	.+4      	; 0x3380 <_Z6cmdExev+0x42a>
    337c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    3380:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3384:	80 33       	cpi	r24, 0x30	; 48
    3386:	21 f0       	breq	.+8      	; 0x3390 <_Z6cmdExev+0x43a>
    3388:	81 33       	cpi	r24, 0x31	; 49
    338a:	91 f1       	breq	.+100    	; 0x33f0 <_Z6cmdExev+0x49a>
    338c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    3390:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    3394:	80 33       	cpi	r24, 0x30	; 48
    3396:	89 f4       	brne	.+34     	; 0x33ba <_Z6cmdExev+0x464>
               {
                 CLR_ENABLE1;
    3398:	e0 e0       	ldi	r30, 0x00	; 0
    339a:	f6 e0       	ldi	r31, 0x06	; 6
    339c:	84 81       	ldd	r24, Z+4	; 0x04
    339e:	8f 77       	andi	r24, 0x7F	; 127
    33a0:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020100\n\r");  
    33a2:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    33a6:	88 23       	and	r24, r24
    33a8:	41 f0       	breq	.+16     	; 0x33ba <_Z6cmdExev+0x464>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	92 e2       	ldi	r25, 0x22	; 34
    33ae:	9f 93       	push	r25
    33b0:	8f 93       	push	r24
    33b2:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    33ba:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    33be:	81 33       	cpi	r24, 0x31	; 49
    33c0:	11 f0       	breq	.+4      	; 0x33c6 <_Z6cmdExev+0x470>
    33c2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               {
                 SET_ENABLE1;  
    33c6:	e0 e0       	ldi	r30, 0x00	; 0
    33c8:	f6 e0       	ldi	r31, 0x06	; 6
    33ca:	84 81       	ldd	r24, Z+4	; 0x04
    33cc:	80 68       	ori	r24, 0x80	; 128
    33ce:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020101\n\r");
    33d0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    33d4:	88 23       	and	r24, r24
    33d6:	11 f4       	brne	.+4      	; 0x33dc <_Z6cmdExev+0x486>
    33d8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    33dc:	8a e0       	ldi	r24, 0x0A	; 10
    33de:	92 e2       	ldi	r25, 0x22	; 34
    33e0:	9f 93       	push	r25
    33e2:	8f 93       	push	r24
    33e4:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    33f0:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    33f4:	80 33       	cpi	r24, 0x30	; 48
    33f6:	89 f4       	brne	.+34     	; 0x341a <_Z6cmdExev+0x4c4>
               {
                 CLR_EMG1;
    33f8:	e0 e0       	ldi	r30, 0x00	; 0
    33fa:	f6 e0       	ldi	r31, 0x06	; 6
    33fc:	84 81       	ldd	r24, Z+4	; 0x04
    33fe:	8f 7b       	andi	r24, 0xBF	; 191
    3400:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020110\n\r");  
    3402:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3406:	88 23       	and	r24, r24
    3408:	41 f0       	breq	.+16     	; 0x341a <_Z6cmdExev+0x4c4>
    340a:	84 e1       	ldi	r24, 0x14	; 20
    340c:	92 e2       	ldi	r25, 0x22	; 34
    340e:	9f 93       	push	r25
    3410:	8f 93       	push	r24
    3412:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    341a:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    341e:	81 33       	cpi	r24, 0x31	; 49
    3420:	11 f0       	breq	.+4      	; 0x3426 <_Z6cmdExev+0x4d0>
    3422:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               {
                 SET_EMG1;  
    3426:	e0 e0       	ldi	r30, 0x00	; 0
    3428:	f6 e0       	ldi	r31, 0x06	; 6
    342a:	84 81       	ldd	r24, Z+4	; 0x04
    342c:	80 64       	ori	r24, 0x40	; 64
    342e:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020111\n\r");
    3430:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3434:	88 23       	and	r24, r24
    3436:	11 f4       	brne	.+4      	; 0x343c <_Z6cmdExev+0x4e6>
    3438:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    343c:	8e e1       	ldi	r24, 0x1E	; 30
    343e:	92 e2       	ldi	r25, 0x22	; 34
    3440:	9f 93       	push	r25
    3442:	8f 93       	push	r24
    3444:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    3450:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3454:	80 33       	cpi	r24, 0x30	; 48
    3456:	21 f0       	breq	.+8      	; 0x3460 <_Z6cmdExev+0x50a>
    3458:	81 33       	cpi	r24, 0x31	; 49
    345a:	91 f1       	breq	.+100    	; 0x34c0 <_Z6cmdExev+0x56a>
    345c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    3460:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    3464:	80 33       	cpi	r24, 0x30	; 48
    3466:	89 f4       	brne	.+34     	; 0x348a <_Z6cmdExev+0x534>
               {
                 CLR_ENABLE2;
    3468:	e0 e2       	ldi	r30, 0x20	; 32
    346a:	f6 e0       	ldi	r31, 0x06	; 6
    346c:	84 81       	ldd	r24, Z+4	; 0x04
    346e:	8f 77       	andi	r24, 0x7F	; 127
    3470:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020200\n\r");  
    3472:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3476:	88 23       	and	r24, r24
    3478:	41 f0       	breq	.+16     	; 0x348a <_Z6cmdExev+0x534>
    347a:	88 e2       	ldi	r24, 0x28	; 40
    347c:	92 e2       	ldi	r25, 0x22	; 34
    347e:	9f 93       	push	r25
    3480:	8f 93       	push	r24
    3482:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    348a:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    348e:	81 33       	cpi	r24, 0x31	; 49
    3490:	11 f0       	breq	.+4      	; 0x3496 <_Z6cmdExev+0x540>
    3492:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               {
                 SET_ENABLE2;  
    3496:	e0 e2       	ldi	r30, 0x20	; 32
    3498:	f6 e0       	ldi	r31, 0x06	; 6
    349a:	84 81       	ldd	r24, Z+4	; 0x04
    349c:	80 68       	ori	r24, 0x80	; 128
    349e:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020201\n\r");
    34a0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    34a4:	88 23       	and	r24, r24
    34a6:	11 f4       	brne	.+4      	; 0x34ac <_Z6cmdExev+0x556>
    34a8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    34ac:	82 e3       	ldi	r24, 0x32	; 50
    34ae:	92 e2       	ldi	r25, 0x22	; 34
    34b0:	9f 93       	push	r25
    34b2:	8f 93       	push	r24
    34b4:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    34c0:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    34c4:	80 33       	cpi	r24, 0x30	; 48
    34c6:	89 f4       	brne	.+34     	; 0x34ea <_Z6cmdExev+0x594>
               {
                 CLR_EMG2;
    34c8:	e0 e2       	ldi	r30, 0x20	; 32
    34ca:	f6 e0       	ldi	r31, 0x06	; 6
    34cc:	84 81       	ldd	r24, Z+4	; 0x04
    34ce:	8f 7e       	andi	r24, 0xEF	; 239
    34d0:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020210\n\r");  
    34d2:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    34d6:	88 23       	and	r24, r24
    34d8:	41 f0       	breq	.+16     	; 0x34ea <_Z6cmdExev+0x594>
    34da:	8c e3       	ldi	r24, 0x3C	; 60
    34dc:	92 e2       	ldi	r25, 0x22	; 34
    34de:	9f 93       	push	r25
    34e0:	8f 93       	push	r24
    34e2:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    34ea:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    34ee:	81 33       	cpi	r24, 0x31	; 49
    34f0:	11 f0       	breq	.+4      	; 0x34f6 <_Z6cmdExev+0x5a0>
    34f2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               {
                 SET_EMG2;  
    34f6:	e0 e2       	ldi	r30, 0x20	; 32
    34f8:	f6 e0       	ldi	r31, 0x06	; 6
    34fa:	84 81       	ldd	r24, Z+4	; 0x04
    34fc:	80 61       	ori	r24, 0x10	; 16
    34fe:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020211\n\r");
    3500:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3504:	88 23       	and	r24, r24
    3506:	11 f4       	brne	.+4      	; 0x350c <_Z6cmdExev+0x5b6>
    3508:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    350c:	86 e4       	ldi	r24, 0x46	; 70
    350e:	92 e2       	ldi	r25, 0x22	; 34
    3510:	9f 93       	push	r25
    3512:	8f 93       	push	r24
    3514:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    3520:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3524:	80 33       	cpi	r24, 0x30	; 48
    3526:	21 f0       	breq	.+8      	; 0x3530 <_Z6cmdExev+0x5da>
    3528:	81 33       	cpi	r24, 0x31	; 49
    352a:	91 f1       	breq	.+100    	; 0x3590 <_Z6cmdExev+0x63a>
    352c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //Enable
             {
               if(cmdTemp[6]=='0')
    3530:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    3534:	80 33       	cpi	r24, 0x30	; 48
    3536:	89 f4       	brne	.+34     	; 0x355a <_Z6cmdExev+0x604>
               {
                 CLR_ENABLE3;
    3538:	e0 e4       	ldi	r30, 0x40	; 64
    353a:	f6 e0       	ldi	r31, 0x06	; 6
    353c:	84 81       	ldd	r24, Z+4	; 0x04
    353e:	8f 77       	andi	r24, 0x7F	; 127
    3540:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020300\n\r");  
    3542:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3546:	88 23       	and	r24, r24
    3548:	41 f0       	breq	.+16     	; 0x355a <_Z6cmdExev+0x604>
    354a:	80 e5       	ldi	r24, 0x50	; 80
    354c:	92 e2       	ldi	r25, 0x22	; 34
    354e:	9f 93       	push	r25
    3550:	8f 93       	push	r24
    3552:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    355a:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    355e:	81 33       	cpi	r24, 0x31	; 49
    3560:	11 f0       	breq	.+4      	; 0x3566 <_Z6cmdExev+0x610>
    3562:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               {
                 SET_ENABLE3;  
    3566:	e0 e4       	ldi	r30, 0x40	; 64
    3568:	f6 e0       	ldi	r31, 0x06	; 6
    356a:	84 81       	ldd	r24, Z+4	; 0x04
    356c:	80 68       	ori	r24, 0x80	; 128
    356e:	84 83       	std	Z+4, r24	; 0x04
                 if(EchoON) printf("!020301\n\r");
    3570:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3574:	88 23       	and	r24, r24
    3576:	11 f4       	brne	.+4      	; 0x357c <_Z6cmdExev+0x626>
    3578:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    357c:	8a e5       	ldi	r24, 0x5A	; 90
    357e:	92 e2       	ldi	r25, 0x22	; 34
    3580:	9f 93       	push	r25
    3582:	8f 93       	push	r24
    3584:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               }                       
               break;
             }
             case '1': //EMG
             {
               if(cmdTemp[6]=='0')
    3590:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    3594:	80 33       	cpi	r24, 0x30	; 48
    3596:	71 f4       	brne	.+28     	; 0x35b4 <_Z6cmdExev+0x65e>
               {
                 //CLR_EMG3;
                 if(EchoON) printf("!020310\n\r");  
    3598:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    359c:	88 23       	and	r24, r24
    359e:	11 f4       	brne	.+4      	; 0x35a4 <_Z6cmdExev+0x64e>
    35a0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    35a4:	84 e6       	ldi	r24, 0x64	; 100
    35a6:	92 e2       	ldi	r25, 0x22	; 34
    35a8:	9f 93       	push	r25
    35aa:	8f 93       	push	r24
    35ac:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
               }
               if(cmdTemp[6]=='1')
    35b4:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <cmdTemp+0x6>
    35b8:	81 33       	cpi	r24, 0x31	; 49
    35ba:	11 f0       	breq	.+4      	; 0x35c0 <_Z6cmdExev+0x66a>
    35bc:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               {
                 //SET_EMG3;  
                 if(EchoON) printf("!020311\n\r");
    35c0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    35c4:	88 23       	and	r24, r24
    35c6:	11 f4       	brne	.+4      	; 0x35cc <_Z6cmdExev+0x676>
    35c8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    35cc:	8e e6       	ldi	r24, 0x6E	; 110
    35ce:	92 e2       	ldi	r25, 0x22	; 34
    35d0:	9f 93       	push	r25
    35d2:	8f 93       	push	r24
    35d4:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         }         
       }
                                  
      }
    }
    else if(strncmp(cmdTemp,"?03",3)==0)
    35e0:	43 e0       	ldi	r20, 0x03	; 3
    35e2:	50 e0       	ldi	r21, 0x00	; 0
    35e4:	68 e7       	ldi	r22, 0x78	; 120
    35e6:	72 e2       	ldi	r23, 0x22	; 34
    35e8:	80 e1       	ldi	r24, 0x10	; 16
    35ea:	97 e2       	ldi	r25, 0x27	; 39
    35ec:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    35f0:	89 2b       	or	r24, r25
    35f2:	09 f0       	breq	.+2      	; 0x35f6 <_Z6cmdExev+0x6a0>
    35f4:	a4 c0       	rjmp	.+328    	; 0x373e <_Z6cmdExev+0x7e8>
    {//Read Axis Output
      if(cmdTemp[3]=='0')
    35f6:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    35fa:	80 33       	cpi	r24, 0x30	; 48
    35fc:	11 f0       	breq	.+4      	; 0x3602 <_Z6cmdExev+0x6ac>
    35fe:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
       switch(cmdTemp[4])
    3602:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    3606:	82 33       	cpi	r24, 0x32	; 50
    3608:	09 f4       	brne	.+2      	; 0x360c <_Z6cmdExev+0x6b6>
    360a:	41 c0       	rjmp	.+130    	; 0x368e <_Z6cmdExev+0x738>
    360c:	83 33       	cpi	r24, 0x33	; 51
    360e:	09 f4       	brne	.+2      	; 0x3612 <_Z6cmdExev+0x6bc>
    3610:	77 c0       	rjmp	.+238    	; 0x3700 <_Z6cmdExev+0x7aa>
    3612:	81 33       	cpi	r24, 0x31	; 49
    3614:	11 f0       	breq	.+4      	; 0x361a <_Z6cmdExev+0x6c4>
    3616:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         case '1': //Axis 1
         {
           switch(cmdTemp[5])
    361a:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    361e:	80 33       	cpi	r24, 0x30	; 48
    3620:	21 f0       	breq	.+8      	; 0x362a <_Z6cmdExev+0x6d4>
    3622:	81 33       	cpi	r24, 0x31	; 49
    3624:	d9 f0       	breq	.+54     	; 0x365c <_Z6cmdExev+0x706>
    3626:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03010\t%u\n\r",ENABLE1);                                      
    362a:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    362e:	88 23       	and	r24, r24
    3630:	11 f4       	brne	.+4      	; 0x3636 <_Z6cmdExev+0x6e0>
    3632:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3636:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    363a:	88 1f       	adc	r24, r24
    363c:	88 27       	eor	r24, r24
    363e:	88 1f       	adc	r24, r24
    3640:	1f 92       	push	r1
    3642:	8f 93       	push	r24
    3644:	8c e7       	ldi	r24, 0x7C	; 124
    3646:	92 e2       	ldi	r25, 0x22	; 34
    3648:	9f 93       	push	r25
    364a:	8f 93       	push	r24
    364c:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '1': //EMG
             {
               if(EchoON) printf("!03011\t%u\n\r",EMG1);                                      
    365c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3660:	88 23       	and	r24, r24
    3662:	11 f4       	brne	.+4      	; 0x3668 <_Z6cmdExev+0x712>
    3664:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3668:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    366c:	86 fb       	bst	r24, 6
    366e:	88 27       	eor	r24, r24
    3670:	80 f9       	bld	r24, 0
    3672:	1f 92       	push	r1
    3674:	8f 93       	push	r24
    3676:	88 e8       	ldi	r24, 0x88	; 136
    3678:	92 e2       	ldi	r25, 0x22	; 34
    367a:	9f 93       	push	r25
    367c:	8f 93       	push	r24
    367e:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           }
           break;
         }
         case '2': //Axis 2
         {
           switch(cmdTemp[5])
    368e:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3692:	80 33       	cpi	r24, 0x30	; 48
    3694:	21 f0       	breq	.+8      	; 0x369e <_Z6cmdExev+0x748>
    3696:	81 33       	cpi	r24, 0x31	; 49
    3698:	d9 f0       	breq	.+54     	; 0x36d0 <_Z6cmdExev+0x77a>
    369a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03020\t%u\n\r",ENABLE2);                                      
    369e:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    36a2:	88 23       	and	r24, r24
    36a4:	11 f4       	brne	.+4      	; 0x36aa <_Z6cmdExev+0x754>
    36a6:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    36aa:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    36ae:	88 1f       	adc	r24, r24
    36b0:	88 27       	eor	r24, r24
    36b2:	88 1f       	adc	r24, r24
    36b4:	1f 92       	push	r1
    36b6:	8f 93       	push	r24
    36b8:	84 e9       	ldi	r24, 0x94	; 148
    36ba:	92 e2       	ldi	r25, 0x22	; 34
    36bc:	9f 93       	push	r25
    36be:	8f 93       	push	r24
    36c0:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
               break;
             }
             case '1': //EMG
             {
               if(EchoON) printf("!03021\t%u\n\r",EMG2);                                      
    36d0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    36d4:	88 23       	and	r24, r24
    36d6:	11 f4       	brne	.+4      	; 0x36dc <_Z6cmdExev+0x786>
    36d8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    36dc:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    36e0:	82 95       	swap	r24
    36e2:	81 70       	andi	r24, 0x01	; 1
    36e4:	1f 92       	push	r1
    36e6:	8f 93       	push	r24
    36e8:	80 ea       	ldi	r24, 0xA0	; 160
    36ea:	92 e2       	ldi	r25, 0x22	; 34
    36ec:	9f 93       	push	r25
    36ee:	8f 93       	push	r24
    36f0:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           }
           break;
         }
         case '3': //Axis 3
         {
           switch(cmdTemp[5])
    3700:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <cmdTemp+0x5>
    3704:	80 33       	cpi	r24, 0x30	; 48
    3706:	11 f0       	breq	.+4      	; 0x370c <_Z6cmdExev+0x7b6>
    3708:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '0': //Enable
             {                       
               if(EchoON) printf("!03030\t%u\n\r",ENABLE3);                                      
    370c:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3710:	88 23       	and	r24, r24
    3712:	11 f4       	brne	.+4      	; 0x3718 <_Z6cmdExev+0x7c2>
    3714:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3718:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
    371c:	88 1f       	adc	r24, r24
    371e:	88 27       	eor	r24, r24
    3720:	88 1f       	adc	r24, r24
    3722:	1f 92       	push	r1
    3724:	8f 93       	push	r24
    3726:	8c ea       	ldi	r24, 0xAC	; 172
    3728:	92 e2       	ldi	r25, 0x22	; 34
    372a:	9f 93       	push	r25
    372c:	8f 93       	push	r24
    372e:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         }         
       }
                                  
      }
    }
    else if(strncmp(cmdTemp,"#04",3)==0)
    373e:	43 e0       	ldi	r20, 0x03	; 3
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	68 eb       	ldi	r22, 0xB8	; 184
    3744:	72 e2       	ldi	r23, 0x22	; 34
    3746:	80 e1       	ldi	r24, 0x10	; 16
    3748:	97 e2       	ldi	r25, 0x27	; 39
    374a:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    374e:	89 2b       	or	r24, r25
    3750:	09 f0       	breq	.+2      	; 0x3754 <_Z6cmdExev+0x7fe>
    3752:	cd c0       	rjmp	.+410    	; 0x38ee <_Z6cmdExev+0x998>
    {//SET JOG FOR AXIS  
      if (!ProgramRun)
    3754:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    3758:	81 11       	cpse	r24, r1
    375a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
        if(cmdTemp[3]=='0')
    375e:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    3762:	80 33       	cpi	r24, 0x30	; 48
    3764:	11 f0       	breq	.+4      	; 0x376a <_Z6cmdExev+0x814>
    3766:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         {
           switch(cmdTemp[4])
    376a:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    376e:	82 33       	cpi	r24, 0x32	; 50
    3770:	09 f4       	brne	.+2      	; 0x3774 <_Z6cmdExev+0x81e>
    3772:	45 c0       	rjmp	.+138    	; 0x37fe <_Z6cmdExev+0x8a8>
    3774:	83 33       	cpi	r24, 0x33	; 51
    3776:	09 f4       	brne	.+2      	; 0x377a <_Z6cmdExev+0x824>
    3778:	80 c0       	rjmp	.+256    	; 0x387a <_Z6cmdExev+0x924>
    377a:	81 33       	cpi	r24, 0x31	; 49
    377c:	11 f0       	breq	.+4      	; 0x3782 <_Z6cmdExev+0x82c>
    377e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3782:	e5 e1       	ldi	r30, 0x15	; 21
    3784:	f7 e2       	ldi	r31, 0x27	; 39
    3786:	ab ef       	ldi	r26, 0xFB	; 251
    3788:	b6 e2       	ldi	r27, 0x26	; 38
    378a:	23 e2       	ldi	r18, 0x23	; 35
    378c:	37 e2       	ldi	r19, 0x27	; 39
           {
             case '1': //Axis 1
             {
                for(k=0;k<14;k++)
                {
                  temp[k]=cmdTemp[k+5];
    378e:	81 91       	ld	r24, Z+
    3790:	8d 93       	st	X+, r24
         {
           switch(cmdTemp[4])
           {
             case '1': //Axis 1
             {
                for(k=0;k<14;k++)
    3792:	e2 17       	cp	r30, r18
    3794:	f3 07       	cpc	r31, r19
    3796:	d9 f7       	brne	.-10     	; 0x378e <_Z6cmdExev+0x838>
    3798:	8e e0       	ldi	r24, 0x0E	; 14
    379a:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[20]=0;
    379e:	10 92 0f 27 	sts	0x270F, r1	; 0x80270f <temp+0x14>
                SetJog1=atol(temp);
    37a2:	8b ef       	ldi	r24, 0xFB	; 251
    37a4:	96 e2       	ldi	r25, 0x26	; 38
    37a6:	0e 94 0f 40 	call	0x801e	; 0x801e <atol>
    37aa:	60 93 b8 27 	sts	0x27B8, r22	; 0x8027b8 <SetJog1>
    37ae:	70 93 b9 27 	sts	0x27B9, r23	; 0x8027b9 <SetJog1+0x1>
    37b2:	80 93 ba 27 	sts	0x27BA, r24	; 0x8027ba <SetJog1+0x2>
    37b6:	90 93 bb 27 	sts	0x27BB, r25	; 0x8027bb <SetJog1+0x3>
                sprintf(BufferSend,"!0401\t%s\n\r",temp); 
    37ba:	0f 2e       	mov	r0, r31
    37bc:	fb ef       	ldi	r31, 0xFB	; 251
    37be:	8f 2e       	mov	r8, r31
    37c0:	f6 e2       	ldi	r31, 0x26	; 38
    37c2:	9f 2e       	mov	r9, r31
    37c4:	f0 2d       	mov	r31, r0
    37c6:	9f 92       	push	r9
    37c8:	8f 92       	push	r8
    37ca:	8c eb       	ldi	r24, 0xBC	; 188
    37cc:	92 e2       	ldi	r25, 0x22	; 34
    37ce:	9f 93       	push	r25
    37d0:	8f 93       	push	r24
    37d2:	87 e5       	ldi	r24, 0x57	; 87
    37d4:	99 e2       	ldi	r25, 0x29	; 41
    37d6:	9f 93       	push	r25
    37d8:	8f 93       	push	r24
    37da:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
                Responsing=1;
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady;   
    37e4:	e0 ea       	ldi	r30, 0xA0	; 160
    37e6:	f6 e0       	ldi	r31, 0x06	; 6
    37e8:	84 81       	ldd	r24, Z+4	; 0x04
    37ea:	81 60       	ori	r24, 0x01	; 1
    37ec:	84 83       	std	Z+4, r24	; 0x04
                break;
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0
    37fa:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    37fe:	e5 e1       	ldi	r30, 0x15	; 21
    3800:	f7 e2       	ldi	r31, 0x27	; 39
    3802:	ab ef       	ldi	r26, 0xFB	; 251
    3804:	b6 e2       	ldi	r27, 0x26	; 38
    3806:	2f e1       	ldi	r18, 0x1F	; 31
    3808:	37 e2       	ldi	r19, 0x27	; 39
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=cmdTemp[k+5];
    380a:	81 91       	ld	r24, Z+
    380c:	8d 93       	st	X+, r24
                SetDataReady;   
                break;
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
    380e:	e2 17       	cp	r30, r18
    3810:	f3 07       	cpc	r31, r19
    3812:	d9 f7       	brne	.-10     	; 0x380a <_Z6cmdExev+0x8b4>
    3814:	8a e0       	ldi	r24, 0x0A	; 10
    3816:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[10]=0;
    381a:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
                SetJog2=atol(temp);
    381e:	8b ef       	ldi	r24, 0xFB	; 251
    3820:	96 e2       	ldi	r25, 0x26	; 38
    3822:	0e 94 0f 40 	call	0x801e	; 0x801e <atol>
    3826:	60 93 b4 27 	sts	0x27B4, r22	; 0x8027b4 <SetJog2>
    382a:	70 93 b5 27 	sts	0x27B5, r23	; 0x8027b5 <SetJog2+0x1>
    382e:	80 93 b6 27 	sts	0x27B6, r24	; 0x8027b6 <SetJog2+0x2>
    3832:	90 93 b7 27 	sts	0x27B7, r25	; 0x8027b7 <SetJog2+0x3>
                sprintf(BufferSend,"!0402\t%s\n\r",temp); 
    3836:	0f 2e       	mov	r0, r31
    3838:	fb ef       	ldi	r31, 0xFB	; 251
    383a:	cf 2e       	mov	r12, r31
    383c:	f6 e2       	ldi	r31, 0x26	; 38
    383e:	df 2e       	mov	r13, r31
    3840:	f0 2d       	mov	r31, r0
    3842:	df 92       	push	r13
    3844:	cf 92       	push	r12
    3846:	87 ec       	ldi	r24, 0xC7	; 199
    3848:	92 e2       	ldi	r25, 0x22	; 34
    384a:	9f 93       	push	r25
    384c:	8f 93       	push	r24
    384e:	87 e5       	ldi	r24, 0x57	; 87
    3850:	99 e2       	ldi	r25, 0x29	; 41
    3852:	9f 93       	push	r25
    3854:	8f 93       	push	r24
    3856:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
                Responsing=1; 
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady; 
    3860:	e0 ea       	ldi	r30, 0xA0	; 160
    3862:	f6 e0       	ldi	r31, 0x06	; 6
    3864:	84 81       	ldd	r24, Z+4	; 0x04
    3866:	81 60       	ori	r24, 0x01	; 1
    3868:	84 83       	std	Z+4, r24	; 0x04
                break;
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    387a:	e5 e1       	ldi	r30, 0x15	; 21
    387c:	f7 e2       	ldi	r31, 0x27	; 39
    387e:	ab ef       	ldi	r26, 0xFB	; 251
    3880:	b6 e2       	ldi	r27, 0x26	; 38
    3882:	2f e1       	ldi	r18, 0x1F	; 31
    3884:	37 e2       	ldi	r19, 0x27	; 39
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=cmdTemp[k+5];
    3886:	81 91       	ld	r24, Z+
    3888:	8d 93       	st	X+, r24
                SetDataReady; 
                break;
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
    388a:	e2 17       	cp	r30, r18
    388c:	f3 07       	cpc	r31, r19
    388e:	d9 f7       	brne	.-10     	; 0x3886 <_Z6cmdExev+0x930>
    3890:	8a e0       	ldi	r24, 0x0A	; 10
    3892:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=cmdTemp[k+5];
                }
                temp[10]=0;
    3896:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
                SetJog3=atol(temp);
    389a:	8b ef       	ldi	r24, 0xFB	; 251
    389c:	96 e2       	ldi	r25, 0x26	; 38
    389e:	0e 94 0f 40 	call	0x801e	; 0x801e <atol>
    38a2:	60 93 b0 27 	sts	0x27B0, r22	; 0x8027b0 <SetJog3>
    38a6:	70 93 b1 27 	sts	0x27B1, r23	; 0x8027b1 <SetJog3+0x1>
    38aa:	80 93 b2 27 	sts	0x27B2, r24	; 0x8027b2 <SetJog3+0x2>
    38ae:	90 93 b3 27 	sts	0x27B3, r25	; 0x8027b3 <SetJog3+0x3>
                sprintf(BufferSend,"!0403\t%s\n\r",temp); 
    38b2:	0b ef       	ldi	r16, 0xFB	; 251
    38b4:	16 e2       	ldi	r17, 0x26	; 38
    38b6:	1f 93       	push	r17
    38b8:	0f 93       	push	r16
    38ba:	82 ed       	ldi	r24, 0xD2	; 210
    38bc:	92 e2       	ldi	r25, 0x22	; 34
    38be:	9f 93       	push	r25
    38c0:	8f 93       	push	r24
    38c2:	87 e5       	ldi	r24, 0x57	; 87
    38c4:	99 e2       	ldi	r25, 0x29	; 41
    38c6:	9f 93       	push	r25
    38c8:	8f 93       	push	r24
    38ca:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
                Responsing=1; 
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady; 
    38d4:	e0 ea       	ldi	r30, 0xA0	; 160
    38d6:	f6 e0       	ldi	r31, 0x06	; 6
    38d8:	84 81       	ldd	r24, Z+4	; 0x04
    38da:	81 60       	ori	r24, 0x01	; 1
    38dc:	84 83       	std	Z+4, r24	; 0x04
                break;
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
             }              
           }
         }
      }          
    }
    else if(strncmp(cmdTemp,"?05",3)==0)
    38ee:	43 e0       	ldi	r20, 0x03	; 3
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	6d ed       	ldi	r22, 0xDD	; 221
    38f4:	72 e2       	ldi	r23, 0x22	; 34
    38f6:	80 e1       	ldi	r24, 0x10	; 16
    38f8:	97 e2       	ldi	r25, 0x27	; 39
    38fa:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    38fe:	89 2b       	or	r24, r25
    3900:	09 f0       	breq	.+2      	; 0x3904 <_Z6cmdExev+0x9ae>
    3902:	a1 c0       	rjmp	.+322    	; 0x3a46 <_Z6cmdExev+0xaf0>
    {//READ JOG FOR AXIS  
      if(cmdTemp[3]=='0')
    3904:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    3908:	80 33       	cpi	r24, 0x30	; 48
    390a:	11 f0       	breq	.+4      	; 0x3910 <_Z6cmdExev+0x9ba>
    390c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
           switch(cmdTemp[4])
    3910:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    3914:	82 33       	cpi	r24, 0x32	; 50
    3916:	b9 f1       	breq	.+110    	; 0x3986 <_Z6cmdExev+0xa30>
    3918:	83 33       	cpi	r24, 0x33	; 51
    391a:	09 f4       	brne	.+2      	; 0x391e <_Z6cmdExev+0x9c8>
    391c:	64 c0       	rjmp	.+200    	; 0x39e6 <_Z6cmdExev+0xa90>
    391e:	81 33       	cpi	r24, 0x31	; 49
    3920:	11 f0       	breq	.+4      	; 0x3926 <_Z6cmdExev+0x9d0>
    3922:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3926:	eb ef       	ldi	r30, 0xFB	; 251
    3928:	f6 e2       	ldi	r31, 0x26	; 38
    392a:	85 e0       	ldi	r24, 0x05	; 5
    392c:	97 e2       	ldi	r25, 0x27	; 39
           {
             case '1': //Axis 1
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    392e:	11 92       	st	Z+, r1
      {
           switch(cmdTemp[4])
           {
             case '1': //Axis 1
             {
                for(k=0;k<10;k++)
    3930:	8e 17       	cp	r24, r30
    3932:	9f 07       	cpc	r25, r31
    3934:	e1 f7       	brne	.-8      	; 0x392e <_Z6cmdExev+0x9d8>
    3936:	8a e0       	ldi	r24, 0x0A	; 10
    3938:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    393c:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
    3940:	60 91 b8 27 	lds	r22, 0x27B8	; 0x8027b8 <SetJog1>
    3944:	70 91 b9 27 	lds	r23, 0x27B9	; 0x8027b9 <SetJog1+0x1>
    3948:	80 91 ba 27 	lds	r24, 0x27BA	; 0x8027ba <SetJog1+0x2>
    394c:	90 91 bb 27 	lds	r25, 0x27BB	; 0x8027bb <SetJog1+0x3>
    3950:	2a e0       	ldi	r18, 0x0A	; 10
    3952:	4b ef       	ldi	r20, 0xFB	; 251
    3954:	56 e2       	ldi	r21, 0x26	; 38
    3956:	0e 94 4f 40 	call	0x809e	; 0x809e <__ltoa_ncheck>
                ltoa(SetJog1,temp,10);
                if(EchoON) printf("!0501\t%s\n\r",temp);  
    395a:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    395e:	88 23       	and	r24, r24
    3960:	11 f4       	brne	.+4      	; 0x3966 <_Z6cmdExev+0xa10>
    3962:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3966:	8b ef       	ldi	r24, 0xFB	; 251
    3968:	96 e2       	ldi	r25, 0x26	; 38
    396a:	9f 93       	push	r25
    396c:	8f 93       	push	r24
    396e:	81 ee       	ldi	r24, 0xE1	; 225
    3970:	92 e2       	ldi	r25, 0x22	; 34
    3972:	9f 93       	push	r25
    3974:	8f 93       	push	r24
    3976:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3986:	eb ef       	ldi	r30, 0xFB	; 251
    3988:	f6 e2       	ldi	r31, 0x26	; 38
    398a:	85 e0       	ldi	r24, 0x05	; 5
    398c:	97 e2       	ldi	r25, 0x27	; 39
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    398e:	11 92       	st	Z+, r1
                if(EchoON) printf("!0501\t%s\n\r",temp);  
                break;
             }
             case '2': //Axis 2
             {
                for(k=0;k<10;k++)
    3990:	e8 17       	cp	r30, r24
    3992:	f9 07       	cpc	r31, r25
    3994:	e1 f7       	brne	.-8      	; 0x398e <_Z6cmdExev+0xa38>
    3996:	8a e0       	ldi	r24, 0x0A	; 10
    3998:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    399c:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
    39a0:	60 91 b4 27 	lds	r22, 0x27B4	; 0x8027b4 <SetJog2>
    39a4:	70 91 b5 27 	lds	r23, 0x27B5	; 0x8027b5 <SetJog2+0x1>
    39a8:	80 91 b6 27 	lds	r24, 0x27B6	; 0x8027b6 <SetJog2+0x2>
    39ac:	90 91 b7 27 	lds	r25, 0x27B7	; 0x8027b7 <SetJog2+0x3>
    39b0:	2a e0       	ldi	r18, 0x0A	; 10
    39b2:	4b ef       	ldi	r20, 0xFB	; 251
    39b4:	56 e2       	ldi	r21, 0x26	; 38
    39b6:	0e 94 4f 40 	call	0x809e	; 0x809e <__ltoa_ncheck>
                ltoa(SetJog2,temp,10);
                if(EchoON) printf("!0502\t%s\n\r",temp);  
    39ba:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    39be:	88 23       	and	r24, r24
    39c0:	11 f4       	brne	.+4      	; 0x39c6 <_Z6cmdExev+0xa70>
    39c2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    39c6:	8b ef       	ldi	r24, 0xFB	; 251
    39c8:	96 e2       	ldi	r25, 0x26	; 38
    39ca:	9f 93       	push	r25
    39cc:	8f 93       	push	r24
    39ce:	8c ee       	ldi	r24, 0xEC	; 236
    39d0:	92 e2       	ldi	r25, 0x22	; 34
    39d2:	9f 93       	push	r25
    39d4:	8f 93       	push	r24
    39d6:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    39e6:	eb ef       	ldi	r30, 0xFB	; 251
    39e8:	f6 e2       	ldi	r31, 0x26	; 38
    39ea:	85 e0       	ldi	r24, 0x05	; 5
    39ec:	97 e2       	ldi	r25, 0x27	; 39
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
                {
                  temp[k]=0;
    39ee:	11 92       	st	Z+, r1
                if(EchoON) printf("!0502\t%s\n\r",temp);  
                break;
             }                          
             case '3': //Axis 3
             {
                for(k=0;k<10;k++)
    39f0:	8e 17       	cp	r24, r30
    39f2:	9f 07       	cpc	r25, r31
    39f4:	e1 f7       	brne	.-8      	; 0x39ee <_Z6cmdExev+0xa98>
    39f6:	8a e0       	ldi	r24, 0x0A	; 10
    39f8:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
                {
                  temp[k]=0;
                }
                temp[10]=0;
    39fc:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
    3a00:	60 91 b0 27 	lds	r22, 0x27B0	; 0x8027b0 <SetJog3>
    3a04:	70 91 b1 27 	lds	r23, 0x27B1	; 0x8027b1 <SetJog3+0x1>
    3a08:	80 91 b2 27 	lds	r24, 0x27B2	; 0x8027b2 <SetJog3+0x2>
    3a0c:	90 91 b3 27 	lds	r25, 0x27B3	; 0x8027b3 <SetJog3+0x3>
    3a10:	2a e0       	ldi	r18, 0x0A	; 10
    3a12:	4b ef       	ldi	r20, 0xFB	; 251
    3a14:	56 e2       	ldi	r21, 0x26	; 38
    3a16:	0e 94 4f 40 	call	0x809e	; 0x809e <__ltoa_ncheck>
                ltoa(SetJog3,temp,10);
                if(EchoON) printf("!0503\t%s\n\r",temp);  
    3a1a:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    3a1e:	88 23       	and	r24, r24
    3a20:	11 f4       	brne	.+4      	; 0x3a26 <_Z6cmdExev+0xad0>
    3a22:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    3a26:	8b ef       	ldi	r24, 0xFB	; 251
    3a28:	96 e2       	ldi	r25, 0x26	; 38
    3a2a:	9f 93       	push	r25
    3a2c:	8f 93       	push	r24
    3a2e:	87 ef       	ldi	r24, 0xF7	; 247
    3a30:	92 e2       	ldi	r25, 0x22	; 34
    3a32:	9f 93       	push	r25
    3a34:	8f 93       	push	r24
    3a36:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
                break;
             }              
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    3a46:	43 e0       	ldi	r20, 0x03	; 3
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	62 e0       	ldi	r22, 0x02	; 2
    3a4c:	73 e2       	ldi	r23, 0x23	; 35
    3a4e:	80 e1       	ldi	r24, 0x10	; 16
    3a50:	97 e2       	ldi	r25, 0x27	; 39
    3a52:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    3a56:	89 2b       	or	r24, r25
    3a58:	09 f0       	breq	.+2      	; 0x3a5c <_Z6cmdExev+0xb06>
    3a5a:	4c c7       	rjmp	.+3736   	; 0x48f4 <__stack+0x8f5>
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    3a5c:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    3a60:	81 11       	cpse	r24, r1
    3a62:	0c 94 95 33 	jmp	0x672a	; 0x672a <__stack+0x272b>
    3a66:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    3a6a:	91 11       	cpse	r25, r1
    3a6c:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__stack+0x277f>
    3a70:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    3a74:	91 e0       	ldi	r25, 0x01	; 1
    3a76:	21 11       	cpse	r18, r1
    3a78:	01 c0       	rjmp	.+2      	; 0x3a7c <_Z6cmdExev+0xb26>
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
         
     if (!ProgramRun)
    3a80:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    3a84:	91 11       	cpse	r25, r1
    3a86:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
     {
      while (AxisMoving == 1) 
    3a8a:	22 23       	and	r18, r18
    3a8c:	99 f0       	breq	.+38     	; 0x3ab4 <_Z6cmdExev+0xb5e>
    3a8e:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    3a92:	91 11       	cpse	r25, r1
    3a94:	07 c0       	rjmp	.+14     	; 0x3aa4 <_Z6cmdExev+0xb4e>
    3a96:	21 e0       	ldi	r18, 0x01	; 1
    3a98:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    3a9c:	91 11       	cpse	r25, r1
    3a9e:	03 c0       	rjmp	.+6      	; 0x3aa6 <_Z6cmdExev+0xb50>
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	01 c0       	rjmp	.+2      	; 0x3aa6 <_Z6cmdExev+0xb50>
    3aa4:	21 e0       	ldi	r18, 0x01	; 1
    3aa6:	92 2f       	mov	r25, r18
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    3aa8:	81 11       	cpse	r24, r1
    3aaa:	fe cf       	rjmp	.-4      	; 0x3aa8 <_Z6cmdExev+0xb52>
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    3aac:	91 11       	cpse	r25, r1
    3aae:	fc cf       	rjmp	.-8      	; 0x3aa8 <_Z6cmdExev+0xb52>
    3ab0:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
      if(cmdTemp[3]=='0')
    3ab4:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    3ab8:	80 33       	cpi	r24, 0x30	; 48
    3aba:	09 f0       	breq	.+2      	; 0x3abe <_Z6cmdExev+0xb68>
    3abc:	8f c4       	rjmp	.+2334   	; 0x43dc <__stack+0x3dd>
      {
           switch(cmdTemp[4])
    3abe:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    3ac2:	82 33       	cpi	r24, 0x32	; 50
    3ac4:	09 f4       	brne	.+2      	; 0x3ac8 <_Z6cmdExev+0xb72>
    3ac6:	88 c1       	rjmp	.+784    	; 0x3dd8 <_Z6cmdExev+0xe82>
    3ac8:	83 33       	cpi	r24, 0x33	; 51
    3aca:	09 f4       	brne	.+2      	; 0x3ace <_Z6cmdExev+0xb78>
    3acc:	06 c3       	rjmp	.+1548   	; 0x40da <__stack+0xdb>
    3ace:	81 33       	cpi	r24, 0x31	; 49
    3ad0:	11 f0       	breq	.+4      	; 0x3ad6 <_Z6cmdExev+0xb80>
    3ad2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '1': //Axis 1
             {
                if(SetJog1<AxisPosition1) CLR_DIR1;
    3ad6:	40 91 b8 27 	lds	r20, 0x27B8	; 0x8027b8 <SetJog1>
    3ada:	50 91 b9 27 	lds	r21, 0x27B9	; 0x8027b9 <SetJog1+0x1>
    3ade:	60 91 ba 27 	lds	r22, 0x27BA	; 0x8027ba <SetJog1+0x2>
    3ae2:	70 91 bb 27 	lds	r23, 0x27BB	; 0x8027bb <SetJog1+0x3>
    3ae6:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    3aea:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    3aee:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    3af2:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    3af6:	48 17       	cp	r20, r24
    3af8:	59 07       	cpc	r21, r25
    3afa:	6a 07       	cpc	r22, r26
    3afc:	7b 07       	cpc	r23, r27
    3afe:	2c f4       	brge	.+10     	; 0x3b0a <_Z6cmdExev+0xbb4>
    3b00:	e0 e2       	ldi	r30, 0x20	; 32
    3b02:	f7 e0       	ldi	r31, 0x07	; 7
    3b04:	24 81       	ldd	r18, Z+4	; 0x04
    3b06:	2f 7e       	andi	r18, 0xEF	; 239
    3b08:	24 83       	std	Z+4, r18	; 0x04
                if(SetJog1>AxisPosition1) SET_DIR1;
    3b0a:	84 17       	cp	r24, r20
    3b0c:	95 07       	cpc	r25, r21
    3b0e:	a6 07       	cpc	r26, r22
    3b10:	b7 07       	cpc	r27, r23
    3b12:	2c f4       	brge	.+10     	; 0x3b1e <_Z6cmdExev+0xbc8>
    3b14:	e0 e2       	ldi	r30, 0x20	; 32
    3b16:	f7 e0       	ldi	r31, 0x07	; 7
    3b18:	24 81       	ldd	r18, Z+4	; 0x04
    3b1a:	20 61       	ori	r18, 0x10	; 16
    3b1c:	24 83       	std	Z+4, r18	; 0x04
                        
                MaxSpeed=SetSpeed1; 
    3b1e:	c0 90 79 27 	lds	r12, 0x2779	; 0x802779 <SetSpeed1>
    3b22:	d0 90 7a 27 	lds	r13, 0x277A	; 0x80277a <SetSpeed1+0x1>
    3b26:	e0 90 7b 27 	lds	r14, 0x277B	; 0x80277b <SetSpeed1+0x2>
    3b2a:	f0 90 7c 27 	lds	r15, 0x277C	; 0x80277c <SetSpeed1+0x3>
    3b2e:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    3b32:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    3b36:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    3b3a:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
                IACC=ACC1; 
    3b3e:	80 90 69 27 	lds	r8, 0x2769	; 0x802769 <ACC1>
    3b42:	90 90 6a 27 	lds	r9, 0x276A	; 0x80276a <ACC1+0x1>
    3b46:	a0 90 6b 27 	lds	r10, 0x276B	; 0x80276b <ACC1+0x2>
    3b4a:	b0 90 6c 27 	lds	r11, 0x276C	; 0x80276c <ACC1+0x3>
    3b4e:	89 82       	std	Y+1, r8	; 0x01
    3b50:	9a 82       	std	Y+2, r9	; 0x02
    3b52:	ab 82       	std	Y+3, r10	; 0x03
    3b54:	bc 82       	std	Y+4, r11	; 0x04
    3b56:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    3b5a:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    3b5e:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    3b62:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
                IDEC=DEC1; 
    3b66:	80 90 5d 27 	lds	r8, 0x275D	; 0x80275d <DEC1>
    3b6a:	90 90 5e 27 	lds	r9, 0x275E	; 0x80275e <DEC1+0x1>
    3b6e:	a0 90 5f 27 	lds	r10, 0x275F	; 0x80275f <DEC1+0x2>
    3b72:	b0 90 60 27 	lds	r11, 0x2760	; 0x802760 <DEC1+0x3>
    3b76:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    3b7a:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    3b7e:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    3b82:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
                MaxDistanceToGo=labs(AxisPosition1-SetJog1);               
    3b86:	84 1b       	sub	r24, r20
    3b88:	95 0b       	sbc	r25, r21
    3b8a:	a6 0b       	sbc	r26, r22
    3b8c:	b7 0b       	sbc	r27, r23
    3b8e:	2c 01       	movw	r4, r24
    3b90:	3d 01       	movw	r6, r26
    3b92:	3a f4       	brpl	.+14     	; 0x3ba2 <_Z6cmdExev+0xc4c>
    3b94:	44 24       	eor	r4, r4
    3b96:	55 24       	eor	r5, r5
    3b98:	32 01       	movw	r6, r4
    3b9a:	48 1a       	sub	r4, r24
    3b9c:	59 0a       	sbc	r5, r25
    3b9e:	6a 0a       	sbc	r6, r26
    3ba0:	7b 0a       	sbc	r7, r27
    3ba2:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    3ba6:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    3baa:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    3bae:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
                Ma1=1000;          
    3bb2:	88 ee       	ldi	r24, 0xE8	; 232
    3bb4:	93 e0       	ldi	r25, 0x03	; 3
    3bb6:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    3bba:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
                CurSpeedFrq=0;
    3bbe:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    3bc2:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    3bc6:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    3bca:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
                TCC0.CCA=0xFFFF;                                                   
    3bce:	8f ef       	ldi	r24, 0xFF	; 255
    3bd0:	9f ef       	ldi	r25, 0xFF	; 255
    3bd2:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3bd6:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
                ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    3bda:	c7 01       	movw	r24, r14
    3bdc:	b6 01       	movw	r22, r12
    3bde:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	48 ec       	ldi	r20, 0xC8	; 200
    3be8:	52 e4       	ldi	r21, 0x42	; 66
    3bea:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    3bee:	6d 83       	std	Y+5, r22	; 0x05
    3bf0:	7e 83       	std	Y+6, r23	; 0x06
    3bf2:	8f 83       	std	Y+7, r24	; 0x07
    3bf4:	98 87       	std	Y+8, r25	; 0x08
                ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    3bf6:	69 81       	ldd	r22, Y+1	; 0x01
    3bf8:	7a 81       	ldd	r23, Y+2	; 0x02
    3bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfe:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3c02:	9b 01       	movw	r18, r22
    3c04:	ac 01       	movw	r20, r24
    3c06:	6d 81       	ldd	r22, Y+5	; 0x05
    3c08:	7e 81       	ldd	r23, Y+6	; 0x06
    3c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c0c:	98 85       	ldd	r25, Y+8	; 0x08
    3c0e:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    3c12:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    3c16:	9b 01       	movw	r18, r22
    3c18:	ac 01       	movw	r20, r24
    3c1a:	c7 01       	movw	r24, r14
    3c1c:	b6 01       	movw	r22, r12
    3c1e:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    3c22:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    3c26:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    3c2a:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    3c2e:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
                DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
                DECSpeedINT= MaxSpeed / DECSpeedINT;                                                     
    3c32:	c5 01       	movw	r24, r10
    3c34:	b4 01       	movw	r22, r8
    3c36:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3c3a:	9b 01       	movw	r18, r22
    3c3c:	ac 01       	movw	r20, r24
    3c3e:	6d 81       	ldd	r22, Y+5	; 0x05
    3c40:	7e 81       	ldd	r23, Y+6	; 0x06
    3c42:	8f 81       	ldd	r24, Y+7	; 0x07
    3c44:	98 85       	ldd	r25, Y+8	; 0x08
    3c46:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    3c4a:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    3c4e:	9b 01       	movw	r18, r22
    3c50:	ac 01       	movw	r20, r24
    3c52:	c7 01       	movw	r24, r14
    3c54:	b6 01       	movw	r22, r12
    3c56:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    3c5a:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    3c5e:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    3c62:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    3c66:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    3c6a:	a7 01       	movw	r20, r14
    3c6c:	96 01       	movw	r18, r12
    3c6e:	c7 01       	movw	r24, r14
    3c70:	b6 01       	movw	r22, r12
    3c72:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <__mulsi3>
    3c76:	6d 83       	std	Y+5, r22	; 0x05
    3c78:	7e 83       	std	Y+6, r23	; 0x06
    3c7a:	8f 83       	std	Y+7, r24	; 0x07
    3c7c:	98 87       	std	Y+8, r25	; 0x08
    3c7e:	a5 01       	movw	r20, r10
    3c80:	94 01       	movw	r18, r8
    3c82:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    3c86:	69 01       	movw	r12, r18
    3c88:	7a 01       	movw	r14, r20
    3c8a:	20 93 80 27 	sts	0x2780, r18	; 0x802780 <DecDTG>
    3c8e:	30 93 81 27 	sts	0x2781, r19	; 0x802781 <DecDTG+0x1>
    3c92:	40 93 82 27 	sts	0x2782, r20	; 0x802782 <DecDTG+0x2>
    3c96:	50 93 83 27 	sts	0x2783, r21	; 0x802783 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    3c9a:	6d 81       	ldd	r22, Y+5	; 0x05
    3c9c:	7e 81       	ldd	r23, Y+6	; 0x06
    3c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    3ca0:	98 85       	ldd	r25, Y+8	; 0x08
    3ca2:	29 81       	ldd	r18, Y+1	; 0x01
    3ca4:	3a 81       	ldd	r19, Y+2	; 0x02
    3ca6:	4b 81       	ldd	r20, Y+3	; 0x03
    3ca8:	5c 81       	ldd	r21, Y+4	; 0x04
    3caa:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    3cae:	46 01       	movw	r8, r12
    3cb0:	57 01       	movw	r10, r14
    3cb2:	82 0e       	add	r8, r18
    3cb4:	93 1e       	adc	r9, r19
    3cb6:	a4 1e       	adc	r10, r20
    3cb8:	b5 1e       	adc	r11, r21
    3cba:	80 92 49 27 	sts	0x2749, r8	; 0x802749 <SumAccDecDTG>
    3cbe:	90 92 4a 27 	sts	0x274A, r9	; 0x80274a <SumAccDecDTG+0x1>
    3cc2:	a0 92 4b 27 	sts	0x274B, r10	; 0x80274b <SumAccDecDTG+0x2>
    3cc6:	b0 92 4c 27 	sts	0x274C, r11	; 0x80274c <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    3cca:	84 14       	cp	r8, r4
    3ccc:	95 04       	cpc	r9, r5
    3cce:	a6 04       	cpc	r10, r6
    3cd0:	b7 04       	cpc	r11, r7
    3cd2:	cc f1       	brlt	.+114    	; 0x3d46 <_Z6cmdExev+0xdf0>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    3cd4:	c3 01       	movw	r24, r6
    3cd6:	b2 01       	movw	r22, r4
    3cd8:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3cdc:	69 83       	std	Y+1, r22	; 0x01
    3cde:	7a 83       	std	Y+2, r23	; 0x02
    3ce0:	8b 83       	std	Y+3, r24	; 0x03
    3ce2:	9c 83       	std	Y+4, r25	; 0x04
    3ce4:	c5 01       	movw	r24, r10
    3ce6:	b4 01       	movw	r22, r8
    3ce8:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3cec:	9b 01       	movw	r18, r22
    3cee:	ac 01       	movw	r20, r24
    3cf0:	69 81       	ldd	r22, Y+1	; 0x01
    3cf2:	7a 81       	ldd	r23, Y+2	; 0x02
    3cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf8:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    3cfc:	4b 01       	movw	r8, r22
    3cfe:	5c 01       	movw	r10, r24
    3d00:	c7 01       	movw	r24, r14
    3d02:	b6 01       	movw	r22, r12
    3d04:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3d08:	9b 01       	movw	r18, r22
    3d0a:	ac 01       	movw	r20, r24
    3d0c:	c5 01       	movw	r24, r10
    3d0e:	b4 01       	movw	r22, r8
    3d10:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    3d14:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    3d18:	60 93 80 27 	sts	0x2780, r22	; 0x802780 <DecDTG>
    3d1c:	70 93 81 27 	sts	0x2781, r23	; 0x802781 <DecDTG+0x1>
    3d20:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <DecDTG+0x2>
    3d24:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    3d28:	63 01       	movw	r12, r6
    3d2a:	52 01       	movw	r10, r4
    3d2c:	a6 1a       	sub	r10, r22
    3d2e:	b7 0a       	sbc	r11, r23
    3d30:	c8 0a       	sbc	r12, r24
    3d32:	d9 0a       	sbc	r13, r25
    3d34:	a0 92 84 27 	sts	0x2784, r10	; 0x802784 <AccDTG>
    3d38:	b0 92 85 27 	sts	0x2785, r11	; 0x802785 <AccDTG+0x1>
    3d3c:	c0 92 86 27 	sts	0x2786, r12	; 0x802786 <AccDTG+0x2>
    3d40:	d0 92 87 27 	sts	0x2787, r13	; 0x802787 <AccDTG+0x3>
    3d44:	0e c0       	rjmp	.+28     	; 0x3d62 <_Z6cmdExev+0xe0c>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    3d46:	d3 01       	movw	r26, r6
    3d48:	c2 01       	movw	r24, r4
    3d4a:	82 1b       	sub	r24, r18
    3d4c:	93 0b       	sbc	r25, r19
    3d4e:	a4 0b       	sbc	r26, r20
    3d50:	b5 0b       	sbc	r27, r21
    3d52:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <AccDTG>
    3d56:	90 93 85 27 	sts	0x2785, r25	; 0x802785 <AccDTG+0x1>
    3d5a:	a0 93 86 27 	sts	0x2786, r26	; 0x802786 <AccDTG+0x2>
    3d5e:	b0 93 87 27 	sts	0x2787, r27	; 0x802787 <AccDTG+0x3>
                    }
                            
                DistanceToGo1=labs(AxisPosition1-SetJog1);  
    3d62:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    3d66:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    3d6a:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    3d6e:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    3d72:	40 91 b8 27 	lds	r20, 0x27B8	; 0x8027b8 <SetJog1>
    3d76:	50 91 b9 27 	lds	r21, 0x27B9	; 0x8027b9 <SetJog1+0x1>
    3d7a:	60 91 ba 27 	lds	r22, 0x27BA	; 0x8027ba <SetJog1+0x2>
    3d7e:	70 91 bb 27 	lds	r23, 0x27BB	; 0x8027bb <SetJog1+0x3>
    3d82:	84 1b       	sub	r24, r20
    3d84:	95 0b       	sbc	r25, r21
    3d86:	a6 0b       	sbc	r26, r22
    3d88:	b7 0b       	sbc	r27, r23
    3d8a:	ac 01       	movw	r20, r24
    3d8c:	bd 01       	movw	r22, r26
    3d8e:	3a f4       	brpl	.+14     	; 0x3d9e <_Z6cmdExev+0xe48>
    3d90:	44 27       	eor	r20, r20
    3d92:	55 27       	eor	r21, r21
    3d94:	ba 01       	movw	r22, r20
    3d96:	48 1b       	sub	r20, r24
    3d98:	59 0b       	sbc	r21, r25
    3d9a:	6a 0b       	sbc	r22, r26
    3d9c:	7b 0b       	sbc	r23, r27
    3d9e:	40 93 90 27 	sts	0x2790, r20	; 0x802790 <DistanceToGo1>
    3da2:	50 93 91 27 	sts	0x2791, r21	; 0x802791 <DistanceToGo1+0x1>
    3da6:	60 93 92 27 	sts	0x2792, r22	; 0x802792 <DistanceToGo1+0x2>
    3daa:	70 93 93 27 	sts	0x2793, r23	; 0x802793 <DistanceToGo1+0x3>
                ACC=1;    
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
                sprintf(BufferSend,"!0601\r\n"); 
    3db4:	98 e0       	ldi	r25, 0x08	; 8
    3db6:	e6 e0       	ldi	r30, 0x06	; 6
    3db8:	f3 e2       	ldi	r31, 0x23	; 35
    3dba:	a7 e5       	ldi	r26, 0x57	; 87
    3dbc:	b9 e2       	ldi	r27, 0x29	; 41
    3dbe:	01 90       	ld	r0, Z+
    3dc0:	0d 92       	st	X+, r0
    3dc2:	9a 95       	dec	r25
    3dc4:	e1 f7       	brne	.-8      	; 0x3dbe <_Z6cmdExev+0xe68>
                Responsing=1; 
    3dc6:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady; 
    3dca:	e0 ea       	ldi	r30, 0xA0	; 160
    3dcc:	f6 e0       	ldi	r31, 0x06	; 6
    3dce:	84 81       	ldd	r24, Z+4	; 0x04
    3dd0:	81 60       	ori	r24, 0x01	; 1
    3dd2:	84 83       	std	Z+4, r24	; 0x04
                break;
    3dd4:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
             }
             case '2': //Axis 2
             {
                if(SetJog2<AxisPosition2) CLR_DIR2;
    3dd8:	40 91 b4 27 	lds	r20, 0x27B4	; 0x8027b4 <SetJog2>
    3ddc:	50 91 b5 27 	lds	r21, 0x27B5	; 0x8027b5 <SetJog2+0x1>
    3de0:	60 91 b6 27 	lds	r22, 0x27B6	; 0x8027b6 <SetJog2+0x2>
    3de4:	70 91 b7 27 	lds	r23, 0x27B7	; 0x8027b7 <SetJog2+0x3>
    3de8:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    3dec:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    3df0:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    3df4:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    3df8:	48 17       	cp	r20, r24
    3dfa:	59 07       	cpc	r21, r25
    3dfc:	6a 07       	cpc	r22, r26
    3dfe:	7b 07       	cpc	r23, r27
    3e00:	2c f4       	brge	.+10     	; 0x3e0c <_Z6cmdExev+0xeb6>
    3e02:	e0 e2       	ldi	r30, 0x20	; 32
    3e04:	f7 e0       	ldi	r31, 0x07	; 7
    3e06:	24 81       	ldd	r18, Z+4	; 0x04
    3e08:	2b 7f       	andi	r18, 0xFB	; 251
    3e0a:	24 83       	std	Z+4, r18	; 0x04
                if(SetJog2>AxisPosition2) SET_DIR2;
    3e0c:	84 17       	cp	r24, r20
    3e0e:	95 07       	cpc	r25, r21
    3e10:	a6 07       	cpc	r26, r22
    3e12:	b7 07       	cpc	r27, r23
    3e14:	2c f4       	brge	.+10     	; 0x3e20 <_Z6cmdExev+0xeca>
    3e16:	e0 e2       	ldi	r30, 0x20	; 32
    3e18:	f7 e0       	ldi	r31, 0x07	; 7
    3e1a:	24 81       	ldd	r18, Z+4	; 0x04
    3e1c:	24 60       	ori	r18, 0x04	; 4
    3e1e:	24 83       	std	Z+4, r18	; 0x04
                        
                MaxSpeed=SetSpeed2;
    3e20:	c0 90 75 27 	lds	r12, 0x2775	; 0x802775 <SetSpeed2>
    3e24:	d0 90 76 27 	lds	r13, 0x2776	; 0x802776 <SetSpeed2+0x1>
    3e28:	e0 90 77 27 	lds	r14, 0x2777	; 0x802777 <SetSpeed2+0x2>
    3e2c:	f0 90 78 27 	lds	r15, 0x2778	; 0x802778 <SetSpeed2+0x3>
    3e30:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    3e34:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    3e38:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    3e3c:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
                IACC=ACC2;
    3e40:	80 90 65 27 	lds	r8, 0x2765	; 0x802765 <ACC2>
    3e44:	90 90 66 27 	lds	r9, 0x2766	; 0x802766 <ACC2+0x1>
    3e48:	a0 90 67 27 	lds	r10, 0x2767	; 0x802767 <ACC2+0x2>
    3e4c:	b0 90 68 27 	lds	r11, 0x2768	; 0x802768 <ACC2+0x3>
    3e50:	89 82       	std	Y+1, r8	; 0x01
    3e52:	9a 82       	std	Y+2, r9	; 0x02
    3e54:	ab 82       	std	Y+3, r10	; 0x03
    3e56:	bc 82       	std	Y+4, r11	; 0x04
    3e58:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    3e5c:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    3e60:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    3e64:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
                IDEC=DEC2;
    3e68:	80 90 59 27 	lds	r8, 0x2759	; 0x802759 <DEC2>
    3e6c:	90 90 5a 27 	lds	r9, 0x275A	; 0x80275a <DEC2+0x1>
    3e70:	a0 90 5b 27 	lds	r10, 0x275B	; 0x80275b <DEC2+0x2>
    3e74:	b0 90 5c 27 	lds	r11, 0x275C	; 0x80275c <DEC2+0x3>
    3e78:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    3e7c:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    3e80:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    3e84:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
                MaxDistanceToGo=labs(AxisPosition2-SetJog2); 
    3e88:	84 1b       	sub	r24, r20
    3e8a:	95 0b       	sbc	r25, r21
    3e8c:	a6 0b       	sbc	r26, r22
    3e8e:	b7 0b       	sbc	r27, r23
    3e90:	2c 01       	movw	r4, r24
    3e92:	3d 01       	movw	r6, r26
    3e94:	3a f4       	brpl	.+14     	; 0x3ea4 <_Z6cmdExev+0xf4e>
    3e96:	44 24       	eor	r4, r4
    3e98:	55 24       	eor	r5, r5
    3e9a:	32 01       	movw	r6, r4
    3e9c:	48 1a       	sub	r4, r24
    3e9e:	59 0a       	sbc	r5, r25
    3ea0:	6a 0a       	sbc	r6, r26
    3ea2:	7b 0a       	sbc	r7, r27
    3ea4:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    3ea8:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    3eac:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    3eb0:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
                              
                Ma2=1000;           
    3eb4:	88 ee       	ldi	r24, 0xE8	; 232
    3eb6:	93 e0       	ldi	r25, 0x03	; 3
    3eb8:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    3ebc:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
                CurSpeedFrq=0;
    3ec0:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    3ec4:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    3ec8:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    3ecc:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
                TCC0.CCA=0xFFFF;                                                   
    3ed0:	8f ef       	ldi	r24, 0xFF	; 255
    3ed2:	9f ef       	ldi	r25, 0xFF	; 255
    3ed4:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3ed8:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
                ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    3edc:	c7 01       	movw	r24, r14
    3ede:	b6 01       	movw	r22, r12
    3ee0:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	48 ec       	ldi	r20, 0xC8	; 200
    3eea:	52 e4       	ldi	r21, 0x42	; 66
    3eec:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    3ef0:	6d 83       	std	Y+5, r22	; 0x05
    3ef2:	7e 83       	std	Y+6, r23	; 0x06
    3ef4:	8f 83       	std	Y+7, r24	; 0x07
    3ef6:	98 87       	std	Y+8, r25	; 0x08
                ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    3ef8:	69 81       	ldd	r22, Y+1	; 0x01
    3efa:	7a 81       	ldd	r23, Y+2	; 0x02
    3efc:	8b 81       	ldd	r24, Y+3	; 0x03
    3efe:	9c 81       	ldd	r25, Y+4	; 0x04
    3f00:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3f04:	9b 01       	movw	r18, r22
    3f06:	ac 01       	movw	r20, r24
    3f08:	6d 81       	ldd	r22, Y+5	; 0x05
    3f0a:	7e 81       	ldd	r23, Y+6	; 0x06
    3f0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f0e:	98 85       	ldd	r25, Y+8	; 0x08
    3f10:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    3f14:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    3f18:	9b 01       	movw	r18, r22
    3f1a:	ac 01       	movw	r20, r24
    3f1c:	c7 01       	movw	r24, r14
    3f1e:	b6 01       	movw	r22, r12
    3f20:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    3f24:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    3f28:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    3f2c:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    3f30:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
                DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
                DECSpeedINT= MaxSpeed / DECSpeedINT;                                                       
    3f34:	c5 01       	movw	r24, r10
    3f36:	b4 01       	movw	r22, r8
    3f38:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3f3c:	9b 01       	movw	r18, r22
    3f3e:	ac 01       	movw	r20, r24
    3f40:	6d 81       	ldd	r22, Y+5	; 0x05
    3f42:	7e 81       	ldd	r23, Y+6	; 0x06
    3f44:	8f 81       	ldd	r24, Y+7	; 0x07
    3f46:	98 85       	ldd	r25, Y+8	; 0x08
    3f48:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    3f4c:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    3f50:	9b 01       	movw	r18, r22
    3f52:	ac 01       	movw	r20, r24
    3f54:	c7 01       	movw	r24, r14
    3f56:	b6 01       	movw	r22, r12
    3f58:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    3f5c:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    3f60:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    3f64:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    3f68:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    3f6c:	a7 01       	movw	r20, r14
    3f6e:	96 01       	movw	r18, r12
    3f70:	c7 01       	movw	r24, r14
    3f72:	b6 01       	movw	r22, r12
    3f74:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <__mulsi3>
    3f78:	6d 83       	std	Y+5, r22	; 0x05
    3f7a:	7e 83       	std	Y+6, r23	; 0x06
    3f7c:	8f 83       	std	Y+7, r24	; 0x07
    3f7e:	98 87       	std	Y+8, r25	; 0x08
    3f80:	a5 01       	movw	r20, r10
    3f82:	94 01       	movw	r18, r8
    3f84:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    3f88:	69 01       	movw	r12, r18
    3f8a:	7a 01       	movw	r14, r20
    3f8c:	20 93 80 27 	sts	0x2780, r18	; 0x802780 <DecDTG>
    3f90:	30 93 81 27 	sts	0x2781, r19	; 0x802781 <DecDTG+0x1>
    3f94:	40 93 82 27 	sts	0x2782, r20	; 0x802782 <DecDTG+0x2>
    3f98:	50 93 83 27 	sts	0x2783, r21	; 0x802783 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    3f9c:	6d 81       	ldd	r22, Y+5	; 0x05
    3f9e:	7e 81       	ldd	r23, Y+6	; 0x06
    3fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    3fa2:	98 85       	ldd	r25, Y+8	; 0x08
    3fa4:	29 81       	ldd	r18, Y+1	; 0x01
    3fa6:	3a 81       	ldd	r19, Y+2	; 0x02
    3fa8:	4b 81       	ldd	r20, Y+3	; 0x03
    3faa:	5c 81       	ldd	r21, Y+4	; 0x04
    3fac:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    3fb0:	46 01       	movw	r8, r12
    3fb2:	57 01       	movw	r10, r14
    3fb4:	82 0e       	add	r8, r18
    3fb6:	93 1e       	adc	r9, r19
    3fb8:	a4 1e       	adc	r10, r20
    3fba:	b5 1e       	adc	r11, r21
    3fbc:	80 92 49 27 	sts	0x2749, r8	; 0x802749 <SumAccDecDTG>
    3fc0:	90 92 4a 27 	sts	0x274A, r9	; 0x80274a <SumAccDecDTG+0x1>
    3fc4:	a0 92 4b 27 	sts	0x274B, r10	; 0x80274b <SumAccDecDTG+0x2>
    3fc8:	b0 92 4c 27 	sts	0x274C, r11	; 0x80274c <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    3fcc:	84 14       	cp	r8, r4
    3fce:	95 04       	cpc	r9, r5
    3fd0:	a6 04       	cpc	r10, r6
    3fd2:	b7 04       	cpc	r11, r7
    3fd4:	cc f1       	brlt	.+114    	; 0x4048 <__stack+0x49>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    3fd6:	c3 01       	movw	r24, r6
    3fd8:	b2 01       	movw	r22, r4
    3fda:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3fde:	69 83       	std	Y+1, r22	; 0x01
    3fe0:	7a 83       	std	Y+2, r23	; 0x02
    3fe2:	8b 83       	std	Y+3, r24	; 0x03
    3fe4:	9c 83       	std	Y+4, r25	; 0x04
    3fe6:	c5 01       	movw	r24, r10
    3fe8:	b4 01       	movw	r22, r8
    3fea:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    3fee:	9b 01       	movw	r18, r22
    3ff0:	ac 01       	movw	r20, r24
    3ff2:	69 81       	ldd	r22, Y+1	; 0x01
    3ff4:	7a 81       	ldd	r23, Y+2	; 0x02
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffa:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    3ffe:	4b 01       	movw	r8, r22
    4000:	5c 01       	movw	r10, r24
    4002:	c7 01       	movw	r24, r14
    4004:	b6 01       	movw	r22, r12
    4006:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    400a:	9b 01       	movw	r18, r22
    400c:	ac 01       	movw	r20, r24
    400e:	c5 01       	movw	r24, r10
    4010:	b4 01       	movw	r22, r8
    4012:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    4016:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    401a:	60 93 80 27 	sts	0x2780, r22	; 0x802780 <DecDTG>
    401e:	70 93 81 27 	sts	0x2781, r23	; 0x802781 <DecDTG+0x1>
    4022:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <DecDTG+0x2>
    4026:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    402a:	63 01       	movw	r12, r6
    402c:	52 01       	movw	r10, r4
    402e:	a6 1a       	sub	r10, r22
    4030:	b7 0a       	sbc	r11, r23
    4032:	c8 0a       	sbc	r12, r24
    4034:	d9 0a       	sbc	r13, r25
    4036:	a0 92 84 27 	sts	0x2784, r10	; 0x802784 <AccDTG>
    403a:	b0 92 85 27 	sts	0x2785, r11	; 0x802785 <AccDTG+0x1>
    403e:	c0 92 86 27 	sts	0x2786, r12	; 0x802786 <AccDTG+0x2>
    4042:	d0 92 87 27 	sts	0x2787, r13	; 0x802787 <AccDTG+0x3>
    4046:	0e c0       	rjmp	.+28     	; 0x4064 <__stack+0x65>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    4048:	d3 01       	movw	r26, r6
    404a:	c2 01       	movw	r24, r4
    404c:	82 1b       	sub	r24, r18
    404e:	93 0b       	sbc	r25, r19
    4050:	a4 0b       	sbc	r26, r20
    4052:	b5 0b       	sbc	r27, r21
    4054:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <AccDTG>
    4058:	90 93 85 27 	sts	0x2785, r25	; 0x802785 <AccDTG+0x1>
    405c:	a0 93 86 27 	sts	0x2786, r26	; 0x802786 <AccDTG+0x2>
    4060:	b0 93 87 27 	sts	0x2787, r27	; 0x802787 <AccDTG+0x3>
                    }
                            
                DistanceToGo2=labs(AxisPosition2-SetJog2);  
    4064:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    4068:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    406c:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    4070:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    4074:	40 91 b4 27 	lds	r20, 0x27B4	; 0x8027b4 <SetJog2>
    4078:	50 91 b5 27 	lds	r21, 0x27B5	; 0x8027b5 <SetJog2+0x1>
    407c:	60 91 b6 27 	lds	r22, 0x27B6	; 0x8027b6 <SetJog2+0x2>
    4080:	70 91 b7 27 	lds	r23, 0x27B7	; 0x8027b7 <SetJog2+0x3>
    4084:	84 1b       	sub	r24, r20
    4086:	95 0b       	sbc	r25, r21
    4088:	a6 0b       	sbc	r26, r22
    408a:	b7 0b       	sbc	r27, r23
    408c:	ac 01       	movw	r20, r24
    408e:	bd 01       	movw	r22, r26
    4090:	3a f4       	brpl	.+14     	; 0x40a0 <__stack+0xa1>
    4092:	44 27       	eor	r20, r20
    4094:	55 27       	eor	r21, r21
    4096:	ba 01       	movw	r22, r20
    4098:	48 1b       	sub	r20, r24
    409a:	59 0b       	sbc	r21, r25
    409c:	6a 0b       	sbc	r22, r26
    409e:	7b 0b       	sbc	r23, r27
    40a0:	40 93 8c 27 	sts	0x278C, r20	; 0x80278c <DistanceToGo2>
    40a4:	50 93 8d 27 	sts	0x278D, r21	; 0x80278d <DistanceToGo2+0x1>
    40a8:	60 93 8e 27 	sts	0x278E, r22	; 0x80278e <DistanceToGo2+0x2>
    40ac:	70 93 8f 27 	sts	0x278F, r23	; 0x80278f <DistanceToGo2+0x3>
                ACC=1;    
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
                sprintf(BufferSend,"!0602\r\n");
    40b6:	98 e0       	ldi	r25, 0x08	; 8
    40b8:	ee e0       	ldi	r30, 0x0E	; 14
    40ba:	f3 e2       	ldi	r31, 0x23	; 35
    40bc:	a7 e5       	ldi	r26, 0x57	; 87
    40be:	b9 e2       	ldi	r27, 0x29	; 41
    40c0:	01 90       	ld	r0, Z+
    40c2:	0d 92       	st	X+, r0
    40c4:	9a 95       	dec	r25
    40c6:	e1 f7       	brne	.-8      	; 0x40c0 <__stack+0xc1>
                Responsing=1;  
    40c8:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady;
    40cc:	e0 ea       	ldi	r30, 0xA0	; 160
    40ce:	f6 e0       	ldi	r31, 0x06	; 6
    40d0:	84 81       	ldd	r24, Z+4	; 0x04
    40d2:	81 60       	ori	r24, 0x01	; 1
    40d4:	84 83       	std	Z+4, r24	; 0x04
                break;
    40d6:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
             } 
            case '3': //Axis 3
            {
            if(SetJog3<AxisPosition3) CLR_DIR3;
    40da:	40 91 b0 27 	lds	r20, 0x27B0	; 0x8027b0 <SetJog3>
    40de:	50 91 b1 27 	lds	r21, 0x27B1	; 0x8027b1 <SetJog3+0x1>
    40e2:	60 91 b2 27 	lds	r22, 0x27B2	; 0x8027b2 <SetJog3+0x2>
    40e6:	70 91 b3 27 	lds	r23, 0x27B3	; 0x8027b3 <SetJog3+0x3>
    40ea:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    40ee:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    40f2:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    40f6:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    40fa:	48 17       	cp	r20, r24
    40fc:	59 07       	cpc	r21, r25
    40fe:	6a 07       	cpc	r22, r26
    4100:	7b 07       	cpc	r23, r27
    4102:	2c f4       	brge	.+10     	; 0x410e <__stack+0x10f>
    4104:	e0 e2       	ldi	r30, 0x20	; 32
    4106:	f7 e0       	ldi	r31, 0x07	; 7
    4108:	24 81       	ldd	r18, Z+4	; 0x04
    410a:	2e 7f       	andi	r18, 0xFE	; 254
    410c:	24 83       	std	Z+4, r18	; 0x04
            if(SetJog3>AxisPosition3) SET_DIR3;
    410e:	84 17       	cp	r24, r20
    4110:	95 07       	cpc	r25, r21
    4112:	a6 07       	cpc	r26, r22
    4114:	b7 07       	cpc	r27, r23
    4116:	2c f4       	brge	.+10     	; 0x4122 <__stack+0x123>
    4118:	e0 e2       	ldi	r30, 0x20	; 32
    411a:	f7 e0       	ldi	r31, 0x07	; 7
    411c:	24 81       	ldd	r18, Z+4	; 0x04
    411e:	21 60       	ori	r18, 0x01	; 1
    4120:	24 83       	std	Z+4, r18	; 0x04
                        
            MaxSpeed=SetSpeed3;
    4122:	c0 90 71 27 	lds	r12, 0x2771	; 0x802771 <SetSpeed3>
    4126:	d0 90 72 27 	lds	r13, 0x2772	; 0x802772 <SetSpeed3+0x1>
    412a:	e0 90 73 27 	lds	r14, 0x2773	; 0x802773 <SetSpeed3+0x2>
    412e:	f0 90 74 27 	lds	r15, 0x2774	; 0x802774 <SetSpeed3+0x3>
    4132:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    4136:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    413a:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    413e:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC3;
    4142:	80 90 61 27 	lds	r8, 0x2761	; 0x802761 <ACC3>
    4146:	90 90 62 27 	lds	r9, 0x2762	; 0x802762 <ACC3+0x1>
    414a:	a0 90 63 27 	lds	r10, 0x2763	; 0x802763 <ACC3+0x2>
    414e:	b0 90 64 27 	lds	r11, 0x2764	; 0x802764 <ACC3+0x3>
    4152:	89 82       	std	Y+1, r8	; 0x01
    4154:	9a 82       	std	Y+2, r9	; 0x02
    4156:	ab 82       	std	Y+3, r10	; 0x03
    4158:	bc 82       	std	Y+4, r11	; 0x04
    415a:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    415e:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    4162:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    4166:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
            IDEC=DEC3;
    416a:	80 90 55 27 	lds	r8, 0x2755	; 0x802755 <DEC3>
    416e:	90 90 56 27 	lds	r9, 0x2756	; 0x802756 <DEC3+0x1>
    4172:	a0 90 57 27 	lds	r10, 0x2757	; 0x802757 <DEC3+0x2>
    4176:	b0 90 58 27 	lds	r11, 0x2758	; 0x802758 <DEC3+0x3>
    417a:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    417e:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    4182:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    4186:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
            MaxDistanceToGo = labs(AxisPosition3-SetJog3);  
    418a:	84 1b       	sub	r24, r20
    418c:	95 0b       	sbc	r25, r21
    418e:	a6 0b       	sbc	r26, r22
    4190:	b7 0b       	sbc	r27, r23
    4192:	2c 01       	movw	r4, r24
    4194:	3d 01       	movw	r6, r26
    4196:	3a f4       	brpl	.+14     	; 0x41a6 <__stack+0x1a7>
    4198:	44 24       	eor	r4, r4
    419a:	55 24       	eor	r5, r5
    419c:	32 01       	movw	r6, r4
    419e:	48 1a       	sub	r4, r24
    41a0:	59 0a       	sbc	r5, r25
    41a2:	6a 0a       	sbc	r6, r26
    41a4:	7b 0a       	sbc	r7, r27
    41a6:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    41aa:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    41ae:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    41b2:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
                         
            Ma3=1000;           
    41b6:	88 ee       	ldi	r24, 0xE8	; 232
    41b8:	93 e0       	ldi	r25, 0x03	; 3
    41ba:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    41be:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
            CurSpeedFrq=0;
    41c2:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    41c6:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    41ca:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    41ce:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;                                                   
    41d2:	8f ef       	ldi	r24, 0xFF	; 255
    41d4:	9f ef       	ldi	r25, 0xFF	; 255
    41d6:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    41da:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    41de:	c7 01       	movw	r24, r14
    41e0:	b6 01       	movw	r22, r12
    41e2:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	48 ec       	ldi	r20, 0xC8	; 200
    41ec:	52 e4       	ldi	r21, 0x42	; 66
    41ee:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    41f2:	6d 83       	std	Y+5, r22	; 0x05
    41f4:	7e 83       	std	Y+6, r23	; 0x06
    41f6:	8f 83       	std	Y+7, r24	; 0x07
    41f8:	98 87       	std	Y+8, r25	; 0x08
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    41fa:	69 81       	ldd	r22, Y+1	; 0x01
    41fc:	7a 81       	ldd	r23, Y+2	; 0x02
    41fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4200:	9c 81       	ldd	r25, Y+4	; 0x04
    4202:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    4206:	9b 01       	movw	r18, r22
    4208:	ac 01       	movw	r20, r24
    420a:	6d 81       	ldd	r22, Y+5	; 0x05
    420c:	7e 81       	ldd	r23, Y+6	; 0x06
    420e:	8f 81       	ldd	r24, Y+7	; 0x07
    4210:	98 85       	ldd	r25, Y+8	; 0x08
    4212:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    4216:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    421a:	9b 01       	movw	r18, r22
    421c:	ac 01       	movw	r20, r24
    421e:	c7 01       	movw	r24, r14
    4220:	b6 01       	movw	r22, r12
    4222:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    4226:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    422a:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    422e:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    4232:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                                                       
    4236:	c5 01       	movw	r24, r10
    4238:	b4 01       	movw	r22, r8
    423a:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    423e:	9b 01       	movw	r18, r22
    4240:	ac 01       	movw	r20, r24
    4242:	6d 81       	ldd	r22, Y+5	; 0x05
    4244:	7e 81       	ldd	r23, Y+6	; 0x06
    4246:	8f 81       	ldd	r24, Y+7	; 0x07
    4248:	98 85       	ldd	r25, Y+8	; 0x08
    424a:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    424e:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    4252:	9b 01       	movw	r18, r22
    4254:	ac 01       	movw	r20, r24
    4256:	c7 01       	movw	r24, r14
    4258:	b6 01       	movw	r22, r12
    425a:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    425e:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    4262:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    4266:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    426a:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
                         
                DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);  
    426e:	a7 01       	movw	r20, r14
    4270:	96 01       	movw	r18, r12
    4272:	c7 01       	movw	r24, r14
    4274:	b6 01       	movw	r22, r12
    4276:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <__mulsi3>
    427a:	6d 83       	std	Y+5, r22	; 0x05
    427c:	7e 83       	std	Y+6, r23	; 0x06
    427e:	8f 83       	std	Y+7, r24	; 0x07
    4280:	98 87       	std	Y+8, r25	; 0x08
    4282:	a5 01       	movw	r20, r10
    4284:	94 01       	movw	r18, r8
    4286:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    428a:	69 01       	movw	r12, r18
    428c:	7a 01       	movw	r14, r20
    428e:	20 93 80 27 	sts	0x2780, r18	; 0x802780 <DecDTG>
    4292:	30 93 81 27 	sts	0x2781, r19	; 0x802781 <DecDTG+0x1>
    4296:	40 93 82 27 	sts	0x2782, r20	; 0x802782 <DecDTG+0x2>
    429a:	50 93 83 27 	sts	0x2783, r21	; 0x802783 <DecDTG+0x3>
                AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);  
    429e:	6d 81       	ldd	r22, Y+5	; 0x05
    42a0:	7e 81       	ldd	r23, Y+6	; 0x06
    42a2:	8f 81       	ldd	r24, Y+7	; 0x07
    42a4:	98 85       	ldd	r25, Y+8	; 0x08
    42a6:	29 81       	ldd	r18, Y+1	; 0x01
    42a8:	3a 81       	ldd	r19, Y+2	; 0x02
    42aa:	4b 81       	ldd	r20, Y+3	; 0x03
    42ac:	5c 81       	ldd	r21, Y+4	; 0x04
    42ae:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
                SumAccDecDTG = DecDTG + AccDTG;
    42b2:	46 01       	movw	r8, r12
    42b4:	57 01       	movw	r10, r14
    42b6:	82 0e       	add	r8, r18
    42b8:	93 1e       	adc	r9, r19
    42ba:	a4 1e       	adc	r10, r20
    42bc:	b5 1e       	adc	r11, r21
    42be:	80 92 49 27 	sts	0x2749, r8	; 0x802749 <SumAccDecDTG>
    42c2:	90 92 4a 27 	sts	0x274A, r9	; 0x80274a <SumAccDecDTG+0x1>
    42c6:	a0 92 4b 27 	sts	0x274B, r10	; 0x80274b <SumAccDecDTG+0x2>
    42ca:	b0 92 4c 27 	sts	0x274C, r11	; 0x80274c <SumAccDecDTG+0x3>
                if (MaxDistanceToGo <= SumAccDecDTG)   
    42ce:	84 14       	cp	r8, r4
    42d0:	95 04       	cpc	r9, r5
    42d2:	a6 04       	cpc	r10, r6
    42d4:	b7 04       	cpc	r11, r7
    42d6:	cc f1       	brlt	.+114    	; 0x434a <__stack+0x34b>
                    {        
                        DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    42d8:	c3 01       	movw	r24, r6
    42da:	b2 01       	movw	r22, r4
    42dc:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    42e0:	69 83       	std	Y+1, r22	; 0x01
    42e2:	7a 83       	std	Y+2, r23	; 0x02
    42e4:	8b 83       	std	Y+3, r24	; 0x03
    42e6:	9c 83       	std	Y+4, r25	; 0x04
    42e8:	c5 01       	movw	r24, r10
    42ea:	b4 01       	movw	r22, r8
    42ec:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    42f0:	9b 01       	movw	r18, r22
    42f2:	ac 01       	movw	r20, r24
    42f4:	69 81       	ldd	r22, Y+1	; 0x01
    42f6:	7a 81       	ldd	r23, Y+2	; 0x02
    42f8:	8b 81       	ldd	r24, Y+3	; 0x03
    42fa:	9c 81       	ldd	r25, Y+4	; 0x04
    42fc:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    4300:	4b 01       	movw	r8, r22
    4302:	5c 01       	movw	r10, r24
    4304:	c7 01       	movw	r24, r14
    4306:	b6 01       	movw	r22, r12
    4308:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    430c:	9b 01       	movw	r18, r22
    430e:	ac 01       	movw	r20, r24
    4310:	c5 01       	movw	r24, r10
    4312:	b4 01       	movw	r22, r8
    4314:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    4318:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    431c:	60 93 80 27 	sts	0x2780, r22	; 0x802780 <DecDTG>
    4320:	70 93 81 27 	sts	0x2781, r23	; 0x802781 <DecDTG+0x1>
    4324:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <DecDTG+0x2>
    4328:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <DecDTG+0x3>
                        AccDTG = MaxDistanceToGo - DecDTG;
    432c:	63 01       	movw	r12, r6
    432e:	52 01       	movw	r10, r4
    4330:	a6 1a       	sub	r10, r22
    4332:	b7 0a       	sbc	r11, r23
    4334:	c8 0a       	sbc	r12, r24
    4336:	d9 0a       	sbc	r13, r25
    4338:	a0 92 84 27 	sts	0x2784, r10	; 0x802784 <AccDTG>
    433c:	b0 92 85 27 	sts	0x2785, r11	; 0x802785 <AccDTG+0x1>
    4340:	c0 92 86 27 	sts	0x2786, r12	; 0x802786 <AccDTG+0x2>
    4344:	d0 92 87 27 	sts	0x2787, r13	; 0x802787 <AccDTG+0x3>
    4348:	0e c0       	rjmp	.+28     	; 0x4366 <__stack+0x367>
                    }
                else
                    {
                      AccDTG = MaxDistanceToGo - AccDTG;
    434a:	d3 01       	movw	r26, r6
    434c:	c2 01       	movw	r24, r4
    434e:	82 1b       	sub	r24, r18
    4350:	93 0b       	sbc	r25, r19
    4352:	a4 0b       	sbc	r26, r20
    4354:	b5 0b       	sbc	r27, r21
    4356:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <AccDTG>
    435a:	90 93 85 27 	sts	0x2785, r25	; 0x802785 <AccDTG+0x1>
    435e:	a0 93 86 27 	sts	0x2786, r26	; 0x802786 <AccDTG+0x2>
    4362:	b0 93 87 27 	sts	0x2787, r27	; 0x802787 <AccDTG+0x3>
                    }
                            
                DistanceToGo3=labs(AxisPosition3-SetJog3);  
    4366:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    436a:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    436e:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    4372:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    4376:	40 91 b0 27 	lds	r20, 0x27B0	; 0x8027b0 <SetJog3>
    437a:	50 91 b1 27 	lds	r21, 0x27B1	; 0x8027b1 <SetJog3+0x1>
    437e:	60 91 b2 27 	lds	r22, 0x27B2	; 0x8027b2 <SetJog3+0x2>
    4382:	70 91 b3 27 	lds	r23, 0x27B3	; 0x8027b3 <SetJog3+0x3>
    4386:	84 1b       	sub	r24, r20
    4388:	95 0b       	sbc	r25, r21
    438a:	a6 0b       	sbc	r26, r22
    438c:	b7 0b       	sbc	r27, r23
    438e:	ac 01       	movw	r20, r24
    4390:	bd 01       	movw	r22, r26
    4392:	3a f4       	brpl	.+14     	; 0x43a2 <__stack+0x3a3>
    4394:	44 27       	eor	r20, r20
    4396:	55 27       	eor	r21, r21
    4398:	ba 01       	movw	r22, r20
    439a:	48 1b       	sub	r20, r24
    439c:	59 0b       	sbc	r21, r25
    439e:	6a 0b       	sbc	r22, r26
    43a0:	7b 0b       	sbc	r23, r27
    43a2:	40 93 88 27 	sts	0x2788, r20	; 0x802788 <DistanceToGo3>
    43a6:	50 93 89 27 	sts	0x2789, r21	; 0x802789 <DistanceToGo3+0x1>
    43aa:	60 93 8a 27 	sts	0x278A, r22	; 0x80278a <DistanceToGo3+0x2>
    43ae:	70 93 8b 27 	sts	0x278B, r23	; 0x80278b <DistanceToGo3+0x3>
                ACC=1;    
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
                sprintf(BufferSend,"!0603\r\n");
    43b8:	98 e0       	ldi	r25, 0x08	; 8
    43ba:	e6 e1       	ldi	r30, 0x16	; 22
    43bc:	f3 e2       	ldi	r31, 0x23	; 35
    43be:	a7 e5       	ldi	r26, 0x57	; 87
    43c0:	b9 e2       	ldi	r27, 0x29	; 41
    43c2:	01 90       	ld	r0, Z+
    43c4:	0d 92       	st	X+, r0
    43c6:	9a 95       	dec	r25
    43c8:	e1 f7       	brne	.-8      	; 0x43c2 <__stack+0x3c3>
            Responsing=1;  
    43ca:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    43ce:	e0 ea       	ldi	r30, 0xA0	; 160
    43d0:	f6 e0       	ldi	r31, 0x06	; 6
    43d2:	84 81       	ldd	r24, Z+4	; 0x04
    43d4:	81 60       	ori	r24, 0x01	; 1
    43d6:	84 83       	std	Z+4, r24	; 0x04
            break;
    43d8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }                
           }
      }
      else if(cmdTemp[3]=='1')//Axis Selected
    43dc:	81 33       	cpi	r24, 0x31	; 49
    43de:	09 f0       	breq	.+2      	; 0x43e2 <__stack+0x3e3>
    43e0:	4b c0       	rjmp	.+150    	; 0x4478 <__stack+0x479>
      {
       switch(cmdTemp[4])
    43e2:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    43e6:	82 33       	cpi	r24, 0x32	; 50
    43e8:	d9 f0       	breq	.+54     	; 0x4420 <__stack+0x421>
    43ea:	83 33       	cpi	r24, 0x33	; 51
    43ec:	79 f1       	breq	.+94     	; 0x444c <__stack+0x44d>
    43ee:	81 33       	cpi	r24, 0x31	; 49
    43f0:	11 f0       	breq	.+4      	; 0x43f6 <__stack+0x3f7>
    43f2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         case '1': //Axis 1
         {
            SelectedAxis=1;
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0611\r\n"); 
    43fc:	98 e0       	ldi	r25, 0x08	; 8
    43fe:	ee e1       	ldi	r30, 0x1E	; 30
    4400:	f3 e2       	ldi	r31, 0x23	; 35
    4402:	a7 e5       	ldi	r26, 0x57	; 87
    4404:	b9 e2       	ldi	r27, 0x29	; 41
    4406:	01 90       	ld	r0, Z+
    4408:	0d 92       	st	X+, r0
    440a:	9a 95       	dec	r25
    440c:	e1 f7       	brne	.-8      	; 0x4406 <__stack+0x407>
            Responsing=1; 
    440e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    4412:	e0 ea       	ldi	r30, 0xA0	; 160
    4414:	f6 e0       	ldi	r31, 0x06	; 6
    4416:	84 81       	ldd	r24, Z+4	; 0x04
    4418:	81 60       	ori	r24, 0x01	; 1
    441a:	84 83       	std	Z+4, r24	; 0x04
            break;
    441c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         }
         case '2': //Axis 2
         {
            SelectedAxis=2;
    4420:	82 e0       	ldi	r24, 0x02	; 2
    4422:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0612\r\n"); 
    4426:	88 e0       	ldi	r24, 0x08	; 8
    4428:	e6 e2       	ldi	r30, 0x26	; 38
    442a:	f3 e2       	ldi	r31, 0x23	; 35
    442c:	a7 e5       	ldi	r26, 0x57	; 87
    442e:	b9 e2       	ldi	r27, 0x29	; 41
    4430:	01 90       	ld	r0, Z+
    4432:	0d 92       	st	X+, r0
    4434:	8a 95       	dec	r24
    4436:	e1 f7       	brne	.-8      	; 0x4430 <__stack+0x431>
            Responsing=1; 
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    443e:	e0 ea       	ldi	r30, 0xA0	; 160
    4440:	f6 e0       	ldi	r31, 0x06	; 6
    4442:	84 81       	ldd	r24, Z+4	; 0x04
    4444:	81 60       	ori	r24, 0x01	; 1
    4446:	84 83       	std	Z+4, r24	; 0x04
            break;
    4448:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         } 
        case '3': //Axis 3
        {        
            SelectedAxis=3;
    444c:	83 e0       	ldi	r24, 0x03	; 3
    444e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <SelectedAxis>
            sprintf(BufferSend,"!0613\r\n"); 
    4452:	88 e0       	ldi	r24, 0x08	; 8
    4454:	ee e2       	ldi	r30, 0x2E	; 46
    4456:	f3 e2       	ldi	r31, 0x23	; 35
    4458:	a7 e5       	ldi	r26, 0x57	; 87
    445a:	b9 e2       	ldi	r27, 0x29	; 41
    445c:	01 90       	ld	r0, Z+
    445e:	0d 92       	st	X+, r0
    4460:	8a 95       	dec	r24
    4462:	e1 f7       	brne	.-8      	; 0x445c <__stack+0x45d>
            Responsing=1; 
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    446a:	e0 ea       	ldi	r30, 0xA0	; 160
    446c:	f6 e0       	ldi	r31, 0x06	; 6
    446e:	84 81       	ldd	r24, Z+4	; 0x04
    4470:	81 60       	ori	r24, 0x01	; 1
    4472:	84 83       	std	Z+4, r24	; 0x04
            break;
    4474:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
        }     
      }
     }
      else if(cmdTemp[3]=='2')//Free Jog   to Positive
    4478:	82 33       	cpi	r24, 0x32	; 50
    447a:	09 f0       	breq	.+2      	; 0x447e <__stack+0x47f>
    447c:	ee c1       	rjmp	.+988    	; 0x485a <__stack+0x85b>
      {
       switch(cmdTemp[4])
    447e:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4482:	82 33       	cpi	r24, 0x32	; 50
    4484:	09 f4       	brne	.+2      	; 0x4488 <__stack+0x489>
    4486:	a7 c0       	rjmp	.+334    	; 0x45d6 <__stack+0x5d7>
    4488:	83 33       	cpi	r24, 0x33	; 51
    448a:	09 f4       	brne	.+2      	; 0x448e <__stack+0x48f>
    448c:	45 c1       	rjmp	.+650    	; 0x4718 <__stack+0x719>
    448e:	81 33       	cpi	r24, 0x31	; 49
    4490:	11 f0       	breq	.+4      	; 0x4496 <__stack+0x497>
    4492:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         case '1': //Axis 1
         {
            SET_DIR1;                        
    4496:	e0 e2       	ldi	r30, 0x20	; 32
    4498:	f7 e0       	ldi	r31, 0x07	; 7
    449a:	84 81       	ldd	r24, Z+4	; 0x04
    449c:	80 61       	ori	r24, 0x10	; 16
    449e:	84 83       	std	Z+4, r24	; 0x04
            MaxSpeed=SetSpeed1; 
    44a0:	c0 90 79 27 	lds	r12, 0x2779	; 0x802779 <SetSpeed1>
    44a4:	d0 90 7a 27 	lds	r13, 0x277A	; 0x80277a <SetSpeed1+0x1>
    44a8:	e0 90 7b 27 	lds	r14, 0x277B	; 0x80277b <SetSpeed1+0x2>
    44ac:	f0 90 7c 27 	lds	r15, 0x277C	; 0x80277c <SetSpeed1+0x3>
    44b0:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    44b4:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    44b8:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    44bc:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC1; 
    44c0:	80 90 69 27 	lds	r8, 0x2769	; 0x802769 <ACC1>
    44c4:	90 90 6a 27 	lds	r9, 0x276A	; 0x80276a <ACC1+0x1>
    44c8:	a0 90 6b 27 	lds	r10, 0x276B	; 0x80276b <ACC1+0x2>
    44cc:	b0 90 6c 27 	lds	r11, 0x276C	; 0x80276c <ACC1+0x3>
    44d0:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    44d4:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    44d8:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    44dc:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
            IDEC=DEC1;         
    44e0:	40 90 5d 27 	lds	r4, 0x275D	; 0x80275d <DEC1>
    44e4:	50 90 5e 27 	lds	r5, 0x275E	; 0x80275e <DEC1+0x1>
    44e8:	60 90 5f 27 	lds	r6, 0x275F	; 0x80275f <DEC1+0x2>
    44ec:	70 90 60 27 	lds	r7, 0x2760	; 0x802760 <DEC1+0x3>
    44f0:	40 92 4d 27 	sts	0x274D, r4	; 0x80274d <IDEC>
    44f4:	50 92 4e 27 	sts	0x274E, r5	; 0x80274e <IDEC+0x1>
    44f8:	60 92 4f 27 	sts	0x274F, r6	; 0x80274f <IDEC+0x2>
    44fc:	70 92 50 27 	sts	0x2750, r7	; 0x802750 <IDEC+0x3>
            CurSpeedFrq=0;
    4500:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    4504:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    4508:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    450c:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;                                                   
    4510:	8f ef       	ldi	r24, 0xFF	; 255
    4512:	9f ef       	ldi	r25, 0xFF	; 255
    4514:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4518:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    451c:	c7 01       	movw	r24, r14
    451e:	b6 01       	movw	r22, r12
    4520:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	48 ec       	ldi	r20, 0xC8	; 200
    452a:	52 e4       	ldi	r21, 0x42	; 66
    452c:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    4530:	69 83       	std	Y+1, r22	; 0x01
    4532:	7a 83       	std	Y+2, r23	; 0x02
    4534:	8b 83       	std	Y+3, r24	; 0x03
    4536:	9c 83       	std	Y+4, r25	; 0x04
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    4538:	c5 01       	movw	r24, r10
    453a:	b4 01       	movw	r22, r8
    453c:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    4540:	9b 01       	movw	r18, r22
    4542:	ac 01       	movw	r20, r24
    4544:	69 81       	ldd	r22, Y+1	; 0x01
    4546:	7a 81       	ldd	r23, Y+2	; 0x02
    4548:	8b 81       	ldd	r24, Y+3	; 0x03
    454a:	9c 81       	ldd	r25, Y+4	; 0x04
    454c:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    4550:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    4554:	9b 01       	movw	r18, r22
    4556:	ac 01       	movw	r20, r24
    4558:	c7 01       	movw	r24, r14
    455a:	b6 01       	movw	r22, r12
    455c:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    4560:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    4564:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    4568:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    456c:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                  
    4570:	c3 01       	movw	r24, r6
    4572:	b2 01       	movw	r22, r4
    4574:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    4578:	9b 01       	movw	r18, r22
    457a:	ac 01       	movw	r20, r24
    457c:	69 81       	ldd	r22, Y+1	; 0x01
    457e:	7a 81       	ldd	r23, Y+2	; 0x02
    4580:	8b 81       	ldd	r24, Y+3	; 0x03
    4582:	9c 81       	ldd	r25, Y+4	; 0x04
    4584:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    4588:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    458c:	9b 01       	movw	r18, r22
    458e:	ac 01       	movw	r20, r24
    4590:	c7 01       	movw	r24, r14
    4592:	b6 01       	movw	r22, r12
    4594:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    4598:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    459c:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    45a0:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    45a4:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
            FreeJog=1; 
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
            ACC=1;    
    45ae:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
            sprintf(BufferSend,"!0601\r\n"); 
    45b2:	98 e0       	ldi	r25, 0x08	; 8
    45b4:	e6 e0       	ldi	r30, 0x06	; 6
    45b6:	f3 e2       	ldi	r31, 0x23	; 35
    45b8:	a7 e5       	ldi	r26, 0x57	; 87
    45ba:	b9 e2       	ldi	r27, 0x29	; 41
    45bc:	01 90       	ld	r0, Z+
    45be:	0d 92       	st	X+, r0
    45c0:	9a 95       	dec	r25
    45c2:	e1 f7       	brne	.-8      	; 0x45bc <__stack+0x5bd>
            Responsing=1; 
    45c4:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady; 
    45c8:	e0 ea       	ldi	r30, 0xA0	; 160
    45ca:	f6 e0       	ldi	r31, 0x06	; 6
    45cc:	84 81       	ldd	r24, Z+4	; 0x04
    45ce:	81 60       	ori	r24, 0x01	; 1
    45d0:	84 83       	std	Z+4, r24	; 0x04
            break;
    45d2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         }
         case '2': //Axis 2
         {
            SET_DIR2;            
    45d6:	e0 e2       	ldi	r30, 0x20	; 32
    45d8:	f7 e0       	ldi	r31, 0x07	; 7
    45da:	84 81       	ldd	r24, Z+4	; 0x04
    45dc:	84 60       	ori	r24, 0x04	; 4
    45de:	84 83       	std	Z+4, r24	; 0x04
            MaxSpeed=SetSpeed2;
    45e0:	c0 90 75 27 	lds	r12, 0x2775	; 0x802775 <SetSpeed2>
    45e4:	d0 90 76 27 	lds	r13, 0x2776	; 0x802776 <SetSpeed2+0x1>
    45e8:	e0 90 77 27 	lds	r14, 0x2777	; 0x802777 <SetSpeed2+0x2>
    45ec:	f0 90 78 27 	lds	r15, 0x2778	; 0x802778 <SetSpeed2+0x3>
    45f0:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    45f4:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    45f8:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    45fc:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC2;
    4600:	40 90 65 27 	lds	r4, 0x2765	; 0x802765 <ACC2>
    4604:	50 90 66 27 	lds	r5, 0x2766	; 0x802766 <ACC2+0x1>
    4608:	60 90 67 27 	lds	r6, 0x2767	; 0x802767 <ACC2+0x2>
    460c:	70 90 68 27 	lds	r7, 0x2768	; 0x802768 <ACC2+0x3>
    4610:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    4614:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    4618:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    461c:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
            IDEC=DEC2;                     
    4620:	80 90 59 27 	lds	r8, 0x2759	; 0x802759 <DEC2>
    4624:	90 90 5a 27 	lds	r9, 0x275A	; 0x80275a <DEC2+0x1>
    4628:	a0 90 5b 27 	lds	r10, 0x275B	; 0x80275b <DEC2+0x2>
    462c:	b0 90 5c 27 	lds	r11, 0x275C	; 0x80275c <DEC2+0x3>
    4630:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    4634:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    4638:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    463c:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
            CurSpeedFrq=0;
    4640:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    4644:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    4648:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    464c:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
            TCC0.CCA=0xFFFF;  
    4650:	8f ef       	ldi	r24, 0xFF	; 255
    4652:	9f ef       	ldi	r25, 0xFF	; 255
    4654:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4658:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                           
            ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    465c:	c7 01       	movw	r24, r14
    465e:	b6 01       	movw	r22, r12
    4660:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	48 ec       	ldi	r20, 0xC8	; 200
    466a:	52 e4       	ldi	r21, 0x42	; 66
    466c:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    4670:	69 83       	std	Y+1, r22	; 0x01
    4672:	7a 83       	std	Y+2, r23	; 0x02
    4674:	8b 83       	std	Y+3, r24	; 0x03
    4676:	9c 83       	std	Y+4, r25	; 0x04
            ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    4678:	c3 01       	movw	r24, r6
    467a:	b2 01       	movw	r22, r4
    467c:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    4680:	9b 01       	movw	r18, r22
    4682:	ac 01       	movw	r20, r24
    4684:	69 81       	ldd	r22, Y+1	; 0x01
    4686:	7a 81       	ldd	r23, Y+2	; 0x02
    4688:	8b 81       	ldd	r24, Y+3	; 0x03
    468a:	9c 81       	ldd	r25, Y+4	; 0x04
    468c:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    4690:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    4694:	9b 01       	movw	r18, r22
    4696:	ac 01       	movw	r20, r24
    4698:	c7 01       	movw	r24, r14
    469a:	b6 01       	movw	r22, r12
    469c:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    46a0:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    46a4:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    46a8:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    46ac:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                                   
            DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
            DECSpeedINT= MaxSpeed / DECSpeedINT;                       
    46b0:	c5 01       	movw	r24, r10
    46b2:	b4 01       	movw	r22, r8
    46b4:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    46b8:	9b 01       	movw	r18, r22
    46ba:	ac 01       	movw	r20, r24
    46bc:	69 81       	ldd	r22, Y+1	; 0x01
    46be:	7a 81       	ldd	r23, Y+2	; 0x02
    46c0:	8b 81       	ldd	r24, Y+3	; 0x03
    46c2:	9c 81       	ldd	r25, Y+4	; 0x04
    46c4:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    46c8:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    46cc:	9b 01       	movw	r18, r22
    46ce:	ac 01       	movw	r20, r24
    46d0:	c7 01       	movw	r24, r14
    46d2:	b6 01       	movw	r22, r12
    46d4:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    46d8:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    46dc:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    46e0:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    46e4:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
            FreeJog=2;   
    46e8:	82 e0       	ldi	r24, 0x02	; 2
    46ea:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
            ACC=1;    
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
            sprintf(BufferSend,"!0602\r\n");
    46f4:	98 e0       	ldi	r25, 0x08	; 8
    46f6:	ee e0       	ldi	r30, 0x0E	; 14
    46f8:	f3 e2       	ldi	r31, 0x23	; 35
    46fa:	a7 e5       	ldi	r26, 0x57	; 87
    46fc:	b9 e2       	ldi	r27, 0x29	; 41
    46fe:	01 90       	ld	r0, Z+
    4700:	0d 92       	st	X+, r0
    4702:	9a 95       	dec	r25
    4704:	e1 f7       	brne	.-8      	; 0x46fe <__stack+0x6ff>
            Responsing=1;  
    4706:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    470a:	e0 ea       	ldi	r30, 0xA0	; 160
    470c:	f6 e0       	ldi	r31, 0x06	; 6
    470e:	84 81       	ldd	r24, Z+4	; 0x04
    4710:	81 60       	ori	r24, 0x01	; 1
    4712:	84 83       	std	Z+4, r24	; 0x04
            break;
    4714:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         } 
        case '3': //Axis 3
        {        
          SET_DIR3;                
    4718:	e0 e2       	ldi	r30, 0x20	; 32
    471a:	f7 e0       	ldi	r31, 0x07	; 7
    471c:	84 81       	ldd	r24, Z+4	; 0x04
    471e:	81 60       	ori	r24, 0x01	; 1
    4720:	84 83       	std	Z+4, r24	; 0x04
          MaxSpeed=SetSpeed3;
    4722:	c0 90 71 27 	lds	r12, 0x2771	; 0x802771 <SetSpeed3>
    4726:	d0 90 72 27 	lds	r13, 0x2772	; 0x802772 <SetSpeed3+0x1>
    472a:	e0 90 73 27 	lds	r14, 0x2773	; 0x802773 <SetSpeed3+0x2>
    472e:	f0 90 74 27 	lds	r15, 0x2774	; 0x802774 <SetSpeed3+0x3>
    4732:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    4736:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    473a:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    473e:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
          IACC=ACC3;
    4742:	40 90 61 27 	lds	r4, 0x2761	; 0x802761 <ACC3>
    4746:	50 90 62 27 	lds	r5, 0x2762	; 0x802762 <ACC3+0x1>
    474a:	60 90 63 27 	lds	r6, 0x2763	; 0x802763 <ACC3+0x2>
    474e:	70 90 64 27 	lds	r7, 0x2764	; 0x802764 <ACC3+0x3>
    4752:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    4756:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    475a:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    475e:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
          IDEC=DEC3;          
    4762:	80 90 55 27 	lds	r8, 0x2755	; 0x802755 <DEC3>
    4766:	90 90 56 27 	lds	r9, 0x2756	; 0x802756 <DEC3+0x1>
    476a:	a0 90 57 27 	lds	r10, 0x2757	; 0x802757 <DEC3+0x2>
    476e:	b0 90 58 27 	lds	r11, 0x2758	; 0x802758 <DEC3+0x3>
    4772:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    4776:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    477a:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    477e:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
          CurSpeedFrq=0;
    4782:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    4786:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    478a:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    478e:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
          TCC0.CCA=0xFFFF;                                                   
    4792:	8f ef       	ldi	r24, 0xFF	; 255
    4794:	9f ef       	ldi	r25, 0xFF	; 255
    4796:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    479a:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                                 
          ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a                        
    479e:	c7 01       	movw	r24, r14
    47a0:	b6 01       	movw	r22, r12
    47a2:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	48 ec       	ldi	r20, 0xC8	; 200
    47ac:	52 e4       	ldi	r21, 0x42	; 66
    47ae:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    47b2:	69 83       	std	Y+1, r22	; 0x01
    47b4:	7a 83       	std	Y+2, r23	; 0x02
    47b6:	8b 83       	std	Y+3, r24	; 0x03
    47b8:	9c 83       	std	Y+4, r25	; 0x04
          ACCSpeedINT = MaxSpeed / ACCSpeedINT; 
    47ba:	c3 01       	movw	r24, r6
    47bc:	b2 01       	movw	r22, r4
    47be:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    47c2:	9b 01       	movw	r18, r22
    47c4:	ac 01       	movw	r20, r24
    47c6:	69 81       	ldd	r22, Y+1	; 0x01
    47c8:	7a 81       	ldd	r23, Y+2	; 0x02
    47ca:	8b 81       	ldd	r24, Y+3	; 0x03
    47cc:	9c 81       	ldd	r25, Y+4	; 0x04
    47ce:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    47d2:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    47d6:	9b 01       	movw	r18, r22
    47d8:	ac 01       	movw	r20, r24
    47da:	c7 01       	movw	r24, r14
    47dc:	b6 01       	movw	r22, r12
    47de:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    47e2:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    47e6:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    47ea:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    47ee:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
                        
          DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a                           
          DECSpeedINT= MaxSpeed / DECSpeedINT;                 
    47f2:	c5 01       	movw	r24, r10
    47f4:	b4 01       	movw	r22, r8
    47f6:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    47fa:	9b 01       	movw	r18, r22
    47fc:	ac 01       	movw	r20, r24
    47fe:	69 81       	ldd	r22, Y+1	; 0x01
    4800:	7a 81       	ldd	r23, Y+2	; 0x02
    4802:	8b 81       	ldd	r24, Y+3	; 0x03
    4804:	9c 81       	ldd	r25, Y+4	; 0x04
    4806:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    480a:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    480e:	9b 01       	movw	r18, r22
    4810:	ac 01       	movw	r20, r24
    4812:	c7 01       	movw	r24, r14
    4814:	b6 01       	movw	r22, r12
    4816:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    481a:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    481e:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    4822:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    4826:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
          FreeJog=3;    
    482a:	83 e0       	ldi	r24, 0x03	; 3
    482c:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
          ACC=1;    
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
          sprintf(BufferSend,"!0603\r\n");
    4836:	98 e0       	ldi	r25, 0x08	; 8
    4838:	e6 e1       	ldi	r30, 0x16	; 22
    483a:	f3 e2       	ldi	r31, 0x23	; 35
    483c:	a7 e5       	ldi	r26, 0x57	; 87
    483e:	b9 e2       	ldi	r27, 0x29	; 41
    4840:	01 90       	ld	r0, Z+
    4842:	0d 92       	st	X+, r0
    4844:	9a 95       	dec	r25
    4846:	e1 f7       	brne	.-8      	; 0x4840 <__stack+0x841>
          Responsing=1;  
    4848:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
          SetDataReady;
    484c:	e0 ea       	ldi	r30, 0xA0	; 160
    484e:	f6 e0       	ldi	r31, 0x06	; 6
    4850:	84 81       	ldd	r24, Z+4	; 0x04
    4852:	81 60       	ori	r24, 0x01	; 1
    4854:	84 83       	std	Z+4, r24	; 0x04
          break;
    4856:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
        }     
      }
     }
      else if(cmdTemp[3]=='3')//Free Jog   STOP
    485a:	83 33       	cpi	r24, 0x33	; 51
    485c:	11 f0       	breq	.+4      	; 0x4862 <__stack+0x863>
    485e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
       switch(cmdTemp[4])
    4862:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4866:	82 33       	cpi	r24, 0x32	; 50
    4868:	d9 f0       	breq	.+54     	; 0x48a0 <__stack+0x8a1>
    486a:	83 33       	cpi	r24, 0x33	; 51
    486c:	71 f1       	breq	.+92     	; 0x48ca <__stack+0x8cb>
    486e:	81 33       	cpi	r24, 0x31	; 49
    4870:	11 f0       	breq	.+4      	; 0x4876 <__stack+0x877>
    4872:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         case '1': //Axis 1
         {
            DEC=1;
    4876:	81 e0       	ldi	r24, 0x01	; 1
    4878:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
            sprintf(BufferSend,"!0631\r\n"); 
    487c:	98 e0       	ldi	r25, 0x08	; 8
    487e:	e6 e3       	ldi	r30, 0x36	; 54
    4880:	f3 e2       	ldi	r31, 0x23	; 35
    4882:	a7 e5       	ldi	r26, 0x57	; 87
    4884:	b9 e2       	ldi	r27, 0x29	; 41
    4886:	01 90       	ld	r0, Z+
    4888:	0d 92       	st	X+, r0
    488a:	9a 95       	dec	r25
    488c:	e1 f7       	brne	.-8      	; 0x4886 <__stack+0x887>
            Responsing=1; 
    488e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady; 
    4892:	e0 ea       	ldi	r30, 0xA0	; 160
    4894:	f6 e0       	ldi	r31, 0x06	; 6
    4896:	84 81       	ldd	r24, Z+4	; 0x04
    4898:	81 60       	ori	r24, 0x01	; 1
    489a:	84 83       	std	Z+4, r24	; 0x04
            break;
    489c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         }
         case '2': //Axis 2
         {
            DEC=1;   
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
            sprintf(BufferSend,"!0632\r\n");
    48a6:	98 e0       	ldi	r25, 0x08	; 8
    48a8:	ee e3       	ldi	r30, 0x3E	; 62
    48aa:	f3 e2       	ldi	r31, 0x23	; 35
    48ac:	a7 e5       	ldi	r26, 0x57	; 87
    48ae:	b9 e2       	ldi	r27, 0x29	; 41
    48b0:	01 90       	ld	r0, Z+
    48b2:	0d 92       	st	X+, r0
    48b4:	9a 95       	dec	r25
    48b6:	e1 f7       	brne	.-8      	; 0x48b0 <__stack+0x8b1>
            Responsing=1;  
    48b8:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
            SetDataReady;
    48bc:	e0 ea       	ldi	r30, 0xA0	; 160
    48be:	f6 e0       	ldi	r31, 0x06	; 6
    48c0:	84 81       	ldd	r24, Z+4	; 0x04
    48c2:	81 60       	ori	r24, 0x01	; 1
    48c4:	84 83       	std	Z+4, r24	; 0x04
            break;
    48c6:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         } 
        case '3': //Axis 3
        {        
          DEC=1;
    48ca:	81 e0       	ldi	r24, 0x01	; 1
    48cc:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
          sprintf(BufferSend,"!0633\r\n");
    48d0:	98 e0       	ldi	r25, 0x08	; 8
    48d2:	e6 e4       	ldi	r30, 0x46	; 70
    48d4:	f3 e2       	ldi	r31, 0x23	; 35
    48d6:	a7 e5       	ldi	r26, 0x57	; 87
    48d8:	b9 e2       	ldi	r27, 0x29	; 41
    48da:	01 90       	ld	r0, Z+
    48dc:	0d 92       	st	X+, r0
    48de:	9a 95       	dec	r25
    48e0:	e1 f7       	brne	.-8      	; 0x48da <__stack+0x8db>
          Responsing=1;  
    48e2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
          SetDataReady;
    48e6:	e0 ea       	ldi	r30, 0xA0	; 160
    48e8:	f6 e0       	ldi	r31, 0x06	; 6
    48ea:	84 81       	ldd	r24, Z+4	; 0x04
    48ec:	81 60       	ori	r24, 0x01	; 1
    48ee:	84 83       	std	Z+4, r24	; 0x04
          break;
    48f0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
        }     
      }
     }
    } 
    }
    else if(strncmp(cmdTemp,"#07",3)==0)
    48f4:	43 e0       	ldi	r20, 0x03	; 3
    48f6:	50 e0       	ldi	r21, 0x00	; 0
    48f8:	6e e4       	ldi	r22, 0x4E	; 78
    48fa:	73 e2       	ldi	r23, 0x23	; 35
    48fc:	80 e1       	ldi	r24, 0x10	; 16
    48fe:	97 e2       	ldi	r25, 0x27	; 39
    4900:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    4904:	89 2b       	or	r24, r25
    4906:	09 f0       	breq	.+2      	; 0x490a <__stack+0x90b>
    4908:	5d c0       	rjmp	.+186    	; 0x49c4 <__stack+0x9c5>
    {//STOP JOG
    if(!ProgramRun)
    490a:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    490e:	81 11       	cpse	r24, r1
    4910:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    {
      if(cmdTemp[3]=='0')
    4914:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4918:	80 33       	cpi	r24, 0x30	; 48
    491a:	11 f0       	breq	.+4      	; 0x4920 <__stack+0x921>
    491c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
           switch(cmdTemp[4])
    4920:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4924:	82 33       	cpi	r24, 0x32	; 50
    4926:	f1 f0       	breq	.+60     	; 0x4964 <__stack+0x965>
    4928:	83 33       	cpi	r24, 0x33	; 51
    492a:	a1 f1       	breq	.+104    	; 0x4994 <__stack+0x995>
    492c:	81 33       	cpi	r24, 0x31	; 49
    492e:	11 f0       	breq	.+4      	; 0x4934 <__stack+0x935>
    4930:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '1': //Axis 1
             {                                                
                DistanceToGo1 = 0;                       
    4934:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    4938:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    493c:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    4940:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
                if(EchoON) printf("!0701\n\r");
    4944:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4948:	88 23       	and	r24, r24
    494a:	11 f4       	brne	.+4      	; 0x4950 <__stack+0x951>
    494c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4950:	82 e5       	ldi	r24, 0x52	; 82
    4952:	93 e2       	ldi	r25, 0x23	; 35
    4954:	9f 93       	push	r25
    4956:	8f 93       	push	r24
    4958:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
                break;
             }
             case '2': //Axis 2
             {
                DistanceToGo2 = 0;                  
    4964:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    4968:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    496c:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    4970:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
                if(EchoON) printf("!0702\n\r");
    4974:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4978:	88 23       	and	r24, r24
    497a:	11 f4       	brne	.+4      	; 0x4980 <__stack+0x981>
    497c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4980:	8a e5       	ldi	r24, 0x5A	; 90
    4982:	93 e2       	ldi	r25, 0x23	; 35
    4984:	9f 93       	push	r25
    4986:	8f 93       	push	r24
    4988:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
                break;
             }                          
             case '3': //Axis 3
             {
                DistanceToGo3 = 0;                  
    4994:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    4998:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    499c:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    49a0:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
                if(EchoON) printf("!0703\n\r");
    49a4:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    49a8:	88 23       	and	r24, r24
    49aa:	11 f4       	brne	.+4      	; 0x49b0 <__stack+0x9b1>
    49ac:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    49b0:	82 e6       	ldi	r24, 0x62	; 98
    49b2:	93 e2       	ldi	r25, 0x23	; 35
    49b4:	9f 93       	push	r25
    49b6:	8f 93       	push	r24
    49b8:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    49bc:	0f 90       	pop	r0
    49be:	0f 90       	pop	r0
    49c0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
             }               
           }
        }
      } 
    }
    else if(strncmp(cmdTemp,"?08",3)==0)
    49c4:	43 e0       	ldi	r20, 0x03	; 3
    49c6:	50 e0       	ldi	r21, 0x00	; 0
    49c8:	6a e6       	ldi	r22, 0x6A	; 106
    49ca:	73 e2       	ldi	r23, 0x23	; 35
    49cc:	80 e1       	ldi	r24, 0x10	; 16
    49ce:	97 e2       	ldi	r25, 0x27	; 39
    49d0:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    49d4:	89 2b       	or	r24, r25
    49d6:	09 f0       	breq	.+2      	; 0x49da <__stack+0x9db>
    49d8:	7d c0       	rjmp	.+250    	; 0x4ad4 <__stack+0xad5>
    {//Read DistanceToGo  
      if(cmdTemp[3]=='0')
    49da:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    49de:	80 33       	cpi	r24, 0x30	; 48
    49e0:	11 f0       	breq	.+4      	; 0x49e6 <__stack+0x9e7>
    49e2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
           switch(cmdTemp[4])
    49e6:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    49ea:	82 33       	cpi	r24, 0x32	; 50
    49ec:	59 f1       	breq	.+86     	; 0x4a44 <__stack+0xa45>
    49ee:	83 33       	cpi	r24, 0x33	; 51
    49f0:	09 f4       	brne	.+2      	; 0x49f4 <__stack+0x9f5>
    49f2:	4c c0       	rjmp	.+152    	; 0x4a8c <__stack+0xa8d>
    49f4:	81 33       	cpi	r24, 0x31	; 49
    49f6:	11 f0       	breq	.+4      	; 0x49fc <__stack+0x9fd>
    49f8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '1': //Axis 1
             {                   
                ltoa(DistanceToGo1,temp,10);            
    49fc:	60 91 90 27 	lds	r22, 0x2790	; 0x802790 <DistanceToGo1>
    4a00:	70 91 91 27 	lds	r23, 0x2791	; 0x802791 <DistanceToGo1+0x1>
    4a04:	80 91 92 27 	lds	r24, 0x2792	; 0x802792 <DistanceToGo1+0x2>
    4a08:	90 91 93 27 	lds	r25, 0x2793	; 0x802793 <DistanceToGo1+0x3>
    4a0c:	2a e0       	ldi	r18, 0x0A	; 10
    4a0e:	30 e0       	ldi	r19, 0x00	; 0
    4a10:	4b ef       	ldi	r20, 0xFB	; 251
    4a12:	56 e2       	ldi	r21, 0x26	; 38
    4a14:	0e 94 44 40 	call	0x8088	; 0x8088 <ltoa>
                if(EchoON) printf("!0801\t%s\n\r",temp);
    4a18:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4a1c:	88 23       	and	r24, r24
    4a1e:	11 f4       	brne	.+4      	; 0x4a24 <__stack+0xa25>
    4a20:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4a24:	8b ef       	ldi	r24, 0xFB	; 251
    4a26:	96 e2       	ldi	r25, 0x26	; 38
    4a28:	9f 93       	push	r25
    4a2a:	8f 93       	push	r24
    4a2c:	8e e6       	ldi	r24, 0x6E	; 110
    4a2e:	93 e2       	ldi	r25, 0x23	; 35
    4a30:	9f 93       	push	r25
    4a32:	8f 93       	push	r24
    4a34:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
                break;
             }
             case '2': //Axis 2
             {
                ltoa(DistanceToGo2,temp,10);            
    4a44:	60 91 8c 27 	lds	r22, 0x278C	; 0x80278c <DistanceToGo2>
    4a48:	70 91 8d 27 	lds	r23, 0x278D	; 0x80278d <DistanceToGo2+0x1>
    4a4c:	80 91 8e 27 	lds	r24, 0x278E	; 0x80278e <DistanceToGo2+0x2>
    4a50:	90 91 8f 27 	lds	r25, 0x278F	; 0x80278f <DistanceToGo2+0x3>
    4a54:	2a e0       	ldi	r18, 0x0A	; 10
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	4b ef       	ldi	r20, 0xFB	; 251
    4a5a:	56 e2       	ldi	r21, 0x26	; 38
    4a5c:	0e 94 44 40 	call	0x8088	; 0x8088 <ltoa>
                if(EchoON) printf("!0802\t%s\n\r",temp);
    4a60:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4a64:	88 23       	and	r24, r24
    4a66:	11 f4       	brne	.+4      	; 0x4a6c <__stack+0xa6d>
    4a68:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4a6c:	8b ef       	ldi	r24, 0xFB	; 251
    4a6e:	96 e2       	ldi	r25, 0x26	; 38
    4a70:	9f 93       	push	r25
    4a72:	8f 93       	push	r24
    4a74:	89 e7       	ldi	r24, 0x79	; 121
    4a76:	93 e2       	ldi	r25, 0x23	; 35
    4a78:	9f 93       	push	r25
    4a7a:	8f 93       	push	r24
    4a7c:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4a80:	0f 90       	pop	r0
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
                break;
             }                          
             case '3': //Axis 3
             {
                ltoa(DistanceToGo3,temp,10);            
    4a8c:	60 91 88 27 	lds	r22, 0x2788	; 0x802788 <DistanceToGo3>
    4a90:	70 91 89 27 	lds	r23, 0x2789	; 0x802789 <DistanceToGo3+0x1>
    4a94:	80 91 8a 27 	lds	r24, 0x278A	; 0x80278a <DistanceToGo3+0x2>
    4a98:	90 91 8b 27 	lds	r25, 0x278B	; 0x80278b <DistanceToGo3+0x3>
    4a9c:	2a e0       	ldi	r18, 0x0A	; 10
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	4b ef       	ldi	r20, 0xFB	; 251
    4aa2:	56 e2       	ldi	r21, 0x26	; 38
    4aa4:	0e 94 44 40 	call	0x8088	; 0x8088 <ltoa>
                if(EchoON) printf("!0803\t%s\n\r",temp);
    4aa8:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4aac:	88 23       	and	r24, r24
    4aae:	11 f4       	brne	.+4      	; 0x4ab4 <__stack+0xab5>
    4ab0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4ab4:	8b ef       	ldi	r24, 0xFB	; 251
    4ab6:	96 e2       	ldi	r25, 0x26	; 38
    4ab8:	9f 93       	push	r25
    4aba:	8f 93       	push	r24
    4abc:	84 e8       	ldi	r24, 0x84	; 132
    4abe:	93 e2       	ldi	r25, 0x23	; 35
    4ac0:	9f 93       	push	r25
    4ac2:	8f 93       	push	r24
    4ac4:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4ac8:	0f 90       	pop	r0
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
    4ad0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
                break;
             }              
           }
      }
    } 
    else if(strncmp(cmdTemp,"?09",3)==0)
    4ad4:	43 e0       	ldi	r20, 0x03	; 3
    4ad6:	50 e0       	ldi	r21, 0x00	; 0
    4ad8:	6f e8       	ldi	r22, 0x8F	; 143
    4ada:	73 e2       	ldi	r23, 0x23	; 35
    4adc:	80 e1       	ldi	r24, 0x10	; 16
    4ade:	97 e2       	ldi	r25, 0x27	; 39
    4ae0:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    4ae4:	89 2b       	or	r24, r25
    4ae6:	09 f0       	breq	.+2      	; 0x4aea <__stack+0xaeb>
    4ae8:	95 c0       	rjmp	.+298    	; 0x4c14 <__stack+0xc15>
    {//Read Axis Position  
      if(cmdTemp[3]=='0')
    4aea:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4aee:	80 33       	cpi	r24, 0x30	; 48
    4af0:	11 f0       	breq	.+4      	; 0x4af6 <__stack+0xaf7>
    4af2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
           switch(cmdTemp[4])
    4af6:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4afa:	82 33       	cpi	r24, 0x32	; 50
    4afc:	99 f1       	breq	.+102    	; 0x4b64 <__stack+0xb65>
    4afe:	83 33       	cpi	r24, 0x33	; 51
    4b00:	09 f4       	brne	.+2      	; 0x4b04 <__stack+0xb05>
    4b02:	5c c0       	rjmp	.+184    	; 0x4bbc <__stack+0xbbd>
    4b04:	81 33       	cpi	r24, 0x31	; 49
    4b06:	11 f0       	breq	.+4      	; 0x4b0c <__stack+0xb0d>
    4b08:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '1': //Axis 1
             {                   
                ltoa(AxisPosition1,temp,10);            
    4b0c:	60 91 ac 27 	lds	r22, 0x27AC	; 0x8027ac <AxisPosition1>
    4b10:	70 91 ad 27 	lds	r23, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    4b14:	80 91 ae 27 	lds	r24, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    4b18:	90 91 af 27 	lds	r25, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    4b1c:	2a e0       	ldi	r18, 0x0A	; 10
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	4b ef       	ldi	r20, 0xFB	; 251
    4b22:	56 e2       	ldi	r21, 0x26	; 38
    4b24:	0e 94 44 40 	call	0x8088	; 0x8088 <ltoa>
                sprintf(BufferSend,"!0901\t%s\r\n",temp);  
    4b28:	8b ef       	ldi	r24, 0xFB	; 251
    4b2a:	96 e2       	ldi	r25, 0x26	; 38
    4b2c:	9f 93       	push	r25
    4b2e:	8f 93       	push	r24
    4b30:	83 e9       	ldi	r24, 0x93	; 147
    4b32:	93 e2       	ldi	r25, 0x23	; 35
    4b34:	9f 93       	push	r25
    4b36:	8f 93       	push	r24
    4b38:	87 e5       	ldi	r24, 0x57	; 87
    4b3a:	99 e2       	ldi	r25, 0x29	; 41
    4b3c:	9f 93       	push	r25
    4b3e:	8f 93       	push	r24
    4b40:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
                Responsing=1;
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady; 
    4b4a:	e0 ea       	ldi	r30, 0xA0	; 160
    4b4c:	f6 e0       	ldi	r31, 0x06	; 6
    4b4e:	84 81       	ldd	r24, Z+4	; 0x04
    4b50:	81 60       	ori	r24, 0x01	; 1
    4b52:	84 83       	std	Z+4, r24	; 0x04
                break;
    4b54:	0f 90       	pop	r0
    4b56:	0f 90       	pop	r0
    4b58:	0f 90       	pop	r0
    4b5a:	0f 90       	pop	r0
    4b5c:	0f 90       	pop	r0
    4b5e:	0f 90       	pop	r0
    4b60:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
             }
             case '2': //Axis 2
             {
                ltoa(AxisPosition2,temp,10);            
    4b64:	60 91 a8 27 	lds	r22, 0x27A8	; 0x8027a8 <AxisPosition2>
    4b68:	70 91 a9 27 	lds	r23, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    4b6c:	80 91 aa 27 	lds	r24, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    4b70:	90 91 ab 27 	lds	r25, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    4b74:	2a e0       	ldi	r18, 0x0A	; 10
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	4b ef       	ldi	r20, 0xFB	; 251
    4b7a:	56 e2       	ldi	r21, 0x26	; 38
    4b7c:	0e 94 44 40 	call	0x8088	; 0x8088 <ltoa>
                sprintf(BufferSend,"!0902\t%s\r\n",temp); 
    4b80:	8b ef       	ldi	r24, 0xFB	; 251
    4b82:	96 e2       	ldi	r25, 0x26	; 38
    4b84:	9f 93       	push	r25
    4b86:	8f 93       	push	r24
    4b88:	8e e9       	ldi	r24, 0x9E	; 158
    4b8a:	93 e2       	ldi	r25, 0x23	; 35
    4b8c:	9f 93       	push	r25
    4b8e:	8f 93       	push	r24
    4b90:	87 e5       	ldi	r24, 0x57	; 87
    4b92:	99 e2       	ldi	r25, 0x29	; 41
    4b94:	9f 93       	push	r25
    4b96:	8f 93       	push	r24
    4b98:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
                Responsing=1;  
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady;
    4ba2:	e0 ea       	ldi	r30, 0xA0	; 160
    4ba4:	f6 e0       	ldi	r31, 0x06	; 6
    4ba6:	84 81       	ldd	r24, Z+4	; 0x04
    4ba8:	81 60       	ori	r24, 0x01	; 1
    4baa:	84 83       	std	Z+4, r24	; 0x04
                break;
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	0f 90       	pop	r0
    4bb2:	0f 90       	pop	r0
    4bb4:	0f 90       	pop	r0
    4bb6:	0f 90       	pop	r0
    4bb8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
             }                          
             case '3': //Axis 3
             {
                ltoa(AxisPosition3,temp,10);            
    4bbc:	60 91 a4 27 	lds	r22, 0x27A4	; 0x8027a4 <AxisPosition3>
    4bc0:	70 91 a5 27 	lds	r23, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    4bc4:	80 91 a6 27 	lds	r24, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    4bc8:	90 91 a7 27 	lds	r25, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    4bcc:	2a e0       	ldi	r18, 0x0A	; 10
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	4b ef       	ldi	r20, 0xFB	; 251
    4bd2:	56 e2       	ldi	r21, 0x26	; 38
    4bd4:	0e 94 44 40 	call	0x8088	; 0x8088 <ltoa>
                sprintf(BufferSend,"!0903\t%s\r\n",temp);
    4bd8:	8b ef       	ldi	r24, 0xFB	; 251
    4bda:	96 e2       	ldi	r25, 0x26	; 38
    4bdc:	9f 93       	push	r25
    4bde:	8f 93       	push	r24
    4be0:	89 ea       	ldi	r24, 0xA9	; 169
    4be2:	93 e2       	ldi	r25, 0x23	; 35
    4be4:	9f 93       	push	r25
    4be6:	8f 93       	push	r24
    4be8:	87 e5       	ldi	r24, 0x57	; 87
    4bea:	99 e2       	ldi	r25, 0x29	; 41
    4bec:	9f 93       	push	r25
    4bee:	8f 93       	push	r24
    4bf0:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
                Responsing=1; 
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
                SetDataReady;
    4bfa:	e0 ea       	ldi	r30, 0xA0	; 160
    4bfc:	f6 e0       	ldi	r31, 0x06	; 6
    4bfe:	84 81       	ldd	r24, Z+4	; 0x04
    4c00:	81 60       	ori	r24, 0x01	; 1
    4c02:	84 83       	std	Z+4, r24	; 0x04
                break;
    4c04:	0f 90       	pop	r0
    4c06:	0f 90       	pop	r0
    4c08:	0f 90       	pop	r0
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	0f 90       	pop	r0
    4c10:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
             }             
           }
      }
    }
     else if(strncmp(cmdTemp,"#10",3)==0)
    4c14:	43 e0       	ldi	r20, 0x03	; 3
    4c16:	50 e0       	ldi	r21, 0x00	; 0
    4c18:	64 eb       	ldi	r22, 0xB4	; 180
    4c1a:	73 e2       	ldi	r23, 0x23	; 35
    4c1c:	80 e1       	ldi	r24, 0x10	; 16
    4c1e:	97 e2       	ldi	r25, 0x27	; 39
    4c20:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    4c24:	89 2b       	or	r24, r25
    4c26:	09 f0       	breq	.+2      	; 0x4c2a <__stack+0xc2b>
    4c28:	8e c0       	rjmp	.+284    	; 0x4d46 <__stack+0xd47>
    {//Clear JOG  
     if(!ProgramRun)
    4c2a:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    4c2e:	81 11       	cpse	r24, r1
    4c30:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    {
      if(cmdTemp[3]=='0')
    4c34:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4c38:	80 33       	cpi	r24, 0x30	; 48
    4c3a:	11 f0       	breq	.+4      	; 0x4c40 <__stack+0xc41>
    4c3c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      {
           switch(cmdTemp[4])
    4c40:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4c44:	82 33       	cpi	r24, 0x32	; 50
    4c46:	79 f1       	breq	.+94     	; 0x4ca6 <__stack+0xca7>
    4c48:	83 33       	cpi	r24, 0x33	; 51
    4c4a:	09 f4       	brne	.+2      	; 0x4c4e <__stack+0xc4f>
    4c4c:	54 c0       	rjmp	.+168    	; 0x4cf6 <__stack+0xcf7>
    4c4e:	81 33       	cpi	r24, 0x31	; 49
    4c50:	11 f0       	breq	.+4      	; 0x4c56 <__stack+0xc57>
    4c52:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
           {
             case '1': //Axis 1
             {                                                
                DistanceToGo1 = 0;
    4c56:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    4c5a:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    4c5e:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    4c62:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
                SetJog1 = AxisPosition1;
    4c66:	80 91 ac 27 	lds	r24, 0x27AC	; 0x8027ac <AxisPosition1>
    4c6a:	90 91 ad 27 	lds	r25, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    4c6e:	a0 91 ae 27 	lds	r26, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    4c72:	b0 91 af 27 	lds	r27, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    4c76:	80 93 b8 27 	sts	0x27B8, r24	; 0x8027b8 <SetJog1>
    4c7a:	90 93 b9 27 	sts	0x27B9, r25	; 0x8027b9 <SetJog1+0x1>
    4c7e:	a0 93 ba 27 	sts	0x27BA, r26	; 0x8027ba <SetJog1+0x2>
    4c82:	b0 93 bb 27 	sts	0x27BB, r27	; 0x8027bb <SetJog1+0x3>
                if(EchoON) printf("!0701\n\r");
    4c86:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4c8a:	88 23       	and	r24, r24
    4c8c:	11 f4       	brne	.+4      	; 0x4c92 <__stack+0xc93>
    4c8e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4c92:	82 e5       	ldi	r24, 0x52	; 82
    4c94:	93 e2       	ldi	r25, 0x23	; 35
    4c96:	9f 93       	push	r25
    4c98:	8f 93       	push	r24
    4c9a:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4c9e:	0f 90       	pop	r0
    4ca0:	0f 90       	pop	r0
    4ca2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
                break;
             }
             case '2': //Axis 2
             {
                DistanceToGo2 = 0;   
    4ca6:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    4caa:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    4cae:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    4cb2:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
                SetJog2 = AxisPosition2;
    4cb6:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <AxisPosition2>
    4cba:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    4cbe:	a0 91 aa 27 	lds	r26, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    4cc2:	b0 91 ab 27 	lds	r27, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    4cc6:	80 93 b4 27 	sts	0x27B4, r24	; 0x8027b4 <SetJog2>
    4cca:	90 93 b5 27 	sts	0x27B5, r25	; 0x8027b5 <SetJog2+0x1>
    4cce:	a0 93 b6 27 	sts	0x27B6, r26	; 0x8027b6 <SetJog2+0x2>
    4cd2:	b0 93 b7 27 	sts	0x27B7, r27	; 0x8027b7 <SetJog2+0x3>
                if(EchoON) printf("!0702\n\r");
    4cd6:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4cda:	88 23       	and	r24, r24
    4cdc:	11 f4       	brne	.+4      	; 0x4ce2 <__stack+0xce3>
    4cde:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4ce2:	8a e5       	ldi	r24, 0x5A	; 90
    4ce4:	93 e2       	ldi	r25, 0x23	; 35
    4ce6:	9f 93       	push	r25
    4ce8:	8f 93       	push	r24
    4cea:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4cee:	0f 90       	pop	r0
    4cf0:	0f 90       	pop	r0
    4cf2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
                break;
             }                          
             case '3': //Axis 3
             {
                DistanceToGo3 = 0; 
    4cf6:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    4cfa:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    4cfe:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    4d02:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
                SetJog3 = AxisPosition3;                    
    4d06:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    4d0a:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    4d0e:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    4d12:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    4d16:	80 93 b0 27 	sts	0x27B0, r24	; 0x8027b0 <SetJog3>
    4d1a:	90 93 b1 27 	sts	0x27B1, r25	; 0x8027b1 <SetJog3+0x1>
    4d1e:	a0 93 b2 27 	sts	0x27B2, r26	; 0x8027b2 <SetJog3+0x2>
    4d22:	b0 93 b3 27 	sts	0x27B3, r27	; 0x8027b3 <SetJog3+0x3>
                if(EchoON) printf("!0703\n\r");
    4d26:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4d2a:	88 23       	and	r24, r24
    4d2c:	11 f4       	brne	.+4      	; 0x4d32 <__stack+0xd33>
    4d2e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4d32:	82 e6       	ldi	r24, 0x62	; 98
    4d34:	93 e2       	ldi	r25, 0x23	; 35
    4d36:	9f 93       	push	r25
    4d38:	8f 93       	push	r24
    4d3a:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4d3e:	0f 90       	pop	r0
    4d40:	0f 90       	pop	r0
    4d42:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
             }              
           }
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    4d46:	43 e0       	ldi	r20, 0x03	; 3
    4d48:	50 e0       	ldi	r21, 0x00	; 0
    4d4a:	68 eb       	ldi	r22, 0xB8	; 184
    4d4c:	73 e2       	ldi	r23, 0x23	; 35
    4d4e:	80 e1       	ldi	r24, 0x10	; 16
    4d50:	97 e2       	ldi	r25, 0x27	; 39
    4d52:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    4d56:	89 2b       	or	r24, r25
    4d58:	09 f0       	breq	.+2      	; 0x4d5c <__stack+0xd5d>
    4d5a:	ca c0       	rjmp	.+404    	; 0x4ef0 <__stack+0xef1>
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4d5c:	90 91 48 27 	lds	r25, 0x2748	; 0x802748 <AxisIsMoving1>
    4d60:	91 11       	cpse	r25, r1
    4d62:	0c 94 9f 33 	jmp	0x673e	; 0x673e <__stack+0x273f>
    4d66:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4d6a:	81 11       	cpse	r24, r1
    4d6c:	0c 94 c9 33 	jmp	0x6792	; 0x6792 <__stack+0x2793>
    4d70:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    4d74:	21 e0       	ldi	r18, 0x01	; 1
    4d76:	81 11       	cpse	r24, r1
    4d78:	01 c0       	rjmp	.+2      	; 0x4d7c <__stack+0xd7d>
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
         
    if (!ProgramRun)
    4d80:	20 91 bc 27 	lds	r18, 0x27BC	; 0x8027bc <ProgramRun>
    4d84:	21 11       	cpse	r18, r1
    4d86:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
     {
     while (AxisMoving == 1) 
    4d8a:	88 23       	and	r24, r24
    4d8c:	99 f0       	breq	.+38     	; 0x4db4 <__stack+0xdb5>
    4d8e:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4d92:	81 11       	cpse	r24, r1
    4d94:	07 c0       	rjmp	.+14     	; 0x4da4 <__stack+0xda5>
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    4d9c:	21 11       	cpse	r18, r1
    4d9e:	03 c0       	rjmp	.+6      	; 0x4da6 <__stack+0xda7>
    4da0:	80 e0       	ldi	r24, 0x00	; 0
    4da2:	01 c0       	rjmp	.+2      	; 0x4da6 <__stack+0xda7>
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	28 2f       	mov	r18, r24
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4da8:	91 11       	cpse	r25, r1
    4daa:	fe cf       	rjmp	.-4      	; 0x4da8 <__stack+0xda9>
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    4dac:	21 11       	cpse	r18, r1
    4dae:	fc cf       	rjmp	.-8      	; 0x4da8 <__stack+0xda9>
    4db0:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
      if(cmdTemp[3]=='0')
    4db4:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    4db8:	80 33       	cpi	r24, 0x30	; 48
    4dba:	11 f0       	breq	.+4      	; 0x4dc0 <__stack+0xdc1>
    4dbc:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
      { 
        switch(cmdTemp[4])
    4dc0:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    4dc4:	82 33       	cpi	r24, 0x32	; 50
    4dc6:	b1 f1       	breq	.+108    	; 0x4e34 <__stack+0xe35>
    4dc8:	83 33       	cpi	r24, 0x33	; 51
    4dca:	09 f4       	brne	.+2      	; 0x4dce <__stack+0xdcf>
    4dcc:	62 c0       	rjmp	.+196    	; 0x4e92 <__stack+0xe93>
    4dce:	81 33       	cpi	r24, 0x31	; 49
    4dd0:	11 f0       	breq	.+4      	; 0x4dd6 <__stack+0xdd7>
    4dd2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
        {
          case '1': //Axis 1
          {                   
            for(k=0;k<10;k++)
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
            {
              temp[k]=cmdTemp[k+5];
    4dd8:	28 2f       	mov	r18, r24
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	f9 01       	movw	r30, r18
    4dde:	e5 50       	subi	r30, 0x05	; 5
    4de0:	f9 4d       	sbci	r31, 0xD9	; 217
    4de2:	d9 01       	movw	r26, r18
    4de4:	a0 5f       	subi	r26, 0xF0	; 240
    4de6:	b8 4d       	sbci	r27, 0xD8	; 216
    4de8:	15 96       	adiw	r26, 0x05	; 5
    4dea:	9c 91       	ld	r25, X
    4dec:	90 83       	st	Z, r25
      { 
        switch(cmdTemp[4])
        {
          case '1': //Axis 1
          {                   
            for(k=0;k<10;k++)
    4dee:	8f 5f       	subi	r24, 0xFF	; 255
    4df0:	8a 30       	cpi	r24, 0x0A	; 10
    4df2:	90 f3       	brcs	.-28     	; 0x4dd8 <__stack+0xdd9>
    4df4:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4df8:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
            AxisPosition1=atol(temp);
    4dfc:	8b ef       	ldi	r24, 0xFB	; 251
    4dfe:	96 e2       	ldi	r25, 0x26	; 38
    4e00:	0e 94 0f 40 	call	0x801e	; 0x801e <atol>
    4e04:	60 93 ac 27 	sts	0x27AC, r22	; 0x8027ac <AxisPosition1>
    4e08:	70 93 ad 27 	sts	0x27AD, r23	; 0x8027ad <AxisPosition1+0x1>
    4e0c:	80 93 ae 27 	sts	0x27AE, r24	; 0x8027ae <AxisPosition1+0x2>
    4e10:	90 93 af 27 	sts	0x27AF, r25	; 0x8027af <AxisPosition1+0x3>
            if(EchoON) printf("!1101\n\r");  
    4e14:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4e18:	88 23       	and	r24, r24
    4e1a:	11 f4       	brne	.+4      	; 0x4e20 <__stack+0xe21>
    4e1c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4e20:	8c eb       	ldi	r24, 0xBC	; 188
    4e22:	93 e2       	ldi	r25, 0x23	; 35
    4e24:	9f 93       	push	r25
    4e26:	8f 93       	push	r24
    4e28:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4e2c:	0f 90       	pop	r0
    4e2e:	0f 90       	pop	r0
    4e30:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            break;                        
          }
          case '2'://Axis 2
          {                   
            for(k=0;k<10;k++)
    4e34:	80 e0       	ldi	r24, 0x00	; 0
            {
              temp[k]=cmdTemp[k+5];
    4e36:	28 2f       	mov	r18, r24
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	f9 01       	movw	r30, r18
    4e3c:	e5 50       	subi	r30, 0x05	; 5
    4e3e:	f9 4d       	sbci	r31, 0xD9	; 217
    4e40:	d9 01       	movw	r26, r18
    4e42:	a0 5f       	subi	r26, 0xF0	; 240
    4e44:	b8 4d       	sbci	r27, 0xD8	; 216
    4e46:	15 96       	adiw	r26, 0x05	; 5
    4e48:	9c 91       	ld	r25, X
    4e4a:	90 83       	st	Z, r25
            if(EchoON) printf("!1101\n\r");  
            break;                        
          }
          case '2'://Axis 2
          {                   
            for(k=0;k<10;k++)
    4e4c:	8f 5f       	subi	r24, 0xFF	; 255
    4e4e:	8a 30       	cpi	r24, 0x0A	; 10
    4e50:	90 f3       	brcs	.-28     	; 0x4e36 <__stack+0xe37>
    4e52:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4e56:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
            AxisPosition2=atol(temp);
    4e5a:	8b ef       	ldi	r24, 0xFB	; 251
    4e5c:	96 e2       	ldi	r25, 0x26	; 38
    4e5e:	0e 94 0f 40 	call	0x801e	; 0x801e <atol>
    4e62:	60 93 a8 27 	sts	0x27A8, r22	; 0x8027a8 <AxisPosition2>
    4e66:	70 93 a9 27 	sts	0x27A9, r23	; 0x8027a9 <AxisPosition2+0x1>
    4e6a:	80 93 aa 27 	sts	0x27AA, r24	; 0x8027aa <AxisPosition2+0x2>
    4e6e:	90 93 ab 27 	sts	0x27AB, r25	; 0x8027ab <AxisPosition2+0x3>
            if(EchoON) printf("!1102\n\r");  
    4e72:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4e76:	88 23       	and	r24, r24
    4e78:	11 f4       	brne	.+4      	; 0x4e7e <__stack+0xe7f>
    4e7a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4e7e:	84 ec       	ldi	r24, 0xC4	; 196
    4e80:	93 e2       	ldi	r25, 0x23	; 35
    4e82:	9f 93       	push	r25
    4e84:	8f 93       	push	r24
    4e86:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4e8a:	0f 90       	pop	r0
    4e8c:	0f 90       	pop	r0
    4e8e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            break;                        
          }
          case '3'://Axis 3
          {                   
            for(k=0;k<10;k++)
    4e92:	80 e0       	ldi	r24, 0x00	; 0
            {
              temp[k]=cmdTemp[k+5];
    4e94:	28 2f       	mov	r18, r24
    4e96:	30 e0       	ldi	r19, 0x00	; 0
    4e98:	f9 01       	movw	r30, r18
    4e9a:	e5 50       	subi	r30, 0x05	; 5
    4e9c:	f9 4d       	sbci	r31, 0xD9	; 217
    4e9e:	d9 01       	movw	r26, r18
    4ea0:	a0 5f       	subi	r26, 0xF0	; 240
    4ea2:	b8 4d       	sbci	r27, 0xD8	; 216
    4ea4:	15 96       	adiw	r26, 0x05	; 5
    4ea6:	9c 91       	ld	r25, X
    4ea8:	90 83       	st	Z, r25
            if(EchoON) printf("!1102\n\r");  
            break;                        
          }
          case '3'://Axis 3
          {                   
            for(k=0;k<10;k++)
    4eaa:	8f 5f       	subi	r24, 0xFF	; 255
    4eac:	8a 30       	cpi	r24, 0x0A	; 10
    4eae:	90 f3       	brcs	.-28     	; 0x4e94 <__stack+0xe95>
    4eb0:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
            {
              temp[k]=cmdTemp[k+5];
            }
            temp[10]=0;
    4eb4:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
            AxisPosition3=atol(temp);
    4eb8:	8b ef       	ldi	r24, 0xFB	; 251
    4eba:	96 e2       	ldi	r25, 0x26	; 38
    4ebc:	0e 94 0f 40 	call	0x801e	; 0x801e <atol>
    4ec0:	60 93 a4 27 	sts	0x27A4, r22	; 0x8027a4 <AxisPosition3>
    4ec4:	70 93 a5 27 	sts	0x27A5, r23	; 0x8027a5 <AxisPosition3+0x1>
    4ec8:	80 93 a6 27 	sts	0x27A6, r24	; 0x8027a6 <AxisPosition3+0x2>
    4ecc:	90 93 a7 27 	sts	0x27A7, r25	; 0x8027a7 <AxisPosition3+0x3>
            if(EchoON) printf("!1103\n\r");  
    4ed0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    4ed4:	88 23       	and	r24, r24
    4ed6:	11 f4       	brne	.+4      	; 0x4edc <__stack+0xedd>
    4ed8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4edc:	8c ec       	ldi	r24, 0xCC	; 204
    4ede:	93 e2       	ldi	r25, 0x23	; 35
    4ee0:	9f 93       	push	r25
    4ee2:	8f 93       	push	r24
    4ee4:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    4ee8:	0f 90       	pop	r0
    4eea:	0f 90       	pop	r0
    4eec:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
          }                                      
        }
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    4ef0:	43 e0       	ldi	r20, 0x03	; 3
    4ef2:	50 e0       	ldi	r21, 0x00	; 0
    4ef4:	64 ed       	ldi	r22, 0xD4	; 212
    4ef6:	73 e2       	ldi	r23, 0x23	; 35
    4ef8:	80 e1       	ldi	r24, 0x10	; 16
    4efa:	97 e2       	ldi	r25, 0x27	; 39
    4efc:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    4f00:	89 2b       	or	r24, r25
    4f02:	81 f5       	brne	.+96     	; 0x4f64 <__stack+0xf65>
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    4f04:	90 91 48 27 	lds	r25, 0x2748	; 0x802748 <AxisIsMoving1>
    4f08:	91 11       	cpse	r25, r1
    4f0a:	0c 94 a9 33 	jmp	0x6752	; 0x6752 <__stack+0x2753>
    4f0e:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4f12:	81 11       	cpse	r24, r1
    4f14:	0c 94 d3 33 	jmp	0x67a6	; 0x67a6 <__stack+0x27a7>
    4f18:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    4f1c:	21 e0       	ldi	r18, 0x01	; 1
    4f1e:	81 11       	cpse	r24, r1
    4f20:	01 c0       	rjmp	.+2      	; 0x4f24 <__stack+0xf25>
    4f22:	20 e0       	ldi	r18, 0x00	; 0
    4f24:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
    if (!ProgramRun)
    4f28:	20 91 bc 27 	lds	r18, 0x27BC	; 0x8027bc <ProgramRun>
    4f2c:	21 11       	cpse	r18, r1
    4f2e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
     {
     while (AxisMoving == 1) 
    4f32:	88 23       	and	r24, r24
    4f34:	11 f4       	brne	.+4      	; 0x4f3a <__stack+0xf3b>
    4f36:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    4f3a:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4f3e:	81 11       	cpse	r24, r1
    4f40:	07 c0       	rjmp	.+14     	; 0x4f50 <__stack+0xf51>
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    4f48:	21 11       	cpse	r18, r1
    4f4a:	03 c0       	rjmp	.+6      	; 0x4f52 <__stack+0xf53>
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	01 c0       	rjmp	.+2      	; 0x4f52 <__stack+0xf53>
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	28 2f       	mov	r18, r24
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4f54:	91 11       	cpse	r25, r1
    4f56:	fe cf       	rjmp	.-4      	; 0x4f54 <__stack+0xf55>
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    4f58:	21 11       	cpse	r18, r1
    4f5a:	fc cf       	rjmp	.-8      	; 0x4f54 <__stack+0xf55>
    4f5c:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    4f60:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }
         }
       }
     }
    }   
    else if(strncmp(cmdTemp,"#13",3)==0)
    4f64:	43 e0       	ldi	r20, 0x03	; 3
    4f66:	50 e0       	ldi	r21, 0x00	; 0
    4f68:	68 ed       	ldi	r22, 0xD8	; 216
    4f6a:	73 e2       	ldi	r23, 0x23	; 35
    4f6c:	80 e1       	ldi	r24, 0x10	; 16
    4f6e:	97 e2       	ldi	r25, 0x27	; 39
    4f70:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    4f74:	89 2b       	or	r24, r25
    4f76:	09 f0       	breq	.+2      	; 0x4f7a <__stack+0xf7b>
    4f78:	eb c0       	rjmp	.+470    	; 0x5150 <__stack+0x1151>
    {// Set Speed 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    4f7a:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    4f7e:	81 11       	cpse	r24, r1
    4f80:	0c 94 b3 33 	jmp	0x6766	; 0x6766 <__stack+0x2767>
    4f84:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    4f88:	81 11       	cpse	r24, r1
    4f8a:	0c 94 b3 33 	jmp	0x6766	; 0x6766 <__stack+0x2767>
    4f8e:	91 e0       	ldi	r25, 0x01	; 1
    4f90:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    4f94:	21 11       	cpse	r18, r1
    4f96:	01 c0       	rjmp	.+2      	; 0x4f9a <__stack+0xf9b>
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    4f9e:	21 e0       	ldi	r18, 0x01	; 1
    4fa0:	30 91 bc 27 	lds	r19, 0x27BC	; 0x8027bc <ProgramRun>
    4fa4:	31 11       	cpse	r19, r1
    4fa6:	20 e0       	ldi	r18, 0x00	; 0
    4fa8:	92 17       	cp	r25, r18
    4faa:	10 f0       	brcs	.+4      	; 0x4fb0 <__stack+0xfb1>
    4fac:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
     {
       if(cmdTemp[3]=='0')
    4fb0:	90 91 13 27 	lds	r25, 0x2713	; 0x802713 <cmdTemp+0x3>
    4fb4:	90 33       	cpi	r25, 0x30	; 48
    4fb6:	11 f0       	breq	.+4      	; 0x4fbc <__stack+0xfbd>
    4fb8:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         switch(cmdTemp[4])
    4fbc:	90 91 14 27 	lds	r25, 0x2714	; 0x802714 <cmdTemp+0x4>
    4fc0:	92 33       	cpi	r25, 0x32	; 50
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <__stack+0xfc7>
    4fc4:	49 c0       	rjmp	.+146    	; 0x5058 <__stack+0x1059>
    4fc6:	93 33       	cpi	r25, 0x33	; 51
    4fc8:	09 f4       	brne	.+2      	; 0x4fcc <__stack+0xfcd>
    4fca:	84 c0       	rjmp	.+264    	; 0x50d4 <__stack+0x10d5>
    4fcc:	91 33       	cpi	r25, 0x31	; 49
    4fce:	11 f0       	breq	.+4      	; 0x4fd4 <__stack+0xfd5>
    4fd0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    4fd4:	28 2f       	mov	r18, r24
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	f9 01       	movw	r30, r18
    4fda:	e5 50       	subi	r30, 0x05	; 5
    4fdc:	f9 4d       	sbci	r31, 0xD9	; 217
    4fde:	d9 01       	movw	r26, r18
    4fe0:	a0 5f       	subi	r26, 0xF0	; 240
    4fe2:	b8 4d       	sbci	r27, 0xD8	; 216
    4fe4:	15 96       	adiw	r26, 0x05	; 5
    4fe6:	9c 91       	ld	r25, X
    4fe8:	90 83       	st	Z, r25
       {
         switch(cmdTemp[4])
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
    4fea:	8f 5f       	subi	r24, 0xFF	; 255
    4fec:	8a 30       	cpi	r24, 0x0A	; 10
    4fee:	90 f3       	brcs	.-28     	; 0x4fd4 <__stack+0xfd5>
    4ff0:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    4ff4:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              SetSpeed1=atof(temp);  
    4ff8:	8b ef       	ldi	r24, 0xFB	; 251
    4ffa:	96 e2       	ldi	r25, 0x26	; 38
    4ffc:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    5000:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    5004:	60 93 79 27 	sts	0x2779, r22	; 0x802779 <SetSpeed1>
    5008:	70 93 7a 27 	sts	0x277A, r23	; 0x80277a <SetSpeed1+0x1>
    500c:	80 93 7b 27 	sts	0x277B, r24	; 0x80277b <SetSpeed1+0x2>
    5010:	90 93 7c 27 	sts	0x277C, r25	; 0x80277c <SetSpeed1+0x3>
              sprintf(BufferSend,"!1301\t%s\r\n",temp); 
    5014:	0f 2e       	mov	r0, r31
    5016:	fb ef       	ldi	r31, 0xFB	; 251
    5018:	cf 2e       	mov	r12, r31
    501a:	f6 e2       	ldi	r31, 0x26	; 38
    501c:	df 2e       	mov	r13, r31
    501e:	f0 2d       	mov	r31, r0
    5020:	df 92       	push	r13
    5022:	cf 92       	push	r12
    5024:	8c ed       	ldi	r24, 0xDC	; 220
    5026:	93 e2       	ldi	r25, 0x23	; 35
    5028:	9f 93       	push	r25
    502a:	8f 93       	push	r24
    502c:	87 e5       	ldi	r24, 0x57	; 87
    502e:	99 e2       	ldi	r25, 0x29	; 41
    5030:	9f 93       	push	r25
    5032:	8f 93       	push	r24
    5034:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1; 
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    503e:	e0 ea       	ldi	r30, 0xA0	; 160
    5040:	f6 e0       	ldi	r31, 0x06	; 6
    5042:	84 81       	ldd	r24, Z+4	; 0x04
    5044:	81 60       	ori	r24, 0x01	; 1
    5046:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5048:	0f 90       	pop	r0
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	0f 90       	pop	r0
    5050:	0f 90       	pop	r0
    5052:	0f 90       	pop	r0
    5054:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }
            case '2': //Axis 2
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5058:	28 2f       	mov	r18, r24
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	f9 01       	movw	r30, r18
    505e:	e5 50       	subi	r30, 0x05	; 5
    5060:	f9 4d       	sbci	r31, 0xD9	; 217
    5062:	d9 01       	movw	r26, r18
    5064:	a0 5f       	subi	r26, 0xF0	; 240
    5066:	b8 4d       	sbci	r27, 0xD8	; 216
    5068:	15 96       	adiw	r26, 0x05	; 5
    506a:	9c 91       	ld	r25, X
    506c:	90 83       	st	Z, r25
              SetDataReady;
              break; 
            }
            case '2': //Axis 2
            {
              for(k=0;k<10;k++)
    506e:	8f 5f       	subi	r24, 0xFF	; 255
    5070:	8a 30       	cpi	r24, 0x0A	; 10
    5072:	90 f3       	brcs	.-28     	; 0x5058 <__stack+0x1059>
    5074:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5078:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              SetSpeed2=atof(temp);   
    507c:	8b ef       	ldi	r24, 0xFB	; 251
    507e:	96 e2       	ldi	r25, 0x26	; 38
    5080:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    5084:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    5088:	60 93 75 27 	sts	0x2775, r22	; 0x802775 <SetSpeed2>
    508c:	70 93 76 27 	sts	0x2776, r23	; 0x802776 <SetSpeed2+0x1>
    5090:	80 93 77 27 	sts	0x2777, r24	; 0x802777 <SetSpeed2+0x2>
    5094:	90 93 78 27 	sts	0x2778, r25	; 0x802778 <SetSpeed2+0x3>
              sprintf(BufferSend,"!1302\t%s\r\n",temp); 
    5098:	0b ef       	ldi	r16, 0xFB	; 251
    509a:	16 e2       	ldi	r17, 0x26	; 38
    509c:	1f 93       	push	r17
    509e:	0f 93       	push	r16
    50a0:	87 ee       	ldi	r24, 0xE7	; 231
    50a2:	93 e2       	ldi	r25, 0x23	; 35
    50a4:	9f 93       	push	r25
    50a6:	8f 93       	push	r24
    50a8:	87 e5       	ldi	r24, 0x57	; 87
    50aa:	99 e2       	ldi	r25, 0x29	; 41
    50ac:	9f 93       	push	r25
    50ae:	8f 93       	push	r24
    50b0:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1;
    50b4:	81 e0       	ldi	r24, 0x01	; 1
    50b6:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    50ba:	e0 ea       	ldi	r30, 0xA0	; 160
    50bc:	f6 e0       	ldi	r31, 0x06	; 6
    50be:	84 81       	ldd	r24, Z+4	; 0x04
    50c0:	81 60       	ori	r24, 0x01	; 1
    50c2:	84 83       	std	Z+4, r24	; 0x04
              break; 
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	0f 90       	pop	r0
    50ca:	0f 90       	pop	r0
    50cc:	0f 90       	pop	r0
    50ce:	0f 90       	pop	r0
    50d0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    50d4:	28 2f       	mov	r18, r24
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	f9 01       	movw	r30, r18
    50da:	e5 50       	subi	r30, 0x05	; 5
    50dc:	f9 4d       	sbci	r31, 0xD9	; 217
    50de:	d9 01       	movw	r26, r18
    50e0:	a0 5f       	subi	r26, 0xF0	; 240
    50e2:	b8 4d       	sbci	r27, 0xD8	; 216
    50e4:	15 96       	adiw	r26, 0x05	; 5
    50e6:	9c 91       	ld	r25, X
    50e8:	90 83       	st	Z, r25
              SetDataReady;
              break; 
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
    50ea:	8f 5f       	subi	r24, 0xFF	; 255
    50ec:	8a 30       	cpi	r24, 0x0A	; 10
    50ee:	90 f3       	brcs	.-28     	; 0x50d4 <__stack+0x10d5>
    50f0:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    50f4:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              SetSpeed3=atof(temp);   
    50f8:	8b ef       	ldi	r24, 0xFB	; 251
    50fa:	96 e2       	ldi	r25, 0x26	; 38
    50fc:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    5100:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    5104:	60 93 71 27 	sts	0x2771, r22	; 0x802771 <SetSpeed3>
    5108:	70 93 72 27 	sts	0x2772, r23	; 0x802772 <SetSpeed3+0x1>
    510c:	80 93 73 27 	sts	0x2773, r24	; 0x802773 <SetSpeed3+0x2>
    5110:	90 93 74 27 	sts	0x2774, r25	; 0x802774 <SetSpeed3+0x3>
              sprintf(BufferSend,"!1303\t%s\r\n",temp); 
    5114:	4b ef       	ldi	r20, 0xFB	; 251
    5116:	56 e2       	ldi	r21, 0x26	; 38
    5118:	5f 93       	push	r21
    511a:	4f 93       	push	r20
    511c:	82 ef       	ldi	r24, 0xF2	; 242
    511e:	93 e2       	ldi	r25, 0x23	; 35
    5120:	9f 93       	push	r25
    5122:	8f 93       	push	r24
    5124:	87 e5       	ldi	r24, 0x57	; 87
    5126:	99 e2       	ldi	r25, 0x29	; 41
    5128:	9f 93       	push	r25
    512a:	8f 93       	push	r24
    512c:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1;
    5130:	81 e0       	ldi	r24, 0x01	; 1
    5132:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5136:	e0 ea       	ldi	r30, 0xA0	; 160
    5138:	f6 e0       	ldi	r31, 0x06	; 6
    513a:	84 81       	ldd	r24, Z+4	; 0x04
    513c:	81 60       	ori	r24, 0x01	; 1
    513e:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5140:	0f 90       	pop	r0
    5142:	0f 90       	pop	r0
    5144:	0f 90       	pop	r0
    5146:	0f 90       	pop	r0
    5148:	0f 90       	pop	r0
    514a:	0f 90       	pop	r0
    514c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }            
         }
       }
     }
    }
    else if(strncmp(cmdTemp,"?14",3)==0)
    5150:	43 e0       	ldi	r20, 0x03	; 3
    5152:	50 e0       	ldi	r21, 0x00	; 0
    5154:	6d ef       	ldi	r22, 0xFD	; 253
    5156:	73 e2       	ldi	r23, 0x23	; 35
    5158:	80 e1       	ldi	r24, 0x10	; 16
    515a:	97 e2       	ldi	r25, 0x27	; 39
    515c:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5160:	89 2b       	or	r24, r25
    5162:	09 f0       	breq	.+2      	; 0x5166 <__stack+0x1167>
    5164:	52 c0       	rjmp	.+164    	; 0x520a <__stack+0x120b>
    {//AxisIsMoving
       if(cmdTemp[3]=='0')
    5166:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    516a:	80 33       	cpi	r24, 0x30	; 48
    516c:	11 f0       	breq	.+4      	; 0x5172 <__stack+0x1173>
    516e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         switch(cmdTemp[4])
    5172:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    5176:	82 33       	cpi	r24, 0x32	; 50
    5178:	e1 f0       	breq	.+56     	; 0x51b2 <__stack+0x11b3>
    517a:	83 33       	cpi	r24, 0x33	; 51
    517c:	81 f1       	breq	.+96     	; 0x51de <__stack+0x11df>
    517e:	81 33       	cpi	r24, 0x31	; 49
    5180:	11 f0       	breq	.+4      	; 0x5186 <__stack+0x1187>
    5182:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         {
            case '1': //Axis 1
            {
              if(EchoON) printf("!1401\t%u\n\r",AxisIsMoving1);                      
    5186:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    518a:	88 23       	and	r24, r24
    518c:	11 f4       	brne	.+4      	; 0x5192 <__stack+0x1193>
    518e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    5192:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    5196:	1f 92       	push	r1
    5198:	8f 93       	push	r24
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	94 e2       	ldi	r25, 0x24	; 36
    519e:	9f 93       	push	r25
    51a0:	8f 93       	push	r24
    51a2:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    51a6:	0f 90       	pop	r0
    51a8:	0f 90       	pop	r0
    51aa:	0f 90       	pop	r0
    51ac:	0f 90       	pop	r0
    51ae:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
              break; 
            }
            case '2': //Axis 2
            {
              if(EchoON) printf("!1402\t%u\n\r",AxisIsMoving2);
    51b2:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    51b6:	88 23       	and	r24, r24
    51b8:	11 f4       	brne	.+4      	; 0x51be <__stack+0x11bf>
    51ba:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    51be:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    51c2:	1f 92       	push	r1
    51c4:	8f 93       	push	r24
    51c6:	8c e0       	ldi	r24, 0x0C	; 12
    51c8:	94 e2       	ldi	r25, 0x24	; 36
    51ca:	9f 93       	push	r25
    51cc:	8f 93       	push	r24
    51ce:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    51d2:	0f 90       	pop	r0
    51d4:	0f 90       	pop	r0
    51d6:	0f 90       	pop	r0
    51d8:	0f 90       	pop	r0
    51da:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
              break; 
            }
            case '3': //Axis 3
            {
              if(EchoON) printf("!1403\t%u\n\r",AxisIsMoving3);
    51de:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    51e2:	88 23       	and	r24, r24
    51e4:	11 f4       	brne	.+4      	; 0x51ea <__stack+0x11eb>
    51e6:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    51ea:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    51ee:	1f 92       	push	r1
    51f0:	8f 93       	push	r24
    51f2:	87 e1       	ldi	r24, 0x17	; 23
    51f4:	94 e2       	ldi	r25, 0x24	; 36
    51f6:	9f 93       	push	r25
    51f8:	8f 93       	push	r24
    51fa:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    51fe:	0f 90       	pop	r0
    5200:	0f 90       	pop	r0
    5202:	0f 90       	pop	r0
    5204:	0f 90       	pop	r0
    5206:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
              break; 
            }            
         }
       }
    }
    else if(strncmp(cmdTemp,"?15",3)==0)
    520a:	43 e0       	ldi	r20, 0x03	; 3
    520c:	50 e0       	ldi	r21, 0x00	; 0
    520e:	62 e2       	ldi	r22, 0x22	; 34
    5210:	74 e2       	ldi	r23, 0x24	; 36
    5212:	80 e1       	ldi	r24, 0x10	; 16
    5214:	97 e2       	ldi	r25, 0x27	; 39
    5216:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    521a:	89 2b       	or	r24, r25
    521c:	09 f0       	breq	.+2      	; 0x5220 <__stack+0x1221>
    521e:	71 c0       	rjmp	.+226    	; 0x5302 <__stack+0x1303>
    {//Read Axis Speed
       if(cmdTemp[3]=='0')
    5220:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <cmdTemp+0x3>
    5224:	80 33       	cpi	r24, 0x30	; 48
    5226:	11 f0       	breq	.+4      	; 0x522c <__stack+0x122d>
    5228:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         switch(cmdTemp[4])
    522c:	80 91 14 27 	lds	r24, 0x2714	; 0x802714 <cmdTemp+0x4>
    5230:	82 33       	cpi	r24, 0x32	; 50
    5232:	39 f1       	breq	.+78     	; 0x5282 <__stack+0x1283>
    5234:	83 33       	cpi	r24, 0x33	; 51
    5236:	09 f4       	brne	.+2      	; 0x523a <__stack+0x123b>
    5238:	44 c0       	rjmp	.+136    	; 0x52c2 <__stack+0x12c3>
    523a:	81 33       	cpi	r24, 0x31	; 49
    523c:	11 f0       	breq	.+4      	; 0x5242 <__stack+0x1243>
    523e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         {
            case '1': //Axis 1
            {
              if(EchoON) printf("!1501\t%u",SetSpeed1);                      
    5242:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    5246:	88 23       	and	r24, r24
    5248:	11 f4       	brne	.+4      	; 0x524e <__stack+0x124f>
    524a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    524e:	80 91 7c 27 	lds	r24, 0x277C	; 0x80277c <SetSpeed1+0x3>
    5252:	8f 93       	push	r24
    5254:	80 91 7b 27 	lds	r24, 0x277B	; 0x80277b <SetSpeed1+0x2>
    5258:	8f 93       	push	r24
    525a:	80 91 7a 27 	lds	r24, 0x277A	; 0x80277a <SetSpeed1+0x1>
    525e:	8f 93       	push	r24
    5260:	80 91 79 27 	lds	r24, 0x2779	; 0x802779 <SetSpeed1>
    5264:	8f 93       	push	r24
    5266:	86 e2       	ldi	r24, 0x26	; 38
    5268:	94 e2       	ldi	r25, 0x24	; 36
    526a:	9f 93       	push	r25
    526c:	8f 93       	push	r24
    526e:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    5272:	0f 90       	pop	r0
    5274:	0f 90       	pop	r0
    5276:	0f 90       	pop	r0
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
    527c:	0f 90       	pop	r0
    527e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
              break; 
            }
            case '2': //Axis 2
            {
              if(EchoON) printf("!1502\t%u",SetSpeed2);
    5282:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    5286:	88 23       	and	r24, r24
    5288:	11 f4       	brne	.+4      	; 0x528e <__stack+0x128f>
    528a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    528e:	80 91 78 27 	lds	r24, 0x2778	; 0x802778 <SetSpeed2+0x3>
    5292:	8f 93       	push	r24
    5294:	80 91 77 27 	lds	r24, 0x2777	; 0x802777 <SetSpeed2+0x2>
    5298:	8f 93       	push	r24
    529a:	80 91 76 27 	lds	r24, 0x2776	; 0x802776 <SetSpeed2+0x1>
    529e:	8f 93       	push	r24
    52a0:	80 91 75 27 	lds	r24, 0x2775	; 0x802775 <SetSpeed2>
    52a4:	8f 93       	push	r24
    52a6:	8f e2       	ldi	r24, 0x2F	; 47
    52a8:	94 e2       	ldi	r25, 0x24	; 36
    52aa:	9f 93       	push	r25
    52ac:	8f 93       	push	r24
    52ae:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    52b2:	0f 90       	pop	r0
    52b4:	0f 90       	pop	r0
    52b6:	0f 90       	pop	r0
    52b8:	0f 90       	pop	r0
    52ba:	0f 90       	pop	r0
    52bc:	0f 90       	pop	r0
    52be:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
              break; 
            }
            case '3': //Axis 3
            {
              if(EchoON) printf("!1503\t%u",SetSpeed3);
    52c2:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <EchoON>
    52c6:	88 23       	and	r24, r24
    52c8:	11 f4       	brne	.+4      	; 0x52ce <__stack+0x12cf>
    52ca:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
    52ce:	80 91 74 27 	lds	r24, 0x2774	; 0x802774 <SetSpeed3+0x3>
    52d2:	8f 93       	push	r24
    52d4:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <SetSpeed3+0x2>
    52d8:	8f 93       	push	r24
    52da:	80 91 72 27 	lds	r24, 0x2772	; 0x802772 <SetSpeed3+0x1>
    52de:	8f 93       	push	r24
    52e0:	80 91 71 27 	lds	r24, 0x2771	; 0x802771 <SetSpeed3>
    52e4:	8f 93       	push	r24
    52e6:	88 e3       	ldi	r24, 0x38	; 56
    52e8:	94 e2       	ldi	r25, 0x24	; 36
    52ea:	9f 93       	push	r25
    52ec:	8f 93       	push	r24
    52ee:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    52f2:	0f 90       	pop	r0
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	0f 90       	pop	r0
    52fa:	0f 90       	pop	r0
    52fc:	0f 90       	pop	r0
    52fe:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
              break; 
            }            
         }
       }
    }
    else if(strncmp(cmdTemp,"#16",3)==0)
    5302:	43 e0       	ldi	r20, 0x03	; 3
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	61 e4       	ldi	r22, 0x41	; 65
    5308:	74 e2       	ldi	r23, 0x24	; 36
    530a:	80 e1       	ldi	r24, 0x10	; 16
    530c:	97 e2       	ldi	r25, 0x27	; 39
    530e:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5312:	89 2b       	or	r24, r25
    5314:	09 f0       	breq	.+2      	; 0x5318 <__stack+0x1319>
    5316:	ef c0       	rjmp	.+478    	; 0x54f6 <__stack+0x14f7>
    {// Set ACC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5318:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    531c:	81 11       	cpse	r24, r1
    531e:	0c 94 b7 33 	jmp	0x676e	; 0x676e <__stack+0x276f>
    5322:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    5326:	81 11       	cpse	r24, r1
    5328:	0c 94 b7 33 	jmp	0x676e	; 0x676e <__stack+0x276f>
    532c:	91 e0       	ldi	r25, 0x01	; 1
    532e:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <AxisIsMoving3>
    5332:	21 11       	cpse	r18, r1
    5334:	01 c0       	rjmp	.+2      	; 0x5338 <__stack+0x1339>
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    533c:	21 e0       	ldi	r18, 0x01	; 1
    533e:	30 91 bc 27 	lds	r19, 0x27BC	; 0x8027bc <ProgramRun>
    5342:	31 11       	cpse	r19, r1
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	92 17       	cp	r25, r18
    5348:	10 f0       	brcs	.+4      	; 0x534e <__stack+0x134f>
    534a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
     {
      if(cmdTemp[3]=='0')
    534e:	90 91 13 27 	lds	r25, 0x2713	; 0x802713 <cmdTemp+0x3>
    5352:	90 33       	cpi	r25, 0x30	; 48
    5354:	11 f0       	breq	.+4      	; 0x535a <__stack+0x135b>
    5356:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         switch(cmdTemp[4])
    535a:	90 91 14 27 	lds	r25, 0x2714	; 0x802714 <cmdTemp+0x4>
    535e:	92 33       	cpi	r25, 0x32	; 50
    5360:	09 f4       	brne	.+2      	; 0x5364 <__stack+0x1365>
    5362:	45 c0       	rjmp	.+138    	; 0x53ee <__stack+0x13ef>
    5364:	93 33       	cpi	r25, 0x33	; 51
    5366:	09 f4       	brne	.+2      	; 0x536a <__stack+0x136b>
    5368:	84 c0       	rjmp	.+264    	; 0x5472 <__stack+0x1473>
    536a:	91 33       	cpi	r25, 0x31	; 49
    536c:	11 f0       	breq	.+4      	; 0x5372 <__stack+0x1373>
    536e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5372:	28 2f       	mov	r18, r24
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	f9 01       	movw	r30, r18
    5378:	e5 50       	subi	r30, 0x05	; 5
    537a:	f9 4d       	sbci	r31, 0xD9	; 217
    537c:	d9 01       	movw	r26, r18
    537e:	a0 5f       	subi	r26, 0xF0	; 240
    5380:	b8 4d       	sbci	r27, 0xD8	; 216
    5382:	15 96       	adiw	r26, 0x05	; 5
    5384:	9c 91       	ld	r25, X
    5386:	90 83       	st	Z, r25
       {
         switch(cmdTemp[4])
         {
            case '1': //Axis 1
            {
              for(k=0;k<10;k++)
    5388:	8f 5f       	subi	r24, 0xFF	; 255
    538a:	8a 30       	cpi	r24, 0x0A	; 10
    538c:	90 f3       	brcs	.-28     	; 0x5372 <__stack+0x1373>
    538e:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5392:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              ACC1=atof(temp);  
    5396:	8b ef       	ldi	r24, 0xFB	; 251
    5398:	96 e2       	ldi	r25, 0x26	; 38
    539a:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    539e:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    53a2:	60 93 69 27 	sts	0x2769, r22	; 0x802769 <ACC1>
    53a6:	70 93 6a 27 	sts	0x276A, r23	; 0x80276a <ACC1+0x1>
    53aa:	80 93 6b 27 	sts	0x276B, r24	; 0x80276b <ACC1+0x2>
    53ae:	90 93 6c 27 	sts	0x276C, r25	; 0x80276c <ACC1+0x3>
              sprintf(BufferSend,"!1601\t%s\r\n",temp); 
    53b2:	ab ef       	ldi	r26, 0xFB	; 251
    53b4:	b6 e2       	ldi	r27, 0x26	; 38
    53b6:	bf 93       	push	r27
    53b8:	af 93       	push	r26
    53ba:	85 e4       	ldi	r24, 0x45	; 69
    53bc:	94 e2       	ldi	r25, 0x24	; 36
    53be:	9f 93       	push	r25
    53c0:	8f 93       	push	r24
    53c2:	87 e5       	ldi	r24, 0x57	; 87
    53c4:	99 e2       	ldi	r25, 0x29	; 41
    53c6:	9f 93       	push	r25
    53c8:	8f 93       	push	r24
    53ca:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1;    
    53ce:	81 e0       	ldi	r24, 0x01	; 1
    53d0:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    53d4:	e0 ea       	ldi	r30, 0xA0	; 160
    53d6:	f6 e0       	ldi	r31, 0x06	; 6
    53d8:	84 81       	ldd	r24, Z+4	; 0x04
    53da:	81 60       	ori	r24, 0x01	; 1
    53dc:	84 83       	std	Z+4, r24	; 0x04
              break; 
    53de:	0f 90       	pop	r0
    53e0:	0f 90       	pop	r0
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	0f 90       	pop	r0
    53e8:	0f 90       	pop	r0
    53ea:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }
            case '2': //Axis 2
            { 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    53ee:	28 2f       	mov	r18, r24
    53f0:	30 e0       	ldi	r19, 0x00	; 0
    53f2:	f9 01       	movw	r30, r18
    53f4:	e5 50       	subi	r30, 0x05	; 5
    53f6:	f9 4d       	sbci	r31, 0xD9	; 217
    53f8:	d9 01       	movw	r26, r18
    53fa:	a0 5f       	subi	r26, 0xF0	; 240
    53fc:	b8 4d       	sbci	r27, 0xD8	; 216
    53fe:	15 96       	adiw	r26, 0x05	; 5
    5400:	9c 91       	ld	r25, X
    5402:	90 83       	st	Z, r25
              SetDataReady;
              break; 
            }
            case '2': //Axis 2
            { 
              for(k=0;k<10;k++)
    5404:	8f 5f       	subi	r24, 0xFF	; 255
    5406:	8a 30       	cpi	r24, 0x0A	; 10
    5408:	90 f3       	brcs	.-28     	; 0x53ee <__stack+0x13ef>
    540a:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    540e:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              ACC2=atof(temp);   
    5412:	8b ef       	ldi	r24, 0xFB	; 251
    5414:	96 e2       	ldi	r25, 0x26	; 38
    5416:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    541a:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    541e:	60 93 65 27 	sts	0x2765, r22	; 0x802765 <ACC2>
    5422:	70 93 66 27 	sts	0x2766, r23	; 0x802766 <ACC2+0x1>
    5426:	80 93 67 27 	sts	0x2767, r24	; 0x802767 <ACC2+0x2>
    542a:	90 93 68 27 	sts	0x2768, r25	; 0x802768 <ACC2+0x3>
              sprintf(BufferSend,"!1602\t%s\r\n",temp); 
    542e:	0f 2e       	mov	r0, r31
    5430:	fb ef       	ldi	r31, 0xFB	; 251
    5432:	af 2e       	mov	r10, r31
    5434:	f6 e2       	ldi	r31, 0x26	; 38
    5436:	bf 2e       	mov	r11, r31
    5438:	f0 2d       	mov	r31, r0
    543a:	bf 92       	push	r11
    543c:	af 92       	push	r10
    543e:	80 e5       	ldi	r24, 0x50	; 80
    5440:	94 e2       	ldi	r25, 0x24	; 36
    5442:	9f 93       	push	r25
    5444:	8f 93       	push	r24
    5446:	87 e5       	ldi	r24, 0x57	; 87
    5448:	99 e2       	ldi	r25, 0x29	; 41
    544a:	9f 93       	push	r25
    544c:	8f 93       	push	r24
    544e:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1;  
    5452:	81 e0       	ldi	r24, 0x01	; 1
    5454:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5458:	e0 ea       	ldi	r30, 0xA0	; 160
    545a:	f6 e0       	ldi	r31, 0x06	; 6
    545c:	84 81       	ldd	r24, Z+4	; 0x04
    545e:	81 60       	ori	r24, 0x01	; 1
    5460:	84 83       	std	Z+4, r24	; 0x04
              break; 
    5462:	0f 90       	pop	r0
    5464:	0f 90       	pop	r0
    5466:	0f 90       	pop	r0
    5468:	0f 90       	pop	r0
    546a:	0f 90       	pop	r0
    546c:	0f 90       	pop	r0
    546e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5472:	28 2f       	mov	r18, r24
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	f9 01       	movw	r30, r18
    5478:	e5 50       	subi	r30, 0x05	; 5
    547a:	f9 4d       	sbci	r31, 0xD9	; 217
    547c:	d9 01       	movw	r26, r18
    547e:	a0 5f       	subi	r26, 0xF0	; 240
    5480:	b8 4d       	sbci	r27, 0xD8	; 216
    5482:	15 96       	adiw	r26, 0x05	; 5
    5484:	9c 91       	ld	r25, X
    5486:	90 83       	st	Z, r25
              SetDataReady;
              break; 
            }
            case '3': //Axis 3
            {
              for(k=0;k<10;k++)
    5488:	8f 5f       	subi	r24, 0xFF	; 255
    548a:	8a 30       	cpi	r24, 0x0A	; 10
    548c:	90 f3       	brcs	.-28     	; 0x5472 <__stack+0x1473>
    548e:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5492:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              ACC3=atof(temp);   
    5496:	8b ef       	ldi	r24, 0xFB	; 251
    5498:	96 e2       	ldi	r25, 0x26	; 38
    549a:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    549e:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    54a2:	60 93 61 27 	sts	0x2761, r22	; 0x802761 <ACC3>
    54a6:	70 93 62 27 	sts	0x2762, r23	; 0x802762 <ACC3+0x1>
    54aa:	80 93 63 27 	sts	0x2763, r24	; 0x802763 <ACC3+0x2>
    54ae:	90 93 64 27 	sts	0x2764, r25	; 0x802764 <ACC3+0x3>
              sprintf(BufferSend,"!1603\t%s\r\n",temp); 
    54b2:	0f 2e       	mov	r0, r31
    54b4:	fb ef       	ldi	r31, 0xFB	; 251
    54b6:	ef 2e       	mov	r14, r31
    54b8:	f6 e2       	ldi	r31, 0x26	; 38
    54ba:	ff 2e       	mov	r15, r31
    54bc:	f0 2d       	mov	r31, r0
    54be:	ff 92       	push	r15
    54c0:	ef 92       	push	r14
    54c2:	8b e5       	ldi	r24, 0x5B	; 91
    54c4:	94 e2       	ldi	r25, 0x24	; 36
    54c6:	9f 93       	push	r25
    54c8:	8f 93       	push	r24
    54ca:	87 e5       	ldi	r24, 0x57	; 87
    54cc:	99 e2       	ldi	r25, 0x29	; 41
    54ce:	9f 93       	push	r25
    54d0:	8f 93       	push	r24
    54d2:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1;
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    54dc:	e0 ea       	ldi	r30, 0xA0	; 160
    54de:	f6 e0       	ldi	r31, 0x06	; 6
    54e0:	84 81       	ldd	r24, Z+4	; 0x04
    54e2:	81 60       	ori	r24, 0x01	; 1
    54e4:	84 83       	std	Z+4, r24	; 0x04
              break; 
    54e6:	0f 90       	pop	r0
    54e8:	0f 90       	pop	r0
    54ea:	0f 90       	pop	r0
    54ec:	0f 90       	pop	r0
    54ee:	0f 90       	pop	r0
    54f0:	0f 90       	pop	r0
    54f2:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            
         }
       }          
      }
    }
    else if(strncmp(cmdTemp,"#17",3)==0)
    54f6:	43 e0       	ldi	r20, 0x03	; 3
    54f8:	50 e0       	ldi	r21, 0x00	; 0
    54fa:	66 e6       	ldi	r22, 0x66	; 102
    54fc:	74 e2       	ldi	r23, 0x24	; 36
    54fe:	80 e1       	ldi	r24, 0x10	; 16
    5500:	97 e2       	ldi	r25, 0x27	; 39
    5502:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5506:	89 2b       	or	r24, r25
    5508:	09 f0       	breq	.+2      	; 0x550c <__stack+0x150d>
    550a:	ee c0       	rjmp	.+476    	; 0x56e8 <__stack+0x16e9>
    {// Set DEC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    550c:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    5510:	81 11       	cpse	r24, r1
    5512:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__stack+0x2777>
    5516:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    551a:	81 11       	cpse	r24, r1
    551c:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__stack+0x2777>
    5520:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    5524:	21 e0       	ldi	r18, 0x01	; 1
    5526:	91 11       	cpse	r25, r1
    5528:	01 c0       	rjmp	.+2      	; 0x552c <__stack+0x152d>
    552a:	20 e0       	ldi	r18, 0x00	; 0
    552c:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
     if (!ProgramRun & !AxisMoving)
    5530:	31 e0       	ldi	r19, 0x01	; 1
    5532:	40 91 bc 27 	lds	r20, 0x27BC	; 0x8027bc <ProgramRun>
    5536:	41 11       	cpse	r20, r1
    5538:	30 e0       	ldi	r19, 0x00	; 0
    553a:	23 17       	cp	r18, r19
    553c:	10 f0       	brcs	.+4      	; 0x5542 <__stack+0x1543>
    553e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
     {     
       if(cmdTemp[3]=='0')
    5542:	20 91 13 27 	lds	r18, 0x2713	; 0x802713 <cmdTemp+0x3>
    5546:	20 33       	cpi	r18, 0x30	; 48
    5548:	11 f0       	breq	.+4      	; 0x554e <__stack+0x154f>
    554a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
       {
         switch(cmdTemp[4])
    554e:	20 91 14 27 	lds	r18, 0x2714	; 0x802714 <cmdTemp+0x4>
    5552:	22 33       	cpi	r18, 0x32	; 50
    5554:	09 f4       	brne	.+2      	; 0x5558 <__stack+0x1559>
    5556:	45 c0       	rjmp	.+138    	; 0x55e2 <__stack+0x15e3>
    5558:	23 33       	cpi	r18, 0x33	; 51
    555a:	09 f4       	brne	.+2      	; 0x555e <__stack+0x155f>
    555c:	80 c0       	rjmp	.+256    	; 0x565e <__stack+0x165f>
    555e:	21 33       	cpi	r18, 0x31	; 49
    5560:	11 f0       	breq	.+4      	; 0x5566 <__stack+0x1567>
    5562:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5566:	28 2f       	mov	r18, r24
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	f9 01       	movw	r30, r18
    556c:	e5 50       	subi	r30, 0x05	; 5
    556e:	f9 4d       	sbci	r31, 0xD9	; 217
    5570:	d9 01       	movw	r26, r18
    5572:	a0 5f       	subi	r26, 0xF0	; 240
    5574:	b8 4d       	sbci	r27, 0xD8	; 216
    5576:	15 96       	adiw	r26, 0x05	; 5
    5578:	9c 91       	ld	r25, X
    557a:	90 83       	st	Z, r25
            {
              while(AxisIsMoving1)
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
    557c:	8f 5f       	subi	r24, 0xFF	; 255
    557e:	8a 30       	cpi	r24, 0x0A	; 10
    5580:	90 f3       	brcs	.-28     	; 0x5566 <__stack+0x1567>
    5582:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5586:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              DEC1=atof(temp);  
    558a:	8b ef       	ldi	r24, 0xFB	; 251
    558c:	96 e2       	ldi	r25, 0x26	; 38
    558e:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    5592:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    5596:	60 93 5d 27 	sts	0x275D, r22	; 0x80275d <DEC1>
    559a:	70 93 5e 27 	sts	0x275E, r23	; 0x80275e <DEC1+0x1>
    559e:	80 93 5f 27 	sts	0x275F, r24	; 0x80275f <DEC1+0x2>
    55a2:	90 93 60 27 	sts	0x2760, r25	; 0x802760 <DEC1+0x3>
              sprintf(BufferSend,"!1701\t%s\r\n",temp); 
    55a6:	2b ef       	ldi	r18, 0xFB	; 251
    55a8:	36 e2       	ldi	r19, 0x26	; 38
    55aa:	3f 93       	push	r19
    55ac:	2f 93       	push	r18
    55ae:	8a e6       	ldi	r24, 0x6A	; 106
    55b0:	94 e2       	ldi	r25, 0x24	; 36
    55b2:	9f 93       	push	r25
    55b4:	8f 93       	push	r24
    55b6:	87 e5       	ldi	r24, 0x57	; 87
    55b8:	99 e2       	ldi	r25, 0x29	; 41
    55ba:	9f 93       	push	r25
    55bc:	8f 93       	push	r24
    55be:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1;  
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    55c8:	e0 ea       	ldi	r30, 0xA0	; 160
    55ca:	f6 e0       	ldi	r31, 0x06	; 6
    55cc:	84 81       	ldd	r24, Z+4	; 0x04
    55ce:	81 60       	ori	r24, 0x01	; 1
    55d0:	84 83       	std	Z+4, r24	; 0x04
              break; 
    55d2:	0f 90       	pop	r0
    55d4:	0f 90       	pop	r0
    55d6:	0f 90       	pop	r0
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	0f 90       	pop	r0
    55de:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
              {
                 /*wait until Is Moving*/
              }
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    55e2:	28 2f       	mov	r18, r24
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	f9 01       	movw	r30, r18
    55e8:	e5 50       	subi	r30, 0x05	; 5
    55ea:	f9 4d       	sbci	r31, 0xD9	; 217
    55ec:	d9 01       	movw	r26, r18
    55ee:	a0 5f       	subi	r26, 0xF0	; 240
    55f0:	b8 4d       	sbci	r27, 0xD8	; 216
    55f2:	15 96       	adiw	r26, 0x05	; 5
    55f4:	9c 91       	ld	r25, X
    55f6:	90 83       	st	Z, r25
            {
              while(AxisIsMoving2)
              {
                 /*wait until Is Moving*/
              }
              for(k=0;k<10;k++)
    55f8:	8f 5f       	subi	r24, 0xFF	; 255
    55fa:	8a 30       	cpi	r24, 0x0A	; 10
    55fc:	90 f3       	brcs	.-28     	; 0x55e2 <__stack+0x15e3>
    55fe:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5602:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              DEC2=atof(temp);  
    5606:	8b ef       	ldi	r24, 0xFB	; 251
    5608:	96 e2       	ldi	r25, 0x26	; 38
    560a:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    560e:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    5612:	60 93 59 27 	sts	0x2759, r22	; 0x802759 <DEC2>
    5616:	70 93 5a 27 	sts	0x275A, r23	; 0x80275a <DEC2+0x1>
    561a:	80 93 5b 27 	sts	0x275B, r24	; 0x80275b <DEC2+0x2>
    561e:	90 93 5c 27 	sts	0x275C, r25	; 0x80275c <DEC2+0x3>
              sprintf(BufferSend,"!1702\t%s\r\n",temp); 
    5622:	8b ef       	ldi	r24, 0xFB	; 251
    5624:	96 e2       	ldi	r25, 0x26	; 38
    5626:	9f 93       	push	r25
    5628:	8f 93       	push	r24
    562a:	85 e7       	ldi	r24, 0x75	; 117
    562c:	94 e2       	ldi	r25, 0x24	; 36
    562e:	9f 93       	push	r25
    5630:	8f 93       	push	r24
    5632:	87 e5       	ldi	r24, 0x57	; 87
    5634:	99 e2       	ldi	r25, 0x29	; 41
    5636:	9f 93       	push	r25
    5638:	8f 93       	push	r24
    563a:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1;
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    5644:	e0 ea       	ldi	r30, 0xA0	; 160
    5646:	f6 e0       	ldi	r31, 0x06	; 6
    5648:	84 81       	ldd	r24, Z+4	; 0x04
    564a:	81 60       	ori	r24, 0x01	; 1
    564c:	84 83       	std	Z+4, r24	; 0x04
              break; 
    564e:	0f 90       	pop	r0
    5650:	0f 90       	pop	r0
    5652:	0f 90       	pop	r0
    5654:	0f 90       	pop	r0
    5656:	0f 90       	pop	r0
    5658:	0f 90       	pop	r0
    565a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }
            case '3': //Axis 3
            {
              while(AxisIsMoving3)
    565e:	91 11       	cpse	r25, r1
    5660:	fe cf       	rjmp	.-4      	; 0x565e <__stack+0x165f>
    5662:	29 2f       	mov	r18, r25
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
              {
                temp[k]=cmdTemp[k+5];
    5664:	82 2f       	mov	r24, r18
    5666:	90 e0       	ldi	r25, 0x00	; 0
    5668:	fc 01       	movw	r30, r24
    566a:	e5 50       	subi	r30, 0x05	; 5
    566c:	f9 4d       	sbci	r31, 0xD9	; 217
    566e:	dc 01       	movw	r26, r24
    5670:	a0 5f       	subi	r26, 0xF0	; 240
    5672:	b8 4d       	sbci	r27, 0xD8	; 216
    5674:	15 96       	adiw	r26, 0x05	; 5
    5676:	8c 91       	ld	r24, X
    5678:	80 83       	st	Z, r24
            {
              while(AxisIsMoving3)
              {
                 /*wait until Is Moving*/
              } 
              for(k=0;k<10;k++)
    567a:	2f 5f       	subi	r18, 0xFF	; 255
    567c:	2a 30       	cpi	r18, 0x0A	; 10
    567e:	90 f3       	brcs	.-28     	; 0x5664 <__stack+0x1665>
    5680:	20 93 25 27 	sts	0x2725, r18	; 0x802725 <k>
              {
                temp[k]=cmdTemp[k+5];
              }
              temp[10]=0;
    5684:	10 92 05 27 	sts	0x2705, r1	; 0x802705 <temp+0xa>
              DEC3=atof(temp);  
    5688:	8b ef       	ldi	r24, 0xFB	; 251
    568a:	96 e2       	ldi	r25, 0x26	; 38
    568c:	0e 94 0b 40 	call	0x8016	; 0x8016 <atof>
    5690:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    5694:	60 93 55 27 	sts	0x2755, r22	; 0x802755 <DEC3>
    5698:	70 93 56 27 	sts	0x2756, r23	; 0x802756 <DEC3+0x1>
    569c:	80 93 57 27 	sts	0x2757, r24	; 0x802757 <DEC3+0x2>
    56a0:	90 93 58 27 	sts	0x2758, r25	; 0x802758 <DEC3+0x3>
              sprintf(BufferSend,"!1703\t%s\r\n",temp); 
    56a4:	0f 2e       	mov	r0, r31
    56a6:	fb ef       	ldi	r31, 0xFB	; 251
    56a8:	8f 2e       	mov	r8, r31
    56aa:	f6 e2       	ldi	r31, 0x26	; 38
    56ac:	9f 2e       	mov	r9, r31
    56ae:	f0 2d       	mov	r31, r0
    56b0:	9f 92       	push	r9
    56b2:	8f 92       	push	r8
    56b4:	80 e8       	ldi	r24, 0x80	; 128
    56b6:	94 e2       	ldi	r25, 0x24	; 36
    56b8:	9f 93       	push	r25
    56ba:	8f 93       	push	r24
    56bc:	87 e5       	ldi	r24, 0x57	; 87
    56be:	99 e2       	ldi	r25, 0x29	; 41
    56c0:	9f 93       	push	r25
    56c2:	8f 93       	push	r24
    56c4:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
              Responsing=1;    
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
              SetDataReady;
    56ce:	e0 ea       	ldi	r30, 0xA0	; 160
    56d0:	f6 e0       	ldi	r31, 0x06	; 6
    56d2:	84 81       	ldd	r24, Z+4	; 0x04
    56d4:	81 60       	ori	r24, 0x01	; 1
    56d6:	84 83       	std	Z+4, r24	; 0x04
              break; 
    56d8:	0f 90       	pop	r0
    56da:	0f 90       	pop	r0
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
    56e0:	0f 90       	pop	r0
    56e2:	0f 90       	pop	r0
    56e4:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
            }            
         }
       }
     }
    }                          
    else if(strncmp(cmdTemp,"#1800",5)==0)
    56e8:	45 e0       	ldi	r20, 0x05	; 5
    56ea:	50 e0       	ldi	r21, 0x00	; 0
    56ec:	6b e8       	ldi	r22, 0x8B	; 139
    56ee:	74 e2       	ldi	r23, 0x24	; 36
    56f0:	80 e1       	ldi	r24, 0x10	; 16
    56f2:	97 e2       	ldi	r25, 0x27	; 39
    56f4:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    56f8:	89 2b       	or	r24, r25
    56fa:	09 f0       	breq	.+2      	; 0x56fe <__stack+0x16ff>
    56fc:	02 c1       	rjmp	.+516    	; 0x5902 <__stack+0x1903>
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
    56fe:	20 91 48 27 	lds	r18, 0x2748	; 0x802748 <AxisIsMoving1>
    5702:	21 11       	cpse	r18, r1
    5704:	0b c0       	rjmp	.+22     	; 0x571c <__stack+0x171d>
    5706:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    570a:	81 11       	cpse	r24, r1
    570c:	09 c0       	rjmp	.+18     	; 0x5720 <__stack+0x1721>
    570e:	91 e0       	ldi	r25, 0x01	; 1
    5710:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    5714:	81 11       	cpse	r24, r1
    5716:	05 c0       	rjmp	.+10     	; 0x5722 <__stack+0x1723>
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	03 c0       	rjmp	.+6      	; 0x5722 <__stack+0x1723>
    571c:	91 e0       	ldi	r25, 0x01	; 1
    571e:	01 c0       	rjmp	.+2      	; 0x5722 <__stack+0x1723>
    5720:	91 e0       	ldi	r25, 0x01	; 1
    5722:	89 2f       	mov	r24, r25
    5724:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
     if (!ProgramRun)
    5728:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    572c:	91 11       	cpse	r25, r1
    572e:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__stack+0x27b9>
     {
      while (AxisMoving == 1) 
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5732:	30 91 47 27 	lds	r19, 0x2747	; 0x802747 <AxisIsMoving2>
    5736:	91 e0       	ldi	r25, 0x01	; 1
    5738:	40 91 46 27 	lds	r20, 0x2746	; 0x802746 <AxisIsMoving3>
    573c:	41 11       	cpse	r20, r1
    573e:	01 c0       	rjmp	.+2      	; 0x5742 <__stack+0x1743>
    5740:	90 e0       	ldi	r25, 0x00	; 0
    else if(strncmp(cmdTemp,"#1800",5)==0)
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    5742:	81 30       	cpi	r24, 0x01	; 1
    5744:	51 f4       	brne	.+20     	; 0x575a <__stack+0x175b>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5746:	21 11       	cpse	r18, r1
    5748:	04 c0       	rjmp	.+8      	; 0x5752 <__stack+0x1753>
    574a:	31 11       	cpse	r19, r1
    574c:	04 c0       	rjmp	.+8      	; 0x5756 <__stack+0x1757>
    574e:	89 2f       	mov	r24, r25
    5750:	f8 cf       	rjmp	.-16     	; 0x5742 <__stack+0x1743>
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	f6 cf       	rjmp	.-20     	; 0x5742 <__stack+0x1743>
    5756:	81 e0       	ldi	r24, 0x01	; 1
    else if(strncmp(cmdTemp,"#1800",5)==0)
    {//Go To Refrence 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;           
     if (!ProgramRun)
     {
      while (AxisMoving == 1) 
    5758:	f4 cf       	rjmp	.-24     	; 0x5742 <__stack+0x1743>
    575a:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }   
      
      printf("RefDir : %u\r\n",Axes[0].RefrenceDir);
    575e:	80 91 d9 27 	lds	r24, 0x27D9	; 0x8027d9 <Axes+0x1c>
    5762:	1f 92       	push	r1
    5764:	8f 93       	push	r24
    5766:	81 e9       	ldi	r24, 0x91	; 145
    5768:	94 e2       	ldi	r25, 0x24	; 36
    576a:	9f 93       	push	r25
    576c:	8f 93       	push	r24
    576e:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
      if(Axes[0].RefrenceDir==1)
    5772:	80 91 d9 27 	lds	r24, 0x27D9	; 0x8027d9 <Axes+0x1c>
    5776:	0f 90       	pop	r0
    5778:	0f 90       	pop	r0
    577a:	0f 90       	pop	r0
    577c:	0f 90       	pop	r0
    577e:	81 30       	cpi	r24, 0x01	; 1
    5780:	31 f4       	brne	.+12     	; 0x578e <__stack+0x178f>
      {
        
        CLR_DIR1;
    5782:	e0 e2       	ldi	r30, 0x20	; 32
    5784:	f7 e0       	ldi	r31, 0x07	; 7
    5786:	84 81       	ldd	r24, Z+4	; 0x04
    5788:	8f 7e       	andi	r24, 0xEF	; 239
    578a:	84 83       	std	Z+4, r24	; 0x04
    578c:	07 c0       	rjmp	.+14     	; 0x579c <__stack+0x179d>
      }
      else if(Axes[0].RefrenceDir==0)
    578e:	81 11       	cpse	r24, r1
    5790:	05 c0       	rjmp	.+10     	; 0x579c <__stack+0x179d>
      {
        SET_DIR1;
    5792:	e0 e2       	ldi	r30, 0x20	; 32
    5794:	f7 e0       	ldi	r31, 0x07	; 7
    5796:	84 81       	ldd	r24, Z+4	; 0x04
    5798:	80 61       	ori	r24, 0x10	; 16
    579a:	84 83       	std	Z+4, r24	; 0x04
      } 
      
      if(Axes[1].RefrenceDir==1)
    579c:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <Axes+0x47>
    57a0:	81 30       	cpi	r24, 0x01	; 1
    57a2:	31 f4       	brne	.+12     	; 0x57b0 <__stack+0x17b1>
      {
        CLR_DIR2;
    57a4:	e0 e2       	ldi	r30, 0x20	; 32
    57a6:	f7 e0       	ldi	r31, 0x07	; 7
    57a8:	84 81       	ldd	r24, Z+4	; 0x04
    57aa:	8b 7f       	andi	r24, 0xFB	; 251
    57ac:	84 83       	std	Z+4, r24	; 0x04
    57ae:	07 c0       	rjmp	.+14     	; 0x57be <__stack+0x17bf>
      }
      else if(Axes[1].RefrenceDir==0)
    57b0:	81 11       	cpse	r24, r1
    57b2:	05 c0       	rjmp	.+10     	; 0x57be <__stack+0x17bf>
      {
        SET_DIR2;
    57b4:	e0 e2       	ldi	r30, 0x20	; 32
    57b6:	f7 e0       	ldi	r31, 0x07	; 7
    57b8:	84 81       	ldd	r24, Z+4	; 0x04
    57ba:	84 60       	ori	r24, 0x04	; 4
    57bc:	84 83       	std	Z+4, r24	; 0x04
      }
      
      if(Axes[2].RefrenceDir==1)
    57be:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <Axes+0x72>
    57c2:	81 30       	cpi	r24, 0x01	; 1
    57c4:	31 f4       	brne	.+12     	; 0x57d2 <__stack+0x17d3>
      {
        CLR_DIR3;
    57c6:	e0 e2       	ldi	r30, 0x20	; 32
    57c8:	f7 e0       	ldi	r31, 0x07	; 7
    57ca:	84 81       	ldd	r24, Z+4	; 0x04
    57cc:	8e 7f       	andi	r24, 0xFE	; 254
    57ce:	84 83       	std	Z+4, r24	; 0x04
    57d0:	07 c0       	rjmp	.+14     	; 0x57e0 <__stack+0x17e1>
      }
      else if(Axes[2].RefrenceDir==0)
    57d2:	81 11       	cpse	r24, r1
    57d4:	05 c0       	rjmp	.+10     	; 0x57e0 <__stack+0x17e1>
      {
        SET_DIR3;
    57d6:	e0 e2       	ldi	r30, 0x20	; 32
    57d8:	f7 e0       	ldi	r31, 0x07	; 7
    57da:	84 81       	ldd	r24, Z+4	; 0x04
    57dc:	81 60       	ori	r24, 0x01	; 1
    57de:	84 83       	std	Z+4, r24	; 0x04
      }       
                             
      MaxSpeed=8000;                         
    57e0:	80 e4       	ldi	r24, 0x40	; 64
    57e2:	9f e1       	ldi	r25, 0x1F	; 31
    57e4:	a0 e0       	ldi	r26, 0x00	; 0
    57e6:	b0 e0       	ldi	r27, 0x00	; 0
    57e8:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    57ec:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    57f0:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    57f4:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
        
      CurSpeedFrq = MaxSpeed;
    57f8:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <CurSpeedFrq>
    57fc:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <CurSpeedFrq+0x1>
    5800:	a0 93 44 27 	sts	0x2744, r26	; 0x802744 <CurSpeedFrq+0x2>
    5804:	b0 93 45 27 	sts	0x2745, r27	; 0x802745 <CurSpeedFrq+0x3>
      ACC = 0;
    5808:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
      DEC = 0;
    580c:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
      TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);          
    5810:	80 e0       	ldi	r24, 0x00	; 0
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	a0 e0       	ldi	r26, 0x00	; 0
    5816:	b0 e4       	ldi	r27, 0x40	; 64
    5818:	80 93 28 27 	sts	0x2728, r24	; 0x802728 <TimerMainPeriod>
    581c:	90 93 29 27 	sts	0x2729, r25	; 0x802729 <TimerMainPeriod+0x1>
    5820:	a0 93 2a 27 	sts	0x272A, r26	; 0x80272a <TimerMainPeriod+0x2>
    5824:	b0 93 2b 27 	sts	0x272B, r27	; 0x80272b <TimerMainPeriod+0x3>
      RefCmd=1;
    5828:	bb 24       	eor	r11, r11
    582a:	b3 94       	inc	r11
    582c:	b0 92 f4 26 	sts	0x26F4, r11	; 0x8026f4 <RefCmd>
      Ma1=1000; 
    5830:	88 ee       	ldi	r24, 0xE8	; 232
    5832:	93 e0       	ldi	r25, 0x03	; 3
    5834:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    5838:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
      Ma2=1000;
    583c:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    5840:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
      Ma3=1000;
    5844:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    5848:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
      DistanceToGo1=0x7FFFFFFF;
    584c:	8f ef       	ldi	r24, 0xFF	; 255
    584e:	9f ef       	ldi	r25, 0xFF	; 255
    5850:	af ef       	ldi	r26, 0xFF	; 255
    5852:	bf e7       	ldi	r27, 0x7F	; 127
    5854:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    5858:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    585c:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    5860:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
      DistanceToGo2=0x7FFFFFFF;
    5864:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    5868:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    586c:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    5870:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
      DistanceToGo3=0x7FFFFFFF;   
    5874:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    5878:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    587c:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    5880:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
         
      tcc0_init();     
    5884:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
      
      TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);                    
    5888:	20 e0       	ldi	r18, 0x00	; 0
    588a:	30 e0       	ldi	r19, 0x00	; 0
    588c:	4a e7       	ldi	r20, 0x7A	; 122
    588e:	54 e4       	ldi	r21, 0x44	; 68
    5890:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    5894:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    5898:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    589c:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    58a0:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    58a4:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    58a8:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    58ac:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
                
      sprintf(BufferSend,"!1800\r\n"); 
    58b0:	88 e0       	ldi	r24, 0x08	; 8
    58b2:	e8 ed       	ldi	r30, 0xD8	; 216
    58b4:	f0 e2       	ldi	r31, 0x20	; 32
    58b6:	a7 e5       	ldi	r26, 0x57	; 87
    58b8:	b9 e2       	ldi	r27, 0x29	; 41
    58ba:	01 90       	ld	r0, Z+
    58bc:	0d 92       	st	X+, r0
    58be:	8a 95       	dec	r24
    58c0:	e1 f7       	brne	.-8      	; 0x58ba <__stack+0x18bb>
      AxisPosition1=0;
    58c2:	10 92 ac 27 	sts	0x27AC, r1	; 0x8027ac <AxisPosition1>
    58c6:	10 92 ad 27 	sts	0x27AD, r1	; 0x8027ad <AxisPosition1+0x1>
    58ca:	10 92 ae 27 	sts	0x27AE, r1	; 0x8027ae <AxisPosition1+0x2>
    58ce:	10 92 af 27 	sts	0x27AF, r1	; 0x8027af <AxisPosition1+0x3>
      AxisPosition2=0;
    58d2:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <AxisPosition2>
    58d6:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <AxisPosition2+0x1>
    58da:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <AxisPosition2+0x2>
    58de:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <AxisPosition2+0x3>
      AxisPosition3=0;
    58e2:	10 92 a4 27 	sts	0x27A4, r1	; 0x8027a4 <AxisPosition3>
    58e6:	10 92 a5 27 	sts	0x27A5, r1	; 0x8027a5 <AxisPosition3+0x1>
    58ea:	10 92 a6 27 	sts	0x27A6, r1	; 0x8027a6 <AxisPosition3+0x2>
    58ee:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <AxisPosition3+0x3>
      Responsing=1; 
    58f2:	b0 92 8c 28 	sts	0x288C, r11	; 0x80288c <Responsing>
      SetDataReady;                      
    58f6:	e0 ea       	ldi	r30, 0xA0	; 160
    58f8:	f6 e0       	ldi	r31, 0x06	; 6
    58fa:	84 81       	ldd	r24, Z+4	; 0x04
    58fc:	81 60       	ori	r24, 0x01	; 1
    58fe:	84 83       	std	Z+4, r24	; 0x04
    5900:	5b c7       	rjmp	.+3766   	; 0x67b8 <__stack+0x27b9>
     }
    }     
    else if(strncmp(cmdTemp,"#1901",5)==0)
    5902:	45 e0       	ldi	r20, 0x05	; 5
    5904:	50 e0       	ldi	r21, 0x00	; 0
    5906:	6f e9       	ldi	r22, 0x9F	; 159
    5908:	74 e2       	ldi	r23, 0x24	; 36
    590a:	80 e1       	ldi	r24, 0x10	; 16
    590c:	97 e2       	ldi	r25, 0x27	; 39
    590e:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5912:	89 2b       	or	r24, r25
    5914:	a1 f4       	brne	.+40     	; 0x593e <__stack+0x193f>
    {
        RefDir1=0;  
    5916:	10 92 7f 27 	sts	0x277F, r1	; 0x80277f <RefDir1>
        sprintf(BufferSend,"!1901\r\n"); 
    591a:	88 e0       	ldi	r24, 0x08	; 8
    591c:	e5 ea       	ldi	r30, 0xA5	; 165
    591e:	f4 e2       	ldi	r31, 0x24	; 36
    5920:	a7 e5       	ldi	r26, 0x57	; 87
    5922:	b9 e2       	ldi	r27, 0x29	; 41
    5924:	01 90       	ld	r0, Z+
    5926:	0d 92       	st	X+, r0
    5928:	8a 95       	dec	r24
    592a:	e1 f7       	brne	.-8      	; 0x5924 <__stack+0x1925>
        Responsing=1; 
    592c:	81 e0       	ldi	r24, 0x01	; 1
    592e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;                    
    5932:	e0 ea       	ldi	r30, 0xA0	; 160
    5934:	f6 e0       	ldi	r31, 0x06	; 6
    5936:	84 81       	ldd	r24, Z+4	; 0x04
    5938:	81 60       	ori	r24, 0x01	; 1
    593a:	84 83       	std	Z+4, r24	; 0x04
    593c:	3d c7       	rjmp	.+3706   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#1902",5)==0)
    593e:	45 e0       	ldi	r20, 0x05	; 5
    5940:	50 e0       	ldi	r21, 0x00	; 0
    5942:	6d ea       	ldi	r22, 0xAD	; 173
    5944:	74 e2       	ldi	r23, 0x24	; 36
    5946:	80 e1       	ldi	r24, 0x10	; 16
    5948:	97 e2       	ldi	r25, 0x27	; 39
    594a:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    594e:	89 2b       	or	r24, r25
    5950:	a1 f4       	brne	.+40     	; 0x597a <__stack+0x197b>
    {             
        RefDir2=0;    
    5952:	10 92 7e 27 	sts	0x277E, r1	; 0x80277e <RefDir2>
        sprintf(BufferSend,"!1902\r\n"); 
    5956:	88 e0       	ldi	r24, 0x08	; 8
    5958:	e3 eb       	ldi	r30, 0xB3	; 179
    595a:	f4 e2       	ldi	r31, 0x24	; 36
    595c:	a7 e5       	ldi	r26, 0x57	; 87
    595e:	b9 e2       	ldi	r27, 0x29	; 41
    5960:	01 90       	ld	r0, Z+
    5962:	0d 92       	st	X+, r0
    5964:	8a 95       	dec	r24
    5966:	e1 f7       	brne	.-8      	; 0x5960 <__stack+0x1961>
        Responsing=1; 
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady; 
    596e:	e0 ea       	ldi	r30, 0xA0	; 160
    5970:	f6 e0       	ldi	r31, 0x06	; 6
    5972:	84 81       	ldd	r24, Z+4	; 0x04
    5974:	81 60       	ori	r24, 0x01	; 1
    5976:	84 83       	std	Z+4, r24	; 0x04
    5978:	1f c7       	rjmp	.+3646   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#1903",5)==0)
    597a:	45 e0       	ldi	r20, 0x05	; 5
    597c:	50 e0       	ldi	r21, 0x00	; 0
    597e:	6b eb       	ldi	r22, 0xBB	; 187
    5980:	74 e2       	ldi	r23, 0x24	; 36
    5982:	80 e1       	ldi	r24, 0x10	; 16
    5984:	97 e2       	ldi	r25, 0x27	; 39
    5986:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    598a:	89 2b       	or	r24, r25
    598c:	a1 f4       	brne	.+40     	; 0x59b6 <__stack+0x19b7>
    {             
        RefDir3=0; 
    598e:	10 92 7d 27 	sts	0x277D, r1	; 0x80277d <RefDir3>
        sprintf(BufferSend,"!1903\r\n"); 
    5992:	88 e0       	ldi	r24, 0x08	; 8
    5994:	e1 ec       	ldi	r30, 0xC1	; 193
    5996:	f4 e2       	ldi	r31, 0x24	; 36
    5998:	a7 e5       	ldi	r26, 0x57	; 87
    599a:	b9 e2       	ldi	r27, 0x29	; 41
    599c:	01 90       	ld	r0, Z+
    599e:	0d 92       	st	X+, r0
    59a0:	8a 95       	dec	r24
    59a2:	e1 f7       	brne	.-8      	; 0x599c <__stack+0x199d>
        Responsing=1; 
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady; 
    59aa:	e0 ea       	ldi	r30, 0xA0	; 160
    59ac:	f6 e0       	ldi	r31, 0x06	; 6
    59ae:	84 81       	ldd	r24, Z+4	; 0x04
    59b0:	81 60       	ori	r24, 0x01	; 1
    59b2:	84 83       	std	Z+4, r24	; 0x04
    59b4:	01 c7       	rjmp	.+3586   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2001",5)==0)
    59b6:	45 e0       	ldi	r20, 0x05	; 5
    59b8:	50 e0       	ldi	r21, 0x00	; 0
    59ba:	69 ec       	ldi	r22, 0xC9	; 201
    59bc:	74 e2       	ldi	r23, 0x24	; 36
    59be:	80 e1       	ldi	r24, 0x10	; 16
    59c0:	97 e2       	ldi	r25, 0x27	; 39
    59c2:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    59c6:	89 2b       	or	r24, r25
    59c8:	a1 f4       	brne	.+40     	; 0x59f2 <__stack+0x19f3>
    {
      RefDir1=1;    
    59ca:	81 e0       	ldi	r24, 0x01	; 1
    59cc:	80 93 7f 27 	sts	0x277F, r24	; 0x80277f <RefDir1>
      sprintf(BufferSend,"!2001\r\n"); 
    59d0:	98 e0       	ldi	r25, 0x08	; 8
    59d2:	ef ec       	ldi	r30, 0xCF	; 207
    59d4:	f4 e2       	ldi	r31, 0x24	; 36
    59d6:	a7 e5       	ldi	r26, 0x57	; 87
    59d8:	b9 e2       	ldi	r27, 0x29	; 41
    59da:	01 90       	ld	r0, Z+
    59dc:	0d 92       	st	X+, r0
    59de:	9a 95       	dec	r25
    59e0:	e1 f7       	brne	.-8      	; 0x59da <__stack+0x19db>
      Responsing=1; 
    59e2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
      SetDataReady; 
    59e6:	e0 ea       	ldi	r30, 0xA0	; 160
    59e8:	f6 e0       	ldi	r31, 0x06	; 6
    59ea:	84 81       	ldd	r24, Z+4	; 0x04
    59ec:	81 60       	ori	r24, 0x01	; 1
    59ee:	84 83       	std	Z+4, r24	; 0x04
    59f0:	e3 c6       	rjmp	.+3526   	; 0x67b8 <__stack+0x27b9>
    } 
    else if(strncmp(cmdTemp,"#2002",5)==0)
    59f2:	45 e0       	ldi	r20, 0x05	; 5
    59f4:	50 e0       	ldi	r21, 0x00	; 0
    59f6:	67 ed       	ldi	r22, 0xD7	; 215
    59f8:	74 e2       	ldi	r23, 0x24	; 36
    59fa:	80 e1       	ldi	r24, 0x10	; 16
    59fc:	97 e2       	ldi	r25, 0x27	; 39
    59fe:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5a02:	89 2b       	or	r24, r25
    5a04:	a1 f4       	brne	.+40     	; 0x5a2e <__stack+0x1a2f>
    {
        RefDir2=1;  
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	80 93 7e 27 	sts	0x277E, r24	; 0x80277e <RefDir2>
        sprintf(BufferSend,"!2002\r\n"); 
    5a0c:	98 e0       	ldi	r25, 0x08	; 8
    5a0e:	ed ed       	ldi	r30, 0xDD	; 221
    5a10:	f4 e2       	ldi	r31, 0x24	; 36
    5a12:	a7 e5       	ldi	r26, 0x57	; 87
    5a14:	b9 e2       	ldi	r27, 0x29	; 41
    5a16:	01 90       	ld	r0, Z+
    5a18:	0d 92       	st	X+, r0
    5a1a:	9a 95       	dec	r25
    5a1c:	e1 f7       	brne	.-8      	; 0x5a16 <__stack+0x1a17>
        Responsing=1; 
    5a1e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady; 
    5a22:	e0 ea       	ldi	r30, 0xA0	; 160
    5a24:	f6 e0       	ldi	r31, 0x06	; 6
    5a26:	84 81       	ldd	r24, Z+4	; 0x04
    5a28:	81 60       	ori	r24, 0x01	; 1
    5a2a:	84 83       	std	Z+4, r24	; 0x04
    5a2c:	c5 c6       	rjmp	.+3466   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2003",5)==0)
    5a2e:	45 e0       	ldi	r20, 0x05	; 5
    5a30:	50 e0       	ldi	r21, 0x00	; 0
    5a32:	65 ee       	ldi	r22, 0xE5	; 229
    5a34:	74 e2       	ldi	r23, 0x24	; 36
    5a36:	80 e1       	ldi	r24, 0x10	; 16
    5a38:	97 e2       	ldi	r25, 0x27	; 39
    5a3a:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5a3e:	89 2b       	or	r24, r25
    5a40:	a1 f4       	brne	.+40     	; 0x5a6a <__stack+0x1a6b>
    {
        RefDir3=1;
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	80 93 7d 27 	sts	0x277D, r24	; 0x80277d <RefDir3>
        sprintf(BufferSend,"!2003\r\n"); 
    5a48:	98 e0       	ldi	r25, 0x08	; 8
    5a4a:	eb ee       	ldi	r30, 0xEB	; 235
    5a4c:	f4 e2       	ldi	r31, 0x24	; 36
    5a4e:	a7 e5       	ldi	r26, 0x57	; 87
    5a50:	b9 e2       	ldi	r27, 0x29	; 41
    5a52:	01 90       	ld	r0, Z+
    5a54:	0d 92       	st	X+, r0
    5a56:	9a 95       	dec	r25
    5a58:	e1 f7       	brne	.-8      	; 0x5a52 <__stack+0x1a53>
        Responsing=1; 
    5a5a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady; 
    5a5e:	e0 ea       	ldi	r30, 0xA0	; 160
    5a60:	f6 e0       	ldi	r31, 0x06	; 6
    5a62:	84 81       	ldd	r24, Z+4	; 0x04
    5a64:	81 60       	ori	r24, 0x01	; 1
    5a66:	84 83       	std	Z+4, r24	; 0x04
    5a68:	a7 c6       	rjmp	.+3406   	; 0x67b8 <__stack+0x27b9>
    }   
    else if(strncmp(cmdTemp,"#2110",5)==0)  
    5a6a:	45 e0       	ldi	r20, 0x05	; 5
    5a6c:	50 e0       	ldi	r21, 0x00	; 0
    5a6e:	63 ef       	ldi	r22, 0xF3	; 243
    5a70:	74 e2       	ldi	r23, 0x24	; 36
    5a72:	80 e1       	ldi	r24, 0x10	; 16
    5a74:	97 e2       	ldi	r25, 0x27	; 39
    5a76:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5a7a:	89 2b       	or	r24, r25
    5a7c:	a1 f4       	brne	.+40     	; 0x5aa6 <__stack+0x1aa7>
    {
        //Disable Hardware Positive Limit 1 
        PLimitIsActiveA1=0;
    5a7e:	10 92 f3 26 	sts	0x26F3, r1	; 0x8026f3 <PLimitIsActiveA1>
        sprintf(BufferSend,"!2110\r\n"); 
    5a82:	88 e0       	ldi	r24, 0x08	; 8
    5a84:	e9 ef       	ldi	r30, 0xF9	; 249
    5a86:	f4 e2       	ldi	r31, 0x24	; 36
    5a88:	a7 e5       	ldi	r26, 0x57	; 87
    5a8a:	b9 e2       	ldi	r27, 0x29	; 41
    5a8c:	01 90       	ld	r0, Z+
    5a8e:	0d 92       	st	X+, r0
    5a90:	8a 95       	dec	r24
    5a92:	e1 f7       	brne	.-8      	; 0x5a8c <__stack+0x1a8d>
        Responsing=1; 
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5a9a:	e0 ea       	ldi	r30, 0xA0	; 160
    5a9c:	f6 e0       	ldi	r31, 0x06	; 6
    5a9e:	84 81       	ldd	r24, Z+4	; 0x04
    5aa0:	81 60       	ori	r24, 0x01	; 1
    5aa2:	84 83       	std	Z+4, r24	; 0x04
    5aa4:	89 c6       	rjmp	.+3346   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2111",5)==0)
    5aa6:	45 e0       	ldi	r20, 0x05	; 5
    5aa8:	50 e0       	ldi	r21, 0x00	; 0
    5aaa:	61 e0       	ldi	r22, 0x01	; 1
    5aac:	75 e2       	ldi	r23, 0x25	; 37
    5aae:	80 e1       	ldi	r24, 0x10	; 16
    5ab0:	97 e2       	ldi	r25, 0x27	; 39
    5ab2:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5ab6:	89 2b       	or	r24, r25
    5ab8:	a1 f4       	brne	.+40     	; 0x5ae2 <__stack+0x1ae3>
    {     
        //Enable Hardware Positive Limit 1
        PLimitIsActiveA1=1; 
    5aba:	81 e0       	ldi	r24, 0x01	; 1
    5abc:	80 93 f3 26 	sts	0x26F3, r24	; 0x8026f3 <PLimitIsActiveA1>
        sprintf(BufferSend,"!2111\r\n"); 
    5ac0:	98 e0       	ldi	r25, 0x08	; 8
    5ac2:	e7 e0       	ldi	r30, 0x07	; 7
    5ac4:	f5 e2       	ldi	r31, 0x25	; 37
    5ac6:	a7 e5       	ldi	r26, 0x57	; 87
    5ac8:	b9 e2       	ldi	r27, 0x29	; 41
    5aca:	01 90       	ld	r0, Z+
    5acc:	0d 92       	st	X+, r0
    5ace:	9a 95       	dec	r25
    5ad0:	e1 f7       	brne	.-8      	; 0x5aca <__stack+0x1acb>
        Responsing=1; 
    5ad2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5ad6:	e0 ea       	ldi	r30, 0xA0	; 160
    5ad8:	f6 e0       	ldi	r31, 0x06	; 6
    5ada:	84 81       	ldd	r24, Z+4	; 0x04
    5adc:	81 60       	ori	r24, 0x01	; 1
    5ade:	84 83       	std	Z+4, r24	; 0x04
    5ae0:	6b c6       	rjmp	.+3286   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2120",5)==0)
    5ae2:	45 e0       	ldi	r20, 0x05	; 5
    5ae4:	50 e0       	ldi	r21, 0x00	; 0
    5ae6:	6f e0       	ldi	r22, 0x0F	; 15
    5ae8:	75 e2       	ldi	r23, 0x25	; 37
    5aea:	80 e1       	ldi	r24, 0x10	; 16
    5aec:	97 e2       	ldi	r25, 0x27	; 39
    5aee:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5af2:	89 2b       	or	r24, r25
    5af4:	a1 f4       	brne	.+40     	; 0x5b1e <__stack+0x1b1f>
    {
        //Disable Hardware Positive Limit 2
        PLimitIsActiveA2=0;
    5af6:	10 92 f1 26 	sts	0x26F1, r1	; 0x8026f1 <PLimitIsActiveA2>
        sprintf(BufferSend,"!2120\r\n"); 
    5afa:	88 e0       	ldi	r24, 0x08	; 8
    5afc:	e5 e1       	ldi	r30, 0x15	; 21
    5afe:	f5 e2       	ldi	r31, 0x25	; 37
    5b00:	a7 e5       	ldi	r26, 0x57	; 87
    5b02:	b9 e2       	ldi	r27, 0x29	; 41
    5b04:	01 90       	ld	r0, Z+
    5b06:	0d 92       	st	X+, r0
    5b08:	8a 95       	dec	r24
    5b0a:	e1 f7       	brne	.-8      	; 0x5b04 <__stack+0x1b05>
        Responsing=1; 
    5b0c:	81 e0       	ldi	r24, 0x01	; 1
    5b0e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5b12:	e0 ea       	ldi	r30, 0xA0	; 160
    5b14:	f6 e0       	ldi	r31, 0x06	; 6
    5b16:	84 81       	ldd	r24, Z+4	; 0x04
    5b18:	81 60       	ori	r24, 0x01	; 1
    5b1a:	84 83       	std	Z+4, r24	; 0x04
    5b1c:	4d c6       	rjmp	.+3226   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2121",5)==0)
    5b1e:	45 e0       	ldi	r20, 0x05	; 5
    5b20:	50 e0       	ldi	r21, 0x00	; 0
    5b22:	6d e1       	ldi	r22, 0x1D	; 29
    5b24:	75 e2       	ldi	r23, 0x25	; 37
    5b26:	80 e1       	ldi	r24, 0x10	; 16
    5b28:	97 e2       	ldi	r25, 0x27	; 39
    5b2a:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5b2e:	89 2b       	or	r24, r25
    5b30:	a1 f4       	brne	.+40     	; 0x5b5a <__stack+0x1b5b>
    {
        //Enable Hardware Positive Limit 2
        PLimitIsActiveA2=1;
    5b32:	81 e0       	ldi	r24, 0x01	; 1
    5b34:	80 93 f1 26 	sts	0x26F1, r24	; 0x8026f1 <PLimitIsActiveA2>
        sprintf(BufferSend,"!2121\r\n"); 
    5b38:	98 e0       	ldi	r25, 0x08	; 8
    5b3a:	e3 e2       	ldi	r30, 0x23	; 35
    5b3c:	f5 e2       	ldi	r31, 0x25	; 37
    5b3e:	a7 e5       	ldi	r26, 0x57	; 87
    5b40:	b9 e2       	ldi	r27, 0x29	; 41
    5b42:	01 90       	ld	r0, Z+
    5b44:	0d 92       	st	X+, r0
    5b46:	9a 95       	dec	r25
    5b48:	e1 f7       	brne	.-8      	; 0x5b42 <__stack+0x1b43>
        Responsing=1; 
    5b4a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5b4e:	e0 ea       	ldi	r30, 0xA0	; 160
    5b50:	f6 e0       	ldi	r31, 0x06	; 6
    5b52:	84 81       	ldd	r24, Z+4	; 0x04
    5b54:	81 60       	ori	r24, 0x01	; 1
    5b56:	84 83       	std	Z+4, r24	; 0x04
    5b58:	2f c6       	rjmp	.+3166   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2130",5)==0)
    5b5a:	45 e0       	ldi	r20, 0x05	; 5
    5b5c:	50 e0       	ldi	r21, 0x00	; 0
    5b5e:	6b e2       	ldi	r22, 0x2B	; 43
    5b60:	75 e2       	ldi	r23, 0x25	; 37
    5b62:	80 e1       	ldi	r24, 0x10	; 16
    5b64:	97 e2       	ldi	r25, 0x27	; 39
    5b66:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5b6a:	89 2b       	or	r24, r25
    5b6c:	a1 f4       	brne	.+40     	; 0x5b96 <__stack+0x1b97>
    { 
        //Enable Hardware Positive Limit 3
        PLimitIsActiveA3=0;
    5b6e:	10 92 ef 26 	sts	0x26EF, r1	; 0x8026ef <PLimitIsActiveA3>
        sprintf(BufferSend,"!2130\r\n"); 
    5b72:	88 e0       	ldi	r24, 0x08	; 8
    5b74:	e1 e3       	ldi	r30, 0x31	; 49
    5b76:	f5 e2       	ldi	r31, 0x25	; 37
    5b78:	a7 e5       	ldi	r26, 0x57	; 87
    5b7a:	b9 e2       	ldi	r27, 0x29	; 41
    5b7c:	01 90       	ld	r0, Z+
    5b7e:	0d 92       	st	X+, r0
    5b80:	8a 95       	dec	r24
    5b82:	e1 f7       	brne	.-8      	; 0x5b7c <__stack+0x1b7d>
        Responsing=1; 
    5b84:	81 e0       	ldi	r24, 0x01	; 1
    5b86:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5b8a:	e0 ea       	ldi	r30, 0xA0	; 160
    5b8c:	f6 e0       	ldi	r31, 0x06	; 6
    5b8e:	84 81       	ldd	r24, Z+4	; 0x04
    5b90:	81 60       	ori	r24, 0x01	; 1
    5b92:	84 83       	std	Z+4, r24	; 0x04
    5b94:	11 c6       	rjmp	.+3106   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2131",5)==0)
    5b96:	45 e0       	ldi	r20, 0x05	; 5
    5b98:	50 e0       	ldi	r21, 0x00	; 0
    5b9a:	69 e3       	ldi	r22, 0x39	; 57
    5b9c:	75 e2       	ldi	r23, 0x25	; 37
    5b9e:	80 e1       	ldi	r24, 0x10	; 16
    5ba0:	97 e2       	ldi	r25, 0x27	; 39
    5ba2:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5ba6:	89 2b       	or	r24, r25
    5ba8:	a1 f4       	brne	.+40     	; 0x5bd2 <__stack+0x1bd3>
    { 
        //Enable Hardware Positive Limit 3 
        PLimitIsActiveA3=1;
    5baa:	81 e0       	ldi	r24, 0x01	; 1
    5bac:	80 93 ef 26 	sts	0x26EF, r24	; 0x8026ef <PLimitIsActiveA3>
        sprintf(BufferSend,"!2131\r\n"); 
    5bb0:	98 e0       	ldi	r25, 0x08	; 8
    5bb2:	ef e3       	ldi	r30, 0x3F	; 63
    5bb4:	f5 e2       	ldi	r31, 0x25	; 37
    5bb6:	a7 e5       	ldi	r26, 0x57	; 87
    5bb8:	b9 e2       	ldi	r27, 0x29	; 41
    5bba:	01 90       	ld	r0, Z+
    5bbc:	0d 92       	st	X+, r0
    5bbe:	9a 95       	dec	r25
    5bc0:	e1 f7       	brne	.-8      	; 0x5bba <__stack+0x1bbb>
        Responsing=1; 
    5bc2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5bc6:	e0 ea       	ldi	r30, 0xA0	; 160
    5bc8:	f6 e0       	ldi	r31, 0x06	; 6
    5bca:	84 81       	ldd	r24, Z+4	; 0x04
    5bcc:	81 60       	ori	r24, 0x01	; 1
    5bce:	84 83       	std	Z+4, r24	; 0x04
    5bd0:	f3 c5       	rjmp	.+3046   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2210",5)==0)  
    5bd2:	45 e0       	ldi	r20, 0x05	; 5
    5bd4:	50 e0       	ldi	r21, 0x00	; 0
    5bd6:	67 e4       	ldi	r22, 0x47	; 71
    5bd8:	75 e2       	ldi	r23, 0x25	; 37
    5bda:	80 e1       	ldi	r24, 0x10	; 16
    5bdc:	97 e2       	ldi	r25, 0x27	; 39
    5bde:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5be2:	89 2b       	or	r24, r25
    5be4:	a1 f4       	brne	.+40     	; 0x5c0e <__stack+0x1c0f>
    {  
        NLimitIsActiveA1=0;
    5be6:	10 92 f2 26 	sts	0x26F2, r1	; 0x8026f2 <NLimitIsActiveA1>
        sprintf(BufferSend,"!2210\r\n"); 
    5bea:	88 e0       	ldi	r24, 0x08	; 8
    5bec:	ed e4       	ldi	r30, 0x4D	; 77
    5bee:	f5 e2       	ldi	r31, 0x25	; 37
    5bf0:	a7 e5       	ldi	r26, 0x57	; 87
    5bf2:	b9 e2       	ldi	r27, 0x29	; 41
    5bf4:	01 90       	ld	r0, Z+
    5bf6:	0d 92       	st	X+, r0
    5bf8:	8a 95       	dec	r24
    5bfa:	e1 f7       	brne	.-8      	; 0x5bf4 <__stack+0x1bf5>
        Responsing=1; 
    5bfc:	81 e0       	ldi	r24, 0x01	; 1
    5bfe:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5c02:	e0 ea       	ldi	r30, 0xA0	; 160
    5c04:	f6 e0       	ldi	r31, 0x06	; 6
    5c06:	84 81       	ldd	r24, Z+4	; 0x04
    5c08:	81 60       	ori	r24, 0x01	; 1
    5c0a:	84 83       	std	Z+4, r24	; 0x04
    5c0c:	d5 c5       	rjmp	.+2986   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2211",5)==0)
    5c0e:	45 e0       	ldi	r20, 0x05	; 5
    5c10:	50 e0       	ldi	r21, 0x00	; 0
    5c12:	65 e5       	ldi	r22, 0x55	; 85
    5c14:	75 e2       	ldi	r23, 0x25	; 37
    5c16:	80 e1       	ldi	r24, 0x10	; 16
    5c18:	97 e2       	ldi	r25, 0x27	; 39
    5c1a:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5c1e:	89 2b       	or	r24, r25
    5c20:	a1 f4       	brne	.+40     	; 0x5c4a <__stack+0x1c4b>
    { 
        NLimitIsActiveA1=1; 
    5c22:	81 e0       	ldi	r24, 0x01	; 1
    5c24:	80 93 f2 26 	sts	0x26F2, r24	; 0x8026f2 <NLimitIsActiveA1>
        sprintf(BufferSend,"!2211\r\n"); 
    5c28:	98 e0       	ldi	r25, 0x08	; 8
    5c2a:	eb e5       	ldi	r30, 0x5B	; 91
    5c2c:	f5 e2       	ldi	r31, 0x25	; 37
    5c2e:	a7 e5       	ldi	r26, 0x57	; 87
    5c30:	b9 e2       	ldi	r27, 0x29	; 41
    5c32:	01 90       	ld	r0, Z+
    5c34:	0d 92       	st	X+, r0
    5c36:	9a 95       	dec	r25
    5c38:	e1 f7       	brne	.-8      	; 0x5c32 <__stack+0x1c33>
        Responsing=1; 
    5c3a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5c3e:	e0 ea       	ldi	r30, 0xA0	; 160
    5c40:	f6 e0       	ldi	r31, 0x06	; 6
    5c42:	84 81       	ldd	r24, Z+4	; 0x04
    5c44:	81 60       	ori	r24, 0x01	; 1
    5c46:	84 83       	std	Z+4, r24	; 0x04
    5c48:	b7 c5       	rjmp	.+2926   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2220",5)==0)
    5c4a:	45 e0       	ldi	r20, 0x05	; 5
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	63 e6       	ldi	r22, 0x63	; 99
    5c50:	75 e2       	ldi	r23, 0x25	; 37
    5c52:	80 e1       	ldi	r24, 0x10	; 16
    5c54:	97 e2       	ldi	r25, 0x27	; 39
    5c56:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5c5a:	89 2b       	or	r24, r25
    5c5c:	a1 f4       	brne	.+40     	; 0x5c86 <__stack+0x1c87>
    {
        NLimitIsActiveA2=0;
    5c5e:	10 92 f0 26 	sts	0x26F0, r1	; 0x8026f0 <NLimitIsActiveA2>
        sprintf(BufferSend,"!2220\r\n"); 
    5c62:	88 e0       	ldi	r24, 0x08	; 8
    5c64:	e9 e6       	ldi	r30, 0x69	; 105
    5c66:	f5 e2       	ldi	r31, 0x25	; 37
    5c68:	a7 e5       	ldi	r26, 0x57	; 87
    5c6a:	b9 e2       	ldi	r27, 0x29	; 41
    5c6c:	01 90       	ld	r0, Z+
    5c6e:	0d 92       	st	X+, r0
    5c70:	8a 95       	dec	r24
    5c72:	e1 f7       	brne	.-8      	; 0x5c6c <__stack+0x1c6d>
        Responsing=1; 
    5c74:	81 e0       	ldi	r24, 0x01	; 1
    5c76:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5c7a:	e0 ea       	ldi	r30, 0xA0	; 160
    5c7c:	f6 e0       	ldi	r31, 0x06	; 6
    5c7e:	84 81       	ldd	r24, Z+4	; 0x04
    5c80:	81 60       	ori	r24, 0x01	; 1
    5c82:	84 83       	std	Z+4, r24	; 0x04
    5c84:	99 c5       	rjmp	.+2866   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2221",5)==0)
    5c86:	45 e0       	ldi	r20, 0x05	; 5
    5c88:	50 e0       	ldi	r21, 0x00	; 0
    5c8a:	61 e7       	ldi	r22, 0x71	; 113
    5c8c:	75 e2       	ldi	r23, 0x25	; 37
    5c8e:	80 e1       	ldi	r24, 0x10	; 16
    5c90:	97 e2       	ldi	r25, 0x27	; 39
    5c92:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5c96:	89 2b       	or	r24, r25
    5c98:	a1 f4       	brne	.+40     	; 0x5cc2 <__stack+0x1cc3>
    {
        NLimitIsActiveA2=1;
    5c9a:	81 e0       	ldi	r24, 0x01	; 1
    5c9c:	80 93 f0 26 	sts	0x26F0, r24	; 0x8026f0 <NLimitIsActiveA2>
        sprintf(BufferSend,"!2221\r\n"); 
    5ca0:	98 e0       	ldi	r25, 0x08	; 8
    5ca2:	e7 e7       	ldi	r30, 0x77	; 119
    5ca4:	f5 e2       	ldi	r31, 0x25	; 37
    5ca6:	a7 e5       	ldi	r26, 0x57	; 87
    5ca8:	b9 e2       	ldi	r27, 0x29	; 41
    5caa:	01 90       	ld	r0, Z+
    5cac:	0d 92       	st	X+, r0
    5cae:	9a 95       	dec	r25
    5cb0:	e1 f7       	brne	.-8      	; 0x5caa <__stack+0x1cab>
        Responsing=1; 
    5cb2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5cb6:	e0 ea       	ldi	r30, 0xA0	; 160
    5cb8:	f6 e0       	ldi	r31, 0x06	; 6
    5cba:	84 81       	ldd	r24, Z+4	; 0x04
    5cbc:	81 60       	ori	r24, 0x01	; 1
    5cbe:	84 83       	std	Z+4, r24	; 0x04
    5cc0:	7b c5       	rjmp	.+2806   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2230",5)==0)
    5cc2:	45 e0       	ldi	r20, 0x05	; 5
    5cc4:	50 e0       	ldi	r21, 0x00	; 0
    5cc6:	6f e7       	ldi	r22, 0x7F	; 127
    5cc8:	75 e2       	ldi	r23, 0x25	; 37
    5cca:	80 e1       	ldi	r24, 0x10	; 16
    5ccc:	97 e2       	ldi	r25, 0x27	; 39
    5cce:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5cd2:	89 2b       	or	r24, r25
    5cd4:	a1 f4       	brne	.+40     	; 0x5cfe <__stack+0x1cff>
    { 
        NLimitIsActiveA3=0;
    5cd6:	10 92 ee 26 	sts	0x26EE, r1	; 0x8026ee <NLimitIsActiveA3>
        sprintf(BufferSend,"!2230\r\n"); 
    5cda:	88 e0       	ldi	r24, 0x08	; 8
    5cdc:	e5 e8       	ldi	r30, 0x85	; 133
    5cde:	f5 e2       	ldi	r31, 0x25	; 37
    5ce0:	a7 e5       	ldi	r26, 0x57	; 87
    5ce2:	b9 e2       	ldi	r27, 0x29	; 41
    5ce4:	01 90       	ld	r0, Z+
    5ce6:	0d 92       	st	X+, r0
    5ce8:	8a 95       	dec	r24
    5cea:	e1 f7       	brne	.-8      	; 0x5ce4 <__stack+0x1ce5>
        Responsing=1; 
    5cec:	81 e0       	ldi	r24, 0x01	; 1
    5cee:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5cf2:	e0 ea       	ldi	r30, 0xA0	; 160
    5cf4:	f6 e0       	ldi	r31, 0x06	; 6
    5cf6:	84 81       	ldd	r24, Z+4	; 0x04
    5cf8:	81 60       	ori	r24, 0x01	; 1
    5cfa:	84 83       	std	Z+4, r24	; 0x04
    5cfc:	5d c5       	rjmp	.+2746   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2231",5)==0)
    5cfe:	45 e0       	ldi	r20, 0x05	; 5
    5d00:	50 e0       	ldi	r21, 0x00	; 0
    5d02:	6d e8       	ldi	r22, 0x8D	; 141
    5d04:	75 e2       	ldi	r23, 0x25	; 37
    5d06:	80 e1       	ldi	r24, 0x10	; 16
    5d08:	97 e2       	ldi	r25, 0x27	; 39
    5d0a:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5d0e:	89 2b       	or	r24, r25
    5d10:	a1 f4       	brne	.+40     	; 0x5d3a <__stack+0x1d3b>
    {  
        NLimitIsActiveA3=1;
    5d12:	81 e0       	ldi	r24, 0x01	; 1
    5d14:	80 93 ee 26 	sts	0x26EE, r24	; 0x8026ee <NLimitIsActiveA3>
        sprintf(BufferSend,"!2231\r\n"); 
    5d18:	98 e0       	ldi	r25, 0x08	; 8
    5d1a:	e3 e9       	ldi	r30, 0x93	; 147
    5d1c:	f5 e2       	ldi	r31, 0x25	; 37
    5d1e:	a7 e5       	ldi	r26, 0x57	; 87
    5d20:	b9 e2       	ldi	r27, 0x29	; 41
    5d22:	01 90       	ld	r0, Z+
    5d24:	0d 92       	st	X+, r0
    5d26:	9a 95       	dec	r25
    5d28:	e1 f7       	brne	.-8      	; 0x5d22 <__stack+0x1d23>
        Responsing=1; 
    5d2a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
        SetDataReady;
    5d2e:	e0 ea       	ldi	r30, 0xA0	; 160
    5d30:	f6 e0       	ldi	r31, 0x06	; 6
    5d32:	84 81       	ldd	r24, Z+4	; 0x04
    5d34:	81 60       	ori	r24, 0x01	; 1
    5d36:	84 83       	std	Z+4, r24	; 0x04
    5d38:	3f c5       	rjmp	.+2686   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2800",5)==0)
    5d3a:	45 e0       	ldi	r20, 0x05	; 5
    5d3c:	50 e0       	ldi	r21, 0x00	; 0
    5d3e:	6b e9       	ldi	r22, 0x9B	; 155
    5d40:	75 e2       	ldi	r23, 0x25	; 37
    5d42:	80 e1       	ldi	r24, 0x10	; 16
    5d44:	97 e2       	ldi	r25, 0x27	; 39
    5d46:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5d4a:	89 2b       	or	r24, r25
    5d4c:	61 f4       	brne	.+24     	; 0x5d66 <__stack+0x1d67>
    { 
      EchoON=1; 
    5d4e:	81 e0       	ldi	r24, 0x01	; 1
    5d50:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <EchoON>
      if(EchoON) printf("!2800\n\r");
    5d54:	81 ea       	ldi	r24, 0xA1	; 161
    5d56:	95 e2       	ldi	r25, 0x25	; 37
    5d58:	9f 93       	push	r25
    5d5a:	8f 93       	push	r24
    5d5c:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
    5d60:	0f 90       	pop	r0
    5d62:	0f 90       	pop	r0
    5d64:	29 c5       	rjmp	.+2642   	; 0x67b8 <__stack+0x27b9>
    }
    else if(strncmp(cmdTemp,"#2900",5)==0)
    5d66:	45 e0       	ldi	r20, 0x05	; 5
    5d68:	50 e0       	ldi	r21, 0x00	; 0
    5d6a:	69 ea       	ldi	r22, 0xA9	; 169
    5d6c:	75 e2       	ldi	r23, 0x25	; 37
    5d6e:	80 e1       	ldi	r24, 0x10	; 16
    5d70:	97 e2       	ldi	r25, 0x27	; 39
    5d72:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5d76:	89 2b       	or	r24, r25
    5d78:	19 f4       	brne	.+6      	; 0x5d80 <__stack+0x1d81>
    { 
      EchoON=0; 
    5d7a:	10 92 fa 26 	sts	0x26FA, r1	; 0x8026fa <EchoON>
    5d7e:	1c c5       	rjmp	.+2616   	; 0x67b8 <__stack+0x27b9>
      if(EchoON) printf("!2900\n\r");
    }
    else if(strncmp(cmdTemp,"#3000",5)==0)
    5d80:	45 e0       	ldi	r20, 0x05	; 5
    5d82:	50 e0       	ldi	r21, 0x00	; 0
    5d84:	6f ea       	ldi	r22, 0xAF	; 175
    5d86:	75 e2       	ldi	r23, 0x25	; 37
    5d88:	80 e1       	ldi	r24, 0x10	; 16
    5d8a:	97 e2       	ldi	r25, 0x27	; 39
    5d8c:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    5d90:	89 2b       	or	r24, r25
    5d92:	09 f0       	breq	.+2      	; 0x5d96 <__stack+0x1d97>
    5d94:	9d c3       	rjmp	.+1850   	; 0x64d0 <__stack+0x24d1>
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5d96:	20 91 48 27 	lds	r18, 0x2748	; 0x802748 <AxisIsMoving1>
    5d9a:	21 11       	cpse	r18, r1
    5d9c:	0b c0       	rjmp	.+22     	; 0x5db4 <__stack+0x1db5>
    5d9e:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    5da2:	81 11       	cpse	r24, r1
    5da4:	09 c0       	rjmp	.+18     	; 0x5db8 <__stack+0x1db9>
    5da6:	91 e0       	ldi	r25, 0x01	; 1
    5da8:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <AxisIsMoving3>
    5dac:	81 11       	cpse	r24, r1
    5dae:	05 c0       	rjmp	.+10     	; 0x5dba <__stack+0x1dbb>
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	03 c0       	rjmp	.+6      	; 0x5dba <__stack+0x1dbb>
    5db4:	91 e0       	ldi	r25, 0x01	; 1
    5db6:	01 c0       	rjmp	.+2      	; 0x5dba <__stack+0x1dbb>
    5db8:	91 e0       	ldi	r25, 0x01	; 1
    5dba:	89 2f       	mov	r24, r25
    5dbc:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
         
    if (!ProgramRun)
    5dc0:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    5dc4:	91 11       	cpse	r25, r1
    5dc6:	f8 c4       	rjmp	.+2544   	; 0x67b8 <__stack+0x27b9>
     {
     while (AxisMoving == 1) 
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5dc8:	30 91 47 27 	lds	r19, 0x2747	; 0x802747 <AxisIsMoving2>
    5dcc:	91 e0       	ldi	r25, 0x01	; 1
    5dce:	40 91 46 27 	lds	r20, 0x2746	; 0x802746 <AxisIsMoving3>
    5dd2:	41 11       	cpse	r20, r1
    5dd4:	01 c0       	rjmp	.+2      	; 0x5dd8 <__stack+0x1dd9>
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    5dd8:	81 30       	cpi	r24, 0x01	; 1
    5dda:	51 f4       	brne	.+20     	; 0x5df0 <__stack+0x1df1>
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    5ddc:	21 11       	cpse	r18, r1
    5dde:	04 c0       	rjmp	.+8      	; 0x5de8 <__stack+0x1de9>
    5de0:	31 11       	cpse	r19, r1
    5de2:	04 c0       	rjmp	.+8      	; 0x5dec <__stack+0x1ded>
    5de4:	89 2f       	mov	r24, r25
    5de6:	f8 cf       	rjmp	.-16     	; 0x5dd8 <__stack+0x1dd9>
    5de8:	81 e0       	ldi	r24, 0x01	; 1
    5dea:	f6 cf       	rjmp	.-20     	; 0x5dd8 <__stack+0x1dd9>
    5dec:	81 e0       	ldi	r24, 0x01	; 1
    {//Run 4Axis Interpolation             
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
         
    if (!ProgramRun)
     {
     while (AxisMoving == 1) 
    5dee:	f4 cf       	rjmp	.-24     	; 0x5dd8 <__stack+0x1dd9>
    5df0:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
     {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
     }      
        if(SetJog1<AxisPosition1) CLR_DIR1;
    5df4:	c0 90 b8 27 	lds	r12, 0x27B8	; 0x8027b8 <SetJog1>
    5df8:	d0 90 b9 27 	lds	r13, 0x27B9	; 0x8027b9 <SetJog1+0x1>
    5dfc:	e0 90 ba 27 	lds	r14, 0x27BA	; 0x8027ba <SetJog1+0x2>
    5e00:	f0 90 bb 27 	lds	r15, 0x27BB	; 0x8027bb <SetJog1+0x3>
    5e04:	cd 82       	std	Y+5, r12	; 0x05
    5e06:	de 82       	std	Y+6, r13	; 0x06
    5e08:	ef 82       	std	Y+7, r14	; 0x07
    5e0a:	f8 86       	std	Y+8, r15	; 0x08
    5e0c:	e0 90 ac 27 	lds	r14, 0x27AC	; 0x8027ac <AxisPosition1>
    5e10:	f0 90 ad 27 	lds	r15, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    5e14:	00 91 ae 27 	lds	r16, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    5e18:	10 91 af 27 	lds	r17, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    5e1c:	eb 8e       	std	Y+27, r14	; 0x1b
    5e1e:	fc 8e       	std	Y+28, r15	; 0x1c
    5e20:	0d 8f       	std	Y+29, r16	; 0x1d
    5e22:	1e 8f       	std	Y+30, r17	; 0x1e
    5e24:	8d 80       	ldd	r8, Y+5	; 0x05
    5e26:	9e 80       	ldd	r9, Y+6	; 0x06
    5e28:	af 80       	ldd	r10, Y+7	; 0x07
    5e2a:	b8 84       	ldd	r11, Y+8	; 0x08
    5e2c:	8e 14       	cp	r8, r14
    5e2e:	9f 04       	cpc	r9, r15
    5e30:	a0 06       	cpc	r10, r16
    5e32:	b1 06       	cpc	r11, r17
    5e34:	2c f4       	brge	.+10     	; 0x5e40 <__stack+0x1e41>
    5e36:	e0 e2       	ldi	r30, 0x20	; 32
    5e38:	f7 e0       	ldi	r31, 0x07	; 7
    5e3a:	84 81       	ldd	r24, Z+4	; 0x04
    5e3c:	8f 7e       	andi	r24, 0xEF	; 239
    5e3e:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog1>AxisPosition1) SET_DIR1; 
    5e40:	ad 80       	ldd	r10, Y+5	; 0x05
    5e42:	be 80       	ldd	r11, Y+6	; 0x06
    5e44:	cf 80       	ldd	r12, Y+7	; 0x07
    5e46:	d8 84       	ldd	r13, Y+8	; 0x08
    5e48:	eb 8c       	ldd	r14, Y+27	; 0x1b
    5e4a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    5e4c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    5e4e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    5e50:	ea 14       	cp	r14, r10
    5e52:	fb 04       	cpc	r15, r11
    5e54:	0c 05       	cpc	r16, r12
    5e56:	1d 05       	cpc	r17, r13
    5e58:	2c f4       	brge	.+10     	; 0x5e64 <__stack+0x1e65>
    5e5a:	e0 e2       	ldi	r30, 0x20	; 32
    5e5c:	f7 e0       	ldi	r31, 0x07	; 7
    5e5e:	84 81       	ldd	r24, Z+4	; 0x04
    5e60:	80 61       	ori	r24, 0x10	; 16
    5e62:	84 83       	std	Z+4, r24	; 0x04
                
        if(SetJog2<AxisPosition2) CLR_DIR2;
    5e64:	80 90 b4 27 	lds	r8, 0x27B4	; 0x8027b4 <SetJog2>
    5e68:	90 90 b5 27 	lds	r9, 0x27B5	; 0x8027b5 <SetJog2+0x1>
    5e6c:	a0 90 b6 27 	lds	r10, 0x27B6	; 0x8027b6 <SetJog2+0x2>
    5e70:	b0 90 b7 27 	lds	r11, 0x27B7	; 0x8027b7 <SetJog2+0x3>
    5e74:	89 86       	std	Y+9, r8	; 0x09
    5e76:	9a 86       	std	Y+10, r9	; 0x0a
    5e78:	ab 86       	std	Y+11, r10	; 0x0b
    5e7a:	bc 86       	std	Y+12, r11	; 0x0c
    5e7c:	a0 90 a8 27 	lds	r10, 0x27A8	; 0x8027a8 <AxisPosition2>
    5e80:	b0 90 a9 27 	lds	r11, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    5e84:	c0 90 aa 27 	lds	r12, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    5e88:	d0 90 ab 27 	lds	r13, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    5e8c:	a9 8a       	std	Y+17, r10	; 0x11
    5e8e:	ba 8a       	std	Y+18, r11	; 0x12
    5e90:	cb 8a       	std	Y+19, r12	; 0x13
    5e92:	dc 8a       	std	Y+20, r13	; 0x14
    5e94:	e9 84       	ldd	r14, Y+9	; 0x09
    5e96:	fa 84       	ldd	r15, Y+10	; 0x0a
    5e98:	0b 85       	ldd	r16, Y+11	; 0x0b
    5e9a:	1c 85       	ldd	r17, Y+12	; 0x0c
    5e9c:	ea 14       	cp	r14, r10
    5e9e:	fb 04       	cpc	r15, r11
    5ea0:	0c 05       	cpc	r16, r12
    5ea2:	1d 05       	cpc	r17, r13
    5ea4:	2c f4       	brge	.+10     	; 0x5eb0 <__stack+0x1eb1>
    5ea6:	e0 e2       	ldi	r30, 0x20	; 32
    5ea8:	f7 e0       	ldi	r31, 0x07	; 7
    5eaa:	84 81       	ldd	r24, Z+4	; 0x04
    5eac:	8b 7f       	andi	r24, 0xFB	; 251
    5eae:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog2>AxisPosition2) SET_DIR2;  
    5eb0:	89 84       	ldd	r8, Y+9	; 0x09
    5eb2:	9a 84       	ldd	r9, Y+10	; 0x0a
    5eb4:	ab 84       	ldd	r10, Y+11	; 0x0b
    5eb6:	bc 84       	ldd	r11, Y+12	; 0x0c
    5eb8:	c9 88       	ldd	r12, Y+17	; 0x11
    5eba:	da 88       	ldd	r13, Y+18	; 0x12
    5ebc:	eb 88       	ldd	r14, Y+19	; 0x13
    5ebe:	fc 88       	ldd	r15, Y+20	; 0x14
    5ec0:	c8 14       	cp	r12, r8
    5ec2:	d9 04       	cpc	r13, r9
    5ec4:	ea 04       	cpc	r14, r10
    5ec6:	fb 04       	cpc	r15, r11
    5ec8:	2c f4       	brge	.+10     	; 0x5ed4 <__stack+0x1ed5>
    5eca:	e0 e2       	ldi	r30, 0x20	; 32
    5ecc:	f7 e0       	ldi	r31, 0x07	; 7
    5ece:	84 81       	ldd	r24, Z+4	; 0x04
    5ed0:	84 60       	ori	r24, 0x04	; 4
    5ed2:	84 83       	std	Z+4, r24	; 0x04
            
        if(SetJog3<AxisPosition3) CLR_DIR3;
    5ed4:	e0 90 b0 27 	lds	r14, 0x27B0	; 0x8027b0 <SetJog3>
    5ed8:	f0 90 b1 27 	lds	r15, 0x27B1	; 0x8027b1 <SetJog3+0x1>
    5edc:	00 91 b2 27 	lds	r16, 0x27B2	; 0x8027b2 <SetJog3+0x2>
    5ee0:	10 91 b3 27 	lds	r17, 0x27B3	; 0x8027b3 <SetJog3+0x3>
    5ee4:	ed 86       	std	Y+13, r14	; 0x0d
    5ee6:	fe 86       	std	Y+14, r15	; 0x0e
    5ee8:	0f 87       	std	Y+15, r16	; 0x0f
    5eea:	18 8b       	std	Y+16, r17	; 0x10
    5eec:	00 91 a4 27 	lds	r16, 0x27A4	; 0x8027a4 <AxisPosition3>
    5ef0:	10 91 a5 27 	lds	r17, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    5ef4:	20 91 a6 27 	lds	r18, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    5ef8:	30 91 a7 27 	lds	r19, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    5efc:	09 83       	std	Y+1, r16	; 0x01
    5efe:	1a 83       	std	Y+2, r17	; 0x02
    5f00:	2b 83       	std	Y+3, r18	; 0x03
    5f02:	3c 83       	std	Y+4, r19	; 0x04
    5f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f08:	af 85       	ldd	r26, Y+15	; 0x0f
    5f0a:	b8 89       	ldd	r27, Y+16	; 0x10
    5f0c:	80 17       	cp	r24, r16
    5f0e:	91 07       	cpc	r25, r17
    5f10:	a2 07       	cpc	r26, r18
    5f12:	b3 07       	cpc	r27, r19
    5f14:	2c f4       	brge	.+10     	; 0x5f20 <__stack+0x1f21>
    5f16:	e0 e2       	ldi	r30, 0x20	; 32
    5f18:	f7 e0       	ldi	r31, 0x07	; 7
    5f1a:	84 81       	ldd	r24, Z+4	; 0x04
    5f1c:	8e 7f       	andi	r24, 0xFE	; 254
    5f1e:	84 83       	std	Z+4, r24	; 0x04
        if(SetJog3>AxisPosition3) SET_DIR3;           
    5f20:	8d 84       	ldd	r8, Y+13	; 0x0d
    5f22:	9e 84       	ldd	r9, Y+14	; 0x0e
    5f24:	af 84       	ldd	r10, Y+15	; 0x0f
    5f26:	b8 88       	ldd	r11, Y+16	; 0x10
    5f28:	c9 80       	ldd	r12, Y+1	; 0x01
    5f2a:	da 80       	ldd	r13, Y+2	; 0x02
    5f2c:	eb 80       	ldd	r14, Y+3	; 0x03
    5f2e:	fc 80       	ldd	r15, Y+4	; 0x04
    5f30:	c8 14       	cp	r12, r8
    5f32:	d9 04       	cpc	r13, r9
    5f34:	ea 04       	cpc	r14, r10
    5f36:	fb 04       	cpc	r15, r11
    5f38:	2c f4       	brge	.+10     	; 0x5f44 <__stack+0x1f45>
    5f3a:	e0 e2       	ldi	r30, 0x20	; 32
    5f3c:	f7 e0       	ldi	r31, 0x07	; 7
    5f3e:	84 81       	ldd	r24, Z+4	; 0x04
    5f40:	81 60       	ori	r24, 0x01	; 1
    5f42:	84 83       	std	Z+4, r24	; 0x04
              
        if(SetSpeed1 >= SetSpeed2 && SetSpeed1 >= SetSpeed3)
    5f44:	60 91 79 27 	lds	r22, 0x2779	; 0x802779 <SetSpeed1>
    5f48:	70 91 7a 27 	lds	r23, 0x277A	; 0x80277a <SetSpeed1+0x1>
    5f4c:	80 91 7b 27 	lds	r24, 0x277B	; 0x80277b <SetSpeed1+0x2>
    5f50:	90 91 7c 27 	lds	r25, 0x277C	; 0x80277c <SetSpeed1+0x3>
    5f54:	40 90 75 27 	lds	r4, 0x2775	; 0x802775 <SetSpeed2>
    5f58:	50 90 76 27 	lds	r5, 0x2776	; 0x802776 <SetSpeed2+0x1>
    5f5c:	60 90 77 27 	lds	r6, 0x2777	; 0x802777 <SetSpeed2+0x2>
    5f60:	70 90 78 27 	lds	r7, 0x2778	; 0x802778 <SetSpeed2+0x3>
    5f64:	64 15       	cp	r22, r4
    5f66:	75 05       	cpc	r23, r5
    5f68:	86 05       	cpc	r24, r6
    5f6a:	97 05       	cpc	r25, r7
    5f6c:	0c f4       	brge	.+2      	; 0x5f70 <__stack+0x1f71>
    5f6e:	5a c0       	rjmp	.+180    	; 0x6024 <__stack+0x2025>
    5f70:	80 90 71 27 	lds	r8, 0x2771	; 0x802771 <SetSpeed3>
    5f74:	90 90 72 27 	lds	r9, 0x2772	; 0x802772 <SetSpeed3+0x1>
    5f78:	a0 90 73 27 	lds	r10, 0x2773	; 0x802773 <SetSpeed3+0x2>
    5f7c:	b0 90 74 27 	lds	r11, 0x2774	; 0x802774 <SetSpeed3+0x3>
    5f80:	68 15       	cp	r22, r8
    5f82:	79 05       	cpc	r23, r9
    5f84:	8a 05       	cpc	r24, r10
    5f86:	9b 05       	cpc	r25, r11
    5f88:	0c f4       	brge	.+2      	; 0x5f8c <__stack+0x1f8d>
    5f8a:	46 c0       	rjmp	.+140    	; 0x6018 <__stack+0x2019>
          { 
            MaxSpeed = SetSpeed1; 
    5f8c:	60 93 6d 27 	sts	0x276D, r22	; 0x80276d <MaxSpeed>
    5f90:	70 93 6e 27 	sts	0x276E, r23	; 0x80276e <MaxSpeed+0x1>
    5f94:	80 93 6f 27 	sts	0x276F, r24	; 0x80276f <MaxSpeed+0x2>
    5f98:	90 93 70 27 	sts	0x2770, r25	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC1; 
    5f9c:	80 90 69 27 	lds	r8, 0x2769	; 0x802769 <ACC1>
    5fa0:	90 90 6a 27 	lds	r9, 0x276A	; 0x80276a <ACC1+0x1>
    5fa4:	a0 90 6b 27 	lds	r10, 0x276B	; 0x80276b <ACC1+0x2>
    5fa8:	b0 90 6c 27 	lds	r11, 0x276C	; 0x80276c <ACC1+0x3>
    5fac:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    5fb0:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    5fb4:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    5fb8:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
            IDEC=DEC1; 
    5fbc:	80 90 5d 27 	lds	r8, 0x275D	; 0x80275d <DEC1>
    5fc0:	90 90 5e 27 	lds	r9, 0x275E	; 0x80275e <DEC1+0x1>
    5fc4:	a0 90 5f 27 	lds	r10, 0x275F	; 0x80275f <DEC1+0x2>
    5fc8:	b0 90 60 27 	lds	r11, 0x2760	; 0x802760 <DEC1+0x3>
    5fcc:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    5fd0:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    5fd4:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    5fd8:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
            MaxDistanceToGo=labs(AxisPosition1-SetJog1);
    5fdc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5fde:	1c 8d       	ldd	r17, Y+28	; 0x1c
    5fe0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5fe2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5fe4:	8d 80       	ldd	r8, Y+5	; 0x05
    5fe6:	9e 80       	ldd	r9, Y+6	; 0x06
    5fe8:	af 80       	ldd	r10, Y+7	; 0x07
    5fea:	b8 84       	ldd	r11, Y+8	; 0x08
    5fec:	08 19       	sub	r16, r8
    5fee:	19 09       	sbc	r17, r9
    5ff0:	2a 09       	sbc	r18, r10
    5ff2:	3b 09       	sbc	r19, r11
    5ff4:	48 01       	movw	r8, r16
    5ff6:	59 01       	movw	r10, r18
    5ff8:	3a f4       	brpl	.+14     	; 0x6008 <__stack+0x2009>
    5ffa:	88 24       	eor	r8, r8
    5ffc:	99 24       	eor	r9, r9
    5ffe:	54 01       	movw	r10, r8
    6000:	80 1a       	sub	r8, r16
    6002:	91 0a       	sbc	r9, r17
    6004:	a2 0a       	sbc	r10, r18
    6006:	b3 0a       	sbc	r11, r19
    6008:	80 92 94 27 	sts	0x2794, r8	; 0x802794 <MaxDistanceToGo>
    600c:	90 92 95 27 	sts	0x2795, r9	; 0x802795 <MaxDistanceToGo+0x1>
    6010:	a0 92 96 27 	sts	0x2796, r10	; 0x802796 <MaxDistanceToGo+0x2>
    6014:	b0 92 97 27 	sts	0x2797, r11	; 0x802797 <MaxDistanceToGo+0x3>
          }
        if(SetSpeed2 >= SetSpeed1 && SetSpeed2 >= SetSpeed3)
    6018:	46 16       	cp	r4, r22
    601a:	57 06       	cpc	r5, r23
    601c:	68 06       	cpc	r6, r24
    601e:	79 06       	cpc	r7, r25
    6020:	0c f4       	brge	.+2      	; 0x6024 <__stack+0x2025>
    6022:	54 c0       	rjmp	.+168    	; 0x60cc <__stack+0x20cd>
    6024:	80 90 71 27 	lds	r8, 0x2771	; 0x802771 <SetSpeed3>
    6028:	90 90 72 27 	lds	r9, 0x2772	; 0x802772 <SetSpeed3+0x1>
    602c:	a0 90 73 27 	lds	r10, 0x2773	; 0x802773 <SetSpeed3+0x2>
    6030:	b0 90 74 27 	lds	r11, 0x2774	; 0x802774 <SetSpeed3+0x3>
    6034:	48 14       	cp	r4, r8
    6036:	59 04       	cpc	r5, r9
    6038:	6a 04       	cpc	r6, r10
    603a:	7b 04       	cpc	r7, r11
    603c:	0c f4       	brge	.+2      	; 0x6040 <__stack+0x2041>
    603e:	54 c0       	rjmp	.+168    	; 0x60e8 <__stack+0x20e9>
          { 
            MaxSpeed = SetSpeed2; 
    6040:	40 92 6d 27 	sts	0x276D, r4	; 0x80276d <MaxSpeed>
    6044:	50 92 6e 27 	sts	0x276E, r5	; 0x80276e <MaxSpeed+0x1>
    6048:	60 92 6f 27 	sts	0x276F, r6	; 0x80276f <MaxSpeed+0x2>
    604c:	70 92 70 27 	sts	0x2770, r7	; 0x802770 <MaxSpeed+0x3>
            IACC=ACC2; 
    6050:	80 90 65 27 	lds	r8, 0x2765	; 0x802765 <ACC2>
    6054:	90 90 66 27 	lds	r9, 0x2766	; 0x802766 <ACC2+0x1>
    6058:	a0 90 67 27 	lds	r10, 0x2767	; 0x802767 <ACC2+0x2>
    605c:	b0 90 68 27 	lds	r11, 0x2768	; 0x802768 <ACC2+0x3>
    6060:	80 92 51 27 	sts	0x2751, r8	; 0x802751 <IACC>
    6064:	90 92 52 27 	sts	0x2752, r9	; 0x802752 <IACC+0x1>
    6068:	a0 92 53 27 	sts	0x2753, r10	; 0x802753 <IACC+0x2>
    606c:	b0 92 54 27 	sts	0x2754, r11	; 0x802754 <IACC+0x3>
            IDEC=DEC2; 
    6070:	80 90 59 27 	lds	r8, 0x2759	; 0x802759 <DEC2>
    6074:	90 90 5a 27 	lds	r9, 0x275A	; 0x80275a <DEC2+0x1>
    6078:	a0 90 5b 27 	lds	r10, 0x275B	; 0x80275b <DEC2+0x2>
    607c:	b0 90 5c 27 	lds	r11, 0x275C	; 0x80275c <DEC2+0x3>
    6080:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6084:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6088:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    608c:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
            MaxDistanceToGo=labs(AxisPosition2-SetJog2);
    6090:	09 89       	ldd	r16, Y+17	; 0x11
    6092:	1a 89       	ldd	r17, Y+18	; 0x12
    6094:	2b 89       	ldd	r18, Y+19	; 0x13
    6096:	3c 89       	ldd	r19, Y+20	; 0x14
    6098:	a9 84       	ldd	r10, Y+9	; 0x09
    609a:	ba 84       	ldd	r11, Y+10	; 0x0a
    609c:	cb 84       	ldd	r12, Y+11	; 0x0b
    609e:	dc 84       	ldd	r13, Y+12	; 0x0c
    60a0:	0a 19       	sub	r16, r10
    60a2:	1b 09       	sbc	r17, r11
    60a4:	2c 09       	sbc	r18, r12
    60a6:	3d 09       	sbc	r19, r13
    60a8:	48 01       	movw	r8, r16
    60aa:	59 01       	movw	r10, r18
    60ac:	3a f4       	brpl	.+14     	; 0x60bc <__stack+0x20bd>
    60ae:	88 24       	eor	r8, r8
    60b0:	99 24       	eor	r9, r9
    60b2:	54 01       	movw	r10, r8
    60b4:	80 1a       	sub	r8, r16
    60b6:	91 0a       	sbc	r9, r17
    60b8:	a2 0a       	sbc	r10, r18
    60ba:	b3 0a       	sbc	r11, r19
    60bc:	80 92 94 27 	sts	0x2794, r8	; 0x802794 <MaxDistanceToGo>
    60c0:	90 92 95 27 	sts	0x2795, r9	; 0x802795 <MaxDistanceToGo+0x1>
    60c4:	a0 92 96 27 	sts	0x2796, r10	; 0x802796 <MaxDistanceToGo+0x2>
    60c8:	b0 92 97 27 	sts	0x2797, r11	; 0x802797 <MaxDistanceToGo+0x3>
          }
        if(SetSpeed3 >= SetSpeed2 && SetSpeed3 >= SetSpeed1)
    60cc:	80 90 71 27 	lds	r8, 0x2771	; 0x802771 <SetSpeed3>
    60d0:	90 90 72 27 	lds	r9, 0x2772	; 0x802772 <SetSpeed3+0x1>
    60d4:	a0 90 73 27 	lds	r10, 0x2773	; 0x802773 <SetSpeed3+0x2>
    60d8:	b0 90 74 27 	lds	r11, 0x2774	; 0x802774 <SetSpeed3+0x3>
    60dc:	84 14       	cp	r8, r4
    60de:	95 04       	cpc	r9, r5
    60e0:	a6 04       	cpc	r10, r6
    60e2:	b7 04       	cpc	r11, r7
    60e4:	0c f4       	brge	.+2      	; 0x60e8 <__stack+0x20e9>
    60e6:	4c c0       	rjmp	.+152    	; 0x6180 <__stack+0x2181>
    60e8:	86 16       	cp	r8, r22
    60ea:	97 06       	cpc	r9, r23
    60ec:	a8 06       	cpc	r10, r24
    60ee:	b9 06       	cpc	r11, r25
    60f0:	0c f4       	brge	.+2      	; 0x60f4 <__stack+0x20f5>
    60f2:	46 c0       	rjmp	.+140    	; 0x6180 <__stack+0x2181>
        { 
          MaxSpeed = SetSpeed3; 
    60f4:	80 92 6d 27 	sts	0x276D, r8	; 0x80276d <MaxSpeed>
    60f8:	90 92 6e 27 	sts	0x276E, r9	; 0x80276e <MaxSpeed+0x1>
    60fc:	a0 92 6f 27 	sts	0x276F, r10	; 0x80276f <MaxSpeed+0x2>
    6100:	b0 92 70 27 	sts	0x2770, r11	; 0x802770 <MaxSpeed+0x3>
          IACC=ACC3; 
    6104:	00 91 61 27 	lds	r16, 0x2761	; 0x802761 <ACC3>
    6108:	10 91 62 27 	lds	r17, 0x2762	; 0x802762 <ACC3+0x1>
    610c:	20 91 63 27 	lds	r18, 0x2763	; 0x802763 <ACC3+0x2>
    6110:	30 91 64 27 	lds	r19, 0x2764	; 0x802764 <ACC3+0x3>
    6114:	00 93 51 27 	sts	0x2751, r16	; 0x802751 <IACC>
    6118:	10 93 52 27 	sts	0x2752, r17	; 0x802752 <IACC+0x1>
    611c:	20 93 53 27 	sts	0x2753, r18	; 0x802753 <IACC+0x2>
    6120:	30 93 54 27 	sts	0x2754, r19	; 0x802754 <IACC+0x3>
          IDEC=DEC3; 
    6124:	00 91 55 27 	lds	r16, 0x2755	; 0x802755 <DEC3>
    6128:	10 91 56 27 	lds	r17, 0x2756	; 0x802756 <DEC3+0x1>
    612c:	20 91 57 27 	lds	r18, 0x2757	; 0x802757 <DEC3+0x2>
    6130:	30 91 58 27 	lds	r19, 0x2758	; 0x802758 <DEC3+0x3>
    6134:	00 93 4d 27 	sts	0x274D, r16	; 0x80274d <IDEC>
    6138:	10 93 4e 27 	sts	0x274E, r17	; 0x80274e <IDEC+0x1>
    613c:	20 93 4f 27 	sts	0x274F, r18	; 0x80274f <IDEC+0x2>
    6140:	30 93 50 27 	sts	0x2750, r19	; 0x802750 <IDEC+0x3>
          MaxDistanceToGo=labs(AxisPosition3-SetJog3);
    6144:	c9 80       	ldd	r12, Y+1	; 0x01
    6146:	da 80       	ldd	r13, Y+2	; 0x02
    6148:	eb 80       	ldd	r14, Y+3	; 0x03
    614a:	fc 80       	ldd	r15, Y+4	; 0x04
    614c:	0d 85       	ldd	r16, Y+13	; 0x0d
    614e:	1e 85       	ldd	r17, Y+14	; 0x0e
    6150:	2f 85       	ldd	r18, Y+15	; 0x0f
    6152:	38 89       	ldd	r19, Y+16	; 0x10
    6154:	c0 1a       	sub	r12, r16
    6156:	d1 0a       	sbc	r13, r17
    6158:	e2 0a       	sbc	r14, r18
    615a:	f3 0a       	sbc	r15, r19
    615c:	97 01       	movw	r18, r14
    615e:	86 01       	movw	r16, r12
    6160:	3a f4       	brpl	.+14     	; 0x6170 <__stack+0x2171>
    6162:	30 95       	com	r19
    6164:	20 95       	com	r18
    6166:	10 95       	com	r17
    6168:	01 95       	neg	r16
    616a:	1f 4f       	sbci	r17, 0xFF	; 255
    616c:	2f 4f       	sbci	r18, 0xFF	; 255
    616e:	3f 4f       	sbci	r19, 0xFF	; 255
    6170:	00 93 94 27 	sts	0x2794, r16	; 0x802794 <MaxDistanceToGo>
    6174:	10 93 95 27 	sts	0x2795, r17	; 0x802795 <MaxDistanceToGo+0x1>
    6178:	20 93 96 27 	sts	0x2796, r18	; 0x802796 <MaxDistanceToGo+0x2>
    617c:	30 93 97 27 	sts	0x2797, r19	; 0x802797 <MaxDistanceToGo+0x3>
        }
        if(MaxSpeed>0)
    6180:	c0 90 6d 27 	lds	r12, 0x276D	; 0x80276d <MaxSpeed>
    6184:	d0 90 6e 27 	lds	r13, 0x276E	; 0x80276e <MaxSpeed+0x1>
    6188:	e0 90 6f 27 	lds	r14, 0x276F	; 0x80276f <MaxSpeed+0x2>
    618c:	f0 90 70 27 	lds	r15, 0x2770	; 0x802770 <MaxSpeed+0x3>
    6190:	c9 82       	std	Y+1, r12	; 0x01
    6192:	da 82       	std	Y+2, r13	; 0x02
    6194:	eb 82       	std	Y+3, r14	; 0x03
    6196:	fc 82       	std	Y+4, r15	; 0x04
    6198:	1c 14       	cp	r1, r12
    619a:	1d 04       	cpc	r1, r13
    619c:	1e 04       	cpc	r1, r14
    619e:	1f 04       	cpc	r1, r15
    61a0:	0c f0       	brlt	.+2      	; 0x61a4 <__stack+0x21a5>
    61a2:	40 c0       	rjmp	.+128    	; 0x6224 <__stack+0x2225>
        {
          Ma1=(unsigned int)((float)(SetSpeed1/MaxSpeed)*1000);
    61a4:	a7 01       	movw	r20, r14
    61a6:	96 01       	movw	r18, r12
    61a8:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    61ac:	ca 01       	movw	r24, r20
    61ae:	b9 01       	movw	r22, r18
    61b0:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    61b4:	20 e0       	ldi	r18, 0x00	; 0
    61b6:	30 e0       	ldi	r19, 0x00	; 0
    61b8:	4a e7       	ldi	r20, 0x7A	; 122
    61ba:	54 e4       	ldi	r21, 0x44	; 68
    61bc:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    61c0:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    61c4:	60 93 30 27 	sts	0x2730, r22	; 0x802730 <Ma1>
    61c8:	70 93 31 27 	sts	0x2731, r23	; 0x802731 <Ma1+0x1>
          Ma2=(unsigned int)((float)(SetSpeed2/MaxSpeed)*1000);  
    61cc:	c3 01       	movw	r24, r6
    61ce:	b2 01       	movw	r22, r4
    61d0:	a7 01       	movw	r20, r14
    61d2:	96 01       	movw	r18, r12
    61d4:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    61d8:	ca 01       	movw	r24, r20
    61da:	b9 01       	movw	r22, r18
    61dc:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    61e0:	20 e0       	ldi	r18, 0x00	; 0
    61e2:	30 e0       	ldi	r19, 0x00	; 0
    61e4:	4a e7       	ldi	r20, 0x7A	; 122
    61e6:	54 e4       	ldi	r21, 0x44	; 68
    61e8:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    61ec:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    61f0:	60 93 2e 27 	sts	0x272E, r22	; 0x80272e <Ma2>
    61f4:	70 93 2f 27 	sts	0x272F, r23	; 0x80272f <Ma2+0x1>
          Ma3=(unsigned int)((float)(SetSpeed3/MaxSpeed)*1000);          		  
    61f8:	c5 01       	movw	r24, r10
    61fa:	b4 01       	movw	r22, r8
    61fc:	a7 01       	movw	r20, r14
    61fe:	96 01       	movw	r18, r12
    6200:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6204:	ca 01       	movw	r24, r20
    6206:	b9 01       	movw	r22, r18
    6208:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    620c:	20 e0       	ldi	r18, 0x00	; 0
    620e:	30 e0       	ldi	r19, 0x00	; 0
    6210:	4a e7       	ldi	r20, 0x7A	; 122
    6212:	54 e4       	ldi	r21, 0x44	; 68
    6214:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    6218:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    621c:	60 93 2c 27 	sts	0x272C, r22	; 0x80272c <Ma3>
    6220:	70 93 2d 27 	sts	0x272D, r23	; 0x80272d <Ma3+0x1>
        }
        CurSpeedFrq=0;
    6224:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    6228:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    622c:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    6230:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
        TCC0.CCA=0xFFFF;                                                   
    6234:	8f ef       	ldi	r24, 0xFF	; 255
    6236:	9f ef       	ldi	r25, 0xFF	; 255
    6238:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    623c:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
        if(IACC>0)
    6240:	40 90 51 27 	lds	r4, 0x2751	; 0x802751 <IACC>
    6244:	50 90 52 27 	lds	r5, 0x2752	; 0x802752 <IACC+0x1>
    6248:	60 90 53 27 	lds	r6, 0x2753	; 0x802753 <IACC+0x2>
    624c:	70 90 54 27 	lds	r7, 0x2754	; 0x802754 <IACC+0x3>
    6250:	14 14       	cp	r1, r4
    6252:	15 04       	cpc	r1, r5
    6254:	16 04       	cpc	r1, r6
    6256:	17 04       	cpc	r1, r7
    6258:	54 f5       	brge	.+84     	; 0x62ae <__stack+0x22af>
        {                 
          ACCSpeedINT = (long int) (100 * (float)((float)MaxSpeed / (float)IACC));// t = V/a                        
          ACCSpeedINT = (long int)(MaxSpeed / ACCSpeedINT); 
    625a:	69 81       	ldd	r22, Y+1	; 0x01
    625c:	7a 81       	ldd	r23, Y+2	; 0x02
    625e:	8b 81       	ldd	r24, Y+3	; 0x03
    6260:	9c 81       	ldd	r25, Y+4	; 0x04
    6262:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6266:	4b 01       	movw	r8, r22
    6268:	5c 01       	movw	r10, r24
    626a:	c3 01       	movw	r24, r6
    626c:	b2 01       	movw	r22, r4
    626e:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6272:	9b 01       	movw	r18, r22
    6274:	ac 01       	movw	r20, r24
    6276:	c5 01       	movw	r24, r10
    6278:	b4 01       	movw	r22, r8
    627a:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    627e:	20 e0       	ldi	r18, 0x00	; 0
    6280:	30 e0       	ldi	r19, 0x00	; 0
    6282:	48 ec       	ldi	r20, 0xC8	; 200
    6284:	52 e4       	ldi	r21, 0x42	; 66
    6286:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    628a:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    628e:	9b 01       	movw	r18, r22
    6290:	ac 01       	movw	r20, r24
    6292:	69 81       	ldd	r22, Y+1	; 0x01
    6294:	7a 81       	ldd	r23, Y+2	; 0x02
    6296:	8b 81       	ldd	r24, Y+3	; 0x03
    6298:	9c 81       	ldd	r25, Y+4	; 0x04
    629a:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    629e:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    62a2:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    62a6:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    62aa:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
        }
        if(IDEC>0)
    62ae:	80 90 4d 27 	lds	r8, 0x274D	; 0x80274d <IDEC>
    62b2:	90 90 4e 27 	lds	r9, 0x274E	; 0x80274e <IDEC+0x1>
    62b6:	a0 90 4f 27 	lds	r10, 0x274F	; 0x80274f <IDEC+0x2>
    62ba:	b0 90 50 27 	lds	r11, 0x2750	; 0x802750 <IDEC+0x3>
    62be:	18 14       	cp	r1, r8
    62c0:	19 04       	cpc	r1, r9
    62c2:	1a 04       	cpc	r1, r10
    62c4:	1b 04       	cpc	r1, r11
    62c6:	54 f5       	brge	.+84     	; 0x631c <__stack+0x231d>
        {       
          DECSpeedINT = (long int)(100 * (float)((float)MaxSpeed / (float)IDEC));// t = V/a                        
          DECSpeedINT = (long int)(MaxSpeed / DECSpeedINT);   
    62c8:	69 81       	ldd	r22, Y+1	; 0x01
    62ca:	7a 81       	ldd	r23, Y+2	; 0x02
    62cc:	8b 81       	ldd	r24, Y+3	; 0x03
    62ce:	9c 81       	ldd	r25, Y+4	; 0x04
    62d0:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    62d4:	6b 01       	movw	r12, r22
    62d6:	7c 01       	movw	r14, r24
    62d8:	c5 01       	movw	r24, r10
    62da:	b4 01       	movw	r22, r8
    62dc:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    62e0:	9b 01       	movw	r18, r22
    62e2:	ac 01       	movw	r20, r24
    62e4:	c7 01       	movw	r24, r14
    62e6:	b6 01       	movw	r22, r12
    62e8:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    62ec:	20 e0       	ldi	r18, 0x00	; 0
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	48 ec       	ldi	r20, 0xC8	; 200
    62f2:	52 e4       	ldi	r21, 0x42	; 66
    62f4:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    62f8:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    62fc:	9b 01       	movw	r18, r22
    62fe:	ac 01       	movw	r20, r24
    6300:	69 81       	ldd	r22, Y+1	; 0x01
    6302:	7a 81       	ldd	r23, Y+2	; 0x02
    6304:	8b 81       	ldd	r24, Y+3	; 0x03
    6306:	9c 81       	ldd	r25, Y+4	; 0x04
    6308:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    630c:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6310:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6314:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6318:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
        }                                                  
                       
        DecDTG = pow(MaxSpeed,2)/(IDEC);            
    631c:	69 81       	ldd	r22, Y+1	; 0x01
    631e:	7a 81       	ldd	r23, Y+2	; 0x02
    6320:	8b 81       	ldd	r24, Y+3	; 0x03
    6322:	9c 81       	ldd	r25, Y+4	; 0x04
    6324:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6328:	9b 01       	movw	r18, r22
    632a:	ac 01       	movw	r20, r24
    632c:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    6330:	6b 01       	movw	r12, r22
    6332:	7c 01       	movw	r14, r24
    6334:	c5 01       	movw	r24, r10
    6336:	b4 01       	movw	r22, r8
    6338:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    633c:	9b 01       	movw	r18, r22
    633e:	ac 01       	movw	r20, r24
    6340:	c7 01       	movw	r24, r14
    6342:	b6 01       	movw	r22, r12
    6344:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6348:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    634c:	60 93 80 27 	sts	0x2780, r22	; 0x802780 <DecDTG>
    6350:	70 93 81 27 	sts	0x2781, r23	; 0x802781 <DecDTG+0x1>
    6354:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <DecDTG+0x2>
    6358:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <DecDTG+0x3>
        AccDTG = MaxDistanceToGo - pow(MaxSpeed,2)/(IACC);
    635c:	00 91 94 27 	lds	r16, 0x2794	; 0x802794 <MaxDistanceToGo>
    6360:	30 90 95 27 	lds	r3, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    6364:	20 90 96 27 	lds	r2, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    6368:	10 91 97 27 	lds	r17, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    636c:	60 2f       	mov	r22, r16
    636e:	73 2d       	mov	r23, r3
    6370:	82 2d       	mov	r24, r2
    6372:	91 2f       	mov	r25, r17
    6374:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6378:	6d 8b       	std	Y+21, r22	; 0x15
    637a:	7e 8b       	std	Y+22, r23	; 0x16
    637c:	8f 8b       	std	Y+23, r24	; 0x17
    637e:	98 8f       	std	Y+24, r25	; 0x18
    6380:	c3 01       	movw	r24, r6
    6382:	b2 01       	movw	r22, r4
    6384:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6388:	9b 01       	movw	r18, r22
    638a:	ac 01       	movw	r20, r24
    638c:	c7 01       	movw	r24, r14
    638e:	b6 01       	movw	r22, r12
    6390:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6394:	9b 01       	movw	r18, r22
    6396:	ac 01       	movw	r20, r24
    6398:	6d 89       	ldd	r22, Y+21	; 0x15
    639a:	7e 89       	ldd	r23, Y+22	; 0x16
    639c:	8f 89       	ldd	r24, Y+23	; 0x17
    639e:	98 8d       	ldd	r25, Y+24	; 0x18
    63a0:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__subsf3>
    63a4:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    63a8:	60 93 84 27 	sts	0x2784, r22	; 0x802784 <AccDTG>
    63ac:	70 93 85 27 	sts	0x2785, r23	; 0x802785 <AccDTG+0x1>
    63b0:	80 93 86 27 	sts	0x2786, r24	; 0x802786 <AccDTG+0x2>
    63b4:	90 93 87 27 	sts	0x2787, r25	; 0x802787 <AccDTG+0x3>
                 
        DistanceToGo1=labs(AxisPosition1-SetJog1);  
    63b8:	cb 8c       	ldd	r12, Y+27	; 0x1b
    63ba:	dc 8c       	ldd	r13, Y+28	; 0x1c
    63bc:	ed 8c       	ldd	r14, Y+29	; 0x1d
    63be:	fe 8c       	ldd	r15, Y+30	; 0x1e
    63c0:	2d 81       	ldd	r18, Y+5	; 0x05
    63c2:	3e 81       	ldd	r19, Y+6	; 0x06
    63c4:	4f 81       	ldd	r20, Y+7	; 0x07
    63c6:	58 85       	ldd	r21, Y+8	; 0x08
    63c8:	c2 1a       	sub	r12, r18
    63ca:	d3 0a       	sbc	r13, r19
    63cc:	e4 0a       	sbc	r14, r20
    63ce:	f5 0a       	sbc	r15, r21
    63d0:	d7 01       	movw	r26, r14
    63d2:	c6 01       	movw	r24, r12
    63d4:	3a f4       	brpl	.+14     	; 0x63e4 <__stack+0x23e5>
    63d6:	88 27       	eor	r24, r24
    63d8:	99 27       	eor	r25, r25
    63da:	dc 01       	movw	r26, r24
    63dc:	8c 19       	sub	r24, r12
    63de:	9d 09       	sbc	r25, r13
    63e0:	ae 09       	sbc	r26, r14
    63e2:	bf 09       	sbc	r27, r15
    63e4:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    63e8:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    63ec:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    63f0:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
        DistanceToGo2=labs(AxisPosition2-SetJog2);        
    63f4:	89 89       	ldd	r24, Y+17	; 0x11
    63f6:	9a 89       	ldd	r25, Y+18	; 0x12
    63f8:	ab 89       	ldd	r26, Y+19	; 0x13
    63fa:	bc 89       	ldd	r27, Y+20	; 0x14
    63fc:	c9 84       	ldd	r12, Y+9	; 0x09
    63fe:	da 84       	ldd	r13, Y+10	; 0x0a
    6400:	eb 84       	ldd	r14, Y+11	; 0x0b
    6402:	fc 84       	ldd	r15, Y+12	; 0x0c
    6404:	8c 19       	sub	r24, r12
    6406:	9d 09       	sbc	r25, r13
    6408:	ae 09       	sbc	r26, r14
    640a:	bf 09       	sbc	r27, r15
    640c:	ac 01       	movw	r20, r24
    640e:	bd 01       	movw	r22, r26
    6410:	3a f4       	brpl	.+14     	; 0x6420 <__stack+0x2421>
    6412:	44 27       	eor	r20, r20
    6414:	55 27       	eor	r21, r21
    6416:	ba 01       	movw	r22, r20
    6418:	48 1b       	sub	r20, r24
    641a:	59 0b       	sbc	r21, r25
    641c:	6a 0b       	sbc	r22, r26
    641e:	7b 0b       	sbc	r23, r27
    6420:	40 93 8c 27 	sts	0x278C, r20	; 0x80278c <DistanceToGo2>
    6424:	50 93 8d 27 	sts	0x278D, r21	; 0x80278d <DistanceToGo2+0x1>
    6428:	60 93 8e 27 	sts	0x278E, r22	; 0x80278e <DistanceToGo2+0x2>
    642c:	70 93 8f 27 	sts	0x278F, r23	; 0x80278f <DistanceToGo2+0x3>
        ACC=1; 
    6430:	ff 24       	eor	r15, r15
    6432:	f3 94       	inc	r15
    6434:	f0 92 39 27 	sts	0x2739, r15	; 0x802739 <ACC>
        sprintf(BufferSend,"!30\tMaxS:%d\tIACC:%d\tIDEC:%d\n\rMa1:%d\tMa2:%d\tBACC:%d\tBDEC:%d\tMAXDTG:%d\n\r",MaxSpeed,IACC,IDEC,Ma1,Ma2,ACCSpeedINT,DECSpeedINT,MaxDistanceToGo); 
    6438:	1f 93       	push	r17
    643a:	2f 92       	push	r2
    643c:	3f 92       	push	r3
    643e:	0f 93       	push	r16
    6440:	80 91 3d 27 	lds	r24, 0x273D	; 0x80273d <DECSpeedINT+0x3>
    6444:	8f 93       	push	r24
    6446:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <DECSpeedINT+0x2>
    644a:	8f 93       	push	r24
    644c:	80 91 3b 27 	lds	r24, 0x273B	; 0x80273b <DECSpeedINT+0x1>
    6450:	8f 93       	push	r24
    6452:	80 91 3a 27 	lds	r24, 0x273A	; 0x80273a <DECSpeedINT>
    6456:	8f 93       	push	r24
    6458:	80 91 41 27 	lds	r24, 0x2741	; 0x802741 <ACCSpeedINT+0x3>
    645c:	8f 93       	push	r24
    645e:	80 91 40 27 	lds	r24, 0x2740	; 0x802740 <ACCSpeedINT+0x2>
    6462:	8f 93       	push	r24
    6464:	80 91 3f 27 	lds	r24, 0x273F	; 0x80273f <ACCSpeedINT+0x1>
    6468:	8f 93       	push	r24
    646a:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <ACCSpeedINT>
    646e:	8f 93       	push	r24
    6470:	80 91 2f 27 	lds	r24, 0x272F	; 0x80272f <Ma2+0x1>
    6474:	8f 93       	push	r24
    6476:	80 91 2e 27 	lds	r24, 0x272E	; 0x80272e <Ma2>
    647a:	8f 93       	push	r24
    647c:	80 91 31 27 	lds	r24, 0x2731	; 0x802731 <Ma1+0x1>
    6480:	8f 93       	push	r24
    6482:	80 91 30 27 	lds	r24, 0x2730	; 0x802730 <Ma1>
    6486:	8f 93       	push	r24
    6488:	bf 92       	push	r11
    648a:	af 92       	push	r10
    648c:	9f 92       	push	r9
    648e:	8f 92       	push	r8
    6490:	7f 92       	push	r7
    6492:	6f 92       	push	r6
    6494:	5f 92       	push	r5
    6496:	4f 92       	push	r4
    6498:	dc 80       	ldd	r13, Y+4	; 0x04
    649a:	df 92       	push	r13
    649c:	eb 80       	ldd	r14, Y+3	; 0x03
    649e:	ef 92       	push	r14
    64a0:	0a 81       	ldd	r16, Y+2	; 0x02
    64a2:	0f 93       	push	r16
    64a4:	19 81       	ldd	r17, Y+1	; 0x01
    64a6:	1f 93       	push	r17
    64a8:	85 eb       	ldi	r24, 0xB5	; 181
    64aa:	95 e2       	ldi	r25, 0x25	; 37
    64ac:	9f 93       	push	r25
    64ae:	8f 93       	push	r24
    64b0:	87 e5       	ldi	r24, 0x57	; 87
    64b2:	99 e2       	ldi	r25, 0x29	; 41
    64b4:	9f 93       	push	r25
    64b6:	8f 93       	push	r24
    64b8:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
        Responsing=1;                     
    64bc:	f0 92 8c 28 	sts	0x288C, r15	; 0x80288c <Responsing>
        SetDataReady;
    64c0:	e0 ea       	ldi	r30, 0xA0	; 160
    64c2:	f6 e0       	ldi	r31, 0x06	; 6
    64c4:	84 81       	ldd	r24, Z+4	; 0x04
    64c6:	81 60       	ori	r24, 0x01	; 1
    64c8:	84 83       	std	Z+4, r24	; 0x04
    64ca:	cd bf       	out	0x3d, r28	; 61
    64cc:	de bf       	out	0x3e, r29	; 62
    64ce:	74 c1       	rjmp	.+744    	; 0x67b8 <__stack+0x27b9>
     }     
    }            
    else if(strncmp(cmdTemp,"#4000",5)==0)
    64d0:	45 e0       	ldi	r20, 0x05	; 5
    64d2:	50 e0       	ldi	r21, 0x00	; 0
    64d4:	6c ef       	ldi	r22, 0xFC	; 252
    64d6:	75 e2       	ldi	r23, 0x25	; 37
    64d8:	80 e1       	ldi	r24, 0x10	; 16
    64da:	97 e2       	ldi	r25, 0x27	; 39
    64dc:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    64e0:	89 2b       	or	r24, r25
    64e2:	61 f5       	brne	.+88     	; 0x653c <__stack+0x253d>
    { 
      //if(ProgramRun)
      //{
          ProgramRun=0;
    64e4:	10 92 bc 27 	sts	0x27BC, r1	; 0x8027bc <ProgramRun>
          DistanceToGo1=0;
    64e8:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    64ec:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    64f0:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    64f4:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          DistanceToGo2=0;
    64f8:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    64fc:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    6500:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    6504:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
          DistanceToGo3=0;   
    6508:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    650c:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    6510:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    6514:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          DO1_CLR;
    6518:	e0 e0       	ldi	r30, 0x00	; 0
    651a:	f7 e0       	ldi	r31, 0x07	; 7
    651c:	84 81       	ldd	r24, Z+4	; 0x04
    651e:	8b 7f       	andi	r24, 0xFB	; 251
    6520:	84 83       	std	Z+4, r24	; 0x04
          sprintf(BufferSend,"!4000\r\n"); 
    6522:	88 e0       	ldi	r24, 0x08	; 8
    6524:	e2 e0       	ldi	r30, 0x02	; 2
    6526:	f6 e2       	ldi	r31, 0x26	; 38
    6528:	a7 e5       	ldi	r26, 0x57	; 87
    652a:	b9 e2       	ldi	r27, 0x29	; 41
    652c:	01 90       	ld	r0, Z+
    652e:	0d 92       	st	X+, r0
    6530:	8a 95       	dec	r24
    6532:	e1 f7       	brne	.-8      	; 0x652c <__stack+0x252d>
          Responsing=1;      
    6534:	81 e0       	ldi	r24, 0x01	; 1
    6536:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
    653a:	3e c1       	rjmp	.+636    	; 0x67b8 <__stack+0x27b9>
      //}
    } 
    else if(strncmp(cmdTemp,"#4100",5)==0)
    653c:	45 e0       	ldi	r20, 0x05	; 5
    653e:	50 e0       	ldi	r21, 0x00	; 0
    6540:	6a e0       	ldi	r22, 0x0A	; 10
    6542:	76 e2       	ldi	r23, 0x26	; 38
    6544:	80 e1       	ldi	r24, 0x10	; 16
    6546:	97 e2       	ldi	r25, 0x27	; 39
    6548:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    654c:	89 2b       	or	r24, r25
    654e:	61 f5       	brne	.+88     	; 0x65a8 <__stack+0x25a9>
    { 
      if(ProgramRun)
    6550:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    6554:	88 23       	and	r24, r24
    6556:	09 f4       	brne	.+2      	; 0x655a <__stack+0x255b>
    6558:	2f c1       	rjmp	.+606    	; 0x67b8 <__stack+0x27b9>
      {
          IsPause=1;
    655a:	81 e0       	ldi	r24, 0x01	; 1
    655c:	80 93 da 26 	sts	0x26DA, r24	; 0x8026da <IsPause>
          DistanceToGo1=0;
    6560:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    6564:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    6568:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    656c:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
          DistanceToGo2=0;
    6570:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    6574:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    6578:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    657c:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
          DistanceToGo3=0;
    6580:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    6584:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    6588:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    658c:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
          sprintf(BufferSend,"!4100\r\n"); 
    6590:	98 e0       	ldi	r25, 0x08	; 8
    6592:	e0 e1       	ldi	r30, 0x10	; 16
    6594:	f6 e2       	ldi	r31, 0x26	; 38
    6596:	a7 e5       	ldi	r26, 0x57	; 87
    6598:	b9 e2       	ldi	r27, 0x29	; 41
    659a:	01 90       	ld	r0, Z+
    659c:	0d 92       	st	X+, r0
    659e:	9a 95       	dec	r25
    65a0:	e1 f7       	brne	.-8      	; 0x659a <__stack+0x259b>
          Responsing=1;      
    65a2:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
    65a6:	08 c1       	rjmp	.+528    	; 0x67b8 <__stack+0x27b9>
      }
    }
    else if(strncmp(cmdTemp,"#9800",5)==0)
    65a8:	45 e0       	ldi	r20, 0x05	; 5
    65aa:	50 e0       	ldi	r21, 0x00	; 0
    65ac:	68 e1       	ldi	r22, 0x18	; 24
    65ae:	76 e2       	ldi	r23, 0x26	; 38
    65b0:	80 e1       	ldi	r24, 0x10	; 16
    65b2:	97 e2       	ldi	r25, 0x27	; 39
    65b4:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    65b8:	89 2b       	or	r24, r25
    65ba:	09 f0       	breq	.+2      	; 0x65be <__stack+0x25bf>
    65bc:	5f c0       	rjmp	.+190    	; 0x667c <__stack+0x267d>
    {  
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    65be:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    65c2:	81 11       	cpse	r24, r1
    65c4:	0b c0       	rjmp	.+22     	; 0x65dc <__stack+0x25dd>
    65c6:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    65ca:	81 11       	cpse	r24, r1
    65cc:	09 c0       	rjmp	.+18     	; 0x65e0 <__stack+0x25e1>
    65ce:	81 e0       	ldi	r24, 0x01	; 1
    65d0:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    65d4:	91 11       	cpse	r25, r1
    65d6:	05 c0       	rjmp	.+10     	; 0x65e2 <__stack+0x25e3>
    65d8:	80 e0       	ldi	r24, 0x00	; 0
    65da:	03 c0       	rjmp	.+6      	; 0x65e2 <__stack+0x25e3>
    65dc:	81 e0       	ldi	r24, 0x01	; 1
    65de:	01 c0       	rjmp	.+2      	; 0x65e2 <__stack+0x25e3>
    65e0:	81 e0       	ldi	r24, 0x01	; 1
    65e2:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
     if (!ProgramRun)
    65e6:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    65ea:	81 11       	cpse	r24, r1
    65ec:	3d c0       	rjmp	.+122    	; 0x6668 <__stack+0x2669>
     { 
      printf("Get Run Command\r\n");
    65ee:	8e e1       	ldi	r24, 0x1E	; 30
    65f0:	96 e2       	ldi	r25, 0x26	; 38
    65f2:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
    65f6:	80 91 f9 26 	lds	r24, 0x26F9	; 0x8026f9 <AxisMoving>
      while (AxisMoving == 1) 
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    65fa:	20 91 48 27 	lds	r18, 0x2748	; 0x802748 <AxisIsMoving1>
    65fe:	30 91 47 27 	lds	r19, 0x2747	; 0x802747 <AxisIsMoving2>
    6602:	91 e0       	ldi	r25, 0x01	; 1
    6604:	40 91 46 27 	lds	r20, 0x2746	; 0x802746 <AxisIsMoving3>
    6608:	41 11       	cpse	r20, r1
    660a:	01 c0       	rjmp	.+2      	; 0x660e <__stack+0x260f>
    660c:	90 e0       	ldi	r25, 0x00	; 0
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
     if (!ProgramRun)
     { 
      printf("Get Run Command\r\n");
      while (AxisMoving == 1) 
    660e:	81 30       	cpi	r24, 0x01	; 1
    6610:	51 f4       	brne	.+20     	; 0x6626 <__stack+0x2627>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6612:	21 11       	cpse	r18, r1
    6614:	04 c0       	rjmp	.+8      	; 0x661e <__stack+0x261f>
    6616:	31 11       	cpse	r19, r1
    6618:	04 c0       	rjmp	.+8      	; 0x6622 <__stack+0x2623>
    661a:	89 2f       	mov	r24, r25
    661c:	f8 cf       	rjmp	.-16     	; 0x660e <__stack+0x260f>
    661e:	81 e0       	ldi	r24, 0x01	; 1
    6620:	f6 cf       	rjmp	.-20     	; 0x660e <__stack+0x260f>
    6622:	81 e0       	ldi	r24, 0x01	; 1
          
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
     if (!ProgramRun)
     { 
      printf("Get Run Command\r\n");
      while (AxisMoving == 1) 
    6624:	f4 cf       	rjmp	.-24     	; 0x660e <__stack+0x260f>
    6626:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
      {
       AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
      }
       ContinuousRead=0; 
    662a:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
       PRGEXEindex = 0;
    662e:	10 92 f7 26 	sts	0x26F7, r1	; 0x8026f7 <PRGEXEindex>
    6632:	10 92 f8 26 	sts	0x26F8, r1	; 0x8026f8 <PRGEXEindex+0x1>
       ProgramRun = 1;
    6636:	31 e0       	ldi	r19, 0x01	; 1
    6638:	30 93 bc 27 	sts	0x27BC, r19	; 0x8027bc <ProgramRun>
       printf("Program is running\r\n");       
    663c:	8f e2       	ldi	r24, 0x2F	; 47
    663e:	96 e2       	ldi	r25, 0x26	; 38
    6640:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
       sprintf(BufferSend,"!9800\r\n");
    6644:	88 e0       	ldi	r24, 0x08	; 8
    6646:	e3 e4       	ldi	r30, 0x43	; 67
    6648:	f6 e2       	ldi	r31, 0x26	; 38
    664a:	a7 e5       	ldi	r26, 0x57	; 87
    664c:	b9 e2       	ldi	r27, 0x29	; 41
    664e:	01 90       	ld	r0, Z+
    6650:	0d 92       	st	X+, r0
    6652:	8a 95       	dec	r24
    6654:	e1 f7       	brne	.-8      	; 0x664e <__stack+0x264f>
       Responsing=1;
    6656:	41 e0       	ldi	r20, 0x01	; 1
    6658:	40 93 8c 28 	sts	0x288C, r20	; 0x80288c <Responsing>
       SetDataReady;  
    665c:	e0 ea       	ldi	r30, 0xA0	; 160
    665e:	f6 e0       	ldi	r31, 0x06	; 6
    6660:	84 81       	ldd	r24, Z+4	; 0x04
    6662:	81 60       	ori	r24, 0x01	; 1
    6664:	84 83       	std	Z+4, r24	; 0x04
    6666:	a8 c0       	rjmp	.+336    	; 0x67b8 <__stack+0x27b9>
     } 
     else if(IsPause==1)
    6668:	80 91 da 26 	lds	r24, 0x26DA	; 0x8026da <IsPause>
    666c:	81 30       	cpi	r24, 0x01	; 1
    666e:	09 f0       	breq	.+2      	; 0x6672 <__stack+0x2673>
    6670:	a3 c0       	rjmp	.+326    	; 0x67b8 <__stack+0x27b9>
     {
         PRGExe();
    6672:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_Z6PRGExev>
         IsPause=0;
    6676:	10 92 da 26 	sts	0x26DA, r1	; 0x8026da <IsPause>
    667a:	9e c0       	rjmp	.+316    	; 0x67b8 <__stack+0x27b9>
     }       
    }
    else if(strncmp(cmdTemp,"#9900",5)==0)
    667c:	45 e0       	ldi	r20, 0x05	; 5
    667e:	50 e0       	ldi	r21, 0x00	; 0
    6680:	6b e4       	ldi	r22, 0x4B	; 75
    6682:	76 e2       	ldi	r23, 0x26	; 38
    6684:	80 e1       	ldi	r24, 0x10	; 16
    6686:	97 e2       	ldi	r25, 0x27	; 39
    6688:	0e 94 36 40 	call	0x806c	; 0x806c <strncmp>
    668c:	89 2b       	or	r24, r25
    668e:	09 f0       	breq	.+2      	; 0x6692 <__stack+0x2693>
    6690:	46 c0       	rjmp	.+140    	; 0x671e <__stack+0x271f>
    { 
       ContinuousRead=0; 
    6692:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <ContinuousRead>
       readRam(); 
    6696:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
       readRam(); 
    669a:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
       readRam(); 
    669e:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
       sprintf(BufferSend,"!9800\r\nPL:%u\tMD:%u\tMv1:%d\tMaxDTG:%d\tMaxSpeed:%d\tACCDTG:%d\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode,CMDPRGlist.Move1,CMDPRGlist.MaxDistanceToGo,CMDPRGlist.MaxSpeed,CMDPRGlist.ACCDTG); 
    66a2:	ee e3       	ldi	r30, 0x3E	; 62
    66a4:	f8 e2       	ldi	r31, 0x28	; 40
    66a6:	83 a9       	ldd	r24, Z+51	; 0x33
    66a8:	8f 93       	push	r24
    66aa:	82 a9       	ldd	r24, Z+50	; 0x32
    66ac:	8f 93       	push	r24
    66ae:	81 a9       	ldd	r24, Z+49	; 0x31
    66b0:	8f 93       	push	r24
    66b2:	80 a9       	ldd	r24, Z+48	; 0x30
    66b4:	8f 93       	push	r24
    66b6:	83 a1       	ldd	r24, Z+35	; 0x23
    66b8:	8f 93       	push	r24
    66ba:	82 a1       	ldd	r24, Z+34	; 0x22
    66bc:	8f 93       	push	r24
    66be:	81 a1       	ldd	r24, Z+33	; 0x21
    66c0:	8f 93       	push	r24
    66c2:	80 a1       	ldd	r24, Z+32	; 0x20
    66c4:	8f 93       	push	r24
    66c6:	87 a1       	ldd	r24, Z+39	; 0x27
    66c8:	8f 93       	push	r24
    66ca:	86 a1       	ldd	r24, Z+38	; 0x26
    66cc:	8f 93       	push	r24
    66ce:	85 a1       	ldd	r24, Z+37	; 0x25
    66d0:	8f 93       	push	r24
    66d2:	84 a1       	ldd	r24, Z+36	; 0x24
    66d4:	8f 93       	push	r24
    66d6:	80 85       	ldd	r24, Z+8	; 0x08
    66d8:	8f 93       	push	r24
    66da:	87 81       	ldd	r24, Z+7	; 0x07
    66dc:	8f 93       	push	r24
    66de:	86 81       	ldd	r24, Z+6	; 0x06
    66e0:	8f 93       	push	r24
    66e2:	85 81       	ldd	r24, Z+5	; 0x05
    66e4:	8f 93       	push	r24
    66e6:	83 81       	ldd	r24, Z+3	; 0x03
    66e8:	1f 92       	push	r1
    66ea:	8f 93       	push	r24
    66ec:	81 81       	ldd	r24, Z+1	; 0x01
    66ee:	8f 93       	push	r24
    66f0:	80 81       	ld	r24, Z
    66f2:	8f 93       	push	r24
    66f4:	81 e5       	ldi	r24, 0x51	; 81
    66f6:	96 e2       	ldi	r25, 0x26	; 38
    66f8:	9f 93       	push	r25
    66fa:	8f 93       	push	r24
    66fc:	87 e5       	ldi	r24, 0x57	; 87
    66fe:	99 e2       	ldi	r25, 0x29	; 41
    6700:	9f 93       	push	r25
    6702:	8f 93       	push	r24
    6704:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <sprintf>
       //sprintf(BufferSend,"!9900\r\nID:%u\tMaxSpeed:%d\tACC:%d\r\n",Axes[0].ID,Axes[0].MaxSpeed,Axes[0].ACC);
       Responsing=1;
    6708:	81 e0       	ldi	r24, 0x01	; 1
    670a:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
       SetDataReady;
    670e:	e0 ea       	ldi	r30, 0xA0	; 160
    6710:	f6 e0       	ldi	r31, 0x06	; 6
    6712:	84 81       	ldd	r24, Z+4	; 0x04
    6714:	81 60       	ori	r24, 0x01	; 1
    6716:	84 83       	std	Z+4, r24	; 0x04
    6718:	cd bf       	out	0x3d, r28	; 61
    671a:	de bf       	out	0x3e, r29	; 62
    671c:	4d c0       	rjmp	.+154    	; 0x67b8 <__stack+0x27b9>
    }    
    else
    {
      ClrDataReady;
    671e:	e0 ea       	ldi	r30, 0xA0	; 160
    6720:	f6 e0       	ldi	r31, 0x06	; 6
    6722:	84 81       	ldd	r24, Z+4	; 0x04
    6724:	8e 7f       	andi	r24, 0xFE	; 254
    6726:	84 83       	std	Z+4, r24	; 0x04
    }
}
    6728:	47 c0       	rjmp	.+142    	; 0x67b8 <__stack+0x27b9>
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    672a:	91 e0       	ldi	r25, 0x01	; 1
    672c:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
         
     if (!ProgramRun)
    6730:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    6734:	99 23       	and	r25, r25
    6736:	11 f4       	brne	.+4      	; 0x673c <__stack+0x273d>
    6738:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <_Z6cmdExev+0xb38>
    673c:	3d c0       	rjmp	.+122    	; 0x67b8 <__stack+0x27b9>
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    673e:	81 e0       	ldi	r24, 0x01	; 1
    6740:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
         
    if (!ProgramRun)
    6744:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    6748:	88 23       	and	r24, r24
    674a:	11 f4       	brne	.+4      	; 0x6750 <__stack+0x2751>
    674c:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <__stack+0xd8f>
    6750:	33 c0       	rjmp	.+102    	; 0x67b8 <__stack+0x27b9>
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    6752:	81 e0       	ldi	r24, 0x01	; 1
    6754:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    if (!ProgramRun)
    6758:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    675c:	88 23       	and	r24, r24
    675e:	11 f4       	brne	.+4      	; 0x6764 <__stack+0x2765>
    6760:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <__stack+0xf3b>
    6764:	29 c0       	rjmp	.+82     	; 0x67b8 <__stack+0x27b9>
       }
     }
    }   
    else if(strncmp(cmdTemp,"#13",3)==0)
    {// Set Speed 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6766:	81 e0       	ldi	r24, 0x01	; 1
    6768:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    676c:	25 c0       	rjmp	.+74     	; 0x67b8 <__stack+0x27b9>
         }
       }
    }
    else if(strncmp(cmdTemp,"#16",3)==0)
    {// Set ACC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    676e:	81 e0       	ldi	r24, 0x01	; 1
    6770:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    6774:	21 c0       	rjmp	.+66     	; 0x67b8 <__stack+0x27b9>
       }          
      }
    }
    else if(strncmp(cmdTemp,"#17",3)==0)
    {// Set DEC 
     AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6776:	81 e0       	ldi	r24, 0x01	; 1
    6778:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    677c:	1d c0       	rjmp	.+58     	; 0x67b8 <__stack+0x27b9>
           }
      }
    }
    else if(strncmp(cmdTemp,"#06",3)==0)
    {//RUN JOG  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    677e:	91 e0       	ldi	r25, 0x01	; 1
    6780:	90 93 f9 26 	sts	0x26F9, r25	; 0x8026f9 <AxisMoving>
         
     if (!ProgramRun)
    6784:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <ProgramRun>
    6788:	99 23       	and	r25, r25
    678a:	11 f4       	brne	.+4      	; 0x6790 <__stack+0x2791>
    678c:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <_Z6cmdExev+0xb38>
    6790:	13 c0       	rjmp	.+38     	; 0x67b8 <__stack+0x27b9>
        }
      } 
    }
    else if(strncmp(cmdTemp,"#11",3)==0)
    {//Set AXIS Position
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    6792:	81 e0       	ldi	r24, 0x01	; 1
    6794:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
         
    if (!ProgramRun)
    6798:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    679c:	88 23       	and	r24, r24
    679e:	11 f4       	brne	.+4      	; 0x67a4 <__stack+0x27a5>
    67a0:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <__stack+0xd8f>
    67a4:	09 c0       	rjmp	.+18     	; 0x67b8 <__stack+0x27b9>
      }            
     }
    } 
    else if(strncmp(cmdTemp,"#12",3)==0)
    {//Go To REF  
    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;       
    67a6:	81 e0       	ldi	r24, 0x01	; 1
    67a8:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
    if (!ProgramRun)
    67ac:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    67b0:	88 23       	and	r24, r24
    67b2:	11 f4       	brne	.+4      	; 0x67b8 <__stack+0x27b9>
    67b4:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <__stack+0xf3b>
    }    
    else
    {
      ClrDataReady;
    }
}
    67b8:	6e 96       	adiw	r28, 0x1e	; 30
    67ba:	cd bf       	out	0x3d, r28	; 61
    67bc:	de bf       	out	0x3e, r29	; 62
    67be:	df 91       	pop	r29
    67c0:	cf 91       	pop	r28
    67c2:	1f 91       	pop	r17
    67c4:	0f 91       	pop	r16
    67c6:	ff 90       	pop	r15
    67c8:	ef 90       	pop	r14
    67ca:	df 90       	pop	r13
    67cc:	cf 90       	pop	r12
    67ce:	bf 90       	pop	r11
    67d0:	af 90       	pop	r10
    67d2:	9f 90       	pop	r9
    67d4:	8f 90       	pop	r8
    67d6:	7f 90       	pop	r7
    67d8:	6f 90       	pop	r6
    67da:	5f 90       	pop	r5
    67dc:	4f 90       	pop	r4
    67de:	3f 90       	pop	r3
    67e0:	2f 90       	pop	r2
    67e2:	08 95       	ret

000067e4 <_Z18system_clocks_initv>:

void system_clocks_init(void) // System Clocks initialization
{
	unsigned char n,s;
	#pragma optsize-
	s=SREG;
    67e4:	9f b7       	in	r25, 0x3f	; 63
	asm("cli");
    67e6:	f8 94       	cli
	OSC.CTRL|=OSC_RC32KEN_bm;
    67e8:	e0 e5       	ldi	r30, 0x50	; 80
    67ea:	f0 e0       	ldi	r31, 0x00	; 0
    67ec:	80 81       	ld	r24, Z
    67ee:	84 60       	ori	r24, 0x04	; 4
    67f0:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
    67f2:	81 81       	ldd	r24, Z+1	; 0x01
    67f4:	82 ff       	sbrs	r24, 2
    67f6:	fd cf       	rjmp	.-6      	; 0x67f2 <_Z18system_clocks_initv+0xe>
	OSC.CTRL|=OSC_RC32MEN_bm;
    67f8:	e0 e5       	ldi	r30, 0x50	; 80
    67fa:	f0 e0       	ldi	r31, 0x00	; 0
    67fc:	80 81       	ld	r24, Z
    67fe:	82 60       	ori	r24, 0x02	; 2
    6800:	80 83       	st	Z, r24
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    6802:	a0 e4       	ldi	r26, 0x40	; 64
    6804:	b0 e0       	ldi	r27, 0x00	; 0
    6806:	11 96       	adiw	r26, 0x01	; 1
    6808:	8c 91       	ld	r24, X
    680a:	11 97       	sbiw	r26, 0x01	; 1
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
    680c:	80 78       	andi	r24, 0x80	; 128
	CCP=CCP_IOREG_gc;
    680e:	28 ed       	ldi	r18, 0xD8	; 216
    6810:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
    6812:	11 96       	adiw	r26, 0x01	; 1
    6814:	8c 93       	st	X, r24
	OSC.DFLLCTRL&= ~(OSC_RC32MCREF_bm | OSC_RC2MCREF_bm);
    6816:	86 81       	ldd	r24, Z+6	; 0x06
    6818:	8c 7f       	andi	r24, 0xFC	; 252
    681a:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
    681c:	e0 e6       	ldi	r30, 0x60	; 96
    681e:	f0 e0       	ldi	r31, 0x00	; 0
    6820:	80 81       	ld	r24, Z
    6822:	81 60       	ori	r24, 0x01	; 1
    6824:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
    6826:	e0 e5       	ldi	r30, 0x50	; 80
    6828:	f0 e0       	ldi	r31, 0x00	; 0
    682a:	81 81       	ldd	r24, Z+1	; 0x01
    682c:	81 ff       	sbrs	r24, 1
    682e:	fd cf       	rjmp	.-6      	; 0x682a <_Z18system_clocks_initv+0x46>
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
    6830:	e0 e4       	ldi	r30, 0x40	; 64
    6832:	f0 e0       	ldi	r31, 0x00	; 0
    6834:	80 81       	ld	r24, Z
    6836:	88 7f       	andi	r24, 0xF8	; 248
    6838:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
    683a:	28 ed       	ldi	r18, 0xD8	; 216
    683c:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
    683e:	80 83       	st	Z, r24
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    6840:	e0 e5       	ldi	r30, 0x50	; 80
    6842:	f0 e0       	ldi	r31, 0x00	; 0
    6844:	80 81       	ld	r24, Z
    6846:	86 7e       	andi	r24, 0xE6	; 230
    6848:	80 83       	st	Z, r24
	PORTCFG.CLKEVOUT&= ~PORTCFG_CLKOUT_gm;
    684a:	e0 eb       	ldi	r30, 0xB0	; 176
    684c:	f0 e0       	ldi	r31, 0x00	; 0
    684e:	84 81       	ldd	r24, Z+4	; 0x04
    6850:	8c 7f       	andi	r24, 0xFC	; 252
    6852:	84 83       	std	Z+4, r24	; 0x04
	SREG=s;
    6854:	9f bf       	out	0x3f, r25	; 63
    6856:	08 95       	ret

00006858 <__vector_96>:
}

// PORTH interrupt 0 service routine
// JOG Interrupt routine for positive direction 
ISR (PORTH_INT0_vect)  
{					   
    6858:	1f 92       	push	r1
    685a:	0f 92       	push	r0
    685c:	0f b6       	in	r0, 0x3f	; 63
    685e:	0f 92       	push	r0
    6860:	11 24       	eor	r1, r1
    6862:	08 b6       	in	r0, 0x38	; 56
    6864:	0f 92       	push	r0
    6866:	18 be       	out	0x38, r1	; 56
    6868:	09 b6       	in	r0, 0x39	; 57
    686a:	0f 92       	push	r0
    686c:	19 be       	out	0x39, r1	; 57
    686e:	0a b6       	in	r0, 0x3a	; 58
    6870:	0f 92       	push	r0
    6872:	1a be       	out	0x3a, r1	; 58
    6874:	0b b6       	in	r0, 0x3b	; 59
    6876:	0f 92       	push	r0
    6878:	1b be       	out	0x3b, r1	; 59
    687a:	4f 92       	push	r4
    687c:	5f 92       	push	r5
    687e:	6f 92       	push	r6
    6880:	7f 92       	push	r7
    6882:	8f 92       	push	r8
    6884:	9f 92       	push	r9
    6886:	af 92       	push	r10
    6888:	bf 92       	push	r11
    688a:	cf 92       	push	r12
    688c:	df 92       	push	r13
    688e:	ef 92       	push	r14
    6890:	ff 92       	push	r15
    6892:	2f 93       	push	r18
    6894:	3f 93       	push	r19
    6896:	4f 93       	push	r20
    6898:	5f 93       	push	r21
    689a:	6f 93       	push	r22
    689c:	7f 93       	push	r23
    689e:	8f 93       	push	r24
    68a0:	9f 93       	push	r25
    68a2:	af 93       	push	r26
    68a4:	bf 93       	push	r27
    68a6:	ef 93       	push	r30
    68a8:	ff 93       	push	r31
    68aa:	cf 93       	push	r28
    68ac:	df 93       	push	r29
    68ae:	00 d0       	rcall	.+0      	; 0x68b0 <__vector_96+0x58>
    68b0:	1f 92       	push	r1
    68b2:	cd b7       	in	r28, 0x3d	; 61
    68b4:	de b7       	in	r29, 0x3e	; 62
	if(JogPos)
    68b6:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    68ba:	81 ff       	sbrs	r24, 1
    68bc:	71 c0       	rjmp	.+226    	; 0x69a0 <__vector_96+0x148>
	{
		printf("Jog+\r\n");
    68be:	8d e8       	ldi	r24, 0x8D	; 141
    68c0:	96 e2       	ldi	r25, 0x26	; 38
    68c2:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
		if(!JogNeg)
    68c6:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    68ca:	83 fd       	sbrc	r24, 3
    68cc:	25 c2       	rjmp	.+1098   	; 0x6d18 <__vector_96+0x4c0>
		{
			MaxSpeed=10000;
    68ce:	80 e1       	ldi	r24, 0x10	; 16
    68d0:	97 e2       	ldi	r25, 0x27	; 39
    68d2:	a0 e0       	ldi	r26, 0x00	; 0
    68d4:	b0 e0       	ldi	r27, 0x00	; 0
    68d6:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    68da:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    68de:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    68e2:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
			IACC=5000;
    68e6:	88 e8       	ldi	r24, 0x88	; 136
    68e8:	93 e1       	ldi	r25, 0x13	; 19
    68ea:	a0 e0       	ldi	r26, 0x00	; 0
    68ec:	b0 e0       	ldi	r27, 0x00	; 0
    68ee:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    68f2:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    68f6:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    68fa:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
			IDEC=5000;
    68fe:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    6902:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    6906:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    690a:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
			CurSpeedFrq=0;
    690e:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    6912:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    6916:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    691a:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    691e:	8f ef       	ldi	r24, 0xFF	; 255
    6920:	9f ef       	ldi	r25, 0xFF	; 255
    6922:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    6926:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    692a:	82 e3       	ldi	r24, 0x32	; 50
    692c:	90 e0       	ldi	r25, 0x00	; 0
    692e:	a0 e0       	ldi	r26, 0x00	; 0
    6930:	b0 e0       	ldi	r27, 0x00	; 0
    6932:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <ACCSpeedINT>
    6936:	90 93 3f 27 	sts	0x273F, r25	; 0x80273f <ACCSpeedINT+0x1>
    693a:	a0 93 40 27 	sts	0x2740, r26	; 0x802740 <ACCSpeedINT+0x2>
    693e:	b0 93 41 27 	sts	0x2741, r27	; 0x802741 <ACCSpeedINT+0x3>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    6942:	80 93 3a 27 	sts	0x273A, r24	; 0x80273a <DECSpeedINT>
    6946:	90 93 3b 27 	sts	0x273B, r25	; 0x80273b <DECSpeedINT+0x1>
    694a:	a0 93 3c 27 	sts	0x273C, r26	; 0x80273c <DECSpeedINT+0x2>
    694e:	b0 93 3d 27 	sts	0x273D, r27	; 0x80273d <DECSpeedINT+0x3>
			switch(SelectedAxis)
    6952:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <SelectedAxis>
    6956:	82 30       	cpi	r24, 0x02	; 2
    6958:	69 f0       	breq	.+26     	; 0x6974 <__vector_96+0x11c>
    695a:	83 30       	cpi	r24, 0x03	; 3
    695c:	a1 f0       	breq	.+40     	; 0x6986 <__vector_96+0x12e>
    695e:	81 30       	cpi	r24, 0x01	; 1
    6960:	d9 f4       	brne	.+54     	; 0x6998 <__vector_96+0x140>
			{
				case 1:
				{
					
					if(!LIM_POS1 && Axes[0].HardwareLimitPosIsActive)
    6962:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    6966:	83 fd       	sbrc	r24, 3
    6968:	38 c0       	rjmp	.+112    	; 0x69da <__vector_96+0x182>
    696a:	80 91 e6 27 	lds	r24, 0x27E6	; 0x8027e6 <Axes+0x29>
    696e:	81 11       	cpse	r24, r1
    6970:	13 c0       	rjmp	.+38     	; 0x6998 <__vector_96+0x140>
    6972:	33 c0       	rjmp	.+102    	; 0x69da <__vector_96+0x182>
					break;
					
				}
				case 2:
				{
					if(!LIM_POS2 && Axes[1].HardwareLimitPosIsActive)
    6974:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    6978:	80 fd       	sbrc	r24, 0
    697a:	b6 c0       	rjmp	.+364    	; 0x6ae8 <__vector_96+0x290>
    697c:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <Axes+0x54>
    6980:	81 11       	cpse	r24, r1
    6982:	0a c0       	rjmp	.+20     	; 0x6998 <__vector_96+0x140>
    6984:	b1 c0       	rjmp	.+354    	; 0x6ae8 <__vector_96+0x290>
					break;
					
				}
				case 3:
				{
					if(!LIM_POS3 && Axes[2].HardwareLimitPosIsActive)
    6986:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    698a:	85 fd       	sbrc	r24, 5
    698c:	34 c1       	rjmp	.+616    	; 0x6bf6 <__vector_96+0x39e>
    698e:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <Axes+0x7f>
    6992:	88 23       	and	r24, r24
    6994:	09 f4       	brne	.+2      	; 0x6998 <__vector_96+0x140>
    6996:	2f c1       	rjmp	.+606    	; 0x6bf6 <__vector_96+0x39e>
					break;
					
				}
			}
			
			ACC=1;
    6998:	81 e0       	ldi	r24, 0x01	; 1
    699a:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
    699e:	bc c1       	rjmp	.+888    	; 0x6d18 <__vector_96+0x4c0>
		}
	}
	else if((FreeJog==1 && DIR1)||(FreeJog==2 && DIR2)||(FreeJog==3 && DIR3))
    69a0:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <FreeJog>
    69a4:	81 30       	cpi	r24, 0x01	; 1
    69a6:	29 f4       	brne	.+10     	; 0x69b2 <__vector_96+0x15a>
    69a8:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    69ac:	84 fd       	sbrc	r24, 4
    69ae:	0f c0       	rjmp	.+30     	; 0x69ce <__vector_96+0x176>
    69b0:	b3 c1       	rjmp	.+870    	; 0x6d18 <__vector_96+0x4c0>
    69b2:	82 30       	cpi	r24, 0x02	; 2
    69b4:	29 f4       	brne	.+10     	; 0x69c0 <__vector_96+0x168>
    69b6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    69ba:	82 fd       	sbrc	r24, 2
    69bc:	08 c0       	rjmp	.+16     	; 0x69ce <__vector_96+0x176>
    69be:	ac c1       	rjmp	.+856    	; 0x6d18 <__vector_96+0x4c0>
    69c0:	83 30       	cpi	r24, 0x03	; 3
    69c2:	09 f0       	breq	.+2      	; 0x69c6 <__vector_96+0x16e>
    69c4:	a9 c1       	rjmp	.+850    	; 0x6d18 <__vector_96+0x4c0>
    69c6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    69ca:	80 ff       	sbrs	r24, 0
    69cc:	a5 c1       	rjmp	.+842    	; 0x6d18 <__vector_96+0x4c0>
	{
		ACC=0;
    69ce:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
		DEC=1;
    69d2:	81 e0       	ldi	r24, 0x01	; 1
    69d4:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
	}
}
    69d8:	9f c1       	rjmp	.+830    	; 0x6d18 <__vector_96+0x4c0>
				case 1:
				{
					
					if(!LIM_POS1 && Axes[0].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[0].MaxSpeed;
    69da:	ed eb       	ldi	r30, 0xBD	; 189
    69dc:	f7 e2       	ldi	r31, 0x27	; 39
    69de:	c5 80       	ldd	r12, Z+5	; 0x05
    69e0:	d6 80       	ldd	r13, Z+6	; 0x06
    69e2:	e7 80       	ldd	r14, Z+7	; 0x07
    69e4:	f0 84       	ldd	r15, Z+8	; 0x08
    69e6:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    69ea:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    69ee:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    69f2:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    69f6:	41 84       	ldd	r4, Z+9	; 0x09
    69f8:	52 84       	ldd	r5, Z+10	; 0x0a
    69fa:	63 84       	ldd	r6, Z+11	; 0x0b
    69fc:	74 84       	ldd	r7, Z+12	; 0x0c
    69fe:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    6a02:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    6a06:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    6a0a:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[0].DEC;
    6a0e:	85 84       	ldd	r8, Z+13	; 0x0d
    6a10:	96 84       	ldd	r9, Z+14	; 0x0e
    6a12:	a7 84       	ldd	r10, Z+15	; 0x0f
    6a14:	b0 88       	ldd	r11, Z+16	; 0x10
    6a16:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6a1a:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6a1e:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6a22:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6a26:	c7 01       	movw	r24, r14
    6a28:	b6 01       	movw	r22, r12
    6a2a:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6a2e:	20 e0       	ldi	r18, 0x00	; 0
    6a30:	30 e0       	ldi	r19, 0x00	; 0
    6a32:	48 ec       	ldi	r20, 0xC8	; 200
    6a34:	52 e4       	ldi	r21, 0x42	; 66
    6a36:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    6a3a:	69 83       	std	Y+1, r22	; 0x01
    6a3c:	7a 83       	std	Y+2, r23	; 0x02
    6a3e:	8b 83       	std	Y+3, r24	; 0x03
    6a40:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6a42:	c3 01       	movw	r24, r6
    6a44:	b2 01       	movw	r22, r4
    6a46:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6a4a:	9b 01       	movw	r18, r22
    6a4c:	ac 01       	movw	r20, r24
    6a4e:	69 81       	ldd	r22, Y+1	; 0x01
    6a50:	7a 81       	ldd	r23, Y+2	; 0x02
    6a52:	8b 81       	ldd	r24, Y+3	; 0x03
    6a54:	9c 81       	ldd	r25, Y+4	; 0x04
    6a56:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6a5a:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6a5e:	9b 01       	movw	r18, r22
    6a60:	ac 01       	movw	r20, r24
    6a62:	c7 01       	movw	r24, r14
    6a64:	b6 01       	movw	r22, r12
    6a66:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6a6a:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6a6e:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6a72:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6a76:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6a7a:	c5 01       	movw	r24, r10
    6a7c:	b4 01       	movw	r22, r8
    6a7e:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6a82:	9b 01       	movw	r18, r22
    6a84:	ac 01       	movw	r20, r24
    6a86:	69 81       	ldd	r22, Y+1	; 0x01
    6a88:	7a 81       	ldd	r23, Y+2	; 0x02
    6a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    6a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    6a8e:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6a92:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6a96:	9b 01       	movw	r18, r22
    6a98:	ac 01       	movw	r20, r24
    6a9a:	c7 01       	movw	r24, r14
    6a9c:	b6 01       	movw	r22, r12
    6a9e:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6aa2:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6aa6:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6aaa:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6aae:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					SET_DIR1;
    6ab2:	e0 e2       	ldi	r30, 0x20	; 32
    6ab4:	f7 e0       	ldi	r31, 0x07	; 7
    6ab6:	84 81       	ldd	r24, Z+4	; 0x04
    6ab8:	80 61       	ori	r24, 0x10	; 16
    6aba:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=1;
    6abc:	81 e0       	ldi	r24, 0x01	; 1
    6abe:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma1=1000;
    6ac2:	88 ee       	ldi	r24, 0xE8	; 232
    6ac4:	93 e0       	ldi	r25, 0x03	; 3
    6ac6:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    6aca:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
					DistanceToGo1=0x7FFFFFFF;
    6ace:	8f ef       	ldi	r24, 0xFF	; 255
    6ad0:	9f ef       	ldi	r25, 0xFF	; 255
    6ad2:	af ef       	ldi	r26, 0xFF	; 255
    6ad4:	bf e7       	ldi	r27, 0x7F	; 127
    6ad6:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    6ada:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    6ade:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    6ae2:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
					break;
    6ae6:	58 cf       	rjmp	.-336    	; 0x6998 <__vector_96+0x140>
				}
				case 2:
				{
					if(!LIM_POS2 && Axes[1].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[1].MaxSpeed;
    6ae8:	ed eb       	ldi	r30, 0xBD	; 189
    6aea:	f7 e2       	ldi	r31, 0x27	; 39
    6aec:	c0 a8       	ldd	r12, Z+48	; 0x30
    6aee:	d1 a8       	ldd	r13, Z+49	; 0x31
    6af0:	e2 a8       	ldd	r14, Z+50	; 0x32
    6af2:	f3 a8       	ldd	r15, Z+51	; 0x33
    6af4:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    6af8:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    6afc:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    6b00:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    6b04:	44 a8       	ldd	r4, Z+52	; 0x34
    6b06:	55 a8       	ldd	r5, Z+53	; 0x35
    6b08:	66 a8       	ldd	r6, Z+54	; 0x36
    6b0a:	77 a8       	ldd	r7, Z+55	; 0x37
    6b0c:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    6b10:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    6b14:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    6b18:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[1].DEC;
    6b1c:	80 ac       	ldd	r8, Z+56	; 0x38
    6b1e:	91 ac       	ldd	r9, Z+57	; 0x39
    6b20:	a2 ac       	ldd	r10, Z+58	; 0x3a
    6b22:	b3 ac       	ldd	r11, Z+59	; 0x3b
    6b24:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6b28:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6b2c:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6b30:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6b34:	c7 01       	movw	r24, r14
    6b36:	b6 01       	movw	r22, r12
    6b38:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6b3c:	20 e0       	ldi	r18, 0x00	; 0
    6b3e:	30 e0       	ldi	r19, 0x00	; 0
    6b40:	48 ec       	ldi	r20, 0xC8	; 200
    6b42:	52 e4       	ldi	r21, 0x42	; 66
    6b44:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    6b48:	69 83       	std	Y+1, r22	; 0x01
    6b4a:	7a 83       	std	Y+2, r23	; 0x02
    6b4c:	8b 83       	std	Y+3, r24	; 0x03
    6b4e:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6b50:	c3 01       	movw	r24, r6
    6b52:	b2 01       	movw	r22, r4
    6b54:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6b58:	9b 01       	movw	r18, r22
    6b5a:	ac 01       	movw	r20, r24
    6b5c:	69 81       	ldd	r22, Y+1	; 0x01
    6b5e:	7a 81       	ldd	r23, Y+2	; 0x02
    6b60:	8b 81       	ldd	r24, Y+3	; 0x03
    6b62:	9c 81       	ldd	r25, Y+4	; 0x04
    6b64:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6b68:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6b6c:	9b 01       	movw	r18, r22
    6b6e:	ac 01       	movw	r20, r24
    6b70:	c7 01       	movw	r24, r14
    6b72:	b6 01       	movw	r22, r12
    6b74:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6b78:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6b7c:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6b80:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6b84:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6b88:	c5 01       	movw	r24, r10
    6b8a:	b4 01       	movw	r22, r8
    6b8c:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6b90:	9b 01       	movw	r18, r22
    6b92:	ac 01       	movw	r20, r24
    6b94:	69 81       	ldd	r22, Y+1	; 0x01
    6b96:	7a 81       	ldd	r23, Y+2	; 0x02
    6b98:	8b 81       	ldd	r24, Y+3	; 0x03
    6b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    6b9c:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6ba0:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6ba4:	9b 01       	movw	r18, r22
    6ba6:	ac 01       	movw	r20, r24
    6ba8:	c7 01       	movw	r24, r14
    6baa:	b6 01       	movw	r22, r12
    6bac:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6bb0:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6bb4:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6bb8:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6bbc:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					SET_DIR2;
    6bc0:	e0 e2       	ldi	r30, 0x20	; 32
    6bc2:	f7 e0       	ldi	r31, 0x07	; 7
    6bc4:	84 81       	ldd	r24, Z+4	; 0x04
    6bc6:	84 60       	ori	r24, 0x04	; 4
    6bc8:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=2;
    6bca:	82 e0       	ldi	r24, 0x02	; 2
    6bcc:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma2=1000;
    6bd0:	88 ee       	ldi	r24, 0xE8	; 232
    6bd2:	93 e0       	ldi	r25, 0x03	; 3
    6bd4:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    6bd8:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
					DistanceToGo2=0x7FFFFFFF;
    6bdc:	8f ef       	ldi	r24, 0xFF	; 255
    6bde:	9f ef       	ldi	r25, 0xFF	; 255
    6be0:	af ef       	ldi	r26, 0xFF	; 255
    6be2:	bf e7       	ldi	r27, 0x7F	; 127
    6be4:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    6be8:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    6bec:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    6bf0:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
					break;
    6bf4:	d1 ce       	rjmp	.-606    	; 0x6998 <__vector_96+0x140>
				}
				case 3:
				{
					if(!LIM_POS3 && Axes[2].HardwareLimitPosIsActive)
					break;
					MaxSpeed=Axes[2].MaxSpeed;
    6bf6:	c0 90 18 28 	lds	r12, 0x2818	; 0x802818 <Axes+0x5b>
    6bfa:	d0 90 19 28 	lds	r13, 0x2819	; 0x802819 <Axes+0x5c>
    6bfe:	e0 90 1a 28 	lds	r14, 0x281A	; 0x80281a <Axes+0x5d>
    6c02:	f0 90 1b 28 	lds	r15, 0x281B	; 0x80281b <Axes+0x5e>
    6c06:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    6c0a:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    6c0e:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    6c12:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    6c16:	40 90 1c 28 	lds	r4, 0x281C	; 0x80281c <Axes+0x5f>
    6c1a:	50 90 1d 28 	lds	r5, 0x281D	; 0x80281d <Axes+0x60>
    6c1e:	60 90 1e 28 	lds	r6, 0x281E	; 0x80281e <Axes+0x61>
    6c22:	70 90 1f 28 	lds	r7, 0x281F	; 0x80281f <Axes+0x62>
    6c26:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    6c2a:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    6c2e:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    6c32:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[2].DEC;
    6c36:	80 90 20 28 	lds	r8, 0x2820	; 0x802820 <Axes+0x63>
    6c3a:	90 90 21 28 	lds	r9, 0x2821	; 0x802821 <Axes+0x64>
    6c3e:	a0 90 22 28 	lds	r10, 0x2822	; 0x802822 <Axes+0x65>
    6c42:	b0 90 23 28 	lds	r11, 0x2823	; 0x802823 <Axes+0x66>
    6c46:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6c4a:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6c4e:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6c52:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6c56:	c7 01       	movw	r24, r14
    6c58:	b6 01       	movw	r22, r12
    6c5a:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6c5e:	20 e0       	ldi	r18, 0x00	; 0
    6c60:	30 e0       	ldi	r19, 0x00	; 0
    6c62:	48 ec       	ldi	r20, 0xC8	; 200
    6c64:	52 e4       	ldi	r21, 0x42	; 66
    6c66:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    6c6a:	69 83       	std	Y+1, r22	; 0x01
    6c6c:	7a 83       	std	Y+2, r23	; 0x02
    6c6e:	8b 83       	std	Y+3, r24	; 0x03
    6c70:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6c72:	c3 01       	movw	r24, r6
    6c74:	b2 01       	movw	r22, r4
    6c76:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6c7a:	9b 01       	movw	r18, r22
    6c7c:	ac 01       	movw	r20, r24
    6c7e:	69 81       	ldd	r22, Y+1	; 0x01
    6c80:	7a 81       	ldd	r23, Y+2	; 0x02
    6c82:	8b 81       	ldd	r24, Y+3	; 0x03
    6c84:	9c 81       	ldd	r25, Y+4	; 0x04
    6c86:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6c8a:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6c8e:	9b 01       	movw	r18, r22
    6c90:	ac 01       	movw	r20, r24
    6c92:	c7 01       	movw	r24, r14
    6c94:	b6 01       	movw	r22, r12
    6c96:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6c9a:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6c9e:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6ca2:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6ca6:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6caa:	c5 01       	movw	r24, r10
    6cac:	b4 01       	movw	r22, r8
    6cae:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6cb2:	9b 01       	movw	r18, r22
    6cb4:	ac 01       	movw	r20, r24
    6cb6:	69 81       	ldd	r22, Y+1	; 0x01
    6cb8:	7a 81       	ldd	r23, Y+2	; 0x02
    6cba:	8b 81       	ldd	r24, Y+3	; 0x03
    6cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    6cbe:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6cc2:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6cc6:	9b 01       	movw	r18, r22
    6cc8:	ac 01       	movw	r20, r24
    6cca:	c7 01       	movw	r24, r14
    6ccc:	b6 01       	movw	r22, r12
    6cce:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6cd2:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6cd6:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6cda:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6cde:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					SET_DIR3;
    6ce2:	e0 e2       	ldi	r30, 0x20	; 32
    6ce4:	f7 e0       	ldi	r31, 0x07	; 7
    6ce6:	84 81       	ldd	r24, Z+4	; 0x04
    6ce8:	81 60       	ori	r24, 0x01	; 1
    6cea:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=3;
    6cec:	83 e0       	ldi	r24, 0x03	; 3
    6cee:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma3=1000;
    6cf2:	88 ee       	ldi	r24, 0xE8	; 232
    6cf4:	93 e0       	ldi	r25, 0x03	; 3
    6cf6:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    6cfa:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
					DistanceToGo3=0x7FFFFFFF;
    6cfe:	8f ef       	ldi	r24, 0xFF	; 255
    6d00:	9f ef       	ldi	r25, 0xFF	; 255
    6d02:	af ef       	ldi	r26, 0xFF	; 255
    6d04:	bf e7       	ldi	r27, 0x7F	; 127
    6d06:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    6d0a:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    6d0e:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    6d12:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
					break;
    6d16:	40 ce       	rjmp	.-896    	; 0x6998 <__vector_96+0x140>
	else if((FreeJog==1 && DIR1)||(FreeJog==2 && DIR2)||(FreeJog==3 && DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    6d18:	24 96       	adiw	r28, 0x04	; 4
    6d1a:	cd bf       	out	0x3d, r28	; 61
    6d1c:	de bf       	out	0x3e, r29	; 62
    6d1e:	df 91       	pop	r29
    6d20:	cf 91       	pop	r28
    6d22:	ff 91       	pop	r31
    6d24:	ef 91       	pop	r30
    6d26:	bf 91       	pop	r27
    6d28:	af 91       	pop	r26
    6d2a:	9f 91       	pop	r25
    6d2c:	8f 91       	pop	r24
    6d2e:	7f 91       	pop	r23
    6d30:	6f 91       	pop	r22
    6d32:	5f 91       	pop	r21
    6d34:	4f 91       	pop	r20
    6d36:	3f 91       	pop	r19
    6d38:	2f 91       	pop	r18
    6d3a:	ff 90       	pop	r15
    6d3c:	ef 90       	pop	r14
    6d3e:	df 90       	pop	r13
    6d40:	cf 90       	pop	r12
    6d42:	bf 90       	pop	r11
    6d44:	af 90       	pop	r10
    6d46:	9f 90       	pop	r9
    6d48:	8f 90       	pop	r8
    6d4a:	7f 90       	pop	r7
    6d4c:	6f 90       	pop	r6
    6d4e:	5f 90       	pop	r5
    6d50:	4f 90       	pop	r4
    6d52:	0f 90       	pop	r0
    6d54:	0b be       	out	0x3b, r0	; 59
    6d56:	0f 90       	pop	r0
    6d58:	0a be       	out	0x3a, r0	; 58
    6d5a:	0f 90       	pop	r0
    6d5c:	09 be       	out	0x39, r0	; 57
    6d5e:	0f 90       	pop	r0
    6d60:	08 be       	out	0x38, r0	; 56
    6d62:	0f 90       	pop	r0
    6d64:	0f be       	out	0x3f, r0	; 63
    6d66:	0f 90       	pop	r0
    6d68:	1f 90       	pop	r1
    6d6a:	18 95       	reti

00006d6c <__vector_64>:

// PORTH interrupt 0 service routine
// Interrupt for Negative jog key 
ISR (PORTD_INT0_vect)
{
    6d6c:	1f 92       	push	r1
    6d6e:	0f 92       	push	r0
    6d70:	0f b6       	in	r0, 0x3f	; 63
    6d72:	0f 92       	push	r0
    6d74:	11 24       	eor	r1, r1
    6d76:	08 b6       	in	r0, 0x38	; 56
    6d78:	0f 92       	push	r0
    6d7a:	18 be       	out	0x38, r1	; 56
    6d7c:	09 b6       	in	r0, 0x39	; 57
    6d7e:	0f 92       	push	r0
    6d80:	19 be       	out	0x39, r1	; 57
    6d82:	0a b6       	in	r0, 0x3a	; 58
    6d84:	0f 92       	push	r0
    6d86:	1a be       	out	0x3a, r1	; 58
    6d88:	0b b6       	in	r0, 0x3b	; 59
    6d8a:	0f 92       	push	r0
    6d8c:	1b be       	out	0x3b, r1	; 59
    6d8e:	4f 92       	push	r4
    6d90:	5f 92       	push	r5
    6d92:	6f 92       	push	r6
    6d94:	7f 92       	push	r7
    6d96:	8f 92       	push	r8
    6d98:	9f 92       	push	r9
    6d9a:	af 92       	push	r10
    6d9c:	bf 92       	push	r11
    6d9e:	cf 92       	push	r12
    6da0:	df 92       	push	r13
    6da2:	ef 92       	push	r14
    6da4:	ff 92       	push	r15
    6da6:	2f 93       	push	r18
    6da8:	3f 93       	push	r19
    6daa:	4f 93       	push	r20
    6dac:	5f 93       	push	r21
    6dae:	6f 93       	push	r22
    6db0:	7f 93       	push	r23
    6db2:	8f 93       	push	r24
    6db4:	9f 93       	push	r25
    6db6:	af 93       	push	r26
    6db8:	bf 93       	push	r27
    6dba:	ef 93       	push	r30
    6dbc:	ff 93       	push	r31
    6dbe:	cf 93       	push	r28
    6dc0:	df 93       	push	r29
    6dc2:	00 d0       	rcall	.+0      	; 0x6dc4 <__vector_64+0x58>
    6dc4:	1f 92       	push	r1
    6dc6:	cd b7       	in	r28, 0x3d	; 61
    6dc8:	de b7       	in	r29, 0x3e	; 62
	if(JogNeg)
    6dca:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    6dce:	83 ff       	sbrs	r24, 3
    6dd0:	8d c0       	rjmp	.+282    	; 0x6eec <__vector_64+0x180>
	{
		if(!JogPos)
    6dd2:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    6dd6:	81 fd       	sbrc	r24, 1
    6dd8:	45 c2       	rjmp	.+1162   	; 0x7264 <__vector_64+0x4f8>
		{
			CurSpeedFrq=0;
    6dda:	10 92 42 27 	sts	0x2742, r1	; 0x802742 <CurSpeedFrq>
    6dde:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <CurSpeedFrq+0x1>
    6de2:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <CurSpeedFrq+0x2>
    6de6:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    6dea:	8f ef       	ldi	r24, 0xFF	; 255
    6dec:	9f ef       	ldi	r25, 0xFF	; 255
    6dee:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    6df2:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6df6:	c0 90 6d 27 	lds	r12, 0x276D	; 0x80276d <MaxSpeed>
    6dfa:	d0 90 6e 27 	lds	r13, 0x276E	; 0x80276e <MaxSpeed+0x1>
    6dfe:	e0 90 6f 27 	lds	r14, 0x276F	; 0x80276f <MaxSpeed+0x2>
    6e02:	f0 90 70 27 	lds	r15, 0x2770	; 0x802770 <MaxSpeed+0x3>
    6e06:	c7 01       	movw	r24, r14
    6e08:	b6 01       	movw	r22, r12
    6e0a:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6e0e:	20 e0       	ldi	r18, 0x00	; 0
    6e10:	30 e0       	ldi	r19, 0x00	; 0
    6e12:	48 ec       	ldi	r20, 0xC8	; 200
    6e14:	52 e4       	ldi	r21, 0x42	; 66
    6e16:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    6e1a:	4b 01       	movw	r8, r22
    6e1c:	5c 01       	movw	r10, r24
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6e1e:	60 91 51 27 	lds	r22, 0x2751	; 0x802751 <IACC>
    6e22:	70 91 52 27 	lds	r23, 0x2752	; 0x802752 <IACC+0x1>
    6e26:	80 91 53 27 	lds	r24, 0x2753	; 0x802753 <IACC+0x2>
    6e2a:	90 91 54 27 	lds	r25, 0x2754	; 0x802754 <IACC+0x3>
    6e2e:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6e32:	9b 01       	movw	r18, r22
    6e34:	ac 01       	movw	r20, r24
    6e36:	c5 01       	movw	r24, r10
    6e38:	b4 01       	movw	r22, r8
    6e3a:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6e3e:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6e42:	9b 01       	movw	r18, r22
    6e44:	ac 01       	movw	r20, r24
    6e46:	c7 01       	movw	r24, r14
    6e48:	b6 01       	movw	r22, r12
    6e4a:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6e4e:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6e52:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6e56:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6e5a:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
			
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    6e5e:	60 91 4d 27 	lds	r22, 0x274D	; 0x80274d <IDEC>
    6e62:	70 91 4e 27 	lds	r23, 0x274E	; 0x80274e <IDEC+0x1>
    6e66:	80 91 4f 27 	lds	r24, 0x274F	; 0x80274f <IDEC+0x2>
    6e6a:	90 91 50 27 	lds	r25, 0x2750	; 0x802750 <IDEC+0x3>
    6e6e:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6e72:	9b 01       	movw	r18, r22
    6e74:	ac 01       	movw	r20, r24
    6e76:	c5 01       	movw	r24, r10
    6e78:	b4 01       	movw	r22, r8
    6e7a:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6e7e:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6e82:	9b 01       	movw	r18, r22
    6e84:	ac 01       	movw	r20, r24
    6e86:	c7 01       	movw	r24, r14
    6e88:	b6 01       	movw	r22, r12
    6e8a:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6e8e:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6e92:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6e96:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6e9a:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
			switch(SelectedAxis)
    6e9e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <SelectedAxis>
    6ea2:	82 30       	cpi	r24, 0x02	; 2
    6ea4:	69 f0       	breq	.+26     	; 0x6ec0 <__vector_64+0x154>
    6ea6:	83 30       	cpi	r24, 0x03	; 3
    6ea8:	a1 f0       	breq	.+40     	; 0x6ed2 <__vector_64+0x166>
    6eaa:	81 30       	cpi	r24, 0x01	; 1
    6eac:	d9 f4       	brne	.+54     	; 0x6ee4 <__vector_64+0x178>
			{
				case 1:
				{
					if(!LIM_NEG1 && Axes[0].HardwareLimitNegIsActive)
    6eae:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    6eb2:	84 fd       	sbrc	r24, 4
    6eb4:	38 c0       	rjmp	.+112    	; 0x6f26 <__vector_64+0x1ba>
    6eb6:	80 91 e7 27 	lds	r24, 0x27E7	; 0x8027e7 <Axes+0x2a>
    6eba:	81 11       	cpse	r24, r1
    6ebc:	13 c0       	rjmp	.+38     	; 0x6ee4 <__vector_64+0x178>
    6ebe:	33 c0       	rjmp	.+102    	; 0x6f26 <__vector_64+0x1ba>
					break;
					
				}
				case 2:
				{
					if(!LIM_NEG2 && Axes[1].HardwareLimitNegIsActive)
    6ec0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    6ec4:	86 fd       	sbrc	r24, 6
    6ec6:	b6 c0       	rjmp	.+364    	; 0x7034 <__vector_64+0x2c8>
    6ec8:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <Axes+0x55>
    6ecc:	81 11       	cpse	r24, r1
    6ece:	0a c0       	rjmp	.+20     	; 0x6ee4 <__vector_64+0x178>
    6ed0:	b1 c0       	rjmp	.+354    	; 0x7034 <__vector_64+0x2c8>
					break;
					
				}
				case 3:
				{
					if(!LIM_NEG3 && Axes[2].HardwareLimitNegIsActive)
    6ed2:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    6ed6:	84 fd       	sbrc	r24, 4
    6ed8:	34 c1       	rjmp	.+616    	; 0x7142 <__vector_64+0x3d6>
    6eda:	80 91 3d 28 	lds	r24, 0x283D	; 0x80283d <Axes+0x80>
    6ede:	88 23       	and	r24, r24
    6ee0:	09 f4       	brne	.+2      	; 0x6ee4 <__vector_64+0x178>
    6ee2:	2f c1       	rjmp	.+606    	; 0x7142 <__vector_64+0x3d6>
					DistanceToGo3=0x7FFFFFFF;
					break;
				}
			}
			
			ACC=1;
    6ee4:	81 e0       	ldi	r24, 0x01	; 1
    6ee6:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <ACC>
    6eea:	bc c1       	rjmp	.+888    	; 0x7264 <__vector_64+0x4f8>
		}
	}
	else if((FreeJog==1 && !DIR1)||(FreeJog==2 && !DIR2)||(FreeJog==3 && !DIR3))
    6eec:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <FreeJog>
    6ef0:	81 30       	cpi	r24, 0x01	; 1
    6ef2:	29 f4       	brne	.+10     	; 0x6efe <__vector_64+0x192>
    6ef4:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6ef8:	84 ff       	sbrs	r24, 4
    6efa:	0f c0       	rjmp	.+30     	; 0x6f1a <__vector_64+0x1ae>
    6efc:	b3 c1       	rjmp	.+870    	; 0x7264 <__vector_64+0x4f8>
    6efe:	82 30       	cpi	r24, 0x02	; 2
    6f00:	29 f4       	brne	.+10     	; 0x6f0c <__vector_64+0x1a0>
    6f02:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6f06:	82 ff       	sbrs	r24, 2
    6f08:	08 c0       	rjmp	.+16     	; 0x6f1a <__vector_64+0x1ae>
    6f0a:	ac c1       	rjmp	.+856    	; 0x7264 <__vector_64+0x4f8>
    6f0c:	83 30       	cpi	r24, 0x03	; 3
    6f0e:	09 f0       	breq	.+2      	; 0x6f12 <__vector_64+0x1a6>
    6f10:	a9 c1       	rjmp	.+850    	; 0x7264 <__vector_64+0x4f8>
    6f12:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    6f16:	80 fd       	sbrc	r24, 0
    6f18:	a5 c1       	rjmp	.+842    	; 0x7264 <__vector_64+0x4f8>
	{
		ACC=0;
    6f1a:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
		DEC=1;
    6f1e:	81 e0       	ldi	r24, 0x01	; 1
    6f20:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <DEC>
	}
}
    6f24:	9f c1       	rjmp	.+830    	; 0x7264 <__vector_64+0x4f8>
			{
				case 1:
				{
					if(!LIM_NEG1 && Axes[0].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[0].MaxSpeed;
    6f26:	ed eb       	ldi	r30, 0xBD	; 189
    6f28:	f7 e2       	ldi	r31, 0x27	; 39
    6f2a:	c5 80       	ldd	r12, Z+5	; 0x05
    6f2c:	d6 80       	ldd	r13, Z+6	; 0x06
    6f2e:	e7 80       	ldd	r14, Z+7	; 0x07
    6f30:	f0 84       	ldd	r15, Z+8	; 0x08
    6f32:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    6f36:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    6f3a:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    6f3e:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    6f42:	41 84       	ldd	r4, Z+9	; 0x09
    6f44:	52 84       	ldd	r5, Z+10	; 0x0a
    6f46:	63 84       	ldd	r6, Z+11	; 0x0b
    6f48:	74 84       	ldd	r7, Z+12	; 0x0c
    6f4a:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    6f4e:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    6f52:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    6f56:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[0].DEC;
    6f5a:	85 84       	ldd	r8, Z+13	; 0x0d
    6f5c:	96 84       	ldd	r9, Z+14	; 0x0e
    6f5e:	a7 84       	ldd	r10, Z+15	; 0x0f
    6f60:	b0 88       	ldd	r11, Z+16	; 0x10
    6f62:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    6f66:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    6f6a:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    6f6e:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    6f72:	c7 01       	movw	r24, r14
    6f74:	b6 01       	movw	r22, r12
    6f76:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6f7a:	20 e0       	ldi	r18, 0x00	; 0
    6f7c:	30 e0       	ldi	r19, 0x00	; 0
    6f7e:	48 ec       	ldi	r20, 0xC8	; 200
    6f80:	52 e4       	ldi	r21, 0x42	; 66
    6f82:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    6f86:	69 83       	std	Y+1, r22	; 0x01
    6f88:	7a 83       	std	Y+2, r23	; 0x02
    6f8a:	8b 83       	std	Y+3, r24	; 0x03
    6f8c:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    6f8e:	c3 01       	movw	r24, r6
    6f90:	b2 01       	movw	r22, r4
    6f92:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6f96:	9b 01       	movw	r18, r22
    6f98:	ac 01       	movw	r20, r24
    6f9a:	69 81       	ldd	r22, Y+1	; 0x01
    6f9c:	7a 81       	ldd	r23, Y+2	; 0x02
    6f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    6fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    6fa2:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6fa6:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6faa:	9b 01       	movw	r18, r22
    6fac:	ac 01       	movw	r20, r24
    6fae:	c7 01       	movw	r24, r14
    6fb0:	b6 01       	movw	r22, r12
    6fb2:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6fb6:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    6fba:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    6fbe:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    6fc2:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    6fc6:	c5 01       	movw	r24, r10
    6fc8:	b4 01       	movw	r22, r8
    6fca:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    6fce:	9b 01       	movw	r18, r22
    6fd0:	ac 01       	movw	r20, r24
    6fd2:	69 81       	ldd	r22, Y+1	; 0x01
    6fd4:	7a 81       	ldd	r23, Y+2	; 0x02
    6fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    6fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    6fda:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    6fde:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    6fe2:	9b 01       	movw	r18, r22
    6fe4:	ac 01       	movw	r20, r24
    6fe6:	c7 01       	movw	r24, r14
    6fe8:	b6 01       	movw	r22, r12
    6fea:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    6fee:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    6ff2:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    6ff6:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    6ffa:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					CLR_DIR1;
    6ffe:	e0 e2       	ldi	r30, 0x20	; 32
    7000:	f7 e0       	ldi	r31, 0x07	; 7
    7002:	84 81       	ldd	r24, Z+4	; 0x04
    7004:	8f 7e       	andi	r24, 0xEF	; 239
    7006:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=1;
    7008:	81 e0       	ldi	r24, 0x01	; 1
    700a:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma1=1000;
    700e:	88 ee       	ldi	r24, 0xE8	; 232
    7010:	93 e0       	ldi	r25, 0x03	; 3
    7012:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <Ma1>
    7016:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <Ma1+0x1>
					DistanceToGo1=0x7FFFFFFF;
    701a:	8f ef       	ldi	r24, 0xFF	; 255
    701c:	9f ef       	ldi	r25, 0xFF	; 255
    701e:	af ef       	ldi	r26, 0xFF	; 255
    7020:	bf e7       	ldi	r27, 0x7F	; 127
    7022:	80 93 90 27 	sts	0x2790, r24	; 0x802790 <DistanceToGo1>
    7026:	90 93 91 27 	sts	0x2791, r25	; 0x802791 <DistanceToGo1+0x1>
    702a:	a0 93 92 27 	sts	0x2792, r26	; 0x802792 <DistanceToGo1+0x2>
    702e:	b0 93 93 27 	sts	0x2793, r27	; 0x802793 <DistanceToGo1+0x3>
					break;
    7032:	58 cf       	rjmp	.-336    	; 0x6ee4 <__vector_64+0x178>
				}
				case 2:
				{
					if(!LIM_NEG2 && Axes[1].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[1].MaxSpeed;
    7034:	ed eb       	ldi	r30, 0xBD	; 189
    7036:	f7 e2       	ldi	r31, 0x27	; 39
    7038:	c0 a8       	ldd	r12, Z+48	; 0x30
    703a:	d1 a8       	ldd	r13, Z+49	; 0x31
    703c:	e2 a8       	ldd	r14, Z+50	; 0x32
    703e:	f3 a8       	ldd	r15, Z+51	; 0x33
    7040:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    7044:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    7048:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    704c:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    7050:	44 a8       	ldd	r4, Z+52	; 0x34
    7052:	55 a8       	ldd	r5, Z+53	; 0x35
    7054:	66 a8       	ldd	r6, Z+54	; 0x36
    7056:	77 a8       	ldd	r7, Z+55	; 0x37
    7058:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    705c:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    7060:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    7064:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[1].DEC;
    7068:	80 ac       	ldd	r8, Z+56	; 0x38
    706a:	91 ac       	ldd	r9, Z+57	; 0x39
    706c:	a2 ac       	ldd	r10, Z+58	; 0x3a
    706e:	b3 ac       	ldd	r11, Z+59	; 0x3b
    7070:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    7074:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    7078:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    707c:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    7080:	c7 01       	movw	r24, r14
    7082:	b6 01       	movw	r22, r12
    7084:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    7088:	20 e0       	ldi	r18, 0x00	; 0
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	48 ec       	ldi	r20, 0xC8	; 200
    708e:	52 e4       	ldi	r21, 0x42	; 66
    7090:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    7094:	69 83       	std	Y+1, r22	; 0x01
    7096:	7a 83       	std	Y+2, r23	; 0x02
    7098:	8b 83       	std	Y+3, r24	; 0x03
    709a:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    709c:	c3 01       	movw	r24, r6
    709e:	b2 01       	movw	r22, r4
    70a0:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    70a4:	9b 01       	movw	r18, r22
    70a6:	ac 01       	movw	r20, r24
    70a8:	69 81       	ldd	r22, Y+1	; 0x01
    70aa:	7a 81       	ldd	r23, Y+2	; 0x02
    70ac:	8b 81       	ldd	r24, Y+3	; 0x03
    70ae:	9c 81       	ldd	r25, Y+4	; 0x04
    70b0:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    70b4:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    70b8:	9b 01       	movw	r18, r22
    70ba:	ac 01       	movw	r20, r24
    70bc:	c7 01       	movw	r24, r14
    70be:	b6 01       	movw	r22, r12
    70c0:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    70c4:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    70c8:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    70cc:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    70d0:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    70d4:	c5 01       	movw	r24, r10
    70d6:	b4 01       	movw	r22, r8
    70d8:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    70dc:	9b 01       	movw	r18, r22
    70de:	ac 01       	movw	r20, r24
    70e0:	69 81       	ldd	r22, Y+1	; 0x01
    70e2:	7a 81       	ldd	r23, Y+2	; 0x02
    70e4:	8b 81       	ldd	r24, Y+3	; 0x03
    70e6:	9c 81       	ldd	r25, Y+4	; 0x04
    70e8:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    70ec:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    70f0:	9b 01       	movw	r18, r22
    70f2:	ac 01       	movw	r20, r24
    70f4:	c7 01       	movw	r24, r14
    70f6:	b6 01       	movw	r22, r12
    70f8:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    70fc:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    7100:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    7104:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    7108:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					CLR_DIR2;
    710c:	e0 e2       	ldi	r30, 0x20	; 32
    710e:	f7 e0       	ldi	r31, 0x07	; 7
    7110:	84 81       	ldd	r24, Z+4	; 0x04
    7112:	8b 7f       	andi	r24, 0xFB	; 251
    7114:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=2;
    7116:	82 e0       	ldi	r24, 0x02	; 2
    7118:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma2=1000;
    711c:	88 ee       	ldi	r24, 0xE8	; 232
    711e:	93 e0       	ldi	r25, 0x03	; 3
    7120:	80 93 2e 27 	sts	0x272E, r24	; 0x80272e <Ma2>
    7124:	90 93 2f 27 	sts	0x272F, r25	; 0x80272f <Ma2+0x1>
					DistanceToGo2=0x7FFFFFFF;
    7128:	8f ef       	ldi	r24, 0xFF	; 255
    712a:	9f ef       	ldi	r25, 0xFF	; 255
    712c:	af ef       	ldi	r26, 0xFF	; 255
    712e:	bf e7       	ldi	r27, 0x7F	; 127
    7130:	80 93 8c 27 	sts	0x278C, r24	; 0x80278c <DistanceToGo2>
    7134:	90 93 8d 27 	sts	0x278D, r25	; 0x80278d <DistanceToGo2+0x1>
    7138:	a0 93 8e 27 	sts	0x278E, r26	; 0x80278e <DistanceToGo2+0x2>
    713c:	b0 93 8f 27 	sts	0x278F, r27	; 0x80278f <DistanceToGo2+0x3>
					break;
    7140:	d1 ce       	rjmp	.-606    	; 0x6ee4 <__vector_64+0x178>
				}
				case 3:
				{
					if(!LIM_NEG3 && Axes[2].HardwareLimitNegIsActive)
					break;
					MaxSpeed=Axes[2].MaxSpeed;
    7142:	c0 90 18 28 	lds	r12, 0x2818	; 0x802818 <Axes+0x5b>
    7146:	d0 90 19 28 	lds	r13, 0x2819	; 0x802819 <Axes+0x5c>
    714a:	e0 90 1a 28 	lds	r14, 0x281A	; 0x80281a <Axes+0x5d>
    714e:	f0 90 1b 28 	lds	r15, 0x281B	; 0x80281b <Axes+0x5e>
    7152:	c0 92 6d 27 	sts	0x276D, r12	; 0x80276d <MaxSpeed>
    7156:	d0 92 6e 27 	sts	0x276E, r13	; 0x80276e <MaxSpeed+0x1>
    715a:	e0 92 6f 27 	sts	0x276F, r14	; 0x80276f <MaxSpeed+0x2>
    715e:	f0 92 70 27 	sts	0x2770, r15	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    7162:	40 90 1c 28 	lds	r4, 0x281C	; 0x80281c <Axes+0x5f>
    7166:	50 90 1d 28 	lds	r5, 0x281D	; 0x80281d <Axes+0x60>
    716a:	60 90 1e 28 	lds	r6, 0x281E	; 0x80281e <Axes+0x61>
    716e:	70 90 1f 28 	lds	r7, 0x281F	; 0x80281f <Axes+0x62>
    7172:	40 92 51 27 	sts	0x2751, r4	; 0x802751 <IACC>
    7176:	50 92 52 27 	sts	0x2752, r5	; 0x802752 <IACC+0x1>
    717a:	60 92 53 27 	sts	0x2753, r6	; 0x802753 <IACC+0x2>
    717e:	70 92 54 27 	sts	0x2754, r7	; 0x802754 <IACC+0x3>
					IDEC=Axes[2].DEC;
    7182:	80 90 20 28 	lds	r8, 0x2820	; 0x802820 <Axes+0x63>
    7186:	90 90 21 28 	lds	r9, 0x2821	; 0x802821 <Axes+0x64>
    718a:	a0 90 22 28 	lds	r10, 0x2822	; 0x802822 <Axes+0x65>
    718e:	b0 90 23 28 	lds	r11, 0x2823	; 0x802823 <Axes+0x66>
    7192:	80 92 4d 27 	sts	0x274D, r8	; 0x80274d <IDEC>
    7196:	90 92 4e 27 	sts	0x274E, r9	; 0x80274e <IDEC+0x1>
    719a:	a0 92 4f 27 	sts	0x274F, r10	; 0x80274f <IDEC+0x2>
    719e:	b0 92 50 27 	sts	0x2750, r11	; 0x802750 <IDEC+0x3>
					
					ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    71a2:	c7 01       	movw	r24, r14
    71a4:	b6 01       	movw	r22, r12
    71a6:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    71aa:	20 e0       	ldi	r18, 0x00	; 0
    71ac:	30 e0       	ldi	r19, 0x00	; 0
    71ae:	48 ec       	ldi	r20, 0xC8	; 200
    71b0:	52 e4       	ldi	r21, 0x42	; 66
    71b2:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    71b6:	69 83       	std	Y+1, r22	; 0x01
    71b8:	7a 83       	std	Y+2, r23	; 0x02
    71ba:	8b 83       	std	Y+3, r24	; 0x03
    71bc:	9c 83       	std	Y+4, r25	; 0x04
					ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    71be:	c3 01       	movw	r24, r6
    71c0:	b2 01       	movw	r22, r4
    71c2:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    71c6:	9b 01       	movw	r18, r22
    71c8:	ac 01       	movw	r20, r24
    71ca:	69 81       	ldd	r22, Y+1	; 0x01
    71cc:	7a 81       	ldd	r23, Y+2	; 0x02
    71ce:	8b 81       	ldd	r24, Y+3	; 0x03
    71d0:	9c 81       	ldd	r25, Y+4	; 0x04
    71d2:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    71d6:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    71da:	9b 01       	movw	r18, r22
    71dc:	ac 01       	movw	r20, r24
    71de:	c7 01       	movw	r24, r14
    71e0:	b6 01       	movw	r22, r12
    71e2:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    71e6:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <ACCSpeedINT>
    71ea:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <ACCSpeedINT+0x1>
    71ee:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <ACCSpeedINT+0x2>
    71f2:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <ACCSpeedINT+0x3>
					
					DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
					DECSpeedINT= MaxSpeed / DECSpeedINT;
    71f6:	c5 01       	movw	r24, r10
    71f8:	b4 01       	movw	r22, r8
    71fa:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    71fe:	9b 01       	movw	r18, r22
    7200:	ac 01       	movw	r20, r24
    7202:	69 81       	ldd	r22, Y+1	; 0x01
    7204:	7a 81       	ldd	r23, Y+2	; 0x02
    7206:	8b 81       	ldd	r24, Y+3	; 0x03
    7208:	9c 81       	ldd	r25, Y+4	; 0x04
    720a:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    720e:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <__fixsfsi>
    7212:	9b 01       	movw	r18, r22
    7214:	ac 01       	movw	r20, r24
    7216:	c7 01       	movw	r24, r14
    7218:	b6 01       	movw	r22, r12
    721a:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <__divmodsi4>
    721e:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <DECSpeedINT>
    7222:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <DECSpeedINT+0x1>
    7226:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <DECSpeedINT+0x2>
    722a:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <DECSpeedINT+0x3>
					
					CLR_DIR3;
    722e:	e0 e2       	ldi	r30, 0x20	; 32
    7230:	f7 e0       	ldi	r31, 0x07	; 7
    7232:	84 81       	ldd	r24, Z+4	; 0x04
    7234:	8e 7f       	andi	r24, 0xFE	; 254
    7236:	84 83       	std	Z+4, r24	; 0x04
					FreeJog=3;
    7238:	83 e0       	ldi	r24, 0x03	; 3
    723a:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <FreeJog>
					Ma3=1000;
    723e:	88 ee       	ldi	r24, 0xE8	; 232
    7240:	93 e0       	ldi	r25, 0x03	; 3
    7242:	80 93 2c 27 	sts	0x272C, r24	; 0x80272c <Ma3>
    7246:	90 93 2d 27 	sts	0x272D, r25	; 0x80272d <Ma3+0x1>
					DistanceToGo3=0x7FFFFFFF;
    724a:	8f ef       	ldi	r24, 0xFF	; 255
    724c:	9f ef       	ldi	r25, 0xFF	; 255
    724e:	af ef       	ldi	r26, 0xFF	; 255
    7250:	bf e7       	ldi	r27, 0x7F	; 127
    7252:	80 93 88 27 	sts	0x2788, r24	; 0x802788 <DistanceToGo3>
    7256:	90 93 89 27 	sts	0x2789, r25	; 0x802789 <DistanceToGo3+0x1>
    725a:	a0 93 8a 27 	sts	0x278A, r26	; 0x80278a <DistanceToGo3+0x2>
    725e:	b0 93 8b 27 	sts	0x278B, r27	; 0x80278b <DistanceToGo3+0x3>
					break;
    7262:	40 ce       	rjmp	.-896    	; 0x6ee4 <__vector_64+0x178>
	else if((FreeJog==1 && !DIR1)||(FreeJog==2 && !DIR2)||(FreeJog==3 && !DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    7264:	24 96       	adiw	r28, 0x04	; 4
    7266:	cd bf       	out	0x3d, r28	; 61
    7268:	de bf       	out	0x3e, r29	; 62
    726a:	df 91       	pop	r29
    726c:	cf 91       	pop	r28
    726e:	ff 91       	pop	r31
    7270:	ef 91       	pop	r30
    7272:	bf 91       	pop	r27
    7274:	af 91       	pop	r26
    7276:	9f 91       	pop	r25
    7278:	8f 91       	pop	r24
    727a:	7f 91       	pop	r23
    727c:	6f 91       	pop	r22
    727e:	5f 91       	pop	r21
    7280:	4f 91       	pop	r20
    7282:	3f 91       	pop	r19
    7284:	2f 91       	pop	r18
    7286:	ff 90       	pop	r15
    7288:	ef 90       	pop	r14
    728a:	df 90       	pop	r13
    728c:	cf 90       	pop	r12
    728e:	bf 90       	pop	r11
    7290:	af 90       	pop	r10
    7292:	9f 90       	pop	r9
    7294:	8f 90       	pop	r8
    7296:	7f 90       	pop	r7
    7298:	6f 90       	pop	r6
    729a:	5f 90       	pop	r5
    729c:	4f 90       	pop	r4
    729e:	0f 90       	pop	r0
    72a0:	0b be       	out	0x3b, r0	; 59
    72a2:	0f 90       	pop	r0
    72a4:	0a be       	out	0x3a, r0	; 58
    72a6:	0f 90       	pop	r0
    72a8:	09 be       	out	0x39, r0	; 57
    72aa:	0f 90       	pop	r0
    72ac:	08 be       	out	0x38, r0	; 56
    72ae:	0f 90       	pop	r0
    72b0:	0f be       	out	0x3f, r0	; 63
    72b2:	0f 90       	pop	r0
    72b4:	1f 90       	pop	r1
    72b6:	18 95       	reti

000072b8 <__vector_65>:

//Port D interrupt
//Start Stop Key Interrupt

ISR (PORTD_INT1_vect)
{
    72b8:	1f 92       	push	r1
    72ba:	0f 92       	push	r0
    72bc:	0f b6       	in	r0, 0x3f	; 63
    72be:	0f 92       	push	r0
    72c0:	11 24       	eor	r1, r1
    72c2:	08 b6       	in	r0, 0x38	; 56
    72c4:	0f 92       	push	r0
    72c6:	18 be       	out	0x38, r1	; 56
    72c8:	09 b6       	in	r0, 0x39	; 57
    72ca:	0f 92       	push	r0
    72cc:	19 be       	out	0x39, r1	; 57
    72ce:	0a b6       	in	r0, 0x3a	; 58
    72d0:	0f 92       	push	r0
    72d2:	1a be       	out	0x3a, r1	; 58
    72d4:	0b b6       	in	r0, 0x3b	; 59
    72d6:	0f 92       	push	r0
    72d8:	1b be       	out	0x3b, r1	; 59
    72da:	2f 92       	push	r2
    72dc:	3f 92       	push	r3
    72de:	4f 92       	push	r4
    72e0:	5f 92       	push	r5
    72e2:	6f 92       	push	r6
    72e4:	7f 92       	push	r7
    72e6:	8f 92       	push	r8
    72e8:	9f 92       	push	r9
    72ea:	af 92       	push	r10
    72ec:	bf 92       	push	r11
    72ee:	cf 92       	push	r12
    72f0:	df 92       	push	r13
    72f2:	ef 92       	push	r14
    72f4:	ff 92       	push	r15
    72f6:	0f 93       	push	r16
    72f8:	1f 93       	push	r17
    72fa:	2f 93       	push	r18
    72fc:	3f 93       	push	r19
    72fe:	4f 93       	push	r20
    7300:	5f 93       	push	r21
    7302:	6f 93       	push	r22
    7304:	7f 93       	push	r23
    7306:	8f 93       	push	r24
    7308:	9f 93       	push	r25
    730a:	af 93       	push	r26
    730c:	bf 93       	push	r27
    730e:	ef 93       	push	r30
    7310:	ff 93       	push	r31
    7312:	cf 93       	push	r28
    7314:	df 93       	push	r29
    7316:	cd b7       	in	r28, 0x3d	; 61
    7318:	de b7       	in	r29, 0x3e	; 62
    731a:	28 97       	sbiw	r28, 0x08	; 8
    731c:	cd bf       	out	0x3d, r28	; 61
    731e:	de bf       	out	0x3e, r29	; 62
	//printf("PortD INT1\r\n");
	if(RunProgram)
    7320:	e0 e6       	ldi	r30, 0x60	; 96
    7322:	f6 e0       	ldi	r31, 0x06	; 6
    7324:	80 85       	ldd	r24, Z+8	; 0x08
		//     {
		//         PRGExe();
		//         IsPause=0;
		//     }
	}
	if(StopProgram)
    7326:	80 85       	ldd	r24, Z+8	; 0x08
    7328:	82 ff       	sbrs	r24, 2
    732a:	8a c2       	rjmp	.+1300   	; 0x7840 <__vector_65+0x588>
	{
		if(ProgramRun)
    732c:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    7330:	88 23       	and	r24, r24
    7332:	31 f1       	breq	.+76     	; 0x7380 <__vector_65+0xc8>
		{
			IsPause=1;
    7334:	81 e0       	ldi	r24, 0x01	; 1
    7336:	80 93 da 26 	sts	0x26DA, r24	; 0x8026da <IsPause>
			DistanceToGo1=0;
    733a:	10 92 90 27 	sts	0x2790, r1	; 0x802790 <DistanceToGo1>
    733e:	10 92 91 27 	sts	0x2791, r1	; 0x802791 <DistanceToGo1+0x1>
    7342:	10 92 92 27 	sts	0x2792, r1	; 0x802792 <DistanceToGo1+0x2>
    7346:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <DistanceToGo1+0x3>
			DistanceToGo2=0;
    734a:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <DistanceToGo2>
    734e:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <DistanceToGo2+0x1>
    7352:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <DistanceToGo2+0x2>
    7356:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <DistanceToGo2+0x3>
			DistanceToGo3=0;
    735a:	10 92 88 27 	sts	0x2788, r1	; 0x802788 <DistanceToGo3>
    735e:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <DistanceToGo3+0x1>
    7362:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <DistanceToGo3+0x2>
    7366:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <DistanceToGo3+0x3>
			sprintf(BufferSend,"!4100\r\n");
    736a:	98 e0       	ldi	r25, 0x08	; 8
    736c:	e0 e1       	ldi	r30, 0x10	; 16
    736e:	f6 e2       	ldi	r31, 0x26	; 38
    7370:	a7 e5       	ldi	r26, 0x57	; 87
    7372:	b9 e2       	ldi	r27, 0x29	; 41
    7374:	01 90       	ld	r0, Z+
    7376:	0d 92       	st	X+, r0
    7378:	9a 95       	dec	r25
    737a:	e1 f7       	brne	.-8      	; 0x7374 <__vector_65+0xbc>
			Responsing=1;
    737c:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <Responsing>
		}
		
		StopTime=0;
    7380:	10 92 d9 26 	sts	0x26D9, r1	; 0x8026d9 <StopTime>
			{


				DO1_CLR;

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    7384:	22 24       	eor	r2, r2
    7386:	23 94       	inc	r2
			sprintf(BufferSend,"!4100\r\n");
			Responsing=1;
		}
		
		StopTime=0;
		while(StopProgram)
    7388:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    738c:	82 ff       	sbrs	r24, 2
    738e:	58 c2       	rjmp	.+1200   	; 0x7840 <__vector_65+0x588>
    7390:	2f ef       	ldi	r18, 0xFF	; 255
    7392:	83 ec       	ldi	r24, 0xC3	; 195
    7394:	99 e0       	ldi	r25, 0x09	; 9
    7396:	21 50       	subi	r18, 0x01	; 1
    7398:	80 40       	sbci	r24, 0x00	; 0
    739a:	90 40       	sbci	r25, 0x00	; 0
    739c:	e1 f7       	brne	.-8      	; 0x7396 <__vector_65+0xde>
    739e:	00 c0       	rjmp	.+0      	; 0x73a0 <__vector_65+0xe8>
    73a0:	00 00       	nop
		{
			_delay_ms(100);
			StopTime++;
    73a2:	80 91 d9 26 	lds	r24, 0x26D9	; 0x8026d9 <StopTime>
    73a6:	8f 5f       	subi	r24, 0xFF	; 255
    73a8:	80 93 d9 26 	sts	0x26D9, r24	; 0x8026d9 <StopTime>
			if(StopTime>30)
    73ac:	8f 31       	cpi	r24, 0x1F	; 31
    73ae:	60 f3       	brcs	.-40     	; 0x7388 <__vector_65+0xd0>
			{


				DO1_CLR;
    73b0:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>
    73b4:	8b 7f       	andi	r24, 0xFB	; 251
    73b6:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    73ba:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    73be:	81 11       	cpse	r24, r1
    73c0:	0e c0       	rjmp	.+28     	; 0x73de <__vector_65+0x126>
    73c2:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    73c6:	91 11       	cpse	r25, r1
    73c8:	0a c0       	rjmp	.+20     	; 0x73de <__vector_65+0x126>
    73ca:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    73ce:	22 2d       	mov	r18, r2
    73d0:	91 11       	cpse	r25, r1
    73d2:	01 c0       	rjmp	.+2      	; 0x73d6 <__vector_65+0x11e>
    73d4:	20 e0       	ldi	r18, 0x00	; 0
    73d6:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
				while (AxisMoving == 1)
    73da:	99 23       	and	r25, r25
    73dc:	99 f0       	breq	.+38     	; 0x7404 <__vector_65+0x14c>
    73de:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <AxisIsMoving2>
    73e2:	91 11       	cpse	r25, r1
    73e4:	07 c0       	rjmp	.+14     	; 0x73f4 <__vector_65+0x13c>
    73e6:	22 2d       	mov	r18, r2
    73e8:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    73ec:	91 11       	cpse	r25, r1
    73ee:	03 c0       	rjmp	.+6      	; 0x73f6 <__vector_65+0x13e>
    73f0:	20 e0       	ldi	r18, 0x00	; 0
    73f2:	01 c0       	rjmp	.+2      	; 0x73f6 <__vector_65+0x13e>
    73f4:	22 2d       	mov	r18, r2
    73f6:	92 2f       	mov	r25, r18
				{
					AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
    73f8:	81 11       	cpse	r24, r1
    73fa:	fe cf       	rjmp	.-4      	; 0x73f8 <__vector_65+0x140>


				DO1_CLR;

				AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
				while (AxisMoving == 1)
    73fc:	91 11       	cpse	r25, r1
    73fe:	fc cf       	rjmp	.-8      	; 0x73f8 <__vector_65+0x140>
    7400:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <AxisMoving>
				{
					AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3;
				}
				if(SoftRef1<AxisPosition1) CLR_DIR1;
    7404:	40 90 a0 27 	lds	r4, 0x27A0	; 0x8027a0 <SoftRef1>
    7408:	50 90 a1 27 	lds	r5, 0x27A1	; 0x8027a1 <SoftRef1+0x1>
    740c:	60 90 a2 27 	lds	r6, 0x27A2	; 0x8027a2 <SoftRef1+0x2>
    7410:	70 90 a3 27 	lds	r7, 0x27A3	; 0x8027a3 <SoftRef1+0x3>
    7414:	c0 90 ac 27 	lds	r12, 0x27AC	; 0x8027ac <AxisPosition1>
    7418:	d0 90 ad 27 	lds	r13, 0x27AD	; 0x8027ad <AxisPosition1+0x1>
    741c:	e0 90 ae 27 	lds	r14, 0x27AE	; 0x8027ae <AxisPosition1+0x2>
    7420:	f0 90 af 27 	lds	r15, 0x27AF	; 0x8027af <AxisPosition1+0x3>
    7424:	4c 14       	cp	r4, r12
    7426:	5d 04       	cpc	r5, r13
    7428:	6e 04       	cpc	r6, r14
    742a:	7f 04       	cpc	r7, r15
    742c:	2c f4       	brge	.+10     	; 0x7438 <__vector_65+0x180>
    742e:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    7432:	8f 7e       	andi	r24, 0xEF	; 239
    7434:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef1>AxisPosition1) SET_DIR1;
    7438:	c4 14       	cp	r12, r4
    743a:	d5 04       	cpc	r13, r5
    743c:	e6 04       	cpc	r14, r6
    743e:	f7 04       	cpc	r15, r7
    7440:	2c f4       	brge	.+10     	; 0x744c <__vector_65+0x194>
    7442:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    7446:	80 61       	ori	r24, 0x10	; 16
    7448:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				if(SoftRef2<AxisPosition2) CLR_DIR2;
    744c:	80 90 9c 27 	lds	r8, 0x279C	; 0x80279c <SoftRef2>
    7450:	90 90 9d 27 	lds	r9, 0x279D	; 0x80279d <SoftRef2+0x1>
    7454:	a0 90 9e 27 	lds	r10, 0x279E	; 0x80279e <SoftRef2+0x2>
    7458:	b0 90 9f 27 	lds	r11, 0x279F	; 0x80279f <SoftRef2+0x3>
    745c:	40 91 a8 27 	lds	r20, 0x27A8	; 0x8027a8 <AxisPosition2>
    7460:	50 91 a9 27 	lds	r21, 0x27A9	; 0x8027a9 <AxisPosition2+0x1>
    7464:	60 91 aa 27 	lds	r22, 0x27AA	; 0x8027aa <AxisPosition2+0x2>
    7468:	70 91 ab 27 	lds	r23, 0x27AB	; 0x8027ab <AxisPosition2+0x3>
    746c:	84 16       	cp	r8, r20
    746e:	95 06       	cpc	r9, r21
    7470:	a6 06       	cpc	r10, r22
    7472:	b7 06       	cpc	r11, r23
    7474:	2c f4       	brge	.+10     	; 0x7480 <__vector_65+0x1c8>
    7476:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    747a:	8b 7f       	andi	r24, 0xFB	; 251
    747c:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef2>AxisPosition2) SET_DIR2;
    7480:	48 15       	cp	r20, r8
    7482:	59 05       	cpc	r21, r9
    7484:	6a 05       	cpc	r22, r10
    7486:	7b 05       	cpc	r23, r11
    7488:	2c f4       	brge	.+10     	; 0x7494 <__vector_65+0x1dc>
    748a:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    748e:	84 60       	ori	r24, 0x04	; 4
    7490:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				if(SoftRef3<AxisPosition3) CLR_DIR3;
    7494:	00 91 98 27 	lds	r16, 0x2798	; 0x802798 <SoftRef3>
    7498:	10 91 99 27 	lds	r17, 0x2799	; 0x802799 <SoftRef3+0x1>
    749c:	20 91 9a 27 	lds	r18, 0x279A	; 0x80279a <SoftRef3+0x2>
    74a0:	30 91 9b 27 	lds	r19, 0x279B	; 0x80279b <SoftRef3+0x3>
    74a4:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <AxisPosition3>
    74a8:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <AxisPosition3+0x1>
    74ac:	a0 91 a6 27 	lds	r26, 0x27A6	; 0x8027a6 <AxisPosition3+0x2>
    74b0:	b0 91 a7 27 	lds	r27, 0x27A7	; 0x8027a7 <AxisPosition3+0x3>
    74b4:	08 17       	cp	r16, r24
    74b6:	19 07       	cpc	r17, r25
    74b8:	2a 07       	cpc	r18, r26
    74ba:	3b 07       	cpc	r19, r27
    74bc:	34 f4       	brge	.+12     	; 0x74ca <__vector_65+0x212>
    74be:	30 90 24 07 	lds	r3, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    74c2:	e3 2d       	mov	r30, r3
    74c4:	ee 7f       	andi	r30, 0xFE	; 254
    74c6:	e0 93 24 07 	sts	0x0724, r30	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				if(SoftRef3>AxisPosition3) SET_DIR3;
    74ca:	80 17       	cp	r24, r16
    74cc:	91 07       	cpc	r25, r17
    74ce:	a2 07       	cpc	r26, r18
    74d0:	b3 07       	cpc	r27, r19
    74d2:	34 f4       	brge	.+12     	; 0x74e0 <__vector_65+0x228>
    74d4:	30 90 24 07 	lds	r3, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    74d8:	f3 2d       	mov	r31, r3
    74da:	f1 60       	ori	r31, 0x01	; 1
    74dc:	f0 93 24 07 	sts	0x0724, r31	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
				
				//printf("SoftRef1: %d\tSoftRef2: %d\tSoftRef3: %d\r\n",SoftRef1,SoftRef2,SoftRef3);
				DistanceToGo1=labs(AxisPosition1-SoftRef1);
    74e0:	c4 18       	sub	r12, r4
    74e2:	d5 08       	sbc	r13, r5
    74e4:	e6 08       	sbc	r14, r6
    74e6:	f7 08       	sbc	r15, r7
    74e8:	26 01       	movw	r4, r12
    74ea:	37 01       	movw	r6, r14
    74ec:	3a f4       	brpl	.+14     	; 0x74fc <__vector_65+0x244>
    74ee:	44 24       	eor	r4, r4
    74f0:	55 24       	eor	r5, r5
    74f2:	32 01       	movw	r6, r4
    74f4:	4c 18       	sub	r4, r12
    74f6:	5d 08       	sbc	r5, r13
    74f8:	6e 08       	sbc	r6, r14
    74fa:	7f 08       	sbc	r7, r15
    74fc:	73 01       	movw	r14, r6
    74fe:	62 01       	movw	r12, r4
    7500:	40 92 90 27 	sts	0x2790, r4	; 0x802790 <DistanceToGo1>
    7504:	50 92 91 27 	sts	0x2791, r5	; 0x802791 <DistanceToGo1+0x1>
    7508:	60 92 92 27 	sts	0x2792, r6	; 0x802792 <DistanceToGo1+0x2>
    750c:	70 92 93 27 	sts	0x2793, r7	; 0x802793 <DistanceToGo1+0x3>
				DistanceToGo2=labs(AxisPosition2-SoftRef2);
    7510:	48 19       	sub	r20, r8
    7512:	59 09       	sbc	r21, r9
    7514:	6a 09       	sbc	r22, r10
    7516:	7b 09       	sbc	r23, r11
    7518:	4a 01       	movw	r8, r20
    751a:	5b 01       	movw	r10, r22
    751c:	3a f4       	brpl	.+14     	; 0x752c <__vector_65+0x274>
    751e:	88 24       	eor	r8, r8
    7520:	99 24       	eor	r9, r9
    7522:	54 01       	movw	r10, r8
    7524:	84 1a       	sub	r8, r20
    7526:	95 0a       	sbc	r9, r21
    7528:	a6 0a       	sbc	r10, r22
    752a:	b7 0a       	sbc	r11, r23
    752c:	24 01       	movw	r4, r8
    752e:	35 01       	movw	r6, r10
    7530:	80 92 8c 27 	sts	0x278C, r8	; 0x80278c <DistanceToGo2>
    7534:	90 92 8d 27 	sts	0x278D, r9	; 0x80278d <DistanceToGo2+0x1>
    7538:	a0 92 8e 27 	sts	0x278E, r10	; 0x80278e <DistanceToGo2+0x2>
    753c:	b0 92 8f 27 	sts	0x278F, r11	; 0x80278f <DistanceToGo2+0x3>
				DistanceToGo3=labs(AxisPosition3-SoftRef3);
    7540:	80 1b       	sub	r24, r16
    7542:	91 0b       	sbc	r25, r17
    7544:	a2 0b       	sbc	r26, r18
    7546:	b3 0b       	sbc	r27, r19
    7548:	ac 01       	movw	r20, r24
    754a:	bd 01       	movw	r22, r26
    754c:	3a f4       	brpl	.+14     	; 0x755c <__vector_65+0x2a4>
    754e:	44 27       	eor	r20, r20
    7550:	55 27       	eor	r21, r21
    7552:	ba 01       	movw	r22, r20
    7554:	48 1b       	sub	r20, r24
    7556:	59 0b       	sbc	r21, r25
    7558:	6a 0b       	sbc	r22, r26
    755a:	7b 0b       	sbc	r23, r27
    755c:	49 83       	std	Y+1, r20	; 0x01
    755e:	5a 83       	std	Y+2, r21	; 0x02
    7560:	6b 83       	std	Y+3, r22	; 0x03
    7562:	7c 83       	std	Y+4, r23	; 0x04
    7564:	40 93 88 27 	sts	0x2788, r20	; 0x802788 <DistanceToGo3>
    7568:	50 93 89 27 	sts	0x2789, r21	; 0x802789 <DistanceToGo3+0x1>
    756c:	60 93 8a 27 	sts	0x278A, r22	; 0x80278a <DistanceToGo3+0x2>
    7570:	70 93 8b 27 	sts	0x278B, r23	; 0x80278b <DistanceToGo3+0x3>
				//printf("DistanceToGo1: %d\tDistanceToGo2: %d\tDistanceToGo3: %d\r\n",DistanceToGo1,DistanceToGo2,DistanceToGo3);
				if(DistanceToGo1 > DistanceToGo2 && DistanceToGo1 > DistanceToGo3)
    7574:	4c 14       	cp	r4, r12
    7576:	5d 04       	cpc	r5, r13
    7578:	6e 04       	cpc	r6, r14
    757a:	7f 04       	cpc	r7, r15
    757c:	ec f5       	brge	.+122    	; 0x75f8 <__vector_65+0x340>
    757e:	4c 15       	cp	r20, r12
    7580:	5d 05       	cpc	r21, r13
    7582:	6e 05       	cpc	r22, r14
    7584:	7f 05       	cpc	r23, r15
    7586:	c4 f5       	brge	.+112    	; 0x75f8 <__vector_65+0x340>
				{
					MaxSpeed = Axes[0].MaxSpeed;
    7588:	80 91 c2 27 	lds	r24, 0x27C2	; 0x8027c2 <Axes+0x5>
    758c:	90 91 c3 27 	lds	r25, 0x27C3	; 0x8027c3 <Axes+0x6>
    7590:	a0 91 c4 27 	lds	r26, 0x27C4	; 0x8027c4 <Axes+0x7>
    7594:	b0 91 c5 27 	lds	r27, 0x27C5	; 0x8027c5 <Axes+0x8>
    7598:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    759c:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    75a0:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    75a4:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[0].ACC;
    75a8:	80 91 c6 27 	lds	r24, 0x27C6	; 0x8027c6 <Axes+0x9>
    75ac:	90 91 c7 27 	lds	r25, 0x27C7	; 0x8027c7 <Axes+0xa>
    75b0:	a0 91 c8 27 	lds	r26, 0x27C8	; 0x8027c8 <Axes+0xb>
    75b4:	b0 91 c9 27 	lds	r27, 0x27C9	; 0x8027c9 <Axes+0xc>
    75b8:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    75bc:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    75c0:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    75c4:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
					IDEC=Axes[0].DEC;
    75c8:	80 91 ca 27 	lds	r24, 0x27CA	; 0x8027ca <Axes+0xd>
    75cc:	90 91 cb 27 	lds	r25, 0x27CB	; 0x8027cb <Axes+0xe>
    75d0:	a0 91 cc 27 	lds	r26, 0x27CC	; 0x8027cc <Axes+0xf>
    75d4:	b0 91 cd 27 	lds	r27, 0x27CD	; 0x8027cd <Axes+0x10>
    75d8:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    75dc:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    75e0:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    75e4:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition1-SoftRef1);
    75e8:	c0 92 94 27 	sts	0x2794, r12	; 0x802794 <MaxDistanceToGo>
    75ec:	d0 92 95 27 	sts	0x2795, r13	; 0x802795 <MaxDistanceToGo+0x1>
    75f0:	e0 92 96 27 	sts	0x2796, r14	; 0x802796 <MaxDistanceToGo+0x2>
    75f4:	f0 92 97 27 	sts	0x2797, r15	; 0x802797 <MaxDistanceToGo+0x3>
				}
				if(DistanceToGo2 > DistanceToGo1 && DistanceToGo2 > DistanceToGo3)
    75f8:	c4 14       	cp	r12, r4
    75fa:	d5 04       	cpc	r13, r5
    75fc:	e6 04       	cpc	r14, r6
    75fe:	f7 04       	cpc	r15, r7
    7600:	0c f0       	brlt	.+2      	; 0x7604 <__vector_65+0x34c>
    7602:	41 c0       	rjmp	.+130    	; 0x7686 <__vector_65+0x3ce>
    7604:	89 81       	ldd	r24, Y+1	; 0x01
    7606:	9a 81       	ldd	r25, Y+2	; 0x02
    7608:	ab 81       	ldd	r26, Y+3	; 0x03
    760a:	bc 81       	ldd	r27, Y+4	; 0x04
    760c:	84 15       	cp	r24, r4
    760e:	95 05       	cpc	r25, r5
    7610:	a6 05       	cpc	r26, r6
    7612:	b7 05       	cpc	r27, r7
    7614:	c4 f5       	brge	.+112    	; 0x7686 <__vector_65+0x3ce>
				{
					MaxSpeed = Axes[1].MaxSpeed;
    7616:	80 91 ed 27 	lds	r24, 0x27ED	; 0x8027ed <Axes+0x30>
    761a:	90 91 ee 27 	lds	r25, 0x27EE	; 0x8027ee <Axes+0x31>
    761e:	a0 91 ef 27 	lds	r26, 0x27EF	; 0x8027ef <Axes+0x32>
    7622:	b0 91 f0 27 	lds	r27, 0x27F0	; 0x8027f0 <Axes+0x33>
    7626:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    762a:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    762e:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    7632:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[1].ACC;
    7636:	80 91 f1 27 	lds	r24, 0x27F1	; 0x8027f1 <Axes+0x34>
    763a:	90 91 f2 27 	lds	r25, 0x27F2	; 0x8027f2 <Axes+0x35>
    763e:	a0 91 f3 27 	lds	r26, 0x27F3	; 0x8027f3 <Axes+0x36>
    7642:	b0 91 f4 27 	lds	r27, 0x27F4	; 0x8027f4 <Axes+0x37>
    7646:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    764a:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    764e:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    7652:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
					IDEC=Axes[1].DEC;
    7656:	80 91 f5 27 	lds	r24, 0x27F5	; 0x8027f5 <Axes+0x38>
    765a:	90 91 f6 27 	lds	r25, 0x27F6	; 0x8027f6 <Axes+0x39>
    765e:	a0 91 f7 27 	lds	r26, 0x27F7	; 0x8027f7 <Axes+0x3a>
    7662:	b0 91 f8 27 	lds	r27, 0x27F8	; 0x8027f8 <Axes+0x3b>
    7666:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    766a:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    766e:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    7672:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition2-SoftRef2);
    7676:	40 92 94 27 	sts	0x2794, r4	; 0x802794 <MaxDistanceToGo>
    767a:	50 92 95 27 	sts	0x2795, r5	; 0x802795 <MaxDistanceToGo+0x1>
    767e:	60 92 96 27 	sts	0x2796, r6	; 0x802796 <MaxDistanceToGo+0x2>
    7682:	70 92 97 27 	sts	0x2797, r7	; 0x802797 <MaxDistanceToGo+0x3>
				}
				if(DistanceToGo3 > DistanceToGo1 && DistanceToGo3 > DistanceToGo2)
    7686:	89 81       	ldd	r24, Y+1	; 0x01
    7688:	9a 81       	ldd	r25, Y+2	; 0x02
    768a:	ab 81       	ldd	r26, Y+3	; 0x03
    768c:	bc 81       	ldd	r27, Y+4	; 0x04
    768e:	c8 16       	cp	r12, r24
    7690:	d9 06       	cpc	r13, r25
    7692:	ea 06       	cpc	r14, r26
    7694:	fb 06       	cpc	r15, r27
    7696:	dc f5       	brge	.+118    	; 0x770e <__vector_65+0x456>
    7698:	48 16       	cp	r4, r24
    769a:	59 06       	cpc	r5, r25
    769c:	6a 06       	cpc	r6, r26
    769e:	7b 06       	cpc	r7, r27
    76a0:	b4 f5       	brge	.+108    	; 0x770e <__vector_65+0x456>
				{
					MaxSpeed = Axes[2].MaxSpeed;
    76a2:	e8 e1       	ldi	r30, 0x18	; 24
    76a4:	f8 e2       	ldi	r31, 0x28	; 40
    76a6:	80 81       	ld	r24, Z
    76a8:	91 81       	ldd	r25, Z+1	; 0x01
    76aa:	a2 81       	ldd	r26, Z+2	; 0x02
    76ac:	b3 81       	ldd	r27, Z+3	; 0x03
    76ae:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <MaxSpeed>
    76b2:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <MaxSpeed+0x1>
    76b6:	a0 93 6f 27 	sts	0x276F, r26	; 0x80276f <MaxSpeed+0x2>
    76ba:	b0 93 70 27 	sts	0x2770, r27	; 0x802770 <MaxSpeed+0x3>
					IACC=Axes[2].ACC;
    76be:	ec e1       	ldi	r30, 0x1C	; 28
    76c0:	f8 e2       	ldi	r31, 0x28	; 40
    76c2:	80 81       	ld	r24, Z
    76c4:	91 81       	ldd	r25, Z+1	; 0x01
    76c6:	a2 81       	ldd	r26, Z+2	; 0x02
    76c8:	b3 81       	ldd	r27, Z+3	; 0x03
    76ca:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <IACC>
    76ce:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <IACC+0x1>
    76d2:	a0 93 53 27 	sts	0x2753, r26	; 0x802753 <IACC+0x2>
    76d6:	b0 93 54 27 	sts	0x2754, r27	; 0x802754 <IACC+0x3>
					IDEC=Axes[2].DEC;
    76da:	e0 e2       	ldi	r30, 0x20	; 32
    76dc:	f8 e2       	ldi	r31, 0x28	; 40
    76de:	80 81       	ld	r24, Z
    76e0:	91 81       	ldd	r25, Z+1	; 0x01
    76e2:	a2 81       	ldd	r26, Z+2	; 0x02
    76e4:	b3 81       	ldd	r27, Z+3	; 0x03
    76e6:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <IDEC>
    76ea:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <IDEC+0x1>
    76ee:	a0 93 4f 27 	sts	0x274F, r26	; 0x80274f <IDEC+0x2>
    76f2:	b0 93 50 27 	sts	0x2750, r27	; 0x802750 <IDEC+0x3>
					MaxDistanceToGo=labs(AxisPosition3-SoftRef3);
    76f6:	89 81       	ldd	r24, Y+1	; 0x01
    76f8:	9a 81       	ldd	r25, Y+2	; 0x02
    76fa:	ab 81       	ldd	r26, Y+3	; 0x03
    76fc:	bc 81       	ldd	r27, Y+4	; 0x04
    76fe:	80 93 94 27 	sts	0x2794, r24	; 0x802794 <MaxDistanceToGo>
    7702:	90 93 95 27 	sts	0x2795, r25	; 0x802795 <MaxDistanceToGo+0x1>
    7706:	a0 93 96 27 	sts	0x2796, r26	; 0x802796 <MaxDistanceToGo+0x2>
    770a:	b0 93 97 27 	sts	0x2797, r27	; 0x802797 <MaxDistanceToGo+0x3>
				}
				//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
				if(MaxSpeed>0)
    770e:	80 90 6d 27 	lds	r8, 0x276D	; 0x80276d <MaxSpeed>
    7712:	90 90 6e 27 	lds	r9, 0x276E	; 0x80276e <MaxSpeed+0x1>
    7716:	a0 90 6f 27 	lds	r10, 0x276F	; 0x80276f <MaxSpeed+0x2>
    771a:	b0 90 70 27 	lds	r11, 0x2770	; 0x802770 <MaxSpeed+0x3>
    771e:	18 14       	cp	r1, r8
    7720:	19 04       	cpc	r1, r9
    7722:	1a 04       	cpc	r1, r10
    7724:	1b 04       	cpc	r1, r11
    7726:	0c f0       	brlt	.+2      	; 0x772a <__vector_65+0x472>
    7728:	52 c0       	rjmp	.+164    	; 0x77ce <__vector_65+0x516>
				{
					Ma1=(unsigned int)((float)((float)DistanceToGo1/(float)MaxDistanceToGo)*1000);
    772a:	60 91 94 27 	lds	r22, 0x2794	; 0x802794 <MaxDistanceToGo>
    772e:	70 91 95 27 	lds	r23, 0x2795	; 0x802795 <MaxDistanceToGo+0x1>
    7732:	80 91 96 27 	lds	r24, 0x2796	; 0x802796 <MaxDistanceToGo+0x2>
    7736:	90 91 97 27 	lds	r25, 0x2797	; 0x802797 <MaxDistanceToGo+0x3>
    773a:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    773e:	6d 83       	std	Y+5, r22	; 0x05
    7740:	7e 83       	std	Y+6, r23	; 0x06
    7742:	8f 83       	std	Y+7, r24	; 0x07
    7744:	98 87       	std	Y+8, r25	; 0x08
    7746:	c7 01       	movw	r24, r14
    7748:	b6 01       	movw	r22, r12
    774a:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    774e:	2d 81       	ldd	r18, Y+5	; 0x05
    7750:	3e 81       	ldd	r19, Y+6	; 0x06
    7752:	4f 81       	ldd	r20, Y+7	; 0x07
    7754:	58 85       	ldd	r21, Y+8	; 0x08
    7756:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    775a:	20 e0       	ldi	r18, 0x00	; 0
    775c:	30 e0       	ldi	r19, 0x00	; 0
    775e:	4a e7       	ldi	r20, 0x7A	; 122
    7760:	54 e4       	ldi	r21, 0x44	; 68
    7762:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    7766:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    776a:	60 93 30 27 	sts	0x2730, r22	; 0x802730 <Ma1>
    776e:	70 93 31 27 	sts	0x2731, r23	; 0x802731 <Ma1+0x1>
					Ma2=(unsigned int)((float)((float)DistanceToGo2/(float)MaxDistanceToGo)*1000);
    7772:	c3 01       	movw	r24, r6
    7774:	b2 01       	movw	r22, r4
    7776:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    777a:	2d 81       	ldd	r18, Y+5	; 0x05
    777c:	3e 81       	ldd	r19, Y+6	; 0x06
    777e:	4f 81       	ldd	r20, Y+7	; 0x07
    7780:	58 85       	ldd	r21, Y+8	; 0x08
    7782:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    7786:	20 e0       	ldi	r18, 0x00	; 0
    7788:	30 e0       	ldi	r19, 0x00	; 0
    778a:	4a e7       	ldi	r20, 0x7A	; 122
    778c:	54 e4       	ldi	r21, 0x44	; 68
    778e:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    7792:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    7796:	60 93 2e 27 	sts	0x272E, r22	; 0x80272e <Ma2>
    779a:	70 93 2f 27 	sts	0x272F, r23	; 0x80272f <Ma2+0x1>
					Ma3=(unsigned int)((float)((float)DistanceToGo3/(float)MaxDistanceToGo)*1000);
    779e:	69 81       	ldd	r22, Y+1	; 0x01
    77a0:	7a 81       	ldd	r23, Y+2	; 0x02
    77a2:	8b 81       	ldd	r24, Y+3	; 0x03
    77a4:	9c 81       	ldd	r25, Y+4	; 0x04
    77a6:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    77aa:	2d 81       	ldd	r18, Y+5	; 0x05
    77ac:	3e 81       	ldd	r19, Y+6	; 0x06
    77ae:	4f 81       	ldd	r20, Y+7	; 0x07
    77b0:	58 85       	ldd	r21, Y+8	; 0x08
    77b2:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    77b6:	20 e0       	ldi	r18, 0x00	; 0
    77b8:	30 e0       	ldi	r19, 0x00	; 0
    77ba:	4a e7       	ldi	r20, 0x7A	; 122
    77bc:	54 e4       	ldi	r21, 0x44	; 68
    77be:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    77c2:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    77c6:	60 93 2c 27 	sts	0x272C, r22	; 0x80272c <Ma3>
    77ca:	70 93 2d 27 	sts	0x272D, r23	; 0x80272d <Ma3+0x1>
					//printf("MaxSpeed: %d\tMa1: %d\tMa2: %d\tMa3: %d\r\n",MaxSpeed,Ma1,Ma2,Ma3);
				}
				CurSpeedFrq=MaxSpeed;
    77ce:	80 92 42 27 	sts	0x2742, r8	; 0x802742 <CurSpeedFrq>
    77d2:	90 92 43 27 	sts	0x2743, r9	; 0x802743 <CurSpeedFrq+0x1>
    77d6:	a0 92 44 27 	sts	0x2744, r10	; 0x802744 <CurSpeedFrq+0x2>
    77da:	b0 92 45 27 	sts	0x2745, r11	; 0x802745 <CurSpeedFrq+0x3>
				ACC = 0;
    77de:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <ACC>
				DEC = 0;
    77e2:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <DEC>
				TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    77e6:	c5 01       	movw	r24, r10
    77e8:	b4 01       	movw	r22, r8
    77ea:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <__floatsisf>
    77ee:	9b 01       	movw	r18, r22
    77f0:	ac 01       	movw	r20, r24
    77f2:	60 e0       	ldi	r22, 0x00	; 0
    77f4:	70 e0       	ldi	r23, 0x00	; 0
    77f6:	8a e7       	ldi	r24, 0x7A	; 122
    77f8:	96 e4       	ldi	r25, 0x46	; 70
    77fa:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__divsf3>
    77fe:	60 93 28 27 	sts	0x2728, r22	; 0x802728 <TimerMainPeriod>
    7802:	70 93 29 27 	sts	0x2729, r23	; 0x802729 <TimerMainPeriod+0x1>
    7806:	80 93 2a 27 	sts	0x272A, r24	; 0x80272a <TimerMainPeriod+0x2>
    780a:	90 93 2b 27 	sts	0x272B, r25	; 0x80272b <TimerMainPeriod+0x3>
				tcc0_init();
    780e:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
				TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    7812:	20 e0       	ldi	r18, 0x00	; 0
    7814:	30 e0       	ldi	r19, 0x00	; 0
    7816:	4a e7       	ldi	r20, 0x7A	; 122
    7818:	54 e4       	ldi	r21, 0x44	; 68
    781a:	60 91 28 27 	lds	r22, 0x2728	; 0x802728 <TimerMainPeriod>
    781e:	70 91 29 27 	lds	r23, 0x2729	; 0x802729 <TimerMainPeriod+0x1>
    7822:	80 91 2a 27 	lds	r24, 0x272A	; 0x80272a <TimerMainPeriod+0x2>
    7826:	90 91 2b 27 	lds	r25, 0x272B	; 0x80272b <TimerMainPeriod+0x3>
    782a:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    782e:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    7832:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    7836:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				ProgramRun=0;
    783a:	10 92 bc 27 	sts	0x27BC, r1	; 0x8027bc <ProgramRun>
    783e:	a4 cd       	rjmp	.-1208   	; 0x7388 <__vector_65+0xd0>
				//DistanceToGo2=0;
				//DistanceToGo3=0;
			}
		}
	}
}
    7840:	28 96       	adiw	r28, 0x08	; 8
    7842:	cd bf       	out	0x3d, r28	; 61
    7844:	de bf       	out	0x3e, r29	; 62
    7846:	df 91       	pop	r29
    7848:	cf 91       	pop	r28
    784a:	ff 91       	pop	r31
    784c:	ef 91       	pop	r30
    784e:	bf 91       	pop	r27
    7850:	af 91       	pop	r26
    7852:	9f 91       	pop	r25
    7854:	8f 91       	pop	r24
    7856:	7f 91       	pop	r23
    7858:	6f 91       	pop	r22
    785a:	5f 91       	pop	r21
    785c:	4f 91       	pop	r20
    785e:	3f 91       	pop	r19
    7860:	2f 91       	pop	r18
    7862:	1f 91       	pop	r17
    7864:	0f 91       	pop	r16
    7866:	ff 90       	pop	r15
    7868:	ef 90       	pop	r14
    786a:	df 90       	pop	r13
    786c:	cf 90       	pop	r12
    786e:	bf 90       	pop	r11
    7870:	af 90       	pop	r10
    7872:	9f 90       	pop	r9
    7874:	8f 90       	pop	r8
    7876:	7f 90       	pop	r7
    7878:	6f 90       	pop	r6
    787a:	5f 90       	pop	r5
    787c:	4f 90       	pop	r4
    787e:	3f 90       	pop	r3
    7880:	2f 90       	pop	r2
    7882:	0f 90       	pop	r0
    7884:	0b be       	out	0x3b, r0	; 59
    7886:	0f 90       	pop	r0
    7888:	0a be       	out	0x3a, r0	; 58
    788a:	0f 90       	pop	r0
    788c:	09 be       	out	0x39, r0	; 57
    788e:	0f 90       	pop	r0
    7890:	08 be       	out	0x38, r0	; 56
    7892:	0f 90       	pop	r0
    7894:	0f be       	out	0x3f, r0	; 63
    7896:	0f 90       	pop	r0
    7898:	1f 90       	pop	r1
    789a:	18 95       	reti

0000789c <_Z12usartc0_initv>:
{
	// Note: The correct PORTC direction for the RxD, TxD and XCK signals
	// is configured in the ports_init function.
	// Transmitter is enabled
	// Set TxD=1
	PORTC.OUTSET=0x08;
    789c:	88 e0       	ldi	r24, 0x08	; 8
    789e:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	// Communication mode: Asynchronous USART
	// Data bits: 8
	// Stop bits: 1
	// Parity: Disabled
	USARTC0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    78a2:	e0 ea       	ldi	r30, 0xA0	; 160
    78a4:	f8 e0       	ldi	r31, 0x08	; 8
    78a6:	83 e0       	ldi	r24, 0x03	; 3
    78a8:	85 83       	std	Z+5, r24	; 0x05

	// Receive complete interrupt: Medium Level
	// Transmit complete interrupt: Disabled
	// Data register empty interrupt: Disabled
	USARTC0.CTRLA=(USARTC0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
    78aa:	83 81       	ldd	r24, Z+3	; 0x03
	USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    78ac:	80 7c       	andi	r24, 0xC0	; 192
    78ae:	80 62       	ori	r24, 0x20	; 32
    78b0:	83 83       	std	Z+3, r24	; 0x03

	// Required Baud rate: 115200
	// Real Baud Rate: 115211.5 (x1 Mode), Error: 0.0 %
	USARTC0.BAUDCTRLA=0x2E;
    78b2:	8e e2       	ldi	r24, 0x2E	; 46
    78b4:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x08;
    78b6:	88 e9       	ldi	r24, 0x98	; 152
    78b8:	87 83       	std	Z+7, r24	; 0x07

	// Receiver: On
	// Transmitter: On
	// Double transmission speed mode: Off
	// Multi-processor communication mode: Off
	USARTC0.CTRLB=(USARTC0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
    78ba:	84 81       	ldd	r24, Z+4	; 0x04
	USART_RXEN_bm | USART_TXEN_bm;
    78bc:	80 7e       	andi	r24, 0xE0	; 224
    78be:	88 61       	ori	r24, 0x18	; 24
    78c0:	84 83       	std	Z+4, r24	; 0x04
    78c2:	08 95       	ret

000078c4 <__vector_25>:
bool rx_buffer_overflow_usartc0=0;

// USARTC0 Receiver interrupt service routine
// Debug port receive interrupt
ISR (USARTC0_RXC_vect)
{
    78c4:	1f 92       	push	r1
    78c6:	0f 92       	push	r0
    78c8:	0f b6       	in	r0, 0x3f	; 63
    78ca:	0f 92       	push	r0
    78cc:	11 24       	eor	r1, r1
    78ce:	08 b6       	in	r0, 0x38	; 56
    78d0:	0f 92       	push	r0
    78d2:	18 be       	out	0x38, r1	; 56
    78d4:	0b b6       	in	r0, 0x3b	; 59
    78d6:	0f 92       	push	r0
    78d8:	1b be       	out	0x3b, r1	; 59
    78da:	8f 93       	push	r24
    78dc:	9f 93       	push	r25
    78de:	ef 93       	push	r30
    78e0:	ff 93       	push	r31
	unsigned char status;
	char data;

	status=USARTC0.STATUS;
    78e2:	e0 ea       	ldi	r30, 0xA0	; 160
    78e4:	f8 e0       	ldi	r31, 0x08	; 8
    78e6:	81 81       	ldd	r24, Z+1	; 0x01
	data=USARTC0.DATA;
    78e8:	90 81       	ld	r25, Z
	if ((status & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
    78ea:	8c 71       	andi	r24, 0x1C	; 28
    78ec:	d9 f4       	brne	.+54     	; 0x7924 <__vector_25+0x60>
	{
		rx_buffer_usartc0[rx_wr_index_usartc0++]=data;
    78ee:	e0 91 d0 26 	lds	r30, 0x26D0	; 0x8026d0 <rx_wr_index_usartc0>
    78f2:	81 e0       	ldi	r24, 0x01	; 1
    78f4:	8e 0f       	add	r24, r30
    78f6:	80 93 d0 26 	sts	0x26D0, r24	; 0x8026d0 <rx_wr_index_usartc0>
    78fa:	f0 e0       	ldi	r31, 0x00	; 0
    78fc:	ef 52       	subi	r30, 0x2F	; 47
    78fe:	f9 4d       	sbci	r31, 0xD9	; 217
    7900:	90 83       	st	Z, r25
		#if RX_BUFFER_SIZE_USARTC0 == 256
		// special case for receiver buffer size=256
		if (++rx_counter_usartc0 == 0) rx_buffer_overflow_usartc0=1;
		#else
		if (rx_wr_index_usartc0 == RX_BUFFER_SIZE_USARTC0) rx_wr_index_usartc0=0;
    7902:	88 30       	cpi	r24, 0x08	; 8
    7904:	11 f4       	brne	.+4      	; 0x790a <__vector_25+0x46>
    7906:	10 92 d0 26 	sts	0x26D0, r1	; 0x8026d0 <rx_wr_index_usartc0>
		if (++rx_counter_usartc0 == RX_BUFFER_SIZE_USARTC0)
    790a:	80 91 cf 26 	lds	r24, 0x26CF	; 0x8026cf <rx_counter_usartc0>
    790e:	8f 5f       	subi	r24, 0xFF	; 255
    7910:	88 30       	cpi	r24, 0x08	; 8
    7912:	19 f0       	breq	.+6      	; 0x791a <__vector_25+0x56>
    7914:	80 93 cf 26 	sts	0x26CF, r24	; 0x8026cf <rx_counter_usartc0>
    7918:	05 c0       	rjmp	.+10     	; 0x7924 <__vector_25+0x60>
		{
			rx_counter_usartc0=0;
    791a:	10 92 cf 26 	sts	0x26CF, r1	; 0x8026cf <rx_counter_usartc0>
			rx_buffer_overflow_usartc0=1;
    791e:	81 e0       	ldi	r24, 0x01	; 1
    7920:	80 93 ce 26 	sts	0x26CE, r24	; 0x8026ce <__data_end>
		}
		#endif
	}
}
    7924:	ff 91       	pop	r31
    7926:	ef 91       	pop	r30
    7928:	9f 91       	pop	r25
    792a:	8f 91       	pop	r24
    792c:	0f 90       	pop	r0
    792e:	0b be       	out	0x3b, r0	; 59
    7930:	0f 90       	pop	r0
    7932:	08 be       	out	0x38, r0	; 56
    7934:	0f 90       	pop	r0
    7936:	0f be       	out	0x3f, r0	; 63
    7938:	0f 90       	pop	r0
    793a:	1f 90       	pop	r1
    793c:	18 95       	reti

0000793e <main>:

    // Interrupt system initialization
    // Optimize for speed
    #pragma optsize-
    // Make sure the interrupts are disabled
    asm("cli");
    793e:	f8 94       	cli
    // Low level interrupt: On
    // Round-robin scheduling for low level interrupt: Off
    // Medium level interrupt: On
    // High level interrupt: On
    // The interrupt vectors will be placed at the start of the Application FLASH section
    n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
    7940:	e0 ea       	ldi	r30, 0xA0	; 160
    7942:	f0 e0       	ldi	r31, 0x00	; 0
    7944:	82 81       	ldd	r24, Z+2	; 0x02
    PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    7946:	88 73       	andi	r24, 0x38	; 56
    7948:	87 60       	ori	r24, 0x07	; 7
    CCP=CCP_IOREG_gc;
    794a:	98 ed       	ldi	r25, 0xD8	; 216
    794c:	94 bf       	out	0x34, r25	; 52
    PMIC.CTRL=n;
    794e:	82 83       	std	Z+2, r24	; 0x02
    // Set the default priority for round-robin scheduling
    PMIC.INTPRI=0x00;
    7950:	11 82       	std	Z+1, r1	; 0x01
    // Restore optimization for size if needed
    #pragma optsize_default

    // System clocks initialization
    system_clocks_init();
    7952:	0e 94 f2 33 	call	0x67e4	; 0x67e4 <_Z18system_clocks_initv>

    // Ports initialization
    ports_init();
    7956:	0e 94 40 01 	call	0x280	; 0x280 <_Z10ports_initv>

    // Virtual Ports initialization
    //vports_init();
    spif_init();
    795a:	0e 94 00 02 	call	0x400	; 0x400 <_Z9spif_initv>


    // Globally enable interrupts
    asm("sei");
    795e:	78 94       	sei

    tcc0_init();  // Axis interpolation counter for level 0 
    7960:	0e 94 c5 0b 	call	0x178a	; 0x178a <_Z9tcc0_initv>
    tcc1_init();  // Axis interpolation counter for level 1
    7964:	0e 94 15 0c 	call	0x182a	; 0x182a <_Z9tcc1_initv>
    tcd1_init();  // PLC interpolation timer
    7968:	0e 94 37 0c 	call	0x186e	; 0x186e <_Z9tcd1_initv>
    spie_init();  // SPI Flash initialization
    796c:	0e 94 85 02 	call	0x50a	; 0x50a <_Z9spie_initv>
    SG17_SET;     // says to 7 segment board and says that Xmega is loaded 
    7970:	e0 e0       	ldi	r30, 0x00	; 0
    7972:	f7 e0       	ldi	r31, 0x07	; 7
    7974:	84 81       	ldd	r24, Z+4	; 0x04
    7976:	82 60       	ori	r24, 0x02	; 2
    7978:	84 83       	std	Z+4, r24	; 0x04
    usartc0_init();
    797a:	0e 94 4e 3c 	call	0x789c	; 0x789c <_Z12usartc0_initv>
    SETSFRST; //set Serial Flash Reset means Xmega is able to read from SPI Flash 
    797e:	e0 e8       	ldi	r30, 0x80	; 128
    7980:	f6 e0       	ldi	r31, 0x06	; 6
    7982:	84 81       	ldd	r24, Z+4	; 0x04
    7984:	84 60       	ori	r24, 0x04	; 4
    7986:	84 83       	std	Z+4, r24	; 0x04
    SETSFWP;  //set Serial Flash Write protect to allow raspberry to write on it
    7988:	84 81       	ldd	r24, Z+4	; 0x04
    798a:	82 60       	ori	r24, 0x02	; 2
    798c:	84 83       	std	Z+4, r24	; 0x04
    798e:	2f ef       	ldi	r18, 0xFF	; 255
    7990:	89 e6       	ldi	r24, 0x69	; 105
    7992:	98 e1       	ldi	r25, 0x18	; 24
    7994:	21 50       	subi	r18, 0x01	; 1
    7996:	80 40       	sbci	r24, 0x00	; 0
    7998:	90 40       	sbci	r25, 0x00	; 0
    799a:	e1 f7       	brne	.-8      	; 0x7994 <main+0x56>
    799c:	00 c0       	rjmp	.+0      	; 0x799e <main+0x60>
    799e:	00 00       	nop
    _delay_ms(250);
    printf("Reading Config...\r\n");
    79a0:	83 e9       	ldi	r24, 0x93	; 147
    79a2:	96 e2       	ldi	r25, 0x26	; 38
    79a4:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
    ReadConfig();  // read configuration from Serail Flash 
    79a8:	0e 94 c9 02 	call	0x592	; 0x592 <_Z10ReadConfigv>

    while (1)
    {
		// ifjog is pushed the LED on the board turns on
	    if(JogNeg) SETBIT(PORTR.OUT,0);
    79ac:	0f 2e       	mov	r0, r31
    79ae:	f0 e6       	ldi	r31, 0x60	; 96
    79b0:	ef 2e       	mov	r14, r31
    79b2:	f6 e0       	ldi	r31, 0x06	; 6
    79b4:	ff 2e       	mov	r15, r31
    79b6:	f0 2d       	mov	r31, r0
    79b8:	c0 ee       	ldi	r28, 0xE0	; 224
    79ba:	d7 e0       	ldi	r29, 0x07	; 7
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
	    if(JogPos) SETBIT(PORTR.OUT,1);
    79bc:	00 ee       	ldi	r16, 0xE0	; 224
    79be:	16 e0       	ldi	r17, 0x06	; 6
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
	    
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3; // is any axis is moving
    79c0:	44 24       	eor	r4, r4
    79c2:	43 94       	inc	r4
			    else
			    {
				    printf("Read Main Program.\r\n");
				    readRam();
			    }
			    printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    79c4:	0f 2e       	mov	r0, r31
    79c6:	fe e3       	ldi	r31, 0x3E	; 62
    79c8:	cf 2e       	mov	r12, r31
    79ca:	f8 e2       	ldi	r31, 0x28	; 40
    79cc:	df 2e       	mov	r13, r31
    79ce:	f0 2d       	mov	r31, r0
    79d0:	0f 2e       	mov	r0, r31
    79d2:	f7 ef       	ldi	r31, 0xF7	; 247
    79d4:	af 2e       	mov	r10, r31
    79d6:	f0 e2       	ldi	r31, 0x20	; 32
    79d8:	bf 2e       	mov	r11, r31
    79da:	f0 2d       	mov	r31, r0
	    if(JogNeg) SETBIT(PORTR.OUT,0);
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
	    if(JogPos) SETBIT(PORTR.OUT,1);
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
	    
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3; // is any axis is moving
    79dc:	54 2c       	mov	r5, r4
    79de:	0f 2e       	mov	r0, r31
    79e0:	f5 e1       	ldi	r31, 0x15	; 21
    79e2:	6f 2e       	mov	r6, r31
    79e4:	71 2c       	mov	r7, r1
    79e6:	f0 2d       	mov	r31, r0
    ReadConfig();  // read configuration from Serail Flash 

    while (1)
    {
		// ifjog is pushed the LED on the board turns on
	    if(JogNeg) SETBIT(PORTR.OUT,0);
    79e8:	f7 01       	movw	r30, r14
    79ea:	80 85       	ldd	r24, Z+8	; 0x08
    79ec:	83 ff       	sbrs	r24, 3
    79ee:	03 c0       	rjmp	.+6      	; 0x79f6 <main+0xb8>
    79f0:	8c 81       	ldd	r24, Y+4	; 0x04
    79f2:	81 60       	ori	r24, 0x01	; 1
    79f4:	8c 83       	std	Y+4, r24	; 0x04
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
    79f6:	f7 01       	movw	r30, r14
    79f8:	80 85       	ldd	r24, Z+8	; 0x08
    79fa:	83 fd       	sbrc	r24, 3
    79fc:	03 c0       	rjmp	.+6      	; 0x7a04 <main+0xc6>
    79fe:	8c 81       	ldd	r24, Y+4	; 0x04
    7a00:	8e 7f       	andi	r24, 0xFE	; 254
    7a02:	8c 83       	std	Y+4, r24	; 0x04
	    if(JogPos) SETBIT(PORTR.OUT,1);
    7a04:	f8 01       	movw	r30, r16
    7a06:	80 85       	ldd	r24, Z+8	; 0x08
    7a08:	81 ff       	sbrs	r24, 1
    7a0a:	03 c0       	rjmp	.+6      	; 0x7a12 <main+0xd4>
    7a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    7a0e:	82 60       	ori	r24, 0x02	; 2
    7a10:	8c 83       	std	Y+4, r24	; 0x04
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
    7a12:	f8 01       	movw	r30, r16
    7a14:	80 85       	ldd	r24, Z+8	; 0x08
    7a16:	81 fd       	sbrc	r24, 1
    7a18:	03 c0       	rjmp	.+6      	; 0x7a20 <main+0xe2>
    7a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    7a1c:	8d 7f       	andi	r24, 0xFD	; 253
    7a1e:	8c 83       	std	Y+4, r24	; 0x04
	    
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3; // is any axis is moving
    7a20:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <AxisIsMoving1>
    7a24:	81 11       	cpse	r24, r1
    7a26:	79 c0       	rjmp	.+242    	; 0x7b1a <main+0x1dc>
    7a28:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <AxisIsMoving2>
    7a2c:	81 11       	cpse	r24, r1
    7a2e:	75 c0       	rjmp	.+234    	; 0x7b1a <main+0x1dc>
    7a30:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <AxisIsMoving3>
    7a34:	85 2d       	mov	r24, r5
    7a36:	91 11       	cpse	r25, r1
    7a38:	01 c0       	rjmp	.+2      	; 0x7a3c <main+0xfe>
    7a3a:	80 e0       	ldi	r24, 0x00	; 0
    7a3c:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <AxisMoving>
		
	    if(ProgramRun && !AxisMoving)
    7a40:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <ProgramRun>
    7a44:	88 23       	and	r24, r24
    7a46:	f1 f1       	breq	.+124    	; 0x7ac4 <main+0x186>
    7a48:	91 11       	cpse	r25, r1
    7a4a:	3c c0       	rjmp	.+120    	; 0x7ac4 <main+0x186>
	    {
		    if(IsPause==0)
    7a4c:	80 91 da 26 	lds	r24, 0x26DA	; 0x8026da <IsPause>
    7a50:	81 11       	cpse	r24, r1
    7a52:	38 c0       	rjmp	.+112    	; 0x7ac4 <main+0x186>
		    {
			    if(RunSubProgram)
    7a54:	80 91 db 26 	lds	r24, 0x26DB	; 0x8026db <RunSubProgram>
    7a58:	88 23       	and	r24, r24
    7a5a:	49 f0       	breq	.+18     	; 0x7a6e <main+0x130>
			    {
				    printf("Read Sub Program.\r\n");
    7a5c:	86 ea       	ldi	r24, 0xA6	; 166
    7a5e:	96 e2       	ldi	r25, 0x26	; 38
    7a60:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
				    ReadSubProgram(0);
    7a64:	80 e0       	ldi	r24, 0x00	; 0
    7a66:	90 e0       	ldi	r25, 0x00	; 0
    7a68:	0e 94 f6 07 	call	0xfec	; 0xfec <_Z14ReadSubProgramj>
    7a6c:	06 c0       	rjmp	.+12     	; 0x7a7a <main+0x13c>
			    }
			    else
			    {
				    printf("Read Main Program.\r\n");
    7a6e:	89 eb       	ldi	r24, 0xB9	; 185
    7a70:	96 e2       	ldi	r25, 0x26	; 38
    7a72:	0e 94 a9 40 	call	0x8152	; 0x8152 <puts>
				    readRam();
    7a76:	0e 94 41 04 	call	0x882	; 0x882 <_Z7readRamv>
			    }
			    printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    7a7a:	f6 01       	movw	r30, r12
    7a7c:	83 81       	ldd	r24, Z+3	; 0x03
    7a7e:	1f 92       	push	r1
    7a80:	8f 93       	push	r24
    7a82:	81 81       	ldd	r24, Z+1	; 0x01
    7a84:	8f 93       	push	r24
    7a86:	80 81       	ld	r24, Z
    7a88:	8f 93       	push	r24
    7a8a:	bf 92       	push	r11
    7a8c:	af 92       	push	r10
    7a8e:	0e 94 95 40 	call	0x812a	; 0x812a <printf>
			    
				PORTR.OUTTGL=0x01; //program running will flash the LED 
    7a92:	4f 82       	std	Y+7, r4	; 0x07
			    PRGExe();
    7a94:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_Z6PRGExev>
			    if(PRGEXEindex < PRGSize) PRGEXEindex++;
    7a98:	80 91 f7 26 	lds	r24, 0x26F7	; 0x8026f7 <PRGEXEindex>
    7a9c:	90 91 f8 26 	lds	r25, 0x26F8	; 0x8026f8 <PRGEXEindex+0x1>
    7aa0:	0f 90       	pop	r0
    7aa2:	0f 90       	pop	r0
    7aa4:	0f 90       	pop	r0
    7aa6:	0f 90       	pop	r0
    7aa8:	0f 90       	pop	r0
    7aaa:	0f 90       	pop	r0
    7aac:	20 91 f5 26 	lds	r18, 0x26F5	; 0x8026f5 <PRGSize>
    7ab0:	30 91 f6 26 	lds	r19, 0x26F6	; 0x8026f6 <PRGSize+0x1>
    7ab4:	82 17       	cp	r24, r18
    7ab6:	93 07       	cpc	r25, r19
    7ab8:	2c f4       	brge	.+10     	; 0x7ac4 <main+0x186>
    7aba:	01 96       	adiw	r24, 0x01	; 1
    7abc:	80 93 f7 26 	sts	0x26F7, r24	; 0x8026f7 <PRGEXEindex>
    7ac0:	90 93 f8 26 	sts	0x26F8, r25	; 0x8026f8 <PRGEXEindex+0x1>
		    }
	    }
	    /**********************************************/
	    if(cmdIsReady==0) continue;
    7ac4:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <cmdIsReady>
    7ac8:	88 23       	and	r24, r24
    7aca:	09 f4       	brne	.+2      	; 0x7ace <main+0x190>
    7acc:	8d cf       	rjmp	.-230    	; 0x79e8 <main+0xaa>
    7ace:	0f 2e       	mov	r0, r31
    7ad0:	f0 e1       	ldi	r31, 0x10	; 16
    7ad2:	8f 2e       	mov	r8, r31
    7ad4:	f7 e2       	ldi	r31, 0x27	; 39
    7ad6:	9f 2e       	mov	r9, r31
    7ad8:	f0 2d       	mov	r31, r0
    7ada:	ee e8       	ldi	r30, 0x8E	; 142
    7adc:	f8 e2       	ldi	r31, 0x28	; 40
    7ade:	23 ea       	ldi	r18, 0xA3	; 163
    7ae0:	38 e2       	ldi	r19, 0x28	; 40
    7ae2:	d4 01       	movw	r26, r8
	    for (j = 0 ; j < 21 ; j++)
	    {
		    cmdTemp[j] = EXECMD[j];
    7ae4:	80 81       	ld	r24, Z
    7ae6:	8d 93       	st	X+, r24
		    EXECMD[j] = 0;
    7ae8:	11 92       	st	Z+, r1
			    if(PRGEXEindex < PRGSize) PRGEXEindex++;
		    }
	    }
	    /**********************************************/
	    if(cmdIsReady==0) continue;
	    for (j = 0 ; j < 21 ; j++)
    7aea:	2e 17       	cp	r18, r30
    7aec:	3f 07       	cpc	r19, r31
    7aee:	d1 f7       	brne	.-12     	; 0x7ae4 <main+0x1a6>
    7af0:	60 92 26 27 	sts	0x2726, r6	; 0x802726 <j>
    7af4:	70 92 27 27 	sts	0x2727, r7	; 0x802727 <j+0x1>
	    {
		    cmdTemp[j] = EXECMD[j];
		    EXECMD[j] = 0;
	    }
	    cmdExe();
    7af8:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <_Z6cmdExev>
    7afc:	85 e2       	ldi	r24, 0x25	; 37
    7afe:	97 e2       	ldi	r25, 0x27	; 39
	    for (j=0;j<21;j++) cmdTemp[j] = 0;
    7b00:	f4 01       	movw	r30, r8
    7b02:	11 92       	st	Z+, r1
    7b04:	4f 01       	movw	r8, r30
    7b06:	e8 17       	cp	r30, r24
    7b08:	f9 07       	cpc	r31, r25
    7b0a:	d1 f7       	brne	.-12     	; 0x7b00 <main+0x1c2>
    7b0c:	60 92 26 27 	sts	0x2726, r6	; 0x802726 <j>
    7b10:	70 92 27 27 	sts	0x2727, r7	; 0x802727 <j+0x1>
	    cmdIsReady=0;
    7b14:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <cmdIsReady>
    7b18:	67 cf       	rjmp	.-306    	; 0x79e8 <main+0xaa>
	    if(JogNeg) SETBIT(PORTR.OUT,0);
	    if(JogNeg==0) CLRBIT(PORTR.OUT,0);
	    if(JogPos) SETBIT(PORTR.OUT,1);
	    if(JogPos==0) CLRBIT(PORTR.OUT,1);
	    
	    AxisMoving = AxisIsMoving1 || AxisIsMoving2 || AxisIsMoving3; // is any axis is moving
    7b1a:	50 92 f9 26 	sts	0x26F9, r5	; 0x8026f9 <AxisMoving>
    7b1e:	d2 cf       	rjmp	.-92     	; 0x7ac4 <main+0x186>

00007b20 <__subsf3>:
    7b20:	50 58       	subi	r21, 0x80	; 128

00007b22 <__addsf3>:
    7b22:	bb 27       	eor	r27, r27
    7b24:	aa 27       	eor	r26, r26
    7b26:	0e 94 a8 3d 	call	0x7b50	; 0x7b50 <__addsf3x>
    7b2a:	0c 94 f9 3e 	jmp	0x7df2	; 0x7df2 <__fp_round>
    7b2e:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <__fp_pscA>
    7b32:	38 f0       	brcs	.+14     	; 0x7b42 <__addsf3+0x20>
    7b34:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <__fp_pscB>
    7b38:	20 f0       	brcs	.+8      	; 0x7b42 <__addsf3+0x20>
    7b3a:	39 f4       	brne	.+14     	; 0x7b4a <__addsf3+0x28>
    7b3c:	9f 3f       	cpi	r25, 0xFF	; 255
    7b3e:	19 f4       	brne	.+6      	; 0x7b46 <__addsf3+0x24>
    7b40:	26 f4       	brtc	.+8      	; 0x7b4a <__addsf3+0x28>
    7b42:	0c 94 e8 3e 	jmp	0x7dd0	; 0x7dd0 <__fp_nan>
    7b46:	0e f4       	brtc	.+2      	; 0x7b4a <__addsf3+0x28>
    7b48:	e0 95       	com	r30
    7b4a:	e7 fb       	bst	r30, 7
    7b4c:	0c 94 e2 3e 	jmp	0x7dc4	; 0x7dc4 <__fp_inf>

00007b50 <__addsf3x>:
    7b50:	e9 2f       	mov	r30, r25
    7b52:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__fp_split3>
    7b56:	58 f3       	brcs	.-42     	; 0x7b2e <__addsf3+0xc>
    7b58:	ba 17       	cp	r27, r26
    7b5a:	62 07       	cpc	r22, r18
    7b5c:	73 07       	cpc	r23, r19
    7b5e:	84 07       	cpc	r24, r20
    7b60:	95 07       	cpc	r25, r21
    7b62:	20 f0       	brcs	.+8      	; 0x7b6c <__addsf3x+0x1c>
    7b64:	79 f4       	brne	.+30     	; 0x7b84 <__addsf3x+0x34>
    7b66:	a6 f5       	brtc	.+104    	; 0x7bd0 <__addsf3x+0x80>
    7b68:	0c 94 2c 3f 	jmp	0x7e58	; 0x7e58 <__fp_zero>
    7b6c:	0e f4       	brtc	.+2      	; 0x7b70 <__addsf3x+0x20>
    7b6e:	e0 95       	com	r30
    7b70:	0b 2e       	mov	r0, r27
    7b72:	ba 2f       	mov	r27, r26
    7b74:	a0 2d       	mov	r26, r0
    7b76:	0b 01       	movw	r0, r22
    7b78:	b9 01       	movw	r22, r18
    7b7a:	90 01       	movw	r18, r0
    7b7c:	0c 01       	movw	r0, r24
    7b7e:	ca 01       	movw	r24, r20
    7b80:	a0 01       	movw	r20, r0
    7b82:	11 24       	eor	r1, r1
    7b84:	ff 27       	eor	r31, r31
    7b86:	59 1b       	sub	r21, r25
    7b88:	99 f0       	breq	.+38     	; 0x7bb0 <__addsf3x+0x60>
    7b8a:	59 3f       	cpi	r21, 0xF9	; 249
    7b8c:	50 f4       	brcc	.+20     	; 0x7ba2 <__addsf3x+0x52>
    7b8e:	50 3e       	cpi	r21, 0xE0	; 224
    7b90:	68 f1       	brcs	.+90     	; 0x7bec <__addsf3x+0x9c>
    7b92:	1a 16       	cp	r1, r26
    7b94:	f0 40       	sbci	r31, 0x00	; 0
    7b96:	a2 2f       	mov	r26, r18
    7b98:	23 2f       	mov	r18, r19
    7b9a:	34 2f       	mov	r19, r20
    7b9c:	44 27       	eor	r20, r20
    7b9e:	58 5f       	subi	r21, 0xF8	; 248
    7ba0:	f3 cf       	rjmp	.-26     	; 0x7b88 <__addsf3x+0x38>
    7ba2:	46 95       	lsr	r20
    7ba4:	37 95       	ror	r19
    7ba6:	27 95       	ror	r18
    7ba8:	a7 95       	ror	r26
    7baa:	f0 40       	sbci	r31, 0x00	; 0
    7bac:	53 95       	inc	r21
    7bae:	c9 f7       	brne	.-14     	; 0x7ba2 <__addsf3x+0x52>
    7bb0:	7e f4       	brtc	.+30     	; 0x7bd0 <__addsf3x+0x80>
    7bb2:	1f 16       	cp	r1, r31
    7bb4:	ba 0b       	sbc	r27, r26
    7bb6:	62 0b       	sbc	r22, r18
    7bb8:	73 0b       	sbc	r23, r19
    7bba:	84 0b       	sbc	r24, r20
    7bbc:	ba f0       	brmi	.+46     	; 0x7bec <__addsf3x+0x9c>
    7bbe:	91 50       	subi	r25, 0x01	; 1
    7bc0:	a1 f0       	breq	.+40     	; 0x7bea <__addsf3x+0x9a>
    7bc2:	ff 0f       	add	r31, r31
    7bc4:	bb 1f       	adc	r27, r27
    7bc6:	66 1f       	adc	r22, r22
    7bc8:	77 1f       	adc	r23, r23
    7bca:	88 1f       	adc	r24, r24
    7bcc:	c2 f7       	brpl	.-16     	; 0x7bbe <__addsf3x+0x6e>
    7bce:	0e c0       	rjmp	.+28     	; 0x7bec <__addsf3x+0x9c>
    7bd0:	ba 0f       	add	r27, r26
    7bd2:	62 1f       	adc	r22, r18
    7bd4:	73 1f       	adc	r23, r19
    7bd6:	84 1f       	adc	r24, r20
    7bd8:	48 f4       	brcc	.+18     	; 0x7bec <__addsf3x+0x9c>
    7bda:	87 95       	ror	r24
    7bdc:	77 95       	ror	r23
    7bde:	67 95       	ror	r22
    7be0:	b7 95       	ror	r27
    7be2:	f7 95       	ror	r31
    7be4:	9e 3f       	cpi	r25, 0xFE	; 254
    7be6:	08 f0       	brcs	.+2      	; 0x7bea <__addsf3x+0x9a>
    7be8:	b0 cf       	rjmp	.-160    	; 0x7b4a <__addsf3+0x28>
    7bea:	93 95       	inc	r25
    7bec:	88 0f       	add	r24, r24
    7bee:	08 f0       	brcs	.+2      	; 0x7bf2 <__addsf3x+0xa2>
    7bf0:	99 27       	eor	r25, r25
    7bf2:	ee 0f       	add	r30, r30
    7bf4:	97 95       	ror	r25
    7bf6:	87 95       	ror	r24
    7bf8:	08 95       	ret

00007bfa <__divsf3>:
    7bfa:	0e 94 11 3e 	call	0x7c22	; 0x7c22 <__divsf3x>
    7bfe:	0c 94 f9 3e 	jmp	0x7df2	; 0x7df2 <__fp_round>
    7c02:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <__fp_pscB>
    7c06:	58 f0       	brcs	.+22     	; 0x7c1e <__divsf3+0x24>
    7c08:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <__fp_pscA>
    7c0c:	40 f0       	brcs	.+16     	; 0x7c1e <__divsf3+0x24>
    7c0e:	29 f4       	brne	.+10     	; 0x7c1a <__divsf3+0x20>
    7c10:	5f 3f       	cpi	r21, 0xFF	; 255
    7c12:	29 f0       	breq	.+10     	; 0x7c1e <__divsf3+0x24>
    7c14:	0c 94 e2 3e 	jmp	0x7dc4	; 0x7dc4 <__fp_inf>
    7c18:	51 11       	cpse	r21, r1
    7c1a:	0c 94 2d 3f 	jmp	0x7e5a	; 0x7e5a <__fp_szero>
    7c1e:	0c 94 e8 3e 	jmp	0x7dd0	; 0x7dd0 <__fp_nan>

00007c22 <__divsf3x>:
    7c22:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__fp_split3>
    7c26:	68 f3       	brcs	.-38     	; 0x7c02 <__divsf3+0x8>

00007c28 <__divsf3_pse>:
    7c28:	99 23       	and	r25, r25
    7c2a:	b1 f3       	breq	.-20     	; 0x7c18 <__divsf3+0x1e>
    7c2c:	55 23       	and	r21, r21
    7c2e:	91 f3       	breq	.-28     	; 0x7c14 <__divsf3+0x1a>
    7c30:	95 1b       	sub	r25, r21
    7c32:	55 0b       	sbc	r21, r21
    7c34:	bb 27       	eor	r27, r27
    7c36:	aa 27       	eor	r26, r26
    7c38:	62 17       	cp	r22, r18
    7c3a:	73 07       	cpc	r23, r19
    7c3c:	84 07       	cpc	r24, r20
    7c3e:	38 f0       	brcs	.+14     	; 0x7c4e <__divsf3_pse+0x26>
    7c40:	9f 5f       	subi	r25, 0xFF	; 255
    7c42:	5f 4f       	sbci	r21, 0xFF	; 255
    7c44:	22 0f       	add	r18, r18
    7c46:	33 1f       	adc	r19, r19
    7c48:	44 1f       	adc	r20, r20
    7c4a:	aa 1f       	adc	r26, r26
    7c4c:	a9 f3       	breq	.-22     	; 0x7c38 <__divsf3_pse+0x10>
    7c4e:	35 d0       	rcall	.+106    	; 0x7cba <__divsf3_pse+0x92>
    7c50:	0e 2e       	mov	r0, r30
    7c52:	3a f0       	brmi	.+14     	; 0x7c62 <__divsf3_pse+0x3a>
    7c54:	e0 e8       	ldi	r30, 0x80	; 128
    7c56:	32 d0       	rcall	.+100    	; 0x7cbc <__divsf3_pse+0x94>
    7c58:	91 50       	subi	r25, 0x01	; 1
    7c5a:	50 40       	sbci	r21, 0x00	; 0
    7c5c:	e6 95       	lsr	r30
    7c5e:	00 1c       	adc	r0, r0
    7c60:	ca f7       	brpl	.-14     	; 0x7c54 <__divsf3_pse+0x2c>
    7c62:	2b d0       	rcall	.+86     	; 0x7cba <__divsf3_pse+0x92>
    7c64:	fe 2f       	mov	r31, r30
    7c66:	29 d0       	rcall	.+82     	; 0x7cba <__divsf3_pse+0x92>
    7c68:	66 0f       	add	r22, r22
    7c6a:	77 1f       	adc	r23, r23
    7c6c:	88 1f       	adc	r24, r24
    7c6e:	bb 1f       	adc	r27, r27
    7c70:	26 17       	cp	r18, r22
    7c72:	37 07       	cpc	r19, r23
    7c74:	48 07       	cpc	r20, r24
    7c76:	ab 07       	cpc	r26, r27
    7c78:	b0 e8       	ldi	r27, 0x80	; 128
    7c7a:	09 f0       	breq	.+2      	; 0x7c7e <__divsf3_pse+0x56>
    7c7c:	bb 0b       	sbc	r27, r27
    7c7e:	80 2d       	mov	r24, r0
    7c80:	bf 01       	movw	r22, r30
    7c82:	ff 27       	eor	r31, r31
    7c84:	93 58       	subi	r25, 0x83	; 131
    7c86:	5f 4f       	sbci	r21, 0xFF	; 255
    7c88:	3a f0       	brmi	.+14     	; 0x7c98 <__divsf3_pse+0x70>
    7c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    7c8c:	51 05       	cpc	r21, r1
    7c8e:	78 f0       	brcs	.+30     	; 0x7cae <__divsf3_pse+0x86>
    7c90:	0c 94 e2 3e 	jmp	0x7dc4	; 0x7dc4 <__fp_inf>
    7c94:	0c 94 2d 3f 	jmp	0x7e5a	; 0x7e5a <__fp_szero>
    7c98:	5f 3f       	cpi	r21, 0xFF	; 255
    7c9a:	e4 f3       	brlt	.-8      	; 0x7c94 <__divsf3_pse+0x6c>
    7c9c:	98 3e       	cpi	r25, 0xE8	; 232
    7c9e:	d4 f3       	brlt	.-12     	; 0x7c94 <__divsf3_pse+0x6c>
    7ca0:	86 95       	lsr	r24
    7ca2:	77 95       	ror	r23
    7ca4:	67 95       	ror	r22
    7ca6:	b7 95       	ror	r27
    7ca8:	f7 95       	ror	r31
    7caa:	9f 5f       	subi	r25, 0xFF	; 255
    7cac:	c9 f7       	brne	.-14     	; 0x7ca0 <__divsf3_pse+0x78>
    7cae:	88 0f       	add	r24, r24
    7cb0:	91 1d       	adc	r25, r1
    7cb2:	96 95       	lsr	r25
    7cb4:	87 95       	ror	r24
    7cb6:	97 f9       	bld	r25, 7
    7cb8:	08 95       	ret
    7cba:	e1 e0       	ldi	r30, 0x01	; 1
    7cbc:	66 0f       	add	r22, r22
    7cbe:	77 1f       	adc	r23, r23
    7cc0:	88 1f       	adc	r24, r24
    7cc2:	bb 1f       	adc	r27, r27
    7cc4:	62 17       	cp	r22, r18
    7cc6:	73 07       	cpc	r23, r19
    7cc8:	84 07       	cpc	r24, r20
    7cca:	ba 07       	cpc	r27, r26
    7ccc:	20 f0       	brcs	.+8      	; 0x7cd6 <__divsf3_pse+0xae>
    7cce:	62 1b       	sub	r22, r18
    7cd0:	73 0b       	sbc	r23, r19
    7cd2:	84 0b       	sbc	r24, r20
    7cd4:	ba 0b       	sbc	r27, r26
    7cd6:	ee 1f       	adc	r30, r30
    7cd8:	88 f7       	brcc	.-30     	; 0x7cbc <__divsf3_pse+0x94>
    7cda:	e0 95       	com	r30
    7cdc:	08 95       	ret

00007cde <__fixsfsi>:
    7cde:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixunssfsi>
    7ce2:	68 94       	set
    7ce4:	b1 11       	cpse	r27, r1
    7ce6:	0c 94 2d 3f 	jmp	0x7e5a	; 0x7e5a <__fp_szero>
    7cea:	08 95       	ret

00007cec <__fixunssfsi>:
    7cec:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <__fp_splitA>
    7cf0:	88 f0       	brcs	.+34     	; 0x7d14 <__fixunssfsi+0x28>
    7cf2:	9f 57       	subi	r25, 0x7F	; 127
    7cf4:	98 f0       	brcs	.+38     	; 0x7d1c <__fixunssfsi+0x30>
    7cf6:	b9 2f       	mov	r27, r25
    7cf8:	99 27       	eor	r25, r25
    7cfa:	b7 51       	subi	r27, 0x17	; 23
    7cfc:	b0 f0       	brcs	.+44     	; 0x7d2a <__fixunssfsi+0x3e>
    7cfe:	e1 f0       	breq	.+56     	; 0x7d38 <__fixunssfsi+0x4c>
    7d00:	66 0f       	add	r22, r22
    7d02:	77 1f       	adc	r23, r23
    7d04:	88 1f       	adc	r24, r24
    7d06:	99 1f       	adc	r25, r25
    7d08:	1a f0       	brmi	.+6      	; 0x7d10 <__fixunssfsi+0x24>
    7d0a:	ba 95       	dec	r27
    7d0c:	c9 f7       	brne	.-14     	; 0x7d00 <__fixunssfsi+0x14>
    7d0e:	14 c0       	rjmp	.+40     	; 0x7d38 <__fixunssfsi+0x4c>
    7d10:	b1 30       	cpi	r27, 0x01	; 1
    7d12:	91 f0       	breq	.+36     	; 0x7d38 <__fixunssfsi+0x4c>
    7d14:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__fp_zero>
    7d18:	b1 e0       	ldi	r27, 0x01	; 1
    7d1a:	08 95       	ret
    7d1c:	0c 94 2c 3f 	jmp	0x7e58	; 0x7e58 <__fp_zero>
    7d20:	67 2f       	mov	r22, r23
    7d22:	78 2f       	mov	r23, r24
    7d24:	88 27       	eor	r24, r24
    7d26:	b8 5f       	subi	r27, 0xF8	; 248
    7d28:	39 f0       	breq	.+14     	; 0x7d38 <__fixunssfsi+0x4c>
    7d2a:	b9 3f       	cpi	r27, 0xF9	; 249
    7d2c:	cc f3       	brlt	.-14     	; 0x7d20 <__fixunssfsi+0x34>
    7d2e:	86 95       	lsr	r24
    7d30:	77 95       	ror	r23
    7d32:	67 95       	ror	r22
    7d34:	b3 95       	inc	r27
    7d36:	d9 f7       	brne	.-10     	; 0x7d2e <__fixunssfsi+0x42>
    7d38:	3e f4       	brtc	.+14     	; 0x7d48 <__fixunssfsi+0x5c>
    7d3a:	90 95       	com	r25
    7d3c:	80 95       	com	r24
    7d3e:	70 95       	com	r23
    7d40:	61 95       	neg	r22
    7d42:	7f 4f       	sbci	r23, 0xFF	; 255
    7d44:	8f 4f       	sbci	r24, 0xFF	; 255
    7d46:	9f 4f       	sbci	r25, 0xFF	; 255
    7d48:	08 95       	ret

00007d4a <__floatunsisf>:
    7d4a:	e8 94       	clt
    7d4c:	09 c0       	rjmp	.+18     	; 0x7d60 <__floatsisf+0x12>

00007d4e <__floatsisf>:
    7d4e:	97 fb       	bst	r25, 7
    7d50:	3e f4       	brtc	.+14     	; 0x7d60 <__floatsisf+0x12>
    7d52:	90 95       	com	r25
    7d54:	80 95       	com	r24
    7d56:	70 95       	com	r23
    7d58:	61 95       	neg	r22
    7d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    7d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    7d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d60:	99 23       	and	r25, r25
    7d62:	a9 f0       	breq	.+42     	; 0x7d8e <__floatsisf+0x40>
    7d64:	f9 2f       	mov	r31, r25
    7d66:	96 e9       	ldi	r25, 0x96	; 150
    7d68:	bb 27       	eor	r27, r27
    7d6a:	93 95       	inc	r25
    7d6c:	f6 95       	lsr	r31
    7d6e:	87 95       	ror	r24
    7d70:	77 95       	ror	r23
    7d72:	67 95       	ror	r22
    7d74:	b7 95       	ror	r27
    7d76:	f1 11       	cpse	r31, r1
    7d78:	f8 cf       	rjmp	.-16     	; 0x7d6a <__floatsisf+0x1c>
    7d7a:	fa f4       	brpl	.+62     	; 0x7dba <__floatsisf+0x6c>
    7d7c:	bb 0f       	add	r27, r27
    7d7e:	11 f4       	brne	.+4      	; 0x7d84 <__floatsisf+0x36>
    7d80:	60 ff       	sbrs	r22, 0
    7d82:	1b c0       	rjmp	.+54     	; 0x7dba <__floatsisf+0x6c>
    7d84:	6f 5f       	subi	r22, 0xFF	; 255
    7d86:	7f 4f       	sbci	r23, 0xFF	; 255
    7d88:	8f 4f       	sbci	r24, 0xFF	; 255
    7d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d8c:	16 c0       	rjmp	.+44     	; 0x7dba <__floatsisf+0x6c>
    7d8e:	88 23       	and	r24, r24
    7d90:	11 f0       	breq	.+4      	; 0x7d96 <__floatsisf+0x48>
    7d92:	96 e9       	ldi	r25, 0x96	; 150
    7d94:	11 c0       	rjmp	.+34     	; 0x7db8 <__floatsisf+0x6a>
    7d96:	77 23       	and	r23, r23
    7d98:	21 f0       	breq	.+8      	; 0x7da2 <__floatsisf+0x54>
    7d9a:	9e e8       	ldi	r25, 0x8E	; 142
    7d9c:	87 2f       	mov	r24, r23
    7d9e:	76 2f       	mov	r23, r22
    7da0:	05 c0       	rjmp	.+10     	; 0x7dac <__floatsisf+0x5e>
    7da2:	66 23       	and	r22, r22
    7da4:	71 f0       	breq	.+28     	; 0x7dc2 <__floatsisf+0x74>
    7da6:	96 e8       	ldi	r25, 0x86	; 134
    7da8:	86 2f       	mov	r24, r22
    7daa:	70 e0       	ldi	r23, 0x00	; 0
    7dac:	60 e0       	ldi	r22, 0x00	; 0
    7dae:	2a f0       	brmi	.+10     	; 0x7dba <__floatsisf+0x6c>
    7db0:	9a 95       	dec	r25
    7db2:	66 0f       	add	r22, r22
    7db4:	77 1f       	adc	r23, r23
    7db6:	88 1f       	adc	r24, r24
    7db8:	da f7       	brpl	.-10     	; 0x7db0 <__floatsisf+0x62>
    7dba:	88 0f       	add	r24, r24
    7dbc:	96 95       	lsr	r25
    7dbe:	87 95       	ror	r24
    7dc0:	97 f9       	bld	r25, 7
    7dc2:	08 95       	ret

00007dc4 <__fp_inf>:
    7dc4:	97 f9       	bld	r25, 7
    7dc6:	9f 67       	ori	r25, 0x7F	; 127
    7dc8:	80 e8       	ldi	r24, 0x80	; 128
    7dca:	70 e0       	ldi	r23, 0x00	; 0
    7dcc:	60 e0       	ldi	r22, 0x00	; 0
    7dce:	08 95       	ret

00007dd0 <__fp_nan>:
    7dd0:	9f ef       	ldi	r25, 0xFF	; 255
    7dd2:	80 ec       	ldi	r24, 0xC0	; 192
    7dd4:	08 95       	ret

00007dd6 <__fp_pscA>:
    7dd6:	00 24       	eor	r0, r0
    7dd8:	0a 94       	dec	r0
    7dda:	16 16       	cp	r1, r22
    7ddc:	17 06       	cpc	r1, r23
    7dde:	18 06       	cpc	r1, r24
    7de0:	09 06       	cpc	r0, r25
    7de2:	08 95       	ret

00007de4 <__fp_pscB>:
    7de4:	00 24       	eor	r0, r0
    7de6:	0a 94       	dec	r0
    7de8:	12 16       	cp	r1, r18
    7dea:	13 06       	cpc	r1, r19
    7dec:	14 06       	cpc	r1, r20
    7dee:	05 06       	cpc	r0, r21
    7df0:	08 95       	ret

00007df2 <__fp_round>:
    7df2:	09 2e       	mov	r0, r25
    7df4:	03 94       	inc	r0
    7df6:	00 0c       	add	r0, r0
    7df8:	11 f4       	brne	.+4      	; 0x7dfe <__fp_round+0xc>
    7dfa:	88 23       	and	r24, r24
    7dfc:	52 f0       	brmi	.+20     	; 0x7e12 <__fp_round+0x20>
    7dfe:	bb 0f       	add	r27, r27
    7e00:	40 f4       	brcc	.+16     	; 0x7e12 <__fp_round+0x20>
    7e02:	bf 2b       	or	r27, r31
    7e04:	11 f4       	brne	.+4      	; 0x7e0a <__fp_round+0x18>
    7e06:	60 ff       	sbrs	r22, 0
    7e08:	04 c0       	rjmp	.+8      	; 0x7e12 <__fp_round+0x20>
    7e0a:	6f 5f       	subi	r22, 0xFF	; 255
    7e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e0e:	8f 4f       	sbci	r24, 0xFF	; 255
    7e10:	9f 4f       	sbci	r25, 0xFF	; 255
    7e12:	08 95       	ret

00007e14 <__fp_split3>:
    7e14:	57 fd       	sbrc	r21, 7
    7e16:	90 58       	subi	r25, 0x80	; 128
    7e18:	44 0f       	add	r20, r20
    7e1a:	55 1f       	adc	r21, r21
    7e1c:	59 f0       	breq	.+22     	; 0x7e34 <__fp_splitA+0x10>
    7e1e:	5f 3f       	cpi	r21, 0xFF	; 255
    7e20:	71 f0       	breq	.+28     	; 0x7e3e <__fp_splitA+0x1a>
    7e22:	47 95       	ror	r20

00007e24 <__fp_splitA>:
    7e24:	88 0f       	add	r24, r24
    7e26:	97 fb       	bst	r25, 7
    7e28:	99 1f       	adc	r25, r25
    7e2a:	61 f0       	breq	.+24     	; 0x7e44 <__fp_splitA+0x20>
    7e2c:	9f 3f       	cpi	r25, 0xFF	; 255
    7e2e:	79 f0       	breq	.+30     	; 0x7e4e <__fp_splitA+0x2a>
    7e30:	87 95       	ror	r24
    7e32:	08 95       	ret
    7e34:	12 16       	cp	r1, r18
    7e36:	13 06       	cpc	r1, r19
    7e38:	14 06       	cpc	r1, r20
    7e3a:	55 1f       	adc	r21, r21
    7e3c:	f2 cf       	rjmp	.-28     	; 0x7e22 <__fp_split3+0xe>
    7e3e:	46 95       	lsr	r20
    7e40:	f1 df       	rcall	.-30     	; 0x7e24 <__fp_splitA>
    7e42:	08 c0       	rjmp	.+16     	; 0x7e54 <__fp_splitA+0x30>
    7e44:	16 16       	cp	r1, r22
    7e46:	17 06       	cpc	r1, r23
    7e48:	18 06       	cpc	r1, r24
    7e4a:	99 1f       	adc	r25, r25
    7e4c:	f1 cf       	rjmp	.-30     	; 0x7e30 <__fp_splitA+0xc>
    7e4e:	86 95       	lsr	r24
    7e50:	71 05       	cpc	r23, r1
    7e52:	61 05       	cpc	r22, r1
    7e54:	08 94       	sec
    7e56:	08 95       	ret

00007e58 <__fp_zero>:
    7e58:	e8 94       	clt

00007e5a <__fp_szero>:
    7e5a:	bb 27       	eor	r27, r27
    7e5c:	66 27       	eor	r22, r22
    7e5e:	77 27       	eor	r23, r23
    7e60:	cb 01       	movw	r24, r22
    7e62:	97 f9       	bld	r25, 7
    7e64:	08 95       	ret

00007e66 <__mulsf3>:
    7e66:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__mulsf3x>
    7e6a:	0c 94 f9 3e 	jmp	0x7df2	; 0x7df2 <__fp_round>
    7e6e:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <__fp_pscA>
    7e72:	38 f0       	brcs	.+14     	; 0x7e82 <__mulsf3+0x1c>
    7e74:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <__fp_pscB>
    7e78:	20 f0       	brcs	.+8      	; 0x7e82 <__mulsf3+0x1c>
    7e7a:	95 23       	and	r25, r21
    7e7c:	11 f0       	breq	.+4      	; 0x7e82 <__mulsf3+0x1c>
    7e7e:	0c 94 e2 3e 	jmp	0x7dc4	; 0x7dc4 <__fp_inf>
    7e82:	0c 94 e8 3e 	jmp	0x7dd0	; 0x7dd0 <__fp_nan>
    7e86:	11 24       	eor	r1, r1
    7e88:	0c 94 2d 3f 	jmp	0x7e5a	; 0x7e5a <__fp_szero>

00007e8c <__mulsf3x>:
    7e8c:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__fp_split3>
    7e90:	70 f3       	brcs	.-36     	; 0x7e6e <__mulsf3+0x8>

00007e92 <__mulsf3_pse>:
    7e92:	95 9f       	mul	r25, r21
    7e94:	c1 f3       	breq	.-16     	; 0x7e86 <__mulsf3+0x20>
    7e96:	95 0f       	add	r25, r21
    7e98:	50 e0       	ldi	r21, 0x00	; 0
    7e9a:	55 1f       	adc	r21, r21
    7e9c:	62 9f       	mul	r22, r18
    7e9e:	f0 01       	movw	r30, r0
    7ea0:	72 9f       	mul	r23, r18
    7ea2:	bb 27       	eor	r27, r27
    7ea4:	f0 0d       	add	r31, r0
    7ea6:	b1 1d       	adc	r27, r1
    7ea8:	63 9f       	mul	r22, r19
    7eaa:	aa 27       	eor	r26, r26
    7eac:	f0 0d       	add	r31, r0
    7eae:	b1 1d       	adc	r27, r1
    7eb0:	aa 1f       	adc	r26, r26
    7eb2:	64 9f       	mul	r22, r20
    7eb4:	66 27       	eor	r22, r22
    7eb6:	b0 0d       	add	r27, r0
    7eb8:	a1 1d       	adc	r26, r1
    7eba:	66 1f       	adc	r22, r22
    7ebc:	82 9f       	mul	r24, r18
    7ebe:	22 27       	eor	r18, r18
    7ec0:	b0 0d       	add	r27, r0
    7ec2:	a1 1d       	adc	r26, r1
    7ec4:	62 1f       	adc	r22, r18
    7ec6:	73 9f       	mul	r23, r19
    7ec8:	b0 0d       	add	r27, r0
    7eca:	a1 1d       	adc	r26, r1
    7ecc:	62 1f       	adc	r22, r18
    7ece:	83 9f       	mul	r24, r19
    7ed0:	a0 0d       	add	r26, r0
    7ed2:	61 1d       	adc	r22, r1
    7ed4:	22 1f       	adc	r18, r18
    7ed6:	74 9f       	mul	r23, r20
    7ed8:	33 27       	eor	r19, r19
    7eda:	a0 0d       	add	r26, r0
    7edc:	61 1d       	adc	r22, r1
    7ede:	23 1f       	adc	r18, r19
    7ee0:	84 9f       	mul	r24, r20
    7ee2:	60 0d       	add	r22, r0
    7ee4:	21 1d       	adc	r18, r1
    7ee6:	82 2f       	mov	r24, r18
    7ee8:	76 2f       	mov	r23, r22
    7eea:	6a 2f       	mov	r22, r26
    7eec:	11 24       	eor	r1, r1
    7eee:	9f 57       	subi	r25, 0x7F	; 127
    7ef0:	50 40       	sbci	r21, 0x00	; 0
    7ef2:	9a f0       	brmi	.+38     	; 0x7f1a <__mulsf3_pse+0x88>
    7ef4:	f1 f0       	breq	.+60     	; 0x7f32 <__mulsf3_pse+0xa0>
    7ef6:	88 23       	and	r24, r24
    7ef8:	4a f0       	brmi	.+18     	; 0x7f0c <__mulsf3_pse+0x7a>
    7efa:	ee 0f       	add	r30, r30
    7efc:	ff 1f       	adc	r31, r31
    7efe:	bb 1f       	adc	r27, r27
    7f00:	66 1f       	adc	r22, r22
    7f02:	77 1f       	adc	r23, r23
    7f04:	88 1f       	adc	r24, r24
    7f06:	91 50       	subi	r25, 0x01	; 1
    7f08:	50 40       	sbci	r21, 0x00	; 0
    7f0a:	a9 f7       	brne	.-22     	; 0x7ef6 <__mulsf3_pse+0x64>
    7f0c:	9e 3f       	cpi	r25, 0xFE	; 254
    7f0e:	51 05       	cpc	r21, r1
    7f10:	80 f0       	brcs	.+32     	; 0x7f32 <__mulsf3_pse+0xa0>
    7f12:	0c 94 e2 3e 	jmp	0x7dc4	; 0x7dc4 <__fp_inf>
    7f16:	0c 94 2d 3f 	jmp	0x7e5a	; 0x7e5a <__fp_szero>
    7f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    7f1c:	e4 f3       	brlt	.-8      	; 0x7f16 <__mulsf3_pse+0x84>
    7f1e:	98 3e       	cpi	r25, 0xE8	; 232
    7f20:	d4 f3       	brlt	.-12     	; 0x7f16 <__mulsf3_pse+0x84>
    7f22:	86 95       	lsr	r24
    7f24:	77 95       	ror	r23
    7f26:	67 95       	ror	r22
    7f28:	b7 95       	ror	r27
    7f2a:	f7 95       	ror	r31
    7f2c:	e7 95       	ror	r30
    7f2e:	9f 5f       	subi	r25, 0xFF	; 255
    7f30:	c1 f7       	brne	.-16     	; 0x7f22 <__mulsf3_pse+0x90>
    7f32:	fe 2b       	or	r31, r30
    7f34:	88 0f       	add	r24, r24
    7f36:	91 1d       	adc	r25, r1
    7f38:	96 95       	lsr	r25
    7f3a:	87 95       	ror	r24
    7f3c:	97 f9       	bld	r25, 7
    7f3e:	08 95       	ret

00007f40 <__mulsi3>:
    7f40:	db 01       	movw	r26, r22
    7f42:	8f 93       	push	r24
    7f44:	9f 93       	push	r25
    7f46:	0e 94 f1 3f 	call	0x7fe2	; 0x7fe2 <__muluhisi3>
    7f4a:	bf 91       	pop	r27
    7f4c:	af 91       	pop	r26
    7f4e:	a2 9f       	mul	r26, r18
    7f50:	80 0d       	add	r24, r0
    7f52:	91 1d       	adc	r25, r1
    7f54:	a3 9f       	mul	r26, r19
    7f56:	90 0d       	add	r25, r0
    7f58:	b2 9f       	mul	r27, r18
    7f5a:	90 0d       	add	r25, r0
    7f5c:	11 24       	eor	r1, r1
    7f5e:	08 95       	ret

00007f60 <__udivmodsi4>:
    7f60:	a1 e2       	ldi	r26, 0x21	; 33
    7f62:	1a 2e       	mov	r1, r26
    7f64:	aa 1b       	sub	r26, r26
    7f66:	bb 1b       	sub	r27, r27
    7f68:	fd 01       	movw	r30, r26
    7f6a:	0d c0       	rjmp	.+26     	; 0x7f86 <__udivmodsi4_ep>

00007f6c <__udivmodsi4_loop>:
    7f6c:	aa 1f       	adc	r26, r26
    7f6e:	bb 1f       	adc	r27, r27
    7f70:	ee 1f       	adc	r30, r30
    7f72:	ff 1f       	adc	r31, r31
    7f74:	a2 17       	cp	r26, r18
    7f76:	b3 07       	cpc	r27, r19
    7f78:	e4 07       	cpc	r30, r20
    7f7a:	f5 07       	cpc	r31, r21
    7f7c:	20 f0       	brcs	.+8      	; 0x7f86 <__udivmodsi4_ep>
    7f7e:	a2 1b       	sub	r26, r18
    7f80:	b3 0b       	sbc	r27, r19
    7f82:	e4 0b       	sbc	r30, r20
    7f84:	f5 0b       	sbc	r31, r21

00007f86 <__udivmodsi4_ep>:
    7f86:	66 1f       	adc	r22, r22
    7f88:	77 1f       	adc	r23, r23
    7f8a:	88 1f       	adc	r24, r24
    7f8c:	99 1f       	adc	r25, r25
    7f8e:	1a 94       	dec	r1
    7f90:	69 f7       	brne	.-38     	; 0x7f6c <__udivmodsi4_loop>
    7f92:	60 95       	com	r22
    7f94:	70 95       	com	r23
    7f96:	80 95       	com	r24
    7f98:	90 95       	com	r25
    7f9a:	9b 01       	movw	r18, r22
    7f9c:	ac 01       	movw	r20, r24
    7f9e:	bd 01       	movw	r22, r26
    7fa0:	cf 01       	movw	r24, r30
    7fa2:	08 95       	ret

00007fa4 <__divmodsi4>:
    7fa4:	05 2e       	mov	r0, r21
    7fa6:	97 fb       	bst	r25, 7
    7fa8:	1e f4       	brtc	.+6      	; 0x7fb0 <__divmodsi4+0xc>
    7faa:	00 94       	com	r0
    7fac:	0e 94 e9 3f 	call	0x7fd2	; 0x7fd2 <__negsi2>
    7fb0:	57 fd       	sbrc	r21, 7
    7fb2:	07 d0       	rcall	.+14     	; 0x7fc2 <__divmodsi4_neg2>
    7fb4:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <__udivmodsi4>
    7fb8:	07 fc       	sbrc	r0, 7
    7fba:	03 d0       	rcall	.+6      	; 0x7fc2 <__divmodsi4_neg2>
    7fbc:	4e f4       	brtc	.+18     	; 0x7fd0 <__divmodsi4_exit>
    7fbe:	0c 94 e9 3f 	jmp	0x7fd2	; 0x7fd2 <__negsi2>

00007fc2 <__divmodsi4_neg2>:
    7fc2:	50 95       	com	r21
    7fc4:	40 95       	com	r20
    7fc6:	30 95       	com	r19
    7fc8:	21 95       	neg	r18
    7fca:	3f 4f       	sbci	r19, 0xFF	; 255
    7fcc:	4f 4f       	sbci	r20, 0xFF	; 255
    7fce:	5f 4f       	sbci	r21, 0xFF	; 255

00007fd0 <__divmodsi4_exit>:
    7fd0:	08 95       	ret

00007fd2 <__negsi2>:
    7fd2:	90 95       	com	r25
    7fd4:	80 95       	com	r24
    7fd6:	70 95       	com	r23
    7fd8:	61 95       	neg	r22
    7fda:	7f 4f       	sbci	r23, 0xFF	; 255
    7fdc:	8f 4f       	sbci	r24, 0xFF	; 255
    7fde:	9f 4f       	sbci	r25, 0xFF	; 255
    7fe0:	08 95       	ret

00007fe2 <__muluhisi3>:
    7fe2:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__umulhisi3>
    7fe6:	a5 9f       	mul	r26, r21
    7fe8:	90 0d       	add	r25, r0
    7fea:	b4 9f       	mul	r27, r20
    7fec:	90 0d       	add	r25, r0
    7fee:	a4 9f       	mul	r26, r20
    7ff0:	80 0d       	add	r24, r0
    7ff2:	91 1d       	adc	r25, r1
    7ff4:	11 24       	eor	r1, r1
    7ff6:	08 95       	ret

00007ff8 <__umulhisi3>:
    7ff8:	a2 9f       	mul	r26, r18
    7ffa:	b0 01       	movw	r22, r0
    7ffc:	b3 9f       	mul	r27, r19
    7ffe:	c0 01       	movw	r24, r0
    8000:	a3 9f       	mul	r26, r19
    8002:	70 0d       	add	r23, r0
    8004:	81 1d       	adc	r24, r1
    8006:	11 24       	eor	r1, r1
    8008:	91 1d       	adc	r25, r1
    800a:	b2 9f       	mul	r27, r18
    800c:	70 0d       	add	r23, r0
    800e:	81 1d       	adc	r24, r1
    8010:	11 24       	eor	r1, r1
    8012:	91 1d       	adc	r25, r1
    8014:	08 95       	ret

00008016 <atof>:
    8016:	66 27       	eor	r22, r22
    8018:	77 27       	eor	r23, r23
    801a:	0c 94 06 43 	jmp	0x860c	; 0x860c <strtod>

0000801e <atol>:
    801e:	1f 93       	push	r17
    8020:	fc 01       	movw	r30, r24
    8022:	99 27       	eor	r25, r25
    8024:	88 27       	eor	r24, r24
    8026:	bc 01       	movw	r22, r24
    8028:	e8 94       	clt
    802a:	11 91       	ld	r17, Z+
    802c:	10 32       	cpi	r17, 0x20	; 32
    802e:	e9 f3       	breq	.-6      	; 0x802a <atol+0xc>
    8030:	19 30       	cpi	r17, 0x09	; 9
    8032:	10 f0       	brcs	.+4      	; 0x8038 <atol+0x1a>
    8034:	1e 30       	cpi	r17, 0x0E	; 14
    8036:	c8 f3       	brcs	.-14     	; 0x802a <atol+0xc>
    8038:	1b 32       	cpi	r17, 0x2B	; 43
    803a:	51 f0       	breq	.+20     	; 0x8050 <atol+0x32>
    803c:	1d 32       	cpi	r17, 0x2D	; 45
    803e:	49 f4       	brne	.+18     	; 0x8052 <atol+0x34>
    8040:	68 94       	set
    8042:	06 c0       	rjmp	.+12     	; 0x8050 <atol+0x32>
    8044:	0e 94 5e 40 	call	0x80bc	; 0x80bc <__mulsi_const_10>
    8048:	61 0f       	add	r22, r17
    804a:	71 1d       	adc	r23, r1
    804c:	81 1d       	adc	r24, r1
    804e:	91 1d       	adc	r25, r1
    8050:	11 91       	ld	r17, Z+
    8052:	10 53       	subi	r17, 0x30	; 48
    8054:	1a 30       	cpi	r17, 0x0A	; 10
    8056:	b0 f3       	brcs	.-20     	; 0x8044 <atol+0x26>
    8058:	3e f4       	brtc	.+14     	; 0x8068 <atol+0x4a>
    805a:	90 95       	com	r25
    805c:	80 95       	com	r24
    805e:	70 95       	com	r23
    8060:	61 95       	neg	r22
    8062:	7f 4f       	sbci	r23, 0xFF	; 255
    8064:	8f 4f       	sbci	r24, 0xFF	; 255
    8066:	9f 4f       	sbci	r25, 0xFF	; 255
    8068:	1f 91       	pop	r17
    806a:	08 95       	ret

0000806c <strncmp>:
    806c:	fb 01       	movw	r30, r22
    806e:	dc 01       	movw	r26, r24
    8070:	41 50       	subi	r20, 0x01	; 1
    8072:	50 40       	sbci	r21, 0x00	; 0
    8074:	30 f0       	brcs	.+12     	; 0x8082 <strncmp+0x16>
    8076:	8d 91       	ld	r24, X+
    8078:	01 90       	ld	r0, Z+
    807a:	80 19       	sub	r24, r0
    807c:	19 f4       	brne	.+6      	; 0x8084 <strncmp+0x18>
    807e:	00 20       	and	r0, r0
    8080:	b9 f7       	brne	.-18     	; 0x8070 <strncmp+0x4>
    8082:	88 1b       	sub	r24, r24
    8084:	99 0b       	sbc	r25, r25
    8086:	08 95       	ret

00008088 <ltoa>:
    8088:	25 32       	cpi	r18, 0x25	; 37
    808a:	31 05       	cpc	r19, r1
    808c:	20 f4       	brcc	.+8      	; 0x8096 <ltoa+0xe>
    808e:	22 30       	cpi	r18, 0x02	; 2
    8090:	10 f0       	brcs	.+4      	; 0x8096 <ltoa+0xe>
    8092:	0c 94 4f 40 	jmp	0x809e	; 0x809e <__ltoa_ncheck>
    8096:	fa 01       	movw	r30, r20
    8098:	10 82       	st	Z, r1
    809a:	ca 01       	movw	r24, r20
    809c:	08 95       	ret

0000809e <__ltoa_ncheck>:
    809e:	bb 27       	eor	r27, r27
    80a0:	2a 30       	cpi	r18, 0x0A	; 10
    80a2:	51 f4       	brne	.+20     	; 0x80b8 <__ltoa_ncheck+0x1a>
    80a4:	99 23       	and	r25, r25
    80a6:	42 f4       	brpl	.+16     	; 0x80b8 <__ltoa_ncheck+0x1a>
    80a8:	bd e2       	ldi	r27, 0x2D	; 45
    80aa:	90 95       	com	r25
    80ac:	80 95       	com	r24
    80ae:	70 95       	com	r23
    80b0:	61 95       	neg	r22
    80b2:	7f 4f       	sbci	r23, 0xFF	; 255
    80b4:	8f 4f       	sbci	r24, 0xFF	; 255
    80b6:	9f 4f       	sbci	r25, 0xFF	; 255
    80b8:	0c 94 74 40 	jmp	0x80e8	; 0x80e8 <__ultoa_common>

000080bc <__mulsi_const_10>:
    80bc:	59 2f       	mov	r21, r25
    80be:	48 2f       	mov	r20, r24
    80c0:	37 2f       	mov	r19, r23
    80c2:	26 2f       	mov	r18, r22
    80c4:	66 0f       	add	r22, r22
    80c6:	77 1f       	adc	r23, r23
    80c8:	88 1f       	adc	r24, r24
    80ca:	99 1f       	adc	r25, r25
    80cc:	66 0f       	add	r22, r22
    80ce:	77 1f       	adc	r23, r23
    80d0:	88 1f       	adc	r24, r24
    80d2:	99 1f       	adc	r25, r25
    80d4:	62 0f       	add	r22, r18
    80d6:	73 1f       	adc	r23, r19
    80d8:	84 1f       	adc	r24, r20
    80da:	95 1f       	adc	r25, r21
    80dc:	66 0f       	add	r22, r22
    80de:	77 1f       	adc	r23, r23
    80e0:	88 1f       	adc	r24, r24
    80e2:	99 1f       	adc	r25, r25
    80e4:	08 95       	ret

000080e6 <__ultoa_ncheck>:
    80e6:	bb 27       	eor	r27, r27

000080e8 <__ultoa_common>:
    80e8:	fa 01       	movw	r30, r20
    80ea:	a6 2f       	mov	r26, r22
    80ec:	62 17       	cp	r22, r18
    80ee:	71 05       	cpc	r23, r1
    80f0:	81 05       	cpc	r24, r1
    80f2:	91 05       	cpc	r25, r1
    80f4:	33 0b       	sbc	r19, r19
    80f6:	30 fb       	bst	r19, 0
    80f8:	66 f0       	brts	.+24     	; 0x8112 <__ultoa_common+0x2a>
    80fa:	aa 27       	eor	r26, r26
    80fc:	66 0f       	add	r22, r22
    80fe:	77 1f       	adc	r23, r23
    8100:	88 1f       	adc	r24, r24
    8102:	99 1f       	adc	r25, r25
    8104:	aa 1f       	adc	r26, r26
    8106:	a2 17       	cp	r26, r18
    8108:	10 f0       	brcs	.+4      	; 0x810e <__ultoa_common+0x26>
    810a:	a2 1b       	sub	r26, r18
    810c:	63 95       	inc	r22
    810e:	38 50       	subi	r19, 0x08	; 8
    8110:	a9 f7       	brne	.-22     	; 0x80fc <__ultoa_common+0x14>
    8112:	a0 5d       	subi	r26, 0xD0	; 208
    8114:	aa 33       	cpi	r26, 0x3A	; 58
    8116:	08 f0       	brcs	.+2      	; 0x811a <__ultoa_common+0x32>
    8118:	a9 5d       	subi	r26, 0xD9	; 217
    811a:	a1 93       	st	Z+, r26
    811c:	36 f7       	brtc	.-52     	; 0x80ea <__ultoa_common+0x2>
    811e:	b1 11       	cpse	r27, r1
    8120:	b1 93       	st	Z+, r27
    8122:	10 82       	st	Z, r1
    8124:	ca 01       	movw	r24, r20
    8126:	0c 94 99 44 	jmp	0x8932	; 0x8932 <strrev>

0000812a <printf>:
    812a:	cf 93       	push	r28
    812c:	df 93       	push	r29
    812e:	cd b7       	in	r28, 0x3d	; 61
    8130:	de b7       	in	r29, 0x3e	; 62
    8132:	ae 01       	movw	r20, r28
    8134:	4a 5f       	subi	r20, 0xFA	; 250
    8136:	5f 4f       	sbci	r21, 0xFF	; 255
    8138:	fa 01       	movw	r30, r20
    813a:	61 91       	ld	r22, Z+
    813c:	71 91       	ld	r23, Z+
    813e:	af 01       	movw	r20, r30
    8140:	80 91 bd 29 	lds	r24, 0x29BD	; 0x8029bd <__iob+0x2>
    8144:	90 91 be 29 	lds	r25, 0x29BE	; 0x8029be <__iob+0x3>
    8148:	0e 94 02 41 	call	0x8204	; 0x8204 <vfprintf>
    814c:	df 91       	pop	r29
    814e:	cf 91       	pop	r28
    8150:	08 95       	ret

00008152 <puts>:
    8152:	0f 93       	push	r16
    8154:	1f 93       	push	r17
    8156:	cf 93       	push	r28
    8158:	df 93       	push	r29
    815a:	e0 91 bd 29 	lds	r30, 0x29BD	; 0x8029bd <__iob+0x2>
    815e:	f0 91 be 29 	lds	r31, 0x29BE	; 0x8029be <__iob+0x3>
    8162:	23 81       	ldd	r18, Z+3	; 0x03
    8164:	21 ff       	sbrs	r18, 1
    8166:	1b c0       	rjmp	.+54     	; 0x819e <puts+0x4c>
    8168:	8c 01       	movw	r16, r24
    816a:	d0 e0       	ldi	r29, 0x00	; 0
    816c:	c0 e0       	ldi	r28, 0x00	; 0
    816e:	f8 01       	movw	r30, r16
    8170:	81 91       	ld	r24, Z+
    8172:	8f 01       	movw	r16, r30
    8174:	60 91 bd 29 	lds	r22, 0x29BD	; 0x8029bd <__iob+0x2>
    8178:	70 91 be 29 	lds	r23, 0x29BE	; 0x8029be <__iob+0x3>
    817c:	db 01       	movw	r26, r22
    817e:	18 96       	adiw	r26, 0x08	; 8
    8180:	ed 91       	ld	r30, X+
    8182:	fc 91       	ld	r31, X
    8184:	19 97       	sbiw	r26, 0x09	; 9
    8186:	88 23       	and	r24, r24
    8188:	31 f0       	breq	.+12     	; 0x8196 <puts+0x44>
    818a:	19 95       	eicall
    818c:	89 2b       	or	r24, r25
    818e:	79 f3       	breq	.-34     	; 0x816e <puts+0x1c>
    8190:	df ef       	ldi	r29, 0xFF	; 255
    8192:	cf ef       	ldi	r28, 0xFF	; 255
    8194:	ec cf       	rjmp	.-40     	; 0x816e <puts+0x1c>
    8196:	8a e0       	ldi	r24, 0x0A	; 10
    8198:	19 95       	eicall
    819a:	89 2b       	or	r24, r25
    819c:	19 f0       	breq	.+6      	; 0x81a4 <puts+0x52>
    819e:	8f ef       	ldi	r24, 0xFF	; 255
    81a0:	9f ef       	ldi	r25, 0xFF	; 255
    81a2:	02 c0       	rjmp	.+4      	; 0x81a8 <puts+0x56>
    81a4:	8d 2f       	mov	r24, r29
    81a6:	9c 2f       	mov	r25, r28
    81a8:	df 91       	pop	r29
    81aa:	cf 91       	pop	r28
    81ac:	1f 91       	pop	r17
    81ae:	0f 91       	pop	r16
    81b0:	08 95       	ret

000081b2 <sprintf>:
    81b2:	0f 93       	push	r16
    81b4:	1f 93       	push	r17
    81b6:	cf 93       	push	r28
    81b8:	df 93       	push	r29
    81ba:	cd b7       	in	r28, 0x3d	; 61
    81bc:	de b7       	in	r29, 0x3e	; 62
    81be:	2e 97       	sbiw	r28, 0x0e	; 14
    81c0:	cd bf       	out	0x3d, r28	; 61
    81c2:	de bf       	out	0x3e, r29	; 62
    81c4:	0e 89       	ldd	r16, Y+22	; 0x16
    81c6:	1f 89       	ldd	r17, Y+23	; 0x17
    81c8:	86 e0       	ldi	r24, 0x06	; 6
    81ca:	8c 83       	std	Y+4, r24	; 0x04
    81cc:	09 83       	std	Y+1, r16	; 0x01
    81ce:	1a 83       	std	Y+2, r17	; 0x02
    81d0:	8f ef       	ldi	r24, 0xFF	; 255
    81d2:	9f e7       	ldi	r25, 0x7F	; 127
    81d4:	8d 83       	std	Y+5, r24	; 0x05
    81d6:	9e 83       	std	Y+6, r25	; 0x06
    81d8:	ae 01       	movw	r20, r28
    81da:	46 5e       	subi	r20, 0xE6	; 230
    81dc:	5f 4f       	sbci	r21, 0xFF	; 255
    81de:	68 8d       	ldd	r22, Y+24	; 0x18
    81e0:	79 8d       	ldd	r23, Y+25	; 0x19
    81e2:	ce 01       	movw	r24, r28
    81e4:	01 96       	adiw	r24, 0x01	; 1
    81e6:	0e 94 02 41 	call	0x8204	; 0x8204 <vfprintf>
    81ea:	ef 81       	ldd	r30, Y+7	; 0x07
    81ec:	f8 85       	ldd	r31, Y+8	; 0x08
    81ee:	e0 0f       	add	r30, r16
    81f0:	f1 1f       	adc	r31, r17
    81f2:	10 82       	st	Z, r1
    81f4:	2e 96       	adiw	r28, 0x0e	; 14
    81f6:	cd bf       	out	0x3d, r28	; 61
    81f8:	de bf       	out	0x3e, r29	; 62
    81fa:	df 91       	pop	r29
    81fc:	cf 91       	pop	r28
    81fe:	1f 91       	pop	r17
    8200:	0f 91       	pop	r16
    8202:	08 95       	ret

00008204 <vfprintf>:
    8204:	2f 92       	push	r2
    8206:	3f 92       	push	r3
    8208:	4f 92       	push	r4
    820a:	5f 92       	push	r5
    820c:	6f 92       	push	r6
    820e:	7f 92       	push	r7
    8210:	8f 92       	push	r8
    8212:	9f 92       	push	r9
    8214:	af 92       	push	r10
    8216:	bf 92       	push	r11
    8218:	cf 92       	push	r12
    821a:	df 92       	push	r13
    821c:	ef 92       	push	r14
    821e:	ff 92       	push	r15
    8220:	0f 93       	push	r16
    8222:	1f 93       	push	r17
    8224:	cf 93       	push	r28
    8226:	df 93       	push	r29
    8228:	cd b7       	in	r28, 0x3d	; 61
    822a:	de b7       	in	r29, 0x3e	; 62
    822c:	2b 97       	sbiw	r28, 0x0b	; 11
    822e:	cd bf       	out	0x3d, r28	; 61
    8230:	de bf       	out	0x3e, r29	; 62
    8232:	6c 01       	movw	r12, r24
    8234:	7b 01       	movw	r14, r22
    8236:	8a 01       	movw	r16, r20
    8238:	fc 01       	movw	r30, r24
    823a:	16 82       	std	Z+6, r1	; 0x06
    823c:	17 82       	std	Z+7, r1	; 0x07
    823e:	83 81       	ldd	r24, Z+3	; 0x03
    8240:	81 ff       	sbrs	r24, 1
    8242:	cc c1       	rjmp	.+920    	; 0x85dc <vfprintf+0x3d8>
    8244:	ce 01       	movw	r24, r28
    8246:	01 96       	adiw	r24, 0x01	; 1
    8248:	3c 01       	movw	r6, r24
    824a:	f6 01       	movw	r30, r12
    824c:	93 81       	ldd	r25, Z+3	; 0x03
    824e:	f7 01       	movw	r30, r14
    8250:	93 fd       	sbrc	r25, 3
    8252:	85 91       	lpm	r24, Z+
    8254:	93 ff       	sbrs	r25, 3
    8256:	81 91       	ld	r24, Z+
    8258:	7f 01       	movw	r14, r30
    825a:	88 23       	and	r24, r24
    825c:	09 f4       	brne	.+2      	; 0x8260 <vfprintf+0x5c>
    825e:	ba c1       	rjmp	.+884    	; 0x85d4 <vfprintf+0x3d0>
    8260:	85 32       	cpi	r24, 0x25	; 37
    8262:	39 f4       	brne	.+14     	; 0x8272 <vfprintf+0x6e>
    8264:	93 fd       	sbrc	r25, 3
    8266:	85 91       	lpm	r24, Z+
    8268:	93 ff       	sbrs	r25, 3
    826a:	81 91       	ld	r24, Z+
    826c:	7f 01       	movw	r14, r30
    826e:	85 32       	cpi	r24, 0x25	; 37
    8270:	29 f4       	brne	.+10     	; 0x827c <vfprintf+0x78>
    8272:	b6 01       	movw	r22, r12
    8274:	90 e0       	ldi	r25, 0x00	; 0
    8276:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    827a:	e7 cf       	rjmp	.-50     	; 0x824a <vfprintf+0x46>
    827c:	91 2c       	mov	r9, r1
    827e:	21 2c       	mov	r2, r1
    8280:	31 2c       	mov	r3, r1
    8282:	ff e1       	ldi	r31, 0x1F	; 31
    8284:	f3 15       	cp	r31, r3
    8286:	d8 f0       	brcs	.+54     	; 0x82be <vfprintf+0xba>
    8288:	8b 32       	cpi	r24, 0x2B	; 43
    828a:	79 f0       	breq	.+30     	; 0x82aa <vfprintf+0xa6>
    828c:	38 f4       	brcc	.+14     	; 0x829c <vfprintf+0x98>
    828e:	80 32       	cpi	r24, 0x20	; 32
    8290:	79 f0       	breq	.+30     	; 0x82b0 <vfprintf+0xac>
    8292:	83 32       	cpi	r24, 0x23	; 35
    8294:	a1 f4       	brne	.+40     	; 0x82be <vfprintf+0xba>
    8296:	23 2d       	mov	r18, r3
    8298:	20 61       	ori	r18, 0x10	; 16
    829a:	1d c0       	rjmp	.+58     	; 0x82d6 <vfprintf+0xd2>
    829c:	8d 32       	cpi	r24, 0x2D	; 45
    829e:	61 f0       	breq	.+24     	; 0x82b8 <vfprintf+0xb4>
    82a0:	80 33       	cpi	r24, 0x30	; 48
    82a2:	69 f4       	brne	.+26     	; 0x82be <vfprintf+0xba>
    82a4:	23 2d       	mov	r18, r3
    82a6:	21 60       	ori	r18, 0x01	; 1
    82a8:	16 c0       	rjmp	.+44     	; 0x82d6 <vfprintf+0xd2>
    82aa:	83 2d       	mov	r24, r3
    82ac:	82 60       	ori	r24, 0x02	; 2
    82ae:	38 2e       	mov	r3, r24
    82b0:	e3 2d       	mov	r30, r3
    82b2:	e4 60       	ori	r30, 0x04	; 4
    82b4:	3e 2e       	mov	r3, r30
    82b6:	2a c0       	rjmp	.+84     	; 0x830c <vfprintf+0x108>
    82b8:	f3 2d       	mov	r31, r3
    82ba:	f8 60       	ori	r31, 0x08	; 8
    82bc:	1d c0       	rjmp	.+58     	; 0x82f8 <vfprintf+0xf4>
    82be:	37 fc       	sbrc	r3, 7
    82c0:	2d c0       	rjmp	.+90     	; 0x831c <vfprintf+0x118>
    82c2:	20 ed       	ldi	r18, 0xD0	; 208
    82c4:	28 0f       	add	r18, r24
    82c6:	2a 30       	cpi	r18, 0x0A	; 10
    82c8:	40 f0       	brcs	.+16     	; 0x82da <vfprintf+0xd6>
    82ca:	8e 32       	cpi	r24, 0x2E	; 46
    82cc:	b9 f4       	brne	.+46     	; 0x82fc <vfprintf+0xf8>
    82ce:	36 fc       	sbrc	r3, 6
    82d0:	81 c1       	rjmp	.+770    	; 0x85d4 <vfprintf+0x3d0>
    82d2:	23 2d       	mov	r18, r3
    82d4:	20 64       	ori	r18, 0x40	; 64
    82d6:	32 2e       	mov	r3, r18
    82d8:	19 c0       	rjmp	.+50     	; 0x830c <vfprintf+0x108>
    82da:	36 fe       	sbrs	r3, 6
    82dc:	06 c0       	rjmp	.+12     	; 0x82ea <vfprintf+0xe6>
    82de:	8a e0       	ldi	r24, 0x0A	; 10
    82e0:	98 9e       	mul	r9, r24
    82e2:	20 0d       	add	r18, r0
    82e4:	11 24       	eor	r1, r1
    82e6:	92 2e       	mov	r9, r18
    82e8:	11 c0       	rjmp	.+34     	; 0x830c <vfprintf+0x108>
    82ea:	ea e0       	ldi	r30, 0x0A	; 10
    82ec:	2e 9e       	mul	r2, r30
    82ee:	20 0d       	add	r18, r0
    82f0:	11 24       	eor	r1, r1
    82f2:	22 2e       	mov	r2, r18
    82f4:	f3 2d       	mov	r31, r3
    82f6:	f0 62       	ori	r31, 0x20	; 32
    82f8:	3f 2e       	mov	r3, r31
    82fa:	08 c0       	rjmp	.+16     	; 0x830c <vfprintf+0x108>
    82fc:	8c 36       	cpi	r24, 0x6C	; 108
    82fe:	21 f4       	brne	.+8      	; 0x8308 <vfprintf+0x104>
    8300:	83 2d       	mov	r24, r3
    8302:	80 68       	ori	r24, 0x80	; 128
    8304:	38 2e       	mov	r3, r24
    8306:	02 c0       	rjmp	.+4      	; 0x830c <vfprintf+0x108>
    8308:	88 36       	cpi	r24, 0x68	; 104
    830a:	41 f4       	brne	.+16     	; 0x831c <vfprintf+0x118>
    830c:	f7 01       	movw	r30, r14
    830e:	93 fd       	sbrc	r25, 3
    8310:	85 91       	lpm	r24, Z+
    8312:	93 ff       	sbrs	r25, 3
    8314:	81 91       	ld	r24, Z+
    8316:	7f 01       	movw	r14, r30
    8318:	81 11       	cpse	r24, r1
    831a:	b3 cf       	rjmp	.-154    	; 0x8282 <vfprintf+0x7e>
    831c:	98 2f       	mov	r25, r24
    831e:	9f 7d       	andi	r25, 0xDF	; 223
    8320:	95 54       	subi	r25, 0x45	; 69
    8322:	93 30       	cpi	r25, 0x03	; 3
    8324:	28 f4       	brcc	.+10     	; 0x8330 <vfprintf+0x12c>
    8326:	0c 5f       	subi	r16, 0xFC	; 252
    8328:	1f 4f       	sbci	r17, 0xFF	; 255
    832a:	9f e3       	ldi	r25, 0x3F	; 63
    832c:	99 83       	std	Y+1, r25	; 0x01
    832e:	0d c0       	rjmp	.+26     	; 0x834a <vfprintf+0x146>
    8330:	83 36       	cpi	r24, 0x63	; 99
    8332:	31 f0       	breq	.+12     	; 0x8340 <vfprintf+0x13c>
    8334:	83 37       	cpi	r24, 0x73	; 115
    8336:	71 f0       	breq	.+28     	; 0x8354 <vfprintf+0x150>
    8338:	83 35       	cpi	r24, 0x53	; 83
    833a:	09 f0       	breq	.+2      	; 0x833e <vfprintf+0x13a>
    833c:	59 c0       	rjmp	.+178    	; 0x83f0 <vfprintf+0x1ec>
    833e:	21 c0       	rjmp	.+66     	; 0x8382 <vfprintf+0x17e>
    8340:	f8 01       	movw	r30, r16
    8342:	80 81       	ld	r24, Z
    8344:	89 83       	std	Y+1, r24	; 0x01
    8346:	0e 5f       	subi	r16, 0xFE	; 254
    8348:	1f 4f       	sbci	r17, 0xFF	; 255
    834a:	88 24       	eor	r8, r8
    834c:	83 94       	inc	r8
    834e:	91 2c       	mov	r9, r1
    8350:	53 01       	movw	r10, r6
    8352:	13 c0       	rjmp	.+38     	; 0x837a <vfprintf+0x176>
    8354:	28 01       	movw	r4, r16
    8356:	f2 e0       	ldi	r31, 0x02	; 2
    8358:	4f 0e       	add	r4, r31
    835a:	51 1c       	adc	r5, r1
    835c:	f8 01       	movw	r30, r16
    835e:	a0 80       	ld	r10, Z
    8360:	b1 80       	ldd	r11, Z+1	; 0x01
    8362:	36 fe       	sbrs	r3, 6
    8364:	03 c0       	rjmp	.+6      	; 0x836c <vfprintf+0x168>
    8366:	69 2d       	mov	r22, r9
    8368:	70 e0       	ldi	r23, 0x00	; 0
    836a:	02 c0       	rjmp	.+4      	; 0x8370 <vfprintf+0x16c>
    836c:	6f ef       	ldi	r22, 0xFF	; 255
    836e:	7f ef       	ldi	r23, 0xFF	; 255
    8370:	c5 01       	movw	r24, r10
    8372:	0e 94 8e 44 	call	0x891c	; 0x891c <strnlen>
    8376:	4c 01       	movw	r8, r24
    8378:	82 01       	movw	r16, r4
    837a:	f3 2d       	mov	r31, r3
    837c:	ff 77       	andi	r31, 0x7F	; 127
    837e:	3f 2e       	mov	r3, r31
    8380:	16 c0       	rjmp	.+44     	; 0x83ae <vfprintf+0x1aa>
    8382:	28 01       	movw	r4, r16
    8384:	22 e0       	ldi	r18, 0x02	; 2
    8386:	42 0e       	add	r4, r18
    8388:	51 1c       	adc	r5, r1
    838a:	f8 01       	movw	r30, r16
    838c:	a0 80       	ld	r10, Z
    838e:	b1 80       	ldd	r11, Z+1	; 0x01
    8390:	36 fe       	sbrs	r3, 6
    8392:	03 c0       	rjmp	.+6      	; 0x839a <vfprintf+0x196>
    8394:	69 2d       	mov	r22, r9
    8396:	70 e0       	ldi	r23, 0x00	; 0
    8398:	02 c0       	rjmp	.+4      	; 0x839e <vfprintf+0x19a>
    839a:	6f ef       	ldi	r22, 0xFF	; 255
    839c:	7f ef       	ldi	r23, 0xFF	; 255
    839e:	c5 01       	movw	r24, r10
    83a0:	0e 94 83 44 	call	0x8906	; 0x8906 <strnlen_P>
    83a4:	4c 01       	movw	r8, r24
    83a6:	f3 2d       	mov	r31, r3
    83a8:	f0 68       	ori	r31, 0x80	; 128
    83aa:	3f 2e       	mov	r3, r31
    83ac:	82 01       	movw	r16, r4
    83ae:	33 fc       	sbrc	r3, 3
    83b0:	1b c0       	rjmp	.+54     	; 0x83e8 <vfprintf+0x1e4>
    83b2:	82 2d       	mov	r24, r2
    83b4:	90 e0       	ldi	r25, 0x00	; 0
    83b6:	88 16       	cp	r8, r24
    83b8:	99 06       	cpc	r9, r25
    83ba:	b0 f4       	brcc	.+44     	; 0x83e8 <vfprintf+0x1e4>
    83bc:	b6 01       	movw	r22, r12
    83be:	80 e2       	ldi	r24, 0x20	; 32
    83c0:	90 e0       	ldi	r25, 0x00	; 0
    83c2:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    83c6:	2a 94       	dec	r2
    83c8:	f4 cf       	rjmp	.-24     	; 0x83b2 <vfprintf+0x1ae>
    83ca:	f5 01       	movw	r30, r10
    83cc:	37 fc       	sbrc	r3, 7
    83ce:	85 91       	lpm	r24, Z+
    83d0:	37 fe       	sbrs	r3, 7
    83d2:	81 91       	ld	r24, Z+
    83d4:	5f 01       	movw	r10, r30
    83d6:	b6 01       	movw	r22, r12
    83d8:	90 e0       	ldi	r25, 0x00	; 0
    83da:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    83de:	21 10       	cpse	r2, r1
    83e0:	2a 94       	dec	r2
    83e2:	21 e0       	ldi	r18, 0x01	; 1
    83e4:	82 1a       	sub	r8, r18
    83e6:	91 08       	sbc	r9, r1
    83e8:	81 14       	cp	r8, r1
    83ea:	91 04       	cpc	r9, r1
    83ec:	71 f7       	brne	.-36     	; 0x83ca <vfprintf+0x1c6>
    83ee:	e8 c0       	rjmp	.+464    	; 0x85c0 <vfprintf+0x3bc>
    83f0:	84 36       	cpi	r24, 0x64	; 100
    83f2:	11 f0       	breq	.+4      	; 0x83f8 <vfprintf+0x1f4>
    83f4:	89 36       	cpi	r24, 0x69	; 105
    83f6:	41 f5       	brne	.+80     	; 0x8448 <vfprintf+0x244>
    83f8:	f8 01       	movw	r30, r16
    83fa:	37 fe       	sbrs	r3, 7
    83fc:	07 c0       	rjmp	.+14     	; 0x840c <vfprintf+0x208>
    83fe:	60 81       	ld	r22, Z
    8400:	71 81       	ldd	r23, Z+1	; 0x01
    8402:	82 81       	ldd	r24, Z+2	; 0x02
    8404:	93 81       	ldd	r25, Z+3	; 0x03
    8406:	0c 5f       	subi	r16, 0xFC	; 252
    8408:	1f 4f       	sbci	r17, 0xFF	; 255
    840a:	08 c0       	rjmp	.+16     	; 0x841c <vfprintf+0x218>
    840c:	60 81       	ld	r22, Z
    840e:	71 81       	ldd	r23, Z+1	; 0x01
    8410:	07 2e       	mov	r0, r23
    8412:	00 0c       	add	r0, r0
    8414:	88 0b       	sbc	r24, r24
    8416:	99 0b       	sbc	r25, r25
    8418:	0e 5f       	subi	r16, 0xFE	; 254
    841a:	1f 4f       	sbci	r17, 0xFF	; 255
    841c:	f3 2d       	mov	r31, r3
    841e:	ff 76       	andi	r31, 0x6F	; 111
    8420:	3f 2e       	mov	r3, r31
    8422:	97 ff       	sbrs	r25, 7
    8424:	09 c0       	rjmp	.+18     	; 0x8438 <vfprintf+0x234>
    8426:	90 95       	com	r25
    8428:	80 95       	com	r24
    842a:	70 95       	com	r23
    842c:	61 95       	neg	r22
    842e:	7f 4f       	sbci	r23, 0xFF	; 255
    8430:	8f 4f       	sbci	r24, 0xFF	; 255
    8432:	9f 4f       	sbci	r25, 0xFF	; 255
    8434:	f0 68       	ori	r31, 0x80	; 128
    8436:	3f 2e       	mov	r3, r31
    8438:	2a e0       	ldi	r18, 0x0A	; 10
    843a:	30 e0       	ldi	r19, 0x00	; 0
    843c:	a3 01       	movw	r20, r6
    843e:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__ultoa_invert>
    8442:	88 2e       	mov	r8, r24
    8444:	86 18       	sub	r8, r6
    8446:	45 c0       	rjmp	.+138    	; 0x84d2 <vfprintf+0x2ce>
    8448:	85 37       	cpi	r24, 0x75	; 117
    844a:	31 f4       	brne	.+12     	; 0x8458 <vfprintf+0x254>
    844c:	23 2d       	mov	r18, r3
    844e:	2f 7e       	andi	r18, 0xEF	; 239
    8450:	b2 2e       	mov	r11, r18
    8452:	2a e0       	ldi	r18, 0x0A	; 10
    8454:	30 e0       	ldi	r19, 0x00	; 0
    8456:	25 c0       	rjmp	.+74     	; 0x84a2 <vfprintf+0x29e>
    8458:	93 2d       	mov	r25, r3
    845a:	99 7f       	andi	r25, 0xF9	; 249
    845c:	b9 2e       	mov	r11, r25
    845e:	8f 36       	cpi	r24, 0x6F	; 111
    8460:	c1 f0       	breq	.+48     	; 0x8492 <vfprintf+0x28e>
    8462:	18 f4       	brcc	.+6      	; 0x846a <vfprintf+0x266>
    8464:	88 35       	cpi	r24, 0x58	; 88
    8466:	79 f0       	breq	.+30     	; 0x8486 <vfprintf+0x282>
    8468:	b5 c0       	rjmp	.+362    	; 0x85d4 <vfprintf+0x3d0>
    846a:	80 37       	cpi	r24, 0x70	; 112
    846c:	19 f0       	breq	.+6      	; 0x8474 <vfprintf+0x270>
    846e:	88 37       	cpi	r24, 0x78	; 120
    8470:	21 f0       	breq	.+8      	; 0x847a <vfprintf+0x276>
    8472:	b0 c0       	rjmp	.+352    	; 0x85d4 <vfprintf+0x3d0>
    8474:	e9 2f       	mov	r30, r25
    8476:	e0 61       	ori	r30, 0x10	; 16
    8478:	be 2e       	mov	r11, r30
    847a:	b4 fe       	sbrs	r11, 4
    847c:	0d c0       	rjmp	.+26     	; 0x8498 <vfprintf+0x294>
    847e:	fb 2d       	mov	r31, r11
    8480:	f4 60       	ori	r31, 0x04	; 4
    8482:	bf 2e       	mov	r11, r31
    8484:	09 c0       	rjmp	.+18     	; 0x8498 <vfprintf+0x294>
    8486:	34 fe       	sbrs	r3, 4
    8488:	0a c0       	rjmp	.+20     	; 0x849e <vfprintf+0x29a>
    848a:	29 2f       	mov	r18, r25
    848c:	26 60       	ori	r18, 0x06	; 6
    848e:	b2 2e       	mov	r11, r18
    8490:	06 c0       	rjmp	.+12     	; 0x849e <vfprintf+0x29a>
    8492:	28 e0       	ldi	r18, 0x08	; 8
    8494:	30 e0       	ldi	r19, 0x00	; 0
    8496:	05 c0       	rjmp	.+10     	; 0x84a2 <vfprintf+0x29e>
    8498:	20 e1       	ldi	r18, 0x10	; 16
    849a:	30 e0       	ldi	r19, 0x00	; 0
    849c:	02 c0       	rjmp	.+4      	; 0x84a2 <vfprintf+0x29e>
    849e:	20 e1       	ldi	r18, 0x10	; 16
    84a0:	32 e0       	ldi	r19, 0x02	; 2
    84a2:	f8 01       	movw	r30, r16
    84a4:	b7 fe       	sbrs	r11, 7
    84a6:	07 c0       	rjmp	.+14     	; 0x84b6 <vfprintf+0x2b2>
    84a8:	60 81       	ld	r22, Z
    84aa:	71 81       	ldd	r23, Z+1	; 0x01
    84ac:	82 81       	ldd	r24, Z+2	; 0x02
    84ae:	93 81       	ldd	r25, Z+3	; 0x03
    84b0:	0c 5f       	subi	r16, 0xFC	; 252
    84b2:	1f 4f       	sbci	r17, 0xFF	; 255
    84b4:	06 c0       	rjmp	.+12     	; 0x84c2 <vfprintf+0x2be>
    84b6:	60 81       	ld	r22, Z
    84b8:	71 81       	ldd	r23, Z+1	; 0x01
    84ba:	80 e0       	ldi	r24, 0x00	; 0
    84bc:	90 e0       	ldi	r25, 0x00	; 0
    84be:	0e 5f       	subi	r16, 0xFE	; 254
    84c0:	1f 4f       	sbci	r17, 0xFF	; 255
    84c2:	a3 01       	movw	r20, r6
    84c4:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__ultoa_invert>
    84c8:	88 2e       	mov	r8, r24
    84ca:	86 18       	sub	r8, r6
    84cc:	fb 2d       	mov	r31, r11
    84ce:	ff 77       	andi	r31, 0x7F	; 127
    84d0:	3f 2e       	mov	r3, r31
    84d2:	36 fe       	sbrs	r3, 6
    84d4:	0d c0       	rjmp	.+26     	; 0x84f0 <vfprintf+0x2ec>
    84d6:	23 2d       	mov	r18, r3
    84d8:	2e 7f       	andi	r18, 0xFE	; 254
    84da:	a2 2e       	mov	r10, r18
    84dc:	89 14       	cp	r8, r9
    84de:	58 f4       	brcc	.+22     	; 0x84f6 <vfprintf+0x2f2>
    84e0:	34 fe       	sbrs	r3, 4
    84e2:	0b c0       	rjmp	.+22     	; 0x84fa <vfprintf+0x2f6>
    84e4:	32 fc       	sbrc	r3, 2
    84e6:	09 c0       	rjmp	.+18     	; 0x84fa <vfprintf+0x2f6>
    84e8:	83 2d       	mov	r24, r3
    84ea:	8e 7e       	andi	r24, 0xEE	; 238
    84ec:	a8 2e       	mov	r10, r24
    84ee:	05 c0       	rjmp	.+10     	; 0x84fa <vfprintf+0x2f6>
    84f0:	b8 2c       	mov	r11, r8
    84f2:	a3 2c       	mov	r10, r3
    84f4:	03 c0       	rjmp	.+6      	; 0x84fc <vfprintf+0x2f8>
    84f6:	b8 2c       	mov	r11, r8
    84f8:	01 c0       	rjmp	.+2      	; 0x84fc <vfprintf+0x2f8>
    84fa:	b9 2c       	mov	r11, r9
    84fc:	a4 fe       	sbrs	r10, 4
    84fe:	0f c0       	rjmp	.+30     	; 0x851e <vfprintf+0x31a>
    8500:	fe 01       	movw	r30, r28
    8502:	e8 0d       	add	r30, r8
    8504:	f1 1d       	adc	r31, r1
    8506:	80 81       	ld	r24, Z
    8508:	80 33       	cpi	r24, 0x30	; 48
    850a:	21 f4       	brne	.+8      	; 0x8514 <vfprintf+0x310>
    850c:	9a 2d       	mov	r25, r10
    850e:	99 7e       	andi	r25, 0xE9	; 233
    8510:	a9 2e       	mov	r10, r25
    8512:	09 c0       	rjmp	.+18     	; 0x8526 <vfprintf+0x322>
    8514:	a2 fe       	sbrs	r10, 2
    8516:	06 c0       	rjmp	.+12     	; 0x8524 <vfprintf+0x320>
    8518:	b3 94       	inc	r11
    851a:	b3 94       	inc	r11
    851c:	04 c0       	rjmp	.+8      	; 0x8526 <vfprintf+0x322>
    851e:	8a 2d       	mov	r24, r10
    8520:	86 78       	andi	r24, 0x86	; 134
    8522:	09 f0       	breq	.+2      	; 0x8526 <vfprintf+0x322>
    8524:	b3 94       	inc	r11
    8526:	a3 fc       	sbrc	r10, 3
    8528:	11 c0       	rjmp	.+34     	; 0x854c <vfprintf+0x348>
    852a:	a0 fe       	sbrs	r10, 0
    852c:	06 c0       	rjmp	.+12     	; 0x853a <vfprintf+0x336>
    852e:	b2 14       	cp	r11, r2
    8530:	88 f4       	brcc	.+34     	; 0x8554 <vfprintf+0x350>
    8532:	28 0c       	add	r2, r8
    8534:	92 2c       	mov	r9, r2
    8536:	9b 18       	sub	r9, r11
    8538:	0e c0       	rjmp	.+28     	; 0x8556 <vfprintf+0x352>
    853a:	b2 14       	cp	r11, r2
    853c:	60 f4       	brcc	.+24     	; 0x8556 <vfprintf+0x352>
    853e:	b6 01       	movw	r22, r12
    8540:	80 e2       	ldi	r24, 0x20	; 32
    8542:	90 e0       	ldi	r25, 0x00	; 0
    8544:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    8548:	b3 94       	inc	r11
    854a:	f7 cf       	rjmp	.-18     	; 0x853a <vfprintf+0x336>
    854c:	b2 14       	cp	r11, r2
    854e:	18 f4       	brcc	.+6      	; 0x8556 <vfprintf+0x352>
    8550:	2b 18       	sub	r2, r11
    8552:	02 c0       	rjmp	.+4      	; 0x8558 <vfprintf+0x354>
    8554:	98 2c       	mov	r9, r8
    8556:	21 2c       	mov	r2, r1
    8558:	a4 fe       	sbrs	r10, 4
    855a:	10 c0       	rjmp	.+32     	; 0x857c <vfprintf+0x378>
    855c:	b6 01       	movw	r22, r12
    855e:	80 e3       	ldi	r24, 0x30	; 48
    8560:	90 e0       	ldi	r25, 0x00	; 0
    8562:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    8566:	a2 fe       	sbrs	r10, 2
    8568:	17 c0       	rjmp	.+46     	; 0x8598 <vfprintf+0x394>
    856a:	a1 fc       	sbrc	r10, 1
    856c:	03 c0       	rjmp	.+6      	; 0x8574 <vfprintf+0x370>
    856e:	88 e7       	ldi	r24, 0x78	; 120
    8570:	90 e0       	ldi	r25, 0x00	; 0
    8572:	02 c0       	rjmp	.+4      	; 0x8578 <vfprintf+0x374>
    8574:	88 e5       	ldi	r24, 0x58	; 88
    8576:	90 e0       	ldi	r25, 0x00	; 0
    8578:	b6 01       	movw	r22, r12
    857a:	0c c0       	rjmp	.+24     	; 0x8594 <vfprintf+0x390>
    857c:	8a 2d       	mov	r24, r10
    857e:	86 78       	andi	r24, 0x86	; 134
    8580:	59 f0       	breq	.+22     	; 0x8598 <vfprintf+0x394>
    8582:	a1 fe       	sbrs	r10, 1
    8584:	02 c0       	rjmp	.+4      	; 0x858a <vfprintf+0x386>
    8586:	8b e2       	ldi	r24, 0x2B	; 43
    8588:	01 c0       	rjmp	.+2      	; 0x858c <vfprintf+0x388>
    858a:	80 e2       	ldi	r24, 0x20	; 32
    858c:	a7 fc       	sbrc	r10, 7
    858e:	8d e2       	ldi	r24, 0x2D	; 45
    8590:	b6 01       	movw	r22, r12
    8592:	90 e0       	ldi	r25, 0x00	; 0
    8594:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    8598:	89 14       	cp	r8, r9
    859a:	38 f4       	brcc	.+14     	; 0x85aa <vfprintf+0x3a6>
    859c:	b6 01       	movw	r22, r12
    859e:	80 e3       	ldi	r24, 0x30	; 48
    85a0:	90 e0       	ldi	r25, 0x00	; 0
    85a2:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    85a6:	9a 94       	dec	r9
    85a8:	f7 cf       	rjmp	.-18     	; 0x8598 <vfprintf+0x394>
    85aa:	8a 94       	dec	r8
    85ac:	f3 01       	movw	r30, r6
    85ae:	e8 0d       	add	r30, r8
    85b0:	f1 1d       	adc	r31, r1
    85b2:	80 81       	ld	r24, Z
    85b4:	b6 01       	movw	r22, r12
    85b6:	90 e0       	ldi	r25, 0x00	; 0
    85b8:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    85bc:	81 10       	cpse	r8, r1
    85be:	f5 cf       	rjmp	.-22     	; 0x85aa <vfprintf+0x3a6>
    85c0:	22 20       	and	r2, r2
    85c2:	09 f4       	brne	.+2      	; 0x85c6 <vfprintf+0x3c2>
    85c4:	42 ce       	rjmp	.-892    	; 0x824a <vfprintf+0x46>
    85c6:	b6 01       	movw	r22, r12
    85c8:	80 e2       	ldi	r24, 0x20	; 32
    85ca:	90 e0       	ldi	r25, 0x00	; 0
    85cc:	0e 94 a9 44 	call	0x8952	; 0x8952 <fputc>
    85d0:	2a 94       	dec	r2
    85d2:	f6 cf       	rjmp	.-20     	; 0x85c0 <vfprintf+0x3bc>
    85d4:	f6 01       	movw	r30, r12
    85d6:	86 81       	ldd	r24, Z+6	; 0x06
    85d8:	97 81       	ldd	r25, Z+7	; 0x07
    85da:	02 c0       	rjmp	.+4      	; 0x85e0 <vfprintf+0x3dc>
    85dc:	8f ef       	ldi	r24, 0xFF	; 255
    85de:	9f ef       	ldi	r25, 0xFF	; 255
    85e0:	2b 96       	adiw	r28, 0x0b	; 11
    85e2:	cd bf       	out	0x3d, r28	; 61
    85e4:	de bf       	out	0x3e, r29	; 62
    85e6:	df 91       	pop	r29
    85e8:	cf 91       	pop	r28
    85ea:	1f 91       	pop	r17
    85ec:	0f 91       	pop	r16
    85ee:	ff 90       	pop	r15
    85f0:	ef 90       	pop	r14
    85f2:	df 90       	pop	r13
    85f4:	cf 90       	pop	r12
    85f6:	bf 90       	pop	r11
    85f8:	af 90       	pop	r10
    85fa:	9f 90       	pop	r9
    85fc:	8f 90       	pop	r8
    85fe:	7f 90       	pop	r7
    8600:	6f 90       	pop	r6
    8602:	5f 90       	pop	r5
    8604:	4f 90       	pop	r4
    8606:	3f 90       	pop	r3
    8608:	2f 90       	pop	r2
    860a:	08 95       	ret

0000860c <strtod>:
    860c:	8f 92       	push	r8
    860e:	9f 92       	push	r9
    8610:	af 92       	push	r10
    8612:	bf 92       	push	r11
    8614:	cf 92       	push	r12
    8616:	df 92       	push	r13
    8618:	ef 92       	push	r14
    861a:	ff 92       	push	r15
    861c:	0f 93       	push	r16
    861e:	1f 93       	push	r17
    8620:	cf 93       	push	r28
    8622:	df 93       	push	r29
    8624:	ec 01       	movw	r28, r24
    8626:	6b 01       	movw	r12, r22
    8628:	61 15       	cp	r22, r1
    862a:	71 05       	cpc	r23, r1
    862c:	19 f0       	breq	.+6      	; 0x8634 <strtod+0x28>
    862e:	fb 01       	movw	r30, r22
    8630:	80 83       	st	Z, r24
    8632:	91 83       	std	Z+1, r25	; 0x01
    8634:	7e 01       	movw	r14, r28
    8636:	ff ef       	ldi	r31, 0xFF	; 255
    8638:	ef 1a       	sub	r14, r31
    863a:	ff 0a       	sbc	r15, r31
    863c:	08 81       	ld	r16, Y
    863e:	80 2f       	mov	r24, r16
    8640:	90 e0       	ldi	r25, 0x00	; 0
    8642:	0e 94 62 44 	call	0x88c4	; 0x88c4 <isspace>
    8646:	89 2b       	or	r24, r25
    8648:	11 f0       	breq	.+4      	; 0x864e <strtod+0x42>
    864a:	e7 01       	movw	r28, r14
    864c:	f3 cf       	rjmp	.-26     	; 0x8634 <strtod+0x28>
    864e:	0d 32       	cpi	r16, 0x2D	; 45
    8650:	39 f4       	brne	.+14     	; 0x8660 <strtod+0x54>
    8652:	7e 01       	movw	r14, r28
    8654:	82 e0       	ldi	r24, 0x02	; 2
    8656:	e8 0e       	add	r14, r24
    8658:	f1 1c       	adc	r15, r1
    865a:	09 81       	ldd	r16, Y+1	; 0x01
    865c:	11 e0       	ldi	r17, 0x01	; 1
    865e:	08 c0       	rjmp	.+16     	; 0x8670 <strtod+0x64>
    8660:	0b 32       	cpi	r16, 0x2B	; 43
    8662:	29 f4       	brne	.+10     	; 0x866e <strtod+0x62>
    8664:	7e 01       	movw	r14, r28
    8666:	92 e0       	ldi	r25, 0x02	; 2
    8668:	e9 0e       	add	r14, r25
    866a:	f1 1c       	adc	r15, r1
    866c:	09 81       	ldd	r16, Y+1	; 0x01
    866e:	10 e0       	ldi	r17, 0x00	; 0
    8670:	e7 01       	movw	r28, r14
    8672:	21 97       	sbiw	r28, 0x01	; 1
    8674:	43 e0       	ldi	r20, 0x03	; 3
    8676:	50 e0       	ldi	r21, 0x00	; 0
    8678:	6c ef       	ldi	r22, 0xFC	; 252
    867a:	71 e0       	ldi	r23, 0x01	; 1
    867c:	ce 01       	movw	r24, r28
    867e:	0e 94 6b 44 	call	0x88d6	; 0x88d6 <strncasecmp_P>
    8682:	89 2b       	or	r24, r25
    8684:	c1 f4       	brne	.+48     	; 0x86b6 <strtod+0xaa>
    8686:	23 96       	adiw	r28, 0x03	; 3
    8688:	45 e0       	ldi	r20, 0x05	; 5
    868a:	50 e0       	ldi	r21, 0x00	; 0
    868c:	67 ef       	ldi	r22, 0xF7	; 247
    868e:	71 e0       	ldi	r23, 0x01	; 1
    8690:	ce 01       	movw	r24, r28
    8692:	0e 94 6b 44 	call	0x88d6	; 0x88d6 <strncasecmp_P>
    8696:	89 2b       	or	r24, r25
    8698:	09 f4       	brne	.+2      	; 0x869c <strtod+0x90>
    869a:	25 96       	adiw	r28, 0x05	; 5
    869c:	c1 14       	cp	r12, r1
    869e:	d1 04       	cpc	r13, r1
    86a0:	19 f0       	breq	.+6      	; 0x86a8 <strtod+0x9c>
    86a2:	f6 01       	movw	r30, r12
    86a4:	c0 83       	st	Z, r28
    86a6:	d1 83       	std	Z+1, r29	; 0x01
    86a8:	11 11       	cpse	r17, r1
    86aa:	f6 c0       	rjmp	.+492    	; 0x8898 <strtod+0x28c>
    86ac:	60 e0       	ldi	r22, 0x00	; 0
    86ae:	70 e0       	ldi	r23, 0x00	; 0
    86b0:	80 e8       	ldi	r24, 0x80	; 128
    86b2:	9f e7       	ldi	r25, 0x7F	; 127
    86b4:	fa c0       	rjmp	.+500    	; 0x88aa <strtod+0x29e>
    86b6:	43 e0       	ldi	r20, 0x03	; 3
    86b8:	50 e0       	ldi	r21, 0x00	; 0
    86ba:	64 ef       	ldi	r22, 0xF4	; 244
    86bc:	71 e0       	ldi	r23, 0x01	; 1
    86be:	ce 01       	movw	r24, r28
    86c0:	0e 94 6b 44 	call	0x88d6	; 0x88d6 <strncasecmp_P>
    86c4:	89 2b       	or	r24, r25
    86c6:	59 f4       	brne	.+22     	; 0x86de <strtod+0xd2>
    86c8:	c1 14       	cp	r12, r1
    86ca:	d1 04       	cpc	r13, r1
    86cc:	09 f4       	brne	.+2      	; 0x86d0 <strtod+0xc4>
    86ce:	e9 c0       	rjmp	.+466    	; 0x88a2 <strtod+0x296>
    86d0:	f2 e0       	ldi	r31, 0x02	; 2
    86d2:	ef 0e       	add	r14, r31
    86d4:	f1 1c       	adc	r15, r1
    86d6:	f6 01       	movw	r30, r12
    86d8:	e0 82       	st	Z, r14
    86da:	f1 82       	std	Z+1, r15	; 0x01
    86dc:	e2 c0       	rjmp	.+452    	; 0x88a2 <strtod+0x296>
    86de:	20 e0       	ldi	r18, 0x00	; 0
    86e0:	30 e0       	ldi	r19, 0x00	; 0
    86e2:	a9 01       	movw	r20, r18
    86e4:	c0 e0       	ldi	r28, 0x00	; 0
    86e6:	d0 e0       	ldi	r29, 0x00	; 0
    86e8:	f7 01       	movw	r30, r14
    86ea:	60 ed       	ldi	r22, 0xD0	; 208
    86ec:	a6 2e       	mov	r10, r22
    86ee:	a0 0e       	add	r10, r16
    86f0:	89 e0       	ldi	r24, 0x09	; 9
    86f2:	8a 15       	cp	r24, r10
    86f4:	30 f1       	brcs	.+76     	; 0x8742 <strtod+0x136>
    86f6:	91 2f       	mov	r25, r17
    86f8:	92 60       	ori	r25, 0x02	; 2
    86fa:	b9 2e       	mov	r11, r25
    86fc:	81 2f       	mov	r24, r17
    86fe:	88 70       	andi	r24, 0x08	; 8
    8700:	12 ff       	sbrs	r17, 2
    8702:	04 c0       	rjmp	.+8      	; 0x870c <strtod+0x100>
    8704:	81 11       	cpse	r24, r1
    8706:	24 c0       	rjmp	.+72     	; 0x8750 <strtod+0x144>
    8708:	21 96       	adiw	r28, 0x01	; 1
    870a:	22 c0       	rjmp	.+68     	; 0x8750 <strtod+0x144>
    870c:	81 11       	cpse	r24, r1
    870e:	21 97       	sbiw	r28, 0x01	; 1
    8710:	a5 e0       	ldi	r26, 0x05	; 5
    8712:	b0 e0       	ldi	r27, 0x00	; 0
    8714:	0e 94 f1 3f 	call	0x7fe2	; 0x7fe2 <__muluhisi3>
    8718:	dc 01       	movw	r26, r24
    871a:	cb 01       	movw	r24, r22
    871c:	88 0f       	add	r24, r24
    871e:	99 1f       	adc	r25, r25
    8720:	aa 1f       	adc	r26, r26
    8722:	bb 1f       	adc	r27, r27
    8724:	9c 01       	movw	r18, r24
    8726:	ad 01       	movw	r20, r26
    8728:	2a 0d       	add	r18, r10
    872a:	31 1d       	adc	r19, r1
    872c:	41 1d       	adc	r20, r1
    872e:	51 1d       	adc	r21, r1
    8730:	28 39       	cpi	r18, 0x98	; 152
    8732:	89 e9       	ldi	r24, 0x99	; 153
    8734:	38 07       	cpc	r19, r24
    8736:	48 07       	cpc	r20, r24
    8738:	89 e1       	ldi	r24, 0x19	; 25
    873a:	58 07       	cpc	r21, r24
    873c:	48 f0       	brcs	.+18     	; 0x8750 <strtod+0x144>
    873e:	16 60       	ori	r17, 0x06	; 6
    8740:	06 c0       	rjmp	.+12     	; 0x874e <strtod+0x142>
    8742:	9e ef       	ldi	r25, 0xFE	; 254
    8744:	a9 12       	cpse	r10, r25
    8746:	0a c0       	rjmp	.+20     	; 0x875c <strtod+0x150>
    8748:	13 fd       	sbrc	r17, 3
    874a:	40 c0       	rjmp	.+128    	; 0x87cc <strtod+0x1c0>
    874c:	18 60       	ori	r17, 0x08	; 8
    874e:	b1 2e       	mov	r11, r17
    8750:	8f ef       	ldi	r24, 0xFF	; 255
    8752:	e8 1a       	sub	r14, r24
    8754:	f8 0a       	sbc	r15, r24
    8756:	00 81       	ld	r16, Z
    8758:	1b 2d       	mov	r17, r11
    875a:	c6 cf       	rjmp	.-116    	; 0x86e8 <strtod+0xdc>
    875c:	80 2f       	mov	r24, r16
    875e:	8f 7d       	andi	r24, 0xDF	; 223
    8760:	85 34       	cpi	r24, 0x45	; 69
    8762:	a1 f5       	brne	.+104    	; 0x87cc <strtod+0x1c0>
    8764:	80 81       	ld	r24, Z
    8766:	8d 32       	cpi	r24, 0x2D	; 45
    8768:	11 f4       	brne	.+4      	; 0x876e <strtod+0x162>
    876a:	10 61       	ori	r17, 0x10	; 16
    876c:	06 c0       	rjmp	.+12     	; 0x877a <strtod+0x16e>
    876e:	8b 32       	cpi	r24, 0x2B	; 43
    8770:	21 f0       	breq	.+8      	; 0x877a <strtod+0x16e>
    8772:	31 96       	adiw	r30, 0x01	; 1
    8774:	61 e0       	ldi	r22, 0x01	; 1
    8776:	70 e0       	ldi	r23, 0x00	; 0
    8778:	04 c0       	rjmp	.+8      	; 0x8782 <strtod+0x176>
    877a:	81 81       	ldd	r24, Z+1	; 0x01
    877c:	32 96       	adiw	r30, 0x02	; 2
    877e:	62 e0       	ldi	r22, 0x02	; 2
    8780:	70 e0       	ldi	r23, 0x00	; 0
    8782:	80 53       	subi	r24, 0x30	; 48
    8784:	8a 30       	cpi	r24, 0x0A	; 10
    8786:	18 f0       	brcs	.+6      	; 0x878e <strtod+0x182>
    8788:	e6 1b       	sub	r30, r22
    878a:	f7 0b       	sbc	r31, r23
    878c:	1f c0       	rjmp	.+62     	; 0x87cc <strtod+0x1c0>
    878e:	60 e0       	ldi	r22, 0x00	; 0
    8790:	70 e0       	ldi	r23, 0x00	; 0
    8792:	60 38       	cpi	r22, 0x80	; 128
    8794:	9c e0       	ldi	r25, 0x0C	; 12
    8796:	79 07       	cpc	r23, r25
    8798:	5c f4       	brge	.+22     	; 0x87b0 <strtod+0x1a4>
    879a:	db 01       	movw	r26, r22
    879c:	aa 0f       	add	r26, r26
    879e:	bb 1f       	adc	r27, r27
    87a0:	aa 0f       	add	r26, r26
    87a2:	bb 1f       	adc	r27, r27
    87a4:	6a 0f       	add	r22, r26
    87a6:	7b 1f       	adc	r23, r27
    87a8:	66 0f       	add	r22, r22
    87aa:	77 1f       	adc	r23, r23
    87ac:	68 0f       	add	r22, r24
    87ae:	71 1d       	adc	r23, r1
    87b0:	31 96       	adiw	r30, 0x01	; 1
    87b2:	df 01       	movw	r26, r30
    87b4:	11 97       	sbiw	r26, 0x01	; 1
    87b6:	8c 91       	ld	r24, X
    87b8:	80 53       	subi	r24, 0x30	; 48
    87ba:	8a 30       	cpi	r24, 0x0A	; 10
    87bc:	50 f3       	brcs	.-44     	; 0x8792 <strtod+0x186>
    87be:	14 ff       	sbrs	r17, 4
    87c0:	03 c0       	rjmp	.+6      	; 0x87c8 <strtod+0x1bc>
    87c2:	71 95       	neg	r23
    87c4:	61 95       	neg	r22
    87c6:	71 09       	sbc	r23, r1
    87c8:	c6 0f       	add	r28, r22
    87ca:	d7 1f       	adc	r29, r23
    87cc:	11 ff       	sbrs	r17, 1
    87ce:	08 c0       	rjmp	.+16     	; 0x87e0 <strtod+0x1d4>
    87d0:	c1 14       	cp	r12, r1
    87d2:	d1 04       	cpc	r13, r1
    87d4:	29 f0       	breq	.+10     	; 0x87e0 <strtod+0x1d4>
    87d6:	cf 01       	movw	r24, r30
    87d8:	01 97       	sbiw	r24, 0x01	; 1
    87da:	f6 01       	movw	r30, r12
    87dc:	80 83       	st	Z, r24
    87de:	91 83       	std	Z+1, r25	; 0x01
    87e0:	ca 01       	movw	r24, r20
    87e2:	b9 01       	movw	r22, r18
    87e4:	0e 94 a5 3e 	call	0x7d4a	; 0x7d4a <__floatunsisf>
    87e8:	21 2f       	mov	r18, r17
    87ea:	23 70       	andi	r18, 0x03	; 3
    87ec:	23 30       	cpi	r18, 0x03	; 3
    87ee:	19 f0       	breq	.+6      	; 0x87f6 <strtod+0x1ea>
    87f0:	4b 01       	movw	r8, r22
    87f2:	5c 01       	movw	r10, r24
    87f4:	06 c0       	rjmp	.+12     	; 0x8802 <strtod+0x1f6>
    87f6:	4b 01       	movw	r8, r22
    87f8:	5c 01       	movw	r10, r24
    87fa:	b7 fa       	bst	r11, 7
    87fc:	b0 94       	com	r11
    87fe:	b7 f8       	bld	r11, 7
    8800:	b0 94       	com	r11
    8802:	20 e0       	ldi	r18, 0x00	; 0
    8804:	30 e0       	ldi	r19, 0x00	; 0
    8806:	a9 01       	movw	r20, r18
    8808:	c5 01       	movw	r24, r10
    880a:	b4 01       	movw	r22, r8
    880c:	0e 94 43 45 	call	0x8a86	; 0x8a86 <__cmpsf2>
    8810:	88 23       	and	r24, r24
    8812:	09 f4       	brne	.+2      	; 0x8816 <strtod+0x20a>
    8814:	3e c0       	rjmp	.+124    	; 0x8892 <strtod+0x286>
    8816:	d7 ff       	sbrs	r29, 7
    8818:	06 c0       	rjmp	.+12     	; 0x8826 <strtod+0x21a>
    881a:	d1 95       	neg	r29
    881c:	c1 95       	neg	r28
    881e:	d1 09       	sbc	r29, r1
    8820:	03 e1       	ldi	r16, 0x13	; 19
    8822:	12 e0       	ldi	r17, 0x02	; 2
    8824:	02 c0       	rjmp	.+4      	; 0x882a <strtod+0x21e>
    8826:	0b e2       	ldi	r16, 0x2B	; 43
    8828:	12 e0       	ldi	r17, 0x02	; 2
    882a:	68 01       	movw	r12, r16
    882c:	f8 e1       	ldi	r31, 0x18	; 24
    882e:	cf 1a       	sub	r12, r31
    8830:	d1 08       	sbc	r13, r1
    8832:	90 e2       	ldi	r25, 0x20	; 32
    8834:	e9 2e       	mov	r14, r25
    8836:	f1 2c       	mov	r15, r1
    8838:	ce 15       	cp	r28, r14
    883a:	df 05       	cpc	r29, r15
    883c:	74 f0       	brlt	.+28     	; 0x885a <strtod+0x24e>
    883e:	f8 01       	movw	r30, r16
    8840:	25 91       	lpm	r18, Z+
    8842:	35 91       	lpm	r19, Z+
    8844:	45 91       	lpm	r20, Z+
    8846:	54 91       	lpm	r21, Z
    8848:	c5 01       	movw	r24, r10
    884a:	b4 01       	movw	r22, r8
    884c:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <__mulsf3>
    8850:	4b 01       	movw	r8, r22
    8852:	5c 01       	movw	r10, r24
    8854:	ce 19       	sub	r28, r14
    8856:	df 09       	sbc	r29, r15
    8858:	ef cf       	rjmp	.-34     	; 0x8838 <strtod+0x22c>
    885a:	04 50       	subi	r16, 0x04	; 4
    885c:	11 09       	sbc	r17, r1
    885e:	f5 94       	asr	r15
    8860:	e7 94       	ror	r14
    8862:	0c 15       	cp	r16, r12
    8864:	1d 05       	cpc	r17, r13
    8866:	41 f7       	brne	.-48     	; 0x8838 <strtod+0x22c>
    8868:	8a 2d       	mov	r24, r10
    886a:	88 0f       	add	r24, r24
    886c:	8b 2d       	mov	r24, r11
    886e:	88 1f       	adc	r24, r24
    8870:	8f 3f       	cpi	r24, 0xFF	; 255
    8872:	49 f0       	breq	.+18     	; 0x8886 <strtod+0x27a>
    8874:	20 e0       	ldi	r18, 0x00	; 0
    8876:	30 e0       	ldi	r19, 0x00	; 0
    8878:	a9 01       	movw	r20, r18
    887a:	c5 01       	movw	r24, r10
    887c:	b4 01       	movw	r22, r8
    887e:	0e 94 43 45 	call	0x8a86	; 0x8a86 <__cmpsf2>
    8882:	81 11       	cpse	r24, r1
    8884:	06 c0       	rjmp	.+12     	; 0x8892 <strtod+0x286>
    8886:	82 e2       	ldi	r24, 0x22	; 34
    8888:	90 e0       	ldi	r25, 0x00	; 0
    888a:	80 93 c1 29 	sts	0x29C1, r24	; 0x8029c1 <errno>
    888e:	90 93 c2 29 	sts	0x29C2, r25	; 0x8029c2 <errno+0x1>
    8892:	c5 01       	movw	r24, r10
    8894:	b4 01       	movw	r22, r8
    8896:	09 c0       	rjmp	.+18     	; 0x88aa <strtod+0x29e>
    8898:	60 e0       	ldi	r22, 0x00	; 0
    889a:	70 e0       	ldi	r23, 0x00	; 0
    889c:	80 e8       	ldi	r24, 0x80	; 128
    889e:	9f ef       	ldi	r25, 0xFF	; 255
    88a0:	04 c0       	rjmp	.+8      	; 0x88aa <strtod+0x29e>
    88a2:	60 e0       	ldi	r22, 0x00	; 0
    88a4:	70 e0       	ldi	r23, 0x00	; 0
    88a6:	80 ec       	ldi	r24, 0xC0	; 192
    88a8:	9f e7       	ldi	r25, 0x7F	; 127
    88aa:	df 91       	pop	r29
    88ac:	cf 91       	pop	r28
    88ae:	1f 91       	pop	r17
    88b0:	0f 91       	pop	r16
    88b2:	ff 90       	pop	r15
    88b4:	ef 90       	pop	r14
    88b6:	df 90       	pop	r13
    88b8:	cf 90       	pop	r12
    88ba:	bf 90       	pop	r11
    88bc:	af 90       	pop	r10
    88be:	9f 90       	pop	r9
    88c0:	8f 90       	pop	r8
    88c2:	08 95       	ret

000088c4 <isspace>:
    88c4:	91 11       	cpse	r25, r1
    88c6:	0c 94 6c 45 	jmp	0x8ad8	; 0x8ad8 <__ctype_isfalse>
    88ca:	80 32       	cpi	r24, 0x20	; 32
    88cc:	19 f0       	breq	.+6      	; 0x88d4 <isspace+0x10>
    88ce:	89 50       	subi	r24, 0x09	; 9
    88d0:	85 50       	subi	r24, 0x05	; 5
    88d2:	c8 f7       	brcc	.-14     	; 0x88c6 <isspace+0x2>
    88d4:	08 95       	ret

000088d6 <strncasecmp_P>:
    88d6:	fb 01       	movw	r30, r22
    88d8:	dc 01       	movw	r26, r24
    88da:	41 50       	subi	r20, 0x01	; 1
    88dc:	50 40       	sbci	r21, 0x00	; 0
    88de:	88 f0       	brcs	.+34     	; 0x8902 <strncasecmp_P+0x2c>
    88e0:	8d 91       	ld	r24, X+
    88e2:	81 34       	cpi	r24, 0x41	; 65
    88e4:	1c f0       	brlt	.+6      	; 0x88ec <strncasecmp_P+0x16>
    88e6:	8b 35       	cpi	r24, 0x5B	; 91
    88e8:	0c f4       	brge	.+2      	; 0x88ec <strncasecmp_P+0x16>
    88ea:	80 5e       	subi	r24, 0xE0	; 224
    88ec:	65 91       	lpm	r22, Z+
    88ee:	61 34       	cpi	r22, 0x41	; 65
    88f0:	1c f0       	brlt	.+6      	; 0x88f8 <strncasecmp_P+0x22>
    88f2:	6b 35       	cpi	r22, 0x5B	; 91
    88f4:	0c f4       	brge	.+2      	; 0x88f8 <strncasecmp_P+0x22>
    88f6:	60 5e       	subi	r22, 0xE0	; 224
    88f8:	86 1b       	sub	r24, r22
    88fa:	61 11       	cpse	r22, r1
    88fc:	71 f3       	breq	.-36     	; 0x88da <strncasecmp_P+0x4>
    88fe:	99 0b       	sbc	r25, r25
    8900:	08 95       	ret
    8902:	88 1b       	sub	r24, r24
    8904:	fc cf       	rjmp	.-8      	; 0x88fe <strncasecmp_P+0x28>

00008906 <strnlen_P>:
    8906:	fc 01       	movw	r30, r24
    8908:	05 90       	lpm	r0, Z+
    890a:	61 50       	subi	r22, 0x01	; 1
    890c:	70 40       	sbci	r23, 0x00	; 0
    890e:	01 10       	cpse	r0, r1
    8910:	d8 f7       	brcc	.-10     	; 0x8908 <strnlen_P+0x2>
    8912:	80 95       	com	r24
    8914:	90 95       	com	r25
    8916:	8e 0f       	add	r24, r30
    8918:	9f 1f       	adc	r25, r31
    891a:	08 95       	ret

0000891c <strnlen>:
    891c:	fc 01       	movw	r30, r24
    891e:	61 50       	subi	r22, 0x01	; 1
    8920:	70 40       	sbci	r23, 0x00	; 0
    8922:	01 90       	ld	r0, Z+
    8924:	01 10       	cpse	r0, r1
    8926:	d8 f7       	brcc	.-10     	; 0x891e <strnlen+0x2>
    8928:	80 95       	com	r24
    892a:	90 95       	com	r25
    892c:	8e 0f       	add	r24, r30
    892e:	9f 1f       	adc	r25, r31
    8930:	08 95       	ret

00008932 <strrev>:
    8932:	dc 01       	movw	r26, r24
    8934:	fc 01       	movw	r30, r24
    8936:	67 2f       	mov	r22, r23
    8938:	71 91       	ld	r23, Z+
    893a:	77 23       	and	r23, r23
    893c:	e1 f7       	brne	.-8      	; 0x8936 <strrev+0x4>
    893e:	32 97       	sbiw	r30, 0x02	; 2
    8940:	04 c0       	rjmp	.+8      	; 0x894a <strrev+0x18>
    8942:	7c 91       	ld	r23, X
    8944:	6d 93       	st	X+, r22
    8946:	70 83       	st	Z, r23
    8948:	62 91       	ld	r22, -Z
    894a:	ae 17       	cp	r26, r30
    894c:	bf 07       	cpc	r27, r31
    894e:	c8 f3       	brcs	.-14     	; 0x8942 <strrev+0x10>
    8950:	08 95       	ret

00008952 <fputc>:
    8952:	0f 93       	push	r16
    8954:	1f 93       	push	r17
    8956:	cf 93       	push	r28
    8958:	df 93       	push	r29
    895a:	fb 01       	movw	r30, r22
    895c:	23 81       	ldd	r18, Z+3	; 0x03
    895e:	21 fd       	sbrc	r18, 1
    8960:	03 c0       	rjmp	.+6      	; 0x8968 <fputc+0x16>
    8962:	8f ef       	ldi	r24, 0xFF	; 255
    8964:	9f ef       	ldi	r25, 0xFF	; 255
    8966:	2c c0       	rjmp	.+88     	; 0x89c0 <fputc+0x6e>
    8968:	22 ff       	sbrs	r18, 2
    896a:	16 c0       	rjmp	.+44     	; 0x8998 <fputc+0x46>
    896c:	46 81       	ldd	r20, Z+6	; 0x06
    896e:	57 81       	ldd	r21, Z+7	; 0x07
    8970:	24 81       	ldd	r18, Z+4	; 0x04
    8972:	35 81       	ldd	r19, Z+5	; 0x05
    8974:	42 17       	cp	r20, r18
    8976:	53 07       	cpc	r21, r19
    8978:	44 f4       	brge	.+16     	; 0x898a <fputc+0x38>
    897a:	a0 81       	ld	r26, Z
    897c:	b1 81       	ldd	r27, Z+1	; 0x01
    897e:	9d 01       	movw	r18, r26
    8980:	2f 5f       	subi	r18, 0xFF	; 255
    8982:	3f 4f       	sbci	r19, 0xFF	; 255
    8984:	20 83       	st	Z, r18
    8986:	31 83       	std	Z+1, r19	; 0x01
    8988:	8c 93       	st	X, r24
    898a:	26 81       	ldd	r18, Z+6	; 0x06
    898c:	37 81       	ldd	r19, Z+7	; 0x07
    898e:	2f 5f       	subi	r18, 0xFF	; 255
    8990:	3f 4f       	sbci	r19, 0xFF	; 255
    8992:	26 83       	std	Z+6, r18	; 0x06
    8994:	37 83       	std	Z+7, r19	; 0x07
    8996:	14 c0       	rjmp	.+40     	; 0x89c0 <fputc+0x6e>
    8998:	8b 01       	movw	r16, r22
    899a:	ec 01       	movw	r28, r24
    899c:	fb 01       	movw	r30, r22
    899e:	00 84       	ldd	r0, Z+8	; 0x08
    89a0:	f1 85       	ldd	r31, Z+9	; 0x09
    89a2:	e0 2d       	mov	r30, r0
    89a4:	19 95       	eicall
    89a6:	89 2b       	or	r24, r25
    89a8:	e1 f6       	brne	.-72     	; 0x8962 <fputc+0x10>
    89aa:	d8 01       	movw	r26, r16
    89ac:	16 96       	adiw	r26, 0x06	; 6
    89ae:	8d 91       	ld	r24, X+
    89b0:	9c 91       	ld	r25, X
    89b2:	17 97       	sbiw	r26, 0x07	; 7
    89b4:	01 96       	adiw	r24, 0x01	; 1
    89b6:	16 96       	adiw	r26, 0x06	; 6
    89b8:	8d 93       	st	X+, r24
    89ba:	9c 93       	st	X, r25
    89bc:	17 97       	sbiw	r26, 0x07	; 7
    89be:	ce 01       	movw	r24, r28
    89c0:	df 91       	pop	r29
    89c2:	cf 91       	pop	r28
    89c4:	1f 91       	pop	r17
    89c6:	0f 91       	pop	r16
    89c8:	08 95       	ret

000089ca <__ultoa_invert>:
    89ca:	fa 01       	movw	r30, r20
    89cc:	aa 27       	eor	r26, r26
    89ce:	28 30       	cpi	r18, 0x08	; 8
    89d0:	51 f1       	breq	.+84     	; 0x8a26 <__ultoa_invert+0x5c>
    89d2:	20 31       	cpi	r18, 0x10	; 16
    89d4:	81 f1       	breq	.+96     	; 0x8a36 <__ultoa_invert+0x6c>
    89d6:	e8 94       	clt
    89d8:	6f 93       	push	r22
    89da:	6e 7f       	andi	r22, 0xFE	; 254
    89dc:	6e 5f       	subi	r22, 0xFE	; 254
    89de:	7f 4f       	sbci	r23, 0xFF	; 255
    89e0:	8f 4f       	sbci	r24, 0xFF	; 255
    89e2:	9f 4f       	sbci	r25, 0xFF	; 255
    89e4:	af 4f       	sbci	r26, 0xFF	; 255
    89e6:	b1 e0       	ldi	r27, 0x01	; 1
    89e8:	3e d0       	rcall	.+124    	; 0x8a66 <__ultoa_invert+0x9c>
    89ea:	b4 e0       	ldi	r27, 0x04	; 4
    89ec:	3c d0       	rcall	.+120    	; 0x8a66 <__ultoa_invert+0x9c>
    89ee:	67 0f       	add	r22, r23
    89f0:	78 1f       	adc	r23, r24
    89f2:	89 1f       	adc	r24, r25
    89f4:	9a 1f       	adc	r25, r26
    89f6:	a1 1d       	adc	r26, r1
    89f8:	68 0f       	add	r22, r24
    89fa:	79 1f       	adc	r23, r25
    89fc:	8a 1f       	adc	r24, r26
    89fe:	91 1d       	adc	r25, r1
    8a00:	a1 1d       	adc	r26, r1
    8a02:	6a 0f       	add	r22, r26
    8a04:	71 1d       	adc	r23, r1
    8a06:	81 1d       	adc	r24, r1
    8a08:	91 1d       	adc	r25, r1
    8a0a:	a1 1d       	adc	r26, r1
    8a0c:	20 d0       	rcall	.+64     	; 0x8a4e <__ultoa_invert+0x84>
    8a0e:	09 f4       	brne	.+2      	; 0x8a12 <__ultoa_invert+0x48>
    8a10:	68 94       	set
    8a12:	3f 91       	pop	r19
    8a14:	2a e0       	ldi	r18, 0x0A	; 10
    8a16:	26 9f       	mul	r18, r22
    8a18:	11 24       	eor	r1, r1
    8a1a:	30 19       	sub	r19, r0
    8a1c:	30 5d       	subi	r19, 0xD0	; 208
    8a1e:	31 93       	st	Z+, r19
    8a20:	de f6       	brtc	.-74     	; 0x89d8 <__ultoa_invert+0xe>
    8a22:	cf 01       	movw	r24, r30
    8a24:	08 95       	ret
    8a26:	46 2f       	mov	r20, r22
    8a28:	47 70       	andi	r20, 0x07	; 7
    8a2a:	40 5d       	subi	r20, 0xD0	; 208
    8a2c:	41 93       	st	Z+, r20
    8a2e:	b3 e0       	ldi	r27, 0x03	; 3
    8a30:	0f d0       	rcall	.+30     	; 0x8a50 <__ultoa_invert+0x86>
    8a32:	c9 f7       	brne	.-14     	; 0x8a26 <__ultoa_invert+0x5c>
    8a34:	f6 cf       	rjmp	.-20     	; 0x8a22 <__ultoa_invert+0x58>
    8a36:	46 2f       	mov	r20, r22
    8a38:	4f 70       	andi	r20, 0x0F	; 15
    8a3a:	40 5d       	subi	r20, 0xD0	; 208
    8a3c:	4a 33       	cpi	r20, 0x3A	; 58
    8a3e:	18 f0       	brcs	.+6      	; 0x8a46 <__ultoa_invert+0x7c>
    8a40:	49 5d       	subi	r20, 0xD9	; 217
    8a42:	31 fd       	sbrc	r19, 1
    8a44:	40 52       	subi	r20, 0x20	; 32
    8a46:	41 93       	st	Z+, r20
    8a48:	02 d0       	rcall	.+4      	; 0x8a4e <__ultoa_invert+0x84>
    8a4a:	a9 f7       	brne	.-22     	; 0x8a36 <__ultoa_invert+0x6c>
    8a4c:	ea cf       	rjmp	.-44     	; 0x8a22 <__ultoa_invert+0x58>
    8a4e:	b4 e0       	ldi	r27, 0x04	; 4
    8a50:	a6 95       	lsr	r26
    8a52:	97 95       	ror	r25
    8a54:	87 95       	ror	r24
    8a56:	77 95       	ror	r23
    8a58:	67 95       	ror	r22
    8a5a:	ba 95       	dec	r27
    8a5c:	c9 f7       	brne	.-14     	; 0x8a50 <__ultoa_invert+0x86>
    8a5e:	00 97       	sbiw	r24, 0x00	; 0
    8a60:	61 05       	cpc	r22, r1
    8a62:	71 05       	cpc	r23, r1
    8a64:	08 95       	ret
    8a66:	9b 01       	movw	r18, r22
    8a68:	ac 01       	movw	r20, r24
    8a6a:	0a 2e       	mov	r0, r26
    8a6c:	06 94       	lsr	r0
    8a6e:	57 95       	ror	r21
    8a70:	47 95       	ror	r20
    8a72:	37 95       	ror	r19
    8a74:	27 95       	ror	r18
    8a76:	ba 95       	dec	r27
    8a78:	c9 f7       	brne	.-14     	; 0x8a6c <__ultoa_invert+0xa2>
    8a7a:	62 0f       	add	r22, r18
    8a7c:	73 1f       	adc	r23, r19
    8a7e:	84 1f       	adc	r24, r20
    8a80:	95 1f       	adc	r25, r21
    8a82:	a0 1d       	adc	r26, r0
    8a84:	08 95       	ret

00008a86 <__cmpsf2>:
    8a86:	0e 94 48 45 	call	0x8a90	; 0x8a90 <__fp_cmp>
    8a8a:	08 f4       	brcc	.+2      	; 0x8a8e <__cmpsf2+0x8>
    8a8c:	81 e0       	ldi	r24, 0x01	; 1
    8a8e:	08 95       	ret

00008a90 <__fp_cmp>:
    8a90:	99 0f       	add	r25, r25
    8a92:	00 08       	sbc	r0, r0
    8a94:	55 0f       	add	r21, r21
    8a96:	aa 0b       	sbc	r26, r26
    8a98:	e0 e8       	ldi	r30, 0x80	; 128
    8a9a:	fe ef       	ldi	r31, 0xFE	; 254
    8a9c:	16 16       	cp	r1, r22
    8a9e:	17 06       	cpc	r1, r23
    8aa0:	e8 07       	cpc	r30, r24
    8aa2:	f9 07       	cpc	r31, r25
    8aa4:	c0 f0       	brcs	.+48     	; 0x8ad6 <__fp_cmp+0x46>
    8aa6:	12 16       	cp	r1, r18
    8aa8:	13 06       	cpc	r1, r19
    8aaa:	e4 07       	cpc	r30, r20
    8aac:	f5 07       	cpc	r31, r21
    8aae:	98 f0       	brcs	.+38     	; 0x8ad6 <__fp_cmp+0x46>
    8ab0:	62 1b       	sub	r22, r18
    8ab2:	73 0b       	sbc	r23, r19
    8ab4:	84 0b       	sbc	r24, r20
    8ab6:	95 0b       	sbc	r25, r21
    8ab8:	39 f4       	brne	.+14     	; 0x8ac8 <__fp_cmp+0x38>
    8aba:	0a 26       	eor	r0, r26
    8abc:	61 f0       	breq	.+24     	; 0x8ad6 <__fp_cmp+0x46>
    8abe:	23 2b       	or	r18, r19
    8ac0:	24 2b       	or	r18, r20
    8ac2:	25 2b       	or	r18, r21
    8ac4:	21 f4       	brne	.+8      	; 0x8ace <__fp_cmp+0x3e>
    8ac6:	08 95       	ret
    8ac8:	0a 26       	eor	r0, r26
    8aca:	09 f4       	brne	.+2      	; 0x8ace <__fp_cmp+0x3e>
    8acc:	a1 40       	sbci	r26, 0x01	; 1
    8ace:	a6 95       	lsr	r26
    8ad0:	8f ef       	ldi	r24, 0xFF	; 255
    8ad2:	81 1d       	adc	r24, r1
    8ad4:	81 1d       	adc	r24, r1
    8ad6:	08 95       	ret

00008ad8 <__ctype_isfalse>:
    8ad8:	99 27       	eor	r25, r25
    8ada:	88 27       	eor	r24, r24

00008adc <__ctype_istrue>:
    8adc:	08 95       	ret

00008ade <_exit>:
    8ade:	f8 94       	cli

00008ae0 <__stop_program>:
    8ae0:	ff cf       	rjmp	.-2      	; 0x8ae0 <__stop_program>
