
MCS03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000446  00802000  00006054  000060e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fe  00802446  00802446  0000652e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000652e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000658c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000065cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007c8a  00000000  00000000  00006744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003828  00000000  00000000  0000e3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002db6  00000000  00000000  00011bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  000149ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040ae  00000000  00000000  000152b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026ff  00000000  00000000  00019362  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0001ba61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__ctors_end>
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_16>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      50:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_20>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <__vector_25>
      68:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      6c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      70:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      7c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      80:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      84:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      8c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      90:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      94:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      98:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      fc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     100:	0c 94 f1 23 	jmp	0x47e2	; 0x47e2 <__vector_64>
     104:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <__vector_65>
     108:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     10c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     110:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     114:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     118:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     11c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     120:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     124:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     128:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     12c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     130:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     134:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     138:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     13c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     140:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     144:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     148:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     14c:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_83>
     150:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     154:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     158:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     15c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     160:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     164:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     168:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     16c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     170:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     174:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     178:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     17c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     180:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__vector_96>
     184:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     188:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     18c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     190:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     194:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     198:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     19c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d8:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__vector_118>
     1dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

000001f4 <__trampolines_end>:
     1f4:	4e 41       	sbci	r20, 0x1E	; 30
     1f6:	4e 49       	Address 0x000001f6 is out of bounds.
.word	0xffff	; ????

000001f7 <pstr_inity>:
     1f7:	49 4e 49 54 59                                      INITY

000001fc <pstr_inf>:
     1fc:	49 4e 46                                            INF

000001ff <pwr_m10>:
     1ff:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     20f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000217 <pwr_p10>:
     217:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     227:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000230 <__ctors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df e3       	ldi	r29, 0x3F	; 63
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60
     240:	18 be       	out	0x38, r1	; 56
     242:	19 be       	out	0x39, r1	; 57
     244:	1a be       	out	0x3a, r1	; 58
     246:	1b be       	out	0x3b, r1	; 59

00000248 <__do_copy_data>:
     248:	14 e2       	ldi	r17, 0x24	; 36
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	e4 e5       	ldi	r30, 0x54	; 84
     250:	f0 e6       	ldi	r31, 0x60	; 96
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a6 34       	cpi	r26, 0x46	; 70
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>
     262:	1b be       	out	0x3b, r1	; 59

00000264 <__do_clear_bss>:
     264:	27 e2       	ldi	r18, 0x27	; 39
     266:	a6 e4       	ldi	r26, 0x46	; 70
     268:	b4 e2       	ldi	r27, 0x24	; 36
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	a4 34       	cpi	r26, 0x44	; 68
     270:	b2 07       	cpc	r27, r18
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>
     274:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <main>
     278:	0c 94 28 30 	jmp	0x6050	; 0x6050 <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <_Z20ResetDistanceToGoEXPc>:
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
     280:	e8 e1       	ldi	r30, 0x18	; 24
     282:	f7 e2       	ldi	r31, 0x27	; 39
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	82 17       	cp	r24, r18
     28c:	93 07       	cpc	r25, r19
     28e:	21 f0       	breq	.+8      	; 0x298 <_Z20ResetDistanceToGoEXPc+0x18>
     290:	10 82       	st	Z, r1
     292:	11 82       	std	Z+1, r1	; 0x01
     294:	12 82       	std	Z+2, r1	; 0x02
     296:	13 82       	std	Z+3, r1	; 0x03
     298:	2f 5f       	subi	r18, 0xFF	; 255
     29a:	3f 4f       	sbci	r19, 0xFF	; 255
     29c:	34 96       	adiw	r30, 0x04	; 4
     29e:	23 30       	cpi	r18, 0x03	; 3
     2a0:	31 05       	cpc	r19, r1
     2a2:	99 f7       	brne	.-26     	; 0x28a <_Z20ResetDistanceToGoEXPc+0xa>
     2a4:	08 95       	ret

000002a6 <_Z15IsAnyAxisMovingv>:
     2a6:	ee ee       	ldi	r30, 0xEE	; 238
     2a8:	f6 e2       	ldi	r31, 0x26	; 38
     2aa:	90 81       	ld	r25, Z
     2ac:	81 81       	ldd	r24, Z+1	; 0x01
     2ae:	89 2b       	or	r24, r25
     2b0:	92 81       	ldd	r25, Z+2	; 0x02
     2b2:	89 2b       	or	r24, r25
     2b4:	08 95       	ret

000002b6 <_Z9AxisPulsec>:
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	41 f0       	breq	.+16     	; 0x2ca <_Z9AxisPulsec+0x14>
     2ba:	18 f0       	brcs	.+6      	; 0x2c2 <_Z9AxisPulsec+0xc>
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	49 f0       	breq	.+18     	; 0x2d2 <_Z9AxisPulsec+0x1c>
     2c0:	08 95       	ret
     2c2:	80 e2       	ldi	r24, 0x20	; 32
     2c4:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
     2c8:	08 95       	ret
     2ca:	88 e0       	ldi	r24, 0x08	; 8
     2cc:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
     2d0:	08 95       	ret
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
     2d8:	08 95       	ret

000002da <_Z10SetAxisDiric>:
     2da:	fc 01       	movw	r30, r24
     2dc:	e1 52       	subi	r30, 0x21	; 33
     2de:	f9 4d       	sbci	r31, 0xD9	; 217
     2e0:	60 83       	st	Z, r22
     2e2:	66 23       	and	r22, r22
     2e4:	19 f0       	breq	.+6      	; 0x2ec <_Z10SetAxisDiric+0x12>
     2e6:	61 30       	cpi	r22, 0x01	; 1
     2e8:	d9 f0       	breq	.+54     	; 0x320 <_Z10SetAxisDiric+0x46>
     2ea:	08 95       	ret
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	91 05       	cpc	r25, r1
     2f0:	59 f0       	breq	.+22     	; 0x308 <_Z10SetAxisDiric+0x2e>
     2f2:	82 30       	cpi	r24, 0x02	; 2
     2f4:	91 05       	cpc	r25, r1
     2f6:	71 f0       	breq	.+28     	; 0x314 <_Z10SetAxisDiric+0x3a>
     2f8:	89 2b       	or	r24, r25
     2fa:	59 f5       	brne	.+86     	; 0x352 <_Z10SetAxisDiric+0x78>
     2fc:	e0 e2       	ldi	r30, 0x20	; 32
     2fe:	f7 e0       	ldi	r31, 0x07	; 7
     300:	84 81       	ldd	r24, Z+4	; 0x04
     302:	8f 7e       	andi	r24, 0xEF	; 239
     304:	84 83       	std	Z+4, r24	; 0x04
     306:	08 95       	ret
     308:	e0 e2       	ldi	r30, 0x20	; 32
     30a:	f7 e0       	ldi	r31, 0x07	; 7
     30c:	84 81       	ldd	r24, Z+4	; 0x04
     30e:	8b 7f       	andi	r24, 0xFB	; 251
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	08 95       	ret
     314:	e0 e2       	ldi	r30, 0x20	; 32
     316:	f7 e0       	ldi	r31, 0x07	; 7
     318:	84 81       	ldd	r24, Z+4	; 0x04
     31a:	8e 7f       	andi	r24, 0xFE	; 254
     31c:	84 83       	std	Z+4, r24	; 0x04
     31e:	08 95       	ret
     320:	81 30       	cpi	r24, 0x01	; 1
     322:	91 05       	cpc	r25, r1
     324:	59 f0       	breq	.+22     	; 0x33c <_Z10SetAxisDiric+0x62>
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	91 05       	cpc	r25, r1
     32a:	71 f0       	breq	.+28     	; 0x348 <_Z10SetAxisDiric+0x6e>
     32c:	89 2b       	or	r24, r25
     32e:	89 f4       	brne	.+34     	; 0x352 <_Z10SetAxisDiric+0x78>
     330:	e0 e2       	ldi	r30, 0x20	; 32
     332:	f7 e0       	ldi	r31, 0x07	; 7
     334:	84 81       	ldd	r24, Z+4	; 0x04
     336:	80 61       	ori	r24, 0x10	; 16
     338:	84 83       	std	Z+4, r24	; 0x04
     33a:	08 95       	ret
     33c:	e0 e2       	ldi	r30, 0x20	; 32
     33e:	f7 e0       	ldi	r31, 0x07	; 7
     340:	84 81       	ldd	r24, Z+4	; 0x04
     342:	84 60       	ori	r24, 0x04	; 4
     344:	84 83       	std	Z+4, r24	; 0x04
     346:	08 95       	ret
     348:	e0 e2       	ldi	r30, 0x20	; 32
     34a:	f7 e0       	ldi	r31, 0x07	; 7
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	81 60       	ori	r24, 0x01	; 1
     350:	84 83       	std	Z+4, r24	; 0x04
     352:	08 95       	ret

00000354 <_Z10SetAxisEMGic>:
     354:	fc 01       	movw	r30, r24
     356:	e4 52       	subi	r30, 0x24	; 36
     358:	f9 4d       	sbci	r31, 0xD9	; 217
     35a:	60 83       	st	Z, r22
     35c:	66 23       	and	r22, r22
     35e:	19 f0       	breq	.+6      	; 0x366 <_Z10SetAxisEMGic+0x12>
     360:	61 30       	cpi	r22, 0x01	; 1
     362:	d9 f0       	breq	.+54     	; 0x39a <_Z10SetAxisEMGic+0x46>
     364:	08 95       	ret
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	91 05       	cpc	r25, r1
     36a:	59 f0       	breq	.+22     	; 0x382 <_Z10SetAxisEMGic+0x2e>
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	91 05       	cpc	r25, r1
     370:	71 f0       	breq	.+28     	; 0x38e <_Z10SetAxisEMGic+0x3a>
     372:	89 2b       	or	r24, r25
     374:	59 f5       	brne	.+86     	; 0x3cc <_Z10SetAxisEMGic+0x78>
     376:	e0 e0       	ldi	r30, 0x00	; 0
     378:	f6 e0       	ldi	r31, 0x06	; 6
     37a:	84 81       	ldd	r24, Z+4	; 0x04
     37c:	8f 7b       	andi	r24, 0xBF	; 191
     37e:	84 83       	std	Z+4, r24	; 0x04
     380:	08 95       	ret
     382:	e0 e2       	ldi	r30, 0x20	; 32
     384:	f6 e0       	ldi	r31, 0x06	; 6
     386:	84 81       	ldd	r24, Z+4	; 0x04
     388:	8f 7e       	andi	r24, 0xEF	; 239
     38a:	84 83       	std	Z+4, r24	; 0x04
     38c:	08 95       	ret
     38e:	e0 e4       	ldi	r30, 0x40	; 64
     390:	f6 e0       	ldi	r31, 0x06	; 6
     392:	84 81       	ldd	r24, Z+4	; 0x04
     394:	87 7f       	andi	r24, 0xF7	; 247
     396:	84 83       	std	Z+4, r24	; 0x04
     398:	08 95       	ret
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	91 05       	cpc	r25, r1
     39e:	59 f0       	breq	.+22     	; 0x3b6 <_Z10SetAxisEMGic+0x62>
     3a0:	82 30       	cpi	r24, 0x02	; 2
     3a2:	91 05       	cpc	r25, r1
     3a4:	71 f0       	breq	.+28     	; 0x3c2 <_Z10SetAxisEMGic+0x6e>
     3a6:	89 2b       	or	r24, r25
     3a8:	89 f4       	brne	.+34     	; 0x3cc <_Z10SetAxisEMGic+0x78>
     3aa:	e0 e0       	ldi	r30, 0x00	; 0
     3ac:	f6 e0       	ldi	r31, 0x06	; 6
     3ae:	84 81       	ldd	r24, Z+4	; 0x04
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	84 83       	std	Z+4, r24	; 0x04
     3b4:	08 95       	ret
     3b6:	e0 e2       	ldi	r30, 0x20	; 32
     3b8:	f6 e0       	ldi	r31, 0x06	; 6
     3ba:	84 81       	ldd	r24, Z+4	; 0x04
     3bc:	80 61       	ori	r24, 0x10	; 16
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	08 95       	ret
     3c2:	e0 e4       	ldi	r30, 0x40	; 64
     3c4:	f6 e0       	ldi	r31, 0x06	; 6
     3c6:	84 81       	ldd	r24, Z+4	; 0x04
     3c8:	88 60       	ori	r24, 0x08	; 8
     3ca:	84 83       	std	Z+4, r24	; 0x04
     3cc:	08 95       	ret

000003ce <_Z13SetAxisEnableic>:
     3ce:	fc 01       	movw	r30, r24
     3d0:	e7 52       	subi	r30, 0x27	; 39
     3d2:	f9 4d       	sbci	r31, 0xD9	; 217
     3d4:	60 83       	st	Z, r22
     3d6:	66 23       	and	r22, r22
     3d8:	19 f0       	breq	.+6      	; 0x3e0 <_Z13SetAxisEnableic+0x12>
     3da:	61 30       	cpi	r22, 0x01	; 1
     3dc:	d9 f0       	breq	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3de:	08 95       	ret
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	91 05       	cpc	r25, r1
     3e4:	59 f0       	breq	.+22     	; 0x3fc <_Z13SetAxisEnableic+0x2e>
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	91 05       	cpc	r25, r1
     3ea:	71 f0       	breq	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3ec:	89 2b       	or	r24, r25
     3ee:	59 f5       	brne	.+86     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3f0:	e0 e0       	ldi	r30, 0x00	; 0
     3f2:	f6 e0       	ldi	r31, 0x06	; 6
     3f4:	84 81       	ldd	r24, Z+4	; 0x04
     3f6:	8f 77       	andi	r24, 0x7F	; 127
     3f8:	84 83       	std	Z+4, r24	; 0x04
     3fa:	08 95       	ret
     3fc:	e0 e2       	ldi	r30, 0x20	; 32
     3fe:	f6 e0       	ldi	r31, 0x06	; 6
     400:	84 81       	ldd	r24, Z+4	; 0x04
     402:	8f 77       	andi	r24, 0x7F	; 127
     404:	84 83       	std	Z+4, r24	; 0x04
     406:	08 95       	ret
     408:	e0 e4       	ldi	r30, 0x40	; 64
     40a:	f6 e0       	ldi	r31, 0x06	; 6
     40c:	84 81       	ldd	r24, Z+4	; 0x04
     40e:	8f 77       	andi	r24, 0x7F	; 127
     410:	84 83       	std	Z+4, r24	; 0x04
     412:	08 95       	ret
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	91 05       	cpc	r25, r1
     418:	59 f0       	breq	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	91 05       	cpc	r25, r1
     41e:	71 f0       	breq	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     420:	89 2b       	or	r24, r25
     422:	89 f4       	brne	.+34     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     424:	e0 e0       	ldi	r30, 0x00	; 0
     426:	f6 e0       	ldi	r31, 0x06	; 6
     428:	84 81       	ldd	r24, Z+4	; 0x04
     42a:	80 68       	ori	r24, 0x80	; 128
     42c:	84 83       	std	Z+4, r24	; 0x04
     42e:	08 95       	ret
     430:	e0 e2       	ldi	r30, 0x20	; 32
     432:	f6 e0       	ldi	r31, 0x06	; 6
     434:	84 81       	ldd	r24, Z+4	; 0x04
     436:	80 68       	ori	r24, 0x80	; 128
     438:	84 83       	std	Z+4, r24	; 0x04
     43a:	08 95       	ret
     43c:	e0 e4       	ldi	r30, 0x40	; 64
     43e:	f6 e0       	ldi	r31, 0x06	; 6
     440:	84 81       	ldd	r24, Z+4	; 0x04
     442:	80 68       	ori	r24, 0x80	; 128
     444:	84 83       	std	Z+4, r24	; 0x04
     446:	08 95       	ret

00000448 <_Z9AxisAlarmc>:
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	51 f0       	breq	.+20     	; 0x460 <_Z9AxisAlarmc+0x18>
     44c:	18 f0       	brcs	.+6      	; 0x454 <_Z9AxisAlarmc+0xc>
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	61 f0       	breq	.+24     	; 0x46a <_Z9AxisAlarmc+0x22>
     452:	0f c0       	rjmp	.+30     	; 0x472 <_Z9AxisAlarmc+0x2a>
     454:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     458:	82 fb       	bst	r24, 2
     45a:	88 27       	eor	r24, r24
     45c:	80 f9       	bld	r24, 0
     45e:	08 95       	ret
     460:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     464:	86 95       	lsr	r24
     466:	81 70       	andi	r24, 0x01	; 1
     468:	08 95       	ret
     46a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     46e:	81 70       	andi	r24, 0x01	; 1
     470:	08 95       	ret
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	08 95       	ret

00000476 <_Z9AxisInPosc>:
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	49 f0       	breq	.+18     	; 0x48c <_Z9AxisInPosc+0x16>
     47a:	18 f0       	brcs	.+6      	; 0x482 <_Z9AxisInPosc+0xc>
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	61 f0       	breq	.+24     	; 0x498 <_Z9AxisInPosc+0x22>
     480:	10 c0       	rjmp	.+32     	; 0x4a2 <_Z9AxisInPosc+0x2c>
     482:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     486:	86 95       	lsr	r24
     488:	81 70       	andi	r24, 0x01	; 1
     48a:	08 95       	ret
     48c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     490:	82 fb       	bst	r24, 2
     492:	88 27       	eor	r24, r24
     494:	80 f9       	bld	r24, 0
     496:	08 95       	ret
     498:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     49c:	86 95       	lsr	r24
     49e:	81 70       	andi	r24, 0x01	; 1
     4a0:	08 95       	ret
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	08 95       	ret

000004a6 <_Z12AxisLimitNegc>:
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	49 f0       	breq	.+18     	; 0x4bc <_Z12AxisLimitNegc+0x16>
     4aa:	18 f0       	brcs	.+6      	; 0x4b2 <_Z12AxisLimitNegc+0xc>
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	61 f0       	breq	.+24     	; 0x4c8 <_Z12AxisLimitNegc+0x22>
     4b0:	10 c0       	rjmp	.+32     	; 0x4d2 <_Z12AxisLimitNegc+0x2c>
     4b2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     4b6:	82 95       	swap	r24
     4b8:	81 70       	andi	r24, 0x01	; 1
     4ba:	08 95       	ret
     4bc:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     4c0:	86 fb       	bst	r24, 6
     4c2:	88 27       	eor	r24, r24
     4c4:	80 f9       	bld	r24, 0
     4c6:	08 95       	ret
     4c8:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     4cc:	82 95       	swap	r24
     4ce:	81 70       	andi	r24, 0x01	; 1
     4d0:	08 95       	ret
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret

000004d6 <_Z12AxisLimitPosc>:
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	51 f0       	breq	.+20     	; 0x4ee <_Z12AxisLimitPosc+0x18>
     4da:	18 f0       	brcs	.+6      	; 0x4e2 <_Z12AxisLimitPosc+0xc>
     4dc:	82 30       	cpi	r24, 0x02	; 2
     4de:	59 f0       	breq	.+22     	; 0x4f6 <_Z12AxisLimitPosc+0x20>
     4e0:	10 c0       	rjmp	.+32     	; 0x502 <_Z12AxisLimitPosc+0x2c>
     4e2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     4e6:	83 fb       	bst	r24, 3
     4e8:	88 27       	eor	r24, r24
     4ea:	80 f9       	bld	r24, 0
     4ec:	08 95       	ret
     4ee:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     4f2:	81 70       	andi	r24, 0x01	; 1
     4f4:	08 95       	ret
     4f6:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     4fa:	85 fb       	bst	r24, 5
     4fc:	88 27       	eor	r24, r24
     4fe:	80 f9       	bld	r24, 0
     500:	08 95       	ret
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret

00000506 <_Z7AxisRefc>:
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	51 f0       	breq	.+20     	; 0x51e <_Z7AxisRefc+0x18>
     50a:	18 f0       	brcs	.+6      	; 0x512 <_Z7AxisRefc+0xc>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	69 f0       	breq	.+26     	; 0x52a <_Z7AxisRefc+0x24>
     510:	12 c0       	rjmp	.+36     	; 0x536 <_Z7AxisRefc+0x30>
     512:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     516:	85 fb       	bst	r24, 5
     518:	88 27       	eor	r24, r24
     51a:	80 f9       	bld	r24, 0
     51c:	08 95       	ret
     51e:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     522:	85 fb       	bst	r24, 5
     524:	88 27       	eor	r24, r24
     526:	80 f9       	bld	r24, 0
     528:	08 95       	ret
     52a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     52e:	86 fb       	bst	r24, 6
     530:	88 27       	eor	r24, r24
     532:	80 f9       	bld	r24, 0
     534:	08 95       	ret
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	08 95       	ret

0000053a <_Z10ports_initv>:
     53a:	e0 e0       	ldi	r30, 0x00	; 0
     53c:	f6 e0       	ldi	r31, 0x06	; 6
     53e:	14 82       	std	Z+4, r1	; 0x04
     540:	80 ec       	ldi	r24, 0xC0	; 192
     542:	80 83       	st	Z, r24
     544:	10 8a       	std	Z+16, r1	; 0x10
     546:	11 8a       	std	Z+17, r1	; 0x11
     548:	12 8a       	std	Z+18, r1	; 0x12
     54a:	13 8a       	std	Z+19, r1	; 0x13
     54c:	14 8a       	std	Z+20, r1	; 0x14
     54e:	15 8a       	std	Z+21, r1	; 0x15
     550:	16 8a       	std	Z+22, r1	; 0x16
     552:	17 8a       	std	Z+23, r1	; 0x17
     554:	81 85       	ldd	r24, Z+9	; 0x09
     556:	80 7f       	andi	r24, 0xF0	; 240
     558:	81 87       	std	Z+9, r24	; 0x09
     55a:	12 86       	std	Z+10, r1	; 0x0a
     55c:	13 86       	std	Z+11, r1	; 0x0b
     55e:	e0 e2       	ldi	r30, 0x20	; 32
     560:	f6 e0       	ldi	r31, 0x06	; 6
     562:	14 82       	std	Z+4, r1	; 0x04
     564:	80 e9       	ldi	r24, 0x90	; 144
     566:	80 83       	st	Z, r24
     568:	10 8a       	std	Z+16, r1	; 0x10
     56a:	11 8a       	std	Z+17, r1	; 0x11
     56c:	12 8a       	std	Z+18, r1	; 0x12
     56e:	13 8a       	std	Z+19, r1	; 0x13
     570:	14 8a       	std	Z+20, r1	; 0x14
     572:	15 8a       	std	Z+21, r1	; 0x15
     574:	16 8a       	std	Z+22, r1	; 0x16
     576:	17 8a       	std	Z+23, r1	; 0x17
     578:	81 85       	ldd	r24, Z+9	; 0x09
     57a:	80 7f       	andi	r24, 0xF0	; 240
     57c:	81 87       	std	Z+9, r24	; 0x09
     57e:	12 86       	std	Z+10, r1	; 0x0a
     580:	13 86       	std	Z+11, r1	; 0x0b
     582:	e0 e4       	ldi	r30, 0x40	; 64
     584:	f6 e0       	ldi	r31, 0x06	; 6
     586:	88 e8       	ldi	r24, 0x88	; 136
     588:	84 83       	std	Z+4, r24	; 0x04
     58a:	98 e0       	ldi	r25, 0x08	; 8
     58c:	90 83       	st	Z, r25
     58e:	10 8a       	std	Z+16, r1	; 0x10
     590:	11 8a       	std	Z+17, r1	; 0x11
     592:	12 8a       	std	Z+18, r1	; 0x12
     594:	13 8a       	std	Z+19, r1	; 0x13
     596:	14 8a       	std	Z+20, r1	; 0x14
     598:	15 8a       	std	Z+21, r1	; 0x15
     59a:	16 8a       	std	Z+22, r1	; 0x16
     59c:	17 8a       	std	Z+23, r1	; 0x17
     59e:	81 85       	ldd	r24, Z+9	; 0x09
     5a0:	80 7f       	andi	r24, 0xF0	; 240
     5a2:	81 87       	std	Z+9, r24	; 0x09
     5a4:	12 86       	std	Z+10, r1	; 0x0a
     5a6:	13 86       	std	Z+11, r1	; 0x0b
     5a8:	e0 e6       	ldi	r30, 0x60	; 96
     5aa:	f6 e0       	ldi	r31, 0x06	; 6
     5ac:	14 82       	std	Z+4, r1	; 0x04
     5ae:	10 82       	st	Z, r1
     5b0:	10 8a       	std	Z+16, r1	; 0x10
     5b2:	11 8a       	std	Z+17, r1	; 0x11
     5b4:	12 8a       	std	Z+18, r1	; 0x12
     5b6:	13 8a       	std	Z+19, r1	; 0x13
     5b8:	14 8a       	std	Z+20, r1	; 0x14
     5ba:	15 8a       	std	Z+21, r1	; 0x15
     5bc:	16 8a       	std	Z+22, r1	; 0x16
     5be:	17 8a       	std	Z+23, r1	; 0x17
     5c0:	81 85       	ldd	r24, Z+9	; 0x09
     5c2:	80 7f       	andi	r24, 0xF0	; 240
     5c4:	85 60       	ori	r24, 0x05	; 5
     5c6:	81 87       	std	Z+9, r24	; 0x09
     5c8:	92 87       	std	Z+10, r25	; 0x0a
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	83 87       	std	Z+11, r24	; 0x0b
     5ce:	e0 e8       	ldi	r30, 0x80	; 128
     5d0:	f6 e0       	ldi	r31, 0x06	; 6
     5d2:	14 82       	std	Z+4, r1	; 0x04
     5d4:	86 eb       	ldi	r24, 0xB6	; 182
     5d6:	80 83       	st	Z, r24
     5d8:	10 8a       	std	Z+16, r1	; 0x10
     5da:	11 8a       	std	Z+17, r1	; 0x11
     5dc:	12 8a       	std	Z+18, r1	; 0x12
     5de:	13 8a       	std	Z+19, r1	; 0x13
     5e0:	14 8a       	std	Z+20, r1	; 0x14
     5e2:	15 8a       	std	Z+21, r1	; 0x15
     5e4:	16 8a       	std	Z+22, r1	; 0x16
     5e6:	17 8a       	std	Z+23, r1	; 0x17
     5e8:	81 85       	ldd	r24, Z+9	; 0x09
     5ea:	80 7f       	andi	r24, 0xF0	; 240
     5ec:	81 87       	std	Z+9, r24	; 0x09
     5ee:	12 86       	std	Z+10, r1	; 0x0a
     5f0:	13 86       	std	Z+11, r1	; 0x0b
     5f2:	e0 ea       	ldi	r30, 0xA0	; 160
     5f4:	f6 e0       	ldi	r31, 0x06	; 6
     5f6:	14 82       	std	Z+4, r1	; 0x04
     5f8:	81 e4       	ldi	r24, 0x41	; 65
     5fa:	80 83       	st	Z, r24
     5fc:	10 8a       	std	Z+16, r1	; 0x10
     5fe:	11 8a       	std	Z+17, r1	; 0x11
     600:	12 8a       	std	Z+18, r1	; 0x12
     602:	13 8a       	std	Z+19, r1	; 0x13
     604:	14 8a       	std	Z+20, r1	; 0x14
     606:	15 8a       	std	Z+21, r1	; 0x15
     608:	16 8a       	std	Z+22, r1	; 0x16
     60a:	17 8a       	std	Z+23, r1	; 0x17
     60c:	81 85       	ldd	r24, Z+9	; 0x09
     60e:	80 7f       	andi	r24, 0xF0	; 240
     610:	81 87       	std	Z+9, r24	; 0x09
     612:	12 86       	std	Z+10, r1	; 0x0a
     614:	13 86       	std	Z+11, r1	; 0x0b
     616:	e0 ee       	ldi	r30, 0xE0	; 224
     618:	f6 e0       	ldi	r31, 0x06	; 6
     61a:	14 82       	std	Z+4, r1	; 0x04
     61c:	8c ef       	ldi	r24, 0xFC	; 252
     61e:	80 83       	st	Z, r24
     620:	10 8a       	std	Z+16, r1	; 0x10
     622:	11 8a       	std	Z+17, r1	; 0x11
     624:	12 8a       	std	Z+18, r1	; 0x12
     626:	13 8a       	std	Z+19, r1	; 0x13
     628:	14 8a       	std	Z+20, r1	; 0x14
     62a:	15 8a       	std	Z+21, r1	; 0x15
     62c:	16 8a       	std	Z+22, r1	; 0x16
     62e:	17 8a       	std	Z+23, r1	; 0x17
     630:	81 85       	ldd	r24, Z+9	; 0x09
     632:	80 7f       	andi	r24, 0xF0	; 240
     634:	81 60       	ori	r24, 0x01	; 1
     636:	81 87       	std	Z+9, r24	; 0x09
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	82 87       	std	Z+10, r24	; 0x0a
     63c:	13 86       	std	Z+11, r1	; 0x0b
     63e:	e0 e0       	ldi	r30, 0x00	; 0
     640:	f7 e0       	ldi	r31, 0x07	; 7
     642:	14 82       	std	Z+4, r1	; 0x04
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	80 83       	st	Z, r24
     648:	10 8a       	std	Z+16, r1	; 0x10
     64a:	11 8a       	std	Z+17, r1	; 0x11
     64c:	12 8a       	std	Z+18, r1	; 0x12
     64e:	13 8a       	std	Z+19, r1	; 0x13
     650:	14 8a       	std	Z+20, r1	; 0x14
     652:	15 8a       	std	Z+21, r1	; 0x15
     654:	16 8a       	std	Z+22, r1	; 0x16
     656:	17 8a       	std	Z+23, r1	; 0x17
     658:	81 85       	ldd	r24, Z+9	; 0x09
     65a:	80 7f       	andi	r24, 0xF0	; 240
     65c:	81 87       	std	Z+9, r24	; 0x09
     65e:	12 86       	std	Z+10, r1	; 0x0a
     660:	13 86       	std	Z+11, r1	; 0x0b
     662:	e0 e2       	ldi	r30, 0x20	; 32
     664:	f7 e0       	ldi	r31, 0x07	; 7
     666:	14 82       	std	Z+4, r1	; 0x04
     668:	8f e3       	ldi	r24, 0x3F	; 63
     66a:	80 83       	st	Z, r24
     66c:	10 8a       	std	Z+16, r1	; 0x10
     66e:	11 8a       	std	Z+17, r1	; 0x11
     670:	12 8a       	std	Z+18, r1	; 0x12
     672:	13 8a       	std	Z+19, r1	; 0x13
     674:	14 8a       	std	Z+20, r1	; 0x14
     676:	15 8a       	std	Z+21, r1	; 0x15
     678:	16 8a       	std	Z+22, r1	; 0x16
     67a:	17 8a       	std	Z+23, r1	; 0x17
     67c:	81 85       	ldd	r24, Z+9	; 0x09
     67e:	80 7f       	andi	r24, 0xF0	; 240
     680:	81 87       	std	Z+9, r24	; 0x09
     682:	12 86       	std	Z+10, r1	; 0x0a
     684:	13 86       	std	Z+11, r1	; 0x0b
     686:	e0 ec       	ldi	r30, 0xC0	; 192
     688:	f7 e0       	ldi	r31, 0x07	; 7
     68a:	14 82       	std	Z+4, r1	; 0x04
     68c:	10 82       	st	Z, r1
     68e:	10 8a       	std	Z+16, r1	; 0x10
     690:	11 8a       	std	Z+17, r1	; 0x11
     692:	12 8a       	std	Z+18, r1	; 0x12
     694:	13 8a       	std	Z+19, r1	; 0x13
     696:	81 85       	ldd	r24, Z+9	; 0x09
     698:	80 7f       	andi	r24, 0xF0	; 240
     69a:	81 87       	std	Z+9, r24	; 0x09
     69c:	12 86       	std	Z+10, r1	; 0x0a
     69e:	13 86       	std	Z+11, r1	; 0x0b
     6a0:	e0 ee       	ldi	r30, 0xE0	; 224
     6a2:	f7 e0       	ldi	r31, 0x07	; 7
     6a4:	14 82       	std	Z+4, r1	; 0x04
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	80 83       	st	Z, r24
     6aa:	10 8a       	std	Z+16, r1	; 0x10
     6ac:	11 8a       	std	Z+17, r1	; 0x11
     6ae:	81 85       	ldd	r24, Z+9	; 0x09
     6b0:	80 7f       	andi	r24, 0xF0	; 240
     6b2:	81 87       	std	Z+9, r24	; 0x09
     6b4:	12 86       	std	Z+10, r1	; 0x0a
     6b6:	13 86       	std	Z+11, r1	; 0x0b
     6b8:	08 95       	ret

000006ba <_Z9spif_initv>:
     6ba:	e0 ec       	ldi	r30, 0xC0	; 192
     6bc:	fb e0       	ldi	r31, 0x0B	; 11
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	80 83       	st	Z, r24
     6c2:	83 e0       	ldi	r24, 0x03	; 3
     6c4:	81 83       	std	Z+1, r24	; 0x01
     6c6:	08 95       	ret

000006c8 <__vector_118>:
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
     6d2:	08 b6       	in	r0, 0x38	; 56
     6d4:	0f 92       	push	r0
     6d6:	18 be       	out	0x38, r1	; 56
     6d8:	09 b6       	in	r0, 0x39	; 57
     6da:	0f 92       	push	r0
     6dc:	19 be       	out	0x39, r1	; 57
     6de:	0a b6       	in	r0, 0x3a	; 58
     6e0:	0f 92       	push	r0
     6e2:	1a be       	out	0x3a, r1	; 58
     6e4:	0b b6       	in	r0, 0x3b	; 59
     6e6:	0f 92       	push	r0
     6e8:	1b be       	out	0x3b, r1	; 59
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ef 93       	push	r30
     6fc:	ff 93       	push	r31
     6fe:	e0 ec       	ldi	r30, 0xC0	; 192
     700:	fb e0       	ldi	r31, 0x0B	; 11
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	80 91 9c 25 	lds	r24, 0x259C	; 0x80259c <Responsing>
     70a:	81 11       	cpse	r24, r1
     70c:	39 c0       	rjmp	.+114    	; 0x780 <__vector_118+0xb8>
     70e:	9d 30       	cpi	r25, 0x0D	; 13
     710:	b9 f0       	breq	.+46     	; 0x740 <__vector_118+0x78>
     712:	99 23       	and	r25, r25
     714:	09 f4       	brne	.+2      	; 0x718 <__vector_118+0x50>
     716:	55 c0       	rjmp	.+170    	; 0x7c2 <__vector_118+0xfa>
     718:	20 91 9d 25 	lds	r18, 0x259D	; 0x80259d <indexBR>
     71c:	30 91 9e 25 	lds	r19, 0x259E	; 0x80259e <indexBR+0x1>
     720:	24 36       	cpi	r18, 0x64	; 100
     722:	31 05       	cpc	r19, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <__vector_118+0x60>
     726:	4f c0       	rjmp	.+158    	; 0x7c6 <__vector_118+0xfe>
     728:	f9 01       	movw	r30, r18
     72a:	ed 5f       	subi	r30, 0xFD	; 253
     72c:	f9 4d       	sbci	r31, 0xD9	; 217
     72e:	90 83       	st	Z, r25
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	20 93 9d 25 	sts	0x259D, r18	; 0x80259d <indexBR>
     738:	30 93 9e 25 	sts	0x259E, r19	; 0x80259e <indexBR+0x1>
     73c:	20 e2       	ldi	r18, 0x20	; 32
     73e:	44 c0       	rjmp	.+136    	; 0x7c8 <__vector_118+0x100>
     740:	cf e9       	ldi	r28, 0x9F	; 159
     742:	d5 e2       	ldi	r29, 0x25	; 37
     744:	a3 e0       	ldi	r26, 0x03	; 3
     746:	b6 e2       	ldi	r27, 0x26	; 38
     748:	87 e6       	ldi	r24, 0x67	; 103
     74a:	96 e2       	ldi	r25, 0x26	; 38
     74c:	fd 01       	movw	r30, r26
     74e:	20 81       	ld	r18, Z
     750:	29 93       	st	Y+, r18
     752:	11 92       	st	Z+, r1
     754:	e8 17       	cp	r30, r24
     756:	f9 07       	cpc	r31, r25
     758:	d1 f7       	brne	.-12     	; 0x74e <__vector_118+0x86>
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	20 93 9b 25 	sts	0x259B, r18	; 0x80259b <cmdIsReady>
     760:	1d 92       	st	X+, r1
     762:	a8 17       	cp	r26, r24
     764:	b9 07       	cpc	r27, r25
     766:	e1 f7       	brne	.-8      	; 0x760 <__vector_118+0x98>
     768:	84 e6       	ldi	r24, 0x64	; 100
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	80 93 99 25 	sts	0x2599, r24	; 0x802599 <h>
     770:	90 93 9a 25 	sts	0x259A, r25	; 0x80259a <h+0x1>
     774:	10 92 9d 25 	sts	0x259D, r1	; 0x80259d <indexBR>
     778:	10 92 9e 25 	sts	0x259E, r1	; 0x80259e <indexBR+0x1>
     77c:	20 e2       	ldi	r18, 0x20	; 32
     77e:	24 c0       	rjmp	.+72     	; 0x7c8 <__vector_118+0x100>
     780:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <indexBS>
     784:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <indexBS+0x1>
     788:	84 36       	cpi	r24, 0x64	; 100
     78a:	91 05       	cpc	r25, r1
     78c:	2c f4       	brge	.+10     	; 0x798 <__vector_118+0xd0>
     78e:	fc 01       	movw	r30, r24
     790:	e7 59       	subi	r30, 0x97	; 151
     792:	f9 4d       	sbci	r31, 0xD9	; 217
     794:	20 81       	ld	r18, Z
     796:	01 c0       	rjmp	.+2      	; 0x79a <__vector_118+0xd2>
     798:	20 e2       	ldi	r18, 0x20	; 32
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	80 93 67 26 	sts	0x2667, r24	; 0x802667 <indexBS>
     7a0:	90 93 68 26 	sts	0x2668, r25	; 0x802668 <indexBS+0x1>
     7a4:	85 36       	cpi	r24, 0x65	; 101
     7a6:	91 05       	cpc	r25, r1
     7a8:	79 f4       	brne	.+30     	; 0x7c8 <__vector_118+0x100>
     7aa:	e0 ea       	ldi	r30, 0xA0	; 160
     7ac:	f6 e0       	ldi	r31, 0x06	; 6
     7ae:	84 81       	ldd	r24, Z+4	; 0x04
     7b0:	8e 7f       	andi	r24, 0xFE	; 254
     7b2:	84 83       	std	Z+4, r24	; 0x04
     7b4:	10 92 9c 25 	sts	0x259C, r1	; 0x80259c <Responsing>
     7b8:	10 92 67 26 	sts	0x2667, r1	; 0x802667 <indexBS>
     7bc:	10 92 68 26 	sts	0x2668, r1	; 0x802668 <indexBS+0x1>
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <__vector_118+0x100>
     7c2:	20 e2       	ldi	r18, 0x20	; 32
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <__vector_118+0x100>
     7c6:	20 e2       	ldi	r18, 0x20	; 32
     7c8:	20 93 c3 0b 	sts	0x0BC3, r18	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
     7cc:	ff 91       	pop	r31
     7ce:	ef 91       	pop	r30
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	3f 91       	pop	r19
     7de:	2f 91       	pop	r18
     7e0:	0f 90       	pop	r0
     7e2:	0b be       	out	0x3b, r0	; 59
     7e4:	0f 90       	pop	r0
     7e6:	0a be       	out	0x3a, r0	; 58
     7e8:	0f 90       	pop	r0
     7ea:	09 be       	out	0x39, r0	; 57
     7ec:	0f 90       	pop	r0
     7ee:	08 be       	out	0x38, r0	; 56
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <_Z9spie_initv>:
     7fa:	e0 ec       	ldi	r30, 0xC0	; 192
     7fc:	fa e0       	ldi	r31, 0x0A	; 10
     7fe:	83 e5       	ldi	r24, 0x53	; 83
     800:	80 83       	st	Z, r24
     802:	11 82       	std	Z+1, r1	; 0x01
     804:	08 95       	ret

00000806 <_Z17spie_master_tx_rxh>:
     806:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     80a:	e0 ec       	ldi	r30, 0xC0	; 192
     80c:	fa e0       	ldi	r31, 0x0A	; 10
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	88 23       	and	r24, r24
     812:	ec f7       	brge	.-6      	; 0x80e <_Z17spie_master_tx_rxh+0x8>
     814:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
     818:	08 95       	ret

0000081a <_Z4ltoblPc>:
     81a:	fa 01       	movw	r30, r20
     81c:	60 83       	st	Z, r22
     81e:	71 83       	std	Z+1, r23	; 0x01
     820:	82 83       	std	Z+2, r24	; 0x02
     822:	93 83       	std	Z+3, r25	; 0x03
     824:	08 95       	ret

00000826 <_Z4btolPc>:
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	fc 01       	movw	r30, r24
     82c:	03 81       	ldd	r16, Z+3	; 0x03
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	30 2f       	mov	r19, r16
     836:	22 27       	eor	r18, r18
     838:	11 27       	eor	r17, r17
     83a:	00 27       	eor	r16, r16
     83c:	42 81       	ldd	r20, Z+2	; 0x02
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	ba 01       	movw	r22, r20
     846:	55 27       	eor	r21, r21
     848:	44 27       	eor	r20, r20
     84a:	04 0f       	add	r16, r20
     84c:	15 1f       	adc	r17, r21
     84e:	26 1f       	adc	r18, r22
     850:	37 1f       	adc	r19, r23
     852:	41 81       	ldd	r20, Z+1	; 0x01
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	76 2f       	mov	r23, r22
     85c:	65 2f       	mov	r22, r21
     85e:	54 2f       	mov	r21, r20
     860:	44 27       	eor	r20, r20
     862:	d9 01       	movw	r26, r18
     864:	c8 01       	movw	r24, r16
     866:	84 0f       	add	r24, r20
     868:	95 1f       	adc	r25, r21
     86a:	a6 1f       	adc	r26, r22
     86c:	b7 1f       	adc	r27, r23
     86e:	20 81       	ld	r18, Z
     870:	bc 01       	movw	r22, r24
     872:	cd 01       	movw	r24, r26
     874:	62 0f       	add	r22, r18
     876:	71 1d       	adc	r23, r1
     878:	81 1d       	adc	r24, r1
     87a:	91 1d       	adc	r25, r1
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	08 95       	ret

00000882 <_Z10ReadConfigv>:
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <_Z10ReadConfigv+0x16>
     898:	1f 92       	push	r1
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	10 92 94 25 	sts	0x2594, r1	; 0x802594 <fk>
     8a2:	10 92 95 25 	sts	0x2595, r1	; 0x802595 <fk+0x1>
     8a6:	10 92 96 25 	sts	0x2596, r1	; 0x802596 <fk+0x2>
     8aa:	10 92 97 25 	sts	0x2597, r1	; 0x802597 <fk+0x3>
     8ae:	10 92 92 25 	sts	0x2592, r1	; 0x802592 <ft>
     8b2:	10 92 93 25 	sts	0x2593, r1	; 0x802593 <ft+0x1>
     8b6:	10 92 91 25 	sts	0x2591, r1	; 0x802591 <fadd1>
     8ba:	10 92 90 25 	sts	0x2590, r1	; 0x802590 <fadd2>
     8be:	e0 e8       	ldi	r30, 0x80	; 128
     8c0:	f6 e0       	ldi	r31, 0x06	; 6
     8c2:	84 81       	ldd	r24, Z+4	; 0x04
     8c4:	80 61       	ori	r24, 0x10	; 16
     8c6:	84 83       	std	Z+4, r24	; 0x04
     8c8:	84 81       	ldd	r24, Z+4	; 0x04
     8ca:	8f 7e       	andi	r24, 0xEF	; 239
     8cc:	84 83       	std	Z+4, r24	; 0x04
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     8d4:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
     8d8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     8dc:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
     8e0:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     8ea:	0b ec       	ldi	r16, 0xCB	; 203
     8ec:	14 e2       	ldi	r17, 0x24	; 36
     8ee:	e1 2c       	mov	r14, r1
     8f0:	f1 2c       	mov	r15, r1
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f2 e0       	ldi	r31, 0x02	; 2
     8f6:	af 2e       	mov	r10, r31
     8f8:	f0 e2       	ldi	r31, 0x20	; 32
     8fa:	bf 2e       	mov	r11, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	0f 2e       	mov	r0, r31
     900:	f3 e2       	ldi	r31, 0x23	; 35
     902:	cf 2e       	mov	r12, r31
     904:	f0 e2       	ldi	r31, 0x20	; 32
     906:	df 2e       	mov	r13, r31
     908:	f0 2d       	mov	r31, r0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     910:	8a 83       	std	Y+2, r24	; 0x02
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	2a 81       	ldd	r18, Y+2	; 0x02
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	32 2f       	mov	r19, r18
     920:	22 27       	eor	r18, r18
     922:	a9 01       	movw	r20, r18
     924:	48 0f       	add	r20, r24
     926:	51 1d       	adc	r21, r1
     928:	f8 01       	movw	r30, r16
     92a:	40 83       	st	Z, r20
     92c:	51 83       	std	Z+1, r21	; 0x01
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     934:	f8 01       	movw	r30, r16
     936:	82 83       	std	Z+2, r24	; 0x02
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     93e:	f8 01       	movw	r30, r16
     940:	83 83       	std	Z+3, r24	; 0x03
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     948:	f8 01       	movw	r30, r16
     94a:	84 83       	std	Z+4, r24	; 0x04
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     952:	8c 83       	std	Y+4, r24	; 0x04
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     95a:	8b 83       	std	Y+3, r24	; 0x03
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     962:	8a 83       	std	Y+2, r24	; 0x02
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     974:	f8 01       	movw	r30, r16
     976:	65 83       	std	Z+5, r22	; 0x05
     978:	76 83       	std	Z+6, r23	; 0x06
     97a:	87 83       	std	Z+7, r24	; 0x07
     97c:	90 87       	std	Z+8, r25	; 0x08
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     984:	8c 83       	std	Y+4, r24	; 0x04
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     98c:	8b 83       	std	Y+3, r24	; 0x03
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     994:	8a 83       	std	Y+2, r24	; 0x02
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     9a6:	f8 01       	movw	r30, r16
     9a8:	61 87       	std	Z+9, r22	; 0x09
     9aa:	72 87       	std	Z+10, r23	; 0x0a
     9ac:	83 87       	std	Z+11, r24	; 0x0b
     9ae:	94 87       	std	Z+12, r25	; 0x0c
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9b6:	8c 83       	std	Y+4, r24	; 0x04
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9c6:	8a 83       	std	Y+2, r24	; 0x02
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	ce 01       	movw	r24, r28
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     9d8:	f8 01       	movw	r30, r16
     9da:	65 87       	std	Z+13, r22	; 0x0d
     9dc:	76 87       	std	Z+14, r23	; 0x0e
     9de:	87 87       	std	Z+15, r24	; 0x0f
     9e0:	90 8b       	std	Z+16, r25	; 0x10
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9e8:	8c 83       	std	Y+4, r24	; 0x04
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9f0:	8b 83       	std	Y+3, r24	; 0x03
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     9f8:	8a 83       	std	Y+2, r24	; 0x02
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     a0a:	f8 01       	movw	r30, r16
     a0c:	61 8b       	std	Z+17, r22	; 0x11
     a0e:	72 8b       	std	Z+18, r23	; 0x12
     a10:	83 8b       	std	Z+19, r24	; 0x13
     a12:	94 8b       	std	Z+20, r25	; 0x14
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a1a:	8c 83       	std	Y+4, r24	; 0x04
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a22:	8b 83       	std	Y+3, r24	; 0x03
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a2a:	8a 83       	std	Y+2, r24	; 0x02
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     a3c:	f8 01       	movw	r30, r16
     a3e:	65 8b       	std	Z+21, r22	; 0x15
     a40:	76 8b       	std	Z+22, r23	; 0x16
     a42:	87 8b       	std	Z+23, r24	; 0x17
     a44:	90 8f       	std	Z+24, r25	; 0x18
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	2a 81       	ldd	r18, Y+2	; 0x02
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	32 2f       	mov	r19, r18
     a5c:	22 27       	eor	r18, r18
     a5e:	a9 01       	movw	r20, r18
     a60:	48 0f       	add	r20, r24
     a62:	51 1d       	adc	r21, r1
     a64:	f8 01       	movw	r30, r16
     a66:	41 8f       	std	Z+25, r20	; 0x19
     a68:	52 8f       	std	Z+26, r21	; 0x1a
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a70:	f8 01       	movw	r30, r16
     a72:	83 8f       	std	Z+27, r24	; 0x1b
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a7a:	f8 01       	movw	r30, r16
     a7c:	84 8f       	std	Z+28, r24	; 0x1c
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a84:	8c 83       	std	Y+4, r24	; 0x04
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a8c:	8b 83       	std	Y+3, r24	; 0x03
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a94:	8a 83       	std	Y+2, r24	; 0x02
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     aa6:	f8 01       	movw	r30, r16
     aa8:	65 8f       	std	Z+29, r22	; 0x1d
     aaa:	76 8f       	std	Z+30, r23	; 0x1e
     aac:	87 8f       	std	Z+31, r24	; 0x1f
     aae:	90 a3       	std	Z+32, r25	; 0x20
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ab6:	8c 83       	std	Y+4, r24	; 0x04
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     abe:	8b 83       	std	Y+3, r24	; 0x03
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ac6:	8a 83       	std	Y+2, r24	; 0x02
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     ad8:	f8 01       	movw	r30, r16
     ada:	61 a3       	std	Z+33, r22	; 0x21
     adc:	72 a3       	std	Z+34, r23	; 0x22
     ade:	83 a3       	std	Z+35, r24	; 0x23
     ae0:	94 a3       	std	Z+36, r25	; 0x24
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ae8:	f8 01       	movw	r30, r16
     aea:	85 a3       	std	Z+37, r24	; 0x25
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     af2:	f8 01       	movw	r30, r16
     af4:	86 a3       	std	Z+38, r24	; 0x26
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     afc:	f8 01       	movw	r30, r16
     afe:	87 a3       	std	Z+39, r24	; 0x27
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     b06:	f8 01       	movw	r30, r16
     b08:	80 a7       	std	Z+40, r24	; 0x28
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     b10:	f8 01       	movw	r30, r16
     b12:	81 a7       	std	Z+41, r24	; 0x29
     b14:	1f 92       	push	r1
     b16:	8f 93       	push	r24
     b18:	ff 92       	push	r15
     b1a:	ef 92       	push	r14
     b1c:	bf 92       	push	r11
     b1e:	af 92       	push	r10
     b20:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     b2a:	f8 01       	movw	r30, r16
     b2c:	82 a7       	std	Z+42, r24	; 0x2a
     b2e:	1f 92       	push	r1
     b30:	8f 93       	push	r24
     b32:	ff 92       	push	r15
     b34:	ef 92       	push	r14
     b36:	df 92       	push	r13
     b38:	cf 92       	push	r12
     b3a:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
     b3e:	ff ef       	ldi	r31, 0xFF	; 255
     b40:	ef 1a       	sub	r14, r31
     b42:	ff 0a       	sbc	r15, r31
     b44:	05 5d       	subi	r16, 0xD5	; 213
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	53 e0       	ldi	r21, 0x03	; 3
     b4e:	e5 16       	cp	r14, r21
     b50:	f1 04       	cpc	r15, r1
     b52:	09 f0       	breq	.+2      	; 0xb56 <_Z10ReadConfigv+0x2d4>
     b54:	da ce       	rjmp	.-588    	; 0x90a <_Z10ReadConfigv+0x88>
     b56:	24 96       	adiw	r28, 0x04	; 4
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	af 90       	pop	r10
     b70:	08 95       	ret

00000b72 <_Z7readRamv>:
     b72:	2f 92       	push	r2
     b74:	3f 92       	push	r3
     b76:	4f 92       	push	r4
     b78:	5f 92       	push	r5
     b7a:	6f 92       	push	r6
     b7c:	7f 92       	push	r7
     b7e:	8f 92       	push	r8
     b80:	9f 92       	push	r9
     b82:	af 92       	push	r10
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	00 d0       	rcall	.+0      	; 0xb98 <_Z7readRamv+0x26>
     b98:	1f 92       	push	r1
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	84 e4       	ldi	r24, 0x44	; 68
     ba0:	90 e2       	ldi	r25, 0x20	; 32
     ba2:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
     ba6:	80 91 98 25 	lds	r24, 0x2598	; 0x802598 <ContinuousRead>
     baa:	81 11       	cpse	r24, r1
     bac:	4f c0       	rjmp	.+158    	; 0xc4c <_Z7readRamv+0xda>
     bae:	83 e5       	ldi	r24, 0x53	; 83
     bb0:	90 e2       	ldi	r25, 0x20	; 32
     bb2:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
     bb6:	88 ee       	ldi	r24, 0xE8	; 232
     bb8:	93 e0       	ldi	r25, 0x03	; 3
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <fk>
     bc2:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <fk+0x1>
     bc6:	a0 93 96 25 	sts	0x2596, r26	; 0x802596 <fk+0x2>
     bca:	b0 93 97 25 	sts	0x2597, r27	; 0x802597 <fk+0x3>
     bce:	1f 92       	push	r1
     bd0:	1f 92       	push	r1
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	8f 93       	push	r24
     bd6:	88 ee       	ldi	r24, 0xE8	; 232
     bd8:	8f 93       	push	r24
     bda:	88 e6       	ldi	r24, 0x68	; 104
     bdc:	90 e2       	ldi	r25, 0x20	; 32
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
     be6:	80 91 94 25 	lds	r24, 0x2594	; 0x802594 <fk>
     bea:	90 91 95 25 	lds	r25, 0x2595	; 0x802595 <fk+0x1>
     bee:	a0 91 96 25 	lds	r26, 0x2596	; 0x802596 <fk+0x2>
     bf2:	b0 91 97 25 	lds	r27, 0x2597	; 0x802597 <fk+0x3>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	aa 1f       	adc	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <ft>
     c02:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <ft+0x1>
     c06:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <fadd1>
     c0a:	90 93 90 25 	sts	0x2590, r25	; 0x802590 <fadd2>
     c0e:	e0 e8       	ldi	r30, 0x80	; 128
     c10:	f6 e0       	ldi	r31, 0x06	; 6
     c12:	84 81       	ldd	r24, Z+4	; 0x04
     c14:	80 61       	ori	r24, 0x10	; 16
     c16:	84 83       	std	Z+4, r24	; 0x04
     c18:	84 81       	ldd	r24, Z+4	; 0x04
     c1a:	8f 7e       	andi	r24, 0xEF	; 239
     c1c:	84 83       	std	Z+4, r24	; 0x04
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c24:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
     c28:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c2c:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
     c30:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 98 25 	sts	0x2598, r24	; 0x802598 <ContinuousRead>
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c52:	8a 83       	std	Y+2, r24	; 0x02
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	0c e4       	ldi	r16, 0x4C	; 76
     c5e:	15 e2       	ldi	r17, 0x25	; 37
     c60:	2a 81       	ldd	r18, Y+2	; 0x02
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	32 2f       	mov	r19, r18
     c66:	22 27       	eor	r18, r18
     c68:	a9 01       	movw	r20, r18
     c6a:	48 0f       	add	r20, r24
     c6c:	51 1d       	adc	r21, r1
     c6e:	f8 01       	movw	r30, r16
     c70:	40 83       	st	Z, r20
     c72:	51 83       	std	Z+1, r21	; 0x01
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c7a:	f8 01       	movw	r30, r16
     c7c:	82 83       	std	Z+2, r24	; 0x02
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c84:	f8 01       	movw	r30, r16
     c86:	83 83       	std	Z+3, r24	; 0x03
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <_Z7readRamv+0x11c>
     c8c:	22 c1       	rjmp	.+580    	; 0xed2 <_Z7readRamv+0x360>
     c8e:	20 f0       	brcs	.+8      	; 0xc98 <_Z7readRamv+0x126>
     c90:	8a 35       	cpi	r24, 0x5A	; 90
     c92:	09 f4       	brne	.+2      	; 0xc96 <_Z7readRamv+0x124>
     c94:	cd c1       	rjmp	.+922    	; 0x1030 <_Z7readRamv+0x4be>
     c96:	15 c2       	rjmp	.+1066   	; 0x10c2 <_Z7readRamv+0x550>
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     c9e:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <CMDPRGlist+0x4>
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <_Z7readRamv+0x136>
     ca6:	8a c0       	rjmp	.+276    	; 0xdbc <_Z7readRamv+0x24a>
     ca8:	0f 2e       	mov	r0, r31
     caa:	f1 e5       	ldi	r31, 0x51	; 81
     cac:	8f 2e       	mov	r8, r31
     cae:	f5 e2       	ldi	r31, 0x25	; 37
     cb0:	9f 2e       	mov	r9, r31
     cb2:	f0 2d       	mov	r31, r0
     cb4:	a1 2c       	mov	r10, r1
     cb6:	b1 2c       	mov	r11, r1
     cb8:	3e 01       	movw	r6, r28
     cba:	f5 e0       	ldi	r31, 0x05	; 5
     cbc:	6f 0e       	add	r6, r31
     cbe:	71 1c       	adc	r7, r1
     cc0:	ae 01       	movw	r20, r28
     cc2:	4f 5f       	subi	r20, 0xFF	; 255
     cc4:	5f 4f       	sbci	r21, 0xFF	; 255
     cc6:	7a 01       	movw	r14, r20
     cc8:	0f 2e       	mov	r0, r31
     cca:	fc e4       	ldi	r31, 0x4C	; 76
     ccc:	4f 2e       	mov	r4, r31
     cce:	f5 e2       	ldi	r31, 0x25	; 37
     cd0:	5f 2e       	mov	r5, r31
     cd2:	f0 2d       	mov	r31, r0
     cd4:	26 2c       	mov	r2, r6
     cd6:	37 2c       	mov	r3, r7
     cd8:	67 01       	movw	r12, r14
     cda:	83 01       	movw	r16, r6
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <_Z7readRamv+0x174>
     cde:	18 16       	cp	r1, r24
     ce0:	19 06       	cpc	r1, r25
     ce2:	ec f0       	brlt	.+58     	; 0xd1e <_Z7readRamv+0x1ac>
     ce4:	6b c0       	rjmp	.+214    	; 0xdbc <_Z7readRamv+0x24a>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     cec:	f8 01       	movw	r30, r16
     cee:	82 93       	st	-Z, r24
     cf0:	8f 01       	movw	r16, r30
     cf2:	ee 16       	cp	r14, r30
     cf4:	ff 06       	cpc	r15, r31
     cf6:	b9 f7       	brne	.-18     	; 0xce6 <_Z7readRamv+0x174>
     cf8:	c7 01       	movw	r24, r14
     cfa:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     cfe:	f4 01       	movw	r30, r8
     d00:	61 93       	st	Z+, r22
     d02:	71 93       	st	Z+, r23
     d04:	81 93       	st	Z+, r24
     d06:	91 93       	st	Z+, r25
     d08:	4f 01       	movw	r8, r30
     d0a:	ff ef       	ldi	r31, 0xFF	; 255
     d0c:	af 1a       	sub	r10, r31
     d0e:	bf 0a       	sbc	r11, r31
     d10:	f2 01       	movw	r30, r4
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a8 16       	cp	r10, r24
     d18:	b9 06       	cpc	r11, r25
     d1a:	e4 f2       	brlt	.-72     	; 0xcd4 <_Z7readRamv+0x162>
     d1c:	e0 cf       	rjmp	.-64     	; 0xcde <_Z7readRamv+0x16c>
     d1e:	0f 2e       	mov	r0, r31
     d20:	f0 e6       	ldi	r31, 0x60	; 96
     d22:	af 2e       	mov	r10, r31
     d24:	f5 e2       	ldi	r31, 0x25	; 37
     d26:	bf 2e       	mov	r11, r31
     d28:	f0 2d       	mov	r31, r0
     d2a:	e1 2c       	mov	r14, r1
     d2c:	f1 2c       	mov	r15, r1
     d2e:	0f 2e       	mov	r0, r31
     d30:	fc e4       	ldi	r31, 0x4C	; 76
     d32:	8f 2e       	mov	r8, r31
     d34:	f5 e2       	ldi	r31, 0x25	; 37
     d36:	9f 2e       	mov	r9, r31
     d38:	f0 2d       	mov	r31, r0
     d3a:	02 2d       	mov	r16, r2
     d3c:	13 2d       	mov	r17, r3
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <_Z7readRamv+0x1d8>
     d40:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
     d44:	81 11       	cpse	r24, r1
     d46:	1e c0       	rjmp	.+60     	; 0xd84 <_Z7readRamv+0x212>
     d48:	39 c0       	rjmp	.+114    	; 0xdbc <_Z7readRamv+0x24a>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     d50:	f8 01       	movw	r30, r16
     d52:	82 93       	st	-Z, r24
     d54:	8f 01       	movw	r16, r30
     d56:	ec 15       	cp	r30, r12
     d58:	fd 05       	cpc	r31, r13
     d5a:	b9 f7       	brne	.-18     	; 0xd4a <_Z7readRamv+0x1d8>
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     d64:	f5 01       	movw	r30, r10
     d66:	61 93       	st	Z+, r22
     d68:	71 93       	st	Z+, r23
     d6a:	81 93       	st	Z+, r24
     d6c:	91 93       	st	Z+, r25
     d6e:	5f 01       	movw	r10, r30
     d70:	ff ef       	ldi	r31, 0xFF	; 255
     d72:	ef 1a       	sub	r14, r31
     d74:	ff 0a       	sbc	r15, r31
     d76:	f4 01       	movw	r30, r8
     d78:	84 81       	ldd	r24, Z+4	; 0x04
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	e8 16       	cp	r14, r24
     d7e:	f9 06       	cpc	r15, r25
     d80:	e4 f2       	brlt	.-72     	; 0xd3a <_Z7readRamv+0x1c8>
     d82:	de cf       	rjmp	.-68     	; 0xd40 <_Z7readRamv+0x1ce>
     d84:	0f 2e       	mov	r0, r31
     d86:	fd e5       	ldi	r31, 0x5D	; 93
     d88:	ef 2e       	mov	r14, r31
     d8a:	f5 e2       	ldi	r31, 0x25	; 37
     d8c:	ff 2e       	mov	r15, r31
     d8e:	f0 2d       	mov	r31, r0
     d90:	00 e0       	ldi	r16, 0x00	; 0
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	0f 2e       	mov	r0, r31
     d96:	fc e4       	ldi	r31, 0x4C	; 76
     d98:	cf 2e       	mov	r12, r31
     d9a:	f5 e2       	ldi	r31, 0x25	; 37
     d9c:	df 2e       	mov	r13, r31
     d9e:	f0 2d       	mov	r31, r0
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     da6:	f7 01       	movw	r30, r14
     da8:	81 93       	st	Z+, r24
     daa:	7f 01       	movw	r14, r30
     dac:	0f 5f       	subi	r16, 0xFF	; 255
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	f6 01       	movw	r30, r12
     db2:	84 81       	ldd	r24, Z+4	; 0x04
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	08 17       	cp	r16, r24
     db8:	19 07       	cpc	r17, r25
     dba:	94 f3       	brlt	.-28     	; 0xda0 <_Z7readRamv+0x22e>
     dbc:	7e 01       	movw	r14, r28
     dbe:	f5 e0       	ldi	r31, 0x05	; 5
     dc0:	ef 0e       	add	r14, r31
     dc2:	f1 1c       	adc	r15, r1
     dc4:	8e 01       	movw	r16, r28
     dc6:	0f 5f       	subi	r16, 0xFF	; 255
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	67 01       	movw	r12, r14
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     dd2:	f6 01       	movw	r30, r12
     dd4:	82 93       	st	-Z, r24
     dd6:	6f 01       	movw	r12, r30
     dd8:	e0 17       	cp	r30, r16
     dda:	f1 07       	cpc	r31, r17
     ddc:	b9 f7       	brne	.-18     	; 0xdcc <_Z7readRamv+0x25a>
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     de6:	60 93 6c 25 	sts	0x256C, r22	; 0x80256c <CMDPRGlist+0x20>
     dea:	70 93 6d 25 	sts	0x256D, r23	; 0x80256d <CMDPRGlist+0x21>
     dee:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <CMDPRGlist+0x22>
     df2:	90 93 6f 25 	sts	0x256F, r25	; 0x80256f <CMDPRGlist+0x23>
     df6:	67 01       	movw	r12, r14
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     dfe:	f6 01       	movw	r30, r12
     e00:	82 93       	st	-Z, r24
     e02:	6f 01       	movw	r12, r30
     e04:	e0 17       	cp	r30, r16
     e06:	f1 07       	cpc	r31, r17
     e08:	b9 f7       	brne	.-18     	; 0xdf8 <_Z7readRamv+0x286>
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     e12:	60 93 70 25 	sts	0x2570, r22	; 0x802570 <CMDPRGlist+0x24>
     e16:	70 93 71 25 	sts	0x2571, r23	; 0x802571 <CMDPRGlist+0x25>
     e1a:	80 93 72 25 	sts	0x2572, r24	; 0x802572 <CMDPRGlist+0x26>
     e1e:	90 93 73 25 	sts	0x2573, r25	; 0x802573 <CMDPRGlist+0x27>
     e22:	67 01       	movw	r12, r14
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     e2a:	f6 01       	movw	r30, r12
     e2c:	82 93       	st	-Z, r24
     e2e:	6f 01       	movw	r12, r30
     e30:	e0 17       	cp	r30, r16
     e32:	f1 07       	cpc	r31, r17
     e34:	b9 f7       	brne	.-18     	; 0xe24 <_Z7readRamv+0x2b2>
     e36:	ce 01       	movw	r24, r28
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     e3e:	60 93 74 25 	sts	0x2574, r22	; 0x802574 <CMDPRGlist+0x28>
     e42:	70 93 75 25 	sts	0x2575, r23	; 0x802575 <CMDPRGlist+0x29>
     e46:	80 93 76 25 	sts	0x2576, r24	; 0x802576 <CMDPRGlist+0x2a>
     e4a:	90 93 77 25 	sts	0x2577, r25	; 0x802577 <CMDPRGlist+0x2b>
     e4e:	67 01       	movw	r12, r14
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     e56:	f6 01       	movw	r30, r12
     e58:	82 93       	st	-Z, r24
     e5a:	6f 01       	movw	r12, r30
     e5c:	e0 17       	cp	r30, r16
     e5e:	f1 07       	cpc	r31, r17
     e60:	b9 f7       	brne	.-18     	; 0xe50 <_Z7readRamv+0x2de>
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     e6a:	60 93 78 25 	sts	0x2578, r22	; 0x802578 <CMDPRGlist+0x2c>
     e6e:	70 93 79 25 	sts	0x2579, r23	; 0x802579 <CMDPRGlist+0x2d>
     e72:	80 93 7a 25 	sts	0x257A, r24	; 0x80257a <CMDPRGlist+0x2e>
     e76:	90 93 7b 25 	sts	0x257B, r25	; 0x80257b <CMDPRGlist+0x2f>
     e7a:	67 01       	movw	r12, r14
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     e82:	f6 01       	movw	r30, r12
     e84:	82 93       	st	-Z, r24
     e86:	6f 01       	movw	r12, r30
     e88:	e0 17       	cp	r30, r16
     e8a:	f1 07       	cpc	r31, r17
     e8c:	b9 f7       	brne	.-18     	; 0xe7c <_Z7readRamv+0x30a>
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     e96:	60 93 7c 25 	sts	0x257C, r22	; 0x80257c <CMDPRGlist+0x30>
     e9a:	70 93 7d 25 	sts	0x257D, r23	; 0x80257d <CMDPRGlist+0x31>
     e9e:	80 93 7e 25 	sts	0x257E, r24	; 0x80257e <CMDPRGlist+0x32>
     ea2:	90 93 7f 25 	sts	0x257F, r25	; 0x80257f <CMDPRGlist+0x33>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     eac:	f7 01       	movw	r30, r14
     eae:	82 93       	st	-Z, r24
     eb0:	7f 01       	movw	r14, r30
     eb2:	e0 17       	cp	r30, r16
     eb4:	f1 07       	cpc	r31, r17
     eb6:	b9 f7       	brne	.-18     	; 0xea6 <_Z7readRamv+0x334>
     eb8:	ce 01       	movw	r24, r28
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     ec0:	60 93 80 25 	sts	0x2580, r22	; 0x802580 <CMDPRGlist+0x34>
     ec4:	70 93 81 25 	sts	0x2581, r23	; 0x802581 <CMDPRGlist+0x35>
     ec8:	80 93 82 25 	sts	0x2582, r24	; 0x802582 <CMDPRGlist+0x36>
     ecc:	90 93 83 25 	sts	0x2583, r25	; 0x802583 <CMDPRGlist+0x37>
     ed0:	f8 c0       	rjmp	.+496    	; 0x10c2 <_Z7readRamv+0x550>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     ed8:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <CMDPRGlist+0x4>
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <_Z7readRamv+0x370>
     ee0:	8a c0       	rjmp	.+276    	; 0xff6 <_Z7readRamv+0x484>
     ee2:	0f 2e       	mov	r0, r31
     ee4:	f1 e5       	ldi	r31, 0x51	; 81
     ee6:	8f 2e       	mov	r8, r31
     ee8:	f5 e2       	ldi	r31, 0x25	; 37
     eea:	9f 2e       	mov	r9, r31
     eec:	f0 2d       	mov	r31, r0
     eee:	a1 2c       	mov	r10, r1
     ef0:	b1 2c       	mov	r11, r1
     ef2:	3e 01       	movw	r6, r28
     ef4:	f5 e0       	ldi	r31, 0x05	; 5
     ef6:	6f 0e       	add	r6, r31
     ef8:	71 1c       	adc	r7, r1
     efa:	ae 01       	movw	r20, r28
     efc:	4f 5f       	subi	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	7a 01       	movw	r14, r20
     f02:	0f 2e       	mov	r0, r31
     f04:	fc e4       	ldi	r31, 0x4C	; 76
     f06:	4f 2e       	mov	r4, r31
     f08:	f5 e2       	ldi	r31, 0x25	; 37
     f0a:	5f 2e       	mov	r5, r31
     f0c:	f0 2d       	mov	r31, r0
     f0e:	26 2c       	mov	r2, r6
     f10:	37 2c       	mov	r3, r7
     f12:	67 01       	movw	r12, r14
     f14:	83 01       	movw	r16, r6
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <_Z7readRamv+0x3ae>
     f18:	18 16       	cp	r1, r24
     f1a:	19 06       	cpc	r1, r25
     f1c:	ec f0       	brlt	.+58     	; 0xf58 <_Z7readRamv+0x3e6>
     f1e:	6b c0       	rjmp	.+214    	; 0xff6 <_Z7readRamv+0x484>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     f26:	f8 01       	movw	r30, r16
     f28:	82 93       	st	-Z, r24
     f2a:	8f 01       	movw	r16, r30
     f2c:	ee 16       	cp	r14, r30
     f2e:	ff 06       	cpc	r15, r31
     f30:	b9 f7       	brne	.-18     	; 0xf20 <_Z7readRamv+0x3ae>
     f32:	c7 01       	movw	r24, r14
     f34:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     f38:	f4 01       	movw	r30, r8
     f3a:	61 93       	st	Z+, r22
     f3c:	71 93       	st	Z+, r23
     f3e:	81 93       	st	Z+, r24
     f40:	91 93       	st	Z+, r25
     f42:	4f 01       	movw	r8, r30
     f44:	ff ef       	ldi	r31, 0xFF	; 255
     f46:	af 1a       	sub	r10, r31
     f48:	bf 0a       	sbc	r11, r31
     f4a:	f2 01       	movw	r30, r4
     f4c:	84 81       	ldd	r24, Z+4	; 0x04
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a8 16       	cp	r10, r24
     f52:	b9 06       	cpc	r11, r25
     f54:	e4 f2       	brlt	.-72     	; 0xf0e <_Z7readRamv+0x39c>
     f56:	e0 cf       	rjmp	.-64     	; 0xf18 <_Z7readRamv+0x3a6>
     f58:	0f 2e       	mov	r0, r31
     f5a:	f0 e6       	ldi	r31, 0x60	; 96
     f5c:	af 2e       	mov	r10, r31
     f5e:	f5 e2       	ldi	r31, 0x25	; 37
     f60:	bf 2e       	mov	r11, r31
     f62:	f0 2d       	mov	r31, r0
     f64:	e1 2c       	mov	r14, r1
     f66:	f1 2c       	mov	r15, r1
     f68:	0f 2e       	mov	r0, r31
     f6a:	fc e4       	ldi	r31, 0x4C	; 76
     f6c:	8f 2e       	mov	r8, r31
     f6e:	f5 e2       	ldi	r31, 0x25	; 37
     f70:	9f 2e       	mov	r9, r31
     f72:	f0 2d       	mov	r31, r0
     f74:	02 2d       	mov	r16, r2
     f76:	13 2d       	mov	r17, r3
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <_Z7readRamv+0x412>
     f7a:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
     f7e:	81 11       	cpse	r24, r1
     f80:	1e c0       	rjmp	.+60     	; 0xfbe <_Z7readRamv+0x44c>
     f82:	39 c0       	rjmp	.+114    	; 0xff6 <_Z7readRamv+0x484>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     f8a:	f8 01       	movw	r30, r16
     f8c:	82 93       	st	-Z, r24
     f8e:	8f 01       	movw	r16, r30
     f90:	ce 16       	cp	r12, r30
     f92:	df 06       	cpc	r13, r31
     f94:	b9 f7       	brne	.-18     	; 0xf84 <_Z7readRamv+0x412>
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
     f9e:	f5 01       	movw	r30, r10
     fa0:	61 93       	st	Z+, r22
     fa2:	71 93       	st	Z+, r23
     fa4:	81 93       	st	Z+, r24
     fa6:	91 93       	st	Z+, r25
     fa8:	5f 01       	movw	r10, r30
     faa:	ff ef       	ldi	r31, 0xFF	; 255
     fac:	ef 1a       	sub	r14, r31
     fae:	ff 0a       	sbc	r15, r31
     fb0:	f4 01       	movw	r30, r8
     fb2:	84 81       	ldd	r24, Z+4	; 0x04
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	e8 16       	cp	r14, r24
     fb8:	f9 06       	cpc	r15, r25
     fba:	e4 f2       	brlt	.-72     	; 0xf74 <_Z7readRamv+0x402>
     fbc:	de cf       	rjmp	.-68     	; 0xf7a <_Z7readRamv+0x408>
     fbe:	0f 2e       	mov	r0, r31
     fc0:	fd e5       	ldi	r31, 0x5D	; 93
     fc2:	ef 2e       	mov	r14, r31
     fc4:	f5 e2       	ldi	r31, 0x25	; 37
     fc6:	ff 2e       	mov	r15, r31
     fc8:	f0 2d       	mov	r31, r0
     fca:	00 e0       	ldi	r16, 0x00	; 0
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	0f 2e       	mov	r0, r31
     fd0:	fc e4       	ldi	r31, 0x4C	; 76
     fd2:	cf 2e       	mov	r12, r31
     fd4:	f5 e2       	ldi	r31, 0x25	; 37
     fd6:	df 2e       	mov	r13, r31
     fd8:	f0 2d       	mov	r31, r0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
     fe0:	f7 01       	movw	r30, r14
     fe2:	81 93       	st	Z+, r24
     fe4:	7f 01       	movw	r14, r30
     fe6:	0f 5f       	subi	r16, 0xFF	; 255
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	f6 01       	movw	r30, r12
     fec:	84 81       	ldd	r24, Z+4	; 0x04
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	08 17       	cp	r16, r24
     ff2:	19 07       	cpc	r17, r25
     ff4:	94 f3       	brlt	.-28     	; 0xfda <_Z7readRamv+0x468>
     ff6:	8e 01       	movw	r16, r28
     ff8:	0b 5f       	subi	r16, 0xFB	; 251
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	ae 01       	movw	r20, r28
     ffe:	4f 5f       	subi	r20, 0xFF	; 255
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	7a 01       	movw	r14, r20
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    100a:	f8 01       	movw	r30, r16
    100c:	82 93       	st	-Z, r24
    100e:	8f 01       	movw	r16, r30
    1010:	ee 16       	cp	r14, r30
    1012:	ff 06       	cpc	r15, r31
    1014:	b9 f7       	brne	.-18     	; 0x1004 <_Z7readRamv+0x492>
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    101e:	60 93 6c 25 	sts	0x256C, r22	; 0x80256c <CMDPRGlist+0x20>
    1022:	70 93 6d 25 	sts	0x256D, r23	; 0x80256d <CMDPRGlist+0x21>
    1026:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <CMDPRGlist+0x22>
    102a:	90 93 6f 25 	sts	0x256F, r25	; 0x80256f <CMDPRGlist+0x23>
    102e:	49 c0       	rjmp	.+146    	; 0x10c2 <_Z7readRamv+0x550>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1036:	0c e4       	ldi	r16, 0x4C	; 76
    1038:	15 e2       	ldi	r17, 0x25	; 37
    103a:	f8 01       	movw	r30, r16
    103c:	80 af       	std	Z+56, r24	; 0x38
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1044:	8c 83       	std	Y+4, r24	; 0x04
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    104c:	8b 83       	std	Y+3, r24	; 0x03
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1066:	f8 01       	movw	r30, r16
    1068:	61 af       	std	Z+57, r22	; 0x39
    106a:	72 af       	std	Z+58, r23	; 0x3a
    106c:	83 af       	std	Z+59, r24	; 0x3b
    106e:	94 af       	std	Z+60, r25	; 0x3c
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1076:	8c 83       	std	Y+4, r24	; 0x04
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1086:	8a 83       	std	Y+2, r24	; 0x02
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1098:	60 93 89 25 	sts	0x2589, r22	; 0x802589 <CMDPRGlist+0x3d>
    109c:	70 93 8a 25 	sts	0x258A, r23	; 0x80258a <CMDPRGlist+0x3e>
    10a0:	80 93 8b 25 	sts	0x258B, r24	; 0x80258b <CMDPRGlist+0x3f>
    10a4:	90 93 8c 25 	sts	0x258C, r25	; 0x80258c <CMDPRGlist+0x40>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    10ae:	80 93 8d 25 	sts	0x258D, r24	; 0x80258d <CMDPRGlist+0x41>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	80 93 8e 25 	sts	0x258E, r24	; 0x80258e <CMDPRGlist+0x42>
    10be:	90 93 8f 25 	sts	0x258F, r25	; 0x80258f <CMDPRGlist+0x43>
    10c2:	24 96       	adiw	r28, 0x04	; 4
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	7f 90       	pop	r7
    10e2:	6f 90       	pop	r6
    10e4:	5f 90       	pop	r5
    10e6:	4f 90       	pop	r4
    10e8:	3f 90       	pop	r3
    10ea:	2f 90       	pop	r2
    10ec:	08 95       	ret

000010ee <_Z10ReadSerialv>:
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <_Z10ReadSerialv+0x6>
    10f4:	1f 92       	push	r1
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	82 e8       	ldi	r24, 0x82	; 130
    10fc:	90 e2       	ldi	r25, 0x20	; 32
    10fe:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
    1102:	87 ee       	ldi	r24, 0xE7	; 231
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	a0 e0       	ldi	r26, 0x00	; 0
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <fk>
    110e:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <fk+0x1>
    1112:	a0 93 96 25 	sts	0x2596, r26	; 0x802596 <fk+0x2>
    1116:	b0 93 97 25 	sts	0x2597, r27	; 0x802597 <fk+0x3>
    111a:	8e ec       	ldi	r24, 0xCE	; 206
    111c:	97 e0       	ldi	r25, 0x07	; 7
    111e:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <ft>
    1122:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <ft+0x1>
    1126:	8e ec       	ldi	r24, 0xCE	; 206
    1128:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <fadd1>
    112c:	87 e0       	ldi	r24, 0x07	; 7
    112e:	80 93 90 25 	sts	0x2590, r24	; 0x802590 <fadd2>
    1132:	e0 e8       	ldi	r30, 0x80	; 128
    1134:	f6 e0       	ldi	r31, 0x06	; 6
    1136:	84 81       	ldd	r24, Z+4	; 0x04
    1138:	80 61       	ori	r24, 0x10	; 16
    113a:	84 83       	std	Z+4, r24	; 0x04
    113c:	84 81       	ldd	r24, Z+4	; 0x04
    113e:	8f 7e       	andi	r24, 0xEF	; 239
    1140:	84 83       	std	Z+4, r24	; 0x04
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1148:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    114c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1150:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    1154:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1164:	8c 83       	std	Y+4, r24	; 0x04
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1174:	8a 83       	std	Y+2, r24	; 0x02
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	1f 92       	push	r1
    1182:	9f 93       	push	r25
    1184:	9b 81       	ldd	r25, Y+3	; 0x03
    1186:	1f 92       	push	r1
    1188:	9f 93       	push	r25
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	1f 92       	push	r1
    118e:	9f 93       	push	r25
    1190:	1f 92       	push	r1
    1192:	8f 93       	push	r24
    1194:	85 e9       	ldi	r24, 0x95	; 149
    1196:	90 e2       	ldi	r25, 0x20	; 32
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	24 96       	adiw	r28, 0x04	; 4
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <_Z14ReadSubProgramj>:
    11b8:	2f 92       	push	r2
    11ba:	3f 92       	push	r3
    11bc:	4f 92       	push	r4
    11be:	5f 92       	push	r5
    11c0:	6f 92       	push	r6
    11c2:	7f 92       	push	r7
    11c4:	8f 92       	push	r8
    11c6:	9f 92       	push	r9
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	00 d0       	rcall	.+0      	; 0x11de <_Z14ReadSubProgramj+0x26>
    11de:	1f 92       	push	r1
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	20 91 98 25 	lds	r18, 0x2598	; 0x802598 <ContinuousRead>
    11e8:	21 11       	cpse	r18, r1
    11ea:	2f c0       	rjmp	.+94     	; 0x124a <_Z14ReadSubProgramj+0x92>
    11ec:	a0 e0       	ldi	r26, 0x00	; 0
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <fk>
    11f4:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <fk+0x1>
    11f8:	a0 93 96 25 	sts	0x2596, r26	; 0x802596 <fk+0x2>
    11fc:	b0 93 97 25 	sts	0x2597, r27	; 0x802597 <fk+0x3>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	aa 1f       	adc	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <ft>
    120c:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <ft+0x1>
    1210:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <fadd1>
    1214:	90 93 90 25 	sts	0x2590, r25	; 0x802590 <fadd2>
    1218:	e0 e8       	ldi	r30, 0x80	; 128
    121a:	f6 e0       	ldi	r31, 0x06	; 6
    121c:	84 81       	ldd	r24, Z+4	; 0x04
    121e:	80 61       	ori	r24, 0x10	; 16
    1220:	84 83       	std	Z+4, r24	; 0x04
    1222:	84 81       	ldd	r24, Z+4	; 0x04
    1224:	8f 7e       	andi	r24, 0xEF	; 239
    1226:	84 83       	std	Z+4, r24	; 0x04
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    122e:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    1232:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1236:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    123a:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 93 98 25 	sts	0x2598, r24	; 0x802598 <ContinuousRead>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1250:	8a 83       	std	Y+2, r24	; 0x02
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	0c e4       	ldi	r16, 0x4C	; 76
    125c:	15 e2       	ldi	r17, 0x25	; 37
    125e:	2a 81       	ldd	r18, Y+2	; 0x02
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	32 2f       	mov	r19, r18
    1264:	22 27       	eor	r18, r18
    1266:	a9 01       	movw	r20, r18
    1268:	48 0f       	add	r20, r24
    126a:	51 1d       	adc	r21, r1
    126c:	f8 01       	movw	r30, r16
    126e:	40 83       	st	Z, r20
    1270:	51 83       	std	Z+1, r21	; 0x01
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1278:	f8 01       	movw	r30, r16
    127a:	82 83       	std	Z+2, r24	; 0x02
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1282:	f8 01       	movw	r30, r16
    1284:	83 83       	std	Z+3, r24	; 0x03
    1286:	88 23       	and	r24, r24
    1288:	21 f0       	breq	.+8      	; 0x1292 <_Z14ReadSubProgramj+0xda>
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	09 f4       	brne	.+2      	; 0x1290 <_Z14ReadSubProgramj+0xd8>
    128e:	1e c1       	rjmp	.+572    	; 0x14cc <_Z14ReadSubProgramj+0x314>
    1290:	cb c1       	rjmp	.+918    	; 0x1628 <_Z14ReadSubProgramj+0x470>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1298:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <CMDPRGlist+0x4>
    129c:	88 23       	and	r24, r24
    129e:	09 f4       	brne	.+2      	; 0x12a2 <_Z14ReadSubProgramj+0xea>
    12a0:	8a c0       	rjmp	.+276    	; 0x13b6 <_Z14ReadSubProgramj+0x1fe>
    12a2:	0f 2e       	mov	r0, r31
    12a4:	f1 e5       	ldi	r31, 0x51	; 81
    12a6:	8f 2e       	mov	r8, r31
    12a8:	f5 e2       	ldi	r31, 0x25	; 37
    12aa:	9f 2e       	mov	r9, r31
    12ac:	f0 2d       	mov	r31, r0
    12ae:	a1 2c       	mov	r10, r1
    12b0:	b1 2c       	mov	r11, r1
    12b2:	3e 01       	movw	r6, r28
    12b4:	f5 e0       	ldi	r31, 0x05	; 5
    12b6:	6f 0e       	add	r6, r31
    12b8:	71 1c       	adc	r7, r1
    12ba:	ae 01       	movw	r20, r28
    12bc:	4f 5f       	subi	r20, 0xFF	; 255
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	7a 01       	movw	r14, r20
    12c2:	0f 2e       	mov	r0, r31
    12c4:	fc e4       	ldi	r31, 0x4C	; 76
    12c6:	4f 2e       	mov	r4, r31
    12c8:	f5 e2       	ldi	r31, 0x25	; 37
    12ca:	5f 2e       	mov	r5, r31
    12cc:	f0 2d       	mov	r31, r0
    12ce:	26 2c       	mov	r2, r6
    12d0:	37 2c       	mov	r3, r7
    12d2:	67 01       	movw	r12, r14
    12d4:	83 01       	movw	r16, r6
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <_Z14ReadSubProgramj+0x128>
    12d8:	18 16       	cp	r1, r24
    12da:	19 06       	cpc	r1, r25
    12dc:	ec f0       	brlt	.+58     	; 0x1318 <_Z14ReadSubProgramj+0x160>
    12de:	6b c0       	rjmp	.+214    	; 0x13b6 <_Z14ReadSubProgramj+0x1fe>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    12e6:	f8 01       	movw	r30, r16
    12e8:	82 93       	st	-Z, r24
    12ea:	8f 01       	movw	r16, r30
    12ec:	ee 16       	cp	r14, r30
    12ee:	ff 06       	cpc	r15, r31
    12f0:	b9 f7       	brne	.-18     	; 0x12e0 <_Z14ReadSubProgramj+0x128>
    12f2:	c7 01       	movw	r24, r14
    12f4:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    12f8:	f4 01       	movw	r30, r8
    12fa:	61 93       	st	Z+, r22
    12fc:	71 93       	st	Z+, r23
    12fe:	81 93       	st	Z+, r24
    1300:	91 93       	st	Z+, r25
    1302:	4f 01       	movw	r8, r30
    1304:	ff ef       	ldi	r31, 0xFF	; 255
    1306:	af 1a       	sub	r10, r31
    1308:	bf 0a       	sbc	r11, r31
    130a:	f2 01       	movw	r30, r4
    130c:	84 81       	ldd	r24, Z+4	; 0x04
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a8 16       	cp	r10, r24
    1312:	b9 06       	cpc	r11, r25
    1314:	e4 f2       	brlt	.-72     	; 0x12ce <_Z14ReadSubProgramj+0x116>
    1316:	e0 cf       	rjmp	.-64     	; 0x12d8 <_Z14ReadSubProgramj+0x120>
    1318:	0f 2e       	mov	r0, r31
    131a:	f0 e6       	ldi	r31, 0x60	; 96
    131c:	af 2e       	mov	r10, r31
    131e:	f5 e2       	ldi	r31, 0x25	; 37
    1320:	bf 2e       	mov	r11, r31
    1322:	f0 2d       	mov	r31, r0
    1324:	e1 2c       	mov	r14, r1
    1326:	f1 2c       	mov	r15, r1
    1328:	0f 2e       	mov	r0, r31
    132a:	fc e4       	ldi	r31, 0x4C	; 76
    132c:	8f 2e       	mov	r8, r31
    132e:	f5 e2       	ldi	r31, 0x25	; 37
    1330:	9f 2e       	mov	r9, r31
    1332:	f0 2d       	mov	r31, r0
    1334:	02 2d       	mov	r16, r2
    1336:	13 2d       	mov	r17, r3
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <_Z14ReadSubProgramj+0x18c>
    133a:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
    133e:	81 11       	cpse	r24, r1
    1340:	1e c0       	rjmp	.+60     	; 0x137e <_Z14ReadSubProgramj+0x1c6>
    1342:	39 c0       	rjmp	.+114    	; 0x13b6 <_Z14ReadSubProgramj+0x1fe>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    134a:	f8 01       	movw	r30, r16
    134c:	82 93       	st	-Z, r24
    134e:	8f 01       	movw	r16, r30
    1350:	ec 15       	cp	r30, r12
    1352:	fd 05       	cpc	r31, r13
    1354:	b9 f7       	brne	.-18     	; 0x1344 <_Z14ReadSubProgramj+0x18c>
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    135e:	f5 01       	movw	r30, r10
    1360:	61 93       	st	Z+, r22
    1362:	71 93       	st	Z+, r23
    1364:	81 93       	st	Z+, r24
    1366:	91 93       	st	Z+, r25
    1368:	5f 01       	movw	r10, r30
    136a:	ff ef       	ldi	r31, 0xFF	; 255
    136c:	ef 1a       	sub	r14, r31
    136e:	ff 0a       	sbc	r15, r31
    1370:	f4 01       	movw	r30, r8
    1372:	84 81       	ldd	r24, Z+4	; 0x04
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	e8 16       	cp	r14, r24
    1378:	f9 06       	cpc	r15, r25
    137a:	e4 f2       	brlt	.-72     	; 0x1334 <_Z14ReadSubProgramj+0x17c>
    137c:	de cf       	rjmp	.-68     	; 0x133a <_Z14ReadSubProgramj+0x182>
    137e:	0f 2e       	mov	r0, r31
    1380:	fd e5       	ldi	r31, 0x5D	; 93
    1382:	ef 2e       	mov	r14, r31
    1384:	f5 e2       	ldi	r31, 0x25	; 37
    1386:	ff 2e       	mov	r15, r31
    1388:	f0 2d       	mov	r31, r0
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	0f 2e       	mov	r0, r31
    1390:	fc e4       	ldi	r31, 0x4C	; 76
    1392:	cf 2e       	mov	r12, r31
    1394:	f5 e2       	ldi	r31, 0x25	; 37
    1396:	df 2e       	mov	r13, r31
    1398:	f0 2d       	mov	r31, r0
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    13a0:	f7 01       	movw	r30, r14
    13a2:	81 93       	st	Z+, r24
    13a4:	7f 01       	movw	r14, r30
    13a6:	0f 5f       	subi	r16, 0xFF	; 255
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	f6 01       	movw	r30, r12
    13ac:	84 81       	ldd	r24, Z+4	; 0x04
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	08 17       	cp	r16, r24
    13b2:	19 07       	cpc	r17, r25
    13b4:	94 f3       	brlt	.-28     	; 0x139a <_Z14ReadSubProgramj+0x1e2>
    13b6:	7e 01       	movw	r14, r28
    13b8:	f5 e0       	ldi	r31, 0x05	; 5
    13ba:	ef 0e       	add	r14, r31
    13bc:	f1 1c       	adc	r15, r1
    13be:	8e 01       	movw	r16, r28
    13c0:	0f 5f       	subi	r16, 0xFF	; 255
    13c2:	1f 4f       	sbci	r17, 0xFF	; 255
    13c4:	67 01       	movw	r12, r14
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    13cc:	f6 01       	movw	r30, r12
    13ce:	82 93       	st	-Z, r24
    13d0:	6f 01       	movw	r12, r30
    13d2:	e0 17       	cp	r30, r16
    13d4:	f1 07       	cpc	r31, r17
    13d6:	b9 f7       	brne	.-18     	; 0x13c6 <_Z14ReadSubProgramj+0x20e>
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    13e0:	60 93 6c 25 	sts	0x256C, r22	; 0x80256c <CMDPRGlist+0x20>
    13e4:	70 93 6d 25 	sts	0x256D, r23	; 0x80256d <CMDPRGlist+0x21>
    13e8:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <CMDPRGlist+0x22>
    13ec:	90 93 6f 25 	sts	0x256F, r25	; 0x80256f <CMDPRGlist+0x23>
    13f0:	67 01       	movw	r12, r14
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    13f8:	f6 01       	movw	r30, r12
    13fa:	82 93       	st	-Z, r24
    13fc:	6f 01       	movw	r12, r30
    13fe:	e0 17       	cp	r30, r16
    1400:	f1 07       	cpc	r31, r17
    1402:	b9 f7       	brne	.-18     	; 0x13f2 <_Z14ReadSubProgramj+0x23a>
    1404:	ce 01       	movw	r24, r28
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    140c:	60 93 70 25 	sts	0x2570, r22	; 0x802570 <CMDPRGlist+0x24>
    1410:	70 93 71 25 	sts	0x2571, r23	; 0x802571 <CMDPRGlist+0x25>
    1414:	80 93 72 25 	sts	0x2572, r24	; 0x802572 <CMDPRGlist+0x26>
    1418:	90 93 73 25 	sts	0x2573, r25	; 0x802573 <CMDPRGlist+0x27>
    141c:	67 01       	movw	r12, r14
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1424:	f6 01       	movw	r30, r12
    1426:	82 93       	st	-Z, r24
    1428:	6f 01       	movw	r12, r30
    142a:	e0 17       	cp	r30, r16
    142c:	f1 07       	cpc	r31, r17
    142e:	b9 f7       	brne	.-18     	; 0x141e <_Z14ReadSubProgramj+0x266>
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1438:	60 93 74 25 	sts	0x2574, r22	; 0x802574 <CMDPRGlist+0x28>
    143c:	70 93 75 25 	sts	0x2575, r23	; 0x802575 <CMDPRGlist+0x29>
    1440:	80 93 76 25 	sts	0x2576, r24	; 0x802576 <CMDPRGlist+0x2a>
    1444:	90 93 77 25 	sts	0x2577, r25	; 0x802577 <CMDPRGlist+0x2b>
    1448:	67 01       	movw	r12, r14
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1450:	f6 01       	movw	r30, r12
    1452:	82 93       	st	-Z, r24
    1454:	6f 01       	movw	r12, r30
    1456:	e0 17       	cp	r30, r16
    1458:	f1 07       	cpc	r31, r17
    145a:	b9 f7       	brne	.-18     	; 0x144a <_Z14ReadSubProgramj+0x292>
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1464:	60 93 78 25 	sts	0x2578, r22	; 0x802578 <CMDPRGlist+0x2c>
    1468:	70 93 79 25 	sts	0x2579, r23	; 0x802579 <CMDPRGlist+0x2d>
    146c:	80 93 7a 25 	sts	0x257A, r24	; 0x80257a <CMDPRGlist+0x2e>
    1470:	90 93 7b 25 	sts	0x257B, r25	; 0x80257b <CMDPRGlist+0x2f>
    1474:	67 01       	movw	r12, r14
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    147c:	f6 01       	movw	r30, r12
    147e:	82 93       	st	-Z, r24
    1480:	6f 01       	movw	r12, r30
    1482:	e0 17       	cp	r30, r16
    1484:	f1 07       	cpc	r31, r17
    1486:	b9 f7       	brne	.-18     	; 0x1476 <_Z14ReadSubProgramj+0x2be>
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1490:	60 93 7c 25 	sts	0x257C, r22	; 0x80257c <CMDPRGlist+0x30>
    1494:	70 93 7d 25 	sts	0x257D, r23	; 0x80257d <CMDPRGlist+0x31>
    1498:	80 93 7e 25 	sts	0x257E, r24	; 0x80257e <CMDPRGlist+0x32>
    149c:	90 93 7f 25 	sts	0x257F, r25	; 0x80257f <CMDPRGlist+0x33>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    14a6:	f7 01       	movw	r30, r14
    14a8:	82 93       	st	-Z, r24
    14aa:	7f 01       	movw	r14, r30
    14ac:	e0 17       	cp	r30, r16
    14ae:	f1 07       	cpc	r31, r17
    14b0:	b9 f7       	brne	.-18     	; 0x14a0 <_Z14ReadSubProgramj+0x2e8>
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    14ba:	60 93 80 25 	sts	0x2580, r22	; 0x802580 <CMDPRGlist+0x34>
    14be:	70 93 81 25 	sts	0x2581, r23	; 0x802581 <CMDPRGlist+0x35>
    14c2:	80 93 82 25 	sts	0x2582, r24	; 0x802582 <CMDPRGlist+0x36>
    14c6:	90 93 83 25 	sts	0x2583, r25	; 0x802583 <CMDPRGlist+0x37>
    14ca:	ae c0       	rjmp	.+348    	; 0x1628 <_Z14ReadSubProgramj+0x470>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    14d2:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <CMDPRGlist+0x4>
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <_Z14ReadSubProgramj+0x324>
    14da:	8a c0       	rjmp	.+276    	; 0x15f0 <_Z14ReadSubProgramj+0x438>
    14dc:	0f 2e       	mov	r0, r31
    14de:	f1 e5       	ldi	r31, 0x51	; 81
    14e0:	8f 2e       	mov	r8, r31
    14e2:	f5 e2       	ldi	r31, 0x25	; 37
    14e4:	9f 2e       	mov	r9, r31
    14e6:	f0 2d       	mov	r31, r0
    14e8:	a1 2c       	mov	r10, r1
    14ea:	b1 2c       	mov	r11, r1
    14ec:	3e 01       	movw	r6, r28
    14ee:	f5 e0       	ldi	r31, 0x05	; 5
    14f0:	6f 0e       	add	r6, r31
    14f2:	71 1c       	adc	r7, r1
    14f4:	ae 01       	movw	r20, r28
    14f6:	4f 5f       	subi	r20, 0xFF	; 255
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	7a 01       	movw	r14, r20
    14fc:	0f 2e       	mov	r0, r31
    14fe:	fc e4       	ldi	r31, 0x4C	; 76
    1500:	4f 2e       	mov	r4, r31
    1502:	f5 e2       	ldi	r31, 0x25	; 37
    1504:	5f 2e       	mov	r5, r31
    1506:	f0 2d       	mov	r31, r0
    1508:	26 2c       	mov	r2, r6
    150a:	37 2c       	mov	r3, r7
    150c:	67 01       	movw	r12, r14
    150e:	83 01       	movw	r16, r6
    1510:	04 c0       	rjmp	.+8      	; 0x151a <_Z14ReadSubProgramj+0x362>
    1512:	18 16       	cp	r1, r24
    1514:	19 06       	cpc	r1, r25
    1516:	ec f0       	brlt	.+58     	; 0x1552 <_Z14ReadSubProgramj+0x39a>
    1518:	6b c0       	rjmp	.+214    	; 0x15f0 <_Z14ReadSubProgramj+0x438>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1520:	f8 01       	movw	r30, r16
    1522:	82 93       	st	-Z, r24
    1524:	8f 01       	movw	r16, r30
    1526:	ee 16       	cp	r14, r30
    1528:	ff 06       	cpc	r15, r31
    152a:	b9 f7       	brne	.-18     	; 0x151a <_Z14ReadSubProgramj+0x362>
    152c:	c7 01       	movw	r24, r14
    152e:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1532:	f4 01       	movw	r30, r8
    1534:	61 93       	st	Z+, r22
    1536:	71 93       	st	Z+, r23
    1538:	81 93       	st	Z+, r24
    153a:	91 93       	st	Z+, r25
    153c:	4f 01       	movw	r8, r30
    153e:	ff ef       	ldi	r31, 0xFF	; 255
    1540:	af 1a       	sub	r10, r31
    1542:	bf 0a       	sbc	r11, r31
    1544:	f2 01       	movw	r30, r4
    1546:	84 81       	ldd	r24, Z+4	; 0x04
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a8 16       	cp	r10, r24
    154c:	b9 06       	cpc	r11, r25
    154e:	e4 f2       	brlt	.-72     	; 0x1508 <_Z14ReadSubProgramj+0x350>
    1550:	e0 cf       	rjmp	.-64     	; 0x1512 <_Z14ReadSubProgramj+0x35a>
    1552:	0f 2e       	mov	r0, r31
    1554:	f0 e6       	ldi	r31, 0x60	; 96
    1556:	af 2e       	mov	r10, r31
    1558:	f5 e2       	ldi	r31, 0x25	; 37
    155a:	bf 2e       	mov	r11, r31
    155c:	f0 2d       	mov	r31, r0
    155e:	e1 2c       	mov	r14, r1
    1560:	f1 2c       	mov	r15, r1
    1562:	0f 2e       	mov	r0, r31
    1564:	fc e4       	ldi	r31, 0x4C	; 76
    1566:	8f 2e       	mov	r8, r31
    1568:	f5 e2       	ldi	r31, 0x25	; 37
    156a:	9f 2e       	mov	r9, r31
    156c:	f0 2d       	mov	r31, r0
    156e:	02 2d       	mov	r16, r2
    1570:	13 2d       	mov	r17, r3
    1572:	05 c0       	rjmp	.+10     	; 0x157e <_Z14ReadSubProgramj+0x3c6>
    1574:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
    1578:	81 11       	cpse	r24, r1
    157a:	1e c0       	rjmp	.+60     	; 0x15b8 <_Z14ReadSubProgramj+0x400>
    157c:	39 c0       	rjmp	.+114    	; 0x15f0 <_Z14ReadSubProgramj+0x438>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1584:	f8 01       	movw	r30, r16
    1586:	82 93       	st	-Z, r24
    1588:	8f 01       	movw	r16, r30
    158a:	ce 16       	cp	r12, r30
    158c:	df 06       	cpc	r13, r31
    158e:	b9 f7       	brne	.-18     	; 0x157e <_Z14ReadSubProgramj+0x3c6>
    1590:	ce 01       	movw	r24, r28
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1598:	f5 01       	movw	r30, r10
    159a:	61 93       	st	Z+, r22
    159c:	71 93       	st	Z+, r23
    159e:	81 93       	st	Z+, r24
    15a0:	91 93       	st	Z+, r25
    15a2:	5f 01       	movw	r10, r30
    15a4:	ff ef       	ldi	r31, 0xFF	; 255
    15a6:	ef 1a       	sub	r14, r31
    15a8:	ff 0a       	sbc	r15, r31
    15aa:	f4 01       	movw	r30, r8
    15ac:	84 81       	ldd	r24, Z+4	; 0x04
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	e8 16       	cp	r14, r24
    15b2:	f9 06       	cpc	r15, r25
    15b4:	e4 f2       	brlt	.-72     	; 0x156e <_Z14ReadSubProgramj+0x3b6>
    15b6:	de cf       	rjmp	.-68     	; 0x1574 <_Z14ReadSubProgramj+0x3bc>
    15b8:	0f 2e       	mov	r0, r31
    15ba:	fd e5       	ldi	r31, 0x5D	; 93
    15bc:	ef 2e       	mov	r14, r31
    15be:	f5 e2       	ldi	r31, 0x25	; 37
    15c0:	ff 2e       	mov	r15, r31
    15c2:	f0 2d       	mov	r31, r0
    15c4:	00 e0       	ldi	r16, 0x00	; 0
    15c6:	10 e0       	ldi	r17, 0x00	; 0
    15c8:	0f 2e       	mov	r0, r31
    15ca:	fc e4       	ldi	r31, 0x4C	; 76
    15cc:	cf 2e       	mov	r12, r31
    15ce:	f5 e2       	ldi	r31, 0x25	; 37
    15d0:	df 2e       	mov	r13, r31
    15d2:	f0 2d       	mov	r31, r0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    15da:	f7 01       	movw	r30, r14
    15dc:	81 93       	st	Z+, r24
    15de:	7f 01       	movw	r14, r30
    15e0:	0f 5f       	subi	r16, 0xFF	; 255
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	f6 01       	movw	r30, r12
    15e6:	84 81       	ldd	r24, Z+4	; 0x04
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	08 17       	cp	r16, r24
    15ec:	19 07       	cpc	r17, r25
    15ee:	94 f3       	brlt	.-28     	; 0x15d4 <_Z14ReadSubProgramj+0x41c>
    15f0:	8e 01       	movw	r16, r28
    15f2:	0b 5f       	subi	r16, 0xFB	; 251
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	ae 01       	movw	r20, r28
    15f8:	4f 5f       	subi	r20, 0xFF	; 255
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	7a 01       	movw	r14, r20
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1604:	f8 01       	movw	r30, r16
    1606:	82 93       	st	-Z, r24
    1608:	8f 01       	movw	r16, r30
    160a:	ee 16       	cp	r14, r30
    160c:	ff 06       	cpc	r15, r31
    160e:	b9 f7       	brne	.-18     	; 0x15fe <_Z14ReadSubProgramj+0x446>
    1610:	ce 01       	movw	r24, r28
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	0e 94 13 04 	call	0x826	; 0x826 <_Z4btolPc>
    1618:	60 93 6c 25 	sts	0x256C, r22	; 0x80256c <CMDPRGlist+0x20>
    161c:	70 93 6d 25 	sts	0x256D, r23	; 0x80256d <CMDPRGlist+0x21>
    1620:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <CMDPRGlist+0x22>
    1624:	90 93 6f 25 	sts	0x256F, r25	; 0x80256f <CMDPRGlist+0x23>
    1628:	24 96       	adiw	r28, 0x04	; 4
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	9f 90       	pop	r9
    1644:	8f 90       	pop	r8
    1646:	7f 90       	pop	r7
    1648:	6f 90       	pop	r6
    164a:	5f 90       	pop	r5
    164c:	4f 90       	pop	r4
    164e:	3f 90       	pop	r3
    1650:	2f 90       	pop	r2
    1652:	08 95       	ret

00001654 <_Z11WriteSeriall>:
    1654:	7f 92       	push	r7
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	00 d0       	rcall	.+0      	; 0x1670 <_Z11WriteSeriall+0x1c>
    1670:	1f 92       	push	r1
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	4b 01       	movw	r8, r22
    1678:	5c 01       	movw	r10, r24
    167a:	87 ee       	ldi	r24, 0xE7	; 231
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <fk>
    1686:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <fk+0x1>
    168a:	a0 93 96 25 	sts	0x2596, r26	; 0x802596 <fk+0x2>
    168e:	b0 93 97 25 	sts	0x2597, r27	; 0x802597 <fk+0x3>
    1692:	8e ec       	ldi	r24, 0xCE	; 206
    1694:	97 e0       	ldi	r25, 0x07	; 7
    1696:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <ft>
    169a:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <ft+0x1>
    169e:	8e ec       	ldi	r24, 0xCE	; 206
    16a0:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <fadd1>
    16a4:	87 e0       	ldi	r24, 0x07	; 7
    16a6:	80 93 90 25 	sts	0x2590, r24	; 0x802590 <fadd2>
    16aa:	00 e8       	ldi	r16, 0x80	; 128
    16ac:	16 e0       	ldi	r17, 0x06	; 6
    16ae:	f8 01       	movw	r30, r16
    16b0:	84 81       	ldd	r24, Z+4	; 0x04
    16b2:	80 61       	ori	r24, 0x10	; 16
    16b4:	84 83       	std	Z+4, r24	; 0x04
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	8f 7e       	andi	r24, 0xEF	; 239
    16ba:	84 83       	std	Z+4, r24	; 0x04
    16bc:	81 e8       	ldi	r24, 0x81	; 129
    16be:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    16c2:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    16c6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    16ca:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    16ce:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    16d8:	f8 01       	movw	r30, r16
    16da:	84 81       	ldd	r24, Z+4	; 0x04
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	84 83       	std	Z+4, r24	; 0x04
    16e0:	0f 2e       	mov	r0, r31
    16e2:	f0 ee       	ldi	r31, 0xE0	; 224
    16e4:	ef 2e       	mov	r14, r31
    16e6:	f7 e0       	ldi	r31, 0x07	; 7
    16e8:	ff 2e       	mov	r15, r31
    16ea:	f0 2d       	mov	r31, r0
    16ec:	0f 2e       	mov	r0, r31
    16ee:	f3 eb       	ldi	r31, 0xB3	; 179
    16f0:	cf 2e       	mov	r12, r31
    16f2:	f0 e2       	ldi	r31, 0x20	; 32
    16f4:	df 2e       	mov	r13, r31
    16f6:	f0 2d       	mov	r31, r0
    16f8:	f8 01       	movw	r30, r16
    16fa:	84 81       	ldd	r24, Z+4	; 0x04
    16fc:	8f 7e       	andi	r24, 0xEF	; 239
    16fe:	84 83       	std	Z+4, r24	; 0x04
    1700:	f7 01       	movw	r30, r14
    1702:	84 81       	ldd	r24, Z+4	; 0x04
    1704:	80 ff       	sbrs	r24, 0
    1706:	03 c0       	rjmp	.+6      	; 0x170e <_Z11WriteSeriall+0xba>
    1708:	84 81       	ldd	r24, Z+4	; 0x04
    170a:	84 83       	std	Z+4, r24	; 0x04
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <_Z11WriteSeriall+0xc2>
    170e:	f7 01       	movw	r30, r14
    1710:	84 81       	ldd	r24, Z+4	; 0x04
    1712:	81 60       	ori	r24, 0x01	; 1
    1714:	84 83       	std	Z+4, r24	; 0x04
    1716:	87 ed       	ldi	r24, 0xD7	; 215
    1718:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1722:	78 2e       	mov	r7, r24
    1724:	1f 92       	push	r1
    1726:	8f 93       	push	r24
    1728:	df 92       	push	r13
    172a:	cf 92       	push	r12
    172c:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    1730:	f8 01       	movw	r30, r16
    1732:	84 81       	ldd	r24, Z+4	; 0x04
    1734:	80 61       	ori	r24, 0x10	; 16
    1736:	84 83       	std	Z+4, r24	; 0x04
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	77 20       	and	r7, r7
    1742:	d4 f6       	brge	.-76     	; 0x16f8 <_Z11WriteSeriall+0xa4>
    1744:	e0 e8       	ldi	r30, 0x80	; 128
    1746:	f6 e0       	ldi	r31, 0x06	; 6
    1748:	84 81       	ldd	r24, Z+4	; 0x04
    174a:	8f 7e       	andi	r24, 0xEF	; 239
    174c:	84 83       	std	Z+4, r24	; 0x04
    174e:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7007e4>
    1752:	81 ff       	sbrs	r24, 1
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <_Z11WriteSeriall+0x10e>
    1756:	e0 ee       	ldi	r30, 0xE0	; 224
    1758:	f7 e0       	ldi	r31, 0x07	; 7
    175a:	84 81       	ldd	r24, Z+4	; 0x04
    175c:	8e 7f       	andi	r24, 0xFE	; 254
    175e:	84 83       	std	Z+4, r24	; 0x04
    1760:	05 c0       	rjmp	.+10     	; 0x176c <_Z11WriteSeriall+0x118>
    1762:	e0 ee       	ldi	r30, 0xE0	; 224
    1764:	f7 e0       	ldi	r31, 0x07	; 7
    1766:	84 81       	ldd	r24, Z+4	; 0x04
    1768:	82 60       	ori	r24, 0x02	; 2
    176a:	84 83       	std	Z+4, r24	; 0x04
    176c:	84 e8       	ldi	r24, 0x84	; 132
    176e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1772:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    1776:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    177a:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    177e:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1788:	ae 01       	movw	r20, r28
    178a:	4f 5f       	subi	r20, 0xFF	; 255
    178c:	5f 4f       	sbci	r21, 0xFF	; 255
    178e:	c5 01       	movw	r24, r10
    1790:	b4 01       	movw	r22, r8
    1792:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z4ltoblPc>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	1f 92       	push	r1
    179a:	8f 93       	push	r24
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	1f 92       	push	r1
    17a0:	8f 93       	push	r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	1f 92       	push	r1
    17a6:	8f 93       	push	r24
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	1f 92       	push	r1
    17ac:	8f 93       	push	r24
    17ae:	80 ec       	ldi	r24, 0xC0	; 192
    17b0:	90 e2       	ldi	r25, 0x20	; 32
    17b2:	9f 93       	push	r25
    17b4:	8f 93       	push	r24
    17b6:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17d2:	00 e8       	ldi	r16, 0x80	; 128
    17d4:	16 e0       	ldi	r17, 0x06	; 6
    17d6:	f8 01       	movw	r30, r16
    17d8:	84 81       	ldd	r24, Z+4	; 0x04
    17da:	80 61       	ori	r24, 0x10	; 16
    17dc:	84 83       	std	Z+4, r24	; 0x04
    17de:	84 81       	ldd	r24, Z+4	; 0x04
    17e0:	8f 7e       	andi	r24, 0xEF	; 239
    17e2:	84 83       	std	Z+4, r24	; 0x04
    17e4:	83 e8       	ldi	r24, 0x83	; 131
    17e6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17ea:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <fadd2>
    17ee:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17f2:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <fadd1>
    17f6:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	0e 94 03 04 	call	0x806	; 0x806 <_Z17spie_master_tx_rxh>
    1800:	f8 01       	movw	r30, r16
    1802:	84 81       	ldd	r24, Z+4	; 0x04
    1804:	80 61       	ori	r24, 0x10	; 16
    1806:	84 83       	std	Z+4, r24	; 0x04
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	24 96       	adiw	r28, 0x04	; 4
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	08 95       	ret

0000182e <_Z9tcc0_initv>:
    182e:	2f b7       	in	r18, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	e0 e0       	ldi	r30, 0x00	; 0
    1834:	f8 e0       	ldi	r31, 0x08	; 8
    1836:	10 82       	st	Z, r1
    1838:	8c e0       	ldi	r24, 0x0C	; 12
    183a:	81 87       	std	Z+9, r24	; 0x09
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 83       	st	Z, r24
    1840:	81 83       	std	Z+1, r24	; 0x01
    1842:	13 82       	std	Z+3, r1	; 0x03
    1844:	14 82       	std	Z+4, r1	; 0x04
    1846:	16 82       	std	Z+6, r1	; 0x06
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	87 83       	std	Z+7, r24	; 0x07
    184c:	a0 e9       	ldi	r26, 0x90	; 144
    184e:	b8 e0       	ldi	r27, 0x08	; 8
    1850:	8c 91       	ld	r24, X
    1852:	8e 7f       	andi	r24, 0xFE	; 254
    1854:	8c 93       	st	X, r24
    1856:	a0 e9       	ldi	r26, 0x90	; 144
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	19 96       	adiw	r26, 0x09	; 9
    185c:	8c 91       	ld	r24, X
    185e:	19 97       	sbiw	r26, 0x09	; 9
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	98 ed       	ldi	r25, 0xD8	; 216
    1864:	94 bf       	out	0x34, r25	; 52
    1866:	19 96       	adiw	r26, 0x09	; 9
    1868:	8c 93       	st	X, r24
    186a:	a0 e8       	ldi	r26, 0x80	; 128
    186c:	b8 e0       	ldi	r27, 0x08	; 8
    186e:	1c 92       	st	X, r1
    1870:	18 96       	adiw	r26, 0x08	; 8
    1872:	1c 92       	st	X, r1
    1874:	18 97       	sbiw	r26, 0x08	; 8
    1876:	19 96       	adiw	r26, 0x09	; 9
    1878:	1c 92       	st	X, r1
    187a:	19 97       	sbiw	r26, 0x09	; 9
    187c:	1c 96       	adiw	r26, 0x0c	; 12
    187e:	1c 92       	st	X, r1
    1880:	1c 97       	sbiw	r26, 0x0c	; 12
    1882:	13 96       	adiw	r26, 0x03	; 3
    1884:	8c 91       	ld	r24, X
    1886:	13 97       	sbiw	r26, 0x03	; 3
    1888:	88 7e       	andi	r24, 0xE8	; 232
    188a:	13 96       	adiw	r26, 0x03	; 3
    188c:	8c 93       	st	X, r24
    188e:	13 97       	sbiw	r26, 0x03	; 3
    1890:	12 96       	adiw	r26, 0x02	; 2
    1892:	1c 92       	st	X, r1
    1894:	12 97       	sbiw	r26, 0x02	; 2
    1896:	14 96       	adiw	r26, 0x04	; 4
    1898:	8c 91       	ld	r24, X
    189a:	14 97       	sbiw	r26, 0x04	; 4
    189c:	14 96       	adiw	r26, 0x04	; 4
    189e:	9c 91       	ld	r25, X
    18a0:	14 97       	sbiw	r26, 0x04	; 4
    18a2:	84 70       	andi	r24, 0x04	; 4
    18a4:	89 2b       	or	r24, r25
    18a6:	14 96       	adiw	r26, 0x04	; 4
    18a8:	8c 93       	st	X, r24
    18aa:	84 85       	ldd	r24, Z+12	; 0x0c
    18ac:	84 87       	std	Z+12, r24	; 0x0c
    18ae:	10 a2       	std	Z+32, r1	; 0x20
    18b0:	11 a2       	std	Z+33, r1	; 0x21
    18b2:	16 a2       	std	Z+38, r1	; 0x26
    18b4:	17 a2       	std	Z+39, r1	; 0x27
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
    18ba:	80 a7       	std	Z+40, r24	; 0x28
    18bc:	91 a7       	std	Z+41, r25	; 0x29
    18be:	12 a6       	std	Z+42, r1	; 0x2a
    18c0:	13 a6       	std	Z+43, r1	; 0x2b
    18c2:	14 a6       	std	Z+44, r1	; 0x2c
    18c4:	15 a6       	std	Z+45, r1	; 0x2d
    18c6:	16 a6       	std	Z+46, r1	; 0x2e
    18c8:	17 a6       	std	Z+47, r1	; 0x2f
    18ca:	2f bf       	out	0x3f, r18	; 63
    18cc:	08 95       	ret

000018ce <_Z9tcc1_initv>:

// Note: The correct PORTC direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    18ce:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    18d0:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    18d2:	e0 e4       	ldi	r30, 0x40	; 64
    18d4:	f8 e0       	ldi	r31, 0x08	; 8
    18d6:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    18d8:	8c e0       	ldi	r24, 0x0C	; 12
    18da:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCC1);
// Clock source: ClkPer/8
TCC1.CTRLA=TC_CLKSEL_DIV8_gc;
    18dc:	84 e0       	ldi	r24, 0x04	; 4
    18de:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCC1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    18e0:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCC1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    18e2:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCC1.CTRLE=(0<<TC1_BYTEM_bp);
    18e4:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Medium Level
// Error interrupt: Disabled
TCC1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCC1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    18ea:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESC.CTRLA&= ~HIRES_HREN1_bm;
    18ec:	a0 e9       	ldi	r26, 0x90	; 144
    18ee:	b8 e0       	ldi	r27, 0x08	; 8
    18f0:	8c 91       	ld	r24, X
    18f2:	8d 7f       	andi	r24, 0xFD	; 253
    18f4:	8c 93       	st	X, r24

// Clear the interrupt flags
TCC1.INTFLAGS=TCC1.INTFLAGS;
    18f6:	84 85       	ldd	r24, Z+12	; 0x0c
    18f8:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCC1.CNT=0x0000;
    18fa:	10 a2       	std	Z+32, r1	; 0x20
    18fc:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCC1.PER=0x9C3F;
    18fe:	2f e3       	ldi	r18, 0x3F	; 63
    1900:	3c e9       	ldi	r19, 0x9C	; 156
    1902:	26 a3       	std	Z+38, r18	; 0x26
    1904:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCC1.CCA=0x0000;
    1906:	10 a6       	std	Z+40, r1	; 0x28
    1908:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCC1.CCB=0x0000;
    190a:	12 a6       	std	Z+42, r1	; 0x2a
    190c:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    190e:	9f bf       	out	0x3f, r25	; 63
    1910:	08 95       	ret

00001912 <_Z9tcd1_initv>:

// Note: The correct PORTD direction for the Compare Channels
// outputs is configured in the ports_init function.

// Save interrupts enabled/disabled state
s=SREG;
    1912:	9f b7       	in	r25, 0x3f	; 63
// Disable interrupts
asm("cli");
    1914:	f8 94       	cli

// Disable a Timer/Counter type TC1
void tc1_disable(TC1_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    1916:	e0 e4       	ldi	r30, 0x40	; 64
    1918:	f9 e0       	ldi	r31, 0x09	; 9
    191a:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    191c:	8c e0       	ldi	r24, 0x0C	; 12
    191e:	81 87       	std	Z+9, r24	; 0x09
asm("cli");

// Disable and reset the timer/counter just to be sure
tc1_disable(&TCD1);
// Clock source: ClkPer/64
TCD1.CTRLA=TC_CLKSEL_DIV64_gc;
    1920:	85 e0       	ldi	r24, 0x05	; 5
    1922:	80 83       	st	Z, r24
// Mode: Normal Operation, Overflow Int./Event on TOP
// Compare/Capture on channel A: Off
// Compare/Capture on channel B: Off
TCD1.CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
	TC_WGMODE_NORMAL_gc;
    1924:	11 82       	std	Z+1, r1	; 0x01
// Capture event source: None
// Capture event action: None
TCD1.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1926:	13 82       	std	Z+3, r1	; 0x03

// Set Timer/Counter in Normal mode
TCD1.CTRLE=(0<<TC1_BYTEM_bp);
    1928:	14 82       	std	Z+4, r1	; 0x04

// Overflow interrupt: Low Level
// Error interrupt: Disabled
TCD1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_LO_gc;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	86 83       	std	Z+6, r24	; 0x06

// Compare/Capture channel A interrupt: Disabled
// Compare/Capture channel B interrupt: Disabled
TCD1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    192e:	17 82       	std	Z+7, r1	; 0x07

// High resolution extension: Off
HIRESD.CTRLA&= ~HIRES_HREN1_bm;
    1930:	a0 e9       	ldi	r26, 0x90	; 144
    1932:	b9 e0       	ldi	r27, 0x09	; 9
    1934:	8c 91       	ld	r24, X
    1936:	8d 7f       	andi	r24, 0xFD	; 253
    1938:	8c 93       	st	X, r24

// Clear the interrupt flags
TCD1.INTFLAGS=TCD1.INTFLAGS;
    193a:	84 85       	ldd	r24, Z+12	; 0x0c
    193c:	84 87       	std	Z+12, r24	; 0x0c
// Set Counter register
TCD1.CNT=0x0000;
    193e:	10 a2       	std	Z+32, r1	; 0x20
    1940:	11 a2       	std	Z+33, r1	; 0x21
// Set Period register
TCD1.PER=0xC34F;
    1942:	2f e4       	ldi	r18, 0x4F	; 79
    1944:	33 ec       	ldi	r19, 0xC3	; 195
    1946:	26 a3       	std	Z+38, r18	; 0x26
    1948:	37 a3       	std	Z+39, r19	; 0x27
// Set channel A Compare/Capture register
TCD1.CCA=0x0000;
    194a:	10 a6       	std	Z+40, r1	; 0x28
    194c:	11 a6       	std	Z+41, r1	; 0x29
// Set channel B Compare/Capture register
TCD1.CCB=0x0000;
    194e:	12 a6       	std	Z+42, r1	; 0x2a
    1950:	13 a6       	std	Z+43, r1	; 0x2b

// Restore interrupts enabled/disabled state
SREG=s;
    1952:	9f bf       	out	0x3f, r25	; 63
    1954:	08 95       	ret

00001956 <__vector_16>:

// Timer/Counter TCC0 Compare/Capture A interrupt service routine
// timer to make pulses level 0

ISR (TCC0_CCA_vect)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	08 b6       	in	r0, 0x38	; 56
    1962:	0f 92       	push	r0
    1964:	18 be       	out	0x38, r1	; 56
    1966:	09 b6       	in	r0, 0x39	; 57
    1968:	0f 92       	push	r0
    196a:	19 be       	out	0x39, r1	; 57
    196c:	0a b6       	in	r0, 0x3a	; 58
    196e:	0f 92       	push	r0
    1970:	1a be       	out	0x3a, r1	; 58
    1972:	0b b6       	in	r0, 0x3b	; 59
    1974:	0f 92       	push	r0
    1976:	1b be       	out	0x3b, r1	; 59
    1978:	4f 92       	push	r4
    197a:	5f 92       	push	r5
    197c:	6f 92       	push	r6
    197e:	7f 92       	push	r7
    1980:	8f 92       	push	r8
    1982:	9f 92       	push	r9
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	7f 93       	push	r23
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
	if (TCC0.INTFLAGS & TC0_CCAIF_bm) TCC0.INTFLAGS |= TC0_CCAIF_bm;
    19b0:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    19b4:	84 ff       	sbrs	r24, 4
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <__vector_16+0x6c>
    19b8:	e0 e0       	ldi	r30, 0x00	; 0
    19ba:	f8 e0       	ldi	r31, 0x08	; 8
    19bc:	84 85       	ldd	r24, Z+12	; 0x0c
    19be:	80 61       	ori	r24, 0x10	; 16
    19c0:	84 87       	std	Z+12, r24	; 0x0c
	
	if(MaxDistanceToGo>0) MaxDistanceToGo--;
    19c2:	80 91 8b 24 	lds	r24, 0x248B	; 0x80248b <MaxDistanceToGo>
    19c6:	90 91 8c 24 	lds	r25, 0x248C	; 0x80248c <MaxDistanceToGo+0x1>
    19ca:	a0 91 8d 24 	lds	r26, 0x248D	; 0x80248d <MaxDistanceToGo+0x2>
    19ce:	b0 91 8e 24 	lds	r27, 0x248E	; 0x80248e <MaxDistanceToGo+0x3>
    19d2:	18 16       	cp	r1, r24
    19d4:	19 06       	cpc	r1, r25
    19d6:	1a 06       	cpc	r1, r26
    19d8:	1b 06       	cpc	r1, r27
    19da:	0c f0       	brlt	.+2      	; 0x19de <__vector_16+0x88>
    19dc:	6f c0       	rjmp	.+222    	; 0x1abc <__vector_16+0x166>
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	a1 09       	sbc	r26, r1
    19e2:	b1 09       	sbc	r27, r1
    19e4:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    19e8:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    19ec:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    19f0:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
    19f4:	63 c0       	rjmp	.+198    	; 0x1abc <__vector_16+0x166>
	
	for (int ax = 0 ; ax < AxisNumber ; ax++)
	{
		if (DistanceToGo[ax] > 0)
    19f6:	88 81       	ld	r24, Y
    19f8:	99 81       	ldd	r25, Y+1	; 0x01
    19fa:	aa 81       	ldd	r26, Y+2	; 0x02
    19fc:	bb 81       	ldd	r27, Y+3	; 0x03
    19fe:	18 16       	cp	r1, r24
    1a00:	19 06       	cpc	r1, r25
    1a02:	1a 06       	cpc	r1, r26
    1a04:	1b 06       	cpc	r1, r27
    1a06:	0c f0       	brlt	.+2      	; 0x1a0a <__vector_16+0xb4>
    1a08:	43 c0       	rjmp	.+134    	; 0x1a90 <__vector_16+0x13a>
		{
			Pi[ax] += Ma[ax];
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	20 81       	ld	r18, Z
    1a0e:	31 81       	ldd	r19, Z+1	; 0x01
    1a10:	f6 01       	movw	r30, r12
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	82 0f       	add	r24, r18
    1a18:	93 1f       	adc	r25, r19
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	80 83       	st	Z, r24
    1a1e:	91 83       	std	Z+1, r25	; 0x01
			if (Pi[ax] >= 1000)
    1a20:	88 3e       	cpi	r24, 0xE8	; 232
    1a22:	93 40       	sbci	r25, 0x03	; 3
    1a24:	90 f1       	brcs	.+100    	; 0x1a8a <__vector_16+0x134>
			{
				AxisPulse(ax); ///should be correct
    1a26:	85 2d       	mov	r24, r5
    1a28:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z9AxisPulsec>
				Pi[ax] -= 1000;
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	88 5e       	subi	r24, 0xE8	; 232
    1a34:	93 40       	sbci	r25, 0x03	; 3
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
				DistanceToGo[ax]--;
    1a3a:	88 81       	ld	r24, Y
    1a3c:	99 81       	ldd	r25, Y+1	; 0x01
    1a3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a40:	bb 81       	ldd	r27, Y+3	; 0x03
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	a1 09       	sbc	r26, r1
    1a46:	b1 09       	sbc	r27, r1
    1a48:	88 83       	st	Y, r24
    1a4a:	99 83       	std	Y+1, r25	; 0x01
    1a4c:	aa 83       	std	Y+2, r26	; 0x02
    1a4e:	bb 83       	std	Y+3, r27	; 0x03
				if (AxisDir[ax] == 0)
    1a50:	f4 01       	movw	r30, r8
    1a52:	80 81       	ld	r24, Z
    1a54:	81 11       	cpse	r24, r1
    1a56:	0d c0       	rjmp	.+26     	; 0x1a72 <__vector_16+0x11c>
				AxisPosition[ax]--;
    1a58:	f5 01       	movw	r30, r10
    1a5a:	80 81       	ld	r24, Z
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a60:	b3 81       	ldd	r27, Z+3	; 0x03
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	a1 09       	sbc	r26, r1
    1a66:	b1 09       	sbc	r27, r1
    1a68:	80 83       	st	Z, r24
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	a2 83       	std	Z+2, r26	; 0x02
    1a6e:	b3 83       	std	Z+3, r27	; 0x03
    1a70:	0c c0       	rjmp	.+24     	; 0x1a8a <__vector_16+0x134>
				else
				AxisPosition[ax]++;
    1a72:	f5 01       	movw	r30, r10
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	a2 81       	ldd	r26, Z+2	; 0x02
    1a7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	b1 1d       	adc	r27, r1
    1a82:	80 83       	st	Z, r24
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	b3 83       	std	Z+3, r27	; 0x03
			}
			AxisIsMoving[ax] = 1;
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	40 82       	st	Z, r4
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <__vector_16+0x13e>
		}
		else
		{
			AxisIsMoving[ax] = 0;
    1a90:	f7 01       	movw	r30, r14
    1a92:	10 82       	st	Z, r1
    1a94:	24 96       	adiw	r28, 0x04	; 4
    1a96:	ff ef       	ldi	r31, 0xFF	; 255
    1a98:	ef 1a       	sub	r14, r31
    1a9a:	ff 0a       	sbc	r15, r31
    1a9c:	0e 5f       	subi	r16, 0xFE	; 254
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	22 e0       	ldi	r18, 0x02	; 2
    1aa2:	c2 0e       	add	r12, r18
    1aa4:	d1 1c       	adc	r13, r1
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	a8 0e       	add	r10, r24
    1aaa:	b1 1c       	adc	r11, r1
    1aac:	53 94       	inc	r5
    1aae:	ef ef       	ldi	r30, 0xFF	; 255
    1ab0:	8e 1a       	sub	r8, r30
    1ab2:	9e 0a       	sbc	r9, r30
{
	if (TCC0.INTFLAGS & TC0_CCAIF_bm) TCC0.INTFLAGS |= TC0_CCAIF_bm;
	
	if(MaxDistanceToGo>0) MaxDistanceToGo--;
	
	for (int ax = 0 ; ax < AxisNumber ; ax++)
    1ab4:	f3 e0       	ldi	r31, 0x03	; 3
    1ab6:	5f 12       	cpse	r5, r31
    1ab8:	9e cf       	rjmp	.-196    	; 0x19f6 <__vector_16+0xa0>
    1aba:	20 c0       	rjmp	.+64     	; 0x1afc <__vector_16+0x1a6>
    1abc:	c8 e1       	ldi	r28, 0x18	; 24
    1abe:	d7 e2       	ldi	r29, 0x27	; 39
    1ac0:	0f 2e       	mov	r0, r31
    1ac2:	fe ee       	ldi	r31, 0xEE	; 238
    1ac4:	ef 2e       	mov	r14, r31
    1ac6:	f6 e2       	ldi	r31, 0x26	; 38
    1ac8:	ff 2e       	mov	r15, r31
    1aca:	f0 2d       	mov	r31, r0
    1acc:	08 ee       	ldi	r16, 0xE8	; 232
    1ace:	16 e2       	ldi	r17, 0x26	; 38
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	f2 ee       	ldi	r31, 0xE2	; 226
    1ad4:	cf 2e       	mov	r12, r31
    1ad6:	f6 e2       	ldi	r31, 0x26	; 38
    1ad8:	df 2e       	mov	r13, r31
    1ada:	f0 2d       	mov	r31, r0
    1adc:	0f 2e       	mov	r0, r31
    1ade:	f4 e2       	ldi	r31, 0x24	; 36
    1ae0:	af 2e       	mov	r10, r31
    1ae2:	f7 e2       	ldi	r31, 0x27	; 39
    1ae4:	bf 2e       	mov	r11, r31
    1ae6:	f0 2d       	mov	r31, r0
    1ae8:	0f 2e       	mov	r0, r31
    1aea:	ff ed       	ldi	r31, 0xDF	; 223
    1aec:	8f 2e       	mov	r8, r31
    1aee:	f6 e2       	ldi	r31, 0x26	; 38
    1af0:	9f 2e       	mov	r9, r31
    1af2:	f0 2d       	mov	r31, r0

// Timer/Counter TCC0 Compare/Capture A interrupt service routine
// timer to make pulses level 0

ISR (TCC0_CCA_vect)
{
    1af4:	51 2c       	mov	r5, r1
				if (AxisDir[ax] == 0)
				AxisPosition[ax]--;
				else
				AxisPosition[ax]++;
			}
			AxisIsMoving[ax] = 1;
    1af6:	44 24       	eor	r4, r4
    1af8:	43 94       	inc	r4
    1afa:	7d cf       	rjmp	.-262    	; 0x19f6 <__vector_16+0xa0>
		else
		{
			AxisIsMoving[ax] = 0;
		}
	}
}
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	bf 90       	pop	r11
    1b26:	af 90       	pop	r10
    1b28:	9f 90       	pop	r9
    1b2a:	8f 90       	pop	r8
    1b2c:	7f 90       	pop	r7
    1b2e:	6f 90       	pop	r6
    1b30:	5f 90       	pop	r5
    1b32:	4f 90       	pop	r4
    1b34:	0f 90       	pop	r0
    1b36:	0b be       	out	0x3b, r0	; 59
    1b38:	0f 90       	pop	r0
    1b3a:	0a be       	out	0x3a, r0	; 58
    1b3c:	0f 90       	pop	r0
    1b3e:	09 be       	out	0x39, r0	; 57
    1b40:	0f 90       	pop	r0
    1b42:	08 be       	out	0x38, r0	; 56
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_20>:

// Timer/Counter TCC1 Overflow/Underflow interrupt service routine
// Timer to set speed according to acceleration and deceleration Level 1
ISR (TCC1_OVF_vect)
{
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	08 b6       	in	r0, 0x38	; 56
    1b5a:	0f 92       	push	r0
    1b5c:	18 be       	out	0x38, r1	; 56
    1b5e:	09 b6       	in	r0, 0x39	; 57
    1b60:	0f 92       	push	r0
    1b62:	19 be       	out	0x39, r1	; 57
    1b64:	0b b6       	in	r0, 0x3b	; 59
    1b66:	0f 92       	push	r0
    1b68:	1b be       	out	0x3b, r1	; 59
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	4f 93       	push	r20
    1b7c:	5f 93       	push	r21
    1b7e:	6f 93       	push	r22
    1b80:	7f 93       	push	r23
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25
    1b86:	af 93       	push	r26
    1b88:	bf 93       	push	r27
    1b8a:	ef 93       	push	r30
    1b8c:	ff 93       	push	r31
	float PER;
	j++;
    1b8e:	80 91 c4 24 	lds	r24, 0x24C4	; 0x8024c4 <j>
    1b92:	90 91 c5 24 	lds	r25, 0x24C5	; 0x8024c5 <j+0x1>
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	80 93 c4 24 	sts	0x24C4, r24	; 0x8024c4 <j>
    1b9c:	90 93 c5 24 	sts	0x24C5, r25	; 0x8024c5 <j+0x1>
	if(MaxDistanceToGo>0)
    1ba0:	c0 90 8b 24 	lds	r12, 0x248B	; 0x80248b <MaxDistanceToGo>
    1ba4:	d0 90 8c 24 	lds	r13, 0x248C	; 0x80248c <MaxDistanceToGo+0x1>
    1ba8:	e0 90 8d 24 	lds	r14, 0x248D	; 0x80248d <MaxDistanceToGo+0x2>
    1bac:	f0 90 8e 24 	lds	r15, 0x248E	; 0x80248e <MaxDistanceToGo+0x3>
    1bb0:	1c 14       	cp	r1, r12
    1bb2:	1d 04       	cpc	r1, r13
    1bb4:	1e 04       	cpc	r1, r14
    1bb6:	1f 04       	cpc	r1, r15
    1bb8:	0c f0       	brlt	.+2      	; 0x1bbc <__vector_20+0x6e>
    1bba:	86 c0       	rjmp	.+268    	; 0x1cc8 <__vector_20+0x17a>
	{
		if(MaxDistanceToGo >= AccDTG)
    1bbc:	80 91 93 24 	lds	r24, 0x2493	; 0x802493 <AccDTG>
    1bc0:	90 91 94 24 	lds	r25, 0x2494	; 0x802494 <AccDTG+0x1>
    1bc4:	a0 91 95 24 	lds	r26, 0x2495	; 0x802495 <AccDTG+0x2>
    1bc8:	b0 91 96 24 	lds	r27, 0x2496	; 0x802496 <AccDTG+0x3>
    1bcc:	c8 16       	cp	r12, r24
    1bce:	d9 06       	cpc	r13, r25
    1bd0:	ea 06       	cpc	r14, r26
    1bd2:	fb 06       	cpc	r15, r27
    1bd4:	b4 f1       	brlt	.+108    	; 0x1c42 <__vector_20+0xf4>
		{
			CurSpeedFrq += ACCSpeedINT;
    1bd6:	40 91 77 24 	lds	r20, 0x2477	; 0x802477 <CurSpeedFrq>
    1bda:	50 91 78 24 	lds	r21, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1bde:	60 91 79 24 	lds	r22, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1be2:	70 91 7a 24 	lds	r23, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1be6:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <ACCSpeedINT>
    1bea:	90 91 74 24 	lds	r25, 0x2474	; 0x802474 <ACCSpeedINT+0x1>
    1bee:	a0 91 75 24 	lds	r26, 0x2475	; 0x802475 <ACCSpeedINT+0x2>
    1bf2:	b0 91 76 24 	lds	r27, 0x2476	; 0x802476 <ACCSpeedINT+0x3>
    1bf6:	8a 01       	movw	r16, r20
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	08 0f       	add	r16, r24
    1bfc:	19 1f       	adc	r17, r25
    1bfe:	2a 1f       	adc	r18, r26
    1c00:	3b 1f       	adc	r19, r27
    1c02:	c9 01       	movw	r24, r18
    1c04:	b8 01       	movw	r22, r16
    1c06:	00 93 77 24 	sts	0x2477, r16	; 0x802477 <CurSpeedFrq>
    1c0a:	10 93 78 24 	sts	0x2478, r17	; 0x802478 <CurSpeedFrq+0x1>
    1c0e:	20 93 79 24 	sts	0x2479, r18	; 0x802479 <CurSpeedFrq+0x2>
    1c12:	30 93 7a 24 	sts	0x247A, r19	; 0x80247a <CurSpeedFrq+0x3>
			PER=(float)(16000.0/CurSpeedFrq);
			TCC0.CCA=(unsigned int)(PER*1000);
    1c16:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    1c1a:	9b 01       	movw	r18, r22
    1c1c:	ac 01       	movw	r20, r24
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	8a e7       	ldi	r24, 0x7A	; 122
    1c24:	96 e4       	ldi	r25, 0x46	; 70
    1c26:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a e7       	ldi	r20, 0x7A	; 122
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    1c36:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    1c3a:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1c3e:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
		}
		if(MaxDistanceToGo <= DecDTG)
    1c42:	80 91 8f 24 	lds	r24, 0x248F	; 0x80248f <DecDTG>
    1c46:	90 91 90 24 	lds	r25, 0x2490	; 0x802490 <DecDTG+0x1>
    1c4a:	a0 91 91 24 	lds	r26, 0x2491	; 0x802491 <DecDTG+0x2>
    1c4e:	b0 91 92 24 	lds	r27, 0x2492	; 0x802492 <DecDTG+0x3>
    1c52:	8c 15       	cp	r24, r12
    1c54:	9d 05       	cpc	r25, r13
    1c56:	ae 05       	cpc	r26, r14
    1c58:	bf 05       	cpc	r27, r15
    1c5a:	0c f4       	brge	.+2      	; 0x1c5e <__vector_20+0x110>
    1c5c:	f3 c0       	rjmp	.+486    	; 0x1e44 <__vector_20+0x2f6>
		{
			CurSpeedFrq -= ACCSpeedINT;
    1c5e:	80 91 77 24 	lds	r24, 0x2477	; 0x802477 <CurSpeedFrq>
    1c62:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1c66:	a0 91 79 24 	lds	r26, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1c6a:	b0 91 7a 24 	lds	r27, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1c6e:	c0 90 73 24 	lds	r12, 0x2473	; 0x802473 <ACCSpeedINT>
    1c72:	d0 90 74 24 	lds	r13, 0x2474	; 0x802474 <ACCSpeedINT+0x1>
    1c76:	e0 90 75 24 	lds	r14, 0x2475	; 0x802475 <ACCSpeedINT+0x2>
    1c7a:	f0 90 76 24 	lds	r15, 0x2476	; 0x802476 <ACCSpeedINT+0x3>
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	6c 19       	sub	r22, r12
    1c84:	7d 09       	sbc	r23, r13
    1c86:	8e 09       	sbc	r24, r14
    1c88:	9f 09       	sbc	r25, r15
    1c8a:	60 93 77 24 	sts	0x2477, r22	; 0x802477 <CurSpeedFrq>
    1c8e:	70 93 78 24 	sts	0x2478, r23	; 0x802478 <CurSpeedFrq+0x1>
    1c92:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <CurSpeedFrq+0x2>
    1c96:	90 93 7a 24 	sts	0x247A, r25	; 0x80247a <CurSpeedFrq+0x3>
			PER=(float)(16000.0/CurSpeedFrq);
			TCC0.CCA=(unsigned int)(PER*1000);
    1c9a:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    1c9e:	9b 01       	movw	r18, r22
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	8a e7       	ldi	r24, 0x7A	; 122
    1ca8:	96 e4       	ldi	r25, 0x46	; 70
    1caa:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a e7       	ldi	r20, 0x7A	; 122
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    1cba:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    1cbe:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1cc2:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1cc6:	be c0       	rjmp	.+380    	; 0x1e44 <__vector_20+0x2f6>
		}
	}
	else
	{
		if(ACC==1)
    1cc8:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <ACC>
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <__vector_20+0x184>
    1cd0:	51 c0       	rjmp	.+162    	; 0x1d74 <__vector_20+0x226>
		{
			CurSpeedFrq += ACCSpeedINT;
    1cd2:	40 91 77 24 	lds	r20, 0x2477	; 0x802477 <CurSpeedFrq>
    1cd6:	50 91 78 24 	lds	r21, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1cda:	60 91 79 24 	lds	r22, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1cde:	70 91 7a 24 	lds	r23, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1ce2:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <ACCSpeedINT>
    1ce6:	90 91 74 24 	lds	r25, 0x2474	; 0x802474 <ACCSpeedINT+0x1>
    1cea:	a0 91 75 24 	lds	r26, 0x2475	; 0x802475 <ACCSpeedINT+0x2>
    1cee:	b0 91 76 24 	lds	r27, 0x2476	; 0x802476 <ACCSpeedINT+0x3>
    1cf2:	84 0f       	add	r24, r20
    1cf4:	95 1f       	adc	r25, r21
    1cf6:	a6 1f       	adc	r26, r22
    1cf8:	b7 1f       	adc	r27, r23
    1cfa:	80 93 77 24 	sts	0x2477, r24	; 0x802477 <CurSpeedFrq>
    1cfe:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <CurSpeedFrq+0x1>
    1d02:	a0 93 79 24 	sts	0x2479, r26	; 0x802479 <CurSpeedFrq+0x2>
    1d06:	b0 93 7a 24 	sts	0x247A, r27	; 0x80247a <CurSpeedFrq+0x3>
			if(CurSpeedFrq >= MaxSpeed)
    1d0a:	40 91 87 24 	lds	r20, 0x2487	; 0x802487 <MaxSpeed>
    1d0e:	50 91 88 24 	lds	r21, 0x2488	; 0x802488 <MaxSpeed+0x1>
    1d12:	60 91 89 24 	lds	r22, 0x2489	; 0x802489 <MaxSpeed+0x2>
    1d16:	70 91 8a 24 	lds	r23, 0x248A	; 0x80248a <MaxSpeed+0x3>
    1d1a:	84 17       	cp	r24, r20
    1d1c:	95 07       	cpc	r25, r21
    1d1e:	a6 07       	cpc	r26, r22
    1d20:	b7 07       	cpc	r27, r23
    1d22:	54 f0       	brlt	.+20     	; 0x1d38 <__vector_20+0x1ea>
			{
				CurSpeedFrq = MaxSpeed;
    1d24:	40 93 77 24 	sts	0x2477, r20	; 0x802477 <CurSpeedFrq>
    1d28:	50 93 78 24 	sts	0x2478, r21	; 0x802478 <CurSpeedFrq+0x1>
    1d2c:	60 93 79 24 	sts	0x2479, r22	; 0x802479 <CurSpeedFrq+0x2>
    1d30:	70 93 7a 24 	sts	0x247A, r23	; 0x80247a <CurSpeedFrq+0x3>
				ACC = 0;
    1d34:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
			}
			PER=(float)(16000.0/CurSpeedFrq);
			
			TCC0.CCA=(unsigned int)(PER*1000);
    1d38:	60 91 77 24 	lds	r22, 0x2477	; 0x802477 <CurSpeedFrq>
    1d3c:	70 91 78 24 	lds	r23, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1d40:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1d44:	90 91 7a 24 	lds	r25, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1d48:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    1d4c:	9b 01       	movw	r18, r22
    1d4e:	ac 01       	movw	r20, r24
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	8a e7       	ldi	r24, 0x7A	; 122
    1d56:	96 e4       	ldi	r25, 0x46	; 70
    1d58:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    1d68:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    1d6c:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1d70:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
		}
		if(DEC==1)
    1d74:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <DEC>
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <__vector_20+0x230>
    1d7c:	63 c0       	rjmp	.+198    	; 0x1e44 <__vector_20+0x2f6>
		{
			CurSpeedFrq -= DECSpeedINT;
    1d7e:	40 91 6f 24 	lds	r20, 0x246F	; 0x80246f <DECSpeedINT>
    1d82:	50 91 70 24 	lds	r21, 0x2470	; 0x802470 <DECSpeedINT+0x1>
    1d86:	60 91 71 24 	lds	r22, 0x2471	; 0x802471 <DECSpeedINT+0x2>
    1d8a:	70 91 72 24 	lds	r23, 0x2472	; 0x802472 <DECSpeedINT+0x3>
    1d8e:	80 91 77 24 	lds	r24, 0x2477	; 0x802477 <CurSpeedFrq>
    1d92:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1d96:	a0 91 79 24 	lds	r26, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1d9a:	b0 91 7a 24 	lds	r27, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1d9e:	84 1b       	sub	r24, r20
    1da0:	95 0b       	sbc	r25, r21
    1da2:	a6 0b       	sbc	r26, r22
    1da4:	b7 0b       	sbc	r27, r23
			if(CurSpeedFrq <= DECSpeedINT)
    1da6:	48 17       	cp	r20, r24
    1da8:	59 07       	cpc	r21, r25
    1daa:	6a 07       	cpc	r22, r26
    1dac:	7b 07       	cpc	r23, r27
    1dae:	4c f4       	brge	.+18     	; 0x1dc2 <__vector_20+0x274>
			
			TCC0.CCA=(unsigned int)(PER*1000);
		}
		if(DEC==1)
		{
			CurSpeedFrq -= DECSpeedINT;
    1db0:	80 93 77 24 	sts	0x2477, r24	; 0x802477 <CurSpeedFrq>
    1db4:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <CurSpeedFrq+0x1>
    1db8:	a0 93 79 24 	sts	0x2479, r26	; 0x802479 <CurSpeedFrq+0x2>
    1dbc:	b0 93 7a 24 	sts	0x247A, r27	; 0x80247a <CurSpeedFrq+0x3>
    1dc0:	23 c0       	rjmp	.+70     	; 0x1e08 <__vector_20+0x2ba>
			if(CurSpeedFrq <= DECSpeedINT)
			{
				CurSpeedFrq=DECSpeedINT;
    1dc2:	40 93 77 24 	sts	0x2477, r20	; 0x802477 <CurSpeedFrq>
    1dc6:	50 93 78 24 	sts	0x2478, r21	; 0x802478 <CurSpeedFrq+0x1>
    1dca:	60 93 79 24 	sts	0x2479, r22	; 0x802479 <CurSpeedFrq+0x2>
    1dce:	70 93 7a 24 	sts	0x247A, r23	; 0x80247a <CurSpeedFrq+0x3>
				DEC=0;
    1dd2:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
				if (FreeJog != -1)
    1dd6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <FreeJog>
    1dda:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <FreeJog+0x1>
    1dde:	8f 3f       	cpi	r24, 0xFF	; 255
    1de0:	1f ef       	ldi	r17, 0xFF	; 255
    1de2:	91 07       	cpc	r25, r17
    1de4:	89 f0       	breq	.+34     	; 0x1e08 <__vector_20+0x2ba>
				{
					DistanceToGo[FreeJog] = 0;
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	fc 01       	movw	r30, r24
    1df0:	e8 5e       	subi	r30, 0xE8	; 232
    1df2:	f8 4d       	sbci	r31, 0xD8	; 216
    1df4:	10 82       	st	Z, r1
    1df6:	11 82       	std	Z+1, r1	; 0x01
    1df8:	12 82       	std	Z+2, r1	; 0x02
    1dfa:	13 82       	std	Z+3, r1	; 0x03
					FreeJog = -1;
    1dfc:	8f ef       	ldi	r24, 0xFF	; 255
    1dfe:	9f ef       	ldi	r25, 0xFF	; 255
    1e00:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <FreeJog>
    1e04:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <FreeJog+0x1>
				}
			}
			PER=(float)(16000.0/CurSpeedFrq);
			
			TCC0.CCA=(unsigned int)(PER*1000);
    1e08:	60 91 77 24 	lds	r22, 0x2477	; 0x802477 <CurSpeedFrq>
    1e0c:	70 91 78 24 	lds	r23, 0x2478	; 0x802478 <CurSpeedFrq+0x1>
    1e10:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <CurSpeedFrq+0x2>
    1e14:	90 91 7a 24 	lds	r25, 0x247A	; 0x80247a <CurSpeedFrq+0x3>
    1e18:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    1e1c:	9b 01       	movw	r18, r22
    1e1e:	ac 01       	movw	r20, r24
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	8a e7       	ldi	r24, 0x7A	; 122
    1e26:	96 e4       	ldi	r25, 0x46	; 70
    1e28:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    1e38:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    1e3c:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1e40:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
		}
	}
	//printf("%u\r\n",TCC0.CCA);
}
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	cf 90       	pop	r12
    1e68:	0f 90       	pop	r0
    1e6a:	0b be       	out	0x3b, r0	; 59
    1e6c:	0f 90       	pop	r0
    1e6e:	09 be       	out	0x39, r0	; 57
    1e70:	0f 90       	pop	r0
    1e72:	08 be       	out	0x38, r0	; 56
    1e74:	0f 90       	pop	r0
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	0f 90       	pop	r0
    1e7a:	1f 90       	pop	r1
    1e7c:	18 95       	reti

00001e7e <__vector_83>:

// Timer/Counter TCD1 Overflow/Underflow interrupt service routine
// PLC INterpolation in this time level 4
ISR (TCD1_OVF_vect)
{
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	08 b6       	in	r0, 0x38	; 56
    1e8a:	0f 92       	push	r0
    1e8c:	18 be       	out	0x38, r1	; 56
    1e8e:	09 b6       	in	r0, 0x39	; 57
    1e90:	0f 92       	push	r0
    1e92:	19 be       	out	0x39, r1	; 57
    1e94:	0a b6       	in	r0, 0x3a	; 58
    1e96:	0f 92       	push	r0
    1e98:	1a be       	out	0x3a, r1	; 58
    1e9a:	0b b6       	in	r0, 0x3b	; 59
    1e9c:	0f 92       	push	r0
    1e9e:	1b be       	out	0x3b, r1	; 59
    1ea0:	7f 92       	push	r7
    1ea2:	8f 92       	push	r8
    1ea4:	9f 92       	push	r9
    1ea6:	af 92       	push	r10
    1ea8:	bf 92       	push	r11
    1eaa:	cf 92       	push	r12
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	2f 93       	push	r18
    1eb8:	3f 93       	push	r19
    1eba:	4f 93       	push	r20
    1ebc:	5f 93       	push	r21
    1ebe:	6f 93       	push	r22
    1ec0:	7f 93       	push	r23
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
    1ed2:	0b ec       	ldi	r16, 0xCB	; 203
    1ed4:	14 e2       	ldi	r17, 0x24	; 36
    1ed6:	0f 2e       	mov	r0, r31
    1ed8:	f8 e1       	ldi	r31, 0x18	; 24
    1eda:	af 2e       	mov	r10, r31
    1edc:	f7 e2       	ldi	r31, 0x27	; 39
    1ede:	bf 2e       	mov	r11, r31
    1ee0:	f0 2d       	mov	r31, r0
    1ee2:	0f 2e       	mov	r0, r31
    1ee4:	fe ee       	ldi	r31, 0xEE	; 238
    1ee6:	cf 2e       	mov	r12, r31
    1ee8:	f6 e2       	ldi	r31, 0x26	; 38
    1eea:	df 2e       	mov	r13, r31
    1eec:	f0 2d       	mov	r31, r0
    1eee:	0f 2e       	mov	r0, r31
    1ef0:	ff ed       	ldi	r31, 0xDF	; 223
    1ef2:	ef 2e       	mov	r14, r31
    1ef4:	f6 e2       	ldi	r31, 0x26	; 38
    1ef6:	ff 2e       	mov	r15, r31
    1ef8:	f0 2d       	mov	r31, r0
	for (int ax = 0 ; ax < AxisNumber ; ax++)
    1efa:	c0 e0       	ldi	r28, 0x00	; 0
    1efc:	d0 e0       	ldi	r29, 0x00	; 0
						ResetDistanceToGoEXP(ax);
					}
				}
			}
		}
		if(Axes[0].HardwareLimitPosIsActive)
    1efe:	48 01       	movw	r8, r16
// PLC INterpolation in this time level 4
ISR (TCD1_OVF_vect)
{
	for (int ax = 0 ; ax < AxisNumber ; ax++)
	{
		if(Axes[ax].HardwareLimitNegIsActive)
    1f00:	f8 01       	movw	r30, r16
    1f02:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f04:	88 23       	and	r24, r24
    1f06:	29 f1       	breq	.+74     	; 0x1f52 <__vector_83+0xd4>
		{
			//printf("Hardware Limit Axis X is Active.(From PLC Timer routine)\r\n");
			//printf("LIM POS X: %u\r\n",LIM_NEG1);
			if(!AxisDir[ax] && !AxisLimitNeg(ax))
    1f08:	f7 01       	movw	r30, r14
    1f0a:	80 81       	ld	r24, Z
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	5b c0       	rjmp	.+182    	; 0x1fc6 <__vector_83+0x148>
    1f10:	8c 2f       	mov	r24, r28
    1f12:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z12AxisLimitNegc>
    1f16:	81 11       	cpse	r24, r1
    1f18:	1c c0       	rjmp	.+56     	; 0x1f52 <__vector_83+0xd4>
			{
				if(AxisIsMoving[ax])
    1f1a:	f6 01       	movw	r30, r12
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 23       	and	r24, r24
    1f20:	c1 f0       	breq	.+48     	; 0x1f52 <__vector_83+0xd4>
				{
					DistanceToGo[ax] = 0;
    1f22:	f5 01       	movw	r30, r10
    1f24:	10 82       	st	Z, r1
    1f26:	11 82       	std	Z+1, r1	; 0x01
    1f28:	12 82       	std	Z+2, r1	; 0x02
    1f2a:	13 82       	std	Z+3, r1	; 0x03
					if(!RefCmd)
    1f2c:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <RefCmd>
    1f30:	81 11       	cpse	r24, r1
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <__vector_83+0xd4>
					{
						FreeJog = ax;
    1f34:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <FreeJog>
    1f38:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <FreeJog+0x1>
						MaxDistanceToGo = 0;
    1f3c:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <MaxDistanceToGo>
    1f40:	10 92 8c 24 	sts	0x248C, r1	; 0x80248c <MaxDistanceToGo+0x1>
    1f44:	10 92 8d 24 	sts	0x248D, r1	; 0x80248d <MaxDistanceToGo+0x2>
    1f48:	10 92 8e 24 	sts	0x248E, r1	; 0x80248e <MaxDistanceToGo+0x3>
						ResetDistanceToGoEXP(ax);
    1f4c:	8c 2f       	mov	r24, r28
    1f4e:	0e 94 40 01 	call	0x280	; 0x280 <_Z20ResetDistanceToGoEXPc>
					}
				}
			}
		}
		if(Axes[0].HardwareLimitPosIsActive)
    1f52:	f4 01       	movw	r30, r8
    1f54:	81 a5       	ldd	r24, Z+41	; 0x29
    1f56:	88 23       	and	r24, r24
    1f58:	29 f1       	breq	.+74     	; 0x1fa4 <__vector_83+0x126>
		{
			//printf("Hardware Limit Axis X is Active.(From PLC Timer routine)\r\n");
			//printf("LIM POS X: %u\r\n",LIM_NEG1);
			if(AxisDir[ax] && !AxisLimitPos(ax))
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 23       	and	r24, r24
    1f60:	09 f1       	breq	.+66     	; 0x1fa4 <__vector_83+0x126>
    1f62:	8c 2f       	mov	r24, r28
    1f64:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z12AxisLimitPosc>
    1f68:	81 11       	cpse	r24, r1
    1f6a:	1c c0       	rjmp	.+56     	; 0x1fa4 <__vector_83+0x126>
			{
				//printf("Axis X PLimit is Active.\r\n");
				if(AxisIsMoving[ax])
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	80 81       	ld	r24, Z
    1f70:	88 23       	and	r24, r24
    1f72:	c1 f0       	breq	.+48     	; 0x1fa4 <__vector_83+0x126>
				{
					DistanceToGo[ax] = 0;
    1f74:	f5 01       	movw	r30, r10
    1f76:	10 82       	st	Z, r1
    1f78:	11 82       	std	Z+1, r1	; 0x01
    1f7a:	12 82       	std	Z+2, r1	; 0x02
    1f7c:	13 82       	std	Z+3, r1	; 0x03
					if(!RefCmd)
    1f7e:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <RefCmd>
    1f82:	81 11       	cpse	r24, r1
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <__vector_83+0x126>
					{
						FreeJog = ax;
    1f86:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <FreeJog>
    1f8a:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <FreeJog+0x1>
						MaxDistanceToGo = 0;
    1f8e:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <MaxDistanceToGo>
    1f92:	10 92 8c 24 	sts	0x248C, r1	; 0x80248c <MaxDistanceToGo+0x1>
    1f96:	10 92 8d 24 	sts	0x248D, r1	; 0x80248d <MaxDistanceToGo+0x2>
    1f9a:	10 92 8e 24 	sts	0x248E, r1	; 0x80248e <MaxDistanceToGo+0x3>
						ResetDistanceToGoEXP(ax);
    1f9e:	8c 2f       	mov	r24, r28
    1fa0:	0e 94 40 01 	call	0x280	; 0x280 <_Z20ResetDistanceToGoEXPc>

// Timer/Counter TCD1 Overflow/Underflow interrupt service routine
// PLC INterpolation in this time level 4
ISR (TCD1_OVF_vect)
{
	for (int ax = 0 ; ax < AxisNumber ; ax++)
    1fa4:	21 96       	adiw	r28, 0x01	; 1
    1fa6:	05 5d       	subi	r16, 0xD5	; 213
    1fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1faa:	f4 e0       	ldi	r31, 0x04	; 4
    1fac:	af 0e       	add	r10, r31
    1fae:	b1 1c       	adc	r11, r1
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	c8 1a       	sub	r12, r24
    1fb4:	d8 0a       	sbc	r13, r24
    1fb6:	ef ef       	ldi	r30, 0xFF	; 255
    1fb8:	ee 1a       	sub	r14, r30
    1fba:	fe 0a       	sbc	r15, r30
    1fbc:	c3 30       	cpi	r28, 0x03	; 3
    1fbe:	d1 05       	cpc	r29, r1
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <__vector_83+0x146>
    1fc2:	9e cf       	rjmp	.-196    	; 0x1f00 <__vector_83+0x82>
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <__vector_83+0x152>
						ResetDistanceToGoEXP(ax);
					}
				}
			}
		}
		if(Axes[0].HardwareLimitPosIsActive)
    1fc6:	f4 01       	movw	r30, r8
    1fc8:	81 a5       	ldd	r24, Z+41	; 0x29
    1fca:	88 23       	and	r24, r24
    1fcc:	59 f3       	breq	.-42     	; 0x1fa4 <__vector_83+0x126>
    1fce:	c9 cf       	rjmp	.-110    	; 0x1f62 <__vector_83+0xe4>
					}
				}
			}
		}
	}
}
    1fd0:	ff 91       	pop	r31
    1fd2:	ef 91       	pop	r30
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	bf 91       	pop	r27
    1fda:	af 91       	pop	r26
    1fdc:	9f 91       	pop	r25
    1fde:	8f 91       	pop	r24
    1fe0:	7f 91       	pop	r23
    1fe2:	6f 91       	pop	r22
    1fe4:	5f 91       	pop	r21
    1fe6:	4f 91       	pop	r20
    1fe8:	3f 91       	pop	r19
    1fea:	2f 91       	pop	r18
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	df 90       	pop	r13
    1ff6:	cf 90       	pop	r12
    1ff8:	bf 90       	pop	r11
    1ffa:	af 90       	pop	r10
    1ffc:	9f 90       	pop	r9
    1ffe:	8f 90       	pop	r8
    2000:	7f 90       	pop	r7
    2002:	0f 90       	pop	r0
    2004:	0b be       	out	0x3b, r0	; 59
    2006:	0f 90       	pop	r0
    2008:	0a be       	out	0x3a, r0	; 58
    200a:	0f 90       	pop	r0
    200c:	09 be       	out	0x39, r0	; 57
    200e:	0f 90       	pop	r0
    2010:	08 be       	out	0x38, r0	; 56
    2012:	0f 90       	pop	r0
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	0f 90       	pop	r0
    2018:	1f 90       	pop	r1
    201a:	18 95       	reti

0000201c <_Z6PRGExev>:


// run a single block the command will be in the CMDPRGList structure
// the structure will load in Main program
void PRGExe()
{
    201c:	2f 92       	push	r2
    201e:	3f 92       	push	r3
    2020:	4f 92       	push	r4
    2022:	5f 92       	push	r5
    2024:	6f 92       	push	r6
    2026:	7f 92       	push	r7
    2028:	8f 92       	push	r8
    202a:	9f 92       	push	r9
    202c:	af 92       	push	r10
    202e:	bf 92       	push	r11
    2030:	cf 92       	push	r12
    2032:	df 92       	push	r13
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
	switch (CMDPRGlist.Mode)
    2040:	80 91 4f 25 	lds	r24, 0x254F	; 0x80254f <CMDPRGlist+0x3>
    2044:	8e 30       	cpi	r24, 0x0E	; 14
    2046:	09 f4       	brne	.+2      	; 0x204a <_Z6PRGExev+0x2e>
    2048:	f6 c1       	rjmp	.+1004   	; 0x2436 <_Z6PRGExev+0x41a>
    204a:	58 f4       	brcc	.+22     	; 0x2062 <_Z6PRGExev+0x46>
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	09 f4       	brne	.+2      	; 0x2052 <_Z6PRGExev+0x36>
    2050:	bc c0       	rjmp	.+376    	; 0x21ca <_Z6PRGExev+0x1ae>
    2052:	c8 f0       	brcs	.+50     	; 0x2086 <_Z6PRGExev+0x6a>
    2054:	8c 30       	cpi	r24, 0x0C	; 12
    2056:	09 f4       	brne	.+2      	; 0x205a <_Z6PRGExev+0x3e>
    2058:	54 c1       	rjmp	.+680    	; 0x2302 <_Z6PRGExev+0x2e6>
    205a:	8d 30       	cpi	r24, 0x0D	; 13
    205c:	09 f4       	brne	.+2      	; 0x2060 <_Z6PRGExev+0x44>
    205e:	d5 c1       	rjmp	.+938    	; 0x240a <_Z6PRGExev+0x3ee>
    2060:	c0 c4       	rjmp	.+2432   	; 0x29e2 <_Z6PRGExev+0x9c6>
    2062:	8a 35       	cpi	r24, 0x5A	; 90
    2064:	09 f4       	brne	.+2      	; 0x2068 <_Z6PRGExev+0x4c>
    2066:	05 c3       	rjmp	.+1546   	; 0x2672 <_Z6PRGExev+0x656>
    2068:	38 f4       	brcc	.+14     	; 0x2078 <_Z6PRGExev+0x5c>
    206a:	81 35       	cpi	r24, 0x51	; 81
    206c:	09 f4       	brne	.+2      	; 0x2070 <_Z6PRGExev+0x54>
    206e:	f5 c2       	rjmp	.+1514   	; 0x265a <_Z6PRGExev+0x63e>
    2070:	82 35       	cpi	r24, 0x52	; 82
    2072:	09 f4       	brne	.+2      	; 0x2076 <_Z6PRGExev+0x5a>
    2074:	f8 c2       	rjmp	.+1520   	; 0x2666 <_Z6PRGExev+0x64a>
    2076:	b5 c4       	rjmp	.+2410   	; 0x29e2 <_Z6PRGExev+0x9c6>
    2078:	84 36       	cpi	r24, 0x64	; 100
    207a:	09 f4       	brne	.+2      	; 0x207e <_Z6PRGExev+0x62>
    207c:	5c c4       	rjmp	.+2232   	; 0x2936 <_Z6PRGExev+0x91a>
    207e:	85 36       	cpi	r24, 0x65	; 101
    2080:	09 f4       	brne	.+2      	; 0x2084 <_Z6PRGExev+0x68>
    2082:	62 c4       	rjmp	.+2244   	; 0x2948 <_Z6PRGExev+0x92c>
    2084:	ae c4       	rjmp	.+2396   	; 0x29e2 <_Z6PRGExev+0x9c6>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    2086:	e0 e0       	ldi	r30, 0x00	; 0
    2088:	f8 e0       	ldi	r31, 0x08	; 8
    208a:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    208c:	8c e0       	ldi	r24, 0x0C	; 12
    208e:	81 87       	std	Z+9, r24	; 0x09
	{
		case 0 :  //Acceleration Mode
		{
			tc0_disable(&TCC0);
			for (int ax = 0 ; ax < CMDPRGlist.AxisNum ; ax++)
    2090:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
    2094:	88 23       	and	r24, r24
    2096:	f1 f1       	breq	.+124    	; 0x2114 <_Z6PRGExev+0xf8>
    2098:	0f 2e       	mov	r0, r31
    209a:	f2 ee       	ldi	r31, 0xE2	; 226
    209c:	cf 2e       	mov	r12, r31
    209e:	f6 e2       	ldi	r31, 0x26	; 38
    20a0:	df 2e       	mov	r13, r31
    20a2:	f0 2d       	mov	r31, r0
    20a4:	0f 2e       	mov	r0, r31
    20a6:	fd e5       	ldi	r31, 0x5D	; 93
    20a8:	ef 2e       	mov	r14, r31
    20aa:	f5 e2       	ldi	r31, 0x25	; 37
    20ac:	ff 2e       	mov	r15, r31
    20ae:	f0 2d       	mov	r31, r0
    20b0:	0f 2e       	mov	r0, r31
    20b2:	f1 e5       	ldi	r31, 0x51	; 81
    20b4:	8f 2e       	mov	r8, r31
    20b6:	f5 e2       	ldi	r31, 0x25	; 37
    20b8:	9f 2e       	mov	r9, r31
    20ba:	f0 2d       	mov	r31, r0
    20bc:	08 e1       	ldi	r16, 0x18	; 24
    20be:	17 e2       	ldi	r17, 0x27	; 39
    20c0:	c0 e0       	ldi	r28, 0x00	; 0
    20c2:	d0 e0       	ldi	r29, 0x00	; 0
    20c4:	0f 2e       	mov	r0, r31
    20c6:	fc e4       	ldi	r31, 0x4C	; 76
    20c8:	af 2e       	mov	r10, r31
    20ca:	f5 e2       	ldi	r31, 0x25	; 37
    20cc:	bf 2e       	mov	r11, r31
    20ce:	f0 2d       	mov	r31, r0
			{
				Ma[ax] = CMDPRGlist.SpeedMa[ax];
    20d0:	f4 01       	movw	r30, r8
    20d2:	87 85       	ldd	r24, Z+15	; 0x0f
    20d4:	90 89       	ldd	r25, Z+16	; 0x10
    20d6:	f6 01       	movw	r30, r12
    20d8:	81 93       	st	Z+, r24
    20da:	91 93       	st	Z+, r25
    20dc:	6f 01       	movw	r12, r30
				SetAxisDir(ax,CMDPRGlist.Direction[ax]);
    20de:	f7 01       	movw	r30, r14
    20e0:	61 91       	ld	r22, Z+
    20e2:	7f 01       	movw	r14, r30
    20e4:	ce 01       	movw	r24, r28
    20e6:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				DistanceToGo[ax] = CMDPRGlist.Move[ax];
    20ea:	f4 01       	movw	r30, r8
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	a2 81       	ldd	r26, Z+2	; 0x02
    20f2:	b3 81       	ldd	r27, Z+3	; 0x03
    20f4:	f4 e0       	ldi	r31, 0x04	; 4
    20f6:	8f 0e       	add	r8, r31
    20f8:	91 1c       	adc	r9, r1
    20fa:	f8 01       	movw	r30, r16
    20fc:	81 93       	st	Z+, r24
    20fe:	91 93       	st	Z+, r25
    2100:	a1 93       	st	Z+, r26
    2102:	b1 93       	st	Z+, r27
    2104:	8f 01       	movw	r16, r30
	switch (CMDPRGlist.Mode)
	{
		case 0 :  //Acceleration Mode
		{
			tc0_disable(&TCC0);
			for (int ax = 0 ; ax < CMDPRGlist.AxisNum ; ax++)
    2106:	21 96       	adiw	r28, 0x01	; 1
    2108:	f5 01       	movw	r30, r10
    210a:	84 81       	ldd	r24, Z+4	; 0x04
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	c8 17       	cp	r28, r24
    2110:	d9 07       	cpc	r29, r25
    2112:	f4 f2       	brlt	.-68     	; 0x20d0 <_Z6PRGExev+0xb4>
				Ma[ax] = CMDPRGlist.SpeedMa[ax];
				SetAxisDir(ax,CMDPRGlist.Direction[ax]);
				DistanceToGo[ax] = CMDPRGlist.Move[ax];
			}
			
			MaxSpeed = CMDPRGlist.MaxSpeed;
    2114:	ec e4       	ldi	r30, 0x4C	; 76
    2116:	f5 e2       	ldi	r31, 0x25	; 37
    2118:	80 a1       	ldd	r24, Z+32	; 0x20
    211a:	91 a1       	ldd	r25, Z+33	; 0x21
    211c:	a2 a1       	ldd	r26, Z+34	; 0x22
    211e:	b3 a1       	ldd	r27, Z+35	; 0x23
    2120:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    2124:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    2128:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    212c:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			ACCSpeedINT = CMDPRGlist.ACCSpeedINT;
    2130:	80 a5       	ldd	r24, Z+40	; 0x28
    2132:	91 a5       	ldd	r25, Z+41	; 0x29
    2134:	a2 a5       	ldd	r26, Z+42	; 0x2a
    2136:	b3 a5       	ldd	r27, Z+43	; 0x2b
    2138:	80 93 73 24 	sts	0x2473, r24	; 0x802473 <ACCSpeedINT>
    213c:	90 93 74 24 	sts	0x2474, r25	; 0x802474 <ACCSpeedINT+0x1>
    2140:	a0 93 75 24 	sts	0x2475, r26	; 0x802475 <ACCSpeedINT+0x2>
    2144:	b0 93 76 24 	sts	0x2476, r27	; 0x802476 <ACCSpeedINT+0x3>
			DECSpeedINT = CMDPRGlist.DECSpeedINT;
    2148:	84 a5       	ldd	r24, Z+44	; 0x2c
    214a:	95 a5       	ldd	r25, Z+45	; 0x2d
    214c:	a6 a5       	ldd	r26, Z+46	; 0x2e
    214e:	b7 a5       	ldd	r27, Z+47	; 0x2f
    2150:	80 93 6f 24 	sts	0x246F, r24	; 0x80246f <DECSpeedINT>
    2154:	90 93 70 24 	sts	0x2470, r25	; 0x802470 <DECSpeedINT+0x1>
    2158:	a0 93 71 24 	sts	0x2471, r26	; 0x802471 <DECSpeedINT+0x2>
    215c:	b0 93 72 24 	sts	0x2472, r27	; 0x802472 <DECSpeedINT+0x3>
			MaxDistanceToGo=CMDPRGlist.MaxDistanceToGo;
    2160:	84 a1       	ldd	r24, Z+36	; 0x24
    2162:	95 a1       	ldd	r25, Z+37	; 0x25
    2164:	a6 a1       	ldd	r26, Z+38	; 0x26
    2166:	b7 a1       	ldd	r27, Z+39	; 0x27
    2168:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    216c:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    2170:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    2174:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
			AccDTG=CMDPRGlist.ACCDTG;
    2178:	80 a9       	ldd	r24, Z+48	; 0x30
    217a:	91 a9       	ldd	r25, Z+49	; 0x31
    217c:	a2 a9       	ldd	r26, Z+50	; 0x32
    217e:	b3 a9       	ldd	r27, Z+51	; 0x33
    2180:	80 93 93 24 	sts	0x2493, r24	; 0x802493 <AccDTG>
    2184:	90 93 94 24 	sts	0x2494, r25	; 0x802494 <AccDTG+0x1>
    2188:	a0 93 95 24 	sts	0x2495, r26	; 0x802495 <AccDTG+0x2>
    218c:	b0 93 96 24 	sts	0x2496, r27	; 0x802496 <AccDTG+0x3>
			DecDTG=CMDPRGlist.DECDTG;
    2190:	84 a9       	ldd	r24, Z+52	; 0x34
    2192:	95 a9       	ldd	r25, Z+53	; 0x35
    2194:	a6 a9       	ldd	r26, Z+54	; 0x36
    2196:	b7 a9       	ldd	r27, Z+55	; 0x37
    2198:	80 93 8f 24 	sts	0x248F, r24	; 0x80248f <DecDTG>
    219c:	90 93 90 24 	sts	0x2490, r25	; 0x802490 <DecDTG+0x1>
    21a0:	a0 93 91 24 	sts	0x2491, r26	; 0x802491 <DecDTG+0x2>
    21a4:	b0 93 92 24 	sts	0x2492, r27	; 0x802492 <DecDTG+0x3>
			
			CurSpeedFrq = 0;
    21a8:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    21ac:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    21b0:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    21b4:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
			tcc0_init();
    21b8:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			TCC0.CCA = 0XFFFF;
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	9f ef       	ldi	r25, 0xFF	; 255
    21c0:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    21c4:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			//        ACC = 1;
			
			break;
    21c8:	0c c4       	rjmp	.+2072   	; 0x29e2 <_Z6PRGExev+0x9c6>
// Disable a Timer/Counter type TC0
void tc0_disable(TC0_t *ptc)
{
// Timer/Counter off
ptc->CTRLA=TC_CLKSEL_OFF_gc;
    21ca:	e0 e0       	ldi	r30, 0x00	; 0
    21cc:	f8 e0       	ldi	r31, 0x08	; 8
    21ce:	10 82       	st	Z, r1
// Issue a reset command
ptc->CTRLFSET=TC_CMD_RESET_gc;
    21d0:	8c e0       	ldi	r24, 0x0C	; 12
    21d2:	81 87       	std	Z+9, r24	; 0x09
		}
		case 1 : // With out ACC Mode
		{
			tc0_disable(&TCC0);
			for (int ax = 0 ; ax < CMDPRGlist.AxisNum ; ax++)
    21d4:	80 91 50 25 	lds	r24, 0x2550	; 0x802550 <CMDPRGlist+0x4>
    21d8:	88 23       	and	r24, r24
    21da:	f1 f1       	breq	.+124    	; 0x2258 <_Z6PRGExev+0x23c>
    21dc:	0f 2e       	mov	r0, r31
    21de:	f2 ee       	ldi	r31, 0xE2	; 226
    21e0:	cf 2e       	mov	r12, r31
    21e2:	f6 e2       	ldi	r31, 0x26	; 38
    21e4:	df 2e       	mov	r13, r31
    21e6:	f0 2d       	mov	r31, r0
    21e8:	0f 2e       	mov	r0, r31
    21ea:	fd e5       	ldi	r31, 0x5D	; 93
    21ec:	ef 2e       	mov	r14, r31
    21ee:	f5 e2       	ldi	r31, 0x25	; 37
    21f0:	ff 2e       	mov	r15, r31
    21f2:	f0 2d       	mov	r31, r0
    21f4:	0f 2e       	mov	r0, r31
    21f6:	f1 e5       	ldi	r31, 0x51	; 81
    21f8:	8f 2e       	mov	r8, r31
    21fa:	f5 e2       	ldi	r31, 0x25	; 37
    21fc:	9f 2e       	mov	r9, r31
    21fe:	f0 2d       	mov	r31, r0
    2200:	08 e1       	ldi	r16, 0x18	; 24
    2202:	17 e2       	ldi	r17, 0x27	; 39
    2204:	c0 e0       	ldi	r28, 0x00	; 0
    2206:	d0 e0       	ldi	r29, 0x00	; 0
    2208:	0f 2e       	mov	r0, r31
    220a:	fc e4       	ldi	r31, 0x4C	; 76
    220c:	af 2e       	mov	r10, r31
    220e:	f5 e2       	ldi	r31, 0x25	; 37
    2210:	bf 2e       	mov	r11, r31
    2212:	f0 2d       	mov	r31, r0
			{
				Ma[ax] = CMDPRGlist.SpeedMa[ax];
    2214:	f4 01       	movw	r30, r8
    2216:	87 85       	ldd	r24, Z+15	; 0x0f
    2218:	90 89       	ldd	r25, Z+16	; 0x10
    221a:	f6 01       	movw	r30, r12
    221c:	81 93       	st	Z+, r24
    221e:	91 93       	st	Z+, r25
    2220:	6f 01       	movw	r12, r30
				SetAxisDir(ax,CMDPRGlist.Direction[ax]);
    2222:	f7 01       	movw	r30, r14
    2224:	61 91       	ld	r22, Z+
    2226:	7f 01       	movw	r14, r30
    2228:	ce 01       	movw	r24, r28
    222a:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				DistanceToGo[ax] = CMDPRGlist.Move[ax];
    222e:	f4 01       	movw	r30, r8
    2230:	80 81       	ld	r24, Z
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	a2 81       	ldd	r26, Z+2	; 0x02
    2236:	b3 81       	ldd	r27, Z+3	; 0x03
    2238:	f4 e0       	ldi	r31, 0x04	; 4
    223a:	8f 0e       	add	r8, r31
    223c:	91 1c       	adc	r9, r1
    223e:	f8 01       	movw	r30, r16
    2240:	81 93       	st	Z+, r24
    2242:	91 93       	st	Z+, r25
    2244:	a1 93       	st	Z+, r26
    2246:	b1 93       	st	Z+, r27
    2248:	8f 01       	movw	r16, r30
			break;
		}
		case 1 : // With out ACC Mode
		{
			tc0_disable(&TCC0);
			for (int ax = 0 ; ax < CMDPRGlist.AxisNum ; ax++)
    224a:	21 96       	adiw	r28, 0x01	; 1
    224c:	f5 01       	movw	r30, r10
    224e:	84 81       	ldd	r24, Z+4	; 0x04
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	c8 17       	cp	r28, r24
    2254:	d9 07       	cpc	r29, r25
    2256:	f4 f2       	brlt	.-68     	; 0x2214 <_Z6PRGExev+0x1f8>
				Ma[ax] = CMDPRGlist.SpeedMa[ax];
				SetAxisDir(ax,CMDPRGlist.Direction[ax]);
				DistanceToGo[ax] = CMDPRGlist.Move[ax];
			}
			
			MaxSpeed = CMDPRGlist.MaxSpeed;
    2258:	60 91 6c 25 	lds	r22, 0x256C	; 0x80256c <CMDPRGlist+0x20>
    225c:	70 91 6d 25 	lds	r23, 0x256D	; 0x80256d <CMDPRGlist+0x21>
    2260:	80 91 6e 25 	lds	r24, 0x256E	; 0x80256e <CMDPRGlist+0x22>
    2264:	90 91 6f 25 	lds	r25, 0x256F	; 0x80256f <CMDPRGlist+0x23>
    2268:	60 93 87 24 	sts	0x2487, r22	; 0x802487 <MaxSpeed>
    226c:	70 93 88 24 	sts	0x2488, r23	; 0x802488 <MaxSpeed+0x1>
    2270:	80 93 89 24 	sts	0x2489, r24	; 0x802489 <MaxSpeed+0x2>
    2274:	90 93 8a 24 	sts	0x248A, r25	; 0x80248a <MaxSpeed+0x3>
			AccDTG = 0;
    2278:	10 92 93 24 	sts	0x2493, r1	; 0x802493 <AccDTG>
    227c:	10 92 94 24 	sts	0x2494, r1	; 0x802494 <AccDTG+0x1>
    2280:	10 92 95 24 	sts	0x2495, r1	; 0x802495 <AccDTG+0x2>
    2284:	10 92 96 24 	sts	0x2496, r1	; 0x802496 <AccDTG+0x3>
			DecDTG = 0;
    2288:	10 92 8f 24 	sts	0x248F, r1	; 0x80248f <DecDTG>
    228c:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <DecDTG+0x1>
    2290:	10 92 91 24 	sts	0x2491, r1	; 0x802491 <DecDTG+0x2>
    2294:	10 92 92 24 	sts	0x2492, r1	; 0x802492 <DecDTG+0x3>
			
			CurSpeedFrq = MaxSpeed;
    2298:	60 93 77 24 	sts	0x2477, r22	; 0x802477 <CurSpeedFrq>
    229c:	70 93 78 24 	sts	0x2478, r23	; 0x802478 <CurSpeedFrq+0x1>
    22a0:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <CurSpeedFrq+0x2>
    22a4:	90 93 7a 24 	sts	0x247A, r25	; 0x80247a <CurSpeedFrq+0x3>
			ACC = 0;
    22a8:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
			DEC = 0;
    22ac:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
			TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    22b0:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    22b4:	9b 01       	movw	r18, r22
    22b6:	ac 01       	movw	r20, r24
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	8a e7       	ldi	r24, 0x7A	; 122
    22be:	96 e4       	ldi	r25, 0x46	; 70
    22c0:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    22c4:	60 93 c6 24 	sts	0x24C6, r22	; 0x8024c6 <TimerMainPeriod>
    22c8:	70 93 c7 24 	sts	0x24C7, r23	; 0x8024c7 <TimerMainPeriod+0x1>
    22cc:	80 93 c8 24 	sts	0x24C8, r24	; 0x8024c8 <TimerMainPeriod+0x2>
    22d0:	90 93 c9 24 	sts	0x24C9, r25	; 0x8024c9 <TimerMainPeriod+0x3>
			tcc0_init();
    22d4:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	54 e4       	ldi	r21, 0x44	; 68
    22e0:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    22e4:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    22e8:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    22ec:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    22f0:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    22f4:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    22f8:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    22fc:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			break;
    2300:	70 c3       	rjmp	.+1760   	; 0x29e2 <_Z6PRGExev+0x9c6>
		}
		case 12: //Go to Refrence
		{
			while (IsAnyAxisMoving() == 1);
    2302:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	f1 f3       	breq	.-4      	; 0x2306 <_Z6PRGExev+0x2ea>
    230a:	0b ec       	ldi	r16, 0xCB	; 203
    230c:	14 e2       	ldi	r17, 0x24	; 36
    230e:	0f 2e       	mov	r0, r31
    2310:	f2 ee       	ldi	r31, 0xE2	; 226
    2312:	cf 2e       	mov	r12, r31
    2314:	f6 e2       	ldi	r31, 0x26	; 38
    2316:	df 2e       	mov	r13, r31
    2318:	f0 2d       	mov	r31, r0
    231a:	0f 2e       	mov	r0, r31
    231c:	f8 e1       	ldi	r31, 0x18	; 24
    231e:	ef 2e       	mov	r14, r31
    2320:	f7 e2       	ldi	r31, 0x27	; 39
    2322:	ff 2e       	mov	r15, r31
    2324:	f0 2d       	mov	r31, r0
    2326:	c0 e0       	ldi	r28, 0x00	; 0
    2328:	d0 e0       	ldi	r29, 0x00	; 0
			
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				SetAxisDir(ax,Axes[ax].RefrenceDir);
				Ma[ax] = 1000;
    232a:	0f 2e       	mov	r0, r31
    232c:	f8 ee       	ldi	r31, 0xE8	; 232
    232e:	6f 2e       	mov	r6, r31
    2330:	f3 e0       	ldi	r31, 0x03	; 3
    2332:	7f 2e       	mov	r7, r31
    2334:	f0 2d       	mov	r31, r0
				DistanceToGo[ax] = 0x7FFFFFFF;
    2336:	0f 2e       	mov	r0, r31
    2338:	88 24       	eor	r8, r8
    233a:	8a 94       	dec	r8
    233c:	98 2c       	mov	r9, r8
    233e:	a8 2c       	mov	r10, r8
    2340:	ff e7       	ldi	r31, 0x7F	; 127
    2342:	bf 2e       	mov	r11, r31
    2344:	f0 2d       	mov	r31, r0
		{
			while (IsAnyAxisMoving() == 1);
			
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				SetAxisDir(ax,Axes[ax].RefrenceDir);
    2346:	f8 01       	movw	r30, r16
    2348:	64 8d       	ldd	r22, Z+28	; 0x1c
    234a:	ce 01       	movw	r24, r28
    234c:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				Ma[ax] = 1000;
    2350:	f6 01       	movw	r30, r12
    2352:	61 92       	st	Z+, r6
    2354:	71 92       	st	Z+, r7
    2356:	6f 01       	movw	r12, r30
				DistanceToGo[ax] = 0x7FFFFFFF;
    2358:	f7 01       	movw	r30, r14
    235a:	81 92       	st	Z+, r8
    235c:	91 92       	st	Z+, r9
    235e:	a1 92       	st	Z+, r10
    2360:	b1 92       	st	Z+, r11
    2362:	7f 01       	movw	r14, r30
		}
		case 12: //Go to Refrence
		{
			while (IsAnyAxisMoving() == 1);
			
			for (int ax = 0 ; ax < AxisNumber ; ax++)
    2364:	21 96       	adiw	r28, 0x01	; 1
    2366:	05 5d       	subi	r16, 0xD5	; 213
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	c3 30       	cpi	r28, 0x03	; 3
    236c:	d1 05       	cpc	r29, r1
    236e:	59 f7       	brne	.-42     	; 0x2346 <_Z6PRGExev+0x32a>
				SetAxisDir(ax,Axes[ax].RefrenceDir);
				Ma[ax] = 1000;
				DistanceToGo[ax] = 0x7FFFFFFF;
			}
			
			MaxSpeed=8000;
    2370:	80 e4       	ldi	r24, 0x40	; 64
    2372:	9f e1       	ldi	r25, 0x1F	; 31
    2374:	a0 e0       	ldi	r26, 0x00	; 0
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    237c:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    2380:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    2384:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			
			CurSpeedFrq = MaxSpeed;
    2388:	80 93 77 24 	sts	0x2477, r24	; 0x802477 <CurSpeedFrq>
    238c:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <CurSpeedFrq+0x1>
    2390:	a0 93 79 24 	sts	0x2479, r26	; 0x802479 <CurSpeedFrq+0x2>
    2394:	b0 93 7a 24 	sts	0x247A, r27	; 0x80247a <CurSpeedFrq+0x3>
			ACC = 0;
    2398:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
			DEC = 0;
    239c:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
			TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e0       	ldi	r26, 0x00	; 0
    23a6:	b0 e4       	ldi	r27, 0x40	; 64
    23a8:	80 93 c6 24 	sts	0x24C6, r24	; 0x8024c6 <TimerMainPeriod>
    23ac:	90 93 c7 24 	sts	0x24C7, r25	; 0x8024c7 <TimerMainPeriod+0x1>
    23b0:	a0 93 c8 24 	sts	0x24C8, r26	; 0x8024c8 <TimerMainPeriod+0x2>
    23b4:	b0 93 c9 24 	sts	0x24C9, r27	; 0x8024c9 <TimerMainPeriod+0x3>
			RefCmd=1;
    23b8:	c1 e0       	ldi	r28, 0x01	; 1
    23ba:	c0 93 68 24 	sts	0x2468, r28	; 0x802468 <RefCmd>
			
			tcc0_init();
    23be:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			
			TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a e7       	ldi	r20, 0x7A	; 122
    23c8:	54 e4       	ldi	r21, 0x44	; 68
    23ca:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    23ce:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    23d2:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    23d6:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    23da:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    23de:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    23e2:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    23e6:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			sprintf(BufferSend,"!1200\r\n");
    23ea:	88 e0       	ldi	r24, 0x08	; 8
    23ec:	ea ed       	ldi	r30, 0xDA	; 218
    23ee:	f0 e2       	ldi	r31, 0x20	; 32
    23f0:	a9 e6       	ldi	r26, 0x69	; 105
    23f2:	b6 e2       	ldi	r27, 0x26	; 38
    23f4:	01 90       	ld	r0, Z+
    23f6:	0d 92       	st	X+, r0
    23f8:	8a 95       	dec	r24
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <_Z6PRGExev+0x3d8>
			Responsing = 1;
    23fc:	c0 93 9c 25 	sts	0x259C, r28	; 0x80259c <Responsing>
			SetDataReady; //there is some data for raspberry to receive
    2400:	e0 ea       	ldi	r30, 0xA0	; 160
    2402:	f6 e0       	ldi	r31, 0x06	; 6
    2404:	84 81       	ldd	r24, Z+4	; 0x04
    2406:	81 60       	ori	r24, 0x01	; 1
    2408:	84 83       	std	Z+4, r24	; 0x04
		}
		case 13: //set this position as reference
		{
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				SoftRefrence[ax] = AxisPosition[ax];
    240a:	e3 ed       	ldi	r30, 0xD3	; 211
    240c:	f6 e2       	ldi	r31, 0x26	; 38
    240e:	a4 e2       	ldi	r26, 0x24	; 36
    2410:	b7 e2       	ldi	r27, 0x27	; 39
    2412:	8d 91       	ld	r24, X+
    2414:	9c 91       	ld	r25, X
    2416:	11 97       	sbiw	r26, 0x01	; 1
    2418:	80 83       	st	Z, r24
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	14 96       	adiw	r26, 0x04	; 4
    241e:	8d 91       	ld	r24, X+
    2420:	9c 91       	ld	r25, X
    2422:	15 97       	sbiw	r26, 0x05	; 5
    2424:	82 83       	std	Z+2, r24	; 0x02
    2426:	93 83       	std	Z+3, r25	; 0x03
    2428:	18 96       	adiw	r26, 0x08	; 8
    242a:	8d 91       	ld	r24, X+
    242c:	9c 91       	ld	r25, X
    242e:	19 97       	sbiw	r26, 0x09	; 9
    2430:	84 83       	std	Z+4, r24	; 0x04
    2432:	95 83       	std	Z+5, r25	; 0x05
    2434:	d6 c2       	rjmp	.+1452   	; 0x29e2 <_Z6PRGExev+0x9c6>
			break;
		}
		case 14: //goto software refrence
		{
			//printf("Back to Software reference.\r\n");
			while (IsAnyAxisMoving() == 1);
    2436:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	f1 f3       	breq	.-4      	; 0x243a <_Z6PRGExev+0x41e>
    243e:	04 e2       	ldi	r16, 0x24	; 36
    2440:	17 e2       	ldi	r17, 0x27	; 39
    2442:	c3 ed       	ldi	r28, 0xD3	; 211
    2444:	d6 e2       	ldi	r29, 0x26	; 38
    2446:	0f 2e       	mov	r0, r31
    2448:	f8 e1       	ldi	r31, 0x18	; 24
    244a:	af 2e       	mov	r10, r31
    244c:	f7 e2       	ldi	r31, 0x27	; 39
    244e:	bf 2e       	mov	r11, r31
    2450:	f0 2d       	mov	r31, r0
    2452:	45 01       	movw	r8, r10
    2454:	e1 2c       	mov	r14, r1
    2456:	f1 2c       	mov	r15, r1
    2458:	21 2c       	mov	r2, r1
    245a:	31 2c       	mov	r3, r1
    245c:	c1 2c       	mov	r12, r1
    245e:	d1 2c       	mov	r13, r1
    2460:	3e 01       	movw	r6, r28
    2462:	28 01       	movw	r4, r16
			unsigned int temp = 0;
			int tempa = 0;
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				if(SoftRefrence[ax]<AxisPosition[ax]) SetAxisDir(ax,0);
    2464:	88 81       	ld	r24, Y
    2466:	99 81       	ldd	r25, Y+1	; 0x01
    2468:	a0 e0       	ldi	r26, 0x00	; 0
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	f8 01       	movw	r30, r16
    246e:	40 81       	ld	r20, Z
    2470:	51 81       	ldd	r21, Z+1	; 0x01
    2472:	62 81       	ldd	r22, Z+2	; 0x02
    2474:	73 81       	ldd	r23, Z+3	; 0x03
    2476:	84 17       	cp	r24, r20
    2478:	95 07       	cpc	r25, r21
    247a:	a6 07       	cpc	r26, r22
    247c:	b7 07       	cpc	r27, r23
    247e:	94 f4       	brge	.+36     	; 0x24a4 <_Z6PRGExev+0x488>
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	c7 01       	movw	r24, r14
    2484:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				if(SoftRefrence[ax]>=AxisPosition[ax]) SetAxisDir(ax,1);
    2488:	88 81       	ld	r24, Y
    248a:	99 81       	ldd	r25, Y+1	; 0x01
    248c:	a0 e0       	ldi	r26, 0x00	; 0
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	f8 01       	movw	r30, r16
    2492:	40 81       	ld	r20, Z
    2494:	51 81       	ldd	r21, Z+1	; 0x01
    2496:	62 81       	ldd	r22, Z+2	; 0x02
    2498:	73 81       	ldd	r23, Z+3	; 0x03
    249a:	84 17       	cp	r24, r20
    249c:	95 07       	cpc	r25, r21
    249e:	a6 07       	cpc	r26, r22
    24a0:	b7 07       	cpc	r27, r23
    24a2:	24 f0       	brlt	.+8      	; 0x24ac <_Z6PRGExev+0x490>
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	c7 01       	movw	r24, r14
    24a8:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
    24ac:	0c 5f       	subi	r16, 0xFC	; 252
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	22 96       	adiw	r28, 0x02	; 2
				DistanceToGo[ax] = 	labs(AxisPosition[ax]-SoftRefrence[ax]);
    24b2:	f3 01       	movw	r30, r6
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	f2 01       	movw	r30, r4
    24ba:	40 81       	ld	r20, Z
    24bc:	51 81       	ldd	r21, Z+1	; 0x01
    24be:	62 81       	ldd	r22, Z+2	; 0x02
    24c0:	73 81       	ldd	r23, Z+3	; 0x03
    24c2:	48 1b       	sub	r20, r24
    24c4:	59 0b       	sbc	r21, r25
    24c6:	61 09       	sbc	r22, r1
    24c8:	71 09       	sbc	r23, r1
    24ca:	db 01       	movw	r26, r22
    24cc:	ca 01       	movw	r24, r20
    24ce:	3a f4       	brpl	.+14     	; 0x24de <_Z6PRGExev+0x4c2>
    24d0:	88 27       	eor	r24, r24
    24d2:	99 27       	eor	r25, r25
    24d4:	dc 01       	movw	r26, r24
    24d6:	84 1b       	sub	r24, r20
    24d8:	95 0b       	sbc	r25, r21
    24da:	a6 0b       	sbc	r26, r22
    24dc:	b7 0b       	sbc	r27, r23
    24de:	f4 01       	movw	r30, r8
    24e0:	81 93       	st	Z+, r24
    24e2:	91 93       	st	Z+, r25
    24e4:	a1 93       	st	Z+, r26
    24e6:	b1 93       	st	Z+, r27
    24e8:	4f 01       	movw	r8, r30
				if (DistanceToGo[ax] > temp)
    24ea:	a6 01       	movw	r20, r12
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	48 17       	cp	r20, r24
    24f2:	59 07       	cpc	r21, r25
    24f4:	6a 07       	cpc	r22, r26
    24f6:	7b 07       	cpc	r23, r27
    24f8:	14 f4       	brge	.+4      	; 0x24fe <_Z6PRGExev+0x4e2>
				{
					temp = DistanceToGo[ax];
    24fa:	6c 01       	movw	r12, r24
    24fc:	17 01       	movw	r2, r14
		{
			//printf("Back to Software reference.\r\n");
			while (IsAnyAxisMoving() == 1);
			unsigned int temp = 0;
			int tempa = 0;
			for (int ax = 0 ; ax < AxisNumber ; ax++)
    24fe:	ff ef       	ldi	r31, 0xFF	; 255
    2500:	ef 1a       	sub	r14, r31
    2502:	ff 0a       	sbc	r15, r31
    2504:	23 e0       	ldi	r18, 0x03	; 3
    2506:	e2 16       	cp	r14, r18
    2508:	f1 04       	cpc	r15, r1
    250a:	09 f0       	breq	.+2      	; 0x250e <_Z6PRGExev+0x4f2>
    250c:	a9 cf       	rjmp	.-174    	; 0x2460 <_Z6PRGExev+0x444>
				}
			}
			
			//printf("SoftRef1: %d\tSoftRef2: %d\tSoftRef3: %d\r\n",SoftRef1,SoftRef2,SoftRef3);
			//printf("DistanceToGo1: %d\tDistanceToGo2: %d\tDistanceToGo3: %d\r\n",DistanceToGo1,DistanceToGo2,DistanceToGo3);
			MaxSpeed = Axes[tempa].MaxSpeed;
    250e:	8b e2       	ldi	r24, 0x2B	; 43
    2510:	82 9d       	mul	r24, r2
    2512:	f0 01       	movw	r30, r0
    2514:	83 9d       	mul	r24, r3
    2516:	f0 0d       	add	r31, r0
    2518:	11 24       	eor	r1, r1
    251a:	e5 53       	subi	r30, 0x35	; 53
    251c:	fb 4d       	sbci	r31, 0xDB	; 219
    251e:	85 81       	ldd	r24, Z+5	; 0x05
    2520:	96 81       	ldd	r25, Z+6	; 0x06
    2522:	a7 81       	ldd	r26, Z+7	; 0x07
    2524:	b0 85       	ldd	r27, Z+8	; 0x08
    2526:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    252a:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    252e:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    2532:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			IACC = Axes[tempa].ACC;
    2536:	41 85       	ldd	r20, Z+9	; 0x09
    2538:	52 85       	ldd	r21, Z+10	; 0x0a
    253a:	63 85       	ldd	r22, Z+11	; 0x0b
    253c:	74 85       	ldd	r23, Z+12	; 0x0c
    253e:	40 93 83 24 	sts	0x2483, r20	; 0x802483 <IACC>
    2542:	50 93 84 24 	sts	0x2484, r21	; 0x802484 <IACC+0x1>
    2546:	60 93 85 24 	sts	0x2485, r22	; 0x802485 <IACC+0x2>
    254a:	70 93 86 24 	sts	0x2486, r23	; 0x802486 <IACC+0x3>
			IDEC = Axes[tempa].DEC;
    254e:	45 85       	ldd	r20, Z+13	; 0x0d
    2550:	56 85       	ldd	r21, Z+14	; 0x0e
    2552:	67 85       	ldd	r22, Z+15	; 0x0f
    2554:	70 89       	ldd	r23, Z+16	; 0x10
    2556:	40 93 7f 24 	sts	0x247F, r20	; 0x80247f <IDEC>
    255a:	50 93 80 24 	sts	0x2480, r21	; 0x802480 <IDEC+0x1>
    255e:	60 93 81 24 	sts	0x2481, r22	; 0x802481 <IDEC+0x2>
    2562:	70 93 82 24 	sts	0x2482, r23	; 0x802482 <IDEC+0x3>
			MaxDistanceToGo = temp;
    2566:	e1 2c       	mov	r14, r1
    2568:	f1 2c       	mov	r15, r1
    256a:	c0 92 8b 24 	sts	0x248B, r12	; 0x80248b <MaxDistanceToGo>
    256e:	d0 92 8c 24 	sts	0x248C, r13	; 0x80248c <MaxDistanceToGo+0x1>
    2572:	e0 92 8d 24 	sts	0x248D, r14	; 0x80248d <MaxDistanceToGo+0x2>
    2576:	f0 92 8e 24 	sts	0x248E, r15	; 0x80248e <MaxDistanceToGo+0x3>
			//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
			if(MaxSpeed == 0)
    257a:	89 2b       	or	r24, r25
    257c:	8a 2b       	or	r24, r26
    257e:	8b 2b       	or	r24, r27
    2580:	09 f0       	breq	.+2      	; 0x2584 <_Z6PRGExev+0x568>
    2582:	2a c2       	rjmp	.+1108   	; 0x29d8 <_Z6PRGExev+0x9bc>
			{
				MaxSpeed = 500;
    2584:	84 ef       	ldi	r24, 0xF4	; 244
    2586:	91 e0       	ldi	r25, 0x01	; 1
    2588:	a0 e0       	ldi	r26, 0x00	; 0
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    2590:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    2594:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    2598:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
				ACC = 0;
    259c:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
				DEC = 0;
    25a0:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
    25a4:	19 c2       	rjmp	.+1074   	; 0x29d8 <_Z6PRGExev+0x9bc>
			}
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				Ma[ax] = (unsigned int)((float)((float)DistanceToGo[ax]/(float)MaxDistanceToGo)*1000);
    25a6:	f5 01       	movw	r30, r10
    25a8:	61 91       	ld	r22, Z+
    25aa:	71 91       	ld	r23, Z+
    25ac:	81 91       	ld	r24, Z+
    25ae:	91 91       	ld	r25, Z+
    25b0:	5f 01       	movw	r10, r30
    25b2:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    25b6:	2b 01       	movw	r4, r22
    25b8:	3c 01       	movw	r6, r24
    25ba:	c7 01       	movw	r24, r14
    25bc:	b6 01       	movw	r22, r12
    25be:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	c3 01       	movw	r24, r6
    25c8:	b2 01       	movw	r22, r4
    25ca:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a e7       	ldi	r20, 0x7A	; 122
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    25da:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    25de:	69 93       	st	Y+, r22
    25e0:	79 93       	st	Y+, r23
			{
				MaxSpeed = 500;
				ACC = 0;
				DEC = 0;
			}
			for (int ax = 0 ; ax < AxisNumber ; ax++)
    25e2:	a0 16       	cp	r10, r16
    25e4:	b1 06       	cpc	r11, r17
    25e6:	f9 f6       	brne	.-66     	; 0x25a6 <_Z6PRGExev+0x58a>
			{
				Ma[ax] = (unsigned int)((float)((float)DistanceToGo[ax]/(float)MaxDistanceToGo)*1000);
			}
			//printf("MaxSpeed: %d\tMa1: %d\tMa2: %d\tMa3: %d\r\n",MaxSpeed,Ma1,Ma2,Ma3);
			
			CurSpeedFrq=MaxSpeed;
    25e8:	60 91 87 24 	lds	r22, 0x2487	; 0x802487 <MaxSpeed>
    25ec:	70 91 88 24 	lds	r23, 0x2488	; 0x802488 <MaxSpeed+0x1>
    25f0:	80 91 89 24 	lds	r24, 0x2489	; 0x802489 <MaxSpeed+0x2>
    25f4:	90 91 8a 24 	lds	r25, 0x248A	; 0x80248a <MaxSpeed+0x3>
    25f8:	60 93 77 24 	sts	0x2477, r22	; 0x802477 <CurSpeedFrq>
    25fc:	70 93 78 24 	sts	0x2478, r23	; 0x802478 <CurSpeedFrq+0x1>
    2600:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <CurSpeedFrq+0x2>
    2604:	90 93 7a 24 	sts	0x247A, r25	; 0x80247a <CurSpeedFrq+0x3>

			TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    2608:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    260c:	9b 01       	movw	r18, r22
    260e:	ac 01       	movw	r20, r24
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	8a e7       	ldi	r24, 0x7A	; 122
    2616:	96 e4       	ldi	r25, 0x46	; 70
    2618:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    261c:	60 93 c6 24 	sts	0x24C6, r22	; 0x8024c6 <TimerMainPeriod>
    2620:	70 93 c7 24 	sts	0x24C7, r23	; 0x8024c7 <TimerMainPeriod+0x1>
    2624:	80 93 c8 24 	sts	0x24C8, r24	; 0x8024c8 <TimerMainPeriod+0x2>
    2628:	90 93 c9 24 	sts	0x24C9, r25	; 0x8024c9 <TimerMainPeriod+0x3>
			tcc0_init();
    262c:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    263c:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    2640:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    2644:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    2648:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    264c:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    2650:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2654:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			break;
    2658:	c4 c1       	rjmp	.+904    	; 0x29e2 <_Z6PRGExev+0x9c6>
		{
			break;
		}
		case 81 : //pen Down
		{
			DO1_SET;
    265a:	e0 e0       	ldi	r30, 0x00	; 0
    265c:	f7 e0       	ldi	r31, 0x07	; 7
    265e:	84 81       	ldd	r24, Z+4	; 0x04
    2660:	84 60       	ori	r24, 0x04	; 4
    2662:	84 83       	std	Z+4, r24	; 0x04
			
			break;
    2664:	be c1       	rjmp	.+892    	; 0x29e2 <_Z6PRGExev+0x9c6>
		}
		case 82 : //Pen UP
		{
			DO1_CLR;
    2666:	e0 e0       	ldi	r30, 0x00	; 0
    2668:	f7 e0       	ldi	r31, 0x07	; 7
    266a:	84 81       	ldd	r24, Z+4	; 0x04
    266c:	8b 7f       	andi	r24, 0xFB	; 251
    266e:	84 83       	std	Z+4, r24	; 0x04
			break;
    2670:	b8 c1       	rjmp	.+880    	; 0x29e2 <_Z6PRGExev+0x9c6>
		}
		case 90: //Serial number mode
		{
			char digit;
			int di=0;
			LastPLine = CMDPRGlist.PRGLine;
    2672:	80 91 4c 25 	lds	r24, 0x254C	; 0x80254c <CMDPRGlist>
    2676:	90 91 4d 25 	lds	r25, 0x254D	; 0x80254d <CMDPRGlist+0x1>
    267a:	80 93 64 24 	sts	0x2464, r24	; 0x802464 <LastPLine>
    267e:	90 93 65 24 	sts	0x2465, r25	; 0x802465 <LastPLine+0x1>
			
			CurrentSerial=ReadSerial();
    2682:	0e 94 77 08 	call	0x10ee	; 0x10ee <_Z10ReadSerialv>
    2686:	60 93 60 24 	sts	0x2460, r22	; 0x802460 <CurrentSerial>
    268a:	70 93 61 24 	sts	0x2461, r23	; 0x802461 <CurrentSerial+0x1>
    268e:	80 93 62 24 	sts	0x2462, r24	; 0x802462 <CurrentSerial+0x2>
    2692:	90 93 63 24 	sts	0x2463, r25	; 0x802463 <CurrentSerial+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2696:	ff ef       	ldi	r31, 0xFF	; 255
    2698:	23 ec       	ldi	r18, 0xC3	; 195
    269a:	89 e0       	ldi	r24, 0x09	; 9
    269c:	f1 50       	subi	r31, 0x01	; 1
    269e:	20 40       	sbci	r18, 0x00	; 0
    26a0:	80 40       	sbci	r24, 0x00	; 0
    26a2:	e1 f7       	brne	.-8      	; 0x269c <_Z6PRGExev+0x680>
    26a4:	00 c0       	rjmp	.+0      	; 0x26a6 <_Z6PRGExev+0x68a>
    26a6:	00 00       	nop
			_delay_ms(100);
			if(((CurrentSerial <= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 0)) || ((CurrentSerial >= CMDPRGlist.SerialTo) && (CMDPRGlist.SerialCountType == 1)))
    26a8:	00 91 89 25 	lds	r16, 0x2589	; 0x802589 <CMDPRGlist+0x3d>
    26ac:	10 91 8a 25 	lds	r17, 0x258A	; 0x80258a <CMDPRGlist+0x3e>
    26b0:	20 91 8b 25 	lds	r18, 0x258B	; 0x80258b <CMDPRGlist+0x3f>
    26b4:	30 91 8c 25 	lds	r19, 0x258C	; 0x80258c <CMDPRGlist+0x40>
    26b8:	60 91 60 24 	lds	r22, 0x2460	; 0x802460 <CurrentSerial>
    26bc:	70 91 61 24 	lds	r23, 0x2461	; 0x802461 <CurrentSerial+0x1>
    26c0:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <CurrentSerial+0x2>
    26c4:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <CurrentSerial+0x3>
    26c8:	06 17       	cp	r16, r22
    26ca:	17 07       	cpc	r17, r23
    26cc:	28 07       	cpc	r18, r24
    26ce:	39 07       	cpc	r19, r25
    26d0:	50 f0       	brcs	.+20     	; 0x26e6 <_Z6PRGExev+0x6ca>
    26d2:	40 91 84 25 	lds	r20, 0x2584	; 0x802584 <CMDPRGlist+0x38>
    26d6:	44 23       	and	r20, r20
    26d8:	59 f0       	breq	.+22     	; 0x26f0 <_Z6PRGExev+0x6d4>
    26da:	60 17       	cp	r22, r16
    26dc:	71 07       	cpc	r23, r17
    26de:	82 07       	cpc	r24, r18
    26e0:	93 07       	cpc	r25, r19
    26e2:	08 f4       	brcc	.+2      	; 0x26e6 <_Z6PRGExev+0x6ca>
    26e4:	08 c1       	rjmp	.+528    	; 0x28f6 <_Z6PRGExev+0x8da>
    26e6:	20 91 84 25 	lds	r18, 0x2584	; 0x802584 <CMDPRGlist+0x38>
    26ea:	21 30       	cpi	r18, 0x01	; 1
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <_Z6PRGExev+0x6d4>
    26ee:	03 c1       	rjmp	.+518    	; 0x28f6 <_Z6PRGExev+0x8da>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    26f0:	2a e0       	ldi	r18, 0x0A	; 10
    26f2:	46 e5       	ldi	r20, 0x56	; 86
    26f4:	54 e2       	ldi	r21, 0x24	; 36
    26f6:	0e 94 08 2b 	call	0x5610	; 0x5610 <__ltoa_ncheck>
			{
				ltoa(CurrentSerial,SerialCh,10);
				if(CMDPRGlist.FillWithZero)
    26fa:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <CMDPRGlist+0x41>
    26fe:	88 23       	and	r24, r24
    2700:	09 f4       	brne	.+2      	; 0x2704 <_Z6PRGExev+0x6e8>
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <_Z6PRGExev+0x766>
				{
					digit = CurrentSerial / 10;
    2704:	60 91 60 24 	lds	r22, 0x2460	; 0x802460 <CurrentSerial>
    2708:	70 91 61 24 	lds	r23, 0x2461	; 0x802461 <CurrentSerial+0x1>
    270c:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <CurrentSerial+0x2>
    2710:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <CurrentSerial+0x3>
    2714:	2a e0       	ldi	r18, 0x0A	; 10
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__udivmodsi4>
					digit++;
    2720:	2f 5f       	subi	r18, 0xFF	; 255
					if(CMDPRGlist.DigitNumber>digit)
    2722:	40 91 8e 25 	lds	r20, 0x258E	; 0x80258e <CMDPRGlist+0x42>
    2726:	50 91 8f 25 	lds	r21, 0x258F	; 0x80258f <CMDPRGlist+0x43>
    272a:	62 2f       	mov	r22, r18
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	64 17       	cp	r22, r20
    2730:	75 07       	cpc	r23, r21
    2732:	3c f5       	brge	.+78     	; 0x2782 <_Z6PRGExev+0x766>
					{
						for(di=digit-1;di>=0;di--)
    2734:	cb 01       	movw	r24, r22
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	3a f4       	brpl	.+14     	; 0x2748 <_Z6PRGExev+0x72c>
						{
							SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
						}
						for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    273a:	ca 01       	movw	r24, r20
    273c:	86 1b       	sub	r24, r22
    273e:	97 0b       	sbc	r25, r23
    2740:	18 16       	cp	r1, r24
    2742:	19 06       	cpc	r1, r25
    2744:	84 f0       	brlt	.+32     	; 0x2766 <_Z6PRGExev+0x74a>
    2746:	18 c0       	rjmp	.+48     	; 0x2778 <_Z6PRGExev+0x75c>
    2748:	e2 2f       	mov	r30, r18
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	ea 5a       	subi	r30, 0xAA	; 170
    274e:	fb 4d       	sbci	r31, 0xDB	; 219
    2750:	da 01       	movw	r26, r20
    2752:	aa 5a       	subi	r26, 0xAA	; 170
    2754:	bb 4d       	sbci	r27, 0xDB	; 219
    2756:	26 e5       	ldi	r18, 0x56	; 86
    2758:	34 e2       	ldi	r19, 0x24	; 36
					digit++;
					if(CMDPRGlist.DigitNumber>digit)
					{
						for(di=digit-1;di>=0;di--)
						{
							SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
    275a:	82 91       	ld	r24, -Z
    275c:	8e 93       	st	-X, r24
				{
					digit = CurrentSerial / 10;
					digit++;
					if(CMDPRGlist.DigitNumber>digit)
					{
						for(di=digit-1;di>=0;di--)
    275e:	e2 17       	cp	r30, r18
    2760:	f3 07       	cpc	r31, r19
    2762:	d9 f7       	brne	.-10     	; 0x275a <_Z6PRGExev+0x73e>
    2764:	ea cf       	rjmp	.-44     	; 0x273a <_Z6PRGExev+0x71e>
    2766:	e6 e5       	ldi	r30, 0x56	; 86
    2768:	f4 e2       	ldi	r31, 0x24	; 36
    276a:	8a 5a       	subi	r24, 0xAA	; 170
    276c:	9b 4d       	sbci	r25, 0xDB	; 219
						{
							SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
						}
						for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
						{
							SerialCh[di] = '0';
    276e:	20 e3       	ldi	r18, 0x30	; 48
    2770:	21 93       	st	Z+, r18
					{
						for(di=digit-1;di>=0;di--)
						{
							SerialCh[(di+(CMDPRGlist.DigitNumber-digit))]=SerialCh[di];
						}
						for(di=0;di<(CMDPRGlist.DigitNumber-digit);di++)
    2772:	e8 17       	cp	r30, r24
    2774:	f9 07       	cpc	r31, r25
    2776:	e1 f7       	brne	.-8      	; 0x2770 <_Z6PRGExev+0x754>
						{
							SerialCh[di] = '0';
						}
						SerialCh[CMDPRGlist.DigitNumber] = '0';
    2778:	fa 01       	movw	r30, r20
    277a:	ea 5a       	subi	r30, 0xAA	; 170
    277c:	fb 4d       	sbci	r31, 0xDB	; 219
    277e:	80 e3       	ldi	r24, 0x30	; 48
    2780:	80 83       	st	Z, r24
					}
				}
				if(CMDPRGlist.SerialCountType == 0)
    2782:	80 91 84 25 	lds	r24, 0x2584	; 0x802584 <CMDPRGlist+0x38>
    2786:	81 11       	cpse	r24, r1
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <_Z6PRGExev+0x796>
				{
					CurrentSerial++;
    278a:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <CurrentSerial>
    278e:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <CurrentSerial+0x1>
    2792:	a0 91 62 24 	lds	r26, 0x2462	; 0x802462 <CurrentSerial+0x2>
    2796:	b0 91 63 24 	lds	r27, 0x2463	; 0x802463 <CurrentSerial+0x3>
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	a1 1d       	adc	r26, r1
    279e:	b1 1d       	adc	r27, r1
    27a0:	80 93 60 24 	sts	0x2460, r24	; 0x802460 <CurrentSerial>
    27a4:	90 93 61 24 	sts	0x2461, r25	; 0x802461 <CurrentSerial+0x1>
    27a8:	a0 93 62 24 	sts	0x2462, r26	; 0x802462 <CurrentSerial+0x2>
    27ac:	b0 93 63 24 	sts	0x2463, r27	; 0x802463 <CurrentSerial+0x3>
    27b0:	13 c0       	rjmp	.+38     	; 0x27d8 <_Z6PRGExev+0x7bc>
				}
				else
				{
					CurrentSerial--;
    27b2:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <CurrentSerial>
    27b6:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <CurrentSerial+0x1>
    27ba:	a0 91 62 24 	lds	r26, 0x2462	; 0x802462 <CurrentSerial+0x2>
    27be:	b0 91 63 24 	lds	r27, 0x2463	; 0x802463 <CurrentSerial+0x3>
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	a1 09       	sbc	r26, r1
    27c6:	b1 09       	sbc	r27, r1
    27c8:	80 93 60 24 	sts	0x2460, r24	; 0x802460 <CurrentSerial>
    27cc:	90 93 61 24 	sts	0x2461, r25	; 0x802461 <CurrentSerial+0x1>
    27d0:	a0 93 62 24 	sts	0x2462, r26	; 0x802462 <CurrentSerial+0x2>
    27d4:	b0 93 63 24 	sts	0x2463, r27	; 0x802463 <CurrentSerial+0x3>
				}
				
				SerChIndex = 0;
    27d8:	10 92 54 24 	sts	0x2454, r1	; 0x802454 <SerChIndex>
    27dc:	10 92 55 24 	sts	0x2455, r1	; 0x802455 <SerChIndex+0x1>
				ContinuousRead = 0;
    27e0:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
				WriteSerial(CurrentSerial);
    27e4:	60 91 60 24 	lds	r22, 0x2460	; 0x802460 <CurrentSerial>
    27e8:	70 91 61 24 	lds	r23, 0x2461	; 0x802461 <CurrentSerial+0x1>
    27ec:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <CurrentSerial+0x2>
    27f0:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <CurrentSerial+0x3>
    27f4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_Z11WriteSeriall>
    27f8:	9f ef       	ldi	r25, 0xFF	; 255
    27fa:	e3 ed       	ldi	r30, 0xD3	; 211
    27fc:	f0 e3       	ldi	r31, 0x30	; 48
    27fe:	91 50       	subi	r25, 0x01	; 1
    2800:	e0 40       	sbci	r30, 0x00	; 0
    2802:	f0 40       	sbci	r31, 0x00	; 0
    2804:	e1 f7       	brne	.-8      	; 0x27fe <_Z6PRGExev+0x7e2>
    2806:	00 c0       	rjmp	.+0      	; 0x2808 <_Z6PRGExev+0x7ec>
    2808:	00 00       	nop
				_delay_ms(500);
				CurrentSerial = ReadSerial();
    280a:	0e 94 77 08 	call	0x10ee	; 0x10ee <_Z10ReadSerialv>
    280e:	60 93 60 24 	sts	0x2460, r22	; 0x802460 <CurrentSerial>
    2812:	70 93 61 24 	sts	0x2461, r23	; 0x802461 <CurrentSerial+0x1>
    2816:	80 93 62 24 	sts	0x2462, r24	; 0x802462 <CurrentSerial+0x2>
    281a:	90 93 63 24 	sts	0x2463, r25	; 0x802463 <CurrentSerial+0x3>
    281e:	2f ef       	ldi	r18, 0xFF	; 255
    2820:	83 ec       	ldi	r24, 0xC3	; 195
    2822:	99 e0       	ldi	r25, 0x09	; 9
    2824:	21 50       	subi	r18, 0x01	; 1
    2826:	80 40       	sbci	r24, 0x00	; 0
    2828:	90 40       	sbci	r25, 0x00	; 0
    282a:	e1 f7       	brne	.-8      	; 0x2824 <_Z6PRGExev+0x808>
    282c:	00 c0       	rjmp	.+0      	; 0x282e <_Z6PRGExev+0x812>
    282e:	00 00       	nop
				_delay_ms(100);
				printf("Current Serial is %lu\r\n",CurrentSerial);
    2830:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <CurrentSerial+0x3>
    2834:	8f 93       	push	r24
    2836:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <CurrentSerial+0x2>
    283a:	8f 93       	push	r24
    283c:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <CurrentSerial+0x1>
    2840:	8f 93       	push	r24
    2842:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <CurrentSerial>
    2846:	8f 93       	push	r24
    2848:	82 ee       	ldi	r24, 0xE2	; 226
    284a:	90 e2       	ldi	r25, 0x20	; 32
    284c:	9f 93       	push	r25
    284e:	8f 93       	push	r24
    2850:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
				ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100);
    2854:	e0 91 54 24 	lds	r30, 0x2454	; 0x802454 <SerChIndex>
    2858:	f0 91 55 24 	lds	r31, 0x2455	; 0x802455 <SerChIndex+0x1>
    285c:	ea 5a       	subi	r30, 0xAA	; 170
    285e:	fb 4d       	sbci	r31, 0xDB	; 219
    2860:	20 81       	ld	r18, Z
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	20 53       	subi	r18, 0x30	; 48
    2866:	31 09       	sbc	r19, r1
    2868:	c9 01       	movw	r24, r18
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	22 0f       	add	r18, r18
    2870:	33 1f       	adc	r19, r19
    2872:	22 0f       	add	r18, r18
    2874:	33 1f       	adc	r19, r19
    2876:	22 0f       	add	r18, r18
    2878:	33 1f       	adc	r19, r19
    287a:	82 0f       	add	r24, r18
    287c:	93 1f       	adc	r25, r19
    287e:	8c 59       	subi	r24, 0x9C	; 156
    2880:	9f 4f       	sbci	r25, 0xFF	; 255
    2882:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_Z14ReadSubProgramj>
				printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    2886:	cc e4       	ldi	r28, 0x4C	; 76
    2888:	d5 e2       	ldi	r29, 0x25	; 37
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	1f 92       	push	r1
    288e:	8f 93       	push	r24
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	8f 93       	push	r24
    2894:	88 81       	ld	r24, Y
    2896:	8f 93       	push	r24
    2898:	8a ef       	ldi	r24, 0xFA	; 250
    289a:	90 e2       	ldi	r25, 0x20	; 32
    289c:	9f 93       	push	r25
    289e:	8f 93       	push	r24
    28a0:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
				printf("Move1:%lu\tMove2:%lu\tMove3:%lu\r\n",CMDPRGlist.Move[0],CMDPRGlist.Move[1],CMDPRGlist.Move[2]);
    28a4:	88 89       	ldd	r24, Y+16	; 0x10
    28a6:	8f 93       	push	r24
    28a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28aa:	8f 93       	push	r24
    28ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ae:	8f 93       	push	r24
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	8f 93       	push	r24
    28b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28b6:	8f 93       	push	r24
    28b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ba:	8f 93       	push	r24
    28bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28be:	8f 93       	push	r24
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	8f 93       	push	r24
    28c4:	88 85       	ldd	r24, Y+8	; 0x08
    28c6:	8f 93       	push	r24
    28c8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ca:	8f 93       	push	r24
    28cc:	8e 81       	ldd	r24, Y+6	; 0x06
    28ce:	8f 93       	push	r24
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	8f 93       	push	r24
    28d4:	87 e1       	ldi	r24, 0x17	; 23
    28d6:	91 e2       	ldi	r25, 0x21	; 33
    28d8:	9f 93       	push	r25
    28da:	8f 93       	push	r24
    28dc:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
				PRGExe();
    28e0:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z6PRGExev>
				RunSubProgram=1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	80 93 53 24 	sts	0x2453, r24	; 0x802453 <RunSubProgram>
    28ea:	ed b7       	in	r30, 0x3d	; 61
    28ec:	fe b7       	in	r31, 0x3e	; 62
    28ee:	7a 96       	adiw	r30, 0x1a	; 26
    28f0:	ed bf       	out	0x3d, r30	; 61
    28f2:	fe bf       	out	0x3e, r31	; 62
    28f4:	76 c0       	rjmp	.+236    	; 0x29e2 <_Z6PRGExev+0x9c6>
			}
			else
			{
				RunSubProgram=0;
    28f6:	10 92 53 24 	sts	0x2453, r1	; 0x802453 <RunSubProgram>
				ContinuousRead=0;
    28fa:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
				readRam();
    28fe:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
				while(CMDPRGlist.PRGLine != LastPLine)
    2902:	20 91 4c 25 	lds	r18, 0x254C	; 0x80254c <CMDPRGlist>
    2906:	30 91 4d 25 	lds	r19, 0x254D	; 0x80254d <CMDPRGlist+0x1>
    290a:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <LastPLine>
    290e:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <LastPLine+0x1>
    2912:	28 17       	cp	r18, r24
    2914:	39 07       	cpc	r19, r25
    2916:	09 f4       	brne	.+2      	; 0x291a <_Z6PRGExev+0x8fe>
    2918:	64 c0       	rjmp	.+200    	; 0x29e2 <_Z6PRGExev+0x9c6>
    291a:	cc e4       	ldi	r28, 0x4C	; 76
    291c:	d5 e2       	ldi	r29, 0x25	; 37
				{
					readRam();
    291e:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
			else
			{
				RunSubProgram=0;
				ContinuousRead=0;
				readRam();
				while(CMDPRGlist.PRGLine != LastPLine)
    2922:	28 81       	ld	r18, Y
    2924:	39 81       	ldd	r19, Y+1	; 0x01
    2926:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <LastPLine>
    292a:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <LastPLine+0x1>
    292e:	28 17       	cp	r18, r24
    2930:	39 07       	cpc	r19, r25
    2932:	a9 f7       	brne	.-22     	; 0x291e <_Z6PRGExev+0x902>
    2934:	56 c0       	rjmp	.+172    	; 0x29e2 <_Z6PRGExev+0x9c6>
			}
			break;
		}
		case 100 :
		{
			printf("End Of Program.\r\n");
    2936:	87 e3       	ldi	r24, 0x37	; 55
    2938:	91 e2       	ldi	r25, 0x21	; 33
    293a:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
			ProgramRun = 0;
    293e:	10 92 ca 24 	sts	0x24CA, r1	; 0x8024ca <ProgramRun>
			ContinuousRead = 0;
    2942:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
			break;
    2946:	4d c0       	rjmp	.+154    	; 0x29e2 <_Z6PRGExev+0x9c6>
		}
		case 101:
		{
			SerChIndex++;
    2948:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <SerChIndex>
    294c:	90 91 55 24 	lds	r25, 0x2455	; 0x802455 <SerChIndex+0x1>
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	80 93 54 24 	sts	0x2454, r24	; 0x802454 <SerChIndex>
    2956:	90 93 55 24 	sts	0x2455, r25	; 0x802455 <SerChIndex+0x1>
			
			if(SerialCh[SerChIndex]!=0)
    295a:	fc 01       	movw	r30, r24
    295c:	ea 5a       	subi	r30, 0xAA	; 170
    295e:	fb 4d       	sbci	r31, 0xDB	; 219
    2960:	20 81       	ld	r18, Z
    2962:	22 23       	and	r18, r18
    2964:	d1 f0       	breq	.+52     	; 0x299a <_Z6PRGExev+0x97e>
			{
				RunSubProgram = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	80 93 53 24 	sts	0x2453, r24	; 0x802453 <RunSubProgram>
				ContinuousRead = 0;
    296c:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
				ReadSubProgram(((SerialCh[SerChIndex]-48)*10)+100);
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	20 53       	subi	r18, 0x30	; 48
    2974:	31 09       	sbc	r19, r1
    2976:	c9 01       	movw	r24, r18
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	22 0f       	add	r18, r18
    297e:	33 1f       	adc	r19, r19
    2980:	22 0f       	add	r18, r18
    2982:	33 1f       	adc	r19, r19
    2984:	22 0f       	add	r18, r18
    2986:	33 1f       	adc	r19, r19
    2988:	82 0f       	add	r24, r18
    298a:	93 1f       	adc	r25, r19
    298c:	8c 59       	subi	r24, 0x9C	; 156
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_Z14ReadSubProgramj>
				PRGExe();
    2994:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z6PRGExev>
    2998:	24 c0       	rjmp	.+72     	; 0x29e2 <_Z6PRGExev+0x9c6>
			}
			else
			{
				RunSubProgram=0;
    299a:	10 92 53 24 	sts	0x2453, r1	; 0x802453 <RunSubProgram>
				ContinuousRead=0;
    299e:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
				readRam();
    29a2:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
				while(CMDPRGlist.PRGLine != LastPLine)
    29a6:	20 91 4c 25 	lds	r18, 0x254C	; 0x80254c <CMDPRGlist>
    29aa:	30 91 4d 25 	lds	r19, 0x254D	; 0x80254d <CMDPRGlist+0x1>
    29ae:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <LastPLine>
    29b2:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <LastPLine+0x1>
    29b6:	28 17       	cp	r18, r24
    29b8:	39 07       	cpc	r19, r25
    29ba:	99 f0       	breq	.+38     	; 0x29e2 <_Z6PRGExev+0x9c6>
    29bc:	cc e4       	ldi	r28, 0x4C	; 76
    29be:	d5 e2       	ldi	r29, 0x25	; 37
				{
					readRam();
    29c0:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
			else
			{
				RunSubProgram=0;
				ContinuousRead=0;
				readRam();
				while(CMDPRGlist.PRGLine != LastPLine)
    29c4:	28 81       	ld	r18, Y
    29c6:	39 81       	ldd	r19, Y+1	; 0x01
    29c8:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <LastPLine>
    29cc:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <LastPLine+0x1>
    29d0:	28 17       	cp	r18, r24
    29d2:	39 07       	cpc	r19, r25
    29d4:	a9 f7       	brne	.-22     	; 0x29c0 <_Z6PRGExev+0x9a4>
    29d6:	05 c0       	rjmp	.+10     	; 0x29e2 <_Z6PRGExev+0x9c6>
    29d8:	c2 ee       	ldi	r28, 0xE2	; 226
    29da:	d6 e2       	ldi	r29, 0x26	; 38
    29dc:	04 e2       	ldi	r16, 0x24	; 36
    29de:	17 e2       	ldi	r17, 0x27	; 39
    29e0:	e2 cd       	rjmp	.-1084   	; 0x25a6 <_Z6PRGExev+0x58a>
				}
			}
			break;
		}
	}
}
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
    29f2:	bf 90       	pop	r11
    29f4:	af 90       	pop	r10
    29f6:	9f 90       	pop	r9
    29f8:	8f 90       	pop	r8
    29fa:	7f 90       	pop	r7
    29fc:	6f 90       	pop	r6
    29fe:	5f 90       	pop	r5
    2a00:	4f 90       	pop	r4
    2a02:	3f 90       	pop	r3
    2a04:	2f 90       	pop	r2
    2a06:	08 95       	ret

00002a08 <_Z6cmdExev>:

// run command that comes from raspberry the command will be in cmdtemp
void cmdExe()
{
    2a08:	2f 92       	push	r2
    2a0a:	3f 92       	push	r3
    2a0c:	4f 92       	push	r4
    2a0e:	5f 92       	push	r5
    2a10:	6f 92       	push	r6
    2a12:	7f 92       	push	r7
    2a14:	8f 92       	push	r8
    2a16:	9f 92       	push	r9
    2a18:	af 92       	push	r10
    2a1a:	bf 92       	push	r11
    2a1c:	cf 92       	push	r12
    2a1e:	df 92       	push	r13
    2a20:	ef 92       	push	r14
    2a22:	ff 92       	push	r15
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	2b 97       	sbiw	r28, 0x0b	; 11
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	de bf       	out	0x3e, r29	; 62
	int ax = cmdTemp[4] - 49; //Char - 48 = ASCII to decimal ,
    2a36:	00 91 b1 24 	lds	r16, 0x24B1	; 0x8024b1 <cmdTemp+0x4>
    2a3a:	10 e0       	ldi	r17, 0x00	; 0
    2a3c:	18 01       	movw	r2, r16
    2a3e:	21 e3       	ldi	r18, 0x31	; 49
    2a40:	22 1a       	sub	r2, r18
    2a42:	31 08       	sbc	r3, r1
	if(strncmp(cmdTemp,"?0000",3)==0)
    2a44:	43 e0       	ldi	r20, 0x03	; 3
    2a46:	50 e0       	ldi	r21, 0x00	; 0
    2a48:	68 e4       	ldi	r22, 0x48	; 72
    2a4a:	71 e2       	ldi	r23, 0x21	; 33
    2a4c:	8d ea       	ldi	r24, 0xAD	; 173
    2a4e:	94 e2       	ldi	r25, 0x24	; 36
    2a50:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    2a54:	89 2b       	or	r24, r25
    2a56:	89 f4       	brne	.+34     	; 0x2a7a <_Z6cmdExev+0x72>
	{
		sprintf(BufferSend,"!0000\n\r");
    2a58:	88 e0       	ldi	r24, 0x08	; 8
    2a5a:	ee e4       	ldi	r30, 0x4E	; 78
    2a5c:	f1 e2       	ldi	r31, 0x21	; 33
    2a5e:	a9 e6       	ldi	r26, 0x69	; 105
    2a60:	b6 e2       	ldi	r27, 0x26	; 38
    2a62:	01 90       	ld	r0, Z+
    2a64:	0d 92       	st	X+, r0
    2a66:	8a 95       	dec	r24
    2a68:	e1 f7       	brne	.-8      	; 0x2a62 <_Z6cmdExev+0x5a>
		Responsing=1;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
		SetDataReady;
    2a70:	e0 ea       	ldi	r30, 0xA0	; 160
    2a72:	f6 e0       	ldi	r31, 0x06	; 6
    2a74:	84 81       	ldd	r24, Z+4	; 0x04
    2a76:	81 60       	ori	r24, 0x01	; 1
    2a78:	84 83       	std	Z+4, r24	; 0x04
	}
	if(strncmp(cmdTemp,"?01",3)==0)
    2a7a:	43 e0       	ldi	r20, 0x03	; 3
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	66 e5       	ldi	r22, 0x56	; 86
    2a80:	71 e2       	ldi	r23, 0x21	; 33
    2a82:	8d ea       	ldi	r24, 0xAD	; 173
    2a84:	94 e2       	ldi	r25, 0x24	; 36
    2a86:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    2a8a:	89 2b       	or	r24, r25
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <_Z6cmdExev+0x88>
    2a8e:	a1 c0       	rjmp	.+322    	; 0x2bd2 <_Z6cmdExev+0x1ca>
	{
		if(cmdTemp[3]=='0') //Read Axis Inputs
    2a90:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2a94:	80 33       	cpi	r24, 0x30	; 48
    2a96:	11 f0       	breq	.+4      	; 0x2a9c <_Z6cmdExev+0x94>
    2a98:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
		{
			switch(cmdTemp[5])
    2a9c:	80 91 b2 24 	lds	r24, 0x24B2	; 0x8024b2 <cmdTemp+0x5>
    2aa0:	82 33       	cpi	r24, 0x32	; 50
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <_Z6cmdExev+0x9e>
    2aa4:	45 c0       	rjmp	.+138    	; 0x2b30 <_Z6cmdExev+0x128>
    2aa6:	30 f4       	brcc	.+12     	; 0x2ab4 <_Z6cmdExev+0xac>
    2aa8:	80 33       	cpi	r24, 0x30	; 48
    2aaa:	61 f0       	breq	.+24     	; 0x2ac4 <_Z6cmdExev+0xbc>
    2aac:	81 33       	cpi	r24, 0x31	; 49
    2aae:	29 f1       	breq	.+74     	; 0x2afa <_Z6cmdExev+0xf2>
    2ab0:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2ab4:	83 33       	cpi	r24, 0x33	; 51
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <_Z6cmdExev+0xb2>
    2ab8:	56 c0       	rjmp	.+172    	; 0x2b66 <_Z6cmdExev+0x15e>
    2aba:	84 33       	cpi	r24, 0x34	; 52
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <_Z6cmdExev+0xb8>
    2abe:	6e c0       	rjmp	.+220    	; 0x2b9c <_Z6cmdExev+0x194>
    2ac0:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			{
				case '0': //ALARM
				{
					if(EchoON) printf("!010%d0\t%u\n\r",ax,AxisAlarm(ax));
    2ac4:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2ac8:	88 23       	and	r24, r24
    2aca:	11 f4       	brne	.+4      	; 0x2ad0 <_Z6cmdExev+0xc8>
    2acc:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2ad0:	82 2d       	mov	r24, r2
    2ad2:	0e 94 24 02 	call	0x448	; 0x448 <_Z9AxisAlarmc>
    2ad6:	1f 92       	push	r1
    2ad8:	8f 93       	push	r24
    2ada:	3f 92       	push	r3
    2adc:	2f 92       	push	r2
    2ade:	8a e5       	ldi	r24, 0x5A	; 90
    2ae0:	91 e2       	ldi	r25, 0x21	; 33
    2ae2:	9f 93       	push	r25
    2ae4:	8f 93       	push	r24
    2ae6:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
					break;
				}
				case '1': //INPOS
				{
					if(EchoON) printf("!010%d1\t%u\n\r",ax,AxisInPos(ax));
    2afa:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2afe:	88 23       	and	r24, r24
    2b00:	11 f4       	brne	.+4      	; 0x2b06 <_Z6cmdExev+0xfe>
    2b02:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2b06:	82 2d       	mov	r24, r2
    2b08:	0e 94 3b 02 	call	0x476	; 0x476 <_Z9AxisInPosc>
    2b0c:	1f 92       	push	r1
    2b0e:	8f 93       	push	r24
    2b10:	3f 92       	push	r3
    2b12:	2f 92       	push	r2
    2b14:	87 e6       	ldi	r24, 0x67	; 103
    2b16:	91 e2       	ldi	r25, 0x21	; 33
    2b18:	9f 93       	push	r25
    2b1a:	8f 93       	push	r24
    2b1c:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
					break;
				}
				case '2': //REF
				{
					if(EchoON) printf("!010%d2\t%u\n\r",ax,AxisRef(ax));
    2b30:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2b34:	88 23       	and	r24, r24
    2b36:	11 f4       	brne	.+4      	; 0x2b3c <_Z6cmdExev+0x134>
    2b38:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2b3c:	82 2d       	mov	r24, r2
    2b3e:	0e 94 83 02 	call	0x506	; 0x506 <_Z7AxisRefc>
    2b42:	1f 92       	push	r1
    2b44:	8f 93       	push	r24
    2b46:	3f 92       	push	r3
    2b48:	2f 92       	push	r2
    2b4a:	84 e7       	ldi	r24, 0x74	; 116
    2b4c:	91 e2       	ldi	r25, 0x21	; 33
    2b4e:	9f 93       	push	r25
    2b50:	8f 93       	push	r24
    2b52:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
					break;
				}
				case '3': //LIMIT+
				{
					if(EchoON) printf("!010%d3\t%u\n\r",ax,AxisLimitPos(ax));
    2b66:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2b6a:	88 23       	and	r24, r24
    2b6c:	11 f4       	brne	.+4      	; 0x2b72 <_Z6cmdExev+0x16a>
    2b6e:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2b72:	82 2d       	mov	r24, r2
    2b74:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z12AxisLimitPosc>
    2b78:	1f 92       	push	r1
    2b7a:	8f 93       	push	r24
    2b7c:	3f 92       	push	r3
    2b7e:	2f 92       	push	r2
    2b80:	81 e8       	ldi	r24, 0x81	; 129
    2b82:	91 e2       	ldi	r25, 0x21	; 33
    2b84:	9f 93       	push	r25
    2b86:	8f 93       	push	r24
    2b88:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
					break;
				}
				case '4': //LIMIT-
				{
					if(EchoON) printf("!010%d4\t%u\n\r",ax,AxisLimitNeg(ax));
    2b9c:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2ba0:	88 23       	and	r24, r24
    2ba2:	11 f4       	brne	.+4      	; 0x2ba8 <_Z6cmdExev+0x1a0>
    2ba4:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2ba8:	82 2d       	mov	r24, r2
    2baa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z12AxisLimitNegc>
    2bae:	1f 92       	push	r1
    2bb0:	8f 93       	push	r24
    2bb2:	3f 92       	push	r3
    2bb4:	2f 92       	push	r2
    2bb6:	8e e8       	ldi	r24, 0x8E	; 142
    2bb8:	91 e2       	ldi	r25, 0x21	; 33
    2bba:	9f 93       	push	r25
    2bbc:	8f 93       	push	r24
    2bbe:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
				}
			}
		}
	}
	
	else if(strncmp(cmdTemp,"#02",3)==0)
    2bd2:	43 e0       	ldi	r20, 0x03	; 3
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	6b e9       	ldi	r22, 0x9B	; 155
    2bd8:	71 e2       	ldi	r23, 0x21	; 33
    2bda:	8d ea       	ldi	r24, 0xAD	; 173
    2bdc:	94 e2       	ldi	r25, 0x24	; 36
    2bde:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    2be2:	89 2b       	or	r24, r25
    2be4:	e1 f4       	brne	.+56     	; 0x2c1e <_Z6cmdExev+0x216>
	{
		if(cmdTemp[3]=='0')//Write Axis Outputs
    2be6:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2bea:	80 33       	cpi	r24, 0x30	; 48
    2bec:	11 f0       	breq	.+4      	; 0x2bf2 <_Z6cmdExev+0x1ea>
    2bee:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
		{
			switch(cmdTemp[5])
    2bf2:	80 91 b2 24 	lds	r24, 0x24B2	; 0x8024b2 <cmdTemp+0x5>
    2bf6:	80 33       	cpi	r24, 0x30	; 48
    2bf8:	21 f0       	breq	.+8      	; 0x2c02 <_Z6cmdExev+0x1fa>
    2bfa:	81 33       	cpi	r24, 0x31	; 49
    2bfc:	49 f0       	breq	.+18     	; 0x2c10 <_Z6cmdExev+0x208>
    2bfe:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			{
				case '0': //Enable
				{
					SetAxisEnable(ax,cmdTemp[6]);
    2c02:	60 91 b3 24 	lds	r22, 0x24B3	; 0x8024b3 <cmdTemp+0x6>
    2c06:	c1 01       	movw	r24, r2
    2c08:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z13SetAxisEnableic>
					break;
    2c0c:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
				}
				case '1': //EMG
				{
					SetAxisEMG(ax,cmdTemp[6]);
    2c10:	60 91 b3 24 	lds	r22, 0x24B3	; 0x8024b3 <cmdTemp+0x6>
    2c14:	c1 01       	movw	r24, r2
    2c16:	0e 94 aa 01 	call	0x354	; 0x354 <_Z10SetAxisEMGic>
					break;
    2c1a:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
					break;
				}
			}
		}
	}
	else if(strncmp(cmdTemp,"?03",3)==0)
    2c1e:	43 e0       	ldi	r20, 0x03	; 3
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	6f e9       	ldi	r22, 0x9F	; 159
    2c24:	71 e2       	ldi	r23, 0x21	; 33
    2c26:	8d ea       	ldi	r24, 0xAD	; 173
    2c28:	94 e2       	ldi	r25, 0x24	; 36
    2c2a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    2c2e:	89 2b       	or	r24, r25
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <_Z6cmdExev+0x22c>
    2c32:	46 c0       	rjmp	.+140    	; 0x2cc0 <_Z6cmdExev+0x2b8>
	{
		if(cmdTemp[3]=='0') //Read Axis Output
    2c34:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2c38:	80 33       	cpi	r24, 0x30	; 48
    2c3a:	11 f0       	breq	.+4      	; 0x2c40 <_Z6cmdExev+0x238>
    2c3c:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
		{
			switch(cmdTemp[5])
    2c40:	80 91 b2 24 	lds	r24, 0x24B2	; 0x8024b2 <cmdTemp+0x5>
    2c44:	80 33       	cpi	r24, 0x30	; 48
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <_Z6cmdExev+0x248>
    2c48:	81 33       	cpi	r24, 0x31	; 49
    2c4a:	f1 f0       	breq	.+60     	; 0x2c88 <_Z6cmdExev+0x280>
    2c4c:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			{
				case '0': //Enable
				{
					if(EchoON) printf("!030%d0\t%u\n\r",ax,AxisEnable[ax]);
    2c50:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2c54:	88 23       	and	r24, r24
    2c56:	11 f4       	brne	.+4      	; 0x2c5c <_Z6cmdExev+0x254>
    2c58:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2c5c:	f1 01       	movw	r30, r2
    2c5e:	e7 52       	subi	r30, 0x27	; 39
    2c60:	f9 4d       	sbci	r31, 0xD9	; 217
    2c62:	80 81       	ld	r24, Z
    2c64:	1f 92       	push	r1
    2c66:	8f 93       	push	r24
    2c68:	3f 92       	push	r3
    2c6a:	2f 92       	push	r2
    2c6c:	83 ea       	ldi	r24, 0xA3	; 163
    2c6e:	91 e2       	ldi	r25, 0x21	; 33
    2c70:	9f 93       	push	r25
    2c72:	8f 93       	push	r24
    2c74:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
					break;
				}
				case '1': //EMG
				{
					if(EchoON) printf("!030%d1\t%u\n\r",ax,AxisEMG[ax]);
    2c88:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2c8c:	88 23       	and	r24, r24
    2c8e:	11 f4       	brne	.+4      	; 0x2c94 <_Z6cmdExev+0x28c>
    2c90:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2c94:	f1 01       	movw	r30, r2
    2c96:	e4 52       	subi	r30, 0x24	; 36
    2c98:	f9 4d       	sbci	r31, 0xD9	; 217
    2c9a:	80 81       	ld	r24, Z
    2c9c:	1f 92       	push	r1
    2c9e:	8f 93       	push	r24
    2ca0:	3f 92       	push	r3
    2ca2:	2f 92       	push	r2
    2ca4:	80 eb       	ldi	r24, 0xB0	; 176
    2ca6:	91 e2       	ldi	r25, 0x21	; 33
    2ca8:	9f 93       	push	r25
    2caa:	8f 93       	push	r24
    2cac:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
					break;
				}
			}
		}
	}
	else if(strncmp(cmdTemp,"#04",3)==0) // Jog Each Axis
    2cc0:	43 e0       	ldi	r20, 0x03	; 3
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	6d eb       	ldi	r22, 0xBD	; 189
    2cc6:	71 e2       	ldi	r23, 0x21	; 33
    2cc8:	8d ea       	ldi	r24, 0xAD	; 173
    2cca:	94 e2       	ldi	r25, 0x24	; 36
    2ccc:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    2cd0:	89 2b       	or	r24, r25
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <_Z6cmdExev+0x2ce>
    2cd4:	49 c0       	rjmp	.+146    	; 0x2d68 <_Z6cmdExev+0x360>
	{
		if (!ProgramRun)
    2cd6:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    2cda:	81 11       	cpse	r24, r1
    2cdc:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
		{
			if(cmdTemp[3]=='0')//SET JOG FOR AXIS
    2ce0:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2ce4:	80 33       	cpi	r24, 0x30	; 48
    2ce6:	11 f0       	breq	.+4      	; 0x2cec <_Z6cmdExev+0x2e4>
    2ce8:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2cec:	e2 eb       	ldi	r30, 0xB2	; 178
    2cee:	f4 e2       	ldi	r31, 0x24	; 36
    2cf0:	a8 e9       	ldi	r26, 0x98	; 152
    2cf2:	b4 e2       	ldi	r27, 0x24	; 36
    2cf4:	20 ec       	ldi	r18, 0xC0	; 192
    2cf6:	34 e2       	ldi	r19, 0x24	; 36
			{
				for(k = 0 ; k < 14 ; k++)
				{
					temp[k]=cmdTemp[k+5];
    2cf8:	81 91       	ld	r24, Z+
    2cfa:	8d 93       	st	X+, r24
	{
		if (!ProgramRun)
		{
			if(cmdTemp[3]=='0')//SET JOG FOR AXIS
			{
				for(k = 0 ; k < 14 ; k++)
    2cfc:	2e 17       	cp	r18, r30
    2cfe:	3f 07       	cpc	r19, r31
    2d00:	d9 f7       	brne	.-10     	; 0x2cf8 <_Z6cmdExev+0x2f0>
    2d02:	8e e0       	ldi	r24, 0x0E	; 14
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	80 93 c2 24 	sts	0x24C2, r24	; 0x8024c2 <k>
    2d0a:	90 93 c3 24 	sts	0x24C3, r25	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[20]=0;
    2d0e:	08 e9       	ldi	r16, 0x98	; 152
    2d10:	14 e2       	ldi	r17, 0x24	; 36
    2d12:	d8 01       	movw	r26, r16
    2d14:	54 96       	adiw	r26, 0x14	; 20
    2d16:	1c 92       	st	X, r1
				SetJog[ax]=atol(temp);
    2d18:	c8 01       	movw	r24, r16
    2d1a:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <atol>
    2d1e:	f1 01       	movw	r30, r2
    2d20:	ee 0f       	add	r30, r30
    2d22:	ff 1f       	adc	r31, r31
    2d24:	ee 0f       	add	r30, r30
    2d26:	ff 1f       	adc	r31, r31
    2d28:	e0 5d       	subi	r30, 0xD0	; 208
    2d2a:	f8 4d       	sbci	r31, 0xD8	; 216
    2d2c:	60 83       	st	Z, r22
    2d2e:	71 83       	std	Z+1, r23	; 0x01
    2d30:	82 83       	std	Z+2, r24	; 0x02
    2d32:	93 83       	std	Z+3, r25	; 0x03
				sprintf(BufferSend,"!040%d\t%s\n\r",ax,temp);
    2d34:	1f 93       	push	r17
    2d36:	0f 93       	push	r16
    2d38:	3f 92       	push	r3
    2d3a:	2f 92       	push	r2
    2d3c:	81 ec       	ldi	r24, 0xC1	; 193
    2d3e:	91 e2       	ldi	r25, 0x21	; 33
    2d40:	9f 93       	push	r25
    2d42:	8f 93       	push	r24
    2d44:	89 e6       	ldi	r24, 0x69	; 105
    2d46:	96 e2       	ldi	r25, 0x26	; 38
    2d48:	9f 93       	push	r25
    2d4a:	8f 93       	push	r24
    2d4c:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    2d56:	e0 ea       	ldi	r30, 0xA0	; 160
    2d58:	f6 e0       	ldi	r31, 0x06	; 6
    2d5a:	84 81       	ldd	r24, Z+4	; 0x04
    2d5c:	81 60       	ori	r24, 0x01	; 1
    2d5e:	84 83       	std	Z+4, r24	; 0x04
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			}
		}
	}
	else if(strncmp(cmdTemp,"?05",3)==0)
    2d68:	43 e0       	ldi	r20, 0x03	; 3
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	6d ec       	ldi	r22, 0xCD	; 205
    2d6e:	71 e2       	ldi	r23, 0x21	; 33
    2d70:	8d ea       	ldi	r24, 0xAD	; 173
    2d72:	94 e2       	ldi	r25, 0x24	; 36
    2d74:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    2d78:	89 2b       	or	r24, r25
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <_Z6cmdExev+0x376>
    2d7c:	40 c0       	rjmp	.+128    	; 0x2dfe <_Z6cmdExev+0x3f6>
	{
		if(cmdTemp[3]=='0')//READ JOG FOR AXIS
    2d7e:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2d82:	80 33       	cpi	r24, 0x30	; 48
    2d84:	11 f0       	breq	.+4      	; 0x2d8a <_Z6cmdExev+0x382>
    2d86:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2d8a:	e8 e9       	ldi	r30, 0x98	; 152
    2d8c:	f4 e2       	ldi	r31, 0x24	; 36
    2d8e:	82 ea       	ldi	r24, 0xA2	; 162
    2d90:	94 e2       	ldi	r25, 0x24	; 36
		{
			for(k=0;k<10;k++)
			{
				temp[k]=0;
    2d92:	11 92       	st	Z+, r1
	}
	else if(strncmp(cmdTemp,"?05",3)==0)
	{
		if(cmdTemp[3]=='0')//READ JOG FOR AXIS
		{
			for(k=0;k<10;k++)
    2d94:	8e 17       	cp	r24, r30
    2d96:	9f 07       	cpc	r25, r31
    2d98:	e1 f7       	brne	.-8      	; 0x2d92 <_Z6cmdExev+0x38a>
    2d9a:	8a e0       	ldi	r24, 0x0A	; 10
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	80 93 c2 24 	sts	0x24C2, r24	; 0x8024c2 <k>
    2da2:	90 93 c3 24 	sts	0x24C3, r25	; 0x8024c3 <k+0x1>
			{
				temp[k]=0;
			}
			temp[10]=0;
    2da6:	10 92 a2 24 	sts	0x24A2, r1	; 0x8024a2 <temp+0xa>
			ltoa(SetJog[ax],temp,10);
    2daa:	f1 01       	movw	r30, r2
    2dac:	ee 0f       	add	r30, r30
    2dae:	ff 1f       	adc	r31, r31
    2db0:	ee 0f       	add	r30, r30
    2db2:	ff 1f       	adc	r31, r31
    2db4:	e0 5d       	subi	r30, 0xD0	; 208
    2db6:	f8 4d       	sbci	r31, 0xD8	; 216
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	2a e0       	ldi	r18, 0x0A	; 10
    2dc2:	48 e9       	ldi	r20, 0x98	; 152
    2dc4:	54 e2       	ldi	r21, 0x24	; 36
    2dc6:	0e 94 08 2b 	call	0x5610	; 0x5610 <__ltoa_ncheck>
			if(EchoON) printf("!050%d\t%s\n\r",ax,temp);
    2dca:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    2dce:	88 23       	and	r24, r24
    2dd0:	11 f4       	brne	.+4      	; 0x2dd6 <_Z6cmdExev+0x3ce>
    2dd2:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
    2dd6:	88 e9       	ldi	r24, 0x98	; 152
    2dd8:	94 e2       	ldi	r25, 0x24	; 36
    2dda:	9f 93       	push	r25
    2ddc:	8f 93       	push	r24
    2dde:	3f 92       	push	r3
    2de0:	2f 92       	push	r2
    2de2:	81 ed       	ldi	r24, 0xD1	; 209
    2de4:	91 e2       	ldi	r25, 0x21	; 33
    2de6:	9f 93       	push	r25
    2de8:	8f 93       	push	r24
    2dea:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#06",3)==0)
    2dfe:	43 e0       	ldi	r20, 0x03	; 3
    2e00:	50 e0       	ldi	r21, 0x00	; 0
    2e02:	6d ed       	ldi	r22, 0xDD	; 221
    2e04:	71 e2       	ldi	r23, 0x21	; 33
    2e06:	8d ea       	ldi	r24, 0xAD	; 173
    2e08:	94 e2       	ldi	r25, 0x24	; 36
    2e0a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    2e0e:	89 2b       	or	r24, r25
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <_Z6cmdExev+0x40c>
    2e12:	7e c3       	rjmp	.+1788   	; 0x3510 <_Z6cmdExev+0xb08>
	{
		if (!ProgramRun)
    2e14:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    2e18:	81 11       	cpse	r24, r1
    2e1a:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
		{
			while (IsAnyAxisMoving() == 1);
    2e1e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    2e22:	81 30       	cpi	r24, 0x01	; 1
    2e24:	f1 f3       	breq	.-4      	; 0x2e22 <_Z6cmdExev+0x41a>
			if(cmdTemp[3]=='0')//RUN JOG
    2e26:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    2e2a:	80 33       	cpi	r24, 0x30	; 48
    2e2c:	09 f0       	breq	.+2      	; 0x2e30 <_Z6cmdExev+0x428>
    2e2e:	d0 c1       	rjmp	.+928    	; 0x31d0 <_Z6cmdExev+0x7c8>
			{
				if (SetJog[ax] < AxisPosition[ax])
    2e30:	c1 01       	movw	r24, r2
    2e32:	88 0f       	add	r24, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	e0 5d       	subi	r30, 0xD0	; 208
    2e3e:	f8 4d       	sbci	r31, 0xD8	; 216
    2e40:	dc 01       	movw	r26, r24
    2e42:	ac 5d       	subi	r26, 0xDC	; 220
    2e44:	b8 4d       	sbci	r27, 0xD8	; 216
    2e46:	40 81       	ld	r20, Z
    2e48:	51 81       	ldd	r21, Z+1	; 0x01
    2e4a:	62 81       	ldd	r22, Z+2	; 0x02
    2e4c:	73 81       	ldd	r23, Z+3	; 0x03
    2e4e:	8d 91       	ld	r24, X+
    2e50:	9d 91       	ld	r25, X+
    2e52:	0d 90       	ld	r0, X+
    2e54:	bc 91       	ld	r27, X
    2e56:	a0 2d       	mov	r26, r0
    2e58:	48 17       	cp	r20, r24
    2e5a:	59 07       	cpc	r21, r25
    2e5c:	6a 07       	cpc	r22, r26
    2e5e:	7b 07       	cpc	r23, r27
    2e60:	2c f4       	brge	.+10     	; 0x2e6c <_Z6cmdExev+0x464>
				SetAxisDir(ax,0);
    2e62:	60 e0       	ldi	r22, 0x00	; 0
    2e64:	c1 01       	movw	r24, r2
    2e66:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
    2e6a:	04 c0       	rjmp	.+8      	; 0x2e74 <_Z6cmdExev+0x46c>
				else
				SetAxisDir(ax,1);
    2e6c:	61 e0       	ldi	r22, 0x01	; 1
    2e6e:	c1 01       	movw	r24, r2
    2e70:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				MaxSpeed = SetSpeed[ax];
    2e74:	c1 01       	movw	r24, r2
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e4 5f       	subi	r30, 0xF4	; 244
    2e82:	f8 4d       	sbci	r31, 0xD8	; 216
    2e84:	c0 80       	ld	r12, Z
    2e86:	d1 80       	ldd	r13, Z+1	; 0x01
    2e88:	e2 80       	ldd	r14, Z+2	; 0x02
    2e8a:	f3 80       	ldd	r15, Z+3	; 0x03
    2e8c:	c0 92 87 24 	sts	0x2487, r12	; 0x802487 <MaxSpeed>
    2e90:	d0 92 88 24 	sts	0x2488, r13	; 0x802488 <MaxSpeed+0x1>
    2e94:	e0 92 89 24 	sts	0x2489, r14	; 0x802489 <MaxSpeed+0x2>
    2e98:	f0 92 8a 24 	sts	0x248A, r15	; 0x80248a <MaxSpeed+0x3>
				IACC=AxACC[ax];
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	e0 50       	subi	r30, 0x00	; 0
    2ea0:	f9 4d       	sbci	r31, 0xD9	; 217
    2ea2:	80 80       	ld	r8, Z
    2ea4:	91 80       	ldd	r9, Z+1	; 0x01
    2ea6:	a2 80       	ldd	r10, Z+2	; 0x02
    2ea8:	b3 80       	ldd	r11, Z+3	; 0x03
    2eaa:	80 92 83 24 	sts	0x2483, r8	; 0x802483 <IACC>
    2eae:	90 92 84 24 	sts	0x2484, r9	; 0x802484 <IACC+0x1>
    2eb2:	a0 92 85 24 	sts	0x2485, r10	; 0x802485 <IACC+0x2>
    2eb6:	b0 92 86 24 	sts	0x2486, r11	; 0x802486 <IACC+0x3>
				IDEC=AxDEC[ax];
    2eba:	fc 01       	movw	r30, r24
    2ebc:	ec 50       	subi	r30, 0x0C	; 12
    2ebe:	f9 4d       	sbci	r31, 0xD9	; 217
    2ec0:	40 81       	ld	r20, Z
    2ec2:	51 81       	ldd	r21, Z+1	; 0x01
    2ec4:	62 81       	ldd	r22, Z+2	; 0x02
    2ec6:	73 81       	ldd	r23, Z+3	; 0x03
    2ec8:	40 93 7f 24 	sts	0x247F, r20	; 0x80247f <IDEC>
    2ecc:	50 93 80 24 	sts	0x2480, r21	; 0x802480 <IDEC+0x1>
    2ed0:	60 93 81 24 	sts	0x2481, r22	; 0x802481 <IDEC+0x2>
    2ed4:	70 93 82 24 	sts	0x2482, r23	; 0x802482 <IDEC+0x3>
				MaxDistanceToGo=labs(AxisPosition[ax]-SetJog[ax]);
    2ed8:	fc 01       	movw	r30, r24
    2eda:	ec 5d       	subi	r30, 0xDC	; 220
    2edc:	f8 4d       	sbci	r31, 0xD8	; 216
    2ede:	dc 01       	movw	r26, r24
    2ee0:	a0 5d       	subi	r26, 0xD0	; 208
    2ee2:	b8 4d       	sbci	r27, 0xD8	; 216
    2ee4:	00 81       	ld	r16, Z
    2ee6:	11 81       	ldd	r17, Z+1	; 0x01
    2ee8:	22 81       	ldd	r18, Z+2	; 0x02
    2eea:	33 81       	ldd	r19, Z+3	; 0x03
    2eec:	8d 91       	ld	r24, X+
    2eee:	9d 91       	ld	r25, X+
    2ef0:	0d 90       	ld	r0, X+
    2ef2:	bc 91       	ld	r27, X
    2ef4:	a0 2d       	mov	r26, r0
    2ef6:	08 1b       	sub	r16, r24
    2ef8:	19 0b       	sbc	r17, r25
    2efa:	2a 0b       	sbc	r18, r26
    2efc:	3b 0b       	sbc	r19, r27
    2efe:	d9 01       	movw	r26, r18
    2f00:	c8 01       	movw	r24, r16
    2f02:	3a f4       	brpl	.+14     	; 0x2f12 <_Z6cmdExev+0x50a>
    2f04:	88 27       	eor	r24, r24
    2f06:	99 27       	eor	r25, r25
    2f08:	dc 01       	movw	r26, r24
    2f0a:	80 1b       	sub	r24, r16
    2f0c:	91 0b       	sbc	r25, r17
    2f0e:	a2 0b       	sbc	r26, r18
    2f10:	b3 0b       	sbc	r27, r19
    2f12:	2c 01       	movw	r4, r24
    2f14:	3d 01       	movw	r6, r26
    2f16:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    2f1a:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    2f1e:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    2f22:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
				Ma[ax]=1000;
    2f26:	f1 01       	movw	r30, r2
    2f28:	ee 0f       	add	r30, r30
    2f2a:	ff 1f       	adc	r31, r31
    2f2c:	ee 51       	subi	r30, 0x1E	; 30
    2f2e:	f9 4d       	sbci	r31, 0xD9	; 217
    2f30:	88 ee       	ldi	r24, 0xE8	; 232
    2f32:	93 e0       	ldi	r25, 0x03	; 3
    2f34:	80 83       	st	Z, r24
    2f36:	91 83       	std	Z+1, r25	; 0x01
				CurSpeedFrq=0;
    2f38:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    2f3c:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    2f40:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    2f44:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
				TCC0.CCA=0xFFFF;
    2f48:	8f ef       	ldi	r24, 0xFF	; 255
    2f4a:	9f ef       	ldi	r25, 0xFF	; 255
    2f4c:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2f50:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				
				if (IACC == 0) IACC = 100;
    2f54:	89 28       	or	r8, r9
    2f56:	8a 28       	or	r8, r10
    2f58:	8b 28       	or	r8, r11
    2f5a:	61 f4       	brne	.+24     	; 0x2f74 <_Z6cmdExev+0x56c>
    2f5c:	84 e6       	ldi	r24, 0x64	; 100
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	a0 e0       	ldi	r26, 0x00	; 0
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <IACC>
    2f68:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <IACC+0x1>
    2f6c:	a0 93 85 24 	sts	0x2485, r26	; 0x802485 <IACC+0x2>
    2f70:	b0 93 86 24 	sts	0x2486, r27	; 0x802486 <IACC+0x3>
				if (IDEC == 0) IDEC = 100;
    2f74:	45 2b       	or	r20, r21
    2f76:	46 2b       	or	r20, r22
    2f78:	47 2b       	or	r20, r23
    2f7a:	61 f4       	brne	.+24     	; 0x2f94 <_Z6cmdExev+0x58c>
    2f7c:	84 e6       	ldi	r24, 0x64	; 100
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	a0 e0       	ldi	r26, 0x00	; 0
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	80 93 7f 24 	sts	0x247F, r24	; 0x80247f <IDEC>
    2f88:	90 93 80 24 	sts	0x2480, r25	; 0x802480 <IDEC+0x1>
    2f8c:	a0 93 81 24 	sts	0x2481, r26	; 0x802481 <IDEC+0x2>
    2f90:	b0 93 82 24 	sts	0x2482, r27	; 0x802482 <IDEC+0x3>
								
				ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    2f94:	c7 01       	movw	r24, r14
    2f96:	b6 01       	movw	r22, r12
    2f98:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	48 ec       	ldi	r20, 0xC8	; 200
    2fa2:	52 e4       	ldi	r21, 0x42	; 66
    2fa4:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    2fa8:	6d 83       	std	Y+5, r22	; 0x05
    2faa:	7e 83       	std	Y+6, r23	; 0x06
    2fac:	8f 83       	std	Y+7, r24	; 0x07
    2fae:	98 87       	std	Y+8, r25	; 0x08
    2fb0:	00 91 83 24 	lds	r16, 0x2483	; 0x802483 <IACC>
    2fb4:	10 91 84 24 	lds	r17, 0x2484	; 0x802484 <IACC+0x1>
    2fb8:	20 91 85 24 	lds	r18, 0x2485	; 0x802485 <IACC+0x2>
    2fbc:	30 91 86 24 	lds	r19, 0x2486	; 0x802486 <IACC+0x3>
    2fc0:	09 83       	std	Y+1, r16	; 0x01
    2fc2:	1a 83       	std	Y+2, r17	; 0x02
    2fc4:	2b 83       	std	Y+3, r18	; 0x03
    2fc6:	3c 83       	std	Y+4, r19	; 0x04
				ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    2fc8:	c9 01       	movw	r24, r18
    2fca:	b8 01       	movw	r22, r16
    2fcc:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    2fd0:	9b 01       	movw	r18, r22
    2fd2:	ac 01       	movw	r20, r24
    2fd4:	6d 81       	ldd	r22, Y+5	; 0x05
    2fd6:	7e 81       	ldd	r23, Y+6	; 0x06
    2fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fda:	98 85       	ldd	r25, Y+8	; 0x08
    2fdc:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    2fe0:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    2fe4:	9b 01       	movw	r18, r22
    2fe6:	ac 01       	movw	r20, r24
    2fe8:	c7 01       	movw	r24, r14
    2fea:	b6 01       	movw	r22, r12
    2fec:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    2ff0:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    2ff4:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    2ff8:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    2ffc:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
				
				DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
    3000:	80 90 7f 24 	lds	r8, 0x247F	; 0x80247f <IDEC>
    3004:	90 90 80 24 	lds	r9, 0x2480	; 0x802480 <IDEC+0x1>
    3008:	a0 90 81 24 	lds	r10, 0x2481	; 0x802481 <IDEC+0x2>
    300c:	b0 90 82 24 	lds	r11, 0x2482	; 0x802482 <IDEC+0x3>
				DECSpeedINT= MaxSpeed / DECSpeedINT;
    3010:	c5 01       	movw	r24, r10
    3012:	b4 01       	movw	r22, r8
    3014:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    3018:	9b 01       	movw	r18, r22
    301a:	ac 01       	movw	r20, r24
    301c:	6d 81       	ldd	r22, Y+5	; 0x05
    301e:	7e 81       	ldd	r23, Y+6	; 0x06
    3020:	8f 81       	ldd	r24, Y+7	; 0x07
    3022:	98 85       	ldd	r25, Y+8	; 0x08
    3024:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    3028:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    302c:	9b 01       	movw	r18, r22
    302e:	ac 01       	movw	r20, r24
    3030:	c7 01       	movw	r24, r14
    3032:	b6 01       	movw	r22, r12
    3034:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    3038:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    303c:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    3040:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    3044:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
				
				DecDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IDEC);
    3048:	a7 01       	movw	r20, r14
    304a:	96 01       	movw	r18, r12
    304c:	c7 01       	movw	r24, r14
    304e:	b6 01       	movw	r22, r12
    3050:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <__mulsi3>
    3054:	6d 83       	std	Y+5, r22	; 0x05
    3056:	7e 83       	std	Y+6, r23	; 0x06
    3058:	8f 83       	std	Y+7, r24	; 0x07
    305a:	98 87       	std	Y+8, r25	; 0x08
    305c:	a5 01       	movw	r20, r10
    305e:	94 01       	movw	r18, r8
    3060:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    3064:	69 01       	movw	r12, r18
    3066:	7a 01       	movw	r14, r20
    3068:	20 93 8f 24 	sts	0x248F, r18	; 0x80248f <DecDTG>
    306c:	30 93 90 24 	sts	0x2490, r19	; 0x802490 <DecDTG+0x1>
    3070:	40 93 91 24 	sts	0x2491, r20	; 0x802491 <DecDTG+0x2>
    3074:	50 93 92 24 	sts	0x2492, r21	; 0x802492 <DecDTG+0x3>
				AccDTG = (long int) (MaxSpeed * MaxSpeed)/(long int) (IACC);
    3078:	6d 81       	ldd	r22, Y+5	; 0x05
    307a:	7e 81       	ldd	r23, Y+6	; 0x06
    307c:	8f 81       	ldd	r24, Y+7	; 0x07
    307e:	98 85       	ldd	r25, Y+8	; 0x08
    3080:	29 81       	ldd	r18, Y+1	; 0x01
    3082:	3a 81       	ldd	r19, Y+2	; 0x02
    3084:	4b 81       	ldd	r20, Y+3	; 0x03
    3086:	5c 81       	ldd	r21, Y+4	; 0x04
    3088:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
				SumAccDecDTG = DecDTG + AccDTG;
    308c:	46 01       	movw	r8, r12
    308e:	57 01       	movw	r10, r14
    3090:	82 0e       	add	r8, r18
    3092:	93 1e       	adc	r9, r19
    3094:	a4 1e       	adc	r10, r20
    3096:	b5 1e       	adc	r11, r21
    3098:	80 92 7b 24 	sts	0x247B, r8	; 0x80247b <SumAccDecDTG>
    309c:	90 92 7c 24 	sts	0x247C, r9	; 0x80247c <SumAccDecDTG+0x1>
    30a0:	a0 92 7d 24 	sts	0x247D, r10	; 0x80247d <SumAccDecDTG+0x2>
    30a4:	b0 92 7e 24 	sts	0x247E, r11	; 0x80247e <SumAccDecDTG+0x3>
				if (MaxDistanceToGo <= SumAccDecDTG)
    30a8:	84 14       	cp	r8, r4
    30aa:	95 04       	cpc	r9, r5
    30ac:	a6 04       	cpc	r10, r6
    30ae:	b7 04       	cpc	r11, r7
    30b0:	cc f1       	brlt	.+114    	; 0x3124 <_Z6cmdExev+0x71c>
				{
					DecDTG = (long int) ((float) DecDTG * ((float) ((float)MaxDistanceToGo / (float)SumAccDecDTG)));
    30b2:	c3 01       	movw	r24, r6
    30b4:	b2 01       	movw	r22, r4
    30b6:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    30ba:	69 83       	std	Y+1, r22	; 0x01
    30bc:	7a 83       	std	Y+2, r23	; 0x02
    30be:	8b 83       	std	Y+3, r24	; 0x03
    30c0:	9c 83       	std	Y+4, r25	; 0x04
    30c2:	c5 01       	movw	r24, r10
    30c4:	b4 01       	movw	r22, r8
    30c6:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    30ca:	9b 01       	movw	r18, r22
    30cc:	ac 01       	movw	r20, r24
    30ce:	69 81       	ldd	r22, Y+1	; 0x01
    30d0:	7a 81       	ldd	r23, Y+2	; 0x02
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	9c 81       	ldd	r25, Y+4	; 0x04
    30d6:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    30da:	4b 01       	movw	r8, r22
    30dc:	5c 01       	movw	r10, r24
    30de:	c7 01       	movw	r24, r14
    30e0:	b6 01       	movw	r22, r12
    30e2:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    30e6:	9b 01       	movw	r18, r22
    30e8:	ac 01       	movw	r20, r24
    30ea:	c5 01       	movw	r24, r10
    30ec:	b4 01       	movw	r22, r8
    30ee:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    30f2:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    30f6:	60 93 8f 24 	sts	0x248F, r22	; 0x80248f <DecDTG>
    30fa:	70 93 90 24 	sts	0x2490, r23	; 0x802490 <DecDTG+0x1>
    30fe:	80 93 91 24 	sts	0x2491, r24	; 0x802491 <DecDTG+0x2>
    3102:	90 93 92 24 	sts	0x2492, r25	; 0x802492 <DecDTG+0x3>
					AccDTG = MaxDistanceToGo - DecDTG;
    3106:	a3 01       	movw	r20, r6
    3108:	92 01       	movw	r18, r4
    310a:	26 1b       	sub	r18, r22
    310c:	37 0b       	sbc	r19, r23
    310e:	48 0b       	sbc	r20, r24
    3110:	59 0b       	sbc	r21, r25
    3112:	20 93 93 24 	sts	0x2493, r18	; 0x802493 <AccDTG>
    3116:	30 93 94 24 	sts	0x2494, r19	; 0x802494 <AccDTG+0x1>
    311a:	40 93 95 24 	sts	0x2495, r20	; 0x802495 <AccDTG+0x2>
    311e:	50 93 96 24 	sts	0x2496, r21	; 0x802496 <AccDTG+0x3>
    3122:	0e c0       	rjmp	.+28     	; 0x3140 <_Z6cmdExev+0x738>
				}
				else
				{
					AccDTG = MaxDistanceToGo - AccDTG;
    3124:	d3 01       	movw	r26, r6
    3126:	c2 01       	movw	r24, r4
    3128:	82 1b       	sub	r24, r18
    312a:	93 0b       	sbc	r25, r19
    312c:	a4 0b       	sbc	r26, r20
    312e:	b5 0b       	sbc	r27, r21
    3130:	80 93 93 24 	sts	0x2493, r24	; 0x802493 <AccDTG>
    3134:	90 93 94 24 	sts	0x2494, r25	; 0x802494 <AccDTG+0x1>
    3138:	a0 93 95 24 	sts	0x2495, r26	; 0x802495 <AccDTG+0x2>
    313c:	b0 93 96 24 	sts	0x2496, r27	; 0x802496 <AccDTG+0x3>
				}
				
				DistanceToGo[ax] = labs(AxisPosition[ax]-SetJog[ax]);
    3140:	c1 01       	movw	r24, r2
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	fc 01       	movw	r30, r24
    314c:	e8 5e       	subi	r30, 0xE8	; 232
    314e:	f8 4d       	sbci	r31, 0xD8	; 216
    3150:	dc 01       	movw	r26, r24
    3152:	ac 5d       	subi	r26, 0xDC	; 220
    3154:	b8 4d       	sbci	r27, 0xD8	; 216
    3156:	80 5d       	subi	r24, 0xD0	; 208
    3158:	98 4d       	sbci	r25, 0xD8	; 216
    315a:	4d 91       	ld	r20, X+
    315c:	5d 91       	ld	r21, X+
    315e:	6d 91       	ld	r22, X+
    3160:	7c 91       	ld	r23, X
    3162:	dc 01       	movw	r26, r24
    3164:	cd 90       	ld	r12, X+
    3166:	dd 90       	ld	r13, X+
    3168:	ed 90       	ld	r14, X+
    316a:	fc 90       	ld	r15, X
    316c:	db 01       	movw	r26, r22
    316e:	ca 01       	movw	r24, r20
    3170:	8c 19       	sub	r24, r12
    3172:	9d 09       	sbc	r25, r13
    3174:	ae 09       	sbc	r26, r14
    3176:	bf 09       	sbc	r27, r15
    3178:	ac 01       	movw	r20, r24
    317a:	bd 01       	movw	r22, r26
    317c:	3a f4       	brpl	.+14     	; 0x318c <_Z6cmdExev+0x784>
    317e:	44 27       	eor	r20, r20
    3180:	55 27       	eor	r21, r21
    3182:	ba 01       	movw	r22, r20
    3184:	48 1b       	sub	r20, r24
    3186:	59 0b       	sbc	r21, r25
    3188:	6a 0b       	sbc	r22, r26
    318a:	7b 0b       	sbc	r23, r27
    318c:	40 83       	st	Z, r20
    318e:	51 83       	std	Z+1, r21	; 0x01
    3190:	62 83       	std	Z+2, r22	; 0x02
    3192:	73 83       	std	Z+3, r23	; 0x03
				ACC=1;
    3194:	11 e0       	ldi	r17, 0x01	; 1
    3196:	10 93 6e 24 	sts	0x246E, r17	; 0x80246e <ACC>
				sprintf(BufferSend,"!060%d\r\n",ax);
    319a:	3f 92       	push	r3
    319c:	2f 92       	push	r2
    319e:	81 ee       	ldi	r24, 0xE1	; 225
    31a0:	91 e2       	ldi	r25, 0x21	; 33
    31a2:	9f 93       	push	r25
    31a4:	8f 93       	push	r24
    31a6:	89 e6       	ldi	r24, 0x69	; 105
    31a8:	96 e2       	ldi	r25, 0x26	; 38
    31aa:	9f 93       	push	r25
    31ac:	8f 93       	push	r24
    31ae:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing=1;
    31b2:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
				SetDataReady;
    31b6:	e0 ea       	ldi	r30, 0xA0	; 160
    31b8:	f6 e0       	ldi	r31, 0x06	; 6
    31ba:	84 81       	ldd	r24, Z+4	; 0x04
    31bc:	81 60       	ori	r24, 0x01	; 1
    31be:	84 83       	std	Z+4, r24	; 0x04
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			}
			
			else if(cmdTemp[3]=='1') //Axis Selected
    31d0:	81 33       	cpi	r24, 0x31	; 49
    31d2:	01 f5       	brne	.+64     	; 0x3214 <_Z6cmdExev+0x80c>
			{
				SelectedAxis = ax;
    31d4:	20 92 66 24 	sts	0x2466, r2	; 0x802466 <SelectedAxis>
    31d8:	30 92 67 24 	sts	0x2467, r3	; 0x802467 <SelectedAxis+0x1>
				sprintf(BufferSend,"!061%d\r\n",ax);
    31dc:	3f 92       	push	r3
    31de:	2f 92       	push	r2
    31e0:	8a ee       	ldi	r24, 0xEA	; 234
    31e2:	91 e2       	ldi	r25, 0x21	; 33
    31e4:	9f 93       	push	r25
    31e6:	8f 93       	push	r24
    31e8:	89 e6       	ldi	r24, 0x69	; 105
    31ea:	96 e2       	ldi	r25, 0x26	; 38
    31ec:	9f 93       	push	r25
    31ee:	8f 93       	push	r24
    31f0:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing=1;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    31fa:	e0 ea       	ldi	r30, 0xA0	; 160
    31fc:	f6 e0       	ldi	r31, 0x06	; 6
    31fe:	84 81       	ldd	r24, Z+4	; 0x04
    3200:	81 60       	ori	r24, 0x01	; 1
    3202:	84 83       	std	Z+4, r24	; 0x04
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			}
			else if(cmdTemp[3]=='2')//Free Jog  to Positive ?062X
    3214:	82 33       	cpi	r24, 0x32	; 50
    3216:	09 f0       	breq	.+2      	; 0x321a <_Z6cmdExev+0x812>
    3218:	ac c0       	rjmp	.+344    	; 0x3372 <_Z6cmdExev+0x96a>
			{
				SetAxisDir(ax,1);
    321a:	61 e0       	ldi	r22, 0x01	; 1
    321c:	c1 01       	movw	r24, r2
    321e:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				MaxSpeed=SetSpeed[ax];
    3222:	c1 01       	movw	r24, r2
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	fc 01       	movw	r30, r24
    322e:	e4 5f       	subi	r30, 0xF4	; 244
    3230:	f8 4d       	sbci	r31, 0xD8	; 216
    3232:	c0 80       	ld	r12, Z
    3234:	d1 80       	ldd	r13, Z+1	; 0x01
    3236:	e2 80       	ldd	r14, Z+2	; 0x02
    3238:	f3 80       	ldd	r15, Z+3	; 0x03
    323a:	c0 92 87 24 	sts	0x2487, r12	; 0x802487 <MaxSpeed>
    323e:	d0 92 88 24 	sts	0x2488, r13	; 0x802488 <MaxSpeed+0x1>
    3242:	e0 92 89 24 	sts	0x2489, r14	; 0x802489 <MaxSpeed+0x2>
    3246:	f0 92 8a 24 	sts	0x248A, r15	; 0x80248a <MaxSpeed+0x3>
				IACC=AxACC[ax];
    324a:	fc 01       	movw	r30, r24
    324c:	e0 50       	subi	r30, 0x00	; 0
    324e:	f9 4d       	sbci	r31, 0xD9	; 217
    3250:	40 80       	ld	r4, Z
    3252:	51 80       	ldd	r5, Z+1	; 0x01
    3254:	62 80       	ldd	r6, Z+2	; 0x02
    3256:	73 80       	ldd	r7, Z+3	; 0x03
    3258:	40 92 83 24 	sts	0x2483, r4	; 0x802483 <IACC>
    325c:	50 92 84 24 	sts	0x2484, r5	; 0x802484 <IACC+0x1>
    3260:	60 92 85 24 	sts	0x2485, r6	; 0x802485 <IACC+0x2>
    3264:	70 92 86 24 	sts	0x2486, r7	; 0x802486 <IACC+0x3>
				IDEC=AxDEC[ax];
    3268:	fc 01       	movw	r30, r24
    326a:	ec 50       	subi	r30, 0x0C	; 12
    326c:	f9 4d       	sbci	r31, 0xD9	; 217
    326e:	80 80       	ld	r8, Z
    3270:	91 80       	ldd	r9, Z+1	; 0x01
    3272:	a2 80       	ldd	r10, Z+2	; 0x02
    3274:	b3 80       	ldd	r11, Z+3	; 0x03
    3276:	80 92 7f 24 	sts	0x247F, r8	; 0x80247f <IDEC>
    327a:	90 92 80 24 	sts	0x2480, r9	; 0x802480 <IDEC+0x1>
    327e:	a0 92 81 24 	sts	0x2481, r10	; 0x802481 <IDEC+0x2>
    3282:	b0 92 82 24 	sts	0x2482, r11	; 0x802482 <IDEC+0x3>
				CurSpeedFrq=0;
    3286:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    328a:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    328e:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    3292:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
				TCC0.CCA=0xFFFF;
    3296:	8f ef       	ldi	r24, 0xFF	; 255
    3298:	9f ef       	ldi	r25, 0xFF	; 255
    329a:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    329e:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				
				ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    32a2:	c7 01       	movw	r24, r14
    32a4:	b6 01       	movw	r22, r12
    32a6:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	48 ec       	ldi	r20, 0xC8	; 200
    32b0:	52 e4       	ldi	r21, 0x42	; 66
    32b2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    32b6:	69 83       	std	Y+1, r22	; 0x01
    32b8:	7a 83       	std	Y+2, r23	; 0x02
    32ba:	8b 83       	std	Y+3, r24	; 0x03
    32bc:	9c 83       	std	Y+4, r25	; 0x04
				ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    32be:	c3 01       	movw	r24, r6
    32c0:	b2 01       	movw	r22, r4
    32c2:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    32c6:	9b 01       	movw	r18, r22
    32c8:	ac 01       	movw	r20, r24
    32ca:	69 81       	ldd	r22, Y+1	; 0x01
    32cc:	7a 81       	ldd	r23, Y+2	; 0x02
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	9c 81       	ldd	r25, Y+4	; 0x04
    32d2:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    32d6:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    32da:	9b 01       	movw	r18, r22
    32dc:	ac 01       	movw	r20, r24
    32de:	c7 01       	movw	r24, r14
    32e0:	b6 01       	movw	r22, r12
    32e2:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    32e6:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    32ea:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    32ee:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    32f2:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
				
				DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
				DECSpeedINT= MaxSpeed / DECSpeedINT;
    32f6:	c5 01       	movw	r24, r10
    32f8:	b4 01       	movw	r22, r8
    32fa:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    32fe:	9b 01       	movw	r18, r22
    3300:	ac 01       	movw	r20, r24
    3302:	69 81       	ldd	r22, Y+1	; 0x01
    3304:	7a 81       	ldd	r23, Y+2	; 0x02
    3306:	8b 81       	ldd	r24, Y+3	; 0x03
    3308:	9c 81       	ldd	r25, Y+4	; 0x04
    330a:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    330e:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    3312:	9b 01       	movw	r18, r22
    3314:	ac 01       	movw	r20, r24
    3316:	c7 01       	movw	r24, r14
    3318:	b6 01       	movw	r22, r12
    331a:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    331e:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    3322:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    3326:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    332a:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
				FreeJog = ax;
    332e:	20 92 00 20 	sts	0x2000, r2	; 0x802000 <FreeJog>
    3332:	30 92 01 20 	sts	0x2001, r3	; 0x802001 <FreeJog+0x1>
				ACC=1;
    3336:	11 e0       	ldi	r17, 0x01	; 1
    3338:	10 93 6e 24 	sts	0x246E, r17	; 0x80246e <ACC>
				sprintf(BufferSend,"!062%d\r\n",ax);
    333c:	3f 92       	push	r3
    333e:	2f 92       	push	r2
    3340:	83 ef       	ldi	r24, 0xF3	; 243
    3342:	91 e2       	ldi	r25, 0x21	; 33
    3344:	9f 93       	push	r25
    3346:	8f 93       	push	r24
    3348:	89 e6       	ldi	r24, 0x69	; 105
    334a:	96 e2       	ldi	r25, 0x26	; 38
    334c:	9f 93       	push	r25
    334e:	8f 93       	push	r24
    3350:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing=1;
    3354:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
				SetDataReady;
    3358:	e0 ea       	ldi	r30, 0xA0	; 160
    335a:	f6 e0       	ldi	r31, 0x06	; 6
    335c:	84 81       	ldd	r24, Z+4	; 0x04
    335e:	81 60       	ori	r24, 0x01	; 1
    3360:	84 83       	std	Z+4, r24	; 0x04
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			}
			else if(cmdTemp[3]=='3')//Free Jog   STOP ?63X
    3372:	83 33       	cpi	r24, 0x33	; 51
    3374:	f1 f4       	brne	.+60     	; 0x33b2 <_Z6cmdExev+0x9aa>
			{
				DEC=1;
    3376:	11 e0       	ldi	r17, 0x01	; 1
    3378:	10 93 6d 24 	sts	0x246D, r17	; 0x80246d <DEC>
				sprintf(BufferSend,"!063%d\r\n",ax);
    337c:	3f 92       	push	r3
    337e:	2f 92       	push	r2
    3380:	8c ef       	ldi	r24, 0xFC	; 252
    3382:	91 e2       	ldi	r25, 0x21	; 33
    3384:	9f 93       	push	r25
    3386:	8f 93       	push	r24
    3388:	89 e6       	ldi	r24, 0x69	; 105
    338a:	96 e2       	ldi	r25, 0x26	; 38
    338c:	9f 93       	push	r25
    338e:	8f 93       	push	r24
    3390:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing=1;
    3394:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
				SetDataReady;
    3398:	e0 ea       	ldi	r30, 0xA0	; 160
    339a:	f6 e0       	ldi	r31, 0x06	; 6
    339c:	84 81       	ldd	r24, Z+4	; 0x04
    339e:	81 60       	ori	r24, 0x01	; 1
    33a0:	84 83       	std	Z+4, r24	; 0x04
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			}
			else if (cmdTemp[3] =='4') // free jog to negative
    33b2:	84 33       	cpi	r24, 0x34	; 52
    33b4:	11 f0       	breq	.+4      	; 0x33ba <_Z6cmdExev+0x9b2>
    33b6:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__stack+0x457>
			{
				SetAxisDir(ax,0);
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	c1 01       	movw	r24, r2
    33be:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				MaxSpeed=SetSpeed[ax];
    33c2:	c1 01       	movw	r24, r2
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	fc 01       	movw	r30, r24
    33ce:	e4 5f       	subi	r30, 0xF4	; 244
    33d0:	f8 4d       	sbci	r31, 0xD8	; 216
    33d2:	c0 80       	ld	r12, Z
    33d4:	d1 80       	ldd	r13, Z+1	; 0x01
    33d6:	e2 80       	ldd	r14, Z+2	; 0x02
    33d8:	f3 80       	ldd	r15, Z+3	; 0x03
    33da:	c0 92 87 24 	sts	0x2487, r12	; 0x802487 <MaxSpeed>
    33de:	d0 92 88 24 	sts	0x2488, r13	; 0x802488 <MaxSpeed+0x1>
    33e2:	e0 92 89 24 	sts	0x2489, r14	; 0x802489 <MaxSpeed+0x2>
    33e6:	f0 92 8a 24 	sts	0x248A, r15	; 0x80248a <MaxSpeed+0x3>
				IACC=AxACC[ax];
    33ea:	fc 01       	movw	r30, r24
    33ec:	e0 50       	subi	r30, 0x00	; 0
    33ee:	f9 4d       	sbci	r31, 0xD9	; 217
    33f0:	40 80       	ld	r4, Z
    33f2:	51 80       	ldd	r5, Z+1	; 0x01
    33f4:	62 80       	ldd	r6, Z+2	; 0x02
    33f6:	73 80       	ldd	r7, Z+3	; 0x03
    33f8:	40 92 83 24 	sts	0x2483, r4	; 0x802483 <IACC>
    33fc:	50 92 84 24 	sts	0x2484, r5	; 0x802484 <IACC+0x1>
    3400:	60 92 85 24 	sts	0x2485, r6	; 0x802485 <IACC+0x2>
    3404:	70 92 86 24 	sts	0x2486, r7	; 0x802486 <IACC+0x3>
				IDEC=AxDEC[ax];
    3408:	fc 01       	movw	r30, r24
    340a:	ec 50       	subi	r30, 0x0C	; 12
    340c:	f9 4d       	sbci	r31, 0xD9	; 217
    340e:	80 80       	ld	r8, Z
    3410:	91 80       	ldd	r9, Z+1	; 0x01
    3412:	a2 80       	ldd	r10, Z+2	; 0x02
    3414:	b3 80       	ldd	r11, Z+3	; 0x03
    3416:	80 92 7f 24 	sts	0x247F, r8	; 0x80247f <IDEC>
    341a:	90 92 80 24 	sts	0x2480, r9	; 0x802480 <IDEC+0x1>
    341e:	a0 92 81 24 	sts	0x2481, r10	; 0x802481 <IDEC+0x2>
    3422:	b0 92 82 24 	sts	0x2482, r11	; 0x802482 <IDEC+0x3>
				CurSpeedFrq=0;
    3426:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    342a:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    342e:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    3432:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
				TCC0.CCA=0xFFFF;
    3436:	8f ef       	ldi	r24, 0xFF	; 255
    3438:	9f ef       	ldi	r25, 0xFF	; 255
    343a:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    343e:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				
				ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    3442:	c7 01       	movw	r24, r14
    3444:	b6 01       	movw	r22, r12
    3446:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	48 ec       	ldi	r20, 0xC8	; 200
    3450:	52 e4       	ldi	r21, 0x42	; 66
    3452:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    3456:	69 83       	std	Y+1, r22	; 0x01
    3458:	7a 83       	std	Y+2, r23	; 0x02
    345a:	8b 83       	std	Y+3, r24	; 0x03
    345c:	9c 83       	std	Y+4, r25	; 0x04
				ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    345e:	c3 01       	movw	r24, r6
    3460:	b2 01       	movw	r22, r4
    3462:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    3466:	9b 01       	movw	r18, r22
    3468:	ac 01       	movw	r20, r24
    346a:	69 81       	ldd	r22, Y+1	; 0x01
    346c:	7a 81       	ldd	r23, Y+2	; 0x02
    346e:	8b 81       	ldd	r24, Y+3	; 0x03
    3470:	9c 81       	ldd	r25, Y+4	; 0x04
    3472:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    3476:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    347a:	9b 01       	movw	r18, r22
    347c:	ac 01       	movw	r20, r24
    347e:	c7 01       	movw	r24, r14
    3480:	b6 01       	movw	r22, r12
    3482:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    3486:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    348a:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    348e:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    3492:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
				
				DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
				DECSpeedINT= MaxSpeed / DECSpeedINT;
    3496:	c5 01       	movw	r24, r10
    3498:	b4 01       	movw	r22, r8
    349a:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    349e:	9b 01       	movw	r18, r22
    34a0:	ac 01       	movw	r20, r24
    34a2:	69 81       	ldd	r22, Y+1	; 0x01
    34a4:	7a 81       	ldd	r23, Y+2	; 0x02
    34a6:	8b 81       	ldd	r24, Y+3	; 0x03
    34a8:	9c 81       	ldd	r25, Y+4	; 0x04
    34aa:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    34ae:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    34b2:	9b 01       	movw	r18, r22
    34b4:	ac 01       	movw	r20, r24
    34b6:	c7 01       	movw	r24, r14
    34b8:	b6 01       	movw	r22, r12
    34ba:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    34be:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    34c2:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    34c6:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    34ca:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
				FreeJog = ax;
    34ce:	20 92 00 20 	sts	0x2000, r2	; 0x802000 <FreeJog>
    34d2:	30 92 01 20 	sts	0x2001, r3	; 0x802001 <FreeJog+0x1>
				ACC=1;
    34d6:	11 e0       	ldi	r17, 0x01	; 1
    34d8:	10 93 6e 24 	sts	0x246E, r17	; 0x80246e <ACC>
				sprintf(BufferSend,"!064%d\r\n",ax);
    34dc:	3f 92       	push	r3
    34de:	2f 92       	push	r2
    34e0:	85 e0       	ldi	r24, 0x05	; 5
    34e2:	92 e2       	ldi	r25, 0x22	; 34
    34e4:	9f 93       	push	r25
    34e6:	8f 93       	push	r24
    34e8:	89 e6       	ldi	r24, 0x69	; 105
    34ea:	96 e2       	ldi	r25, 0x26	; 38
    34ec:	9f 93       	push	r25
    34ee:	8f 93       	push	r24
    34f0:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing=1;
    34f4:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
				SetDataReady;
    34f8:	e0 ea       	ldi	r30, 0xA0	; 160
    34fa:	f6 e0       	ldi	r31, 0x06	; 6
    34fc:	84 81       	ldd	r24, Z+4	; 0x04
    34fe:	81 60       	ori	r24, 0x01	; 1
    3500:	84 83       	std	Z+4, r24	; 0x04
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	a3 c7       	rjmp	.+3910   	; 0x4456 <__stack+0x457>
			}
		}
	}
	else if(strncmp(cmdTemp,"#07",3)==0)
    3510:	43 e0       	ldi	r20, 0x03	; 3
    3512:	50 e0       	ldi	r21, 0x00	; 0
    3514:	6e e0       	ldi	r22, 0x0E	; 14
    3516:	72 e2       	ldi	r23, 0x22	; 34
    3518:	8d ea       	ldi	r24, 0xAD	; 173
    351a:	94 e2       	ldi	r25, 0x24	; 36
    351c:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3520:	89 2b       	or	r24, r25
    3522:	31 f5       	brne	.+76     	; 0x3570 <_Z6cmdExev+0xb68>
	{
		if(!ProgramRun)
    3524:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    3528:	81 11       	cpse	r24, r1
    352a:	95 c7       	rjmp	.+3882   	; 0x4456 <__stack+0x457>
		{
			if(cmdTemp[3]=='0')//STOP JOG
    352c:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3530:	80 33       	cpi	r24, 0x30	; 48
    3532:	09 f0       	breq	.+2      	; 0x3536 <_Z6cmdExev+0xb2e>
    3534:	90 c7       	rjmp	.+3872   	; 0x4456 <__stack+0x457>
			{
				DistanceToGo[ax] = 0;
    3536:	f1 01       	movw	r30, r2
    3538:	ee 0f       	add	r30, r30
    353a:	ff 1f       	adc	r31, r31
    353c:	ee 0f       	add	r30, r30
    353e:	ff 1f       	adc	r31, r31
    3540:	e8 5e       	subi	r30, 0xE8	; 232
    3542:	f8 4d       	sbci	r31, 0xD8	; 216
    3544:	10 82       	st	Z, r1
    3546:	11 82       	std	Z+1, r1	; 0x01
    3548:	12 82       	std	Z+2, r1	; 0x02
    354a:	13 82       	std	Z+3, r1	; 0x03
				if(EchoON) printf("!070%d\n\r",ax);
    354c:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    3550:	88 23       	and	r24, r24
    3552:	09 f4       	brne	.+2      	; 0x3556 <_Z6cmdExev+0xb4e>
    3554:	80 c7       	rjmp	.+3840   	; 0x4456 <__stack+0x457>
    3556:	3f 92       	push	r3
    3558:	2f 92       	push	r2
    355a:	82 e1       	ldi	r24, 0x12	; 18
    355c:	92 e2       	ldi	r25, 0x22	; 34
    355e:	9f 93       	push	r25
    3560:	8f 93       	push	r24
    3562:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	73 c7       	rjmp	.+3814   	; 0x4456 <__stack+0x457>
			}
		}
	}
	else if(strncmp(cmdTemp,"?08",3)==0)
    3570:	43 e0       	ldi	r20, 0x03	; 3
    3572:	50 e0       	ldi	r21, 0x00	; 0
    3574:	6b e1       	ldi	r22, 0x1B	; 27
    3576:	72 e2       	ldi	r23, 0x22	; 34
    3578:	8d ea       	ldi	r24, 0xAD	; 173
    357a:	94 e2       	ldi	r25, 0x24	; 36
    357c:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3580:	89 2b       	or	r24, r25
    3582:	69 f5       	brne	.+90     	; 0x35de <_Z6cmdExev+0xbd6>
	{
		if(cmdTemp[3]=='0')//Read DistanceToGo
    3584:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3588:	80 33       	cpi	r24, 0x30	; 48
    358a:	09 f0       	breq	.+2      	; 0x358e <_Z6cmdExev+0xb86>
    358c:	64 c7       	rjmp	.+3784   	; 0x4456 <__stack+0x457>
		{
			ltoa(DistanceToGo[ax],temp,10);
    358e:	f1 01       	movw	r30, r2
    3590:	ee 0f       	add	r30, r30
    3592:	ff 1f       	adc	r31, r31
    3594:	ee 0f       	add	r30, r30
    3596:	ff 1f       	adc	r31, r31
    3598:	e8 5e       	subi	r30, 0xE8	; 232
    359a:	f8 4d       	sbci	r31, 0xD8	; 216
    359c:	60 81       	ld	r22, Z
    359e:	71 81       	ldd	r23, Z+1	; 0x01
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	93 81       	ldd	r25, Z+3	; 0x03
    35a4:	2a e0       	ldi	r18, 0x0A	; 10
    35a6:	48 e9       	ldi	r20, 0x98	; 152
    35a8:	54 e2       	ldi	r21, 0x24	; 36
    35aa:	0e 94 08 2b 	call	0x5610	; 0x5610 <__ltoa_ncheck>
			if(EchoON) printf("!080%d\t%s\n\r",ax,temp);
    35ae:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    35b2:	88 23       	and	r24, r24
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <_Z6cmdExev+0xbb0>
    35b6:	4f c7       	rjmp	.+3742   	; 0x4456 <__stack+0x457>
    35b8:	88 e9       	ldi	r24, 0x98	; 152
    35ba:	94 e2       	ldi	r25, 0x24	; 36
    35bc:	9f 93       	push	r25
    35be:	8f 93       	push	r24
    35c0:	3f 92       	push	r3
    35c2:	2f 92       	push	r2
    35c4:	8f e1       	ldi	r24, 0x1F	; 31
    35c6:	92 e2       	ldi	r25, 0x22	; 34
    35c8:	9f 93       	push	r25
    35ca:	8f 93       	push	r24
    35cc:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	3c c7       	rjmp	.+3704   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"?09",3)==0)
    35de:	43 e0       	ldi	r20, 0x03	; 3
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	6b e2       	ldi	r22, 0x2B	; 43
    35e4:	72 e2       	ldi	r23, 0x22	; 34
    35e6:	8d ea       	ldi	r24, 0xAD	; 173
    35e8:	94 e2       	ldi	r25, 0x24	; 36
    35ea:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    35ee:	89 2b       	or	r24, r25
    35f0:	91 f5       	brne	.+100    	; 0x3656 <_Z6cmdExev+0xc4e>
	{
		if(cmdTemp[3]=='0')//Read Axis Position
    35f2:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    35f6:	80 33       	cpi	r24, 0x30	; 48
    35f8:	09 f0       	breq	.+2      	; 0x35fc <_Z6cmdExev+0xbf4>
    35fa:	2d c7       	rjmp	.+3674   	; 0x4456 <__stack+0x457>
		{
			ltoa(AxisPosition[ax],temp,10);
    35fc:	f1 01       	movw	r30, r2
    35fe:	ee 0f       	add	r30, r30
    3600:	ff 1f       	adc	r31, r31
    3602:	ee 0f       	add	r30, r30
    3604:	ff 1f       	adc	r31, r31
    3606:	ec 5d       	subi	r30, 0xDC	; 220
    3608:	f8 4d       	sbci	r31, 0xD8	; 216
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	2a e0       	ldi	r18, 0x0A	; 10
    3614:	48 e9       	ldi	r20, 0x98	; 152
    3616:	54 e2       	ldi	r21, 0x24	; 36
    3618:	0e 94 08 2b 	call	0x5610	; 0x5610 <__ltoa_ncheck>
			sprintf(BufferSend,"!090%d\t%s\r\n",ax+1,temp);
    361c:	88 e9       	ldi	r24, 0x98	; 152
    361e:	94 e2       	ldi	r25, 0x24	; 36
    3620:	9f 93       	push	r25
    3622:	8f 93       	push	r24
    3624:	00 53       	subi	r16, 0x30	; 48
    3626:	11 09       	sbc	r17, r1
    3628:	1f 93       	push	r17
    362a:	0f 93       	push	r16
    362c:	8f e2       	ldi	r24, 0x2F	; 47
    362e:	92 e2       	ldi	r25, 0x22	; 34
    3630:	9f 93       	push	r25
    3632:	8f 93       	push	r24
    3634:	89 e6       	ldi	r24, 0x69	; 105
    3636:	96 e2       	ldi	r25, 0x26	; 38
    3638:	9f 93       	push	r25
    363a:	8f 93       	push	r24
    363c:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
			Responsing=1;
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3646:	e0 ea       	ldi	r30, 0xA0	; 160
    3648:	f6 e0       	ldi	r31, 0x06	; 6
    364a:	84 81       	ldd	r24, Z+4	; 0x04
    364c:	81 60       	ori	r24, 0x01	; 1
    364e:	84 83       	std	Z+4, r24	; 0x04
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	00 c7       	rjmp	.+3584   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#10",3)==0)
    3656:	43 e0       	ldi	r20, 0x03	; 3
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	6b e3       	ldi	r22, 0x3B	; 59
    365c:	72 e2       	ldi	r23, 0x22	; 34
    365e:	8d ea       	ldi	r24, 0xAD	; 173
    3660:	94 e2       	ldi	r25, 0x24	; 36
    3662:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3666:	89 2b       	or	r24, r25
    3668:	b1 f5       	brne	.+108    	; 0x36d6 <_Z6cmdExev+0xcce>
	{
		if(!ProgramRun)//Clear JOG
    366a:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    366e:	81 11       	cpse	r24, r1
    3670:	f2 c6       	rjmp	.+3556   	; 0x4456 <__stack+0x457>
		{
			if(cmdTemp[3]=='0')
    3672:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3676:	80 33       	cpi	r24, 0x30	; 48
    3678:	09 f0       	breq	.+2      	; 0x367c <_Z6cmdExev+0xc74>
    367a:	ed c6       	rjmp	.+3546   	; 0x4456 <__stack+0x457>
			{
				DistanceToGo[ax] = 0;
    367c:	c1 01       	movw	r24, r2
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	88 0f       	add	r24, r24
    3684:	99 1f       	adc	r25, r25
    3686:	fc 01       	movw	r30, r24
    3688:	e8 5e       	subi	r30, 0xE8	; 232
    368a:	f8 4d       	sbci	r31, 0xD8	; 216
    368c:	10 82       	st	Z, r1
    368e:	11 82       	std	Z+1, r1	; 0x01
    3690:	12 82       	std	Z+2, r1	; 0x02
    3692:	13 82       	std	Z+3, r1	; 0x03
				SetJog[ax] = AxisPosition[ax];
    3694:	fc 01       	movw	r30, r24
    3696:	e0 5d       	subi	r30, 0xD0	; 208
    3698:	f8 4d       	sbci	r31, 0xD8	; 216
    369a:	dc 01       	movw	r26, r24
    369c:	ac 5d       	subi	r26, 0xDC	; 220
    369e:	b8 4d       	sbci	r27, 0xD8	; 216
    36a0:	8d 91       	ld	r24, X+
    36a2:	9d 91       	ld	r25, X+
    36a4:	0d 90       	ld	r0, X+
    36a6:	bc 91       	ld	r27, X
    36a8:	a0 2d       	mov	r26, r0
    36aa:	80 83       	st	Z, r24
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	a2 83       	std	Z+2, r26	; 0x02
    36b0:	b3 83       	std	Z+3, r27	; 0x03
				if(EchoON) printf("!100%d\n\r",ax);
    36b2:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    36b6:	88 23       	and	r24, r24
    36b8:	09 f4       	brne	.+2      	; 0x36bc <_Z6cmdExev+0xcb4>
    36ba:	cd c6       	rjmp	.+3482   	; 0x4456 <__stack+0x457>
    36bc:	3f 92       	push	r3
    36be:	2f 92       	push	r2
    36c0:	8f e3       	ldi	r24, 0x3F	; 63
    36c2:	92 e2       	ldi	r25, 0x22	; 34
    36c4:	9f 93       	push	r25
    36c6:	8f 93       	push	r24
    36c8:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	c0 c6       	rjmp	.+3456   	; 0x4456 <__stack+0x457>
			}
		}
	}
	else if(strncmp(cmdTemp,"#11",3)==0)
    36d6:	43 e0       	ldi	r20, 0x03	; 3
    36d8:	50 e0       	ldi	r21, 0x00	; 0
    36da:	68 e4       	ldi	r22, 0x48	; 72
    36dc:	72 e2       	ldi	r23, 0x22	; 34
    36de:	8d ea       	ldi	r24, 0xAD	; 173
    36e0:	94 e2       	ldi	r25, 0x24	; 36
    36e2:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    36e6:	89 2b       	or	r24, r25
    36e8:	09 f0       	breq	.+2      	; 0x36ec <_Z6cmdExev+0xce4>
    36ea:	41 c0       	rjmp	.+130    	; 0x376e <_Z6cmdExev+0xd66>
	{
		if (!ProgramRun)
    36ec:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    36f0:	81 11       	cpse	r24, r1
    36f2:	b1 c6       	rjmp	.+3426   	; 0x4456 <__stack+0x457>
		{
			while (IsAnyAxisMoving() == 1);
    36f4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    36f8:	81 30       	cpi	r24, 0x01	; 1
    36fa:	f1 f3       	breq	.-4      	; 0x36f8 <_Z6cmdExev+0xcf0>
			if(cmdTemp[3]=='0')//Set AXIS Position
    36fc:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3700:	80 33       	cpi	r24, 0x30	; 48
    3702:	09 f0       	breq	.+2      	; 0x3706 <_Z6cmdExev+0xcfe>
    3704:	a8 c6       	rjmp	.+3408   	; 0x4456 <__stack+0x457>
    3706:	e2 eb       	ldi	r30, 0xB2	; 178
    3708:	f4 e2       	ldi	r31, 0x24	; 36
    370a:	a8 e9       	ldi	r26, 0x98	; 152
    370c:	b4 e2       	ldi	r27, 0x24	; 36
    370e:	8c eb       	ldi	r24, 0xBC	; 188
    3710:	94 e2       	ldi	r25, 0x24	; 36
			{
				for(k=0;k<10;k++)
				{
					temp[k]=cmdTemp[k+5];
    3712:	21 91       	ld	r18, Z+
    3714:	2d 93       	st	X+, r18
		if (!ProgramRun)
		{
			while (IsAnyAxisMoving() == 1);
			if(cmdTemp[3]=='0')//Set AXIS Position
			{
				for(k=0;k<10;k++)
    3716:	8e 17       	cp	r24, r30
    3718:	9f 07       	cpc	r25, r31
    371a:	d9 f7       	brne	.-10     	; 0x3712 <_Z6cmdExev+0xd0a>
    371c:	8a e0       	ldi	r24, 0x0A	; 10
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	80 93 c2 24 	sts	0x24C2, r24	; 0x8024c2 <k>
    3724:	90 93 c3 24 	sts	0x24C3, r25	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[10]=0;
    3728:	10 92 a2 24 	sts	0x24A2, r1	; 0x8024a2 <temp+0xa>
				AxisPosition[ax]=atol(temp);
    372c:	88 e9       	ldi	r24, 0x98	; 152
    372e:	94 e2       	ldi	r25, 0x24	; 36
    3730:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <atol>
    3734:	f1 01       	movw	r30, r2
    3736:	ee 0f       	add	r30, r30
    3738:	ff 1f       	adc	r31, r31
    373a:	ee 0f       	add	r30, r30
    373c:	ff 1f       	adc	r31, r31
    373e:	ec 5d       	subi	r30, 0xDC	; 220
    3740:	f8 4d       	sbci	r31, 0xD8	; 216
    3742:	60 83       	st	Z, r22
    3744:	71 83       	std	Z+1, r23	; 0x01
    3746:	82 83       	std	Z+2, r24	; 0x02
    3748:	93 83       	std	Z+3, r25	; 0x03
				if(EchoON) printf("!110%d\n\r",ax);
    374a:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    374e:	88 23       	and	r24, r24
    3750:	09 f4       	brne	.+2      	; 0x3754 <_Z6cmdExev+0xd4c>
    3752:	81 c6       	rjmp	.+3330   	; 0x4456 <__stack+0x457>
    3754:	3f 92       	push	r3
    3756:	2f 92       	push	r2
    3758:	8c e4       	ldi	r24, 0x4C	; 76
    375a:	92 e2       	ldi	r25, 0x22	; 34
    375c:	9f 93       	push	r25
    375e:	8f 93       	push	r24
    3760:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	74 c6       	rjmp	.+3304   	; 0x4456 <__stack+0x457>
			}
		}
	}
	else if(strncmp(cmdTemp,"#12",3)==0)
    376e:	43 e0       	ldi	r20, 0x03	; 3
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	65 e5       	ldi	r22, 0x55	; 85
    3774:	72 e2       	ldi	r23, 0x22	; 34
    3776:	8d ea       	ldi	r24, 0xAD	; 173
    3778:	94 e2       	ldi	r25, 0x24	; 36
    377a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    377e:	89 2b       	or	r24, r25
    3780:	49 f4       	brne	.+18     	; 0x3794 <_Z6cmdExev+0xd8c>
	{//Go To REF
		if (!ProgramRun)
    3782:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    3786:	81 11       	cpse	r24, r1
    3788:	66 c6       	rjmp	.+3276   	; 0x4456 <__stack+0x457>
		{
			while (IsAnyAxisMoving() == 1);
    378a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    378e:	81 30       	cpi	r24, 0x01	; 1
    3790:	f1 f3       	breq	.-4      	; 0x378e <_Z6cmdExev+0xd86>
    3792:	61 c6       	rjmp	.+3266   	; 0x4456 <__stack+0x457>
			{
				// TODO: It should be implemented for going to reference
			}
		}
	}
	else if(strncmp(cmdTemp,"#13",3)==0)
    3794:	43 e0       	ldi	r20, 0x03	; 3
    3796:	50 e0       	ldi	r21, 0x00	; 0
    3798:	69 e5       	ldi	r22, 0x59	; 89
    379a:	72 e2       	ldi	r23, 0x22	; 34
    379c:	8d ea       	ldi	r24, 0xAD	; 173
    379e:	94 e2       	ldi	r25, 0x24	; 36
    37a0:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    37a4:	8c 01       	movw	r16, r24
    37a6:	89 2b       	or	r24, r25
    37a8:	09 f0       	breq	.+2      	; 0x37ac <_Z6cmdExev+0xda4>
    37aa:	56 c0       	rjmp	.+172    	; 0x3858 <_Z6cmdExev+0xe50>
	{// Set Speed
		if (!ProgramRun & !IsAnyAxisMoving())
    37ac:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    37b0:	91 e0       	ldi	r25, 0x01	; 1
    37b2:	20 91 ca 24 	lds	r18, 0x24CA	; 0x8024ca <ProgramRun>
    37b6:	21 11       	cpse	r18, r1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	99 23       	and	r25, r25
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <_Z6cmdExev+0xdb8>
    37be:	4b c6       	rjmp	.+3222   	; 0x4456 <__stack+0x457>
    37c0:	91 e0       	ldi	r25, 0x01	; 1
    37c2:	81 11       	cpse	r24, r1
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	99 23       	and	r25, r25
    37c8:	09 f4       	brne	.+2      	; 0x37cc <_Z6cmdExev+0xdc4>
    37ca:	45 c6       	rjmp	.+3210   	; 0x4456 <__stack+0x457>
		{
			if(cmdTemp[3]=='0')
    37cc:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    37d0:	80 33       	cpi	r24, 0x30	; 48
    37d2:	09 f0       	breq	.+2      	; 0x37d6 <_Z6cmdExev+0xdce>
    37d4:	40 c6       	rjmp	.+3200   	; 0x4456 <__stack+0x457>
    37d6:	a2 eb       	ldi	r26, 0xB2	; 178
    37d8:	b4 e2       	ldi	r27, 0x24	; 36
    37da:	e8 e9       	ldi	r30, 0x98	; 152
    37dc:	f4 e2       	ldi	r31, 0x24	; 36
			{
				for(k=0;k<10;k++)
				{
					temp[k]=cmdTemp[k+5];
    37de:	8d 91       	ld	r24, X+
    37e0:	81 93       	st	Z+, r24
	{// Set Speed
		if (!ProgramRun & !IsAnyAxisMoving())
		{
			if(cmdTemp[3]=='0')
			{
				for(k=0;k<10;k++)
    37e2:	0f 5f       	subi	r16, 0xFF	; 255
    37e4:	1f 4f       	sbci	r17, 0xFF	; 255
    37e6:	0a 30       	cpi	r16, 0x0A	; 10
    37e8:	11 05       	cpc	r17, r1
    37ea:	cc f3       	brlt	.-14     	; 0x37de <_Z6cmdExev+0xdd6>
    37ec:	00 93 c2 24 	sts	0x24C2, r16	; 0x8024c2 <k>
    37f0:	10 93 c3 24 	sts	0x24C3, r17	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[10]=0;
    37f4:	08 e9       	ldi	r16, 0x98	; 152
    37f6:	14 e2       	ldi	r17, 0x24	; 36
    37f8:	d8 01       	movw	r26, r16
    37fa:	1a 96       	adiw	r26, 0x0a	; 10
    37fc:	1c 92       	st	X, r1
				SetSpeed[ax]=atof(temp);
    37fe:	c8 01       	movw	r24, r16
    3800:	0e 94 cf 2a 	call	0x559e	; 0x559e <atof>
    3804:	91 01       	movw	r18, r2
    3806:	22 0f       	add	r18, r18
    3808:	33 1f       	adc	r19, r19
    380a:	22 0f       	add	r18, r18
    380c:	33 1f       	adc	r19, r19
    380e:	f9 01       	movw	r30, r18
    3810:	e4 5f       	subi	r30, 0xF4	; 244
    3812:	f8 4d       	sbci	r31, 0xD8	; 216
    3814:	7f 01       	movw	r14, r30
    3816:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    381a:	d7 01       	movw	r26, r14
    381c:	6d 93       	st	X+, r22
    381e:	7d 93       	st	X+, r23
    3820:	8d 93       	st	X+, r24
    3822:	9c 93       	st	X, r25
    3824:	13 97       	sbiw	r26, 0x03	; 3
				sprintf(BufferSend,"!130%d\t%s\r\n",ax,temp);
    3826:	1f 93       	push	r17
    3828:	0f 93       	push	r16
    382a:	3f 92       	push	r3
    382c:	2f 92       	push	r2
    382e:	8d e5       	ldi	r24, 0x5D	; 93
    3830:	92 e2       	ldi	r25, 0x22	; 34
    3832:	9f 93       	push	r25
    3834:	8f 93       	push	r24
    3836:	89 e6       	ldi	r24, 0x69	; 105
    3838:	96 e2       	ldi	r25, 0x26	; 38
    383a:	9f 93       	push	r25
    383c:	8f 93       	push	r24
    383e:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing=1;
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    3848:	e0 ea       	ldi	r30, 0xA0	; 160
    384a:	f6 e0       	ldi	r31, 0x06	; 6
    384c:	84 81       	ldd	r24, Z+4	; 0x04
    384e:	81 60       	ori	r24, 0x01	; 1
    3850:	84 83       	std	Z+4, r24	; 0x04
    3852:	cd bf       	out	0x3d, r28	; 61
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	ff c5       	rjmp	.+3070   	; 0x4456 <__stack+0x457>
			}
		}
	}
	else if(strncmp(cmdTemp,"?14",3)==0)
    3858:	43 e0       	ldi	r20, 0x03	; 3
    385a:	50 e0       	ldi	r21, 0x00	; 0
    385c:	69 e6       	ldi	r22, 0x69	; 105
    385e:	72 e2       	ldi	r23, 0x22	; 34
    3860:	8d ea       	ldi	r24, 0xAD	; 173
    3862:	94 e2       	ldi	r25, 0x24	; 36
    3864:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3868:	89 2b       	or	r24, r25
    386a:	f9 f4       	brne	.+62     	; 0x38aa <_Z6cmdExev+0xea2>
	{//AxisIsMoving
		if(cmdTemp[3]=='0')
    386c:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3870:	80 33       	cpi	r24, 0x30	; 48
    3872:	09 f0       	breq	.+2      	; 0x3876 <_Z6cmdExev+0xe6e>
    3874:	f0 c5       	rjmp	.+3040   	; 0x4456 <__stack+0x457>
		{
			if(EchoON) printf("!140%d\t%u\n\r",ax,AxisIsMoving[ax]);
    3876:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    387a:	88 23       	and	r24, r24
    387c:	09 f4       	brne	.+2      	; 0x3880 <_Z6cmdExev+0xe78>
    387e:	eb c5       	rjmp	.+3030   	; 0x4456 <__stack+0x457>
    3880:	f1 01       	movw	r30, r2
    3882:	e2 51       	subi	r30, 0x12	; 18
    3884:	f9 4d       	sbci	r31, 0xD9	; 217
    3886:	80 81       	ld	r24, Z
    3888:	1f 92       	push	r1
    388a:	8f 93       	push	r24
    388c:	3f 92       	push	r3
    388e:	2f 92       	push	r2
    3890:	8d e6       	ldi	r24, 0x6D	; 109
    3892:	92 e2       	ldi	r25, 0x22	; 34
    3894:	9f 93       	push	r25
    3896:	8f 93       	push	r24
    3898:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	d6 c5       	rjmp	.+2988   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"?15",3)==0)
    38aa:	43 e0       	ldi	r20, 0x03	; 3
    38ac:	50 e0       	ldi	r21, 0x00	; 0
    38ae:	69 e7       	ldi	r22, 0x79	; 121
    38b0:	72 e2       	ldi	r23, 0x22	; 34
    38b2:	8d ea       	ldi	r24, 0xAD	; 173
    38b4:	94 e2       	ldi	r25, 0x24	; 36
    38b6:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    38ba:	89 2b       	or	r24, r25
    38bc:	21 f5       	brne	.+72     	; 0x3906 <_Z6cmdExev+0xefe>
	{//Read Axis Speed
		if(cmdTemp[3]=='0')
    38be:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    38c2:	80 33       	cpi	r24, 0x30	; 48
    38c4:	09 f0       	breq	.+2      	; 0x38c8 <_Z6cmdExev+0xec0>
    38c6:	c7 c5       	rjmp	.+2958   	; 0x4456 <__stack+0x457>
		{
			if(EchoON) printf("!150%d\t%lu",ax,SetSpeed[ax]);
    38c8:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <EchoON>
    38cc:	88 23       	and	r24, r24
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <_Z6cmdExev+0xeca>
    38d0:	c2 c5       	rjmp	.+2948   	; 0x4456 <__stack+0x457>
    38d2:	f1 01       	movw	r30, r2
    38d4:	ee 0f       	add	r30, r30
    38d6:	ff 1f       	adc	r31, r31
    38d8:	ee 0f       	add	r30, r30
    38da:	ff 1f       	adc	r31, r31
    38dc:	e4 5f       	subi	r30, 0xF4	; 244
    38de:	f8 4d       	sbci	r31, 0xD8	; 216
    38e0:	83 81       	ldd	r24, Z+3	; 0x03
    38e2:	8f 93       	push	r24
    38e4:	82 81       	ldd	r24, Z+2	; 0x02
    38e6:	8f 93       	push	r24
    38e8:	81 81       	ldd	r24, Z+1	; 0x01
    38ea:	8f 93       	push	r24
    38ec:	80 81       	ld	r24, Z
    38ee:	8f 93       	push	r24
    38f0:	3f 92       	push	r3
    38f2:	2f 92       	push	r2
    38f4:	8d e7       	ldi	r24, 0x7D	; 125
    38f6:	92 e2       	ldi	r25, 0x22	; 34
    38f8:	9f 93       	push	r25
    38fa:	8f 93       	push	r24
    38fc:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	a8 c5       	rjmp	.+2896   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#16",3)==0)
    3906:	43 e0       	ldi	r20, 0x03	; 3
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	68 e8       	ldi	r22, 0x88	; 136
    390c:	72 e2       	ldi	r23, 0x22	; 34
    390e:	8d ea       	ldi	r24, 0xAD	; 173
    3910:	94 e2       	ldi	r25, 0x24	; 36
    3912:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3916:	8c 01       	movw	r16, r24
    3918:	89 2b       	or	r24, r25
    391a:	09 f0       	breq	.+2      	; 0x391e <_Z6cmdExev+0xf16>
    391c:	56 c0       	rjmp	.+172    	; 0x39ca <_Z6cmdExev+0xfc2>
	{// Set ACC
		if (!ProgramRun & !IsAnyAxisMoving())
    391e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    3922:	91 e0       	ldi	r25, 0x01	; 1
    3924:	20 91 ca 24 	lds	r18, 0x24CA	; 0x8024ca <ProgramRun>
    3928:	21 11       	cpse	r18, r1
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	99 23       	and	r25, r25
    392e:	09 f4       	brne	.+2      	; 0x3932 <_Z6cmdExev+0xf2a>
    3930:	92 c5       	rjmp	.+2852   	; 0x4456 <__stack+0x457>
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	81 11       	cpse	r24, r1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	99 23       	and	r25, r25
    393a:	09 f4       	brne	.+2      	; 0x393e <_Z6cmdExev+0xf36>
    393c:	8c c5       	rjmp	.+2840   	; 0x4456 <__stack+0x457>
		{
			if(cmdTemp[3]=='0')
    393e:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3942:	80 33       	cpi	r24, 0x30	; 48
    3944:	09 f0       	breq	.+2      	; 0x3948 <_Z6cmdExev+0xf40>
    3946:	87 c5       	rjmp	.+2830   	; 0x4456 <__stack+0x457>
    3948:	a2 eb       	ldi	r26, 0xB2	; 178
    394a:	b4 e2       	ldi	r27, 0x24	; 36
    394c:	e8 e9       	ldi	r30, 0x98	; 152
    394e:	f4 e2       	ldi	r31, 0x24	; 36
			{
				for(k=0;k<10;k++)
				{
					temp[k]=cmdTemp[k+5];
    3950:	8d 91       	ld	r24, X+
    3952:	81 93       	st	Z+, r24
	{// Set ACC
		if (!ProgramRun & !IsAnyAxisMoving())
		{
			if(cmdTemp[3]=='0')
			{
				for(k=0;k<10;k++)
    3954:	0f 5f       	subi	r16, 0xFF	; 255
    3956:	1f 4f       	sbci	r17, 0xFF	; 255
    3958:	0a 30       	cpi	r16, 0x0A	; 10
    395a:	11 05       	cpc	r17, r1
    395c:	cc f3       	brlt	.-14     	; 0x3950 <_Z6cmdExev+0xf48>
    395e:	00 93 c2 24 	sts	0x24C2, r16	; 0x8024c2 <k>
    3962:	10 93 c3 24 	sts	0x24C3, r17	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[10]=0;
    3966:	08 e9       	ldi	r16, 0x98	; 152
    3968:	14 e2       	ldi	r17, 0x24	; 36
    396a:	d8 01       	movw	r26, r16
    396c:	1a 96       	adiw	r26, 0x0a	; 10
    396e:	1c 92       	st	X, r1
				AxACC[ax]=atof(temp);
    3970:	c8 01       	movw	r24, r16
    3972:	0e 94 cf 2a 	call	0x559e	; 0x559e <atof>
    3976:	91 01       	movw	r18, r2
    3978:	22 0f       	add	r18, r18
    397a:	33 1f       	adc	r19, r19
    397c:	22 0f       	add	r18, r18
    397e:	33 1f       	adc	r19, r19
    3980:	f9 01       	movw	r30, r18
    3982:	e0 50       	subi	r30, 0x00	; 0
    3984:	f9 4d       	sbci	r31, 0xD9	; 217
    3986:	7f 01       	movw	r14, r30
    3988:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    398c:	d7 01       	movw	r26, r14
    398e:	6d 93       	st	X+, r22
    3990:	7d 93       	st	X+, r23
    3992:	8d 93       	st	X+, r24
    3994:	9c 93       	st	X, r25
    3996:	13 97       	sbiw	r26, 0x03	; 3
				sprintf(BufferSend,"!160%d\t%s\r\n",ax,temp);
    3998:	1f 93       	push	r17
    399a:	0f 93       	push	r16
    399c:	3f 92       	push	r3
    399e:	2f 92       	push	r2
    39a0:	8c e8       	ldi	r24, 0x8C	; 140
    39a2:	92 e2       	ldi	r25, 0x22	; 34
    39a4:	9f 93       	push	r25
    39a6:	8f 93       	push	r24
    39a8:	89 e6       	ldi	r24, 0x69	; 105
    39aa:	96 e2       	ldi	r25, 0x26	; 38
    39ac:	9f 93       	push	r25
    39ae:	8f 93       	push	r24
    39b0:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing=1;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    39ba:	e0 ea       	ldi	r30, 0xA0	; 160
    39bc:	f6 e0       	ldi	r31, 0x06	; 6
    39be:	84 81       	ldd	r24, Z+4	; 0x04
    39c0:	81 60       	ori	r24, 0x01	; 1
    39c2:	84 83       	std	Z+4, r24	; 0x04
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	46 c5       	rjmp	.+2700   	; 0x4456 <__stack+0x457>

			}
		}
	}
	else if(strncmp(cmdTemp,"#17",3)==0)
    39ca:	43 e0       	ldi	r20, 0x03	; 3
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	68 e9       	ldi	r22, 0x98	; 152
    39d0:	72 e2       	ldi	r23, 0x22	; 34
    39d2:	8d ea       	ldi	r24, 0xAD	; 173
    39d4:	94 e2       	ldi	r25, 0x24	; 36
    39d6:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    39da:	8c 01       	movw	r16, r24
    39dc:	89 2b       	or	r24, r25
    39de:	09 f0       	breq	.+2      	; 0x39e2 <_Z6cmdExev+0xfda>
    39e0:	56 c0       	rjmp	.+172    	; 0x3a8e <_Z6cmdExev+0x1086>
	{// Set DEC
		if (!ProgramRun & !IsAnyAxisMoving())
    39e2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    39e6:	91 e0       	ldi	r25, 0x01	; 1
    39e8:	20 91 ca 24 	lds	r18, 0x24CA	; 0x8024ca <ProgramRun>
    39ec:	21 11       	cpse	r18, r1
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	99 23       	and	r25, r25
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <_Z6cmdExev+0xfee>
    39f4:	30 c5       	rjmp	.+2656   	; 0x4456 <__stack+0x457>
    39f6:	91 e0       	ldi	r25, 0x01	; 1
    39f8:	81 11       	cpse	r24, r1
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	99 23       	and	r25, r25
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <_Z6cmdExev+0xffa>
    3a00:	2a c5       	rjmp	.+2644   	; 0x4456 <__stack+0x457>
		{
			if(cmdTemp[3]=='0')
    3a02:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3a06:	80 33       	cpi	r24, 0x30	; 48
    3a08:	09 f0       	breq	.+2      	; 0x3a0c <_Z6cmdExev+0x1004>
    3a0a:	25 c5       	rjmp	.+2634   	; 0x4456 <__stack+0x457>
    3a0c:	a2 eb       	ldi	r26, 0xB2	; 178
    3a0e:	b4 e2       	ldi	r27, 0x24	; 36
    3a10:	e8 e9       	ldi	r30, 0x98	; 152
    3a12:	f4 e2       	ldi	r31, 0x24	; 36
			{
				for(k=0;k<10;k++)
				{
					temp[k]=cmdTemp[k+5];
    3a14:	8d 91       	ld	r24, X+
    3a16:	81 93       	st	Z+, r24
	{// Set DEC
		if (!ProgramRun & !IsAnyAxisMoving())
		{
			if(cmdTemp[3]=='0')
			{
				for(k=0;k<10;k++)
    3a18:	0f 5f       	subi	r16, 0xFF	; 255
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1c:	0a 30       	cpi	r16, 0x0A	; 10
    3a1e:	11 05       	cpc	r17, r1
    3a20:	cc f3       	brlt	.-14     	; 0x3a14 <_Z6cmdExev+0x100c>
    3a22:	00 93 c2 24 	sts	0x24C2, r16	; 0x8024c2 <k>
    3a26:	10 93 c3 24 	sts	0x24C3, r17	; 0x8024c3 <k+0x1>
				{
					temp[k]=cmdTemp[k+5];
				}
				temp[10]=0;
    3a2a:	08 e9       	ldi	r16, 0x98	; 152
    3a2c:	14 e2       	ldi	r17, 0x24	; 36
    3a2e:	d8 01       	movw	r26, r16
    3a30:	1a 96       	adiw	r26, 0x0a	; 10
    3a32:	1c 92       	st	X, r1
				AxDEC[ax]=atof(temp);
    3a34:	c8 01       	movw	r24, r16
    3a36:	0e 94 cf 2a 	call	0x559e	; 0x559e <atof>
    3a3a:	91 01       	movw	r18, r2
    3a3c:	22 0f       	add	r18, r18
    3a3e:	33 1f       	adc	r19, r19
    3a40:	22 0f       	add	r18, r18
    3a42:	33 1f       	adc	r19, r19
    3a44:	f9 01       	movw	r30, r18
    3a46:	ec 50       	subi	r30, 0x0C	; 12
    3a48:	f9 4d       	sbci	r31, 0xD9	; 217
    3a4a:	7f 01       	movw	r14, r30
    3a4c:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    3a50:	d7 01       	movw	r26, r14
    3a52:	6d 93       	st	X+, r22
    3a54:	7d 93       	st	X+, r23
    3a56:	8d 93       	st	X+, r24
    3a58:	9c 93       	st	X, r25
    3a5a:	13 97       	sbiw	r26, 0x03	; 3
				sprintf(BufferSend,"!170%d\t%s\r\n",ax,temp);
    3a5c:	1f 93       	push	r17
    3a5e:	0f 93       	push	r16
    3a60:	3f 92       	push	r3
    3a62:	2f 92       	push	r2
    3a64:	8c e9       	ldi	r24, 0x9C	; 156
    3a66:	92 e2       	ldi	r25, 0x22	; 34
    3a68:	9f 93       	push	r25
    3a6a:	8f 93       	push	r24
    3a6c:	89 e6       	ldi	r24, 0x69	; 105
    3a6e:	96 e2       	ldi	r25, 0x26	; 38
    3a70:	9f 93       	push	r25
    3a72:	8f 93       	push	r24
    3a74:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
				Responsing=1;
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
				SetDataReady;
    3a7e:	e0 ea       	ldi	r30, 0xA0	; 160
    3a80:	f6 e0       	ldi	r31, 0x06	; 6
    3a82:	84 81       	ldd	r24, Z+4	; 0x04
    3a84:	81 60       	ori	r24, 0x01	; 1
    3a86:	84 83       	std	Z+4, r24	; 0x04
    3a88:	cd bf       	out	0x3d, r28	; 61
    3a8a:	de bf       	out	0x3e, r29	; 62
    3a8c:	e4 c4       	rjmp	.+2504   	; 0x4456 <__stack+0x457>
			}
		}
	}
	else if(strncmp(cmdTemp,"#1800",5)==0)
    3a8e:	45 e0       	ldi	r20, 0x05	; 5
    3a90:	50 e0       	ldi	r21, 0x00	; 0
    3a92:	68 ea       	ldi	r22, 0xA8	; 168
    3a94:	72 e2       	ldi	r23, 0x22	; 34
    3a96:	8d ea       	ldi	r24, 0xAD	; 173
    3a98:	94 e2       	ldi	r25, 0x24	; 36
    3a9a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3a9e:	89 2b       	or	r24, r25
    3aa0:	09 f0       	breq	.+2      	; 0x3aa4 <_Z6cmdExev+0x109c>
    3aa2:	b5 c0       	rjmp	.+362    	; 0x3c0e <_Z6cmdExev+0x1206>
	{//Go To Refrence
		if (!ProgramRun)
    3aa4:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    3aa8:	81 11       	cpse	r24, r1
    3aaa:	d5 c4       	rjmp	.+2474   	; 0x4456 <__stack+0x457>
		{
			while (IsAnyAxisMoving() == 1);
    3aac:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    3ab0:	81 30       	cpi	r24, 0x01	; 1
    3ab2:	f1 f3       	breq	.-4      	; 0x3ab0 <_Z6cmdExev+0x10a8>
			printf("RefDir : %u\r\n",Axes[ax].RefrenceDir);
    3ab4:	8b e2       	ldi	r24, 0x2B	; 43
    3ab6:	82 9d       	mul	r24, r2
    3ab8:	f0 01       	movw	r30, r0
    3aba:	83 9d       	mul	r24, r3
    3abc:	f0 0d       	add	r31, r0
    3abe:	11 24       	eor	r1, r1
    3ac0:	e5 53       	subi	r30, 0x35	; 53
    3ac2:	fb 4d       	sbci	r31, 0xDB	; 219
    3ac4:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ac6:	1f 92       	push	r1
    3ac8:	8f 93       	push	r24
    3aca:	8e ea       	ldi	r24, 0xAE	; 174
    3acc:	92 e2       	ldi	r25, 0x22	; 34
    3ace:	9f 93       	push	r25
    3ad0:	8f 93       	push	r24
    3ad2:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    3ad6:	0f 2e       	mov	r0, r31
    3ad8:	fb ec       	ldi	r31, 0xCB	; 203
    3ada:	ef 2e       	mov	r14, r31
    3adc:	f4 e2       	ldi	r31, 0x24	; 36
    3ade:	ff 2e       	mov	r15, r31
    3ae0:	f0 2d       	mov	r31, r0
    3ae2:	0f 2e       	mov	r0, r31
    3ae4:	f2 ee       	ldi	r31, 0xE2	; 226
    3ae6:	af 2e       	mov	r10, r31
    3ae8:	f6 e2       	ldi	r31, 0x26	; 38
    3aea:	bf 2e       	mov	r11, r31
    3aec:	f0 2d       	mov	r31, r0
    3aee:	0f 2e       	mov	r0, r31
    3af0:	f8 e1       	ldi	r31, 0x18	; 24
    3af2:	cf 2e       	mov	r12, r31
    3af4:	f7 e2       	ldi	r31, 0x27	; 39
    3af6:	df 2e       	mov	r13, r31
    3af8:	f0 2d       	mov	r31, r0
    3afa:	0f 2e       	mov	r0, r31
    3afc:	f4 e2       	ldi	r31, 0x24	; 36
    3afe:	8f 2e       	mov	r8, r31
    3b00:	f7 e2       	ldi	r31, 0x27	; 39
    3b02:	9f 2e       	mov	r9, r31
    3b04:	f0 2d       	mov	r31, r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
			for(int gx = 0 ; gx < AxisNumber ; gx++)
    3b0e:	19 82       	std	Y+1, r1	; 0x01
    3b10:	1a 82       	std	Y+2, r1	; 0x02
			{
				SetAxisDir(gx,Axes[gx].RefrenceDir);
				Ma[gx] = 1000;
    3b12:	08 ee       	ldi	r16, 0xE8	; 232
    3b14:	13 e0       	ldi	r17, 0x03	; 3
				DistanceToGo[gx] = 0x7FFFFFFF;
    3b16:	0f 2e       	mov	r0, r31
    3b18:	44 24       	eor	r4, r4
    3b1a:	4a 94       	dec	r4
    3b1c:	54 2c       	mov	r5, r4
    3b1e:	64 2c       	mov	r6, r4
    3b20:	ff e7       	ldi	r31, 0x7F	; 127
    3b22:	7f 2e       	mov	r7, r31
    3b24:	f0 2d       	mov	r31, r0
		{
			while (IsAnyAxisMoving() == 1);
			printf("RefDir : %u\r\n",Axes[ax].RefrenceDir);
			for(int gx = 0 ; gx < AxisNumber ; gx++)
			{
				SetAxisDir(gx,Axes[gx].RefrenceDir);
    3b26:	d7 01       	movw	r26, r14
    3b28:	5c 96       	adiw	r26, 0x1c	; 28
    3b2a:	6c 91       	ld	r22, X
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b30:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				Ma[gx] = 1000;
    3b34:	f5 01       	movw	r30, r10
    3b36:	01 93       	st	Z+, r16
    3b38:	11 93       	st	Z+, r17
    3b3a:	5f 01       	movw	r10, r30
				DistanceToGo[gx] = 0x7FFFFFFF;
    3b3c:	d6 01       	movw	r26, r12
    3b3e:	4d 92       	st	X+, r4
    3b40:	5d 92       	st	X+, r5
    3b42:	6d 92       	st	X+, r6
    3b44:	7d 92       	st	X+, r7
    3b46:	6d 01       	movw	r12, r26
				AxisPosition[gx] = 0;
    3b48:	f4 01       	movw	r30, r8
    3b4a:	11 92       	st	Z+, r1
    3b4c:	11 92       	st	Z+, r1
    3b4e:	11 92       	st	Z+, r1
    3b50:	11 92       	st	Z+, r1
    3b52:	4f 01       	movw	r8, r30
	{//Go To Refrence
		if (!ProgramRun)
		{
			while (IsAnyAxisMoving() == 1);
			printf("RefDir : %u\r\n",Axes[ax].RefrenceDir);
			for(int gx = 0 ; gx < AxisNumber ; gx++)
    3b54:	29 81       	ldd	r18, Y+1	; 0x01
    3b56:	3a 81       	ldd	r19, Y+2	; 0x02
    3b58:	2f 5f       	subi	r18, 0xFF	; 255
    3b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5c:	29 83       	std	Y+1, r18	; 0x01
    3b5e:	3a 83       	std	Y+2, r19	; 0x02
    3b60:	3b e2       	ldi	r19, 0x2B	; 43
    3b62:	e3 0e       	add	r14, r19
    3b64:	f1 1c       	adc	r15, r1
    3b66:	49 81       	ldd	r20, Y+1	; 0x01
    3b68:	5a 81       	ldd	r21, Y+2	; 0x02
    3b6a:	43 30       	cpi	r20, 0x03	; 3
    3b6c:	51 05       	cpc	r21, r1
    3b6e:	d9 f6       	brne	.-74     	; 0x3b26 <_Z6cmdExev+0x111e>
				SetAxisDir(gx,Axes[gx].RefrenceDir);
				Ma[gx] = 1000;
				DistanceToGo[gx] = 0x7FFFFFFF;
				AxisPosition[gx] = 0;
			}
			MaxSpeed=8000;
    3b70:	80 e4       	ldi	r24, 0x40	; 64
    3b72:	9f e1       	ldi	r25, 0x1F	; 31
    3b74:	a0 e0       	ldi	r26, 0x00	; 0
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    3b7c:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    3b80:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    3b84:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			
			CurSpeedFrq = MaxSpeed;
    3b88:	80 93 77 24 	sts	0x2477, r24	; 0x802477 <CurSpeedFrq>
    3b8c:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <CurSpeedFrq+0x1>
    3b90:	a0 93 79 24 	sts	0x2479, r26	; 0x802479 <CurSpeedFrq+0x2>
    3b94:	b0 93 7a 24 	sts	0x247A, r27	; 0x80247a <CurSpeedFrq+0x3>
			ACC = 0;
    3b98:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
			DEC = 0;
    3b9c:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
			TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	a0 e0       	ldi	r26, 0x00	; 0
    3ba6:	b0 e4       	ldi	r27, 0x40	; 64
    3ba8:	80 93 c6 24 	sts	0x24C6, r24	; 0x8024c6 <TimerMainPeriod>
    3bac:	90 93 c7 24 	sts	0x24C7, r25	; 0x8024c7 <TimerMainPeriod+0x1>
    3bb0:	a0 93 c8 24 	sts	0x24C8, r26	; 0x8024c8 <TimerMainPeriod+0x2>
    3bb4:	b0 93 c9 24 	sts	0x24C9, r27	; 0x8024c9 <TimerMainPeriod+0x3>
			RefCmd=1;
    3bb8:	51 e0       	ldi	r21, 0x01	; 1
    3bba:	50 93 68 24 	sts	0x2468, r21	; 0x802468 <RefCmd>
			
			tcc0_init();
    3bbe:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
			
			TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a e7       	ldi	r20, 0x7A	; 122
    3bc8:	54 e4       	ldi	r21, 0x44	; 68
    3bca:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    3bce:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    3bd2:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    3bd6:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    3bda:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    3bde:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    3be2:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3be6:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			
			sprintf(BufferSend,"!1800\r\n");
    3bea:	88 e0       	ldi	r24, 0x08	; 8
    3bec:	ec eb       	ldi	r30, 0xBC	; 188
    3bee:	f2 e2       	ldi	r31, 0x22	; 34
    3bf0:	a9 e6       	ldi	r26, 0x69	; 105
    3bf2:	b6 e2       	ldi	r27, 0x26	; 38
    3bf4:	01 90       	ld	r0, Z+
    3bf6:	0d 92       	st	X+, r0
    3bf8:	8a 95       	dec	r24
    3bfa:	e1 f7       	brne	.-8      	; 0x3bf4 <_Z6cmdExev+0x11ec>
			Responsing=1;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3c02:	e0 ea       	ldi	r30, 0xA0	; 160
    3c04:	f6 e0       	ldi	r31, 0x06	; 6
    3c06:	84 81       	ldd	r24, Z+4	; 0x04
    3c08:	81 60       	ori	r24, 0x01	; 1
    3c0a:	84 83       	std	Z+4, r24	; 0x04
    3c0c:	24 c4       	rjmp	.+2120   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#19",3)==0)
    3c0e:	43 e0       	ldi	r20, 0x03	; 3
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	64 ec       	ldi	r22, 0xC4	; 196
    3c14:	72 e2       	ldi	r23, 0x22	; 34
    3c16:	8d ea       	ldi	r24, 0xAD	; 173
    3c18:	94 e2       	ldi	r25, 0x24	; 36
    3c1a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3c1e:	89 2b       	or	r24, r25
    3c20:	21 f5       	brne	.+72     	; 0x3c6a <_Z6cmdExev+0x1262>
	{
		if(cmdTemp[3]=='0') //Reset Reference Direction
    3c22:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3c26:	80 33       	cpi	r24, 0x30	; 48
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <_Z6cmdExev+0x1224>
    3c2a:	15 c4       	rjmp	.+2090   	; 0x4456 <__stack+0x457>
		{
			RefDIR[ax] = 0;
    3c2c:	f1 01       	movw	r30, r2
    3c2e:	ef 50       	subi	r30, 0x0F	; 15
    3c30:	f9 4d       	sbci	r31, 0xD9	; 217
    3c32:	10 82       	st	Z, r1
			sprintf(BufferSend,"!190%d\r\n",ax);
    3c34:	3f 92       	push	r3
    3c36:	2f 92       	push	r2
    3c38:	88 ec       	ldi	r24, 0xC8	; 200
    3c3a:	92 e2       	ldi	r25, 0x22	; 34
    3c3c:	9f 93       	push	r25
    3c3e:	8f 93       	push	r24
    3c40:	89 e6       	ldi	r24, 0x69	; 105
    3c42:	96 e2       	ldi	r25, 0x26	; 38
    3c44:	9f 93       	push	r25
    3c46:	8f 93       	push	r24
    3c48:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
			Responsing=1;
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3c52:	e0 ea       	ldi	r30, 0xA0	; 160
    3c54:	f6 e0       	ldi	r31, 0x06	; 6
    3c56:	84 81       	ldd	r24, Z+4	; 0x04
    3c58:	81 60       	ori	r24, 0x01	; 1
    3c5a:	84 83       	std	Z+4, r24	; 0x04
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	f6 c3       	rjmp	.+2028   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#20",3)==0)
    3c6a:	43 e0       	ldi	r20, 0x03	; 3
    3c6c:	50 e0       	ldi	r21, 0x00	; 0
    3c6e:	61 ed       	ldi	r22, 0xD1	; 209
    3c70:	72 e2       	ldi	r23, 0x22	; 34
    3c72:	8d ea       	ldi	r24, 0xAD	; 173
    3c74:	94 e2       	ldi	r25, 0x24	; 36
    3c76:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3c7a:	89 2b       	or	r24, r25
    3c7c:	21 f5       	brne	.+72     	; 0x3cc6 <_Z6cmdExev+0x12be>
	{
		if(cmdTemp[3]=='0') //Set Reference Direction
    3c7e:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3c82:	80 33       	cpi	r24, 0x30	; 48
    3c84:	09 f0       	breq	.+2      	; 0x3c88 <_Z6cmdExev+0x1280>
    3c86:	e7 c3       	rjmp	.+1998   	; 0x4456 <__stack+0x457>
		{
			RefDIR[ax] = 1;
    3c88:	f1 01       	movw	r30, r2
    3c8a:	ef 50       	subi	r30, 0x0F	; 15
    3c8c:	f9 4d       	sbci	r31, 0xD9	; 217
    3c8e:	11 e0       	ldi	r17, 0x01	; 1
    3c90:	10 83       	st	Z, r17
			sprintf(BufferSend,"!200%d\r\n",ax);
    3c92:	3f 92       	push	r3
    3c94:	2f 92       	push	r2
    3c96:	85 ed       	ldi	r24, 0xD5	; 213
    3c98:	92 e2       	ldi	r25, 0x22	; 34
    3c9a:	9f 93       	push	r25
    3c9c:	8f 93       	push	r24
    3c9e:	89 e6       	ldi	r24, 0x69	; 105
    3ca0:	96 e2       	ldi	r25, 0x26	; 38
    3ca2:	9f 93       	push	r25
    3ca4:	8f 93       	push	r24
    3ca6:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
			Responsing=1;
    3caa:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
			SetDataReady;
    3cae:	e0 ea       	ldi	r30, 0xA0	; 160
    3cb0:	f6 e0       	ldi	r31, 0x06	; 6
    3cb2:	84 81       	ldd	r24, Z+4	; 0x04
    3cb4:	81 60       	ori	r24, 0x01	; 1
    3cb6:	84 83       	std	Z+4, r24	; 0x04
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	c8 c3       	rjmp	.+1936   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#21",3)==0)
    3cc6:	43 e0       	ldi	r20, 0x03	; 3
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	6e ed       	ldi	r22, 0xDE	; 222
    3ccc:	72 e2       	ldi	r23, 0x22	; 34
    3cce:	8d ea       	ldi	r24, 0xAD	; 173
    3cd0:	94 e2       	ldi	r25, 0x24	; 36
    3cd2:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3cd6:	89 2b       	or	r24, r25
    3cd8:	09 f0       	breq	.+2      	; 0x3cdc <_Z6cmdExev+0x12d4>
    3cda:	45 c0       	rjmp	.+138    	; 0x3d66 <_Z6cmdExev+0x135e>
	{
		if (cmdTemp[3] == 0)//Disable Hardware Positive Limit
    3cdc:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3ce0:	81 11       	cpse	r24, r1
    3ce2:	1f c0       	rjmp	.+62     	; 0x3d22 <_Z6cmdExev+0x131a>
		{
			PLimitIsActiveA[ax]=0;
    3ce4:	f1 01       	movw	r30, r2
    3ce6:	e0 53       	subi	r30, 0x30	; 48
    3ce8:	f9 4d       	sbci	r31, 0xD9	; 217
    3cea:	10 82       	st	Z, r1
			sprintf(BufferSend,"!210%d\r\n",ax);
    3cec:	3f 92       	push	r3
    3cee:	2f 92       	push	r2
    3cf0:	82 ee       	ldi	r24, 0xE2	; 226
    3cf2:	92 e2       	ldi	r25, 0x22	; 34
    3cf4:	9f 93       	push	r25
    3cf6:	8f 93       	push	r24
    3cf8:	89 e6       	ldi	r24, 0x69	; 105
    3cfa:	96 e2       	ldi	r25, 0x26	; 38
    3cfc:	9f 93       	push	r25
    3cfe:	8f 93       	push	r24
    3d00:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
			Responsing=1;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3d0a:	e0 ea       	ldi	r30, 0xA0	; 160
    3d0c:	f6 e0       	ldi	r31, 0x06	; 6
    3d0e:	84 81       	ldd	r24, Z+4	; 0x04
    3d10:	81 60       	ori	r24, 0x01	; 1
    3d12:	84 83       	std	Z+4, r24	; 0x04
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	9a c3       	rjmp	.+1844   	; 0x4456 <__stack+0x457>
		}
		else if (cmdTemp[3] == 1)//Enable Hardware Positive Limit
    3d22:	81 30       	cpi	r24, 0x01	; 1
    3d24:	09 f0       	breq	.+2      	; 0x3d28 <_Z6cmdExev+0x1320>
    3d26:	97 c3       	rjmp	.+1838   	; 0x4456 <__stack+0x457>
		{
			PLimitIsActiveA[ax] = 1;
    3d28:	f1 01       	movw	r30, r2
    3d2a:	e0 53       	subi	r30, 0x30	; 48
    3d2c:	f9 4d       	sbci	r31, 0xD9	; 217
    3d2e:	11 e0       	ldi	r17, 0x01	; 1
    3d30:	10 83       	st	Z, r17
			sprintf(BufferSend,"!211%d\r\n",ax);
    3d32:	3f 92       	push	r3
    3d34:	2f 92       	push	r2
    3d36:	8b ee       	ldi	r24, 0xEB	; 235
    3d38:	92 e2       	ldi	r25, 0x22	; 34
    3d3a:	9f 93       	push	r25
    3d3c:	8f 93       	push	r24
    3d3e:	89 e6       	ldi	r24, 0x69	; 105
    3d40:	96 e2       	ldi	r25, 0x26	; 38
    3d42:	9f 93       	push	r25
    3d44:	8f 93       	push	r24
    3d46:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
			Responsing=1;
    3d4a:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
			SetDataReady;
    3d4e:	e0 ea       	ldi	r30, 0xA0	; 160
    3d50:	f6 e0       	ldi	r31, 0x06	; 6
    3d52:	84 81       	ldd	r24, Z+4	; 0x04
    3d54:	81 60       	ori	r24, 0x01	; 1
    3d56:	84 83       	std	Z+4, r24	; 0x04
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	78 c3       	rjmp	.+1776   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#22",5)==0)
    3d66:	45 e0       	ldi	r20, 0x05	; 5
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	64 ef       	ldi	r22, 0xF4	; 244
    3d6c:	72 e2       	ldi	r23, 0x22	; 34
    3d6e:	8d ea       	ldi	r24, 0xAD	; 173
    3d70:	94 e2       	ldi	r25, 0x24	; 36
    3d72:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3d76:	89 2b       	or	r24, r25
    3d78:	09 f0       	breq	.+2      	; 0x3d7c <_Z6cmdExev+0x1374>
    3d7a:	45 c0       	rjmp	.+138    	; 0x3e06 <_Z6cmdExev+0x13fe>
	{
		if (cmdTemp[3] == 0) //Disable Hardware Negative Limit
    3d7c:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <cmdTemp+0x3>
    3d80:	81 11       	cpse	r24, r1
    3d82:	1f c0       	rjmp	.+62     	; 0x3dc2 <_Z6cmdExev+0x13ba>
		{
			NLimitIsActiveA[ax] = 0;
    3d84:	f1 01       	movw	r30, r2
    3d86:	e3 53       	subi	r30, 0x33	; 51
    3d88:	f9 4d       	sbci	r31, 0xD9	; 217
    3d8a:	10 82       	st	Z, r1
			sprintf(BufferSend,"!220%d\r\n",ax);
    3d8c:	3f 92       	push	r3
    3d8e:	2f 92       	push	r2
    3d90:	88 ef       	ldi	r24, 0xF8	; 248
    3d92:	92 e2       	ldi	r25, 0x22	; 34
    3d94:	9f 93       	push	r25
    3d96:	8f 93       	push	r24
    3d98:	89 e6       	ldi	r24, 0x69	; 105
    3d9a:	96 e2       	ldi	r25, 0x26	; 38
    3d9c:	9f 93       	push	r25
    3d9e:	8f 93       	push	r24
    3da0:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
			Responsing=1;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
			SetDataReady;
    3daa:	e0 ea       	ldi	r30, 0xA0	; 160
    3dac:	f6 e0       	ldi	r31, 0x06	; 6
    3dae:	84 81       	ldd	r24, Z+4	; 0x04
    3db0:	81 60       	ori	r24, 0x01	; 1
    3db2:	84 83       	std	Z+4, r24	; 0x04
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	4a c3       	rjmp	.+1684   	; 0x4456 <__stack+0x457>
		}
		else if (cmdTemp[3] == 1)//Enable Hardware Negative Limit
    3dc2:	81 30       	cpi	r24, 0x01	; 1
    3dc4:	09 f0       	breq	.+2      	; 0x3dc8 <_Z6cmdExev+0x13c0>
    3dc6:	47 c3       	rjmp	.+1678   	; 0x4456 <__stack+0x457>
		{
			NLimitIsActiveA[ax] = 1;
    3dc8:	f1 01       	movw	r30, r2
    3dca:	e3 53       	subi	r30, 0x33	; 51
    3dcc:	f9 4d       	sbci	r31, 0xD9	; 217
    3dce:	11 e0       	ldi	r17, 0x01	; 1
    3dd0:	10 83       	st	Z, r17
			sprintf(BufferSend,"!221%d\r\n",ax);
    3dd2:	3f 92       	push	r3
    3dd4:	2f 92       	push	r2
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	93 e2       	ldi	r25, 0x23	; 35
    3dda:	9f 93       	push	r25
    3ddc:	8f 93       	push	r24
    3dde:	89 e6       	ldi	r24, 0x69	; 105
    3de0:	96 e2       	ldi	r25, 0x26	; 38
    3de2:	9f 93       	push	r25
    3de4:	8f 93       	push	r24
    3de6:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
			Responsing=1;
    3dea:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
			SetDataReady;
    3dee:	e0 ea       	ldi	r30, 0xA0	; 160
    3df0:	f6 e0       	ldi	r31, 0x06	; 6
    3df2:	84 81       	ldd	r24, Z+4	; 0x04
    3df4:	81 60       	ori	r24, 0x01	; 1
    3df6:	84 83       	std	Z+4, r24	; 0x04
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	28 c3       	rjmp	.+1616   	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#2800",5)==0)
    3e06:	45 e0       	ldi	r20, 0x05	; 5
    3e08:	50 e0       	ldi	r21, 0x00	; 0
    3e0a:	6a e0       	ldi	r22, 0x0A	; 10
    3e0c:	73 e2       	ldi	r23, 0x23	; 35
    3e0e:	8d ea       	ldi	r24, 0xAD	; 173
    3e10:	94 e2       	ldi	r25, 0x24	; 36
    3e12:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3e16:	89 2b       	or	r24, r25
    3e18:	61 f4       	brne	.+24     	; 0x3e32 <_Z6cmdExev+0x142a>
	{
		EchoON=1;
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	80 93 97 24 	sts	0x2497, r24	; 0x802497 <EchoON>
		if(EchoON) printf("!2800\n\r");
    3e20:	80 e1       	ldi	r24, 0x10	; 16
    3e22:	93 e2       	ldi	r25, 0x23	; 35
    3e24:	9f 93       	push	r25
    3e26:	8f 93       	push	r24
    3e28:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	12 c3       	rjmp	.+1572   	; 0x4456 <__stack+0x457>
	}
	else if(strncmp(cmdTemp,"#2900",5)==0)
    3e32:	45 e0       	ldi	r20, 0x05	; 5
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	68 e1       	ldi	r22, 0x18	; 24
    3e38:	73 e2       	ldi	r23, 0x23	; 35
    3e3a:	8d ea       	ldi	r24, 0xAD	; 173
    3e3c:	94 e2       	ldi	r25, 0x24	; 36
    3e3e:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3e42:	89 2b       	or	r24, r25
    3e44:	19 f4       	brne	.+6      	; 0x3e4c <_Z6cmdExev+0x1444>
	{
		EchoON=0;
    3e46:	10 92 97 24 	sts	0x2497, r1	; 0x802497 <EchoON>
    3e4a:	05 c3       	rjmp	.+1546   	; 0x4456 <__stack+0x457>
		if(EchoON) printf("!2900\n\r");
	}
	else if(strncmp(cmdTemp,"#3000",5)==0)
    3e4c:	45 e0       	ldi	r20, 0x05	; 5
    3e4e:	50 e0       	ldi	r21, 0x00	; 0
    3e50:	6e e1       	ldi	r22, 0x1E	; 30
    3e52:	73 e2       	ldi	r23, 0x23	; 35
    3e54:	8d ea       	ldi	r24, 0xAD	; 173
    3e56:	94 e2       	ldi	r25, 0x24	; 36
    3e58:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    3e5c:	89 2b       	or	r24, r25
    3e5e:	09 f0       	breq	.+2      	; 0x3e62 <_Z6cmdExev+0x145a>
    3e60:	0d c2       	rjmp	.+1050   	; 0x427c <__stack+0x27d>
	{//Run 4Axis Interpolation
		if (!ProgramRun)
    3e62:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    3e66:	81 11       	cpse	r24, r1
    3e68:	f6 c2       	rjmp	.+1516   	; 0x4456 <__stack+0x457>
		{
			while (IsAnyAxisMoving() == 1);
    3e6a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    3e6e:	81 30       	cpi	r24, 0x01	; 1
    3e70:	f1 f3       	breq	.-4      	; 0x3e6e <_Z6cmdExev+0x1466>
    3e72:	0f 2e       	mov	r0, r31
    3e74:	f4 e2       	ldi	r31, 0x24	; 36
    3e76:	af 2e       	mov	r10, r31
    3e78:	f7 e2       	ldi	r31, 0x27	; 39
    3e7a:	bf 2e       	mov	r11, r31
    3e7c:	f0 2d       	mov	r31, r0
    3e7e:	0f 2e       	mov	r0, r31
    3e80:	f0 e3       	ldi	r31, 0x30	; 48
    3e82:	ef 2e       	mov	r14, r31
    3e84:	f7 e2       	ldi	r31, 0x27	; 39
    3e86:	ff 2e       	mov	r15, r31
    3e88:	f0 2d       	mov	r31, r0
    3e8a:	0f 2e       	mov	r0, r31
    3e8c:	f8 e1       	ldi	r31, 0x18	; 24
    3e8e:	8f 2e       	mov	r8, r31
    3e90:	f7 e2       	ldi	r31, 0x27	; 39
    3e92:	9f 2e       	mov	r9, r31
    3e94:	f0 2d       	mov	r31, r0
    3e96:	0f 2e       	mov	r0, r31
    3e98:	fc e0       	ldi	r31, 0x0C	; 12
    3e9a:	cf 2e       	mov	r12, r31
    3e9c:	f7 e2       	ldi	r31, 0x27	; 39
    3e9e:	df 2e       	mov	r13, r31
    3ea0:	f0 2d       	mov	r31, r0
    3ea2:	36 01       	movw	r6, r12
    3ea4:	1d 82       	std	Y+5, r1	; 0x05
    3ea6:	1e 82       	std	Y+6, r1	; 0x06
    3ea8:	00 e0       	ldi	r16, 0x00	; 0
    3eaa:	10 e0       	ldi	r17, 0x00	; 0
    3eac:	41 2c       	mov	r4, r1
    3eae:	51 2c       	mov	r5, r1
    3eb0:	17 01       	movw	r2, r14
    3eb2:	a9 82       	std	Y+1, r10	; 0x01
    3eb4:	ba 82       	std	Y+2, r11	; 0x02
			unsigned int TempS = 0;
			int tempa = 0;
			for (int gx = 0 ; gx < AxisNumber ; gx++)
			{
				if (SetJog[gx] < AxisPosition[gx])
    3eb6:	d7 01       	movw	r26, r14
    3eb8:	4d 91       	ld	r20, X+
    3eba:	5d 91       	ld	r21, X+
    3ebc:	6d 91       	ld	r22, X+
    3ebe:	7c 91       	ld	r23, X
    3ec0:	f5 01       	movw	r30, r10
    3ec2:	80 81       	ld	r24, Z
    3ec4:	91 81       	ldd	r25, Z+1	; 0x01
    3ec6:	a2 81       	ldd	r26, Z+2	; 0x02
    3ec8:	b3 81       	ldd	r27, Z+3	; 0x03
    3eca:	48 17       	cp	r20, r24
    3ecc:	59 07       	cpc	r21, r25
    3ece:	6a 07       	cpc	r22, r26
    3ed0:	7b 07       	cpc	r23, r27
    3ed2:	34 f4       	brge	.+12     	; 0x3ee0 <_Z6cmdExev+0x14d8>
				SetAxisDir(gx,0);
    3ed4:	60 e0       	ldi	r22, 0x00	; 0
    3ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eda:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
    3ede:	05 c0       	rjmp	.+10     	; 0x3eea <_Z6cmdExev+0x14e2>
				else
				SetAxisDir(gx,1);
    3ee0:	61 e0       	ldi	r22, 0x01	; 1
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee6:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
				if (TempS < SetSpeed[gx])
    3eea:	f3 01       	movw	r30, r6
    3eec:	81 91       	ld	r24, Z+
    3eee:	91 91       	ld	r25, Z+
    3ef0:	a1 91       	ld	r26, Z+
    3ef2:	b1 91       	ld	r27, Z+
    3ef4:	3f 01       	movw	r6, r30
    3ef6:	a2 01       	movw	r20, r4
    3ef8:	60 e0       	ldi	r22, 0x00	; 0
    3efa:	70 e0       	ldi	r23, 0x00	; 0
    3efc:	48 17       	cp	r20, r24
    3efe:	59 07       	cpc	r21, r25
    3f00:	6a 07       	cpc	r22, r26
    3f02:	7b 07       	cpc	r23, r27
    3f04:	1c f4       	brge	.+6      	; 0x3f0c <_Z6cmdExev+0x1504>
				{
					TempS = SetSpeed[gx];
    3f06:	2c 01       	movw	r4, r24
    3f08:	0d 81       	ldd	r16, Y+5	; 0x05
    3f0a:	1e 81       	ldd	r17, Y+6	; 0x06
    3f0c:	f4 e0       	ldi	r31, 0x04	; 4
    3f0e:	af 0e       	add	r10, r31
    3f10:	b1 1c       	adc	r11, r1
    3f12:	24 e0       	ldi	r18, 0x04	; 4
    3f14:	e2 0e       	add	r14, r18
    3f16:	f1 1c       	adc	r15, r1
					tempa = gx;
				}
				DistanceToGo[gx] = labs(AxisPosition[gx]-SetJog[gx]);
    3f18:	e9 81       	ldd	r30, Y+1	; 0x01
    3f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f1c:	80 81       	ld	r24, Z
    3f1e:	91 81       	ldd	r25, Z+1	; 0x01
    3f20:	a2 81       	ldd	r26, Z+2	; 0x02
    3f22:	b3 81       	ldd	r27, Z+3	; 0x03
    3f24:	f1 01       	movw	r30, r2
    3f26:	40 81       	ld	r20, Z
    3f28:	51 81       	ldd	r21, Z+1	; 0x01
    3f2a:	62 81       	ldd	r22, Z+2	; 0x02
    3f2c:	73 81       	ldd	r23, Z+3	; 0x03
    3f2e:	84 1b       	sub	r24, r20
    3f30:	95 0b       	sbc	r25, r21
    3f32:	a6 0b       	sbc	r26, r22
    3f34:	b7 0b       	sbc	r27, r23
    3f36:	ac 01       	movw	r20, r24
    3f38:	bd 01       	movw	r22, r26
    3f3a:	3a f4       	brpl	.+14     	; 0x3f4a <_Z6cmdExev+0x1542>
    3f3c:	44 27       	eor	r20, r20
    3f3e:	55 27       	eor	r21, r21
    3f40:	ba 01       	movw	r22, r20
    3f42:	48 1b       	sub	r20, r24
    3f44:	59 0b       	sbc	r21, r25
    3f46:	6a 0b       	sbc	r22, r26
    3f48:	7b 0b       	sbc	r23, r27
    3f4a:	d4 01       	movw	r26, r8
    3f4c:	4d 93       	st	X+, r20
    3f4e:	5d 93       	st	X+, r21
    3f50:	6d 93       	st	X+, r22
    3f52:	7d 93       	st	X+, r23
    3f54:	4d 01       	movw	r8, r26
		if (!ProgramRun)
		{
			while (IsAnyAxisMoving() == 1);
			unsigned int TempS = 0;
			int tempa = 0;
			for (int gx = 0 ; gx < AxisNumber ; gx++)
    3f56:	ed 81       	ldd	r30, Y+5	; 0x05
    3f58:	fe 81       	ldd	r31, Y+6	; 0x06
    3f5a:	31 96       	adiw	r30, 0x01	; 1
    3f5c:	ed 83       	std	Y+5, r30	; 0x05
    3f5e:	fe 83       	std	Y+6, r31	; 0x06
    3f60:	33 97       	sbiw	r30, 0x03	; 3
    3f62:	09 f0       	breq	.+2      	; 0x3f66 <_Z6cmdExev+0x155e>
    3f64:	a5 cf       	rjmp	.-182    	; 0x3eb0 <_Z6cmdExev+0x14a8>
					TempS = SetSpeed[gx];
					tempa = gx;
				}
				DistanceToGo[gx] = labs(AxisPosition[gx]-SetJog[gx]);
			}
			MaxSpeed = TempS;
    3f66:	61 2c       	mov	r6, r1
    3f68:	71 2c       	mov	r7, r1
    3f6a:	40 92 87 24 	sts	0x2487, r4	; 0x802487 <MaxSpeed>
    3f6e:	50 92 88 24 	sts	0x2488, r5	; 0x802488 <MaxSpeed+0x1>
    3f72:	60 92 89 24 	sts	0x2489, r6	; 0x802489 <MaxSpeed+0x2>
    3f76:	70 92 8a 24 	sts	0x248A, r7	; 0x80248a <MaxSpeed+0x3>
    3f7a:	22 ee       	ldi	r18, 0xE2	; 226
    3f7c:	36 e2       	ldi	r19, 0x26	; 38
    3f7e:	29 83       	std	Y+1, r18	; 0x01
    3f80:	3a 83       	std	Y+2, r19	; 0x02
    3f82:	0f 2e       	mov	r0, r31
    3f84:	f8 e1       	ldi	r31, 0x18	; 24
    3f86:	ef 2e       	mov	r14, r31
    3f88:	f7 e2       	ldi	r31, 0x27	; 39
    3f8a:	ff 2e       	mov	r15, r31
    3f8c:	f0 2d       	mov	r31, r0
			for (int gx = 0 ; gx < AxisNumber ; gx++)
			{
				Ma[gx]=(unsigned int)((float)(SetSpeed[gx]/MaxSpeed)*1000);
    3f8e:	d6 01       	movw	r26, r12
    3f90:	6d 91       	ld	r22, X+
    3f92:	7d 91       	ld	r23, X+
    3f94:	8d 91       	ld	r24, X+
    3f96:	9d 91       	ld	r25, X+
    3f98:	6d 01       	movw	r12, r26
    3f9a:	a3 01       	movw	r20, r6
    3f9c:	92 01       	movw	r18, r4
    3f9e:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    3fa2:	ca 01       	movw	r24, r20
    3fa4:	b9 01       	movw	r22, r18
    3fa6:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	4a e7       	ldi	r20, 0x7A	; 122
    3fb0:	54 e4       	ldi	r21, 0x44	; 68
    3fb2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    3fb6:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    3fba:	e9 81       	ldd	r30, Y+1	; 0x01
    3fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3fbe:	61 93       	st	Z+, r22
    3fc0:	71 93       	st	Z+, r23
    3fc2:	e9 83       	std	Y+1, r30	; 0x01
    3fc4:	fa 83       	std	Y+2, r31	; 0x02
					tempa = gx;
				}
				DistanceToGo[gx] = labs(AxisPosition[gx]-SetJog[gx]);
			}
			MaxSpeed = TempS;
			for (int gx = 0 ; gx < AxisNumber ; gx++)
    3fc6:	ce 14       	cp	r12, r14
    3fc8:	df 04       	cpc	r13, r15
    3fca:	09 f7       	brne	.-62     	; 0x3f8e <_Z6cmdExev+0x1586>
			{
				Ma[gx]=(unsigned int)((float)(SetSpeed[gx]/MaxSpeed)*1000);
			}
			IACC=AxACC[tempa];
    3fcc:	c8 01       	movw	r24, r16
    3fce:	88 0f       	add	r24, r24
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	88 0f       	add	r24, r24
    3fd4:	99 1f       	adc	r25, r25
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	e0 50       	subi	r30, 0x00	; 0
    3fda:	f9 4d       	sbci	r31, 0xD9	; 217
    3fdc:	80 80       	ld	r8, Z
    3fde:	91 80       	ldd	r9, Z+1	; 0x01
    3fe0:	a2 80       	ldd	r10, Z+2	; 0x02
    3fe2:	b3 80       	ldd	r11, Z+3	; 0x03
    3fe4:	80 92 83 24 	sts	0x2483, r8	; 0x802483 <IACC>
    3fe8:	90 92 84 24 	sts	0x2484, r9	; 0x802484 <IACC+0x1>
    3fec:	a0 92 85 24 	sts	0x2485, r10	; 0x802485 <IACC+0x2>
    3ff0:	b0 92 86 24 	sts	0x2486, r11	; 0x802486 <IACC+0x3>
			IDEC=AxDEC[tempa];
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	ec 50       	subi	r30, 0x0C	; 12
    3ff8:	f9 4d       	sbci	r31, 0xD9	; 217
    3ffa:	c0 80       	ld	r12, Z
    3ffc:	d1 80       	ldd	r13, Z+1	; 0x01
    3ffe:	e2 80       	ldd	r14, Z+2	; 0x02
    4000:	f3 80       	ldd	r15, Z+3	; 0x03
    4002:	c0 92 7f 24 	sts	0x247F, r12	; 0x80247f <IDEC>
    4006:	d0 92 80 24 	sts	0x2480, r13	; 0x802480 <IDEC+0x1>
    400a:	e0 92 81 24 	sts	0x2481, r14	; 0x802481 <IDEC+0x2>
    400e:	f0 92 82 24 	sts	0x2482, r15	; 0x802482 <IDEC+0x3>
			MaxDistanceToGo=labs(AxisPosition[tempa]-SetJog[tempa]);
    4012:	fc 01       	movw	r30, r24
    4014:	ec 5d       	subi	r30, 0xDC	; 220
    4016:	f8 4d       	sbci	r31, 0xD8	; 216
    4018:	dc 01       	movw	r26, r24
    401a:	a0 5d       	subi	r26, 0xD0	; 208
    401c:	b8 4d       	sbci	r27, 0xD8	; 216
    401e:	40 81       	ld	r20, Z
    4020:	51 81       	ldd	r21, Z+1	; 0x01
    4022:	62 81       	ldd	r22, Z+2	; 0x02
    4024:	73 81       	ldd	r23, Z+3	; 0x03
    4026:	8d 91       	ld	r24, X+
    4028:	9d 91       	ld	r25, X+
    402a:	0d 90       	ld	r0, X+
    402c:	bc 91       	ld	r27, X
    402e:	a0 2d       	mov	r26, r0
    4030:	48 1b       	sub	r20, r24
    4032:	59 0b       	sbc	r21, r25
    4034:	6a 0b       	sbc	r22, r26
    4036:	7b 0b       	sbc	r23, r27
    4038:	db 01       	movw	r26, r22
    403a:	ca 01       	movw	r24, r20
    403c:	3a f4       	brpl	.+14     	; 0x404c <__stack+0x4d>
    403e:	88 27       	eor	r24, r24
    4040:	99 27       	eor	r25, r25
    4042:	dc 01       	movw	r26, r24
    4044:	84 1b       	sub	r24, r20
    4046:	95 0b       	sbc	r25, r21
    4048:	a6 0b       	sbc	r26, r22
    404a:	b7 0b       	sbc	r27, r23
    404c:	28 2e       	mov	r2, r24
    404e:	39 2e       	mov	r3, r25
    4050:	ab 87       	std	Y+11, r26	; 0x0b
    4052:	b9 87       	std	Y+9, r27	; 0x09
    4054:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    4058:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    405c:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    4060:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
			Ma[tempa]=1000;
    4064:	f8 01       	movw	r30, r16
    4066:	ee 0f       	add	r30, r30
    4068:	ff 1f       	adc	r31, r31
    406a:	ee 51       	subi	r30, 0x1E	; 30
    406c:	f9 4d       	sbci	r31, 0xD9	; 217
    406e:	88 ee       	ldi	r24, 0xE8	; 232
    4070:	93 e0       	ldi	r25, 0x03	; 3
    4072:	80 83       	st	Z, r24
    4074:	91 83       	std	Z+1, r25	; 0x01
			CurSpeedFrq=0;
    4076:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    407a:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    407e:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    4082:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    4086:	e0 e0       	ldi	r30, 0x00	; 0
    4088:	f8 e0       	ldi	r31, 0x08	; 8
    408a:	8f ef       	ldi	r24, 0xFF	; 255
    408c:	9f ef       	ldi	r25, 0xFF	; 255
    408e:	80 a7       	std	Z+40, r24	; 0x28
    4090:	91 a7       	std	Z+41, r25	; 0x29
			
			CurSpeedFrq=0;
			TCC0.CCA=0xFFFF;
    4092:	80 a7       	std	Z+40, r24	; 0x28
    4094:	91 a7       	std	Z+41, r25	; 0x29
			if(IACC>0)
    4096:	18 14       	cp	r1, r8
    4098:	19 04       	cpc	r1, r9
    409a:	1a 04       	cpc	r1, r10
    409c:	1b 04       	cpc	r1, r11
    409e:	54 f5       	brge	.+84     	; 0x40f4 <__stack+0xf5>
			{
				ACCSpeedINT = (long int) (100 * (float)((float)MaxSpeed / (float)IACC));// t = V/a
				ACCSpeedINT = (long int)(MaxSpeed / ACCSpeedINT);
    40a0:	c3 01       	movw	r24, r6
    40a2:	b2 01       	movw	r22, r4
    40a4:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    40a8:	69 83       	std	Y+1, r22	; 0x01
    40aa:	7a 83       	std	Y+2, r23	; 0x02
    40ac:	8b 83       	std	Y+3, r24	; 0x03
    40ae:	9c 83       	std	Y+4, r25	; 0x04
    40b0:	c5 01       	movw	r24, r10
    40b2:	b4 01       	movw	r22, r8
    40b4:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    40b8:	9b 01       	movw	r18, r22
    40ba:	ac 01       	movw	r20, r24
    40bc:	69 81       	ldd	r22, Y+1	; 0x01
    40be:	7a 81       	ldd	r23, Y+2	; 0x02
    40c0:	8b 81       	ldd	r24, Y+3	; 0x03
    40c2:	9c 81       	ldd	r25, Y+4	; 0x04
    40c4:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	48 ec       	ldi	r20, 0xC8	; 200
    40ce:	52 e4       	ldi	r21, 0x42	; 66
    40d0:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    40d4:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    40d8:	9b 01       	movw	r18, r22
    40da:	ac 01       	movw	r20, r24
    40dc:	c3 01       	movw	r24, r6
    40de:	b2 01       	movw	r22, r4
    40e0:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    40e4:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    40e8:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    40ec:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    40f0:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
			}
			if(IDEC>0)
    40f4:	1c 14       	cp	r1, r12
    40f6:	1d 04       	cpc	r1, r13
    40f8:	1e 04       	cpc	r1, r14
    40fa:	1f 04       	cpc	r1, r15
    40fc:	54 f5       	brge	.+84     	; 0x4152 <__stack+0x153>
			{
				DECSpeedINT = (long int)(100 * (float)((float)MaxSpeed / (float)IDEC));// t = V/a
				DECSpeedINT = (long int)(MaxSpeed / DECSpeedINT);
    40fe:	c3 01       	movw	r24, r6
    4100:	b2 01       	movw	r22, r4
    4102:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    4106:	69 83       	std	Y+1, r22	; 0x01
    4108:	7a 83       	std	Y+2, r23	; 0x02
    410a:	8b 83       	std	Y+3, r24	; 0x03
    410c:	9c 83       	std	Y+4, r25	; 0x04
    410e:	c7 01       	movw	r24, r14
    4110:	b6 01       	movw	r22, r12
    4112:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    4116:	9b 01       	movw	r18, r22
    4118:	ac 01       	movw	r20, r24
    411a:	69 81       	ldd	r22, Y+1	; 0x01
    411c:	7a 81       	ldd	r23, Y+2	; 0x02
    411e:	8b 81       	ldd	r24, Y+3	; 0x03
    4120:	9c 81       	ldd	r25, Y+4	; 0x04
    4122:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	48 ec       	ldi	r20, 0xC8	; 200
    412c:	52 e4       	ldi	r21, 0x42	; 66
    412e:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    4132:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    4136:	9b 01       	movw	r18, r22
    4138:	ac 01       	movw	r20, r24
    413a:	c3 01       	movw	r24, r6
    413c:	b2 01       	movw	r22, r4
    413e:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    4142:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    4146:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    414a:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    414e:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
			}
			
			DecDTG = pow(MaxSpeed,2)/(IDEC);
    4152:	c3 01       	movw	r24, r6
    4154:	b2 01       	movw	r22, r4
    4156:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    415a:	9b 01       	movw	r18, r22
    415c:	ac 01       	movw	r20, r24
    415e:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    4162:	69 83       	std	Y+1, r22	; 0x01
    4164:	7a 83       	std	Y+2, r23	; 0x02
    4166:	8b 83       	std	Y+3, r24	; 0x03
    4168:	9c 83       	std	Y+4, r25	; 0x04
    416a:	c7 01       	movw	r24, r14
    416c:	b6 01       	movw	r22, r12
    416e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    4172:	9b 01       	movw	r18, r22
    4174:	ac 01       	movw	r20, r24
    4176:	69 81       	ldd	r22, Y+1	; 0x01
    4178:	7a 81       	ldd	r23, Y+2	; 0x02
    417a:	8b 81       	ldd	r24, Y+3	; 0x03
    417c:	9c 81       	ldd	r25, Y+4	; 0x04
    417e:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    4182:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    4186:	60 93 8f 24 	sts	0x248F, r22	; 0x80248f <DecDTG>
    418a:	70 93 90 24 	sts	0x2490, r23	; 0x802490 <DecDTG+0x1>
    418e:	80 93 91 24 	sts	0x2491, r24	; 0x802491 <DecDTG+0x2>
    4192:	90 93 92 24 	sts	0x2492, r25	; 0x802492 <DecDTG+0x3>
			AccDTG = MaxDistanceToGo - pow(MaxSpeed,2)/(IACC);
    4196:	62 2d       	mov	r22, r2
    4198:	73 2d       	mov	r23, r3
    419a:	8b 85       	ldd	r24, Y+11	; 0x0b
    419c:	99 85       	ldd	r25, Y+9	; 0x09
    419e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    41a2:	6d 83       	std	Y+5, r22	; 0x05
    41a4:	7e 83       	std	Y+6, r23	; 0x06
    41a6:	8f 83       	std	Y+7, r24	; 0x07
    41a8:	98 87       	std	Y+8, r25	; 0x08
    41aa:	c5 01       	movw	r24, r10
    41ac:	b4 01       	movw	r22, r8
    41ae:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    41b2:	9b 01       	movw	r18, r22
    41b4:	ac 01       	movw	r20, r24
    41b6:	69 81       	ldd	r22, Y+1	; 0x01
    41b8:	7a 81       	ldd	r23, Y+2	; 0x02
    41ba:	8b 81       	ldd	r24, Y+3	; 0x03
    41bc:	9c 81       	ldd	r25, Y+4	; 0x04
    41be:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    41c2:	9b 01       	movw	r18, r22
    41c4:	ac 01       	movw	r20, r24
    41c6:	6d 81       	ldd	r22, Y+5	; 0x05
    41c8:	7e 81       	ldd	r23, Y+6	; 0x06
    41ca:	8f 81       	ldd	r24, Y+7	; 0x07
    41cc:	98 85       	ldd	r25, Y+8	; 0x08
    41ce:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    41d2:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    41d6:	60 93 93 24 	sts	0x2493, r22	; 0x802493 <AccDTG>
    41da:	70 93 94 24 	sts	0x2494, r23	; 0x802494 <AccDTG+0x1>
    41de:	80 93 95 24 	sts	0x2495, r24	; 0x802495 <AccDTG+0x2>
    41e2:	90 93 96 24 	sts	0x2496, r25	; 0x802496 <AccDTG+0x3>
			
			ACC=1;
    41e6:	11 e0       	ldi	r17, 0x01	; 1
    41e8:	10 93 6e 24 	sts	0x246E, r17	; 0x80246e <ACC>
			sprintf(BufferSend,"!30\tMaxS:%ld\tIACC:%ld\tIDEC:%ld\n\rMa1:%u\tMa2:%u\tBACC:%ld\tBDEC:%ld\tMAXDTG:%ld\n\r",MaxSpeed,IACC,IDEC,Ma[0],Ma[1],ACCSpeedINT,DECSpeedINT,MaxDistanceToGo);
    41ec:	09 85       	ldd	r16, Y+9	; 0x09
    41ee:	0f 93       	push	r16
    41f0:	0b 85       	ldd	r16, Y+11	; 0x0b
    41f2:	0f 93       	push	r16
    41f4:	3f 92       	push	r3
    41f6:	2f 92       	push	r2
    41f8:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <DECSpeedINT+0x3>
    41fc:	8f 93       	push	r24
    41fe:	80 91 71 24 	lds	r24, 0x2471	; 0x802471 <DECSpeedINT+0x2>
    4202:	8f 93       	push	r24
    4204:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <DECSpeedINT+0x1>
    4208:	8f 93       	push	r24
    420a:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <DECSpeedINT>
    420e:	8f 93       	push	r24
    4210:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <ACCSpeedINT+0x3>
    4214:	8f 93       	push	r24
    4216:	80 91 75 24 	lds	r24, 0x2475	; 0x802475 <ACCSpeedINT+0x2>
    421a:	8f 93       	push	r24
    421c:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <ACCSpeedINT+0x1>
    4220:	8f 93       	push	r24
    4222:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <ACCSpeedINT>
    4226:	8f 93       	push	r24
    4228:	e2 ee       	ldi	r30, 0xE2	; 226
    422a:	f6 e2       	ldi	r31, 0x26	; 38
    422c:	83 81       	ldd	r24, Z+3	; 0x03
    422e:	8f 93       	push	r24
    4230:	82 81       	ldd	r24, Z+2	; 0x02
    4232:	8f 93       	push	r24
    4234:	81 81       	ldd	r24, Z+1	; 0x01
    4236:	8f 93       	push	r24
    4238:	80 81       	ld	r24, Z
    423a:	8f 93       	push	r24
    423c:	ff 92       	push	r15
    423e:	ef 92       	push	r14
    4240:	df 92       	push	r13
    4242:	cf 92       	push	r12
    4244:	bf 92       	push	r11
    4246:	af 92       	push	r10
    4248:	9f 92       	push	r9
    424a:	8f 92       	push	r8
    424c:	7f 92       	push	r7
    424e:	6f 92       	push	r6
    4250:	5f 92       	push	r5
    4252:	4f 92       	push	r4
    4254:	84 e2       	ldi	r24, 0x24	; 36
    4256:	93 e2       	ldi	r25, 0x23	; 35
    4258:	9f 93       	push	r25
    425a:	8f 93       	push	r24
    425c:	89 e6       	ldi	r24, 0x69	; 105
    425e:	96 e2       	ldi	r25, 0x26	; 38
    4260:	9f 93       	push	r25
    4262:	8f 93       	push	r24
    4264:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
			Responsing=1;
    4268:	10 93 9c 25 	sts	0x259C, r17	; 0x80259c <Responsing>
			SetDataReady;
    426c:	e0 ea       	ldi	r30, 0xA0	; 160
    426e:	f6 e0       	ldi	r31, 0x06	; 6
    4270:	84 81       	ldd	r24, Z+4	; 0x04
    4272:	81 60       	ori	r24, 0x01	; 1
    4274:	84 83       	std	Z+4, r24	; 0x04
    4276:	cd bf       	out	0x3d, r28	; 61
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	ed c0       	rjmp	.+474    	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#4000",5)==0) //Stop Running Interpolation program , Stop All axis
    427c:	45 e0       	ldi	r20, 0x05	; 5
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	61 e7       	ldi	r22, 0x71	; 113
    4282:	73 e2       	ldi	r23, 0x23	; 35
    4284:	8d ea       	ldi	r24, 0xAD	; 173
    4286:	94 e2       	ldi	r25, 0x24	; 36
    4288:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    428c:	89 2b       	or	r24, r25
    428e:	11 f5       	brne	.+68     	; 0x42d4 <__stack+0x2d5>
	{
		ProgramRun=0;
    4290:	10 92 ca 24 	sts	0x24CA, r1	; 0x8024ca <ProgramRun>
		for (int gx = 0 ; gx < AxisNumber ; gx++)
		{
			DistanceToGo[gx] =0;
    4294:	e8 e1       	ldi	r30, 0x18	; 24
    4296:	f7 e2       	ldi	r31, 0x27	; 39
    4298:	10 82       	st	Z, r1
    429a:	11 82       	std	Z+1, r1	; 0x01
    429c:	12 82       	std	Z+2, r1	; 0x02
    429e:	13 82       	std	Z+3, r1	; 0x03
    42a0:	14 82       	std	Z+4, r1	; 0x04
    42a2:	15 82       	std	Z+5, r1	; 0x05
    42a4:	16 82       	std	Z+6, r1	; 0x06
    42a6:	17 82       	std	Z+7, r1	; 0x07
    42a8:	10 86       	std	Z+8, r1	; 0x08
    42aa:	11 86       	std	Z+9, r1	; 0x09
    42ac:	12 86       	std	Z+10, r1	; 0x0a
    42ae:	13 86       	std	Z+11, r1	; 0x0b
		}
		DO1_CLR; //Pen UP
    42b0:	e0 e0       	ldi	r30, 0x00	; 0
    42b2:	f7 e0       	ldi	r31, 0x07	; 7
    42b4:	84 81       	ldd	r24, Z+4	; 0x04
    42b6:	8b 7f       	andi	r24, 0xFB	; 251
    42b8:	84 83       	std	Z+4, r24	; 0x04
		sprintf(BufferSend,"!4000\r\n");
    42ba:	88 e0       	ldi	r24, 0x08	; 8
    42bc:	e7 e7       	ldi	r30, 0x77	; 119
    42be:	f3 e2       	ldi	r31, 0x23	; 35
    42c0:	a9 e6       	ldi	r26, 0x69	; 105
    42c2:	b6 e2       	ldi	r27, 0x26	; 38
    42c4:	01 90       	ld	r0, Z+
    42c6:	0d 92       	st	X+, r0
    42c8:	8a 95       	dec	r24
    42ca:	e1 f7       	brne	.-8      	; 0x42c4 <__stack+0x2c5>
		Responsing=1;
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
    42d2:	c1 c0       	rjmp	.+386    	; 0x4456 <__stack+0x457>
		//}
	}
	else if(strncmp(cmdTemp,"#4100",5)==0) //pause the axis in moving interplation
    42d4:	45 e0       	ldi	r20, 0x05	; 5
    42d6:	50 e0       	ldi	r21, 0x00	; 0
    42d8:	6f e7       	ldi	r22, 0x7F	; 127
    42da:	73 e2       	ldi	r23, 0x23	; 35
    42dc:	8d ea       	ldi	r24, 0xAD	; 173
    42de:	94 e2       	ldi	r25, 0x24	; 36
    42e0:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    42e4:	89 2b       	or	r24, r25
    42e6:	11 f5       	brne	.+68     	; 0x432c <__stack+0x32d>
	{
		if(ProgramRun)
    42e8:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    42ec:	88 23       	and	r24, r24
    42ee:	09 f4       	brne	.+2      	; 0x42f2 <__stack+0x2f3>
    42f0:	b2 c0       	rjmp	.+356    	; 0x4456 <__stack+0x457>
		{
			IsPause=1;
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	80 93 52 24 	sts	0x2452, r24	; 0x802452 <IsPause>
			for (int gx = 0 ; gx < AxisNumber ; gx++)
			{
				DistanceToGo[gx] =0;
    42f8:	e8 e1       	ldi	r30, 0x18	; 24
    42fa:	f7 e2       	ldi	r31, 0x27	; 39
    42fc:	10 82       	st	Z, r1
    42fe:	11 82       	std	Z+1, r1	; 0x01
    4300:	12 82       	std	Z+2, r1	; 0x02
    4302:	13 82       	std	Z+3, r1	; 0x03
    4304:	14 82       	std	Z+4, r1	; 0x04
    4306:	15 82       	std	Z+5, r1	; 0x05
    4308:	16 82       	std	Z+6, r1	; 0x06
    430a:	17 82       	std	Z+7, r1	; 0x07
    430c:	10 86       	std	Z+8, r1	; 0x08
    430e:	11 86       	std	Z+9, r1	; 0x09
    4310:	12 86       	std	Z+10, r1	; 0x0a
    4312:	13 86       	std	Z+11, r1	; 0x0b
				//TODO : it should be implemented
			}
			sprintf(BufferSend,"!4100\r\n");
    4314:	98 e0       	ldi	r25, 0x08	; 8
    4316:	e5 e8       	ldi	r30, 0x85	; 133
    4318:	f3 e2       	ldi	r31, 0x23	; 35
    431a:	a9 e6       	ldi	r26, 0x69	; 105
    431c:	b6 e2       	ldi	r27, 0x26	; 38
    431e:	01 90       	ld	r0, Z+
    4320:	0d 92       	st	X+, r0
    4322:	9a 95       	dec	r25
    4324:	e1 f7       	brne	.-8      	; 0x431e <__stack+0x31f>
			Responsing=1;
    4326:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
    432a:	95 c0       	rjmp	.+298    	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#9800",5)==0)
    432c:	45 e0       	ldi	r20, 0x05	; 5
    432e:	50 e0       	ldi	r21, 0x00	; 0
    4330:	6d e8       	ldi	r22, 0x8D	; 141
    4332:	73 e2       	ldi	r23, 0x23	; 35
    4334:	8d ea       	ldi	r24, 0xAD	; 173
    4336:	94 e2       	ldi	r25, 0x24	; 36
    4338:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    433c:	89 2b       	or	r24, r25
    433e:	a9 f5       	brne	.+106    	; 0x43aa <__stack+0x3ab>
	{
		if (!ProgramRun)//wait until all axis stopped
    4340:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    4344:	81 11       	cpse	r24, r1
    4346:	27 c0       	rjmp	.+78     	; 0x4396 <__stack+0x397>
		{
			printf("Get Run Command\r\n");
    4348:	83 e9       	ldi	r24, 0x93	; 147
    434a:	93 e2       	ldi	r25, 0x23	; 35
    434c:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
			while (IsAnyAxisMoving() == 1);
    4350:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    4354:	81 30       	cpi	r24, 0x01	; 1
    4356:	f1 f3       	breq	.-4      	; 0x4354 <__stack+0x355>
	    	ContinuousRead = 0;
    4358:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
			PRGEXEindex = 0;
    435c:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <PRGEXEindex>
    4360:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <PRGEXEindex+0x1>
			ProgramRun = 1;
    4364:	31 e0       	ldi	r19, 0x01	; 1
    4366:	30 93 ca 24 	sts	0x24CA, r19	; 0x8024ca <ProgramRun>
			printf("Program is running\r\n");
    436a:	84 ea       	ldi	r24, 0xA4	; 164
    436c:	93 e2       	ldi	r25, 0x23	; 35
    436e:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
			sprintf(BufferSend,"!9800\r\n");
    4372:	88 e0       	ldi	r24, 0x08	; 8
    4374:	e8 eb       	ldi	r30, 0xB8	; 184
    4376:	f3 e2       	ldi	r31, 0x23	; 35
    4378:	a9 e6       	ldi	r26, 0x69	; 105
    437a:	b6 e2       	ldi	r27, 0x26	; 38
    437c:	01 90       	ld	r0, Z+
    437e:	0d 92       	st	X+, r0
    4380:	8a 95       	dec	r24
    4382:	e1 f7       	brne	.-8      	; 0x437c <__stack+0x37d>
			Responsing=1;
    4384:	41 e0       	ldi	r20, 0x01	; 1
    4386:	40 93 9c 25 	sts	0x259C, r20	; 0x80259c <Responsing>
			SetDataReady;
    438a:	e0 ea       	ldi	r30, 0xA0	; 160
    438c:	f6 e0       	ldi	r31, 0x06	; 6
    438e:	84 81       	ldd	r24, Z+4	; 0x04
    4390:	81 60       	ori	r24, 0x01	; 1
    4392:	84 83       	std	Z+4, r24	; 0x04
    4394:	60 c0       	rjmp	.+192    	; 0x4456 <__stack+0x457>
		}
		else if(IsPause==1)
    4396:	80 91 52 24 	lds	r24, 0x2452	; 0x802452 <IsPause>
    439a:	81 30       	cpi	r24, 0x01	; 1
    439c:	09 f0       	breq	.+2      	; 0x43a0 <__stack+0x3a1>
    439e:	5b c0       	rjmp	.+182    	; 0x4456 <__stack+0x457>
		{
			PRGExe();
    43a0:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z6PRGExev>
			IsPause=0;
    43a4:	10 92 52 24 	sts	0x2452, r1	; 0x802452 <IsPause>
    43a8:	56 c0       	rjmp	.+172    	; 0x4456 <__stack+0x457>
		}
	}
	else if(strncmp(cmdTemp,"#9900",5)==0) //
    43aa:	45 e0       	ldi	r20, 0x05	; 5
    43ac:	50 e0       	ldi	r21, 0x00	; 0
    43ae:	60 ec       	ldi	r22, 0xC0	; 192
    43b0:	73 e2       	ldi	r23, 0x23	; 35
    43b2:	8d ea       	ldi	r24, 0xAD	; 173
    43b4:	94 e2       	ldi	r25, 0x24	; 36
    43b6:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <strncmp>
    43ba:	89 2b       	or	r24, r25
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <__stack+0x3c1>
    43be:	46 c0       	rjmp	.+140    	; 0x444c <__stack+0x44d>
	{
		ContinuousRead=0;
    43c0:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <ContinuousRead>
		readRam();
    43c4:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
		readRam();
    43c8:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
		readRam();
    43cc:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
		sprintf(BufferSend,"!9800\r\nPL:%u\tMD:%u\tMv1:%ld\tMaxDTG:%ld\tMaxSpeed:%ld\tACCDTG:%ld\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode,CMDPRGlist.Move[0],CMDPRGlist.MaxDistanceToGo,CMDPRGlist.MaxSpeed,CMDPRGlist.ACCDTG);
    43d0:	ec e4       	ldi	r30, 0x4C	; 76
    43d2:	f5 e2       	ldi	r31, 0x25	; 37
    43d4:	83 a9       	ldd	r24, Z+51	; 0x33
    43d6:	8f 93       	push	r24
    43d8:	82 a9       	ldd	r24, Z+50	; 0x32
    43da:	8f 93       	push	r24
    43dc:	81 a9       	ldd	r24, Z+49	; 0x31
    43de:	8f 93       	push	r24
    43e0:	80 a9       	ldd	r24, Z+48	; 0x30
    43e2:	8f 93       	push	r24
    43e4:	83 a1       	ldd	r24, Z+35	; 0x23
    43e6:	8f 93       	push	r24
    43e8:	82 a1       	ldd	r24, Z+34	; 0x22
    43ea:	8f 93       	push	r24
    43ec:	81 a1       	ldd	r24, Z+33	; 0x21
    43ee:	8f 93       	push	r24
    43f0:	80 a1       	ldd	r24, Z+32	; 0x20
    43f2:	8f 93       	push	r24
    43f4:	87 a1       	ldd	r24, Z+39	; 0x27
    43f6:	8f 93       	push	r24
    43f8:	86 a1       	ldd	r24, Z+38	; 0x26
    43fa:	8f 93       	push	r24
    43fc:	85 a1       	ldd	r24, Z+37	; 0x25
    43fe:	8f 93       	push	r24
    4400:	84 a1       	ldd	r24, Z+36	; 0x24
    4402:	8f 93       	push	r24
    4404:	80 85       	ldd	r24, Z+8	; 0x08
    4406:	8f 93       	push	r24
    4408:	87 81       	ldd	r24, Z+7	; 0x07
    440a:	8f 93       	push	r24
    440c:	86 81       	ldd	r24, Z+6	; 0x06
    440e:	8f 93       	push	r24
    4410:	85 81       	ldd	r24, Z+5	; 0x05
    4412:	8f 93       	push	r24
    4414:	83 81       	ldd	r24, Z+3	; 0x03
    4416:	1f 92       	push	r1
    4418:	8f 93       	push	r24
    441a:	81 81       	ldd	r24, Z+1	; 0x01
    441c:	8f 93       	push	r24
    441e:	80 81       	ld	r24, Z
    4420:	8f 93       	push	r24
    4422:	86 ec       	ldi	r24, 0xC6	; 198
    4424:	93 e2       	ldi	r25, 0x23	; 35
    4426:	9f 93       	push	r25
    4428:	8f 93       	push	r24
    442a:	89 e6       	ldi	r24, 0x69	; 105
    442c:	96 e2       	ldi	r25, 0x26	; 38
    442e:	9f 93       	push	r25
    4430:	8f 93       	push	r24
    4432:	0e 94 92 2b 	call	0x5724	; 0x5724 <sprintf>
		Responsing=1;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
		SetDataReady;
    443c:	e0 ea       	ldi	r30, 0xA0	; 160
    443e:	f6 e0       	ldi	r31, 0x06	; 6
    4440:	84 81       	ldd	r24, Z+4	; 0x04
    4442:	81 60       	ori	r24, 0x01	; 1
    4444:	84 83       	std	Z+4, r24	; 0x04
    4446:	cd bf       	out	0x3d, r28	; 61
    4448:	de bf       	out	0x3e, r29	; 62
    444a:	05 c0       	rjmp	.+10     	; 0x4456 <__stack+0x457>
	}
	else
	{
		ClrDataReady;
    444c:	e0 ea       	ldi	r30, 0xA0	; 160
    444e:	f6 e0       	ldi	r31, 0x06	; 6
    4450:	84 81       	ldd	r24, Z+4	; 0x04
    4452:	8e 7f       	andi	r24, 0xFE	; 254
    4454:	84 83       	std	Z+4, r24	; 0x04
	}
}
    4456:	2b 96       	adiw	r28, 0x0b	; 11
    4458:	cd bf       	out	0x3d, r28	; 61
    445a:	de bf       	out	0x3e, r29	; 62
    445c:	df 91       	pop	r29
    445e:	cf 91       	pop	r28
    4460:	1f 91       	pop	r17
    4462:	0f 91       	pop	r16
    4464:	ff 90       	pop	r15
    4466:	ef 90       	pop	r14
    4468:	df 90       	pop	r13
    446a:	cf 90       	pop	r12
    446c:	bf 90       	pop	r11
    446e:	af 90       	pop	r10
    4470:	9f 90       	pop	r9
    4472:	8f 90       	pop	r8
    4474:	7f 90       	pop	r7
    4476:	6f 90       	pop	r6
    4478:	5f 90       	pop	r5
    447a:	4f 90       	pop	r4
    447c:	3f 90       	pop	r3
    447e:	2f 90       	pop	r2
    4480:	08 95       	ret

00004482 <_Z18system_clocks_initv>:


void system_clocks_init(void) // System Clocks initialization
{
	unsigned char n,s;
	s = SREG;
    4482:	9f b7       	in	r25, 0x3f	; 63
	asm("cli");
    4484:	f8 94       	cli
	OSC.CTRL|=OSC_RC32KEN_bm;
    4486:	e0 e5       	ldi	r30, 0x50	; 80
    4488:	f0 e0       	ldi	r31, 0x00	; 0
    448a:	80 81       	ld	r24, Z
    448c:	84 60       	ori	r24, 0x04	; 4
    448e:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
    4490:	81 81       	ldd	r24, Z+1	; 0x01
    4492:	82 ff       	sbrs	r24, 2
    4494:	fd cf       	rjmp	.-6      	; 0x4490 <_Z18system_clocks_initv+0xe>
	OSC.CTRL|=OSC_RC32MEN_bm;
    4496:	e0 e5       	ldi	r30, 0x50	; 80
    4498:	f0 e0       	ldi	r31, 0x00	; 0
    449a:	80 81       	ld	r24, Z
    449c:	82 60       	ori	r24, 0x02	; 2
    449e:	80 83       	st	Z, r24
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    44a0:	a0 e4       	ldi	r26, 0x40	; 64
    44a2:	b0 e0       	ldi	r27, 0x00	; 0
    44a4:	11 96       	adiw	r26, 0x01	; 1
    44a6:	8c 91       	ld	r24, X
    44a8:	11 97       	sbiw	r26, 0x01	; 1
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
    44aa:	80 78       	andi	r24, 0x80	; 128
	CCP=CCP_IOREG_gc;
    44ac:	28 ed       	ldi	r18, 0xD8	; 216
    44ae:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
    44b0:	11 96       	adiw	r26, 0x01	; 1
    44b2:	8c 93       	st	X, r24
	OSC.DFLLCTRL&= ~(OSC_RC32MCREF_bm | OSC_RC2MCREF_bm);
    44b4:	86 81       	ldd	r24, Z+6	; 0x06
    44b6:	8c 7f       	andi	r24, 0xFC	; 252
    44b8:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
    44ba:	e0 e6       	ldi	r30, 0x60	; 96
    44bc:	f0 e0       	ldi	r31, 0x00	; 0
    44be:	80 81       	ld	r24, Z
    44c0:	81 60       	ori	r24, 0x01	; 1
    44c2:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
    44c4:	e0 e5       	ldi	r30, 0x50	; 80
    44c6:	f0 e0       	ldi	r31, 0x00	; 0
    44c8:	81 81       	ldd	r24, Z+1	; 0x01
    44ca:	81 ff       	sbrs	r24, 1
    44cc:	fd cf       	rjmp	.-6      	; 0x44c8 <_Z18system_clocks_initv+0x46>
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
    44ce:	e0 e4       	ldi	r30, 0x40	; 64
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	80 81       	ld	r24, Z
    44d4:	88 7f       	andi	r24, 0xF8	; 248
    44d6:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
    44d8:	28 ed       	ldi	r18, 0xD8	; 216
    44da:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
    44dc:	80 83       	st	Z, r24
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    44de:	e0 e5       	ldi	r30, 0x50	; 80
    44e0:	f0 e0       	ldi	r31, 0x00	; 0
    44e2:	80 81       	ld	r24, Z
    44e4:	86 7e       	andi	r24, 0xE6	; 230
    44e6:	80 83       	st	Z, r24
	PORTCFG.CLKEVOUT&= ~PORTCFG_CLKOUT_gm;
    44e8:	e0 eb       	ldi	r30, 0xB0	; 176
    44ea:	f0 e0       	ldi	r31, 0x00	; 0
    44ec:	84 81       	ldd	r24, Z+4	; 0x04
    44ee:	8c 7f       	andi	r24, 0xFC	; 252
    44f0:	84 83       	std	Z+4, r24	; 0x04
	SREG = s;
    44f2:	9f bf       	out	0x3f, r25	; 63
    44f4:	08 95       	ret

000044f6 <__vector_96>:
}

// PORTH interrupt 0 service routine
// JOG Interrupt routine for positive direction
ISR (PORTH_INT0_vect)
{
    44f6:	1f 92       	push	r1
    44f8:	0f 92       	push	r0
    44fa:	0f b6       	in	r0, 0x3f	; 63
    44fc:	0f 92       	push	r0
    44fe:	11 24       	eor	r1, r1
    4500:	08 b6       	in	r0, 0x38	; 56
    4502:	0f 92       	push	r0
    4504:	18 be       	out	0x38, r1	; 56
    4506:	09 b6       	in	r0, 0x39	; 57
    4508:	0f 92       	push	r0
    450a:	19 be       	out	0x39, r1	; 57
    450c:	0a b6       	in	r0, 0x3a	; 58
    450e:	0f 92       	push	r0
    4510:	1a be       	out	0x3a, r1	; 58
    4512:	0b b6       	in	r0, 0x3b	; 59
    4514:	0f 92       	push	r0
    4516:	1b be       	out	0x3b, r1	; 59
    4518:	4f 92       	push	r4
    451a:	5f 92       	push	r5
    451c:	6f 92       	push	r6
    451e:	7f 92       	push	r7
    4520:	8f 92       	push	r8
    4522:	9f 92       	push	r9
    4524:	af 92       	push	r10
    4526:	bf 92       	push	r11
    4528:	cf 92       	push	r12
    452a:	df 92       	push	r13
    452c:	ef 92       	push	r14
    452e:	ff 92       	push	r15
    4530:	2f 93       	push	r18
    4532:	3f 93       	push	r19
    4534:	4f 93       	push	r20
    4536:	5f 93       	push	r21
    4538:	6f 93       	push	r22
    453a:	7f 93       	push	r23
    453c:	8f 93       	push	r24
    453e:	9f 93       	push	r25
    4540:	af 93       	push	r26
    4542:	bf 93       	push	r27
    4544:	ef 93       	push	r30
    4546:	ff 93       	push	r31
    4548:	cf 93       	push	r28
    454a:	df 93       	push	r29
    454c:	00 d0       	rcall	.+0      	; 0x454e <__vector_96+0x58>
    454e:	00 d0       	rcall	.+0      	; 0x4550 <__vector_96+0x5a>
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
	if(JogPosInput)
    4554:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4558:	81 ff       	sbrs	r24, 1
    455a:	e5 c0       	rjmp	.+458    	; 0x4726 <__vector_96+0x230>
	{
		printf("Jog+\r\n");
    455c:	86 e0       	ldi	r24, 0x06	; 6
    455e:	94 e2       	ldi	r25, 0x24	; 36
    4560:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
		if(!JogNegInput)
    4564:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4568:	83 fd       	sbrc	r24, 3
    456a:	11 c1       	rjmp	.+546    	; 0x478e <__vector_96+0x298>
		{
			MaxSpeed=10000;
    456c:	80 e1       	ldi	r24, 0x10	; 16
    456e:	97 e2       	ldi	r25, 0x27	; 39
    4570:	a0 e0       	ldi	r26, 0x00	; 0
    4572:	b0 e0       	ldi	r27, 0x00	; 0
    4574:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    4578:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    457c:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    4580:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
			IACC=5000;
    4584:	88 e8       	ldi	r24, 0x88	; 136
    4586:	93 e1       	ldi	r25, 0x13	; 19
    4588:	a0 e0       	ldi	r26, 0x00	; 0
    458a:	b0 e0       	ldi	r27, 0x00	; 0
    458c:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <IACC>
    4590:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <IACC+0x1>
    4594:	a0 93 85 24 	sts	0x2485, r26	; 0x802485 <IACC+0x2>
    4598:	b0 93 86 24 	sts	0x2486, r27	; 0x802486 <IACC+0x3>
			IDEC=5000;
    459c:	80 93 7f 24 	sts	0x247F, r24	; 0x80247f <IDEC>
    45a0:	90 93 80 24 	sts	0x2480, r25	; 0x802480 <IDEC+0x1>
    45a4:	a0 93 81 24 	sts	0x2481, r26	; 0x802481 <IDEC+0x2>
    45a8:	b0 93 82 24 	sts	0x2482, r27	; 0x802482 <IDEC+0x3>
			CurSpeedFrq=0;
    45ac:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    45b0:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    45b4:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    45b8:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    45bc:	8f ef       	ldi	r24, 0xFF	; 255
    45be:	9f ef       	ldi	r25, 0xFF	; 255
    45c0:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    45c4:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			//ACCSpeedINT = MaxSpeed / ACCSpeedINT;
			//
			//DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			//DECSpeedINT= MaxSpeed / DECSpeedINT;

			if(!LIM_POS1 && Axes[SelectedAxis].HardwareLimitPosIsActive)
    45c8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    45cc:	83 fd       	sbrc	r24, 3
    45ce:	0f c0       	rjmp	.+30     	; 0x45ee <__vector_96+0xf8>
    45d0:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <SelectedAxis>
    45d4:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <SelectedAxis+0x1>
    45d8:	2b e2       	ldi	r18, 0x2B	; 43
    45da:	28 9f       	mul	r18, r24
    45dc:	f0 01       	movw	r30, r0
    45de:	29 9f       	mul	r18, r25
    45e0:	f0 0d       	add	r31, r0
    45e2:	11 24       	eor	r1, r1
    45e4:	e5 53       	subi	r30, 0x35	; 53
    45e6:	fb 4d       	sbci	r31, 0xDB	; 219
    45e8:	21 a5       	ldd	r18, Z+41	; 0x29
    45ea:	21 11       	cpse	r18, r1
    45ec:	bb c0       	rjmp	.+374    	; 0x4764 <__vector_96+0x26e>
				MaxSpeed=Axes[SelectedAxis].MaxSpeed;
				
			IACC=Axes[SelectedAxis].ACC;
    45ee:	20 91 66 24 	lds	r18, 0x2466	; 0x802466 <SelectedAxis>
    45f2:	30 91 67 24 	lds	r19, 0x2467	; 0x802467 <SelectedAxis+0x1>
    45f6:	2d 83       	std	Y+5, r18	; 0x05
    45f8:	3e 83       	std	Y+6, r19	; 0x06
    45fa:	8b e2       	ldi	r24, 0x2B	; 43
    45fc:	82 9f       	mul	r24, r18
    45fe:	f0 01       	movw	r30, r0
    4600:	83 9f       	mul	r24, r19
    4602:	f0 0d       	add	r31, r0
    4604:	11 24       	eor	r1, r1
    4606:	e5 53       	subi	r30, 0x35	; 53
    4608:	fb 4d       	sbci	r31, 0xDB	; 219
    460a:	41 84       	ldd	r4, Z+9	; 0x09
    460c:	52 84       	ldd	r5, Z+10	; 0x0a
    460e:	63 84       	ldd	r6, Z+11	; 0x0b
    4610:	74 84       	ldd	r7, Z+12	; 0x0c
    4612:	40 92 83 24 	sts	0x2483, r4	; 0x802483 <IACC>
    4616:	50 92 84 24 	sts	0x2484, r5	; 0x802484 <IACC+0x1>
    461a:	60 92 85 24 	sts	0x2485, r6	; 0x802485 <IACC+0x2>
    461e:	70 92 86 24 	sts	0x2486, r7	; 0x802486 <IACC+0x3>
			IDEC=Axes[SelectedAxis].DEC;
    4622:	85 84       	ldd	r8, Z+13	; 0x0d
    4624:	96 84       	ldd	r9, Z+14	; 0x0e
    4626:	a7 84       	ldd	r10, Z+15	; 0x0f
    4628:	b0 88       	ldd	r11, Z+16	; 0x10
    462a:	80 92 7f 24 	sts	0x247F, r8	; 0x80247f <IDEC>
    462e:	90 92 80 24 	sts	0x2480, r9	; 0x802480 <IDEC+0x1>
    4632:	a0 92 81 24 	sts	0x2481, r10	; 0x802481 <IDEC+0x2>
    4636:	b0 92 82 24 	sts	0x2482, r11	; 0x802482 <IDEC+0x3>
					
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    463a:	c0 90 87 24 	lds	r12, 0x2487	; 0x802487 <MaxSpeed>
    463e:	d0 90 88 24 	lds	r13, 0x2488	; 0x802488 <MaxSpeed+0x1>
    4642:	e0 90 89 24 	lds	r14, 0x2489	; 0x802489 <MaxSpeed+0x2>
    4646:	f0 90 8a 24 	lds	r15, 0x248A	; 0x80248a <MaxSpeed+0x3>
    464a:	c7 01       	movw	r24, r14
    464c:	b6 01       	movw	r22, r12
    464e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	48 ec       	ldi	r20, 0xC8	; 200
    4658:	52 e4       	ldi	r21, 0x42	; 66
    465a:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    465e:	69 83       	std	Y+1, r22	; 0x01
    4660:	7a 83       	std	Y+2, r23	; 0x02
    4662:	8b 83       	std	Y+3, r24	; 0x03
    4664:	9c 83       	std	Y+4, r25	; 0x04
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    4666:	c3 01       	movw	r24, r6
    4668:	b2 01       	movw	r22, r4
    466a:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    466e:	9b 01       	movw	r18, r22
    4670:	ac 01       	movw	r20, r24
    4672:	69 81       	ldd	r22, Y+1	; 0x01
    4674:	7a 81       	ldd	r23, Y+2	; 0x02
    4676:	8b 81       	ldd	r24, Y+3	; 0x03
    4678:	9c 81       	ldd	r25, Y+4	; 0x04
    467a:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    467e:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    4682:	9b 01       	movw	r18, r22
    4684:	ac 01       	movw	r20, r24
    4686:	c7 01       	movw	r24, r14
    4688:	b6 01       	movw	r22, r12
    468a:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    468e:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    4692:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    4696:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    469a:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
					
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    469e:	c5 01       	movw	r24, r10
    46a0:	b4 01       	movw	r22, r8
    46a2:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    46a6:	9b 01       	movw	r18, r22
    46a8:	ac 01       	movw	r20, r24
    46aa:	69 81       	ldd	r22, Y+1	; 0x01
    46ac:	7a 81       	ldd	r23, Y+2	; 0x02
    46ae:	8b 81       	ldd	r24, Y+3	; 0x03
    46b0:	9c 81       	ldd	r25, Y+4	; 0x04
    46b2:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    46b6:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    46ba:	9b 01       	movw	r18, r22
    46bc:	ac 01       	movw	r20, r24
    46be:	c7 01       	movw	r24, r14
    46c0:	b6 01       	movw	r22, r12
    46c2:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    46c6:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    46ca:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    46ce:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    46d2:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
					
			SET_DIR1;
    46d6:	e0 e2       	ldi	r30, 0x20	; 32
    46d8:	f7 e0       	ldi	r31, 0x07	; 7
    46da:	84 81       	ldd	r24, Z+4	; 0x04
    46dc:	80 61       	ori	r24, 0x10	; 16
    46de:	84 83       	std	Z+4, r24	; 0x04
			FreeJog=SelectedAxis;
    46e0:	8d 81       	ldd	r24, Y+5	; 0x05
    46e2:	9e 81       	ldd	r25, Y+6	; 0x06
    46e4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <FreeJog>
    46e8:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <FreeJog+0x1>
			Ma[SelectedAxis] = 1000;
    46ec:	fc 01       	movw	r30, r24
    46ee:	ee 0f       	add	r30, r30
    46f0:	ff 1f       	adc	r31, r31
    46f2:	ee 51       	subi	r30, 0x1E	; 30
    46f4:	f9 4d       	sbci	r31, 0xD9	; 217
    46f6:	88 ee       	ldi	r24, 0xE8	; 232
    46f8:	93 e0       	ldi	r25, 0x03	; 3
    46fa:	80 83       	st	Z, r24
    46fc:	91 83       	std	Z+1, r25	; 0x01
			DistanceToGo[SelectedAxis] = 0x7FFFFFFF;
    46fe:	ed 81       	ldd	r30, Y+5	; 0x05
    4700:	fe 81       	ldd	r31, Y+6	; 0x06
    4702:	ee 0f       	add	r30, r30
    4704:	ff 1f       	adc	r31, r31
    4706:	ee 0f       	add	r30, r30
    4708:	ff 1f       	adc	r31, r31
    470a:	e8 5e       	subi	r30, 0xE8	; 232
    470c:	f8 4d       	sbci	r31, 0xD8	; 216
    470e:	8f ef       	ldi	r24, 0xFF	; 255
    4710:	9f ef       	ldi	r25, 0xFF	; 255
    4712:	af ef       	ldi	r26, 0xFF	; 255
    4714:	bf e7       	ldi	r27, 0x7F	; 127
    4716:	80 83       	st	Z, r24
    4718:	91 83       	std	Z+1, r25	; 0x01
    471a:	a2 83       	std	Z+2, r26	; 0x02
    471c:	b3 83       	std	Z+3, r27	; 0x03
			
			ACC=1;
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <ACC>
    4724:	34 c0       	rjmp	.+104    	; 0x478e <__vector_96+0x298>
		}
	}
	else if((FreeJog == 0 && DIR1)||(FreeJog == 1 && DIR2)||(FreeJog == 2 && DIR3))
    4726:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <FreeJog>
    472a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <FreeJog+0x1>
    472e:	00 97       	sbiw	r24, 0x00	; 0
    4730:	29 f4       	brne	.+10     	; 0x473c <__vector_96+0x246>
    4732:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4736:	84 fd       	sbrc	r24, 4
    4738:	0f c0       	rjmp	.+30     	; 0x4758 <__vector_96+0x262>
    473a:	29 c0       	rjmp	.+82     	; 0x478e <__vector_96+0x298>
    473c:	81 30       	cpi	r24, 0x01	; 1
    473e:	91 05       	cpc	r25, r1
    4740:	29 f4       	brne	.+10     	; 0x474c <__vector_96+0x256>
    4742:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4746:	82 fd       	sbrc	r24, 2
    4748:	07 c0       	rjmp	.+14     	; 0x4758 <__vector_96+0x262>
    474a:	21 c0       	rjmp	.+66     	; 0x478e <__vector_96+0x298>
    474c:	02 97       	sbiw	r24, 0x02	; 2
    474e:	f9 f4       	brne	.+62     	; 0x478e <__vector_96+0x298>
    4750:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    4754:	80 ff       	sbrs	r24, 0
    4756:	1b c0       	rjmp	.+54     	; 0x478e <__vector_96+0x298>
	{
		ACC=0;
    4758:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
		DEC=1;
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	80 93 6d 24 	sts	0x246D, r24	; 0x80246d <DEC>
	}
}
    4762:	15 c0       	rjmp	.+42     	; 0x478e <__vector_96+0x298>
			//
			//DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			//DECSpeedINT= MaxSpeed / DECSpeedINT;

			if(!LIM_POS1 && Axes[SelectedAxis].HardwareLimitPosIsActive)
				MaxSpeed=Axes[SelectedAxis].MaxSpeed;
    4764:	2b e2       	ldi	r18, 0x2B	; 43
    4766:	28 9f       	mul	r18, r24
    4768:	f0 01       	movw	r30, r0
    476a:	29 9f       	mul	r18, r25
    476c:	f0 0d       	add	r31, r0
    476e:	11 24       	eor	r1, r1
    4770:	e5 53       	subi	r30, 0x35	; 53
    4772:	fb 4d       	sbci	r31, 0xDB	; 219
    4774:	85 81       	ldd	r24, Z+5	; 0x05
    4776:	96 81       	ldd	r25, Z+6	; 0x06
    4778:	a7 81       	ldd	r26, Z+7	; 0x07
    477a:	b0 85       	ldd	r27, Z+8	; 0x08
    477c:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    4780:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    4784:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    4788:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
    478c:	30 cf       	rjmp	.-416    	; 0x45ee <__vector_96+0xf8>
	else if((FreeJog == 0 && DIR1)||(FreeJog == 1 && DIR2)||(FreeJog == 2 && DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    478e:	26 96       	adiw	r28, 0x06	; 6
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	de bf       	out	0x3e, r29	; 62
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	ff 91       	pop	r31
    479a:	ef 91       	pop	r30
    479c:	bf 91       	pop	r27
    479e:	af 91       	pop	r26
    47a0:	9f 91       	pop	r25
    47a2:	8f 91       	pop	r24
    47a4:	7f 91       	pop	r23
    47a6:	6f 91       	pop	r22
    47a8:	5f 91       	pop	r21
    47aa:	4f 91       	pop	r20
    47ac:	3f 91       	pop	r19
    47ae:	2f 91       	pop	r18
    47b0:	ff 90       	pop	r15
    47b2:	ef 90       	pop	r14
    47b4:	df 90       	pop	r13
    47b6:	cf 90       	pop	r12
    47b8:	bf 90       	pop	r11
    47ba:	af 90       	pop	r10
    47bc:	9f 90       	pop	r9
    47be:	8f 90       	pop	r8
    47c0:	7f 90       	pop	r7
    47c2:	6f 90       	pop	r6
    47c4:	5f 90       	pop	r5
    47c6:	4f 90       	pop	r4
    47c8:	0f 90       	pop	r0
    47ca:	0b be       	out	0x3b, r0	; 59
    47cc:	0f 90       	pop	r0
    47ce:	0a be       	out	0x3a, r0	; 58
    47d0:	0f 90       	pop	r0
    47d2:	09 be       	out	0x39, r0	; 57
    47d4:	0f 90       	pop	r0
    47d6:	08 be       	out	0x38, r0	; 56
    47d8:	0f 90       	pop	r0
    47da:	0f be       	out	0x3f, r0	; 63
    47dc:	0f 90       	pop	r0
    47de:	1f 90       	pop	r1
    47e0:	18 95       	reti

000047e2 <__vector_64>:

// PORTH interrupt 0 service routine
// Interrupt for Negative jog key
ISR (PORTD_INT0_vect)
{
    47e2:	1f 92       	push	r1
    47e4:	0f 92       	push	r0
    47e6:	0f b6       	in	r0, 0x3f	; 63
    47e8:	0f 92       	push	r0
    47ea:	11 24       	eor	r1, r1
    47ec:	08 b6       	in	r0, 0x38	; 56
    47ee:	0f 92       	push	r0
    47f0:	18 be       	out	0x38, r1	; 56
    47f2:	09 b6       	in	r0, 0x39	; 57
    47f4:	0f 92       	push	r0
    47f6:	19 be       	out	0x39, r1	; 57
    47f8:	0a b6       	in	r0, 0x3a	; 58
    47fa:	0f 92       	push	r0
    47fc:	1a be       	out	0x3a, r1	; 58
    47fe:	0b b6       	in	r0, 0x3b	; 59
    4800:	0f 92       	push	r0
    4802:	1b be       	out	0x3b, r1	; 59
    4804:	4f 92       	push	r4
    4806:	5f 92       	push	r5
    4808:	6f 92       	push	r6
    480a:	7f 92       	push	r7
    480c:	8f 92       	push	r8
    480e:	9f 92       	push	r9
    4810:	af 92       	push	r10
    4812:	bf 92       	push	r11
    4814:	cf 92       	push	r12
    4816:	df 92       	push	r13
    4818:	ef 92       	push	r14
    481a:	ff 92       	push	r15
    481c:	2f 93       	push	r18
    481e:	3f 93       	push	r19
    4820:	4f 93       	push	r20
    4822:	5f 93       	push	r21
    4824:	6f 93       	push	r22
    4826:	7f 93       	push	r23
    4828:	8f 93       	push	r24
    482a:	9f 93       	push	r25
    482c:	af 93       	push	r26
    482e:	bf 93       	push	r27
    4830:	ef 93       	push	r30
    4832:	ff 93       	push	r31
    4834:	cf 93       	push	r28
    4836:	df 93       	push	r29
    4838:	00 d0       	rcall	.+0      	; 0x483a <__vector_64+0x58>
    483a:	00 d0       	rcall	.+0      	; 0x483c <__vector_64+0x5a>
    483c:	cd b7       	in	r28, 0x3d	; 61
    483e:	de b7       	in	r29, 0x3e	; 62
	if(JogNegInput)
    4840:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4844:	83 ff       	sbrs	r24, 3
    4846:	c1 c0       	rjmp	.+386    	; 0x49ca <__vector_64+0x1e8>
	{
		if(!JogPosInput)
    4848:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    484c:	81 fd       	sbrc	r24, 1
    484e:	f1 c0       	rjmp	.+482    	; 0x4a32 <__vector_64+0x250>
		{
			CurSpeedFrq=0;
    4850:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <CurSpeedFrq>
    4854:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <CurSpeedFrq+0x1>
    4858:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <CurSpeedFrq+0x2>
    485c:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <CurSpeedFrq+0x3>
			TCC0.CCA=0xFFFF;
    4860:	8f ef       	ldi	r24, 0xFF	; 255
    4862:	9f ef       	ldi	r25, 0xFF	; 255
    4864:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4868:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
			//ACCSpeedINT = MaxSpeed / ACCSpeedINT;
			//
			//DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			//DECSpeedINT= MaxSpeed / DECSpeedINT;

			if(!LIM_NEG1 && Axes[SelectedAxis].HardwareLimitNegIsActive)
    486c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    4870:	84 fd       	sbrc	r24, 4
    4872:	0f c0       	rjmp	.+30     	; 0x4892 <__vector_64+0xb0>
    4874:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <SelectedAxis>
    4878:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <SelectedAxis+0x1>
    487c:	2b e2       	ldi	r18, 0x2B	; 43
    487e:	28 9f       	mul	r18, r24
    4880:	f0 01       	movw	r30, r0
    4882:	29 9f       	mul	r18, r25
    4884:	f0 0d       	add	r31, r0
    4886:	11 24       	eor	r1, r1
    4888:	e5 53       	subi	r30, 0x35	; 53
    488a:	fb 4d       	sbci	r31, 0xDB	; 219
    488c:	22 a5       	ldd	r18, Z+42	; 0x2a
    488e:	21 11       	cpse	r18, r1
    4890:	bb c0       	rjmp	.+374    	; 0x4a08 <__vector_64+0x226>
				MaxSpeed=Axes[SelectedAxis].MaxSpeed;
				
			IACC=Axes[SelectedAxis].ACC;
    4892:	20 91 66 24 	lds	r18, 0x2466	; 0x802466 <SelectedAxis>
    4896:	30 91 67 24 	lds	r19, 0x2467	; 0x802467 <SelectedAxis+0x1>
    489a:	2d 83       	std	Y+5, r18	; 0x05
    489c:	3e 83       	std	Y+6, r19	; 0x06
    489e:	8b e2       	ldi	r24, 0x2B	; 43
    48a0:	82 9f       	mul	r24, r18
    48a2:	f0 01       	movw	r30, r0
    48a4:	83 9f       	mul	r24, r19
    48a6:	f0 0d       	add	r31, r0
    48a8:	11 24       	eor	r1, r1
    48aa:	e5 53       	subi	r30, 0x35	; 53
    48ac:	fb 4d       	sbci	r31, 0xDB	; 219
    48ae:	41 84       	ldd	r4, Z+9	; 0x09
    48b0:	52 84       	ldd	r5, Z+10	; 0x0a
    48b2:	63 84       	ldd	r6, Z+11	; 0x0b
    48b4:	74 84       	ldd	r7, Z+12	; 0x0c
    48b6:	40 92 83 24 	sts	0x2483, r4	; 0x802483 <IACC>
    48ba:	50 92 84 24 	sts	0x2484, r5	; 0x802484 <IACC+0x1>
    48be:	60 92 85 24 	sts	0x2485, r6	; 0x802485 <IACC+0x2>
    48c2:	70 92 86 24 	sts	0x2486, r7	; 0x802486 <IACC+0x3>
			IDEC=Axes[SelectedAxis].DEC;
    48c6:	85 84       	ldd	r8, Z+13	; 0x0d
    48c8:	96 84       	ldd	r9, Z+14	; 0x0e
    48ca:	a7 84       	ldd	r10, Z+15	; 0x0f
    48cc:	b0 88       	ldd	r11, Z+16	; 0x10
    48ce:	80 92 7f 24 	sts	0x247F, r8	; 0x80247f <IDEC>
    48d2:	90 92 80 24 	sts	0x2480, r9	; 0x802480 <IDEC+0x1>
    48d6:	a0 92 81 24 	sts	0x2481, r10	; 0x802481 <IDEC+0x2>
    48da:	b0 92 82 24 	sts	0x2482, r11	; 0x802482 <IDEC+0x3>
					
			ACCSpeedINT =(long int)(100 *(float)MaxSpeed/(float)IACC);// t = V/a
    48de:	c0 90 87 24 	lds	r12, 0x2487	; 0x802487 <MaxSpeed>
    48e2:	d0 90 88 24 	lds	r13, 0x2488	; 0x802488 <MaxSpeed+0x1>
    48e6:	e0 90 89 24 	lds	r14, 0x2489	; 0x802489 <MaxSpeed+0x2>
    48ea:	f0 90 8a 24 	lds	r15, 0x248A	; 0x80248a <MaxSpeed+0x3>
    48ee:	c7 01       	movw	r24, r14
    48f0:	b6 01       	movw	r22, r12
    48f2:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	48 ec       	ldi	r20, 0xC8	; 200
    48fc:	52 e4       	ldi	r21, 0x42	; 66
    48fe:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    4902:	69 83       	std	Y+1, r22	; 0x01
    4904:	7a 83       	std	Y+2, r23	; 0x02
    4906:	8b 83       	std	Y+3, r24	; 0x03
    4908:	9c 83       	std	Y+4, r25	; 0x04
			ACCSpeedINT = MaxSpeed / ACCSpeedINT;
    490a:	c3 01       	movw	r24, r6
    490c:	b2 01       	movw	r22, r4
    490e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    4912:	9b 01       	movw	r18, r22
    4914:	ac 01       	movw	r20, r24
    4916:	69 81       	ldd	r22, Y+1	; 0x01
    4918:	7a 81       	ldd	r23, Y+2	; 0x02
    491a:	8b 81       	ldd	r24, Y+3	; 0x03
    491c:	9c 81       	ldd	r25, Y+4	; 0x04
    491e:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    4922:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    4926:	9b 01       	movw	r18, r22
    4928:	ac 01       	movw	r20, r24
    492a:	c7 01       	movw	r24, r14
    492c:	b6 01       	movw	r22, r12
    492e:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    4932:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <ACCSpeedINT>
    4936:	30 93 74 24 	sts	0x2474, r19	; 0x802474 <ACCSpeedINT+0x1>
    493a:	40 93 75 24 	sts	0x2475, r20	; 0x802475 <ACCSpeedINT+0x2>
    493e:	50 93 76 24 	sts	0x2476, r21	; 0x802476 <ACCSpeedINT+0x3>
					
			DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			DECSpeedINT= MaxSpeed / DECSpeedINT;
    4942:	c5 01       	movw	r24, r10
    4944:	b4 01       	movw	r22, r8
    4946:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    494a:	9b 01       	movw	r18, r22
    494c:	ac 01       	movw	r20, r24
    494e:	69 81       	ldd	r22, Y+1	; 0x01
    4950:	7a 81       	ldd	r23, Y+2	; 0x02
    4952:	8b 81       	ldd	r24, Y+3	; 0x03
    4954:	9c 81       	ldd	r25, Y+4	; 0x04
    4956:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    495a:	0e 94 33 29 	call	0x5266	; 0x5266 <__fixsfsi>
    495e:	9b 01       	movw	r18, r22
    4960:	ac 01       	movw	r20, r24
    4962:	c7 01       	movw	r24, r14
    4964:	b6 01       	movw	r22, r12
    4966:	0e 94 96 2a 	call	0x552c	; 0x552c <__divmodsi4>
    496a:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <DECSpeedINT>
    496e:	30 93 70 24 	sts	0x2470, r19	; 0x802470 <DECSpeedINT+0x1>
    4972:	40 93 71 24 	sts	0x2471, r20	; 0x802471 <DECSpeedINT+0x2>
    4976:	50 93 72 24 	sts	0x2472, r21	; 0x802472 <DECSpeedINT+0x3>
					
			CLR_DIR1;
    497a:	e0 e2       	ldi	r30, 0x20	; 32
    497c:	f7 e0       	ldi	r31, 0x07	; 7
    497e:	84 81       	ldd	r24, Z+4	; 0x04
    4980:	8f 7e       	andi	r24, 0xEF	; 239
    4982:	84 83       	std	Z+4, r24	; 0x04
			FreeJog=SelectedAxis;
    4984:	8d 81       	ldd	r24, Y+5	; 0x05
    4986:	9e 81       	ldd	r25, Y+6	; 0x06
    4988:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <FreeJog>
    498c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <FreeJog+0x1>
			Ma[SelectedAxis] = 1000;
    4990:	fc 01       	movw	r30, r24
    4992:	ee 0f       	add	r30, r30
    4994:	ff 1f       	adc	r31, r31
    4996:	ee 51       	subi	r30, 0x1E	; 30
    4998:	f9 4d       	sbci	r31, 0xD9	; 217
    499a:	88 ee       	ldi	r24, 0xE8	; 232
    499c:	93 e0       	ldi	r25, 0x03	; 3
    499e:	80 83       	st	Z, r24
    49a0:	91 83       	std	Z+1, r25	; 0x01
			DistanceToGo [SelectedAxis] = 0x7FFFFFFF;
    49a2:	ed 81       	ldd	r30, Y+5	; 0x05
    49a4:	fe 81       	ldd	r31, Y+6	; 0x06
    49a6:	ee 0f       	add	r30, r30
    49a8:	ff 1f       	adc	r31, r31
    49aa:	ee 0f       	add	r30, r30
    49ac:	ff 1f       	adc	r31, r31
    49ae:	e8 5e       	subi	r30, 0xE8	; 232
    49b0:	f8 4d       	sbci	r31, 0xD8	; 216
    49b2:	8f ef       	ldi	r24, 0xFF	; 255
    49b4:	9f ef       	ldi	r25, 0xFF	; 255
    49b6:	af ef       	ldi	r26, 0xFF	; 255
    49b8:	bf e7       	ldi	r27, 0x7F	; 127
    49ba:	80 83       	st	Z, r24
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	a2 83       	std	Z+2, r26	; 0x02
    49c0:	b3 83       	std	Z+3, r27	; 0x03

			ACC=1;
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <ACC>
    49c8:	34 c0       	rjmp	.+104    	; 0x4a32 <__vector_64+0x250>
		}
	}
	else if((FreeJog==0 && !DIR1)||(FreeJog==1 && !DIR2)||(FreeJog==2 && !DIR3))
    49ca:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <FreeJog>
    49ce:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <FreeJog+0x1>
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	29 f4       	brne	.+10     	; 0x49e0 <__vector_64+0x1fe>
    49d6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    49da:	84 ff       	sbrs	r24, 4
    49dc:	0f c0       	rjmp	.+30     	; 0x49fc <__vector_64+0x21a>
    49de:	29 c0       	rjmp	.+82     	; 0x4a32 <__vector_64+0x250>
    49e0:	81 30       	cpi	r24, 0x01	; 1
    49e2:	91 05       	cpc	r25, r1
    49e4:	29 f4       	brne	.+10     	; 0x49f0 <__vector_64+0x20e>
    49e6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    49ea:	82 ff       	sbrs	r24, 2
    49ec:	07 c0       	rjmp	.+14     	; 0x49fc <__vector_64+0x21a>
    49ee:	21 c0       	rjmp	.+66     	; 0x4a32 <__vector_64+0x250>
    49f0:	02 97       	sbiw	r24, 0x02	; 2
    49f2:	f9 f4       	brne	.+62     	; 0x4a32 <__vector_64+0x250>
    49f4:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
    49f8:	80 fd       	sbrc	r24, 0
    49fa:	1b c0       	rjmp	.+54     	; 0x4a32 <__vector_64+0x250>
	{
		ACC=0;
    49fc:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
		DEC=1;
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	80 93 6d 24 	sts	0x246D, r24	; 0x80246d <DEC>
	}
}
    4a06:	15 c0       	rjmp	.+42     	; 0x4a32 <__vector_64+0x250>
			//
			//DECSpeedINT = (long int)(100 *(float)MaxSpeed/(float)IDEC);// t = V/a
			//DECSpeedINT= MaxSpeed / DECSpeedINT;

			if(!LIM_NEG1 && Axes[SelectedAxis].HardwareLimitNegIsActive)
				MaxSpeed=Axes[SelectedAxis].MaxSpeed;
    4a08:	2b e2       	ldi	r18, 0x2B	; 43
    4a0a:	28 9f       	mul	r18, r24
    4a0c:	f0 01       	movw	r30, r0
    4a0e:	29 9f       	mul	r18, r25
    4a10:	f0 0d       	add	r31, r0
    4a12:	11 24       	eor	r1, r1
    4a14:	e5 53       	subi	r30, 0x35	; 53
    4a16:	fb 4d       	sbci	r31, 0xDB	; 219
    4a18:	85 81       	ldd	r24, Z+5	; 0x05
    4a1a:	96 81       	ldd	r25, Z+6	; 0x06
    4a1c:	a7 81       	ldd	r26, Z+7	; 0x07
    4a1e:	b0 85       	ldd	r27, Z+8	; 0x08
    4a20:	80 93 87 24 	sts	0x2487, r24	; 0x802487 <MaxSpeed>
    4a24:	90 93 88 24 	sts	0x2488, r25	; 0x802488 <MaxSpeed+0x1>
    4a28:	a0 93 89 24 	sts	0x2489, r26	; 0x802489 <MaxSpeed+0x2>
    4a2c:	b0 93 8a 24 	sts	0x248A, r27	; 0x80248a <MaxSpeed+0x3>
    4a30:	30 cf       	rjmp	.-416    	; 0x4892 <__vector_64+0xb0>
	else if((FreeJog==0 && !DIR1)||(FreeJog==1 && !DIR2)||(FreeJog==2 && !DIR3))
	{
		ACC=0;
		DEC=1;
	}
}
    4a32:	26 96       	adiw	r28, 0x06	; 6
    4a34:	cd bf       	out	0x3d, r28	; 61
    4a36:	de bf       	out	0x3e, r29	; 62
    4a38:	df 91       	pop	r29
    4a3a:	cf 91       	pop	r28
    4a3c:	ff 91       	pop	r31
    4a3e:	ef 91       	pop	r30
    4a40:	bf 91       	pop	r27
    4a42:	af 91       	pop	r26
    4a44:	9f 91       	pop	r25
    4a46:	8f 91       	pop	r24
    4a48:	7f 91       	pop	r23
    4a4a:	6f 91       	pop	r22
    4a4c:	5f 91       	pop	r21
    4a4e:	4f 91       	pop	r20
    4a50:	3f 91       	pop	r19
    4a52:	2f 91       	pop	r18
    4a54:	ff 90       	pop	r15
    4a56:	ef 90       	pop	r14
    4a58:	df 90       	pop	r13
    4a5a:	cf 90       	pop	r12
    4a5c:	bf 90       	pop	r11
    4a5e:	af 90       	pop	r10
    4a60:	9f 90       	pop	r9
    4a62:	8f 90       	pop	r8
    4a64:	7f 90       	pop	r7
    4a66:	6f 90       	pop	r6
    4a68:	5f 90       	pop	r5
    4a6a:	4f 90       	pop	r4
    4a6c:	0f 90       	pop	r0
    4a6e:	0b be       	out	0x3b, r0	; 59
    4a70:	0f 90       	pop	r0
    4a72:	0a be       	out	0x3a, r0	; 58
    4a74:	0f 90       	pop	r0
    4a76:	09 be       	out	0x39, r0	; 57
    4a78:	0f 90       	pop	r0
    4a7a:	08 be       	out	0x38, r0	; 56
    4a7c:	0f 90       	pop	r0
    4a7e:	0f be       	out	0x3f, r0	; 63
    4a80:	0f 90       	pop	r0
    4a82:	1f 90       	pop	r1
    4a84:	18 95       	reti

00004a86 <__vector_65>:

//Port D interrupt
//Start Stop Key Interrupt
ISR (PORTD_INT1_vect)
{
    4a86:	1f 92       	push	r1
    4a88:	0f 92       	push	r0
    4a8a:	0f b6       	in	r0, 0x3f	; 63
    4a8c:	0f 92       	push	r0
    4a8e:	11 24       	eor	r1, r1
    4a90:	08 b6       	in	r0, 0x38	; 56
    4a92:	0f 92       	push	r0
    4a94:	18 be       	out	0x38, r1	; 56
    4a96:	09 b6       	in	r0, 0x39	; 57
    4a98:	0f 92       	push	r0
    4a9a:	19 be       	out	0x39, r1	; 57
    4a9c:	0a b6       	in	r0, 0x3a	; 58
    4a9e:	0f 92       	push	r0
    4aa0:	1a be       	out	0x3a, r1	; 58
    4aa2:	0b b6       	in	r0, 0x3b	; 59
    4aa4:	0f 92       	push	r0
    4aa6:	1b be       	out	0x3b, r1	; 59
    4aa8:	2f 92       	push	r2
    4aaa:	3f 92       	push	r3
    4aac:	4f 92       	push	r4
    4aae:	5f 92       	push	r5
    4ab0:	6f 92       	push	r6
    4ab2:	7f 92       	push	r7
    4ab4:	8f 92       	push	r8
    4ab6:	9f 92       	push	r9
    4ab8:	af 92       	push	r10
    4aba:	bf 92       	push	r11
    4abc:	cf 92       	push	r12
    4abe:	df 92       	push	r13
    4ac0:	ef 92       	push	r14
    4ac2:	ff 92       	push	r15
    4ac4:	0f 93       	push	r16
    4ac6:	1f 93       	push	r17
    4ac8:	2f 93       	push	r18
    4aca:	3f 93       	push	r19
    4acc:	4f 93       	push	r20
    4ace:	5f 93       	push	r21
    4ad0:	6f 93       	push	r22
    4ad2:	7f 93       	push	r23
    4ad4:	8f 93       	push	r24
    4ad6:	9f 93       	push	r25
    4ad8:	af 93       	push	r26
    4ada:	bf 93       	push	r27
    4adc:	ef 93       	push	r30
    4ade:	ff 93       	push	r31
    4ae0:	cf 93       	push	r28
    4ae2:	df 93       	push	r29
    4ae4:	00 d0       	rcall	.+0      	; 0x4ae6 <__vector_65+0x60>
    4ae6:	00 d0       	rcall	.+0      	; 0x4ae8 <__vector_65+0x62>
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
	//printf("PortD INT1\r\n");
	if(RunProgramInput) //If Run Program Input pin is pressed
    4aec:	e0 e6       	ldi	r30, 0x60	; 96
    4aee:	f6 e0       	ldi	r31, 0x06	; 6
    4af0:	80 85       	ldd	r24, Z+8	; 0x08
		//     {
		//         PRGExe();
		//         IsPause=0;
		//     }
	}
	if(StopProgramInput) //Stop Program Input pin
    4af2:	80 85       	ldd	r24, Z+8	; 0x08
    4af4:	82 ff       	sbrs	r24, 2
    4af6:	79 c1       	rjmp	.+754    	; 0x4dea <__vector_65+0x364>
	{
		if(ProgramRun) //if the program is in running mode
    4af8:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    4afc:	88 23       	and	r24, r24
    4afe:	e1 f0       	breq	.+56     	; 0x4b38 <__vector_65+0xb2>
		{
			IsPause=1;
    4b00:	81 e0       	ldi	r24, 0x01	; 1
    4b02:	80 93 52 24 	sts	0x2452, r24	; 0x802452 <IsPause>
			for (int ax = 0 ; ax < AxisNumber ; ax++)
			{
				DistanceToGo[ax] =0;
    4b06:	e8 e1       	ldi	r30, 0x18	; 24
    4b08:	f7 e2       	ldi	r31, 0x27	; 39
    4b0a:	10 82       	st	Z, r1
    4b0c:	11 82       	std	Z+1, r1	; 0x01
    4b0e:	12 82       	std	Z+2, r1	; 0x02
    4b10:	13 82       	std	Z+3, r1	; 0x03
    4b12:	14 82       	std	Z+4, r1	; 0x04
    4b14:	15 82       	std	Z+5, r1	; 0x05
    4b16:	16 82       	std	Z+6, r1	; 0x06
    4b18:	17 82       	std	Z+7, r1	; 0x07
    4b1a:	10 86       	std	Z+8, r1	; 0x08
    4b1c:	11 86       	std	Z+9, r1	; 0x09
    4b1e:	12 86       	std	Z+10, r1	; 0x0a
    4b20:	13 86       	std	Z+11, r1	; 0x0b
			}
			sprintf(BufferSend,"!4100\r\n");
    4b22:	98 e0       	ldi	r25, 0x08	; 8
    4b24:	e5 e8       	ldi	r30, 0x85	; 133
    4b26:	f3 e2       	ldi	r31, 0x23	; 35
    4b28:	a9 e6       	ldi	r26, 0x69	; 105
    4b2a:	b6 e2       	ldi	r27, 0x26	; 38
    4b2c:	01 90       	ld	r0, Z+
    4b2e:	0d 92       	st	X+, r0
    4b30:	9a 95       	dec	r25
    4b32:	e1 f7       	brne	.-8      	; 0x4b2c <__vector_65+0xa6>
			Responsing=1;
    4b34:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <Responsing>
		}
		
		StopTime=0;
    4b38:	10 92 51 24 	sts	0x2451, r1	; 0x802451 <StopTime>
		while(StopProgramInput)
    4b3c:	0f 2e       	mov	r0, r31
    4b3e:	f0 e6       	ldi	r31, 0x60	; 96
    4b40:	2f 2e       	mov	r2, r31
    4b42:	f6 e0       	ldi	r31, 0x06	; 6
    4b44:	3f 2e       	mov	r3, r31
    4b46:	f0 2d       	mov	r31, r0
    4b48:	f1 01       	movw	r30, r2
    4b4a:	80 85       	ldd	r24, Z+8	; 0x08
    4b4c:	82 ff       	sbrs	r24, 2
    4b4e:	4d c1       	rjmp	.+666    	; 0x4dea <__vector_65+0x364>
    4b50:	ff ef       	ldi	r31, 0xFF	; 255
    4b52:	23 ec       	ldi	r18, 0xC3	; 195
    4b54:	89 e0       	ldi	r24, 0x09	; 9
    4b56:	f1 50       	subi	r31, 0x01	; 1
    4b58:	20 40       	sbci	r18, 0x00	; 0
    4b5a:	80 40       	sbci	r24, 0x00	; 0
    4b5c:	e1 f7       	brne	.-8      	; 0x4b56 <__vector_65+0xd0>
    4b5e:	00 c0       	rjmp	.+0      	; 0x4b60 <__vector_65+0xda>
    4b60:	00 00       	nop
		{
			_delay_ms(100);
			StopTime++;
    4b62:	80 91 51 24 	lds	r24, 0x2451	; 0x802451 <StopTime>
    4b66:	8f 5f       	subi	r24, 0xFF	; 255
    4b68:	80 93 51 24 	sts	0x2451, r24	; 0x802451 <StopTime>
			if(StopTime>30)
    4b6c:	8f 31       	cpi	r24, 0x1F	; 31
    4b6e:	60 f3       	brcs	.-40     	; 0x4b48 <__vector_65+0xc2>
			{
				DO1_CLR; //Pen UP
    4b70:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>
    4b74:	8b 7f       	andi	r24, 0xFB	; 251
    4b76:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>

				while (IsAnyAxisMoving() == 1);
    4b7a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    4b7e:	81 30       	cpi	r24, 0x01	; 1
    4b80:	f1 f3       	breq	.-4      	; 0x4b7e <__vector_65+0xf8>
    4b82:	04 e2       	ldi	r16, 0x24	; 36
    4b84:	17 e2       	ldi	r17, 0x27	; 39
    4b86:	e3 ed       	ldi	r30, 0xD3	; 211
    4b88:	f6 e2       	ldi	r31, 0x26	; 38
    4b8a:	0f 2e       	mov	r0, r31
    4b8c:	f8 e1       	ldi	r31, 0x18	; 24
    4b8e:	8f 2e       	mov	r8, r31
    4b90:	f7 e2       	ldi	r31, 0x27	; 39
    4b92:	9f 2e       	mov	r9, r31
    4b94:	f0 2d       	mov	r31, r0
    4b96:	34 01       	movw	r6, r8
    4b98:	e1 2c       	mov	r14, r1
    4b9a:	f1 2c       	mov	r15, r1
    4b9c:	41 2c       	mov	r4, r1
    4b9e:	51 2c       	mov	r5, r1
    4ba0:	a1 2c       	mov	r10, r1
    4ba2:	b1 2c       	mov	r11, r1
    4ba4:	65 01       	movw	r12, r10
    4ba6:	ed 83       	std	Y+5, r30	; 0x05
    4ba8:	fe 83       	std	Y+6, r31	; 0x06
    4baa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bac:	9e 81       	ldd	r25, Y+6	; 0x06
    4bae:	89 83       	std	Y+1, r24	; 0x01
    4bb0:	9a 83       	std	Y+2, r25	; 0x02
    4bb2:	0b 83       	std	Y+3, r16	; 0x03
    4bb4:	1c 83       	std	Y+4, r17	; 0x04
				long int Tempd = 0;
				int Tempa = 0;
				for (int ax = 0 ; ax < AxisNumber ; ax++)
				{
					if (SoftRefrence[ax] < AxisPosition[ax]) SetAxisDir(ax,0);
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	80 81       	ld	r24, Z
    4bba:	91 81       	ldd	r25, Z+1	; 0x01
    4bbc:	a0 e0       	ldi	r26, 0x00	; 0
    4bbe:	b0 e0       	ldi	r27, 0x00	; 0
    4bc0:	f8 01       	movw	r30, r16
    4bc2:	40 81       	ld	r20, Z
    4bc4:	51 81       	ldd	r21, Z+1	; 0x01
    4bc6:	62 81       	ldd	r22, Z+2	; 0x02
    4bc8:	73 81       	ldd	r23, Z+3	; 0x03
    4bca:	84 17       	cp	r24, r20
    4bcc:	95 07       	cpc	r25, r21
    4bce:	a6 07       	cpc	r26, r22
    4bd0:	b7 07       	cpc	r27, r23
    4bd2:	a4 f4       	brge	.+40     	; 0x4bfc <__vector_65+0x176>
    4bd4:	60 e0       	ldi	r22, 0x00	; 0
    4bd6:	c7 01       	movw	r24, r14
    4bd8:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
					if (SoftRefrence[ax] >= AxisPosition[ax]) SetAxisDir(ax,1);
    4bdc:	ed 81       	ldd	r30, Y+5	; 0x05
    4bde:	fe 81       	ldd	r31, Y+6	; 0x06
    4be0:	80 81       	ld	r24, Z
    4be2:	91 81       	ldd	r25, Z+1	; 0x01
    4be4:	a0 e0       	ldi	r26, 0x00	; 0
    4be6:	b0 e0       	ldi	r27, 0x00	; 0
    4be8:	f8 01       	movw	r30, r16
    4bea:	40 81       	ld	r20, Z
    4bec:	51 81       	ldd	r21, Z+1	; 0x01
    4bee:	62 81       	ldd	r22, Z+2	; 0x02
    4bf0:	73 81       	ldd	r23, Z+3	; 0x03
    4bf2:	84 17       	cp	r24, r20
    4bf4:	95 07       	cpc	r25, r21
    4bf6:	a6 07       	cpc	r26, r22
    4bf8:	b7 07       	cpc	r27, r23
    4bfa:	24 f0       	brlt	.+8      	; 0x4c04 <__vector_65+0x17e>
    4bfc:	61 e0       	ldi	r22, 0x01	; 1
    4bfe:	c7 01       	movw	r24, r14
    4c00:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z10SetAxisDiric>
    4c04:	0c 5f       	subi	r16, 0xFC	; 252
    4c06:	1f 4f       	sbci	r17, 0xFF	; 255
    4c08:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c0c:	02 96       	adiw	r24, 0x02	; 2
    4c0e:	8d 83       	std	Y+5, r24	; 0x05
    4c10:	9e 83       	std	Y+6, r25	; 0x06
					DistanceToGo[ax] = labs(AxisPosition[ax]-SoftRefrence[ax]);
    4c12:	e9 81       	ldd	r30, Y+1	; 0x01
    4c14:	fa 81       	ldd	r31, Y+2	; 0x02
    4c16:	80 81       	ld	r24, Z
    4c18:	91 81       	ldd	r25, Z+1	; 0x01
    4c1a:	eb 81       	ldd	r30, Y+3	; 0x03
    4c1c:	fc 81       	ldd	r31, Y+4	; 0x04
    4c1e:	40 81       	ld	r20, Z
    4c20:	51 81       	ldd	r21, Z+1	; 0x01
    4c22:	62 81       	ldd	r22, Z+2	; 0x02
    4c24:	73 81       	ldd	r23, Z+3	; 0x03
    4c26:	48 1b       	sub	r20, r24
    4c28:	59 0b       	sbc	r21, r25
    4c2a:	61 09       	sbc	r22, r1
    4c2c:	71 09       	sbc	r23, r1
    4c2e:	db 01       	movw	r26, r22
    4c30:	ca 01       	movw	r24, r20
    4c32:	3a f4       	brpl	.+14     	; 0x4c42 <__vector_65+0x1bc>
    4c34:	88 27       	eor	r24, r24
    4c36:	99 27       	eor	r25, r25
    4c38:	dc 01       	movw	r26, r24
    4c3a:	84 1b       	sub	r24, r20
    4c3c:	95 0b       	sbc	r25, r21
    4c3e:	a6 0b       	sbc	r26, r22
    4c40:	b7 0b       	sbc	r27, r23
    4c42:	f3 01       	movw	r30, r6
    4c44:	81 93       	st	Z+, r24
    4c46:	91 93       	st	Z+, r25
    4c48:	a1 93       	st	Z+, r26
    4c4a:	b1 93       	st	Z+, r27
    4c4c:	3f 01       	movw	r6, r30
					if (Tempd < DistanceToGo[ax])
    4c4e:	a8 16       	cp	r10, r24
    4c50:	b9 06       	cpc	r11, r25
    4c52:	ca 06       	cpc	r12, r26
    4c54:	db 06       	cpc	r13, r27
    4c56:	1c f4       	brge	.+6      	; 0x4c5e <__vector_65+0x1d8>
    4c58:	27 01       	movw	r4, r14
					{
						Tempd = DistanceToGo[ax];
    4c5a:	5c 01       	movw	r10, r24
    4c5c:	6d 01       	movw	r12, r26
				DO1_CLR; //Pen UP

				while (IsAnyAxisMoving() == 1);
				long int Tempd = 0;
				int Tempa = 0;
				for (int ax = 0 ; ax < AxisNumber ; ax++)
    4c5e:	ff ef       	ldi	r31, 0xFF	; 255
    4c60:	ef 1a       	sub	r14, r31
    4c62:	ff 0a       	sbc	r15, r31
    4c64:	23 e0       	ldi	r18, 0x03	; 3
    4c66:	e2 16       	cp	r14, r18
    4c68:	f1 04       	cpc	r15, r1
    4c6a:	09 f0       	breq	.+2      	; 0x4c6e <__vector_65+0x1e8>
    4c6c:	9e cf       	rjmp	.-196    	; 0x4baa <__vector_65+0x124>
					{
						Tempd = DistanceToGo[ax];
						Tempa = ax;
					}
				}
				MaxSpeed = Axes[Tempa].MaxSpeed;
    4c6e:	8b e2       	ldi	r24, 0x2B	; 43
    4c70:	84 9d       	mul	r24, r4
    4c72:	f0 01       	movw	r30, r0
    4c74:	85 9d       	mul	r24, r5
    4c76:	f0 0d       	add	r31, r0
    4c78:	11 24       	eor	r1, r1
    4c7a:	e5 53       	subi	r30, 0x35	; 53
    4c7c:	fb 4d       	sbci	r31, 0xDB	; 219
    4c7e:	c5 80       	ldd	r12, Z+5	; 0x05
    4c80:	d6 80       	ldd	r13, Z+6	; 0x06
    4c82:	e7 80       	ldd	r14, Z+7	; 0x07
    4c84:	f0 84       	ldd	r15, Z+8	; 0x08
    4c86:	c0 92 87 24 	sts	0x2487, r12	; 0x802487 <MaxSpeed>
    4c8a:	d0 92 88 24 	sts	0x2488, r13	; 0x802488 <MaxSpeed+0x1>
    4c8e:	e0 92 89 24 	sts	0x2489, r14	; 0x802489 <MaxSpeed+0x2>
    4c92:	f0 92 8a 24 	sts	0x248A, r15	; 0x80248a <MaxSpeed+0x3>
				IACC=Axes[Tempa].ACC;
    4c96:	81 85       	ldd	r24, Z+9	; 0x09
    4c98:	92 85       	ldd	r25, Z+10	; 0x0a
    4c9a:	a3 85       	ldd	r26, Z+11	; 0x0b
    4c9c:	b4 85       	ldd	r27, Z+12	; 0x0c
    4c9e:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <IACC>
    4ca2:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <IACC+0x1>
    4ca6:	a0 93 85 24 	sts	0x2485, r26	; 0x802485 <IACC+0x2>
    4caa:	b0 93 86 24 	sts	0x2486, r27	; 0x802486 <IACC+0x3>
				IDEC=Axes[Tempa].DEC;
    4cae:	85 85       	ldd	r24, Z+13	; 0x0d
    4cb0:	96 85       	ldd	r25, Z+14	; 0x0e
    4cb2:	a7 85       	ldd	r26, Z+15	; 0x0f
    4cb4:	b0 89       	ldd	r27, Z+16	; 0x10
    4cb6:	80 93 7f 24 	sts	0x247F, r24	; 0x80247f <IDEC>
    4cba:	90 93 80 24 	sts	0x2480, r25	; 0x802480 <IDEC+0x1>
    4cbe:	a0 93 81 24 	sts	0x2481, r26	; 0x802481 <IDEC+0x2>
    4cc2:	b0 93 82 24 	sts	0x2482, r27	; 0x802482 <IDEC+0x3>
				MaxDistanceToGo=labs(AxisPosition[Tempa]-SoftRefrence[Tempa]);
    4cc6:	d2 01       	movw	r26, r4
    4cc8:	aa 0f       	add	r26, r26
    4cca:	bb 1f       	adc	r27, r27
    4ccc:	aa 0f       	add	r26, r26
    4cce:	bb 1f       	adc	r27, r27
    4cd0:	ac 5d       	subi	r26, 0xDC	; 220
    4cd2:	b8 4d       	sbci	r27, 0xD8	; 216
    4cd4:	f2 01       	movw	r30, r4
    4cd6:	ee 0f       	add	r30, r30
    4cd8:	ff 1f       	adc	r31, r31
    4cda:	ed 52       	subi	r30, 0x2D	; 45
    4cdc:	f9 4d       	sbci	r31, 0xD9	; 217
    4cde:	80 81       	ld	r24, Z
    4ce0:	91 81       	ldd	r25, Z+1	; 0x01
    4ce2:	4d 91       	ld	r20, X+
    4ce4:	5d 91       	ld	r21, X+
    4ce6:	6d 91       	ld	r22, X+
    4ce8:	7c 91       	ld	r23, X
    4cea:	48 1b       	sub	r20, r24
    4cec:	59 0b       	sbc	r21, r25
    4cee:	61 09       	sbc	r22, r1
    4cf0:	71 09       	sbc	r23, r1
    4cf2:	db 01       	movw	r26, r22
    4cf4:	ca 01       	movw	r24, r20
    4cf6:	3a f4       	brpl	.+14     	; 0x4d06 <__vector_65+0x280>
    4cf8:	88 27       	eor	r24, r24
    4cfa:	99 27       	eor	r25, r25
    4cfc:	dc 01       	movw	r26, r24
    4cfe:	84 1b       	sub	r24, r20
    4d00:	95 0b       	sbc	r25, r21
    4d02:	a6 0b       	sbc	r26, r22
    4d04:	b7 0b       	sbc	r27, r23
    4d06:	a8 2e       	mov	r10, r24
    4d08:	b9 2e       	mov	r11, r25
    4d0a:	0a 2f       	mov	r16, r26
    4d0c:	1b 2f       	mov	r17, r27
    4d0e:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <MaxDistanceToGo>
    4d12:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <MaxDistanceToGo+0x1>
    4d16:	a0 93 8d 24 	sts	0x248D, r26	; 0x80248d <MaxDistanceToGo+0x2>
    4d1a:	b0 93 8e 24 	sts	0x248E, r27	; 0x80248e <MaxDistanceToGo+0x3>
    4d1e:	e2 ee       	ldi	r30, 0xE2	; 226
    4d20:	f6 e2       	ldi	r31, 0x26	; 38
    4d22:	e9 83       	std	Y+1, r30	; 0x01
    4d24:	fa 83       	std	Y+2, r31	; 0x02
				//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
				for (int ax = 0 ; ax < AxisNumber ; ax++)
				{
					Ma[ax] = (unsigned int)((float)((float)DistanceToGo[ax]/(float)MaxDistanceToGo)*1000);
    4d26:	f4 01       	movw	r30, r8
    4d28:	61 91       	ld	r22, Z+
    4d2a:	71 91       	ld	r23, Z+
    4d2c:	81 91       	ld	r24, Z+
    4d2e:	91 91       	ld	r25, Z+
    4d30:	4f 01       	movw	r8, r30
    4d32:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    4d36:	2b 01       	movw	r4, r22
    4d38:	3c 01       	movw	r6, r24
    4d3a:	6a 2d       	mov	r22, r10
    4d3c:	7b 2d       	mov	r23, r11
    4d3e:	80 2f       	mov	r24, r16
    4d40:	91 2f       	mov	r25, r17
    4d42:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    4d46:	9b 01       	movw	r18, r22
    4d48:	ac 01       	movw	r20, r24
    4d4a:	c3 01       	movw	r24, r6
    4d4c:	b2 01       	movw	r22, r4
    4d4e:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	4a e7       	ldi	r20, 0x7A	; 122
    4d58:	54 e4       	ldi	r21, 0x44	; 68
    4d5a:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    4d5e:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    4d62:	e9 81       	ldd	r30, Y+1	; 0x01
    4d64:	fa 81       	ldd	r31, Y+2	; 0x02
    4d66:	61 93       	st	Z+, r22
    4d68:	71 93       	st	Z+, r23
    4d6a:	e9 83       	std	Y+1, r30	; 0x01
    4d6c:	fa 83       	std	Y+2, r31	; 0x02
				MaxSpeed = Axes[Tempa].MaxSpeed;
				IACC=Axes[Tempa].ACC;
				IDEC=Axes[Tempa].DEC;
				MaxDistanceToGo=labs(AxisPosition[Tempa]-SoftRefrence[Tempa]);
				//printf("MaxDTG: %d\r\n",MaxDistanceToGo);
				for (int ax = 0 ; ax < AxisNumber ; ax++)
    4d6e:	84 e2       	ldi	r24, 0x24	; 36
    4d70:	97 e2       	ldi	r25, 0x27	; 39
    4d72:	88 15       	cp	r24, r8
    4d74:	99 05       	cpc	r25, r9
    4d76:	b9 f6       	brne	.-82     	; 0x4d26 <__vector_65+0x2a0>
				{
					Ma[ax] = (unsigned int)((float)((float)DistanceToGo[ax]/(float)MaxDistanceToGo)*1000);
				}
				CurSpeedFrq=MaxSpeed;
    4d78:	c0 92 77 24 	sts	0x2477, r12	; 0x802477 <CurSpeedFrq>
    4d7c:	d0 92 78 24 	sts	0x2478, r13	; 0x802478 <CurSpeedFrq+0x1>
    4d80:	e0 92 79 24 	sts	0x2479, r14	; 0x802479 <CurSpeedFrq+0x2>
    4d84:	f0 92 7a 24 	sts	0x247A, r15	; 0x80247a <CurSpeedFrq+0x3>
				ACC = 0;
    4d88:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <ACC>
				DEC = 0;
    4d8c:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <DEC>
				TimerMainPeriod = (float)((float)16000.0 / (float) CurSpeedFrq);
    4d90:	c7 01       	movw	r24, r14
    4d92:	b6 01       	movw	r22, r12
    4d94:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__floatsisf>
    4d98:	9b 01       	movw	r18, r22
    4d9a:	ac 01       	movw	r20, r24
    4d9c:	60 e0       	ldi	r22, 0x00	; 0
    4d9e:	70 e0       	ldi	r23, 0x00	; 0
    4da0:	8a e7       	ldi	r24, 0x7A	; 122
    4da2:	96 e4       	ldi	r25, 0x46	; 70
    4da4:	0e 94 c1 28 	call	0x5182	; 0x5182 <__divsf3>
    4da8:	60 93 c6 24 	sts	0x24C6, r22	; 0x8024c6 <TimerMainPeriod>
    4dac:	70 93 c7 24 	sts	0x24C7, r23	; 0x8024c7 <TimerMainPeriod+0x1>
    4db0:	80 93 c8 24 	sts	0x24C8, r24	; 0x8024c8 <TimerMainPeriod+0x2>
    4db4:	90 93 c9 24 	sts	0x24C9, r25	; 0x8024c9 <TimerMainPeriod+0x3>
				tcc0_init();
    4db8:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
				TCC0.CCA = (unsigned int)(TimerMainPeriod*1000);
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	4a e7       	ldi	r20, 0x7A	; 122
    4dc2:	54 e4       	ldi	r21, 0x44	; 68
    4dc4:	60 91 c6 24 	lds	r22, 0x24C6	; 0x8024c6 <TimerMainPeriod>
    4dc8:	70 91 c7 24 	lds	r23, 0x24C7	; 0x8024c7 <TimerMainPeriod+0x1>
    4dcc:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <TimerMainPeriod+0x2>
    4dd0:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <TimerMainPeriod+0x3>
    4dd4:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    4dd8:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    4ddc:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    4de0:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
				ProgramRun=0;
    4de4:	10 92 ca 24 	sts	0x24CA, r1	; 0x8024ca <ProgramRun>
    4de8:	af ce       	rjmp	.-674    	; 0x4b48 <__vector_65+0xc2>
			}
		}
	}
}
    4dea:	26 96       	adiw	r28, 0x06	; 6
    4dec:	cd bf       	out	0x3d, r28	; 61
    4dee:	de bf       	out	0x3e, r29	; 62
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	ff 91       	pop	r31
    4df6:	ef 91       	pop	r30
    4df8:	bf 91       	pop	r27
    4dfa:	af 91       	pop	r26
    4dfc:	9f 91       	pop	r25
    4dfe:	8f 91       	pop	r24
    4e00:	7f 91       	pop	r23
    4e02:	6f 91       	pop	r22
    4e04:	5f 91       	pop	r21
    4e06:	4f 91       	pop	r20
    4e08:	3f 91       	pop	r19
    4e0a:	2f 91       	pop	r18
    4e0c:	1f 91       	pop	r17
    4e0e:	0f 91       	pop	r16
    4e10:	ff 90       	pop	r15
    4e12:	ef 90       	pop	r14
    4e14:	df 90       	pop	r13
    4e16:	cf 90       	pop	r12
    4e18:	bf 90       	pop	r11
    4e1a:	af 90       	pop	r10
    4e1c:	9f 90       	pop	r9
    4e1e:	8f 90       	pop	r8
    4e20:	7f 90       	pop	r7
    4e22:	6f 90       	pop	r6
    4e24:	5f 90       	pop	r5
    4e26:	4f 90       	pop	r4
    4e28:	3f 90       	pop	r3
    4e2a:	2f 90       	pop	r2
    4e2c:	0f 90       	pop	r0
    4e2e:	0b be       	out	0x3b, r0	; 59
    4e30:	0f 90       	pop	r0
    4e32:	0a be       	out	0x3a, r0	; 58
    4e34:	0f 90       	pop	r0
    4e36:	09 be       	out	0x39, r0	; 57
    4e38:	0f 90       	pop	r0
    4e3a:	08 be       	out	0x38, r0	; 56
    4e3c:	0f 90       	pop	r0
    4e3e:	0f be       	out	0x3f, r0	; 63
    4e40:	0f 90       	pop	r0
    4e42:	1f 90       	pop	r1
    4e44:	18 95       	reti

00004e46 <_Z12usartc0_initv>:
{
	// Note: The correct PORTC direction for the RxD, TxD and XCK signals
	// is configured in the ports_init function.
	// Transmitter is enabled
	// Set TxD=1
	PORTC.OUTSET=0x08;
    4e46:	88 e0       	ldi	r24, 0x08	; 8
    4e48:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	// Communication mode: Asynchronous USART
	// Data bits: 8
	// Stop bits: 1
	// Parity: Disabled
	USARTC0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    4e4c:	e0 ea       	ldi	r30, 0xA0	; 160
    4e4e:	f8 e0       	ldi	r31, 0x08	; 8
    4e50:	83 e0       	ldi	r24, 0x03	; 3
    4e52:	85 83       	std	Z+5, r24	; 0x05

	// Receive complete interrupt: Medium Level
	// Transmit complete interrupt: Disabled
	// Data register empty interrupt: Disabled
	USARTC0.CTRLA=(USARTC0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
    4e54:	83 81       	ldd	r24, Z+3	; 0x03
	USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    4e56:	80 7c       	andi	r24, 0xC0	; 192
    4e58:	80 62       	ori	r24, 0x20	; 32
    4e5a:	83 83       	std	Z+3, r24	; 0x03

	// Required Baud rate: 115200
	// Real Baud Rate: 115211.5 (x1 Mode), Error: 0.0 %
	USARTC0.BAUDCTRLA=0x2E;
    4e5c:	8e e2       	ldi	r24, 0x2E	; 46
    4e5e:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x08;
    4e60:	88 e9       	ldi	r24, 0x98	; 152
    4e62:	87 83       	std	Z+7, r24	; 0x07

	// Receiver: On
	// Transmitter: On
	// Double transmission speed mode: Off
	// Multi-processor communication mode: Off
	USARTC0.CTRLB=(USARTC0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
    4e64:	84 81       	ldd	r24, Z+4	; 0x04
	USART_RXEN_bm | USART_TXEN_bm;
    4e66:	80 7e       	andi	r24, 0xE0	; 224
    4e68:	88 61       	ori	r24, 0x18	; 24
    4e6a:	84 83       	std	Z+4, r24	; 0x04
    4e6c:	08 95       	ret

00004e6e <__vector_25>:
bool rx_buffer_overflow_usartc0=0;

// USARTC0 Receiver interrupt service routine
// Debug port receive interrupt
ISR (USARTC0_RXC_vect)
{
    4e6e:	1f 92       	push	r1
    4e70:	0f 92       	push	r0
    4e72:	0f b6       	in	r0, 0x3f	; 63
    4e74:	0f 92       	push	r0
    4e76:	11 24       	eor	r1, r1
    4e78:	08 b6       	in	r0, 0x38	; 56
    4e7a:	0f 92       	push	r0
    4e7c:	18 be       	out	0x38, r1	; 56
    4e7e:	0b b6       	in	r0, 0x3b	; 59
    4e80:	0f 92       	push	r0
    4e82:	1b be       	out	0x3b, r1	; 59
    4e84:	8f 93       	push	r24
    4e86:	9f 93       	push	r25
    4e88:	ef 93       	push	r30
    4e8a:	ff 93       	push	r31
	unsigned char status;
	char data;

	status=USARTC0.STATUS;
    4e8c:	e0 ea       	ldi	r30, 0xA0	; 160
    4e8e:	f8 e0       	ldi	r31, 0x08	; 8
    4e90:	81 81       	ldd	r24, Z+1	; 0x01
	data=USARTC0.DATA;
    4e92:	90 81       	ld	r25, Z
	if ((status & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
    4e94:	8c 71       	andi	r24, 0x1C	; 28
    4e96:	d9 f4       	brne	.+54     	; 0x4ece <__vector_25+0x60>
	{
		rx_buffer_usartc0[rx_wr_index_usartc0++]=data;
    4e98:	e0 91 48 24 	lds	r30, 0x2448	; 0x802448 <rx_wr_index_usartc0>
    4e9c:	81 e0       	ldi	r24, 0x01	; 1
    4e9e:	8e 0f       	add	r24, r30
    4ea0:	80 93 48 24 	sts	0x2448, r24	; 0x802448 <rx_wr_index_usartc0>
    4ea4:	f0 e0       	ldi	r31, 0x00	; 0
    4ea6:	e7 5b       	subi	r30, 0xB7	; 183
    4ea8:	fb 4d       	sbci	r31, 0xDB	; 219
    4eaa:	90 83       	st	Z, r25
		#if RX_BUFFER_SIZE_USARTC0 == 256
		// special case for receiver buffer size=256
		if (++rx_counter_usartc0 == 0) rx_buffer_overflow_usartc0=1;
		#else
		if (rx_wr_index_usartc0 == RX_BUFFER_SIZE_USARTC0) rx_wr_index_usartc0=0;
    4eac:	88 30       	cpi	r24, 0x08	; 8
    4eae:	11 f4       	brne	.+4      	; 0x4eb4 <__vector_25+0x46>
    4eb0:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <rx_wr_index_usartc0>
		if (++rx_counter_usartc0 == RX_BUFFER_SIZE_USARTC0)
    4eb4:	80 91 47 24 	lds	r24, 0x2447	; 0x802447 <rx_counter_usartc0>
    4eb8:	8f 5f       	subi	r24, 0xFF	; 255
    4eba:	88 30       	cpi	r24, 0x08	; 8
    4ebc:	19 f0       	breq	.+6      	; 0x4ec4 <__vector_25+0x56>
    4ebe:	80 93 47 24 	sts	0x2447, r24	; 0x802447 <rx_counter_usartc0>
    4ec2:	05 c0       	rjmp	.+10     	; 0x4ece <__vector_25+0x60>
		{
			rx_counter_usartc0=0;
    4ec4:	10 92 47 24 	sts	0x2447, r1	; 0x802447 <rx_counter_usartc0>
			rx_buffer_overflow_usartc0=1;
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	80 93 46 24 	sts	0x2446, r24	; 0x802446 <__data_end>
		}
		#endif
	}
}
    4ece:	ff 91       	pop	r31
    4ed0:	ef 91       	pop	r30
    4ed2:	9f 91       	pop	r25
    4ed4:	8f 91       	pop	r24
    4ed6:	0f 90       	pop	r0
    4ed8:	0b be       	out	0x3b, r0	; 59
    4eda:	0f 90       	pop	r0
    4edc:	08 be       	out	0x38, r0	; 56
    4ede:	0f 90       	pop	r0
    4ee0:	0f be       	out	0x3f, r0	; 63
    4ee2:	0f 90       	pop	r0
    4ee4:	1f 90       	pop	r1
    4ee6:	18 95       	reti

00004ee8 <main>:

	// Interrupt system initialization
	// Optimize for speed
	//#pragma optsize-
	// Make sure the interrupts are disabled
	asm("cli");
    4ee8:	f8 94       	cli
	// Low level interrupt: On
	// Round-robin scheduling for low level interrupt: Off
	// Medium level interrupt: On
	// High level interrupt: On
	// The interrupt vectors will be placed at the start of the Application FLASH section
	n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
    4eea:	e0 ea       	ldi	r30, 0xA0	; 160
    4eec:	f0 e0       	ldi	r31, 0x00	; 0
    4eee:	82 81       	ldd	r24, Z+2	; 0x02
	PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    4ef0:	88 73       	andi	r24, 0x38	; 56
    4ef2:	87 60       	ori	r24, 0x07	; 7
	CCP=CCP_IOREG_gc;
    4ef4:	98 ed       	ldi	r25, 0xD8	; 216
    4ef6:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL=n;
    4ef8:	82 83       	std	Z+2, r24	; 0x02
	// Set the default priority for round-robin scheduling
	PMIC.INTPRI=0x00;
    4efa:	11 82       	std	Z+1, r1	; 0x01
	
	// Restore optimization for size if needed
	//#pragma optsize_default

	// System clocks initialization
	system_clocks_init();
    4efc:	0e 94 41 22 	call	0x4482	; 0x4482 <_Z18system_clocks_initv>

	// Ports initialization
	ports_init();
    4f00:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z10ports_initv>

	// Virtual Ports initialization
	//vports_init();
	spif_init();
    4f04:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z9spif_initv>


	// Globally enable interrupts
	asm("sei");
    4f08:	78 94       	sei

	tcc0_init();  // Axis interpolation counter for level 0
    4f0a:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z9tcc0_initv>
	tcc1_init();  // Axis interpolation counter for level 1
    4f0e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9tcc1_initv>
	tcd1_init();  // PLC interpolation timer
    4f12:	0e 94 89 0c 	call	0x1912	; 0x1912 <_Z9tcd1_initv>
	spie_init();  // SPI Flash initialization
    4f16:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_Z9spie_initv>
	SG17_SET;     // says to 7 segment board and says that Xmega is loaded
    4f1a:	e0 e0       	ldi	r30, 0x00	; 0
    4f1c:	f7 e0       	ldi	r31, 0x07	; 7
    4f1e:	84 81       	ldd	r24, Z+4	; 0x04
    4f20:	82 60       	ori	r24, 0x02	; 2
    4f22:	84 83       	std	Z+4, r24	; 0x04
	usartc0_init();
    4f24:	0e 94 23 27 	call	0x4e46	; 0x4e46 <_Z12usartc0_initv>
	SETSFRST; //set Serial Flash Reset means Xmega is able to read from SPI Flash
    4f28:	e0 e8       	ldi	r30, 0x80	; 128
    4f2a:	f6 e0       	ldi	r31, 0x06	; 6
    4f2c:	84 81       	ldd	r24, Z+4	; 0x04
    4f2e:	84 60       	ori	r24, 0x04	; 4
    4f30:	84 83       	std	Z+4, r24	; 0x04
	SETSFWP;  //set Serial Flash Write protect to allow raspberry to write on it
    4f32:	84 81       	ldd	r24, Z+4	; 0x04
    4f34:	82 60       	ori	r24, 0x02	; 2
    4f36:	84 83       	std	Z+4, r24	; 0x04
    4f38:	2f ef       	ldi	r18, 0xFF	; 255
    4f3a:	89 e6       	ldi	r24, 0x69	; 105
    4f3c:	98 e1       	ldi	r25, 0x18	; 24
    4f3e:	21 50       	subi	r18, 0x01	; 1
    4f40:	80 40       	sbci	r24, 0x00	; 0
    4f42:	90 40       	sbci	r25, 0x00	; 0
    4f44:	e1 f7       	brne	.-8      	; 0x4f3e <main+0x56>
    4f46:	00 c0       	rjmp	.+0      	; 0x4f48 <main+0x60>
    4f48:	00 00       	nop
	_delay_ms(250);
	printf("Reading Config...\r\n");
    4f4a:	8c e0       	ldi	r24, 0x0C	; 12
    4f4c:	94 e2       	ldi	r25, 0x24	; 36
    4f4e:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
	ReadConfig();  // read configuration from Serail Flash
    4f52:	0e 94 41 04 	call	0x882	; 0x882 <_Z10ReadConfigv>

	while (1)
	{
		// if jog is pushed the LED on the board turns on
		if(JogNegInput == 1) SETBIT(PORTR.OUT,0);
    4f56:	0f 2e       	mov	r0, r31
    4f58:	f0 e6       	ldi	r31, 0x60	; 96
    4f5a:	ef 2e       	mov	r14, r31
    4f5c:	f6 e0       	ldi	r31, 0x06	; 6
    4f5e:	ff 2e       	mov	r15, r31
    4f60:	f0 2d       	mov	r31, r0
    4f62:	c0 ee       	ldi	r28, 0xE0	; 224
    4f64:	d7 e0       	ldi	r29, 0x07	; 7
		if(JogNegInput == 0) CLRBIT(PORTR.OUT,0);
		if(JogPosInput == 1) SETBIT(PORTR.OUT,1);
    4f66:	00 ee       	ldi	r16, 0xE0	; 224
    4f68:	16 e0       	ldi	r17, 0x06	; 6
				else
				{
					printf("Read Main Program.\r\n");
					readRam();
				}
				printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    4f6a:	0f 2e       	mov	r0, r31
    4f6c:	fc e4       	ldi	r31, 0x4C	; 76
    4f6e:	cf 2e       	mov	r12, r31
    4f70:	f5 e2       	ldi	r31, 0x25	; 37
    4f72:	df 2e       	mov	r13, r31
    4f74:	f0 2d       	mov	r31, r0
    4f76:	0f 2e       	mov	r0, r31
    4f78:	fa ef       	ldi	r31, 0xFA	; 250
    4f7a:	af 2e       	mov	r10, r31
    4f7c:	f0 e2       	ldi	r31, 0x20	; 32
    4f7e:	bf 2e       	mov	r11, r31
    4f80:	f0 2d       	mov	r31, r0
				
				PORTR.OUTTGL=0x01; //program running will flash the LED
    4f82:	55 24       	eor	r5, r5
    4f84:	53 94       	inc	r5
    4f86:	0f 2e       	mov	r0, r31
    4f88:	f5 e1       	ldi	r31, 0x15	; 21
    4f8a:	6f 2e       	mov	r6, r31
    4f8c:	71 2c       	mov	r7, r1
    4f8e:	f0 2d       	mov	r31, r0
	ReadConfig();  // read configuration from Serail Flash

	while (1)
	{
		// if jog is pushed the LED on the board turns on
		if(JogNegInput == 1) SETBIT(PORTR.OUT,0);
    4f90:	f7 01       	movw	r30, r14
    4f92:	80 85       	ldd	r24, Z+8	; 0x08
    4f94:	83 ff       	sbrs	r24, 3
    4f96:	03 c0       	rjmp	.+6      	; 0x4f9e <main+0xb6>
    4f98:	8c 81       	ldd	r24, Y+4	; 0x04
    4f9a:	81 60       	ori	r24, 0x01	; 1
    4f9c:	8c 83       	std	Y+4, r24	; 0x04
		if(JogNegInput == 0) CLRBIT(PORTR.OUT,0);
    4f9e:	f7 01       	movw	r30, r14
    4fa0:	80 85       	ldd	r24, Z+8	; 0x08
    4fa2:	83 fd       	sbrc	r24, 3
    4fa4:	03 c0       	rjmp	.+6      	; 0x4fac <main+0xc4>
    4fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    4fa8:	8e 7f       	andi	r24, 0xFE	; 254
    4faa:	8c 83       	std	Y+4, r24	; 0x04
		if(JogPosInput == 1) SETBIT(PORTR.OUT,1);
    4fac:	f8 01       	movw	r30, r16
    4fae:	80 85       	ldd	r24, Z+8	; 0x08
    4fb0:	81 ff       	sbrs	r24, 1
    4fb2:	03 c0       	rjmp	.+6      	; 0x4fba <main+0xd2>
    4fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    4fb6:	82 60       	ori	r24, 0x02	; 2
    4fb8:	8c 83       	std	Y+4, r24	; 0x04
		if(JogPosInput == 0) CLRBIT(PORTR.OUT,1);
    4fba:	f8 01       	movw	r30, r16
    4fbc:	80 85       	ldd	r24, Z+8	; 0x08
    4fbe:	81 fd       	sbrc	r24, 1
    4fc0:	03 c0       	rjmp	.+6      	; 0x4fc8 <main+0xe0>
    4fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc4:	8d 7f       	andi	r24, 0xFD	; 253
    4fc6:	8c 83       	std	Y+4, r24	; 0x04
		
		if(ProgramRun && !IsAnyAxisMoving())
    4fc8:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <ProgramRun>
    4fcc:	88 23       	and	r24, r24
    4fce:	09 f4       	brne	.+2      	; 0x4fd2 <main+0xea>
    4fd0:	40 c0       	rjmp	.+128    	; 0x5052 <main+0x16a>
    4fd2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z15IsAnyAxisMovingv>
    4fd6:	81 11       	cpse	r24, r1
    4fd8:	3c c0       	rjmp	.+120    	; 0x5052 <main+0x16a>
		{
			if(IsPause==0)
    4fda:	80 91 52 24 	lds	r24, 0x2452	; 0x802452 <IsPause>
    4fde:	81 11       	cpse	r24, r1
    4fe0:	38 c0       	rjmp	.+112    	; 0x5052 <main+0x16a>
			{
				if(RunSubProgram)
    4fe2:	80 91 53 24 	lds	r24, 0x2453	; 0x802453 <RunSubProgram>
    4fe6:	88 23       	and	r24, r24
    4fe8:	49 f0       	breq	.+18     	; 0x4ffc <main+0x114>
				{
					printf("Read Sub Program.\r\n");
    4fea:	8f e1       	ldi	r24, 0x1F	; 31
    4fec:	94 e2       	ldi	r25, 0x24	; 36
    4fee:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
					ReadSubProgram(0);
    4ff2:	80 e0       	ldi	r24, 0x00	; 0
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_Z14ReadSubProgramj>
    4ffa:	06 c0       	rjmp	.+12     	; 0x5008 <main+0x120>
				}
				else
				{
					printf("Read Main Program.\r\n");
    4ffc:	82 e3       	ldi	r24, 0x32	; 50
    4ffe:	94 e2       	ldi	r25, 0x24	; 36
    5000:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <puts>
					readRam();
    5004:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z7readRamv>
				}
				printf("Program Block: %u\tMode: %u\r\n",CMDPRGlist.PRGLine,CMDPRGlist.Mode);
    5008:	f6 01       	movw	r30, r12
    500a:	83 81       	ldd	r24, Z+3	; 0x03
    500c:	1f 92       	push	r1
    500e:	8f 93       	push	r24
    5010:	81 81       	ldd	r24, Z+1	; 0x01
    5012:	8f 93       	push	r24
    5014:	80 81       	ld	r24, Z
    5016:	8f 93       	push	r24
    5018:	bf 92       	push	r11
    501a:	af 92       	push	r10
    501c:	0e 94 4e 2b 	call	0x569c	; 0x569c <printf>
				
				PORTR.OUTTGL=0x01; //program running will flash the LED
    5020:	5f 82       	std	Y+7, r5	; 0x07
				PRGExe();
    5022:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z6PRGExev>
				if(PRGEXEindex < PRGSize) PRGEXEindex++;
    5026:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <PRGEXEindex>
    502a:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <PRGEXEindex+0x1>
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	0f 90       	pop	r0
    5036:	0f 90       	pop	r0
    5038:	0f 90       	pop	r0
    503a:	20 91 69 24 	lds	r18, 0x2469	; 0x802469 <PRGSize>
    503e:	30 91 6a 24 	lds	r19, 0x246A	; 0x80246a <PRGSize+0x1>
    5042:	82 17       	cp	r24, r18
    5044:	93 07       	cpc	r25, r19
    5046:	2c f4       	brge	.+10     	; 0x5052 <main+0x16a>
    5048:	01 96       	adiw	r24, 0x01	; 1
    504a:	80 93 6b 24 	sts	0x246B, r24	; 0x80246b <PRGEXEindex>
    504e:	90 93 6c 24 	sts	0x246C, r25	; 0x80246c <PRGEXEindex+0x1>
			}
		}
		/**********************************************/
		if(cmdIsReady==0) continue;
    5052:	80 91 9b 25 	lds	r24, 0x259B	; 0x80259b <cmdIsReady>
    5056:	88 23       	and	r24, r24
    5058:	09 f4       	brne	.+2      	; 0x505c <main+0x174>
    505a:	9a cf       	rjmp	.-204    	; 0x4f90 <main+0xa8>
    505c:	0f 2e       	mov	r0, r31
    505e:	fd ea       	ldi	r31, 0xAD	; 173
    5060:	8f 2e       	mov	r8, r31
    5062:	f4 e2       	ldi	r31, 0x24	; 36
    5064:	9f 2e       	mov	r9, r31
    5066:	f0 2d       	mov	r31, r0
    5068:	ef e9       	ldi	r30, 0x9F	; 159
    506a:	f5 e2       	ldi	r31, 0x25	; 37
    506c:	24 eb       	ldi	r18, 0xB4	; 180
    506e:	35 e2       	ldi	r19, 0x25	; 37
    5070:	d4 01       	movw	r26, r8
		for (j = 0 ; j < 21 ; j++)
		{
			cmdTemp[j] = EXECMD[j];
    5072:	80 81       	ld	r24, Z
    5074:	8d 93       	st	X+, r24
			EXECMD[j] = 0;
    5076:	11 92       	st	Z+, r1
				if(PRGEXEindex < PRGSize) PRGEXEindex++;
			}
		}
		/**********************************************/
		if(cmdIsReady==0) continue;
		for (j = 0 ; j < 21 ; j++)
    5078:	2e 17       	cp	r18, r30
    507a:	3f 07       	cpc	r19, r31
    507c:	d1 f7       	brne	.-12     	; 0x5072 <main+0x18a>
    507e:	60 92 c4 24 	sts	0x24C4, r6	; 0x8024c4 <j>
    5082:	70 92 c5 24 	sts	0x24C5, r7	; 0x8024c5 <j+0x1>
		{
			cmdTemp[j] = EXECMD[j];
			EXECMD[j] = 0;
		}
		cmdExe();
    5086:	0e 94 04 15 	call	0x2a08	; 0x2a08 <_Z6cmdExev>
    508a:	82 ec       	ldi	r24, 0xC2	; 194
    508c:	94 e2       	ldi	r25, 0x24	; 36
		for (j=0;j<21;j++) cmdTemp[j] = 0;
    508e:	f4 01       	movw	r30, r8
    5090:	11 92       	st	Z+, r1
    5092:	4f 01       	movw	r8, r30
    5094:	e8 17       	cp	r30, r24
    5096:	f9 07       	cpc	r31, r25
    5098:	d1 f7       	brne	.-12     	; 0x508e <main+0x1a6>
    509a:	60 92 c4 24 	sts	0x24C4, r6	; 0x8024c4 <j>
    509e:	70 92 c5 24 	sts	0x24C5, r7	; 0x8024c5 <j+0x1>
		cmdIsReady=0;
    50a2:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <cmdIsReady>
    50a6:	74 cf       	rjmp	.-280    	; 0x4f90 <main+0xa8>

000050a8 <__subsf3>:
    50a8:	50 58       	subi	r21, 0x80	; 128

000050aa <__addsf3>:
    50aa:	bb 27       	eor	r27, r27
    50ac:	aa 27       	eor	r26, r26
    50ae:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__addsf3x>
    50b2:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__fp_round>
    50b6:	0e 94 af 29 	call	0x535e	; 0x535e <__fp_pscA>
    50ba:	38 f0       	brcs	.+14     	; 0x50ca <__addsf3+0x20>
    50bc:	0e 94 b6 29 	call	0x536c	; 0x536c <__fp_pscB>
    50c0:	20 f0       	brcs	.+8      	; 0x50ca <__addsf3+0x20>
    50c2:	39 f4       	brne	.+14     	; 0x50d2 <__addsf3+0x28>
    50c4:	9f 3f       	cpi	r25, 0xFF	; 255
    50c6:	19 f4       	brne	.+6      	; 0x50ce <__addsf3+0x24>
    50c8:	26 f4       	brtc	.+8      	; 0x50d2 <__addsf3+0x28>
    50ca:	0c 94 ac 29 	jmp	0x5358	; 0x5358 <__fp_nan>
    50ce:	0e f4       	brtc	.+2      	; 0x50d2 <__addsf3+0x28>
    50d0:	e0 95       	com	r30
    50d2:	e7 fb       	bst	r30, 7
    50d4:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__fp_inf>

000050d8 <__addsf3x>:
    50d8:	e9 2f       	mov	r30, r25
    50da:	0e 94 ce 29 	call	0x539c	; 0x539c <__fp_split3>
    50de:	58 f3       	brcs	.-42     	; 0x50b6 <__addsf3+0xc>
    50e0:	ba 17       	cp	r27, r26
    50e2:	62 07       	cpc	r22, r18
    50e4:	73 07       	cpc	r23, r19
    50e6:	84 07       	cpc	r24, r20
    50e8:	95 07       	cpc	r25, r21
    50ea:	20 f0       	brcs	.+8      	; 0x50f4 <__addsf3x+0x1c>
    50ec:	79 f4       	brne	.+30     	; 0x510c <__addsf3x+0x34>
    50ee:	a6 f5       	brtc	.+104    	; 0x5158 <__addsf3x+0x80>
    50f0:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__fp_zero>
    50f4:	0e f4       	brtc	.+2      	; 0x50f8 <__addsf3x+0x20>
    50f6:	e0 95       	com	r30
    50f8:	0b 2e       	mov	r0, r27
    50fa:	ba 2f       	mov	r27, r26
    50fc:	a0 2d       	mov	r26, r0
    50fe:	0b 01       	movw	r0, r22
    5100:	b9 01       	movw	r22, r18
    5102:	90 01       	movw	r18, r0
    5104:	0c 01       	movw	r0, r24
    5106:	ca 01       	movw	r24, r20
    5108:	a0 01       	movw	r20, r0
    510a:	11 24       	eor	r1, r1
    510c:	ff 27       	eor	r31, r31
    510e:	59 1b       	sub	r21, r25
    5110:	99 f0       	breq	.+38     	; 0x5138 <__addsf3x+0x60>
    5112:	59 3f       	cpi	r21, 0xF9	; 249
    5114:	50 f4       	brcc	.+20     	; 0x512a <__addsf3x+0x52>
    5116:	50 3e       	cpi	r21, 0xE0	; 224
    5118:	68 f1       	brcs	.+90     	; 0x5174 <__addsf3x+0x9c>
    511a:	1a 16       	cp	r1, r26
    511c:	f0 40       	sbci	r31, 0x00	; 0
    511e:	a2 2f       	mov	r26, r18
    5120:	23 2f       	mov	r18, r19
    5122:	34 2f       	mov	r19, r20
    5124:	44 27       	eor	r20, r20
    5126:	58 5f       	subi	r21, 0xF8	; 248
    5128:	f3 cf       	rjmp	.-26     	; 0x5110 <__addsf3x+0x38>
    512a:	46 95       	lsr	r20
    512c:	37 95       	ror	r19
    512e:	27 95       	ror	r18
    5130:	a7 95       	ror	r26
    5132:	f0 40       	sbci	r31, 0x00	; 0
    5134:	53 95       	inc	r21
    5136:	c9 f7       	brne	.-14     	; 0x512a <__addsf3x+0x52>
    5138:	7e f4       	brtc	.+30     	; 0x5158 <__addsf3x+0x80>
    513a:	1f 16       	cp	r1, r31
    513c:	ba 0b       	sbc	r27, r26
    513e:	62 0b       	sbc	r22, r18
    5140:	73 0b       	sbc	r23, r19
    5142:	84 0b       	sbc	r24, r20
    5144:	ba f0       	brmi	.+46     	; 0x5174 <__addsf3x+0x9c>
    5146:	91 50       	subi	r25, 0x01	; 1
    5148:	a1 f0       	breq	.+40     	; 0x5172 <__addsf3x+0x9a>
    514a:	ff 0f       	add	r31, r31
    514c:	bb 1f       	adc	r27, r27
    514e:	66 1f       	adc	r22, r22
    5150:	77 1f       	adc	r23, r23
    5152:	88 1f       	adc	r24, r24
    5154:	c2 f7       	brpl	.-16     	; 0x5146 <__addsf3x+0x6e>
    5156:	0e c0       	rjmp	.+28     	; 0x5174 <__addsf3x+0x9c>
    5158:	ba 0f       	add	r27, r26
    515a:	62 1f       	adc	r22, r18
    515c:	73 1f       	adc	r23, r19
    515e:	84 1f       	adc	r24, r20
    5160:	48 f4       	brcc	.+18     	; 0x5174 <__addsf3x+0x9c>
    5162:	87 95       	ror	r24
    5164:	77 95       	ror	r23
    5166:	67 95       	ror	r22
    5168:	b7 95       	ror	r27
    516a:	f7 95       	ror	r31
    516c:	9e 3f       	cpi	r25, 0xFE	; 254
    516e:	08 f0       	brcs	.+2      	; 0x5172 <__addsf3x+0x9a>
    5170:	b0 cf       	rjmp	.-160    	; 0x50d2 <__addsf3+0x28>
    5172:	93 95       	inc	r25
    5174:	88 0f       	add	r24, r24
    5176:	08 f0       	brcs	.+2      	; 0x517a <__addsf3x+0xa2>
    5178:	99 27       	eor	r25, r25
    517a:	ee 0f       	add	r30, r30
    517c:	97 95       	ror	r25
    517e:	87 95       	ror	r24
    5180:	08 95       	ret

00005182 <__divsf3>:
    5182:	0e 94 d5 28 	call	0x51aa	; 0x51aa <__divsf3x>
    5186:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__fp_round>
    518a:	0e 94 b6 29 	call	0x536c	; 0x536c <__fp_pscB>
    518e:	58 f0       	brcs	.+22     	; 0x51a6 <__divsf3+0x24>
    5190:	0e 94 af 29 	call	0x535e	; 0x535e <__fp_pscA>
    5194:	40 f0       	brcs	.+16     	; 0x51a6 <__divsf3+0x24>
    5196:	29 f4       	brne	.+10     	; 0x51a2 <__divsf3+0x20>
    5198:	5f 3f       	cpi	r21, 0xFF	; 255
    519a:	29 f0       	breq	.+10     	; 0x51a6 <__divsf3+0x24>
    519c:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__fp_inf>
    51a0:	51 11       	cpse	r21, r1
    51a2:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <__fp_szero>
    51a6:	0c 94 ac 29 	jmp	0x5358	; 0x5358 <__fp_nan>

000051aa <__divsf3x>:
    51aa:	0e 94 ce 29 	call	0x539c	; 0x539c <__fp_split3>
    51ae:	68 f3       	brcs	.-38     	; 0x518a <__divsf3+0x8>

000051b0 <__divsf3_pse>:
    51b0:	99 23       	and	r25, r25
    51b2:	b1 f3       	breq	.-20     	; 0x51a0 <__divsf3+0x1e>
    51b4:	55 23       	and	r21, r21
    51b6:	91 f3       	breq	.-28     	; 0x519c <__divsf3+0x1a>
    51b8:	95 1b       	sub	r25, r21
    51ba:	55 0b       	sbc	r21, r21
    51bc:	bb 27       	eor	r27, r27
    51be:	aa 27       	eor	r26, r26
    51c0:	62 17       	cp	r22, r18
    51c2:	73 07       	cpc	r23, r19
    51c4:	84 07       	cpc	r24, r20
    51c6:	38 f0       	brcs	.+14     	; 0x51d6 <__divsf3_pse+0x26>
    51c8:	9f 5f       	subi	r25, 0xFF	; 255
    51ca:	5f 4f       	sbci	r21, 0xFF	; 255
    51cc:	22 0f       	add	r18, r18
    51ce:	33 1f       	adc	r19, r19
    51d0:	44 1f       	adc	r20, r20
    51d2:	aa 1f       	adc	r26, r26
    51d4:	a9 f3       	breq	.-22     	; 0x51c0 <__divsf3_pse+0x10>
    51d6:	35 d0       	rcall	.+106    	; 0x5242 <__divsf3_pse+0x92>
    51d8:	0e 2e       	mov	r0, r30
    51da:	3a f0       	brmi	.+14     	; 0x51ea <__divsf3_pse+0x3a>
    51dc:	e0 e8       	ldi	r30, 0x80	; 128
    51de:	32 d0       	rcall	.+100    	; 0x5244 <__divsf3_pse+0x94>
    51e0:	91 50       	subi	r25, 0x01	; 1
    51e2:	50 40       	sbci	r21, 0x00	; 0
    51e4:	e6 95       	lsr	r30
    51e6:	00 1c       	adc	r0, r0
    51e8:	ca f7       	brpl	.-14     	; 0x51dc <__divsf3_pse+0x2c>
    51ea:	2b d0       	rcall	.+86     	; 0x5242 <__divsf3_pse+0x92>
    51ec:	fe 2f       	mov	r31, r30
    51ee:	29 d0       	rcall	.+82     	; 0x5242 <__divsf3_pse+0x92>
    51f0:	66 0f       	add	r22, r22
    51f2:	77 1f       	adc	r23, r23
    51f4:	88 1f       	adc	r24, r24
    51f6:	bb 1f       	adc	r27, r27
    51f8:	26 17       	cp	r18, r22
    51fa:	37 07       	cpc	r19, r23
    51fc:	48 07       	cpc	r20, r24
    51fe:	ab 07       	cpc	r26, r27
    5200:	b0 e8       	ldi	r27, 0x80	; 128
    5202:	09 f0       	breq	.+2      	; 0x5206 <__divsf3_pse+0x56>
    5204:	bb 0b       	sbc	r27, r27
    5206:	80 2d       	mov	r24, r0
    5208:	bf 01       	movw	r22, r30
    520a:	ff 27       	eor	r31, r31
    520c:	93 58       	subi	r25, 0x83	; 131
    520e:	5f 4f       	sbci	r21, 0xFF	; 255
    5210:	3a f0       	brmi	.+14     	; 0x5220 <__divsf3_pse+0x70>
    5212:	9e 3f       	cpi	r25, 0xFE	; 254
    5214:	51 05       	cpc	r21, r1
    5216:	78 f0       	brcs	.+30     	; 0x5236 <__divsf3_pse+0x86>
    5218:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__fp_inf>
    521c:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <__fp_szero>
    5220:	5f 3f       	cpi	r21, 0xFF	; 255
    5222:	e4 f3       	brlt	.-8      	; 0x521c <__divsf3_pse+0x6c>
    5224:	98 3e       	cpi	r25, 0xE8	; 232
    5226:	d4 f3       	brlt	.-12     	; 0x521c <__divsf3_pse+0x6c>
    5228:	86 95       	lsr	r24
    522a:	77 95       	ror	r23
    522c:	67 95       	ror	r22
    522e:	b7 95       	ror	r27
    5230:	f7 95       	ror	r31
    5232:	9f 5f       	subi	r25, 0xFF	; 255
    5234:	c9 f7       	brne	.-14     	; 0x5228 <__divsf3_pse+0x78>
    5236:	88 0f       	add	r24, r24
    5238:	91 1d       	adc	r25, r1
    523a:	96 95       	lsr	r25
    523c:	87 95       	ror	r24
    523e:	97 f9       	bld	r25, 7
    5240:	08 95       	ret
    5242:	e1 e0       	ldi	r30, 0x01	; 1
    5244:	66 0f       	add	r22, r22
    5246:	77 1f       	adc	r23, r23
    5248:	88 1f       	adc	r24, r24
    524a:	bb 1f       	adc	r27, r27
    524c:	62 17       	cp	r22, r18
    524e:	73 07       	cpc	r23, r19
    5250:	84 07       	cpc	r24, r20
    5252:	ba 07       	cpc	r27, r26
    5254:	20 f0       	brcs	.+8      	; 0x525e <__divsf3_pse+0xae>
    5256:	62 1b       	sub	r22, r18
    5258:	73 0b       	sbc	r23, r19
    525a:	84 0b       	sbc	r24, r20
    525c:	ba 0b       	sbc	r27, r26
    525e:	ee 1f       	adc	r30, r30
    5260:	88 f7       	brcc	.-30     	; 0x5244 <__divsf3_pse+0x94>
    5262:	e0 95       	com	r30
    5264:	08 95       	ret

00005266 <__fixsfsi>:
    5266:	0e 94 3a 29 	call	0x5274	; 0x5274 <__fixunssfsi>
    526a:	68 94       	set
    526c:	b1 11       	cpse	r27, r1
    526e:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <__fp_szero>
    5272:	08 95       	ret

00005274 <__fixunssfsi>:
    5274:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__fp_splitA>
    5278:	88 f0       	brcs	.+34     	; 0x529c <__fixunssfsi+0x28>
    527a:	9f 57       	subi	r25, 0x7F	; 127
    527c:	98 f0       	brcs	.+38     	; 0x52a4 <__fixunssfsi+0x30>
    527e:	b9 2f       	mov	r27, r25
    5280:	99 27       	eor	r25, r25
    5282:	b7 51       	subi	r27, 0x17	; 23
    5284:	b0 f0       	brcs	.+44     	; 0x52b2 <__fixunssfsi+0x3e>
    5286:	e1 f0       	breq	.+56     	; 0x52c0 <__fixunssfsi+0x4c>
    5288:	66 0f       	add	r22, r22
    528a:	77 1f       	adc	r23, r23
    528c:	88 1f       	adc	r24, r24
    528e:	99 1f       	adc	r25, r25
    5290:	1a f0       	brmi	.+6      	; 0x5298 <__fixunssfsi+0x24>
    5292:	ba 95       	dec	r27
    5294:	c9 f7       	brne	.-14     	; 0x5288 <__fixunssfsi+0x14>
    5296:	14 c0       	rjmp	.+40     	; 0x52c0 <__fixunssfsi+0x4c>
    5298:	b1 30       	cpi	r27, 0x01	; 1
    529a:	91 f0       	breq	.+36     	; 0x52c0 <__fixunssfsi+0x4c>
    529c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__fp_zero>
    52a0:	b1 e0       	ldi	r27, 0x01	; 1
    52a2:	08 95       	ret
    52a4:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__fp_zero>
    52a8:	67 2f       	mov	r22, r23
    52aa:	78 2f       	mov	r23, r24
    52ac:	88 27       	eor	r24, r24
    52ae:	b8 5f       	subi	r27, 0xF8	; 248
    52b0:	39 f0       	breq	.+14     	; 0x52c0 <__fixunssfsi+0x4c>
    52b2:	b9 3f       	cpi	r27, 0xF9	; 249
    52b4:	cc f3       	brlt	.-14     	; 0x52a8 <__fixunssfsi+0x34>
    52b6:	86 95       	lsr	r24
    52b8:	77 95       	ror	r23
    52ba:	67 95       	ror	r22
    52bc:	b3 95       	inc	r27
    52be:	d9 f7       	brne	.-10     	; 0x52b6 <__fixunssfsi+0x42>
    52c0:	3e f4       	brtc	.+14     	; 0x52d0 <__fixunssfsi+0x5c>
    52c2:	90 95       	com	r25
    52c4:	80 95       	com	r24
    52c6:	70 95       	com	r23
    52c8:	61 95       	neg	r22
    52ca:	7f 4f       	sbci	r23, 0xFF	; 255
    52cc:	8f 4f       	sbci	r24, 0xFF	; 255
    52ce:	9f 4f       	sbci	r25, 0xFF	; 255
    52d0:	08 95       	ret

000052d2 <__floatunsisf>:
    52d2:	e8 94       	clt
    52d4:	09 c0       	rjmp	.+18     	; 0x52e8 <__floatsisf+0x12>

000052d6 <__floatsisf>:
    52d6:	97 fb       	bst	r25, 7
    52d8:	3e f4       	brtc	.+14     	; 0x52e8 <__floatsisf+0x12>
    52da:	90 95       	com	r25
    52dc:	80 95       	com	r24
    52de:	70 95       	com	r23
    52e0:	61 95       	neg	r22
    52e2:	7f 4f       	sbci	r23, 0xFF	; 255
    52e4:	8f 4f       	sbci	r24, 0xFF	; 255
    52e6:	9f 4f       	sbci	r25, 0xFF	; 255
    52e8:	99 23       	and	r25, r25
    52ea:	a9 f0       	breq	.+42     	; 0x5316 <__floatsisf+0x40>
    52ec:	f9 2f       	mov	r31, r25
    52ee:	96 e9       	ldi	r25, 0x96	; 150
    52f0:	bb 27       	eor	r27, r27
    52f2:	93 95       	inc	r25
    52f4:	f6 95       	lsr	r31
    52f6:	87 95       	ror	r24
    52f8:	77 95       	ror	r23
    52fa:	67 95       	ror	r22
    52fc:	b7 95       	ror	r27
    52fe:	f1 11       	cpse	r31, r1
    5300:	f8 cf       	rjmp	.-16     	; 0x52f2 <__floatsisf+0x1c>
    5302:	fa f4       	brpl	.+62     	; 0x5342 <__floatsisf+0x6c>
    5304:	bb 0f       	add	r27, r27
    5306:	11 f4       	brne	.+4      	; 0x530c <__floatsisf+0x36>
    5308:	60 ff       	sbrs	r22, 0
    530a:	1b c0       	rjmp	.+54     	; 0x5342 <__floatsisf+0x6c>
    530c:	6f 5f       	subi	r22, 0xFF	; 255
    530e:	7f 4f       	sbci	r23, 0xFF	; 255
    5310:	8f 4f       	sbci	r24, 0xFF	; 255
    5312:	9f 4f       	sbci	r25, 0xFF	; 255
    5314:	16 c0       	rjmp	.+44     	; 0x5342 <__floatsisf+0x6c>
    5316:	88 23       	and	r24, r24
    5318:	11 f0       	breq	.+4      	; 0x531e <__floatsisf+0x48>
    531a:	96 e9       	ldi	r25, 0x96	; 150
    531c:	11 c0       	rjmp	.+34     	; 0x5340 <__floatsisf+0x6a>
    531e:	77 23       	and	r23, r23
    5320:	21 f0       	breq	.+8      	; 0x532a <__floatsisf+0x54>
    5322:	9e e8       	ldi	r25, 0x8E	; 142
    5324:	87 2f       	mov	r24, r23
    5326:	76 2f       	mov	r23, r22
    5328:	05 c0       	rjmp	.+10     	; 0x5334 <__floatsisf+0x5e>
    532a:	66 23       	and	r22, r22
    532c:	71 f0       	breq	.+28     	; 0x534a <__floatsisf+0x74>
    532e:	96 e8       	ldi	r25, 0x86	; 134
    5330:	86 2f       	mov	r24, r22
    5332:	70 e0       	ldi	r23, 0x00	; 0
    5334:	60 e0       	ldi	r22, 0x00	; 0
    5336:	2a f0       	brmi	.+10     	; 0x5342 <__floatsisf+0x6c>
    5338:	9a 95       	dec	r25
    533a:	66 0f       	add	r22, r22
    533c:	77 1f       	adc	r23, r23
    533e:	88 1f       	adc	r24, r24
    5340:	da f7       	brpl	.-10     	; 0x5338 <__floatsisf+0x62>
    5342:	88 0f       	add	r24, r24
    5344:	96 95       	lsr	r25
    5346:	87 95       	ror	r24
    5348:	97 f9       	bld	r25, 7
    534a:	08 95       	ret

0000534c <__fp_inf>:
    534c:	97 f9       	bld	r25, 7
    534e:	9f 67       	ori	r25, 0x7F	; 127
    5350:	80 e8       	ldi	r24, 0x80	; 128
    5352:	70 e0       	ldi	r23, 0x00	; 0
    5354:	60 e0       	ldi	r22, 0x00	; 0
    5356:	08 95       	ret

00005358 <__fp_nan>:
    5358:	9f ef       	ldi	r25, 0xFF	; 255
    535a:	80 ec       	ldi	r24, 0xC0	; 192
    535c:	08 95       	ret

0000535e <__fp_pscA>:
    535e:	00 24       	eor	r0, r0
    5360:	0a 94       	dec	r0
    5362:	16 16       	cp	r1, r22
    5364:	17 06       	cpc	r1, r23
    5366:	18 06       	cpc	r1, r24
    5368:	09 06       	cpc	r0, r25
    536a:	08 95       	ret

0000536c <__fp_pscB>:
    536c:	00 24       	eor	r0, r0
    536e:	0a 94       	dec	r0
    5370:	12 16       	cp	r1, r18
    5372:	13 06       	cpc	r1, r19
    5374:	14 06       	cpc	r1, r20
    5376:	05 06       	cpc	r0, r21
    5378:	08 95       	ret

0000537a <__fp_round>:
    537a:	09 2e       	mov	r0, r25
    537c:	03 94       	inc	r0
    537e:	00 0c       	add	r0, r0
    5380:	11 f4       	brne	.+4      	; 0x5386 <__fp_round+0xc>
    5382:	88 23       	and	r24, r24
    5384:	52 f0       	brmi	.+20     	; 0x539a <__fp_round+0x20>
    5386:	bb 0f       	add	r27, r27
    5388:	40 f4       	brcc	.+16     	; 0x539a <__fp_round+0x20>
    538a:	bf 2b       	or	r27, r31
    538c:	11 f4       	brne	.+4      	; 0x5392 <__fp_round+0x18>
    538e:	60 ff       	sbrs	r22, 0
    5390:	04 c0       	rjmp	.+8      	; 0x539a <__fp_round+0x20>
    5392:	6f 5f       	subi	r22, 0xFF	; 255
    5394:	7f 4f       	sbci	r23, 0xFF	; 255
    5396:	8f 4f       	sbci	r24, 0xFF	; 255
    5398:	9f 4f       	sbci	r25, 0xFF	; 255
    539a:	08 95       	ret

0000539c <__fp_split3>:
    539c:	57 fd       	sbrc	r21, 7
    539e:	90 58       	subi	r25, 0x80	; 128
    53a0:	44 0f       	add	r20, r20
    53a2:	55 1f       	adc	r21, r21
    53a4:	59 f0       	breq	.+22     	; 0x53bc <__fp_splitA+0x10>
    53a6:	5f 3f       	cpi	r21, 0xFF	; 255
    53a8:	71 f0       	breq	.+28     	; 0x53c6 <__fp_splitA+0x1a>
    53aa:	47 95       	ror	r20

000053ac <__fp_splitA>:
    53ac:	88 0f       	add	r24, r24
    53ae:	97 fb       	bst	r25, 7
    53b0:	99 1f       	adc	r25, r25
    53b2:	61 f0       	breq	.+24     	; 0x53cc <__fp_splitA+0x20>
    53b4:	9f 3f       	cpi	r25, 0xFF	; 255
    53b6:	79 f0       	breq	.+30     	; 0x53d6 <__fp_splitA+0x2a>
    53b8:	87 95       	ror	r24
    53ba:	08 95       	ret
    53bc:	12 16       	cp	r1, r18
    53be:	13 06       	cpc	r1, r19
    53c0:	14 06       	cpc	r1, r20
    53c2:	55 1f       	adc	r21, r21
    53c4:	f2 cf       	rjmp	.-28     	; 0x53aa <__fp_split3+0xe>
    53c6:	46 95       	lsr	r20
    53c8:	f1 df       	rcall	.-30     	; 0x53ac <__fp_splitA>
    53ca:	08 c0       	rjmp	.+16     	; 0x53dc <__fp_splitA+0x30>
    53cc:	16 16       	cp	r1, r22
    53ce:	17 06       	cpc	r1, r23
    53d0:	18 06       	cpc	r1, r24
    53d2:	99 1f       	adc	r25, r25
    53d4:	f1 cf       	rjmp	.-30     	; 0x53b8 <__fp_splitA+0xc>
    53d6:	86 95       	lsr	r24
    53d8:	71 05       	cpc	r23, r1
    53da:	61 05       	cpc	r22, r1
    53dc:	08 94       	sec
    53de:	08 95       	ret

000053e0 <__fp_zero>:
    53e0:	e8 94       	clt

000053e2 <__fp_szero>:
    53e2:	bb 27       	eor	r27, r27
    53e4:	66 27       	eor	r22, r22
    53e6:	77 27       	eor	r23, r23
    53e8:	cb 01       	movw	r24, r22
    53ea:	97 f9       	bld	r25, 7
    53ec:	08 95       	ret

000053ee <__mulsf3>:
    53ee:	0e 94 0a 2a 	call	0x5414	; 0x5414 <__mulsf3x>
    53f2:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__fp_round>
    53f6:	0e 94 af 29 	call	0x535e	; 0x535e <__fp_pscA>
    53fa:	38 f0       	brcs	.+14     	; 0x540a <__mulsf3+0x1c>
    53fc:	0e 94 b6 29 	call	0x536c	; 0x536c <__fp_pscB>
    5400:	20 f0       	brcs	.+8      	; 0x540a <__mulsf3+0x1c>
    5402:	95 23       	and	r25, r21
    5404:	11 f0       	breq	.+4      	; 0x540a <__mulsf3+0x1c>
    5406:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__fp_inf>
    540a:	0c 94 ac 29 	jmp	0x5358	; 0x5358 <__fp_nan>
    540e:	11 24       	eor	r1, r1
    5410:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <__fp_szero>

00005414 <__mulsf3x>:
    5414:	0e 94 ce 29 	call	0x539c	; 0x539c <__fp_split3>
    5418:	70 f3       	brcs	.-36     	; 0x53f6 <__mulsf3+0x8>

0000541a <__mulsf3_pse>:
    541a:	95 9f       	mul	r25, r21
    541c:	c1 f3       	breq	.-16     	; 0x540e <__mulsf3+0x20>
    541e:	95 0f       	add	r25, r21
    5420:	50 e0       	ldi	r21, 0x00	; 0
    5422:	55 1f       	adc	r21, r21
    5424:	62 9f       	mul	r22, r18
    5426:	f0 01       	movw	r30, r0
    5428:	72 9f       	mul	r23, r18
    542a:	bb 27       	eor	r27, r27
    542c:	f0 0d       	add	r31, r0
    542e:	b1 1d       	adc	r27, r1
    5430:	63 9f       	mul	r22, r19
    5432:	aa 27       	eor	r26, r26
    5434:	f0 0d       	add	r31, r0
    5436:	b1 1d       	adc	r27, r1
    5438:	aa 1f       	adc	r26, r26
    543a:	64 9f       	mul	r22, r20
    543c:	66 27       	eor	r22, r22
    543e:	b0 0d       	add	r27, r0
    5440:	a1 1d       	adc	r26, r1
    5442:	66 1f       	adc	r22, r22
    5444:	82 9f       	mul	r24, r18
    5446:	22 27       	eor	r18, r18
    5448:	b0 0d       	add	r27, r0
    544a:	a1 1d       	adc	r26, r1
    544c:	62 1f       	adc	r22, r18
    544e:	73 9f       	mul	r23, r19
    5450:	b0 0d       	add	r27, r0
    5452:	a1 1d       	adc	r26, r1
    5454:	62 1f       	adc	r22, r18
    5456:	83 9f       	mul	r24, r19
    5458:	a0 0d       	add	r26, r0
    545a:	61 1d       	adc	r22, r1
    545c:	22 1f       	adc	r18, r18
    545e:	74 9f       	mul	r23, r20
    5460:	33 27       	eor	r19, r19
    5462:	a0 0d       	add	r26, r0
    5464:	61 1d       	adc	r22, r1
    5466:	23 1f       	adc	r18, r19
    5468:	84 9f       	mul	r24, r20
    546a:	60 0d       	add	r22, r0
    546c:	21 1d       	adc	r18, r1
    546e:	82 2f       	mov	r24, r18
    5470:	76 2f       	mov	r23, r22
    5472:	6a 2f       	mov	r22, r26
    5474:	11 24       	eor	r1, r1
    5476:	9f 57       	subi	r25, 0x7F	; 127
    5478:	50 40       	sbci	r21, 0x00	; 0
    547a:	9a f0       	brmi	.+38     	; 0x54a2 <__mulsf3_pse+0x88>
    547c:	f1 f0       	breq	.+60     	; 0x54ba <__mulsf3_pse+0xa0>
    547e:	88 23       	and	r24, r24
    5480:	4a f0       	brmi	.+18     	; 0x5494 <__mulsf3_pse+0x7a>
    5482:	ee 0f       	add	r30, r30
    5484:	ff 1f       	adc	r31, r31
    5486:	bb 1f       	adc	r27, r27
    5488:	66 1f       	adc	r22, r22
    548a:	77 1f       	adc	r23, r23
    548c:	88 1f       	adc	r24, r24
    548e:	91 50       	subi	r25, 0x01	; 1
    5490:	50 40       	sbci	r21, 0x00	; 0
    5492:	a9 f7       	brne	.-22     	; 0x547e <__mulsf3_pse+0x64>
    5494:	9e 3f       	cpi	r25, 0xFE	; 254
    5496:	51 05       	cpc	r21, r1
    5498:	80 f0       	brcs	.+32     	; 0x54ba <__mulsf3_pse+0xa0>
    549a:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__fp_inf>
    549e:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <__fp_szero>
    54a2:	5f 3f       	cpi	r21, 0xFF	; 255
    54a4:	e4 f3       	brlt	.-8      	; 0x549e <__mulsf3_pse+0x84>
    54a6:	98 3e       	cpi	r25, 0xE8	; 232
    54a8:	d4 f3       	brlt	.-12     	; 0x549e <__mulsf3_pse+0x84>
    54aa:	86 95       	lsr	r24
    54ac:	77 95       	ror	r23
    54ae:	67 95       	ror	r22
    54b0:	b7 95       	ror	r27
    54b2:	f7 95       	ror	r31
    54b4:	e7 95       	ror	r30
    54b6:	9f 5f       	subi	r25, 0xFF	; 255
    54b8:	c1 f7       	brne	.-16     	; 0x54aa <__mulsf3_pse+0x90>
    54ba:	fe 2b       	or	r31, r30
    54bc:	88 0f       	add	r24, r24
    54be:	91 1d       	adc	r25, r1
    54c0:	96 95       	lsr	r25
    54c2:	87 95       	ror	r24
    54c4:	97 f9       	bld	r25, 7
    54c6:	08 95       	ret

000054c8 <__mulsi3>:
    54c8:	db 01       	movw	r26, r22
    54ca:	8f 93       	push	r24
    54cc:	9f 93       	push	r25
    54ce:	0e 94 b5 2a 	call	0x556a	; 0x556a <__muluhisi3>
    54d2:	bf 91       	pop	r27
    54d4:	af 91       	pop	r26
    54d6:	a2 9f       	mul	r26, r18
    54d8:	80 0d       	add	r24, r0
    54da:	91 1d       	adc	r25, r1
    54dc:	a3 9f       	mul	r26, r19
    54de:	90 0d       	add	r25, r0
    54e0:	b2 9f       	mul	r27, r18
    54e2:	90 0d       	add	r25, r0
    54e4:	11 24       	eor	r1, r1
    54e6:	08 95       	ret

000054e8 <__udivmodsi4>:
    54e8:	a1 e2       	ldi	r26, 0x21	; 33
    54ea:	1a 2e       	mov	r1, r26
    54ec:	aa 1b       	sub	r26, r26
    54ee:	bb 1b       	sub	r27, r27
    54f0:	fd 01       	movw	r30, r26
    54f2:	0d c0       	rjmp	.+26     	; 0x550e <__udivmodsi4_ep>

000054f4 <__udivmodsi4_loop>:
    54f4:	aa 1f       	adc	r26, r26
    54f6:	bb 1f       	adc	r27, r27
    54f8:	ee 1f       	adc	r30, r30
    54fa:	ff 1f       	adc	r31, r31
    54fc:	a2 17       	cp	r26, r18
    54fe:	b3 07       	cpc	r27, r19
    5500:	e4 07       	cpc	r30, r20
    5502:	f5 07       	cpc	r31, r21
    5504:	20 f0       	brcs	.+8      	; 0x550e <__udivmodsi4_ep>
    5506:	a2 1b       	sub	r26, r18
    5508:	b3 0b       	sbc	r27, r19
    550a:	e4 0b       	sbc	r30, r20
    550c:	f5 0b       	sbc	r31, r21

0000550e <__udivmodsi4_ep>:
    550e:	66 1f       	adc	r22, r22
    5510:	77 1f       	adc	r23, r23
    5512:	88 1f       	adc	r24, r24
    5514:	99 1f       	adc	r25, r25
    5516:	1a 94       	dec	r1
    5518:	69 f7       	brne	.-38     	; 0x54f4 <__udivmodsi4_loop>
    551a:	60 95       	com	r22
    551c:	70 95       	com	r23
    551e:	80 95       	com	r24
    5520:	90 95       	com	r25
    5522:	9b 01       	movw	r18, r22
    5524:	ac 01       	movw	r20, r24
    5526:	bd 01       	movw	r22, r26
    5528:	cf 01       	movw	r24, r30
    552a:	08 95       	ret

0000552c <__divmodsi4>:
    552c:	05 2e       	mov	r0, r21
    552e:	97 fb       	bst	r25, 7
    5530:	1e f4       	brtc	.+6      	; 0x5538 <__divmodsi4+0xc>
    5532:	00 94       	com	r0
    5534:	0e 94 ad 2a 	call	0x555a	; 0x555a <__negsi2>
    5538:	57 fd       	sbrc	r21, 7
    553a:	07 d0       	rcall	.+14     	; 0x554a <__divmodsi4_neg2>
    553c:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__udivmodsi4>
    5540:	07 fc       	sbrc	r0, 7
    5542:	03 d0       	rcall	.+6      	; 0x554a <__divmodsi4_neg2>
    5544:	4e f4       	brtc	.+18     	; 0x5558 <__divmodsi4_exit>
    5546:	0c 94 ad 2a 	jmp	0x555a	; 0x555a <__negsi2>

0000554a <__divmodsi4_neg2>:
    554a:	50 95       	com	r21
    554c:	40 95       	com	r20
    554e:	30 95       	com	r19
    5550:	21 95       	neg	r18
    5552:	3f 4f       	sbci	r19, 0xFF	; 255
    5554:	4f 4f       	sbci	r20, 0xFF	; 255
    5556:	5f 4f       	sbci	r21, 0xFF	; 255

00005558 <__divmodsi4_exit>:
    5558:	08 95       	ret

0000555a <__negsi2>:
    555a:	90 95       	com	r25
    555c:	80 95       	com	r24
    555e:	70 95       	com	r23
    5560:	61 95       	neg	r22
    5562:	7f 4f       	sbci	r23, 0xFF	; 255
    5564:	8f 4f       	sbci	r24, 0xFF	; 255
    5566:	9f 4f       	sbci	r25, 0xFF	; 255
    5568:	08 95       	ret

0000556a <__muluhisi3>:
    556a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <__umulhisi3>
    556e:	a5 9f       	mul	r26, r21
    5570:	90 0d       	add	r25, r0
    5572:	b4 9f       	mul	r27, r20
    5574:	90 0d       	add	r25, r0
    5576:	a4 9f       	mul	r26, r20
    5578:	80 0d       	add	r24, r0
    557a:	91 1d       	adc	r25, r1
    557c:	11 24       	eor	r1, r1
    557e:	08 95       	ret

00005580 <__umulhisi3>:
    5580:	a2 9f       	mul	r26, r18
    5582:	b0 01       	movw	r22, r0
    5584:	b3 9f       	mul	r27, r19
    5586:	c0 01       	movw	r24, r0
    5588:	a3 9f       	mul	r26, r19
    558a:	70 0d       	add	r23, r0
    558c:	81 1d       	adc	r24, r1
    558e:	11 24       	eor	r1, r1
    5590:	91 1d       	adc	r25, r1
    5592:	b2 9f       	mul	r27, r18
    5594:	70 0d       	add	r23, r0
    5596:	81 1d       	adc	r24, r1
    5598:	11 24       	eor	r1, r1
    559a:	91 1d       	adc	r25, r1
    559c:	08 95       	ret

0000559e <atof>:
    559e:	66 27       	eor	r22, r22
    55a0:	77 27       	eor	r23, r23
    55a2:	0c 94 bf 2d 	jmp	0x5b7e	; 0x5b7e <strtod>

000055a6 <atol>:
    55a6:	1f 93       	push	r17
    55a8:	fc 01       	movw	r30, r24
    55aa:	99 27       	eor	r25, r25
    55ac:	88 27       	eor	r24, r24
    55ae:	bc 01       	movw	r22, r24
    55b0:	e8 94       	clt
    55b2:	11 91       	ld	r17, Z+
    55b4:	10 32       	cpi	r17, 0x20	; 32
    55b6:	e9 f3       	breq	.-6      	; 0x55b2 <atol+0xc>
    55b8:	19 30       	cpi	r17, 0x09	; 9
    55ba:	10 f0       	brcs	.+4      	; 0x55c0 <atol+0x1a>
    55bc:	1e 30       	cpi	r17, 0x0E	; 14
    55be:	c8 f3       	brcs	.-14     	; 0x55b2 <atol+0xc>
    55c0:	1b 32       	cpi	r17, 0x2B	; 43
    55c2:	51 f0       	breq	.+20     	; 0x55d8 <atol+0x32>
    55c4:	1d 32       	cpi	r17, 0x2D	; 45
    55c6:	49 f4       	brne	.+18     	; 0x55da <atol+0x34>
    55c8:	68 94       	set
    55ca:	06 c0       	rjmp	.+12     	; 0x55d8 <atol+0x32>
    55cc:	0e 94 17 2b 	call	0x562e	; 0x562e <__mulsi_const_10>
    55d0:	61 0f       	add	r22, r17
    55d2:	71 1d       	adc	r23, r1
    55d4:	81 1d       	adc	r24, r1
    55d6:	91 1d       	adc	r25, r1
    55d8:	11 91       	ld	r17, Z+
    55da:	10 53       	subi	r17, 0x30	; 48
    55dc:	1a 30       	cpi	r17, 0x0A	; 10
    55de:	b0 f3       	brcs	.-20     	; 0x55cc <atol+0x26>
    55e0:	3e f4       	brtc	.+14     	; 0x55f0 <atol+0x4a>
    55e2:	90 95       	com	r25
    55e4:	80 95       	com	r24
    55e6:	70 95       	com	r23
    55e8:	61 95       	neg	r22
    55ea:	7f 4f       	sbci	r23, 0xFF	; 255
    55ec:	8f 4f       	sbci	r24, 0xFF	; 255
    55ee:	9f 4f       	sbci	r25, 0xFF	; 255
    55f0:	1f 91       	pop	r17
    55f2:	08 95       	ret

000055f4 <strncmp>:
    55f4:	fb 01       	movw	r30, r22
    55f6:	dc 01       	movw	r26, r24
    55f8:	41 50       	subi	r20, 0x01	; 1
    55fa:	50 40       	sbci	r21, 0x00	; 0
    55fc:	30 f0       	brcs	.+12     	; 0x560a <strncmp+0x16>
    55fe:	8d 91       	ld	r24, X+
    5600:	01 90       	ld	r0, Z+
    5602:	80 19       	sub	r24, r0
    5604:	19 f4       	brne	.+6      	; 0x560c <strncmp+0x18>
    5606:	00 20       	and	r0, r0
    5608:	b9 f7       	brne	.-18     	; 0x55f8 <strncmp+0x4>
    560a:	88 1b       	sub	r24, r24
    560c:	99 0b       	sbc	r25, r25
    560e:	08 95       	ret

00005610 <__ltoa_ncheck>:
    5610:	bb 27       	eor	r27, r27
    5612:	2a 30       	cpi	r18, 0x0A	; 10
    5614:	51 f4       	brne	.+20     	; 0x562a <__ltoa_ncheck+0x1a>
    5616:	99 23       	and	r25, r25
    5618:	42 f4       	brpl	.+16     	; 0x562a <__ltoa_ncheck+0x1a>
    561a:	bd e2       	ldi	r27, 0x2D	; 45
    561c:	90 95       	com	r25
    561e:	80 95       	com	r24
    5620:	70 95       	com	r23
    5622:	61 95       	neg	r22
    5624:	7f 4f       	sbci	r23, 0xFF	; 255
    5626:	8f 4f       	sbci	r24, 0xFF	; 255
    5628:	9f 4f       	sbci	r25, 0xFF	; 255
    562a:	0c 94 2d 2b 	jmp	0x565a	; 0x565a <__ultoa_common>

0000562e <__mulsi_const_10>:
    562e:	59 2f       	mov	r21, r25
    5630:	48 2f       	mov	r20, r24
    5632:	37 2f       	mov	r19, r23
    5634:	26 2f       	mov	r18, r22
    5636:	66 0f       	add	r22, r22
    5638:	77 1f       	adc	r23, r23
    563a:	88 1f       	adc	r24, r24
    563c:	99 1f       	adc	r25, r25
    563e:	66 0f       	add	r22, r22
    5640:	77 1f       	adc	r23, r23
    5642:	88 1f       	adc	r24, r24
    5644:	99 1f       	adc	r25, r25
    5646:	62 0f       	add	r22, r18
    5648:	73 1f       	adc	r23, r19
    564a:	84 1f       	adc	r24, r20
    564c:	95 1f       	adc	r25, r21
    564e:	66 0f       	add	r22, r22
    5650:	77 1f       	adc	r23, r23
    5652:	88 1f       	adc	r24, r24
    5654:	99 1f       	adc	r25, r25
    5656:	08 95       	ret

00005658 <__ultoa_ncheck>:
    5658:	bb 27       	eor	r27, r27

0000565a <__ultoa_common>:
    565a:	fa 01       	movw	r30, r20
    565c:	a6 2f       	mov	r26, r22
    565e:	62 17       	cp	r22, r18
    5660:	71 05       	cpc	r23, r1
    5662:	81 05       	cpc	r24, r1
    5664:	91 05       	cpc	r25, r1
    5666:	33 0b       	sbc	r19, r19
    5668:	30 fb       	bst	r19, 0
    566a:	66 f0       	brts	.+24     	; 0x5684 <__ultoa_common+0x2a>
    566c:	aa 27       	eor	r26, r26
    566e:	66 0f       	add	r22, r22
    5670:	77 1f       	adc	r23, r23
    5672:	88 1f       	adc	r24, r24
    5674:	99 1f       	adc	r25, r25
    5676:	aa 1f       	adc	r26, r26
    5678:	a2 17       	cp	r26, r18
    567a:	10 f0       	brcs	.+4      	; 0x5680 <__ultoa_common+0x26>
    567c:	a2 1b       	sub	r26, r18
    567e:	63 95       	inc	r22
    5680:	38 50       	subi	r19, 0x08	; 8
    5682:	a9 f7       	brne	.-22     	; 0x566e <__ultoa_common+0x14>
    5684:	a0 5d       	subi	r26, 0xD0	; 208
    5686:	aa 33       	cpi	r26, 0x3A	; 58
    5688:	08 f0       	brcs	.+2      	; 0x568c <__ultoa_common+0x32>
    568a:	a9 5d       	subi	r26, 0xD9	; 217
    568c:	a1 93       	st	Z+, r26
    568e:	36 f7       	brtc	.-52     	; 0x565c <__ultoa_common+0x2>
    5690:	b1 11       	cpse	r27, r1
    5692:	b1 93       	st	Z+, r27
    5694:	10 82       	st	Z, r1
    5696:	ca 01       	movw	r24, r20
    5698:	0c 94 52 2f 	jmp	0x5ea4	; 0x5ea4 <strrev>

0000569c <printf>:
    569c:	cf 93       	push	r28
    569e:	df 93       	push	r29
    56a0:	cd b7       	in	r28, 0x3d	; 61
    56a2:	de b7       	in	r29, 0x3e	; 62
    56a4:	ae 01       	movw	r20, r28
    56a6:	4a 5f       	subi	r20, 0xFA	; 250
    56a8:	5f 4f       	sbci	r21, 0xFF	; 255
    56aa:	fa 01       	movw	r30, r20
    56ac:	61 91       	ld	r22, Z+
    56ae:	71 91       	ld	r23, Z+
    56b0:	af 01       	movw	r20, r30
    56b2:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <__iob+0x2>
    56b6:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <__iob+0x3>
    56ba:	0e 94 bb 2b 	call	0x5776	; 0x5776 <vfprintf>
    56be:	df 91       	pop	r29
    56c0:	cf 91       	pop	r28
    56c2:	08 95       	ret

000056c4 <puts>:
    56c4:	0f 93       	push	r16
    56c6:	1f 93       	push	r17
    56c8:	cf 93       	push	r28
    56ca:	df 93       	push	r29
    56cc:	e0 91 3e 27 	lds	r30, 0x273E	; 0x80273e <__iob+0x2>
    56d0:	f0 91 3f 27 	lds	r31, 0x273F	; 0x80273f <__iob+0x3>
    56d4:	23 81       	ldd	r18, Z+3	; 0x03
    56d6:	21 ff       	sbrs	r18, 1
    56d8:	1b c0       	rjmp	.+54     	; 0x5710 <puts+0x4c>
    56da:	8c 01       	movw	r16, r24
    56dc:	d0 e0       	ldi	r29, 0x00	; 0
    56de:	c0 e0       	ldi	r28, 0x00	; 0
    56e0:	f8 01       	movw	r30, r16
    56e2:	81 91       	ld	r24, Z+
    56e4:	8f 01       	movw	r16, r30
    56e6:	60 91 3e 27 	lds	r22, 0x273E	; 0x80273e <__iob+0x2>
    56ea:	70 91 3f 27 	lds	r23, 0x273F	; 0x80273f <__iob+0x3>
    56ee:	db 01       	movw	r26, r22
    56f0:	18 96       	adiw	r26, 0x08	; 8
    56f2:	ed 91       	ld	r30, X+
    56f4:	fc 91       	ld	r31, X
    56f6:	19 97       	sbiw	r26, 0x09	; 9
    56f8:	88 23       	and	r24, r24
    56fa:	31 f0       	breq	.+12     	; 0x5708 <puts+0x44>
    56fc:	19 95       	eicall
    56fe:	89 2b       	or	r24, r25
    5700:	79 f3       	breq	.-34     	; 0x56e0 <puts+0x1c>
    5702:	df ef       	ldi	r29, 0xFF	; 255
    5704:	cf ef       	ldi	r28, 0xFF	; 255
    5706:	ec cf       	rjmp	.-40     	; 0x56e0 <puts+0x1c>
    5708:	8a e0       	ldi	r24, 0x0A	; 10
    570a:	19 95       	eicall
    570c:	89 2b       	or	r24, r25
    570e:	19 f0       	breq	.+6      	; 0x5716 <puts+0x52>
    5710:	8f ef       	ldi	r24, 0xFF	; 255
    5712:	9f ef       	ldi	r25, 0xFF	; 255
    5714:	02 c0       	rjmp	.+4      	; 0x571a <puts+0x56>
    5716:	8d 2f       	mov	r24, r29
    5718:	9c 2f       	mov	r25, r28
    571a:	df 91       	pop	r29
    571c:	cf 91       	pop	r28
    571e:	1f 91       	pop	r17
    5720:	0f 91       	pop	r16
    5722:	08 95       	ret

00005724 <sprintf>:
    5724:	0f 93       	push	r16
    5726:	1f 93       	push	r17
    5728:	cf 93       	push	r28
    572a:	df 93       	push	r29
    572c:	cd b7       	in	r28, 0x3d	; 61
    572e:	de b7       	in	r29, 0x3e	; 62
    5730:	2e 97       	sbiw	r28, 0x0e	; 14
    5732:	cd bf       	out	0x3d, r28	; 61
    5734:	de bf       	out	0x3e, r29	; 62
    5736:	0e 89       	ldd	r16, Y+22	; 0x16
    5738:	1f 89       	ldd	r17, Y+23	; 0x17
    573a:	86 e0       	ldi	r24, 0x06	; 6
    573c:	8c 83       	std	Y+4, r24	; 0x04
    573e:	09 83       	std	Y+1, r16	; 0x01
    5740:	1a 83       	std	Y+2, r17	; 0x02
    5742:	8f ef       	ldi	r24, 0xFF	; 255
    5744:	9f e7       	ldi	r25, 0x7F	; 127
    5746:	8d 83       	std	Y+5, r24	; 0x05
    5748:	9e 83       	std	Y+6, r25	; 0x06
    574a:	ae 01       	movw	r20, r28
    574c:	46 5e       	subi	r20, 0xE6	; 230
    574e:	5f 4f       	sbci	r21, 0xFF	; 255
    5750:	68 8d       	ldd	r22, Y+24	; 0x18
    5752:	79 8d       	ldd	r23, Y+25	; 0x19
    5754:	ce 01       	movw	r24, r28
    5756:	01 96       	adiw	r24, 0x01	; 1
    5758:	0e 94 bb 2b 	call	0x5776	; 0x5776 <vfprintf>
    575c:	ef 81       	ldd	r30, Y+7	; 0x07
    575e:	f8 85       	ldd	r31, Y+8	; 0x08
    5760:	e0 0f       	add	r30, r16
    5762:	f1 1f       	adc	r31, r17
    5764:	10 82       	st	Z, r1
    5766:	2e 96       	adiw	r28, 0x0e	; 14
    5768:	cd bf       	out	0x3d, r28	; 61
    576a:	de bf       	out	0x3e, r29	; 62
    576c:	df 91       	pop	r29
    576e:	cf 91       	pop	r28
    5770:	1f 91       	pop	r17
    5772:	0f 91       	pop	r16
    5774:	08 95       	ret

00005776 <vfprintf>:
    5776:	2f 92       	push	r2
    5778:	3f 92       	push	r3
    577a:	4f 92       	push	r4
    577c:	5f 92       	push	r5
    577e:	6f 92       	push	r6
    5780:	7f 92       	push	r7
    5782:	8f 92       	push	r8
    5784:	9f 92       	push	r9
    5786:	af 92       	push	r10
    5788:	bf 92       	push	r11
    578a:	cf 92       	push	r12
    578c:	df 92       	push	r13
    578e:	ef 92       	push	r14
    5790:	ff 92       	push	r15
    5792:	0f 93       	push	r16
    5794:	1f 93       	push	r17
    5796:	cf 93       	push	r28
    5798:	df 93       	push	r29
    579a:	cd b7       	in	r28, 0x3d	; 61
    579c:	de b7       	in	r29, 0x3e	; 62
    579e:	2b 97       	sbiw	r28, 0x0b	; 11
    57a0:	cd bf       	out	0x3d, r28	; 61
    57a2:	de bf       	out	0x3e, r29	; 62
    57a4:	6c 01       	movw	r12, r24
    57a6:	7b 01       	movw	r14, r22
    57a8:	8a 01       	movw	r16, r20
    57aa:	fc 01       	movw	r30, r24
    57ac:	16 82       	std	Z+6, r1	; 0x06
    57ae:	17 82       	std	Z+7, r1	; 0x07
    57b0:	83 81       	ldd	r24, Z+3	; 0x03
    57b2:	81 ff       	sbrs	r24, 1
    57b4:	cc c1       	rjmp	.+920    	; 0x5b4e <vfprintf+0x3d8>
    57b6:	ce 01       	movw	r24, r28
    57b8:	01 96       	adiw	r24, 0x01	; 1
    57ba:	3c 01       	movw	r6, r24
    57bc:	f6 01       	movw	r30, r12
    57be:	93 81       	ldd	r25, Z+3	; 0x03
    57c0:	f7 01       	movw	r30, r14
    57c2:	93 fd       	sbrc	r25, 3
    57c4:	85 91       	lpm	r24, Z+
    57c6:	93 ff       	sbrs	r25, 3
    57c8:	81 91       	ld	r24, Z+
    57ca:	7f 01       	movw	r14, r30
    57cc:	88 23       	and	r24, r24
    57ce:	09 f4       	brne	.+2      	; 0x57d2 <vfprintf+0x5c>
    57d0:	ba c1       	rjmp	.+884    	; 0x5b46 <vfprintf+0x3d0>
    57d2:	85 32       	cpi	r24, 0x25	; 37
    57d4:	39 f4       	brne	.+14     	; 0x57e4 <vfprintf+0x6e>
    57d6:	93 fd       	sbrc	r25, 3
    57d8:	85 91       	lpm	r24, Z+
    57da:	93 ff       	sbrs	r25, 3
    57dc:	81 91       	ld	r24, Z+
    57de:	7f 01       	movw	r14, r30
    57e0:	85 32       	cpi	r24, 0x25	; 37
    57e2:	29 f4       	brne	.+10     	; 0x57ee <vfprintf+0x78>
    57e4:	b6 01       	movw	r22, r12
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    57ec:	e7 cf       	rjmp	.-50     	; 0x57bc <vfprintf+0x46>
    57ee:	91 2c       	mov	r9, r1
    57f0:	21 2c       	mov	r2, r1
    57f2:	31 2c       	mov	r3, r1
    57f4:	ff e1       	ldi	r31, 0x1F	; 31
    57f6:	f3 15       	cp	r31, r3
    57f8:	d8 f0       	brcs	.+54     	; 0x5830 <vfprintf+0xba>
    57fa:	8b 32       	cpi	r24, 0x2B	; 43
    57fc:	79 f0       	breq	.+30     	; 0x581c <vfprintf+0xa6>
    57fe:	38 f4       	brcc	.+14     	; 0x580e <vfprintf+0x98>
    5800:	80 32       	cpi	r24, 0x20	; 32
    5802:	79 f0       	breq	.+30     	; 0x5822 <vfprintf+0xac>
    5804:	83 32       	cpi	r24, 0x23	; 35
    5806:	a1 f4       	brne	.+40     	; 0x5830 <vfprintf+0xba>
    5808:	23 2d       	mov	r18, r3
    580a:	20 61       	ori	r18, 0x10	; 16
    580c:	1d c0       	rjmp	.+58     	; 0x5848 <vfprintf+0xd2>
    580e:	8d 32       	cpi	r24, 0x2D	; 45
    5810:	61 f0       	breq	.+24     	; 0x582a <vfprintf+0xb4>
    5812:	80 33       	cpi	r24, 0x30	; 48
    5814:	69 f4       	brne	.+26     	; 0x5830 <vfprintf+0xba>
    5816:	23 2d       	mov	r18, r3
    5818:	21 60       	ori	r18, 0x01	; 1
    581a:	16 c0       	rjmp	.+44     	; 0x5848 <vfprintf+0xd2>
    581c:	83 2d       	mov	r24, r3
    581e:	82 60       	ori	r24, 0x02	; 2
    5820:	38 2e       	mov	r3, r24
    5822:	e3 2d       	mov	r30, r3
    5824:	e4 60       	ori	r30, 0x04	; 4
    5826:	3e 2e       	mov	r3, r30
    5828:	2a c0       	rjmp	.+84     	; 0x587e <vfprintf+0x108>
    582a:	f3 2d       	mov	r31, r3
    582c:	f8 60       	ori	r31, 0x08	; 8
    582e:	1d c0       	rjmp	.+58     	; 0x586a <vfprintf+0xf4>
    5830:	37 fc       	sbrc	r3, 7
    5832:	2d c0       	rjmp	.+90     	; 0x588e <vfprintf+0x118>
    5834:	20 ed       	ldi	r18, 0xD0	; 208
    5836:	28 0f       	add	r18, r24
    5838:	2a 30       	cpi	r18, 0x0A	; 10
    583a:	40 f0       	brcs	.+16     	; 0x584c <vfprintf+0xd6>
    583c:	8e 32       	cpi	r24, 0x2E	; 46
    583e:	b9 f4       	brne	.+46     	; 0x586e <vfprintf+0xf8>
    5840:	36 fc       	sbrc	r3, 6
    5842:	81 c1       	rjmp	.+770    	; 0x5b46 <vfprintf+0x3d0>
    5844:	23 2d       	mov	r18, r3
    5846:	20 64       	ori	r18, 0x40	; 64
    5848:	32 2e       	mov	r3, r18
    584a:	19 c0       	rjmp	.+50     	; 0x587e <vfprintf+0x108>
    584c:	36 fe       	sbrs	r3, 6
    584e:	06 c0       	rjmp	.+12     	; 0x585c <vfprintf+0xe6>
    5850:	8a e0       	ldi	r24, 0x0A	; 10
    5852:	98 9e       	mul	r9, r24
    5854:	20 0d       	add	r18, r0
    5856:	11 24       	eor	r1, r1
    5858:	92 2e       	mov	r9, r18
    585a:	11 c0       	rjmp	.+34     	; 0x587e <vfprintf+0x108>
    585c:	ea e0       	ldi	r30, 0x0A	; 10
    585e:	2e 9e       	mul	r2, r30
    5860:	20 0d       	add	r18, r0
    5862:	11 24       	eor	r1, r1
    5864:	22 2e       	mov	r2, r18
    5866:	f3 2d       	mov	r31, r3
    5868:	f0 62       	ori	r31, 0x20	; 32
    586a:	3f 2e       	mov	r3, r31
    586c:	08 c0       	rjmp	.+16     	; 0x587e <vfprintf+0x108>
    586e:	8c 36       	cpi	r24, 0x6C	; 108
    5870:	21 f4       	brne	.+8      	; 0x587a <vfprintf+0x104>
    5872:	83 2d       	mov	r24, r3
    5874:	80 68       	ori	r24, 0x80	; 128
    5876:	38 2e       	mov	r3, r24
    5878:	02 c0       	rjmp	.+4      	; 0x587e <vfprintf+0x108>
    587a:	88 36       	cpi	r24, 0x68	; 104
    587c:	41 f4       	brne	.+16     	; 0x588e <vfprintf+0x118>
    587e:	f7 01       	movw	r30, r14
    5880:	93 fd       	sbrc	r25, 3
    5882:	85 91       	lpm	r24, Z+
    5884:	93 ff       	sbrs	r25, 3
    5886:	81 91       	ld	r24, Z+
    5888:	7f 01       	movw	r14, r30
    588a:	81 11       	cpse	r24, r1
    588c:	b3 cf       	rjmp	.-154    	; 0x57f4 <vfprintf+0x7e>
    588e:	98 2f       	mov	r25, r24
    5890:	9f 7d       	andi	r25, 0xDF	; 223
    5892:	95 54       	subi	r25, 0x45	; 69
    5894:	93 30       	cpi	r25, 0x03	; 3
    5896:	28 f4       	brcc	.+10     	; 0x58a2 <vfprintf+0x12c>
    5898:	0c 5f       	subi	r16, 0xFC	; 252
    589a:	1f 4f       	sbci	r17, 0xFF	; 255
    589c:	9f e3       	ldi	r25, 0x3F	; 63
    589e:	99 83       	std	Y+1, r25	; 0x01
    58a0:	0d c0       	rjmp	.+26     	; 0x58bc <vfprintf+0x146>
    58a2:	83 36       	cpi	r24, 0x63	; 99
    58a4:	31 f0       	breq	.+12     	; 0x58b2 <vfprintf+0x13c>
    58a6:	83 37       	cpi	r24, 0x73	; 115
    58a8:	71 f0       	breq	.+28     	; 0x58c6 <vfprintf+0x150>
    58aa:	83 35       	cpi	r24, 0x53	; 83
    58ac:	09 f0       	breq	.+2      	; 0x58b0 <vfprintf+0x13a>
    58ae:	59 c0       	rjmp	.+178    	; 0x5962 <vfprintf+0x1ec>
    58b0:	21 c0       	rjmp	.+66     	; 0x58f4 <vfprintf+0x17e>
    58b2:	f8 01       	movw	r30, r16
    58b4:	80 81       	ld	r24, Z
    58b6:	89 83       	std	Y+1, r24	; 0x01
    58b8:	0e 5f       	subi	r16, 0xFE	; 254
    58ba:	1f 4f       	sbci	r17, 0xFF	; 255
    58bc:	88 24       	eor	r8, r8
    58be:	83 94       	inc	r8
    58c0:	91 2c       	mov	r9, r1
    58c2:	53 01       	movw	r10, r6
    58c4:	13 c0       	rjmp	.+38     	; 0x58ec <vfprintf+0x176>
    58c6:	28 01       	movw	r4, r16
    58c8:	f2 e0       	ldi	r31, 0x02	; 2
    58ca:	4f 0e       	add	r4, r31
    58cc:	51 1c       	adc	r5, r1
    58ce:	f8 01       	movw	r30, r16
    58d0:	a0 80       	ld	r10, Z
    58d2:	b1 80       	ldd	r11, Z+1	; 0x01
    58d4:	36 fe       	sbrs	r3, 6
    58d6:	03 c0       	rjmp	.+6      	; 0x58de <vfprintf+0x168>
    58d8:	69 2d       	mov	r22, r9
    58da:	70 e0       	ldi	r23, 0x00	; 0
    58dc:	02 c0       	rjmp	.+4      	; 0x58e2 <vfprintf+0x16c>
    58de:	6f ef       	ldi	r22, 0xFF	; 255
    58e0:	7f ef       	ldi	r23, 0xFF	; 255
    58e2:	c5 01       	movw	r24, r10
    58e4:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <strnlen>
    58e8:	4c 01       	movw	r8, r24
    58ea:	82 01       	movw	r16, r4
    58ec:	f3 2d       	mov	r31, r3
    58ee:	ff 77       	andi	r31, 0x7F	; 127
    58f0:	3f 2e       	mov	r3, r31
    58f2:	16 c0       	rjmp	.+44     	; 0x5920 <vfprintf+0x1aa>
    58f4:	28 01       	movw	r4, r16
    58f6:	22 e0       	ldi	r18, 0x02	; 2
    58f8:	42 0e       	add	r4, r18
    58fa:	51 1c       	adc	r5, r1
    58fc:	f8 01       	movw	r30, r16
    58fe:	a0 80       	ld	r10, Z
    5900:	b1 80       	ldd	r11, Z+1	; 0x01
    5902:	36 fe       	sbrs	r3, 6
    5904:	03 c0       	rjmp	.+6      	; 0x590c <vfprintf+0x196>
    5906:	69 2d       	mov	r22, r9
    5908:	70 e0       	ldi	r23, 0x00	; 0
    590a:	02 c0       	rjmp	.+4      	; 0x5910 <vfprintf+0x19a>
    590c:	6f ef       	ldi	r22, 0xFF	; 255
    590e:	7f ef       	ldi	r23, 0xFF	; 255
    5910:	c5 01       	movw	r24, r10
    5912:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <strnlen_P>
    5916:	4c 01       	movw	r8, r24
    5918:	f3 2d       	mov	r31, r3
    591a:	f0 68       	ori	r31, 0x80	; 128
    591c:	3f 2e       	mov	r3, r31
    591e:	82 01       	movw	r16, r4
    5920:	33 fc       	sbrc	r3, 3
    5922:	1b c0       	rjmp	.+54     	; 0x595a <vfprintf+0x1e4>
    5924:	82 2d       	mov	r24, r2
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	88 16       	cp	r8, r24
    592a:	99 06       	cpc	r9, r25
    592c:	b0 f4       	brcc	.+44     	; 0x595a <vfprintf+0x1e4>
    592e:	b6 01       	movw	r22, r12
    5930:	80 e2       	ldi	r24, 0x20	; 32
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    5938:	2a 94       	dec	r2
    593a:	f4 cf       	rjmp	.-24     	; 0x5924 <vfprintf+0x1ae>
    593c:	f5 01       	movw	r30, r10
    593e:	37 fc       	sbrc	r3, 7
    5940:	85 91       	lpm	r24, Z+
    5942:	37 fe       	sbrs	r3, 7
    5944:	81 91       	ld	r24, Z+
    5946:	5f 01       	movw	r10, r30
    5948:	b6 01       	movw	r22, r12
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    5950:	21 10       	cpse	r2, r1
    5952:	2a 94       	dec	r2
    5954:	21 e0       	ldi	r18, 0x01	; 1
    5956:	82 1a       	sub	r8, r18
    5958:	91 08       	sbc	r9, r1
    595a:	81 14       	cp	r8, r1
    595c:	91 04       	cpc	r9, r1
    595e:	71 f7       	brne	.-36     	; 0x593c <vfprintf+0x1c6>
    5960:	e8 c0       	rjmp	.+464    	; 0x5b32 <vfprintf+0x3bc>
    5962:	84 36       	cpi	r24, 0x64	; 100
    5964:	11 f0       	breq	.+4      	; 0x596a <vfprintf+0x1f4>
    5966:	89 36       	cpi	r24, 0x69	; 105
    5968:	41 f5       	brne	.+80     	; 0x59ba <vfprintf+0x244>
    596a:	f8 01       	movw	r30, r16
    596c:	37 fe       	sbrs	r3, 7
    596e:	07 c0       	rjmp	.+14     	; 0x597e <vfprintf+0x208>
    5970:	60 81       	ld	r22, Z
    5972:	71 81       	ldd	r23, Z+1	; 0x01
    5974:	82 81       	ldd	r24, Z+2	; 0x02
    5976:	93 81       	ldd	r25, Z+3	; 0x03
    5978:	0c 5f       	subi	r16, 0xFC	; 252
    597a:	1f 4f       	sbci	r17, 0xFF	; 255
    597c:	08 c0       	rjmp	.+16     	; 0x598e <vfprintf+0x218>
    597e:	60 81       	ld	r22, Z
    5980:	71 81       	ldd	r23, Z+1	; 0x01
    5982:	07 2e       	mov	r0, r23
    5984:	00 0c       	add	r0, r0
    5986:	88 0b       	sbc	r24, r24
    5988:	99 0b       	sbc	r25, r25
    598a:	0e 5f       	subi	r16, 0xFE	; 254
    598c:	1f 4f       	sbci	r17, 0xFF	; 255
    598e:	f3 2d       	mov	r31, r3
    5990:	ff 76       	andi	r31, 0x6F	; 111
    5992:	3f 2e       	mov	r3, r31
    5994:	97 ff       	sbrs	r25, 7
    5996:	09 c0       	rjmp	.+18     	; 0x59aa <vfprintf+0x234>
    5998:	90 95       	com	r25
    599a:	80 95       	com	r24
    599c:	70 95       	com	r23
    599e:	61 95       	neg	r22
    59a0:	7f 4f       	sbci	r23, 0xFF	; 255
    59a2:	8f 4f       	sbci	r24, 0xFF	; 255
    59a4:	9f 4f       	sbci	r25, 0xFF	; 255
    59a6:	f0 68       	ori	r31, 0x80	; 128
    59a8:	3f 2e       	mov	r3, r31
    59aa:	2a e0       	ldi	r18, 0x0A	; 10
    59ac:	30 e0       	ldi	r19, 0x00	; 0
    59ae:	a3 01       	movw	r20, r6
    59b0:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__ultoa_invert>
    59b4:	88 2e       	mov	r8, r24
    59b6:	86 18       	sub	r8, r6
    59b8:	45 c0       	rjmp	.+138    	; 0x5a44 <vfprintf+0x2ce>
    59ba:	85 37       	cpi	r24, 0x75	; 117
    59bc:	31 f4       	brne	.+12     	; 0x59ca <vfprintf+0x254>
    59be:	23 2d       	mov	r18, r3
    59c0:	2f 7e       	andi	r18, 0xEF	; 239
    59c2:	b2 2e       	mov	r11, r18
    59c4:	2a e0       	ldi	r18, 0x0A	; 10
    59c6:	30 e0       	ldi	r19, 0x00	; 0
    59c8:	25 c0       	rjmp	.+74     	; 0x5a14 <vfprintf+0x29e>
    59ca:	93 2d       	mov	r25, r3
    59cc:	99 7f       	andi	r25, 0xF9	; 249
    59ce:	b9 2e       	mov	r11, r25
    59d0:	8f 36       	cpi	r24, 0x6F	; 111
    59d2:	c1 f0       	breq	.+48     	; 0x5a04 <vfprintf+0x28e>
    59d4:	18 f4       	brcc	.+6      	; 0x59dc <vfprintf+0x266>
    59d6:	88 35       	cpi	r24, 0x58	; 88
    59d8:	79 f0       	breq	.+30     	; 0x59f8 <vfprintf+0x282>
    59da:	b5 c0       	rjmp	.+362    	; 0x5b46 <vfprintf+0x3d0>
    59dc:	80 37       	cpi	r24, 0x70	; 112
    59de:	19 f0       	breq	.+6      	; 0x59e6 <vfprintf+0x270>
    59e0:	88 37       	cpi	r24, 0x78	; 120
    59e2:	21 f0       	breq	.+8      	; 0x59ec <vfprintf+0x276>
    59e4:	b0 c0       	rjmp	.+352    	; 0x5b46 <vfprintf+0x3d0>
    59e6:	e9 2f       	mov	r30, r25
    59e8:	e0 61       	ori	r30, 0x10	; 16
    59ea:	be 2e       	mov	r11, r30
    59ec:	b4 fe       	sbrs	r11, 4
    59ee:	0d c0       	rjmp	.+26     	; 0x5a0a <vfprintf+0x294>
    59f0:	fb 2d       	mov	r31, r11
    59f2:	f4 60       	ori	r31, 0x04	; 4
    59f4:	bf 2e       	mov	r11, r31
    59f6:	09 c0       	rjmp	.+18     	; 0x5a0a <vfprintf+0x294>
    59f8:	34 fe       	sbrs	r3, 4
    59fa:	0a c0       	rjmp	.+20     	; 0x5a10 <vfprintf+0x29a>
    59fc:	29 2f       	mov	r18, r25
    59fe:	26 60       	ori	r18, 0x06	; 6
    5a00:	b2 2e       	mov	r11, r18
    5a02:	06 c0       	rjmp	.+12     	; 0x5a10 <vfprintf+0x29a>
    5a04:	28 e0       	ldi	r18, 0x08	; 8
    5a06:	30 e0       	ldi	r19, 0x00	; 0
    5a08:	05 c0       	rjmp	.+10     	; 0x5a14 <vfprintf+0x29e>
    5a0a:	20 e1       	ldi	r18, 0x10	; 16
    5a0c:	30 e0       	ldi	r19, 0x00	; 0
    5a0e:	02 c0       	rjmp	.+4      	; 0x5a14 <vfprintf+0x29e>
    5a10:	20 e1       	ldi	r18, 0x10	; 16
    5a12:	32 e0       	ldi	r19, 0x02	; 2
    5a14:	f8 01       	movw	r30, r16
    5a16:	b7 fe       	sbrs	r11, 7
    5a18:	07 c0       	rjmp	.+14     	; 0x5a28 <vfprintf+0x2b2>
    5a1a:	60 81       	ld	r22, Z
    5a1c:	71 81       	ldd	r23, Z+1	; 0x01
    5a1e:	82 81       	ldd	r24, Z+2	; 0x02
    5a20:	93 81       	ldd	r25, Z+3	; 0x03
    5a22:	0c 5f       	subi	r16, 0xFC	; 252
    5a24:	1f 4f       	sbci	r17, 0xFF	; 255
    5a26:	06 c0       	rjmp	.+12     	; 0x5a34 <vfprintf+0x2be>
    5a28:	60 81       	ld	r22, Z
    5a2a:	71 81       	ldd	r23, Z+1	; 0x01
    5a2c:	80 e0       	ldi	r24, 0x00	; 0
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	0e 5f       	subi	r16, 0xFE	; 254
    5a32:	1f 4f       	sbci	r17, 0xFF	; 255
    5a34:	a3 01       	movw	r20, r6
    5a36:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__ultoa_invert>
    5a3a:	88 2e       	mov	r8, r24
    5a3c:	86 18       	sub	r8, r6
    5a3e:	fb 2d       	mov	r31, r11
    5a40:	ff 77       	andi	r31, 0x7F	; 127
    5a42:	3f 2e       	mov	r3, r31
    5a44:	36 fe       	sbrs	r3, 6
    5a46:	0d c0       	rjmp	.+26     	; 0x5a62 <vfprintf+0x2ec>
    5a48:	23 2d       	mov	r18, r3
    5a4a:	2e 7f       	andi	r18, 0xFE	; 254
    5a4c:	a2 2e       	mov	r10, r18
    5a4e:	89 14       	cp	r8, r9
    5a50:	58 f4       	brcc	.+22     	; 0x5a68 <vfprintf+0x2f2>
    5a52:	34 fe       	sbrs	r3, 4
    5a54:	0b c0       	rjmp	.+22     	; 0x5a6c <vfprintf+0x2f6>
    5a56:	32 fc       	sbrc	r3, 2
    5a58:	09 c0       	rjmp	.+18     	; 0x5a6c <vfprintf+0x2f6>
    5a5a:	83 2d       	mov	r24, r3
    5a5c:	8e 7e       	andi	r24, 0xEE	; 238
    5a5e:	a8 2e       	mov	r10, r24
    5a60:	05 c0       	rjmp	.+10     	; 0x5a6c <vfprintf+0x2f6>
    5a62:	b8 2c       	mov	r11, r8
    5a64:	a3 2c       	mov	r10, r3
    5a66:	03 c0       	rjmp	.+6      	; 0x5a6e <vfprintf+0x2f8>
    5a68:	b8 2c       	mov	r11, r8
    5a6a:	01 c0       	rjmp	.+2      	; 0x5a6e <vfprintf+0x2f8>
    5a6c:	b9 2c       	mov	r11, r9
    5a6e:	a4 fe       	sbrs	r10, 4
    5a70:	0f c0       	rjmp	.+30     	; 0x5a90 <vfprintf+0x31a>
    5a72:	fe 01       	movw	r30, r28
    5a74:	e8 0d       	add	r30, r8
    5a76:	f1 1d       	adc	r31, r1
    5a78:	80 81       	ld	r24, Z
    5a7a:	80 33       	cpi	r24, 0x30	; 48
    5a7c:	21 f4       	brne	.+8      	; 0x5a86 <vfprintf+0x310>
    5a7e:	9a 2d       	mov	r25, r10
    5a80:	99 7e       	andi	r25, 0xE9	; 233
    5a82:	a9 2e       	mov	r10, r25
    5a84:	09 c0       	rjmp	.+18     	; 0x5a98 <vfprintf+0x322>
    5a86:	a2 fe       	sbrs	r10, 2
    5a88:	06 c0       	rjmp	.+12     	; 0x5a96 <vfprintf+0x320>
    5a8a:	b3 94       	inc	r11
    5a8c:	b3 94       	inc	r11
    5a8e:	04 c0       	rjmp	.+8      	; 0x5a98 <vfprintf+0x322>
    5a90:	8a 2d       	mov	r24, r10
    5a92:	86 78       	andi	r24, 0x86	; 134
    5a94:	09 f0       	breq	.+2      	; 0x5a98 <vfprintf+0x322>
    5a96:	b3 94       	inc	r11
    5a98:	a3 fc       	sbrc	r10, 3
    5a9a:	11 c0       	rjmp	.+34     	; 0x5abe <vfprintf+0x348>
    5a9c:	a0 fe       	sbrs	r10, 0
    5a9e:	06 c0       	rjmp	.+12     	; 0x5aac <vfprintf+0x336>
    5aa0:	b2 14       	cp	r11, r2
    5aa2:	88 f4       	brcc	.+34     	; 0x5ac6 <vfprintf+0x350>
    5aa4:	28 0c       	add	r2, r8
    5aa6:	92 2c       	mov	r9, r2
    5aa8:	9b 18       	sub	r9, r11
    5aaa:	0e c0       	rjmp	.+28     	; 0x5ac8 <vfprintf+0x352>
    5aac:	b2 14       	cp	r11, r2
    5aae:	60 f4       	brcc	.+24     	; 0x5ac8 <vfprintf+0x352>
    5ab0:	b6 01       	movw	r22, r12
    5ab2:	80 e2       	ldi	r24, 0x20	; 32
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    5aba:	b3 94       	inc	r11
    5abc:	f7 cf       	rjmp	.-18     	; 0x5aac <vfprintf+0x336>
    5abe:	b2 14       	cp	r11, r2
    5ac0:	18 f4       	brcc	.+6      	; 0x5ac8 <vfprintf+0x352>
    5ac2:	2b 18       	sub	r2, r11
    5ac4:	02 c0       	rjmp	.+4      	; 0x5aca <vfprintf+0x354>
    5ac6:	98 2c       	mov	r9, r8
    5ac8:	21 2c       	mov	r2, r1
    5aca:	a4 fe       	sbrs	r10, 4
    5acc:	10 c0       	rjmp	.+32     	; 0x5aee <vfprintf+0x378>
    5ace:	b6 01       	movw	r22, r12
    5ad0:	80 e3       	ldi	r24, 0x30	; 48
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    5ad8:	a2 fe       	sbrs	r10, 2
    5ada:	17 c0       	rjmp	.+46     	; 0x5b0a <vfprintf+0x394>
    5adc:	a1 fc       	sbrc	r10, 1
    5ade:	03 c0       	rjmp	.+6      	; 0x5ae6 <vfprintf+0x370>
    5ae0:	88 e7       	ldi	r24, 0x78	; 120
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	02 c0       	rjmp	.+4      	; 0x5aea <vfprintf+0x374>
    5ae6:	88 e5       	ldi	r24, 0x58	; 88
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	b6 01       	movw	r22, r12
    5aec:	0c c0       	rjmp	.+24     	; 0x5b06 <vfprintf+0x390>
    5aee:	8a 2d       	mov	r24, r10
    5af0:	86 78       	andi	r24, 0x86	; 134
    5af2:	59 f0       	breq	.+22     	; 0x5b0a <vfprintf+0x394>
    5af4:	a1 fe       	sbrs	r10, 1
    5af6:	02 c0       	rjmp	.+4      	; 0x5afc <vfprintf+0x386>
    5af8:	8b e2       	ldi	r24, 0x2B	; 43
    5afa:	01 c0       	rjmp	.+2      	; 0x5afe <vfprintf+0x388>
    5afc:	80 e2       	ldi	r24, 0x20	; 32
    5afe:	a7 fc       	sbrc	r10, 7
    5b00:	8d e2       	ldi	r24, 0x2D	; 45
    5b02:	b6 01       	movw	r22, r12
    5b04:	90 e0       	ldi	r25, 0x00	; 0
    5b06:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    5b0a:	89 14       	cp	r8, r9
    5b0c:	38 f4       	brcc	.+14     	; 0x5b1c <vfprintf+0x3a6>
    5b0e:	b6 01       	movw	r22, r12
    5b10:	80 e3       	ldi	r24, 0x30	; 48
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    5b14:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    5b18:	9a 94       	dec	r9
    5b1a:	f7 cf       	rjmp	.-18     	; 0x5b0a <vfprintf+0x394>
    5b1c:	8a 94       	dec	r8
    5b1e:	f3 01       	movw	r30, r6
    5b20:	e8 0d       	add	r30, r8
    5b22:	f1 1d       	adc	r31, r1
    5b24:	80 81       	ld	r24, Z
    5b26:	b6 01       	movw	r22, r12
    5b28:	90 e0       	ldi	r25, 0x00	; 0
    5b2a:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    5b2e:	81 10       	cpse	r8, r1
    5b30:	f5 cf       	rjmp	.-22     	; 0x5b1c <vfprintf+0x3a6>
    5b32:	22 20       	and	r2, r2
    5b34:	09 f4       	brne	.+2      	; 0x5b38 <vfprintf+0x3c2>
    5b36:	42 ce       	rjmp	.-892    	; 0x57bc <vfprintf+0x46>
    5b38:	b6 01       	movw	r22, r12
    5b3a:	80 e2       	ldi	r24, 0x20	; 32
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <fputc>
    5b42:	2a 94       	dec	r2
    5b44:	f6 cf       	rjmp	.-20     	; 0x5b32 <vfprintf+0x3bc>
    5b46:	f6 01       	movw	r30, r12
    5b48:	86 81       	ldd	r24, Z+6	; 0x06
    5b4a:	97 81       	ldd	r25, Z+7	; 0x07
    5b4c:	02 c0       	rjmp	.+4      	; 0x5b52 <vfprintf+0x3dc>
    5b4e:	8f ef       	ldi	r24, 0xFF	; 255
    5b50:	9f ef       	ldi	r25, 0xFF	; 255
    5b52:	2b 96       	adiw	r28, 0x0b	; 11
    5b54:	cd bf       	out	0x3d, r28	; 61
    5b56:	de bf       	out	0x3e, r29	; 62
    5b58:	df 91       	pop	r29
    5b5a:	cf 91       	pop	r28
    5b5c:	1f 91       	pop	r17
    5b5e:	0f 91       	pop	r16
    5b60:	ff 90       	pop	r15
    5b62:	ef 90       	pop	r14
    5b64:	df 90       	pop	r13
    5b66:	cf 90       	pop	r12
    5b68:	bf 90       	pop	r11
    5b6a:	af 90       	pop	r10
    5b6c:	9f 90       	pop	r9
    5b6e:	8f 90       	pop	r8
    5b70:	7f 90       	pop	r7
    5b72:	6f 90       	pop	r6
    5b74:	5f 90       	pop	r5
    5b76:	4f 90       	pop	r4
    5b78:	3f 90       	pop	r3
    5b7a:	2f 90       	pop	r2
    5b7c:	08 95       	ret

00005b7e <strtod>:
    5b7e:	8f 92       	push	r8
    5b80:	9f 92       	push	r9
    5b82:	af 92       	push	r10
    5b84:	bf 92       	push	r11
    5b86:	cf 92       	push	r12
    5b88:	df 92       	push	r13
    5b8a:	ef 92       	push	r14
    5b8c:	ff 92       	push	r15
    5b8e:	0f 93       	push	r16
    5b90:	1f 93       	push	r17
    5b92:	cf 93       	push	r28
    5b94:	df 93       	push	r29
    5b96:	ec 01       	movw	r28, r24
    5b98:	6b 01       	movw	r12, r22
    5b9a:	61 15       	cp	r22, r1
    5b9c:	71 05       	cpc	r23, r1
    5b9e:	19 f0       	breq	.+6      	; 0x5ba6 <strtod+0x28>
    5ba0:	fb 01       	movw	r30, r22
    5ba2:	80 83       	st	Z, r24
    5ba4:	91 83       	std	Z+1, r25	; 0x01
    5ba6:	7e 01       	movw	r14, r28
    5ba8:	ff ef       	ldi	r31, 0xFF	; 255
    5baa:	ef 1a       	sub	r14, r31
    5bac:	ff 0a       	sbc	r15, r31
    5bae:	08 81       	ld	r16, Y
    5bb0:	80 2f       	mov	r24, r16
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <isspace>
    5bb8:	89 2b       	or	r24, r25
    5bba:	11 f0       	breq	.+4      	; 0x5bc0 <strtod+0x42>
    5bbc:	e7 01       	movw	r28, r14
    5bbe:	f3 cf       	rjmp	.-26     	; 0x5ba6 <strtod+0x28>
    5bc0:	0d 32       	cpi	r16, 0x2D	; 45
    5bc2:	39 f4       	brne	.+14     	; 0x5bd2 <strtod+0x54>
    5bc4:	7e 01       	movw	r14, r28
    5bc6:	82 e0       	ldi	r24, 0x02	; 2
    5bc8:	e8 0e       	add	r14, r24
    5bca:	f1 1c       	adc	r15, r1
    5bcc:	09 81       	ldd	r16, Y+1	; 0x01
    5bce:	11 e0       	ldi	r17, 0x01	; 1
    5bd0:	08 c0       	rjmp	.+16     	; 0x5be2 <strtod+0x64>
    5bd2:	0b 32       	cpi	r16, 0x2B	; 43
    5bd4:	29 f4       	brne	.+10     	; 0x5be0 <strtod+0x62>
    5bd6:	7e 01       	movw	r14, r28
    5bd8:	92 e0       	ldi	r25, 0x02	; 2
    5bda:	e9 0e       	add	r14, r25
    5bdc:	f1 1c       	adc	r15, r1
    5bde:	09 81       	ldd	r16, Y+1	; 0x01
    5be0:	10 e0       	ldi	r17, 0x00	; 0
    5be2:	e7 01       	movw	r28, r14
    5be4:	21 97       	sbiw	r28, 0x01	; 1
    5be6:	43 e0       	ldi	r20, 0x03	; 3
    5be8:	50 e0       	ldi	r21, 0x00	; 0
    5bea:	6c ef       	ldi	r22, 0xFC	; 252
    5bec:	71 e0       	ldi	r23, 0x01	; 1
    5bee:	ce 01       	movw	r24, r28
    5bf0:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <strncasecmp_P>
    5bf4:	89 2b       	or	r24, r25
    5bf6:	c1 f4       	brne	.+48     	; 0x5c28 <strtod+0xaa>
    5bf8:	23 96       	adiw	r28, 0x03	; 3
    5bfa:	45 e0       	ldi	r20, 0x05	; 5
    5bfc:	50 e0       	ldi	r21, 0x00	; 0
    5bfe:	67 ef       	ldi	r22, 0xF7	; 247
    5c00:	71 e0       	ldi	r23, 0x01	; 1
    5c02:	ce 01       	movw	r24, r28
    5c04:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <strncasecmp_P>
    5c08:	89 2b       	or	r24, r25
    5c0a:	09 f4       	brne	.+2      	; 0x5c0e <strtod+0x90>
    5c0c:	25 96       	adiw	r28, 0x05	; 5
    5c0e:	c1 14       	cp	r12, r1
    5c10:	d1 04       	cpc	r13, r1
    5c12:	19 f0       	breq	.+6      	; 0x5c1a <strtod+0x9c>
    5c14:	f6 01       	movw	r30, r12
    5c16:	c0 83       	st	Z, r28
    5c18:	d1 83       	std	Z+1, r29	; 0x01
    5c1a:	11 11       	cpse	r17, r1
    5c1c:	f6 c0       	rjmp	.+492    	; 0x5e0a <strtod+0x28c>
    5c1e:	60 e0       	ldi	r22, 0x00	; 0
    5c20:	70 e0       	ldi	r23, 0x00	; 0
    5c22:	80 e8       	ldi	r24, 0x80	; 128
    5c24:	9f e7       	ldi	r25, 0x7F	; 127
    5c26:	fa c0       	rjmp	.+500    	; 0x5e1c <strtod+0x29e>
    5c28:	43 e0       	ldi	r20, 0x03	; 3
    5c2a:	50 e0       	ldi	r21, 0x00	; 0
    5c2c:	64 ef       	ldi	r22, 0xF4	; 244
    5c2e:	71 e0       	ldi	r23, 0x01	; 1
    5c30:	ce 01       	movw	r24, r28
    5c32:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <strncasecmp_P>
    5c36:	89 2b       	or	r24, r25
    5c38:	59 f4       	brne	.+22     	; 0x5c50 <strtod+0xd2>
    5c3a:	c1 14       	cp	r12, r1
    5c3c:	d1 04       	cpc	r13, r1
    5c3e:	09 f4       	brne	.+2      	; 0x5c42 <strtod+0xc4>
    5c40:	e9 c0       	rjmp	.+466    	; 0x5e14 <strtod+0x296>
    5c42:	f2 e0       	ldi	r31, 0x02	; 2
    5c44:	ef 0e       	add	r14, r31
    5c46:	f1 1c       	adc	r15, r1
    5c48:	f6 01       	movw	r30, r12
    5c4a:	e0 82       	st	Z, r14
    5c4c:	f1 82       	std	Z+1, r15	; 0x01
    5c4e:	e2 c0       	rjmp	.+452    	; 0x5e14 <strtod+0x296>
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	a9 01       	movw	r20, r18
    5c56:	c0 e0       	ldi	r28, 0x00	; 0
    5c58:	d0 e0       	ldi	r29, 0x00	; 0
    5c5a:	f7 01       	movw	r30, r14
    5c5c:	60 ed       	ldi	r22, 0xD0	; 208
    5c5e:	a6 2e       	mov	r10, r22
    5c60:	a0 0e       	add	r10, r16
    5c62:	89 e0       	ldi	r24, 0x09	; 9
    5c64:	8a 15       	cp	r24, r10
    5c66:	30 f1       	brcs	.+76     	; 0x5cb4 <strtod+0x136>
    5c68:	91 2f       	mov	r25, r17
    5c6a:	92 60       	ori	r25, 0x02	; 2
    5c6c:	b9 2e       	mov	r11, r25
    5c6e:	81 2f       	mov	r24, r17
    5c70:	88 70       	andi	r24, 0x08	; 8
    5c72:	12 ff       	sbrs	r17, 2
    5c74:	04 c0       	rjmp	.+8      	; 0x5c7e <strtod+0x100>
    5c76:	81 11       	cpse	r24, r1
    5c78:	24 c0       	rjmp	.+72     	; 0x5cc2 <strtod+0x144>
    5c7a:	21 96       	adiw	r28, 0x01	; 1
    5c7c:	22 c0       	rjmp	.+68     	; 0x5cc2 <strtod+0x144>
    5c7e:	81 11       	cpse	r24, r1
    5c80:	21 97       	sbiw	r28, 0x01	; 1
    5c82:	a5 e0       	ldi	r26, 0x05	; 5
    5c84:	b0 e0       	ldi	r27, 0x00	; 0
    5c86:	0e 94 b5 2a 	call	0x556a	; 0x556a <__muluhisi3>
    5c8a:	dc 01       	movw	r26, r24
    5c8c:	cb 01       	movw	r24, r22
    5c8e:	88 0f       	add	r24, r24
    5c90:	99 1f       	adc	r25, r25
    5c92:	aa 1f       	adc	r26, r26
    5c94:	bb 1f       	adc	r27, r27
    5c96:	9c 01       	movw	r18, r24
    5c98:	ad 01       	movw	r20, r26
    5c9a:	2a 0d       	add	r18, r10
    5c9c:	31 1d       	adc	r19, r1
    5c9e:	41 1d       	adc	r20, r1
    5ca0:	51 1d       	adc	r21, r1
    5ca2:	28 39       	cpi	r18, 0x98	; 152
    5ca4:	89 e9       	ldi	r24, 0x99	; 153
    5ca6:	38 07       	cpc	r19, r24
    5ca8:	48 07       	cpc	r20, r24
    5caa:	89 e1       	ldi	r24, 0x19	; 25
    5cac:	58 07       	cpc	r21, r24
    5cae:	48 f0       	brcs	.+18     	; 0x5cc2 <strtod+0x144>
    5cb0:	16 60       	ori	r17, 0x06	; 6
    5cb2:	06 c0       	rjmp	.+12     	; 0x5cc0 <strtod+0x142>
    5cb4:	9e ef       	ldi	r25, 0xFE	; 254
    5cb6:	a9 12       	cpse	r10, r25
    5cb8:	0a c0       	rjmp	.+20     	; 0x5cce <strtod+0x150>
    5cba:	13 fd       	sbrc	r17, 3
    5cbc:	40 c0       	rjmp	.+128    	; 0x5d3e <strtod+0x1c0>
    5cbe:	18 60       	ori	r17, 0x08	; 8
    5cc0:	b1 2e       	mov	r11, r17
    5cc2:	8f ef       	ldi	r24, 0xFF	; 255
    5cc4:	e8 1a       	sub	r14, r24
    5cc6:	f8 0a       	sbc	r15, r24
    5cc8:	00 81       	ld	r16, Z
    5cca:	1b 2d       	mov	r17, r11
    5ccc:	c6 cf       	rjmp	.-116    	; 0x5c5a <strtod+0xdc>
    5cce:	80 2f       	mov	r24, r16
    5cd0:	8f 7d       	andi	r24, 0xDF	; 223
    5cd2:	85 34       	cpi	r24, 0x45	; 69
    5cd4:	a1 f5       	brne	.+104    	; 0x5d3e <strtod+0x1c0>
    5cd6:	80 81       	ld	r24, Z
    5cd8:	8d 32       	cpi	r24, 0x2D	; 45
    5cda:	11 f4       	brne	.+4      	; 0x5ce0 <strtod+0x162>
    5cdc:	10 61       	ori	r17, 0x10	; 16
    5cde:	06 c0       	rjmp	.+12     	; 0x5cec <strtod+0x16e>
    5ce0:	8b 32       	cpi	r24, 0x2B	; 43
    5ce2:	21 f0       	breq	.+8      	; 0x5cec <strtod+0x16e>
    5ce4:	31 96       	adiw	r30, 0x01	; 1
    5ce6:	61 e0       	ldi	r22, 0x01	; 1
    5ce8:	70 e0       	ldi	r23, 0x00	; 0
    5cea:	04 c0       	rjmp	.+8      	; 0x5cf4 <strtod+0x176>
    5cec:	81 81       	ldd	r24, Z+1	; 0x01
    5cee:	32 96       	adiw	r30, 0x02	; 2
    5cf0:	62 e0       	ldi	r22, 0x02	; 2
    5cf2:	70 e0       	ldi	r23, 0x00	; 0
    5cf4:	80 53       	subi	r24, 0x30	; 48
    5cf6:	8a 30       	cpi	r24, 0x0A	; 10
    5cf8:	18 f0       	brcs	.+6      	; 0x5d00 <strtod+0x182>
    5cfa:	e6 1b       	sub	r30, r22
    5cfc:	f7 0b       	sbc	r31, r23
    5cfe:	1f c0       	rjmp	.+62     	; 0x5d3e <strtod+0x1c0>
    5d00:	60 e0       	ldi	r22, 0x00	; 0
    5d02:	70 e0       	ldi	r23, 0x00	; 0
    5d04:	60 38       	cpi	r22, 0x80	; 128
    5d06:	9c e0       	ldi	r25, 0x0C	; 12
    5d08:	79 07       	cpc	r23, r25
    5d0a:	5c f4       	brge	.+22     	; 0x5d22 <strtod+0x1a4>
    5d0c:	db 01       	movw	r26, r22
    5d0e:	aa 0f       	add	r26, r26
    5d10:	bb 1f       	adc	r27, r27
    5d12:	aa 0f       	add	r26, r26
    5d14:	bb 1f       	adc	r27, r27
    5d16:	6a 0f       	add	r22, r26
    5d18:	7b 1f       	adc	r23, r27
    5d1a:	66 0f       	add	r22, r22
    5d1c:	77 1f       	adc	r23, r23
    5d1e:	68 0f       	add	r22, r24
    5d20:	71 1d       	adc	r23, r1
    5d22:	31 96       	adiw	r30, 0x01	; 1
    5d24:	df 01       	movw	r26, r30
    5d26:	11 97       	sbiw	r26, 0x01	; 1
    5d28:	8c 91       	ld	r24, X
    5d2a:	80 53       	subi	r24, 0x30	; 48
    5d2c:	8a 30       	cpi	r24, 0x0A	; 10
    5d2e:	50 f3       	brcs	.-44     	; 0x5d04 <strtod+0x186>
    5d30:	14 ff       	sbrs	r17, 4
    5d32:	03 c0       	rjmp	.+6      	; 0x5d3a <strtod+0x1bc>
    5d34:	71 95       	neg	r23
    5d36:	61 95       	neg	r22
    5d38:	71 09       	sbc	r23, r1
    5d3a:	c6 0f       	add	r28, r22
    5d3c:	d7 1f       	adc	r29, r23
    5d3e:	11 ff       	sbrs	r17, 1
    5d40:	08 c0       	rjmp	.+16     	; 0x5d52 <strtod+0x1d4>
    5d42:	c1 14       	cp	r12, r1
    5d44:	d1 04       	cpc	r13, r1
    5d46:	29 f0       	breq	.+10     	; 0x5d52 <strtod+0x1d4>
    5d48:	cf 01       	movw	r24, r30
    5d4a:	01 97       	sbiw	r24, 0x01	; 1
    5d4c:	f6 01       	movw	r30, r12
    5d4e:	80 83       	st	Z, r24
    5d50:	91 83       	std	Z+1, r25	; 0x01
    5d52:	ca 01       	movw	r24, r20
    5d54:	b9 01       	movw	r22, r18
    5d56:	0e 94 69 29 	call	0x52d2	; 0x52d2 <__floatunsisf>
    5d5a:	21 2f       	mov	r18, r17
    5d5c:	23 70       	andi	r18, 0x03	; 3
    5d5e:	23 30       	cpi	r18, 0x03	; 3
    5d60:	19 f0       	breq	.+6      	; 0x5d68 <strtod+0x1ea>
    5d62:	4b 01       	movw	r8, r22
    5d64:	5c 01       	movw	r10, r24
    5d66:	06 c0       	rjmp	.+12     	; 0x5d74 <strtod+0x1f6>
    5d68:	4b 01       	movw	r8, r22
    5d6a:	5c 01       	movw	r10, r24
    5d6c:	b7 fa       	bst	r11, 7
    5d6e:	b0 94       	com	r11
    5d70:	b7 f8       	bld	r11, 7
    5d72:	b0 94       	com	r11
    5d74:	20 e0       	ldi	r18, 0x00	; 0
    5d76:	30 e0       	ldi	r19, 0x00	; 0
    5d78:	a9 01       	movw	r20, r18
    5d7a:	c5 01       	movw	r24, r10
    5d7c:	b4 01       	movw	r22, r8
    5d7e:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__cmpsf2>
    5d82:	88 23       	and	r24, r24
    5d84:	09 f4       	brne	.+2      	; 0x5d88 <strtod+0x20a>
    5d86:	3e c0       	rjmp	.+124    	; 0x5e04 <strtod+0x286>
    5d88:	d7 ff       	sbrs	r29, 7
    5d8a:	06 c0       	rjmp	.+12     	; 0x5d98 <strtod+0x21a>
    5d8c:	d1 95       	neg	r29
    5d8e:	c1 95       	neg	r28
    5d90:	d1 09       	sbc	r29, r1
    5d92:	03 e1       	ldi	r16, 0x13	; 19
    5d94:	12 e0       	ldi	r17, 0x02	; 2
    5d96:	02 c0       	rjmp	.+4      	; 0x5d9c <strtod+0x21e>
    5d98:	0b e2       	ldi	r16, 0x2B	; 43
    5d9a:	12 e0       	ldi	r17, 0x02	; 2
    5d9c:	68 01       	movw	r12, r16
    5d9e:	f8 e1       	ldi	r31, 0x18	; 24
    5da0:	cf 1a       	sub	r12, r31
    5da2:	d1 08       	sbc	r13, r1
    5da4:	90 e2       	ldi	r25, 0x20	; 32
    5da6:	e9 2e       	mov	r14, r25
    5da8:	f1 2c       	mov	r15, r1
    5daa:	ce 15       	cp	r28, r14
    5dac:	df 05       	cpc	r29, r15
    5dae:	74 f0       	brlt	.+28     	; 0x5dcc <strtod+0x24e>
    5db0:	f8 01       	movw	r30, r16
    5db2:	25 91       	lpm	r18, Z+
    5db4:	35 91       	lpm	r19, Z+
    5db6:	45 91       	lpm	r20, Z+
    5db8:	54 91       	lpm	r21, Z
    5dba:	c5 01       	movw	r24, r10
    5dbc:	b4 01       	movw	r22, r8
    5dbe:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3>
    5dc2:	4b 01       	movw	r8, r22
    5dc4:	5c 01       	movw	r10, r24
    5dc6:	ce 19       	sub	r28, r14
    5dc8:	df 09       	sbc	r29, r15
    5dca:	ef cf       	rjmp	.-34     	; 0x5daa <strtod+0x22c>
    5dcc:	04 50       	subi	r16, 0x04	; 4
    5dce:	11 09       	sbc	r17, r1
    5dd0:	f5 94       	asr	r15
    5dd2:	e7 94       	ror	r14
    5dd4:	0c 15       	cp	r16, r12
    5dd6:	1d 05       	cpc	r17, r13
    5dd8:	41 f7       	brne	.-48     	; 0x5daa <strtod+0x22c>
    5dda:	8a 2d       	mov	r24, r10
    5ddc:	88 0f       	add	r24, r24
    5dde:	8b 2d       	mov	r24, r11
    5de0:	88 1f       	adc	r24, r24
    5de2:	8f 3f       	cpi	r24, 0xFF	; 255
    5de4:	49 f0       	breq	.+18     	; 0x5df8 <strtod+0x27a>
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	a9 01       	movw	r20, r18
    5dec:	c5 01       	movw	r24, r10
    5dee:	b4 01       	movw	r22, r8
    5df0:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__cmpsf2>
    5df4:	81 11       	cpse	r24, r1
    5df6:	06 c0       	rjmp	.+12     	; 0x5e04 <strtod+0x286>
    5df8:	82 e2       	ldi	r24, 0x22	; 34
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <errno>
    5e00:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <errno+0x1>
    5e04:	c5 01       	movw	r24, r10
    5e06:	b4 01       	movw	r22, r8
    5e08:	09 c0       	rjmp	.+18     	; 0x5e1c <strtod+0x29e>
    5e0a:	60 e0       	ldi	r22, 0x00	; 0
    5e0c:	70 e0       	ldi	r23, 0x00	; 0
    5e0e:	80 e8       	ldi	r24, 0x80	; 128
    5e10:	9f ef       	ldi	r25, 0xFF	; 255
    5e12:	04 c0       	rjmp	.+8      	; 0x5e1c <strtod+0x29e>
    5e14:	60 e0       	ldi	r22, 0x00	; 0
    5e16:	70 e0       	ldi	r23, 0x00	; 0
    5e18:	80 ec       	ldi	r24, 0xC0	; 192
    5e1a:	9f e7       	ldi	r25, 0x7F	; 127
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	1f 91       	pop	r17
    5e22:	0f 91       	pop	r16
    5e24:	ff 90       	pop	r15
    5e26:	ef 90       	pop	r14
    5e28:	df 90       	pop	r13
    5e2a:	cf 90       	pop	r12
    5e2c:	bf 90       	pop	r11
    5e2e:	af 90       	pop	r10
    5e30:	9f 90       	pop	r9
    5e32:	8f 90       	pop	r8
    5e34:	08 95       	ret

00005e36 <isspace>:
    5e36:	91 11       	cpse	r25, r1
    5e38:	0c 94 25 30 	jmp	0x604a	; 0x604a <__ctype_isfalse>
    5e3c:	80 32       	cpi	r24, 0x20	; 32
    5e3e:	19 f0       	breq	.+6      	; 0x5e46 <isspace+0x10>
    5e40:	89 50       	subi	r24, 0x09	; 9
    5e42:	85 50       	subi	r24, 0x05	; 5
    5e44:	c8 f7       	brcc	.-14     	; 0x5e38 <isspace+0x2>
    5e46:	08 95       	ret

00005e48 <strncasecmp_P>:
    5e48:	fb 01       	movw	r30, r22
    5e4a:	dc 01       	movw	r26, r24
    5e4c:	41 50       	subi	r20, 0x01	; 1
    5e4e:	50 40       	sbci	r21, 0x00	; 0
    5e50:	88 f0       	brcs	.+34     	; 0x5e74 <strncasecmp_P+0x2c>
    5e52:	8d 91       	ld	r24, X+
    5e54:	81 34       	cpi	r24, 0x41	; 65
    5e56:	1c f0       	brlt	.+6      	; 0x5e5e <strncasecmp_P+0x16>
    5e58:	8b 35       	cpi	r24, 0x5B	; 91
    5e5a:	0c f4       	brge	.+2      	; 0x5e5e <strncasecmp_P+0x16>
    5e5c:	80 5e       	subi	r24, 0xE0	; 224
    5e5e:	65 91       	lpm	r22, Z+
    5e60:	61 34       	cpi	r22, 0x41	; 65
    5e62:	1c f0       	brlt	.+6      	; 0x5e6a <strncasecmp_P+0x22>
    5e64:	6b 35       	cpi	r22, 0x5B	; 91
    5e66:	0c f4       	brge	.+2      	; 0x5e6a <strncasecmp_P+0x22>
    5e68:	60 5e       	subi	r22, 0xE0	; 224
    5e6a:	86 1b       	sub	r24, r22
    5e6c:	61 11       	cpse	r22, r1
    5e6e:	71 f3       	breq	.-36     	; 0x5e4c <strncasecmp_P+0x4>
    5e70:	99 0b       	sbc	r25, r25
    5e72:	08 95       	ret
    5e74:	88 1b       	sub	r24, r24
    5e76:	fc cf       	rjmp	.-8      	; 0x5e70 <strncasecmp_P+0x28>

00005e78 <strnlen_P>:
    5e78:	fc 01       	movw	r30, r24
    5e7a:	05 90       	lpm	r0, Z+
    5e7c:	61 50       	subi	r22, 0x01	; 1
    5e7e:	70 40       	sbci	r23, 0x00	; 0
    5e80:	01 10       	cpse	r0, r1
    5e82:	d8 f7       	brcc	.-10     	; 0x5e7a <strnlen_P+0x2>
    5e84:	80 95       	com	r24
    5e86:	90 95       	com	r25
    5e88:	8e 0f       	add	r24, r30
    5e8a:	9f 1f       	adc	r25, r31
    5e8c:	08 95       	ret

00005e8e <strnlen>:
    5e8e:	fc 01       	movw	r30, r24
    5e90:	61 50       	subi	r22, 0x01	; 1
    5e92:	70 40       	sbci	r23, 0x00	; 0
    5e94:	01 90       	ld	r0, Z+
    5e96:	01 10       	cpse	r0, r1
    5e98:	d8 f7       	brcc	.-10     	; 0x5e90 <strnlen+0x2>
    5e9a:	80 95       	com	r24
    5e9c:	90 95       	com	r25
    5e9e:	8e 0f       	add	r24, r30
    5ea0:	9f 1f       	adc	r25, r31
    5ea2:	08 95       	ret

00005ea4 <strrev>:
    5ea4:	dc 01       	movw	r26, r24
    5ea6:	fc 01       	movw	r30, r24
    5ea8:	67 2f       	mov	r22, r23
    5eaa:	71 91       	ld	r23, Z+
    5eac:	77 23       	and	r23, r23
    5eae:	e1 f7       	brne	.-8      	; 0x5ea8 <strrev+0x4>
    5eb0:	32 97       	sbiw	r30, 0x02	; 2
    5eb2:	04 c0       	rjmp	.+8      	; 0x5ebc <strrev+0x18>
    5eb4:	7c 91       	ld	r23, X
    5eb6:	6d 93       	st	X+, r22
    5eb8:	70 83       	st	Z, r23
    5eba:	62 91       	ld	r22, -Z
    5ebc:	ae 17       	cp	r26, r30
    5ebe:	bf 07       	cpc	r27, r31
    5ec0:	c8 f3       	brcs	.-14     	; 0x5eb4 <strrev+0x10>
    5ec2:	08 95       	ret

00005ec4 <fputc>:
    5ec4:	0f 93       	push	r16
    5ec6:	1f 93       	push	r17
    5ec8:	cf 93       	push	r28
    5eca:	df 93       	push	r29
    5ecc:	fb 01       	movw	r30, r22
    5ece:	23 81       	ldd	r18, Z+3	; 0x03
    5ed0:	21 fd       	sbrc	r18, 1
    5ed2:	03 c0       	rjmp	.+6      	; 0x5eda <fputc+0x16>
    5ed4:	8f ef       	ldi	r24, 0xFF	; 255
    5ed6:	9f ef       	ldi	r25, 0xFF	; 255
    5ed8:	2c c0       	rjmp	.+88     	; 0x5f32 <fputc+0x6e>
    5eda:	22 ff       	sbrs	r18, 2
    5edc:	16 c0       	rjmp	.+44     	; 0x5f0a <fputc+0x46>
    5ede:	46 81       	ldd	r20, Z+6	; 0x06
    5ee0:	57 81       	ldd	r21, Z+7	; 0x07
    5ee2:	24 81       	ldd	r18, Z+4	; 0x04
    5ee4:	35 81       	ldd	r19, Z+5	; 0x05
    5ee6:	42 17       	cp	r20, r18
    5ee8:	53 07       	cpc	r21, r19
    5eea:	44 f4       	brge	.+16     	; 0x5efc <fputc+0x38>
    5eec:	a0 81       	ld	r26, Z
    5eee:	b1 81       	ldd	r27, Z+1	; 0x01
    5ef0:	9d 01       	movw	r18, r26
    5ef2:	2f 5f       	subi	r18, 0xFF	; 255
    5ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef6:	20 83       	st	Z, r18
    5ef8:	31 83       	std	Z+1, r19	; 0x01
    5efa:	8c 93       	st	X, r24
    5efc:	26 81       	ldd	r18, Z+6	; 0x06
    5efe:	37 81       	ldd	r19, Z+7	; 0x07
    5f00:	2f 5f       	subi	r18, 0xFF	; 255
    5f02:	3f 4f       	sbci	r19, 0xFF	; 255
    5f04:	26 83       	std	Z+6, r18	; 0x06
    5f06:	37 83       	std	Z+7, r19	; 0x07
    5f08:	14 c0       	rjmp	.+40     	; 0x5f32 <fputc+0x6e>
    5f0a:	8b 01       	movw	r16, r22
    5f0c:	ec 01       	movw	r28, r24
    5f0e:	fb 01       	movw	r30, r22
    5f10:	00 84       	ldd	r0, Z+8	; 0x08
    5f12:	f1 85       	ldd	r31, Z+9	; 0x09
    5f14:	e0 2d       	mov	r30, r0
    5f16:	19 95       	eicall
    5f18:	89 2b       	or	r24, r25
    5f1a:	e1 f6       	brne	.-72     	; 0x5ed4 <fputc+0x10>
    5f1c:	d8 01       	movw	r26, r16
    5f1e:	16 96       	adiw	r26, 0x06	; 6
    5f20:	8d 91       	ld	r24, X+
    5f22:	9c 91       	ld	r25, X
    5f24:	17 97       	sbiw	r26, 0x07	; 7
    5f26:	01 96       	adiw	r24, 0x01	; 1
    5f28:	16 96       	adiw	r26, 0x06	; 6
    5f2a:	8d 93       	st	X+, r24
    5f2c:	9c 93       	st	X, r25
    5f2e:	17 97       	sbiw	r26, 0x07	; 7
    5f30:	ce 01       	movw	r24, r28
    5f32:	df 91       	pop	r29
    5f34:	cf 91       	pop	r28
    5f36:	1f 91       	pop	r17
    5f38:	0f 91       	pop	r16
    5f3a:	08 95       	ret

00005f3c <__ultoa_invert>:
    5f3c:	fa 01       	movw	r30, r20
    5f3e:	aa 27       	eor	r26, r26
    5f40:	28 30       	cpi	r18, 0x08	; 8
    5f42:	51 f1       	breq	.+84     	; 0x5f98 <__ultoa_invert+0x5c>
    5f44:	20 31       	cpi	r18, 0x10	; 16
    5f46:	81 f1       	breq	.+96     	; 0x5fa8 <__ultoa_invert+0x6c>
    5f48:	e8 94       	clt
    5f4a:	6f 93       	push	r22
    5f4c:	6e 7f       	andi	r22, 0xFE	; 254
    5f4e:	6e 5f       	subi	r22, 0xFE	; 254
    5f50:	7f 4f       	sbci	r23, 0xFF	; 255
    5f52:	8f 4f       	sbci	r24, 0xFF	; 255
    5f54:	9f 4f       	sbci	r25, 0xFF	; 255
    5f56:	af 4f       	sbci	r26, 0xFF	; 255
    5f58:	b1 e0       	ldi	r27, 0x01	; 1
    5f5a:	3e d0       	rcall	.+124    	; 0x5fd8 <__ultoa_invert+0x9c>
    5f5c:	b4 e0       	ldi	r27, 0x04	; 4
    5f5e:	3c d0       	rcall	.+120    	; 0x5fd8 <__ultoa_invert+0x9c>
    5f60:	67 0f       	add	r22, r23
    5f62:	78 1f       	adc	r23, r24
    5f64:	89 1f       	adc	r24, r25
    5f66:	9a 1f       	adc	r25, r26
    5f68:	a1 1d       	adc	r26, r1
    5f6a:	68 0f       	add	r22, r24
    5f6c:	79 1f       	adc	r23, r25
    5f6e:	8a 1f       	adc	r24, r26
    5f70:	91 1d       	adc	r25, r1
    5f72:	a1 1d       	adc	r26, r1
    5f74:	6a 0f       	add	r22, r26
    5f76:	71 1d       	adc	r23, r1
    5f78:	81 1d       	adc	r24, r1
    5f7a:	91 1d       	adc	r25, r1
    5f7c:	a1 1d       	adc	r26, r1
    5f7e:	20 d0       	rcall	.+64     	; 0x5fc0 <__ultoa_invert+0x84>
    5f80:	09 f4       	brne	.+2      	; 0x5f84 <__ultoa_invert+0x48>
    5f82:	68 94       	set
    5f84:	3f 91       	pop	r19
    5f86:	2a e0       	ldi	r18, 0x0A	; 10
    5f88:	26 9f       	mul	r18, r22
    5f8a:	11 24       	eor	r1, r1
    5f8c:	30 19       	sub	r19, r0
    5f8e:	30 5d       	subi	r19, 0xD0	; 208
    5f90:	31 93       	st	Z+, r19
    5f92:	de f6       	brtc	.-74     	; 0x5f4a <__ultoa_invert+0xe>
    5f94:	cf 01       	movw	r24, r30
    5f96:	08 95       	ret
    5f98:	46 2f       	mov	r20, r22
    5f9a:	47 70       	andi	r20, 0x07	; 7
    5f9c:	40 5d       	subi	r20, 0xD0	; 208
    5f9e:	41 93       	st	Z+, r20
    5fa0:	b3 e0       	ldi	r27, 0x03	; 3
    5fa2:	0f d0       	rcall	.+30     	; 0x5fc2 <__ultoa_invert+0x86>
    5fa4:	c9 f7       	brne	.-14     	; 0x5f98 <__ultoa_invert+0x5c>
    5fa6:	f6 cf       	rjmp	.-20     	; 0x5f94 <__ultoa_invert+0x58>
    5fa8:	46 2f       	mov	r20, r22
    5faa:	4f 70       	andi	r20, 0x0F	; 15
    5fac:	40 5d       	subi	r20, 0xD0	; 208
    5fae:	4a 33       	cpi	r20, 0x3A	; 58
    5fb0:	18 f0       	brcs	.+6      	; 0x5fb8 <__ultoa_invert+0x7c>
    5fb2:	49 5d       	subi	r20, 0xD9	; 217
    5fb4:	31 fd       	sbrc	r19, 1
    5fb6:	40 52       	subi	r20, 0x20	; 32
    5fb8:	41 93       	st	Z+, r20
    5fba:	02 d0       	rcall	.+4      	; 0x5fc0 <__ultoa_invert+0x84>
    5fbc:	a9 f7       	brne	.-22     	; 0x5fa8 <__ultoa_invert+0x6c>
    5fbe:	ea cf       	rjmp	.-44     	; 0x5f94 <__ultoa_invert+0x58>
    5fc0:	b4 e0       	ldi	r27, 0x04	; 4
    5fc2:	a6 95       	lsr	r26
    5fc4:	97 95       	ror	r25
    5fc6:	87 95       	ror	r24
    5fc8:	77 95       	ror	r23
    5fca:	67 95       	ror	r22
    5fcc:	ba 95       	dec	r27
    5fce:	c9 f7       	brne	.-14     	; 0x5fc2 <__ultoa_invert+0x86>
    5fd0:	00 97       	sbiw	r24, 0x00	; 0
    5fd2:	61 05       	cpc	r22, r1
    5fd4:	71 05       	cpc	r23, r1
    5fd6:	08 95       	ret
    5fd8:	9b 01       	movw	r18, r22
    5fda:	ac 01       	movw	r20, r24
    5fdc:	0a 2e       	mov	r0, r26
    5fde:	06 94       	lsr	r0
    5fe0:	57 95       	ror	r21
    5fe2:	47 95       	ror	r20
    5fe4:	37 95       	ror	r19
    5fe6:	27 95       	ror	r18
    5fe8:	ba 95       	dec	r27
    5fea:	c9 f7       	brne	.-14     	; 0x5fde <__ultoa_invert+0xa2>
    5fec:	62 0f       	add	r22, r18
    5fee:	73 1f       	adc	r23, r19
    5ff0:	84 1f       	adc	r24, r20
    5ff2:	95 1f       	adc	r25, r21
    5ff4:	a0 1d       	adc	r26, r0
    5ff6:	08 95       	ret

00005ff8 <__cmpsf2>:
    5ff8:	0e 94 01 30 	call	0x6002	; 0x6002 <__fp_cmp>
    5ffc:	08 f4       	brcc	.+2      	; 0x6000 <__cmpsf2+0x8>
    5ffe:	81 e0       	ldi	r24, 0x01	; 1
    6000:	08 95       	ret

00006002 <__fp_cmp>:
    6002:	99 0f       	add	r25, r25
    6004:	00 08       	sbc	r0, r0
    6006:	55 0f       	add	r21, r21
    6008:	aa 0b       	sbc	r26, r26
    600a:	e0 e8       	ldi	r30, 0x80	; 128
    600c:	fe ef       	ldi	r31, 0xFE	; 254
    600e:	16 16       	cp	r1, r22
    6010:	17 06       	cpc	r1, r23
    6012:	e8 07       	cpc	r30, r24
    6014:	f9 07       	cpc	r31, r25
    6016:	c0 f0       	brcs	.+48     	; 0x6048 <__fp_cmp+0x46>
    6018:	12 16       	cp	r1, r18
    601a:	13 06       	cpc	r1, r19
    601c:	e4 07       	cpc	r30, r20
    601e:	f5 07       	cpc	r31, r21
    6020:	98 f0       	brcs	.+38     	; 0x6048 <__fp_cmp+0x46>
    6022:	62 1b       	sub	r22, r18
    6024:	73 0b       	sbc	r23, r19
    6026:	84 0b       	sbc	r24, r20
    6028:	95 0b       	sbc	r25, r21
    602a:	39 f4       	brne	.+14     	; 0x603a <__fp_cmp+0x38>
    602c:	0a 26       	eor	r0, r26
    602e:	61 f0       	breq	.+24     	; 0x6048 <__fp_cmp+0x46>
    6030:	23 2b       	or	r18, r19
    6032:	24 2b       	or	r18, r20
    6034:	25 2b       	or	r18, r21
    6036:	21 f4       	brne	.+8      	; 0x6040 <__fp_cmp+0x3e>
    6038:	08 95       	ret
    603a:	0a 26       	eor	r0, r26
    603c:	09 f4       	brne	.+2      	; 0x6040 <__fp_cmp+0x3e>
    603e:	a1 40       	sbci	r26, 0x01	; 1
    6040:	a6 95       	lsr	r26
    6042:	8f ef       	ldi	r24, 0xFF	; 255
    6044:	81 1d       	adc	r24, r1
    6046:	81 1d       	adc	r24, r1
    6048:	08 95       	ret

0000604a <__ctype_isfalse>:
    604a:	99 27       	eor	r25, r25
    604c:	88 27       	eor	r24, r24

0000604e <__ctype_istrue>:
    604e:	08 95       	ret

00006050 <_exit>:
    6050:	f8 94       	cli

00006052 <__stop_program>:
    6052:	ff cf       	rjmp	.-2      	; 0x6052 <__stop_program>
